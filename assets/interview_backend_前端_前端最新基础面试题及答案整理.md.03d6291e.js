import{_ as a,o as s,c as e,V as t}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端最新基础面试题及答案整理.md","filePath":"interview/backend/前端/前端最新基础面试题及答案整理.md"}'),o={name:"interview/backend/前端/前端最新基础面试题及答案整理.md"},n=t(`<h3 id="_1、你有哪些性能优化的方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#1%E4%BD%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">1、你有哪些性能优化的方法？</a> <a class="header-anchor" href="#_1、你有哪些性能优化的方法" aria-label="Permalink to &quot;[1、你有哪些性能优化的方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#1你有哪些性能优化的方法)&quot;">​</a></h3><p><strong>1、</strong> 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip， CDN托管，data缓存 ，图片服务器。</p><p><strong>2、</strong> 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p><p><strong>3、</strong> 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p><p><strong>4、</strong> 当需要设置的样式很多时设置className而不是直接操作style。</p><p><strong>5、</strong> 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p><p><strong>6、</strong> 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p><p><strong>7、</strong> 图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。</p><p><strong>8、</strong> 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</p><h3 id="_2、用于预格式化文本的标签是" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#2%E7%94%A8%E4%BA%8E%E9%A2%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC%E7%9A%84%E6%A0%87%E7%AD%BE%E6%98%AF" target="_blank" rel="noreferrer">2、用于预格式化文本的标签是？</a> <a class="header-anchor" href="#_2、用于预格式化文本的标签是" aria-label="Permalink to &quot;[2、用于预格式化文本的标签是？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#2用于预格式化文本的标签是)&quot;">​</a></h3><p>预格式化就是保留文字在源码中的格式 最后显示出来样式与源码中的样式一致 所见即所得。</p><p>\`</p><h3 id="_3、变量作用域" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#3%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noreferrer">3、变量作用域?</a> <a class="header-anchor" href="#_3、变量作用域" aria-label="Permalink to &quot;[3、变量作用域?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#3变量作用域)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//变量作用域：一个变量的作用域是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，</span></span>
<span class="line"><span style="color:#f6f6f4;">//在js代码中任何地方都是有定义的。在函数内声明的变量只在函数体内有定义，它们是局部变量，</span></span>
<span class="line"><span style="color:#f6f6f4;">//作用域是局部性的。函数参数也是局部变量，它们只在函数体内有定义。</span></span>
<span class="line"><span style="color:#f6f6f4;">var a = &quot;&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">window.b=&#39;&#39;”;</span></span>
<span class="line"><span style="color:#f6f6f4;">function(e) {</span></span>
<span class="line"><span style="color:#f6f6f4;">       var c= &quot;&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">       d=&quot;&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">       e=&quot;&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;">function go() {</span></span>
<span class="line"><span style="color:#f6f6f4;">       console.info(this);//window</span></span>
<span class="line"><span style="color:#f6f6f4;">       return function() {</span></span>
<span class="line"><span style="color:#f6f6f4;">               console.info(this); // window</span></span>
<span class="line"><span style="color:#f6f6f4;">               return {</span></span>
<span class="line"><span style="color:#f6f6f4;">                b:function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">                       console.info(this); //b的父对象</span></span>
<span class="line"><span style="color:#f6f6f4;">                   }</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">       }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;">go()().b();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//变量作用域：一个变量的作用域是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，</span></span>
<span class="line"><span style="color:#24292e;">//在js代码中任何地方都是有定义的。在函数内声明的变量只在函数体内有定义，它们是局部变量，</span></span>
<span class="line"><span style="color:#24292e;">//作用域是局部性的。函数参数也是局部变量，它们只在函数体内有定义。</span></span>
<span class="line"><span style="color:#24292e;">var a = &quot;&quot;;</span></span>
<span class="line"><span style="color:#24292e;">window.b=&#39;&#39;”;</span></span>
<span class="line"><span style="color:#24292e;">function(e) {</span></span>
<span class="line"><span style="color:#24292e;">       var c= &quot;&quot;;</span></span>
<span class="line"><span style="color:#24292e;">       d=&quot;&quot;;</span></span>
<span class="line"><span style="color:#24292e;">       e=&quot;&quot;;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">function go() {</span></span>
<span class="line"><span style="color:#24292e;">       console.info(this);//window</span></span>
<span class="line"><span style="color:#24292e;">       return function() {</span></span>
<span class="line"><span style="color:#24292e;">               console.info(this); // window</span></span>
<span class="line"><span style="color:#24292e;">               return {</span></span>
<span class="line"><span style="color:#24292e;">                b:function(){</span></span>
<span class="line"><span style="color:#24292e;">                       console.info(this); //b的父对象</span></span>
<span class="line"><span style="color:#24292e;">                   }</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">       }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">go()().b();</span></span></code></pre></div><h3 id="_4、几种基本数据类型-复杂数据类型-值类型和引用数据类型-堆栈数据结构" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#4%E5%87%A0%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%A0%86%E6%A0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noreferrer">4、几种基本数据类型?复杂数据类型?值类型和引用数据类型?堆栈数据结构</a> <a class="header-anchor" href="#_4、几种基本数据类型-复杂数据类型-值类型和引用数据类型-堆栈数据结构" aria-label="Permalink to &quot;[4、几种基本数据类型?复杂数据类型?值类型和引用数据类型?堆栈数据结构](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#4几种基本数据类型复杂数据类型值类型和引用数据类型堆栈数据结构)&quot;">​</a></h3><p><strong>1、</strong> 基本数据类型：Undefined、Null、Boolean、Number、String</p><p><strong>2、</strong> 值类型：数值、布尔值、null、undefined。</p><p><strong>3、</strong> 引用类型：对象、数组、函数。</p><p><strong>4、</strong> 堆栈数据结构：是一种支持后进先出(LIFO)的集合,即后被插入的数据,先被取出!</p><p><strong>5、</strong> js数组中提供了以下几个方法可以让我们很方便实现堆栈：</p><p><strong>6、</strong> shift:从数组中把第一个元素删除，并返回这个元素的值。</p><p><strong>7、</strong> unshift: 在数组的开头添加一个或更多元素，并返回新的长度</p><p><strong>8、</strong> push:在数组的中末尾添加元素，并返回新的长度</p><p><strong>9、</strong> pop:从数组中把最后一个元素删除，并返回这个元素的值。</p><h3 id="_5、用过哪些设计模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#5%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">5、用过哪些设计模式？</a> <a class="header-anchor" href="#_5、用过哪些设计模式" aria-label="Permalink to &quot;[5、用过哪些设计模式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#5用过哪些设计模式)&quot;">​</a></h3><p><strong>工厂模式：</strong></p><p><strong>1、</strong> 工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法</p><p><strong>2、</strong> 主要好处就是可以消除对象间的耦合，通过使用工程方法而不是<code>new</code>关键字</p><p><strong>构造函数模式</strong></p><p><strong>1、</strong> 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于</p><p><strong>2、</strong> 直接将属性和方法赋值给 <code>this</code>对象;</p><h3 id="_6、选择器优先级是怎样的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#6%E9%80%89%E6%8B%A9%E5%99%A8%E4%BC%98%E5%85%88%E7%BA%A7%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84" target="_blank" rel="noreferrer">6、选择器优先级是怎样的？</a> <a class="header-anchor" href="#_6、选择器优先级是怎样的" aria-label="Permalink to &quot;[6、选择器优先级是怎样的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#6选择器优先级是怎样的)&quot;">​</a></h3><p>！important&gt;行内样式&gt;id 选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承</p><p>权重<a href="/docs/jump/super-jump/word.html?word=算法">算法</a>：</p><p>（0，0，0，0）==》第一个 0 对应的是 important 的个数，第二个 0 对应的是 id 选择器的个数，第三个 0 对</p><p>应的类选择器的个数，第四个 0 对应的是标签选择器的个数，就是当前选择器的权重。</p><p>比较：</p><p>先从第一个 0 开始比较，如果第一个 0 大，那么说明这个选择器的权重高，如果第一个相同，比较第二个，依次类推</p><h3 id="_7、常见的浏览器内核有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#7%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">7、常见的浏览器内核有哪些？</a> <a class="header-anchor" href="#_7、常见的浏览器内核有哪些" aria-label="Permalink to &quot;[7、常见的浏览器内核有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#7常见的浏览器内核有哪些)&quot;">​</a></h3><p><strong>1、</strong> <code>Trident内核</code>：IE,360，傲游，搜狗，世界之窗，腾讯等。<code>[又称MSHTML]</code></p><p><strong>2、</strong> <code>Gecko内核</code>：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</p><p><strong>3、</strong> <code>Presto内核</code>：Opera7及以上。 <code>[Opera内核原为：Presto，现为：Blink;]</code></p><p><strong>4、</strong> <code>Webkit内核</code>：Safari,Chrome等。 <code>[ Chrome的：Blink（WebKit的分支）]</code></p><h3 id="_8、http状态码及其含义" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#8http%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E5%90%AB%E4%B9%89" target="_blank" rel="noreferrer">8、HTTP状态码及其含义</a> <a class="header-anchor" href="#_8、http状态码及其含义" aria-label="Permalink to &quot;[8、HTTP状态码及其含义](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#8http状态码及其含义)&quot;">​</a></h3><p><strong>举例状态码类型</strong>:</p><table><thead><tr><th>状态码</th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Information（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td>2XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加的操作以完成请求</td></tr><tr><td>4XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5XX</td><td>Server Error（服务端错误状态码）</td><td>服务器处理请求出错</td></tr><tr><td>204</td><td>服务器成功处理，但未返回内容。</td><td></td></tr><tr><td>304</td><td>Not Modified 未修改。</td><td>所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求的语法错误，服务器无法理解</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器理解请求客户端的请求，但是拒绝执行此请求</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面</td></tr></tbody></table><h3 id="_9、spa应用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#9spa%E5%BA%94%E7%94%A8" target="_blank" rel="noreferrer">9、spa应用</a> <a class="header-anchor" href="#_9、spa应用" aria-label="Permalink to &quot;[9、spa应用](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#9spa应用)&quot;">​</a></h3><p>优点：用户体验好 、良好的前后端分离。</p><p><strong>缺点：</strong></p><p><strong>1、</strong> 不利于SEO。</p><p><strong>2、</strong> 初次加载耗时相对增多。</p><p><strong>3、</strong> 导航不可用，如果一定要导航需要自行实现前进、后退。</p><h3 id="_10、mvc-bfc" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#10mvc-bfc" target="_blank" rel="noreferrer">10、MVC BFC</a> <a class="header-anchor" href="#_10、mvc-bfc" aria-label="Permalink to &quot;[10、MVC BFC](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新基础面试题及答案整理.md#10mvc-bfc)&quot;">​</a></h3><p><code>mvc是模型(model)－视图(view)－控制器(controller)</code>的缩写，一种软件设计典范使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。<code>MVC对应Html，CSS，js。</code></p><p><code>BFC全称”Block Formatting Context”</code>, 中文为“<code>块级格式化上下文</code>”。流体特性：块状水平元素，如div元素（下同），在默认情况下（非浮动、绝对定位等），水平方向会自动填满外部的容器；<code>BFC元素特性表现原则就是，内部子元素不会影响外部的元素</code>。</p><h3 id="_11、javascript-代码中的-use-strict-是什么意思-使用它区别是什么" tabindex="-1">11、javascript 代码中的&quot;use strict&quot;;是什么意思 ? 使用它区别是什么？ <a class="header-anchor" href="#_11、javascript-代码中的-use-strict-是什么意思-使用它区别是什么" aria-label="Permalink to &quot;11、javascript 代码中的&quot;use strict&quot;;是什么意思 ? 使用它区别是什么？&quot;">​</a></h3><h3 id="_12、为什么要初始化css样式" tabindex="-1">12、为什么要初始化CSS样式? <a class="header-anchor" href="#_12、为什么要初始化css样式" aria-label="Permalink to &quot;12、为什么要初始化CSS样式?&quot;">​</a></h3><h3 id="_13、页面导入样式时-使用link和-import有什么区别" tabindex="-1">13、页面导入样式时，使用link和@import有什么区别 <a class="header-anchor" href="#_13、页面导入样式时-使用link和-import有什么区别" aria-label="Permalink to &quot;13、页面导入样式时，使用link和@import有什么区别&quot;">​</a></h3><h3 id="_14、png、jpg、gif-这些图片格式解释一下-分别什么时候用。有没有了解过webp" tabindex="-1">14、png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？ <a class="header-anchor" href="#_14、png、jpg、gif-这些图片格式解释一下-分别什么时候用。有没有了解过webp" aria-label="Permalink to &quot;14、png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？&quot;">​</a></h3><h3 id="_15、行内元素有哪些-块级元素有哪些-css的盒模型" tabindex="-1">15、行内元素有哪些?块级元素有哪些?CSS的盒模型? <a class="header-anchor" href="#_15、行内元素有哪些-块级元素有哪些-css的盒模型" aria-label="Permalink to &quot;15、行内元素有哪些?块级元素有哪些?CSS的盒模型?&quot;">​</a></h3><h3 id="_16、jq中有几种选择器-分别是什么" tabindex="-1">16、Jq中有几种选择器?分别是什么? <a class="header-anchor" href="#_16、jq中有几种选择器-分别是什么" aria-label="Permalink to &quot;16、Jq中有几种选择器?分别是什么?&quot;">​</a></h3><h3 id="_17、如何实现浏览器内多个标签页之间的通信-阿里" tabindex="-1">17、如何实现浏览器内多个标签页之间的通信? (阿里) <a class="header-anchor" href="#_17、如何实现浏览器内多个标签页之间的通信-阿里" aria-label="Permalink to &quot;17、如何实现浏览器内多个标签页之间的通信? (阿里)&quot;">​</a></h3><h3 id="_18、常见浏览器所用内核" tabindex="-1">18、常见浏览器所用内核 <a class="header-anchor" href="#_18、常见浏览器所用内核" aria-label="Permalink to &quot;18、常见浏览器所用内核&quot;">​</a></h3><h3 id="_19、-before-和-after中双冒号和单冒号有什么区别-解释一下这2个伪元素的作用" tabindex="-1">19、::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用 <a class="header-anchor" href="#_19、-before-和-after中双冒号和单冒号有什么区别-解释一下这2个伪元素的作用" aria-label="Permalink to &quot;19、::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用&quot;">​</a></h3><h3 id="_20、jq绑定事件的几种方式-on-bind" tabindex="-1">20、Jq绑定事件的几种方式？on bind ? <a class="header-anchor" href="#_20、jq绑定事件的几种方式-on-bind" aria-label="Permalink to &quot;20、Jq绑定事件的几种方式？on bind ?&quot;">​</a></h3><h3 id="_21、arguments-的对象是什么" tabindex="-1">21、arguments 的对象是什么？ <a class="header-anchor" href="#_21、arguments-的对象是什么" aria-label="Permalink to &quot;21、arguments 的对象是什么？&quot;">​</a></h3><h3 id="_22、如何在-js-中创建对象" tabindex="-1">22、如何在 JS 中创建对象？ <a class="header-anchor" href="#_22、如何在-js-中创建对象" aria-label="Permalink to &quot;22、如何在 JS 中创建对象？&quot;">​</a></h3><h3 id="_23、css-sprite是什么-有什么优缺点" tabindex="-1">23、css sprite是什么,有什么优缺点 <a class="header-anchor" href="#_23、css-sprite是什么-有什么优缺点" aria-label="Permalink to &quot;23、css sprite是什么,有什么优缺点&quot;">​</a></h3><h3 id="_24、简述一下src与href的区别。" tabindex="-1">24、简述一下src与href的区别。 <a class="header-anchor" href="#_24、简述一下src与href的区别。" aria-label="Permalink to &quot;24、简述一下src与href的区别。&quot;">​</a></h3><h3 id="_25、有一个导航栏在chrome-里面样式完好-在-ie-里文字都聚到一起了-是哪个兼容性问题" tabindex="-1">25、有一个导航栏在chrome 里面样式完好？在 IE 里文字都聚到一起了，是哪个兼容性问题？ <a class="header-anchor" href="#_25、有一个导航栏在chrome-里面样式完好-在-ie-里文字都聚到一起了-是哪个兼容性问题" aria-label="Permalink to &quot;25、有一个导航栏在chrome 里面样式完好？在 IE 里文字都聚到一起了，是哪个兼容性问题？&quot;">​</a></h3><h3 id="_26、eval是做什么的" tabindex="-1">26、eval是做什么的？ <a class="header-anchor" href="#_26、eval是做什么的" aria-label="Permalink to &quot;26、eval是做什么的？&quot;">​</a></h3><h3 id="_27、css3新增伪类有那些" tabindex="-1">27、CSS3新增伪类有那些? <a class="header-anchor" href="#_27、css3新增伪类有那些" aria-label="Permalink to &quot;27、CSS3新增伪类有那些?&quot;">​</a></h3><h3 id="_28、" tabindex="-1">28、** <a class="header-anchor" href="#_28、" aria-label="Permalink to &quot;28、**&quot;">​</a></h3><h3 id="_29、如何居中div-如何居中一个浮动元素-如何让绝对定位的div居中" tabindex="-1">29、如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？ <a class="header-anchor" href="#_29、如何居中div-如何居中一个浮动元素-如何让绝对定位的div居中" aria-label="Permalink to &quot;29、如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？&quot;">​</a></h3><h3 id="_30、简述下工作流程" tabindex="-1">30、简述下工作流程### <a class="header-anchor" href="#_30、简述下工作流程" aria-label="Permalink to &quot;30、简述下工作流程###&quot;">​</a></h3><h3 id="_31、webpack的优点" tabindex="-1">31、webpack的优点 <a class="header-anchor" href="#_31、webpack的优点" aria-label="Permalink to &quot;31、webpack的优点&quot;">​</a></h3>`,76),r=[n];function l(p,c,i,d,E,h){return s(),e("div",null,r)}const f=a(o,[["render",l]]);export{A as __pageData,f as default};
