import{_ as o,o as b,c as a,V as e}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/dubbo/dubbo-04.md","filePath":"interview/backend/dubbo/dubbo-04.md"}'),r={name:"interview/backend/dubbo/dubbo-04.md"},t=e('<h3 id="_1、dubbo-集群提供了哪些负载均衡策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1dubbo-%E9%9B%86%E7%BE%A4%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E4%BA%9B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">1、Dubbo 集群提供了哪些负载均衡策略？</a> <a class="header-anchor" href="#_1、dubbo-集群提供了哪些负载均衡策略" aria-label="Permalink to &quot;[1、Dubbo 集群提供了哪些负载均衡策略？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#1dubbo-集群提供了哪些负载均衡策略)&quot;">​</a></h3><p><strong>1、</strong> Random LoadBalance: 随机选取提供者策略，有利于动态调整提供者权重。截面碰撞率高，调用次数越多，分布越均匀；</p><p><strong>2、</strong> RoundRobin LoadBalance: 轮循选取提供者策略，平均分布，但是存在请求累积的问题；</p><p><strong>3、</strong> LeastActive LoadBalance: 最少活跃调用策略，解决慢提供者接收更少的请求；</p><p><strong>4、</strong> ConstantHash LoadBalance: 一致性 Hash 策略，使相同参数请求总是发到同一提供者，一台机器宕机，可以基于虚拟节点，分摊至其他提供者，避免引起提供者的剧烈变动；</p><p><strong>5、</strong> 缺省时为 Random 随机调用</p><h3 id="_2、rpc的实现基础" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2rpc%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%9F%BA%E7%A1%80" target="_blank" rel="noreferrer">2、RPC的实现基础？</a> <a class="header-anchor" href="#_2、rpc的实现基础" aria-label="Permalink to &quot;[2、RPC的实现基础？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#2rpc的实现基础)&quot;">​</a></h3><p><strong>1、</strong> 需要有非常高效的网络通信，比如一般选择Netty作为网络通信框架；</p><p><strong>2、</strong> 需要有比较高效的序列化框架，比如谷歌的Protobuf序列化框架；</p><p><strong>3、</strong> 可靠的寻址方式（主要是提供服务的发现），比如可以使用Zookeeper来注册服务等等；</p><p><strong>4、</strong> 如果是带会话（状态）的RPC调用，还需要有会话和状态保持的功能；</p><h3 id="_3、dubbo-通信协议-dubbo-协议适用范围和适用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3dubbo-%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE-dubbo-%E5%8D%8F%E8%AE%AE%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4%E5%92%8C%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">3、dubbo 通信协议 dubbo 协议适用范围和适用场景</a> <a class="header-anchor" href="#_3、dubbo-通信协议-dubbo-协议适用范围和适用场景" aria-label="Permalink to &quot;[3、dubbo 通信协议 dubbo 协议适用范围和适用场景](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#3dubbo-通信协议-dubbo-协议适用范围和适用场景)&quot;">​</a></h3><p>适用范围：传入传出参数数据包较小（建议小于 100K），消费者比提供者个数多，单一消费者无法压满提供者，尽量不要用 dubbo 协议传输大文件或超大字符串。</p><p>适用场景：常规远程服务方法调用</p><p>dubbo 协议补充：</p><p>连接个数：单连接</p><p>连接方式：长连接</p><p>传输协议：TCP</p><p>传输方式：NIO 异步传输</p><p>序列化：Hessian 二进制序列化</p><h3 id="_4、dubbo-是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4dubbo-%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">4、Dubbo 是什么？</a> <a class="header-anchor" href="#_4、dubbo-是什么" aria-label="Permalink to &quot;[4、Dubbo 是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#4dubbo-是什么)&quot;">​</a></h3><p>Dubbo 是一款高性能、轻量级的开源 RPC 框架，提供服务自动注册、自动发现等高效服务治理方案， 可以和 Spring 框架无缝集成。</p><h3 id="_5、dubbo-默认采用注册中心" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5dubbo-%E9%BB%98%E8%AE%A4%E9%87%87%E7%94%A8%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" target="_blank" rel="noreferrer">5、Dubbo 默认采用注册中心？</a> <a class="header-anchor" href="#_5、dubbo-默认采用注册中心" aria-label="Permalink to &quot;[5、Dubbo 默认采用注册中心？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#5dubbo-默认采用注册中心)&quot;">​</a></h3><p>采用 Zookeeper</p><h3 id="_6、dubbo-spi-和-java-spi-区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6dubbo-spi-%E5%92%8C-java-spi-%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、Dubbo SPI 和 Java SPI 区别？</a> <a class="header-anchor" href="#_6、dubbo-spi-和-java-spi-区别" aria-label="Permalink to &quot;[6、Dubbo SPI 和 Java SPI 区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#6dubbo-spi-和-java-spi-区别)&quot;">​</a></h3><p><strong>JDK SPI：</strong></p><p>JDK 标准的 SPI 会一次性加载所有的扩展实现，如果有的扩展很耗时，但也没用上，很浪费资源。所以只希望加载某个的实现，就不现实了</p><p><strong>DUBBO SPI：</strong></p><p><strong>1、</strong> 对 Dubbo 进行扩展，不需要改动 Dubbo 的源码</p><p><strong>2、</strong> 延迟加载，可以一次只加载自己想要加载的扩展实现。</p><p><strong>3、</strong> 增加了对扩展点 IOC 和 AOP 的支持，一个扩展点可以直接 setter 注入其它扩展点。</p><p><strong>4、</strong> Dubbo 的扩展机制能很好的支持第三方 IoC 容器，默认支持 Spring Bean。</p><h3 id="_7、dubbo-有些哪些注册中心" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7dubbo-%E6%9C%89%E4%BA%9B%E5%93%AA%E4%BA%9B%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83" target="_blank" rel="noreferrer">7、Dubbo 有些哪些注册中心？</a> <a class="header-anchor" href="#_7、dubbo-有些哪些注册中心" aria-label="Permalink to &quot;[7、Dubbo 有些哪些注册中心？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#7dubbo-有些哪些注册中心)&quot;">​</a></h3><p><strong>1、</strong> Multicast 注册中心：Multicast 注册中心不需要任何中心节点，只要广播地址，就能进行服务注册和发现。基于网络中组播传输实现；</p><p><strong>2、</strong> Zookeeper 注册中心：基于分布式协调系统 Zookeeper 实现，采用Zookeeper 的 watch 机制实现数据变更；</p><p><strong>3、</strong> Redis 注册中心：基于 Redis 实现，采用 key/Map 存储，住 key 存储服务名和类型， Map 中 key 存储服务 URL， value 服务过期时间。基于 Redis 的/订阅模式通知数据变更；</p><p><strong>4、</strong> Simple 注册中心</p><h3 id="_8、dubbo-超时时间怎样设置" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8dubbo-%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E6%80%8E%E6%A0%B7%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">8、Dubbo 超时时间怎样设置？</a> <a class="header-anchor" href="#_8、dubbo-超时时间怎样设置" aria-label="Permalink to &quot;[8、Dubbo 超时时间怎样设置？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#8dubbo-超时时间怎样设置)&quot;">​</a></h3><p><strong>Dubbo 超时时间设置有两种方式：</strong></p><p>服务提供者端设置超时时间，在 Dubbo 的用户文档中，推荐如果能在服务端多配置就尽量多配置，因为服务提供者比消费者更清楚自己提供的服务特性。</p><p>服务消费者端设置超时时间，如果在消费者端设置了超时时间，以消费者端为主，即优先级更高。因为服务调用方设置超时时间控制性更灵活。如果消费方超时，服务端线程不会定制，会产生警告。</p><h3 id="_9、dubbo-telnet-命令能做什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9dubbo-telnet-%E5%91%BD%E4%BB%A4%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、Dubbo telnet 命令能做什么？</a> <a class="header-anchor" href="#_9、dubbo-telnet-命令能做什么" aria-label="Permalink to &quot;[9、Dubbo telnet 命令能做什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#9dubbo-telnet-命令能做什么)&quot;">​</a></h3><p>dubbo 服务发布之后，我们可以利用 telnet 命令进行调试、管理。Dubbo2.0.5 以上版本服务提供端口支持 telnet 命令</p><h3 id="_10、dubbo-和-spring-cloud-有什么哪些区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10dubbo-%E5%92%8C-spring-cloud-%E6%9C%89%E4%BB%80%E4%B9%88%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">10、Dubbo 和 Spring Cloud 有什么哪些区别？</a> <a class="header-anchor" href="#_10、dubbo-和-spring-cloud-有什么哪些区别" aria-label="Permalink to &quot;[10、Dubbo 和 Spring Cloud 有什么哪些区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题，2021年面试题及答案汇总.md#10dubbo-和-spring-cloud-有什么哪些区别)&quot;">​</a></h3><p>Dubbo 底层是使用 Netty 这样的 NIO 框架，是基于 TCP 协议传输的，配合以 Hession 序列化完成 RPC 通信。</p><p>Spring Cloud 是基于 Http 协议 Rest 接口调用远程过程的通信，相对来说 Http 请求会有更大的报文，占的带宽也会更多。但是 REST 相比 RPC 更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更为合适，至于注重通信速度还是方便灵活性，具体情况具体考虑。</p><h3 id="_11、dubbo-在安全机制方面是如何解决" tabindex="-1">11、Dubbo 在安全机制方面是如何解决？ <a class="header-anchor" href="#_11、dubbo-在安全机制方面是如何解决" aria-label="Permalink to &quot;11、Dubbo 在安全机制方面是如何解决？&quot;">​</a></h3><h3 id="_12、dubbo的集群容错方案有哪些" tabindex="-1">12、Dubbo的集群容错方案有哪些？ <a class="header-anchor" href="#_12、dubbo的集群容错方案有哪些" aria-label="Permalink to &quot;12、Dubbo的集群容错方案有哪些？&quot;">​</a></h3><h3 id="_13、服务上线怎么不影响旧版本" tabindex="-1">13、服务上线怎么不影响旧版本？ <a class="header-anchor" href="#_13、服务上线怎么不影响旧版本" aria-label="Permalink to &quot;13、服务上线怎么不影响旧版本？&quot;">​</a></h3><h3 id="_14、服务提供者能实现失效踢出是什么原理" tabindex="-1">14、服务提供者能实现失效踢出是什么原理？ <a class="header-anchor" href="#_14、服务提供者能实现失效踢出是什么原理" aria-label="Permalink to &quot;14、服务提供者能实现失效踢出是什么原理？&quot;">​</a></h3><h3 id="_15、rpc使用了哪些关键技术-反序列化" tabindex="-1">15、RPC使用了哪些关键技术，反序列化 <a class="header-anchor" href="#_15、rpc使用了哪些关键技术-反序列化" aria-label="Permalink to &quot;15、RPC使用了哪些关键技术，反序列化&quot;">​</a></h3><h3 id="_16、dubbo-类似的分布式框架还有哪些" tabindex="-1">16、Dubbo 类似的分布式框架还有哪些？ <a class="header-anchor" href="#_16、dubbo-类似的分布式框架还有哪些" aria-label="Permalink to &quot;16、Dubbo 类似的分布式框架还有哪些？&quot;">​</a></h3><h3 id="_17、dubbo-如何优雅停机" tabindex="-1">17、Dubbo 如何优雅停机？ <a class="header-anchor" href="#_17、dubbo-如何优雅停机" aria-label="Permalink to &quot;17、Dubbo 如何优雅停机？&quot;">​</a></h3><h3 id="_18、dubbo可以对结果进行缓存吗" tabindex="-1">18、Dubbo可以对结果进行缓存吗？ <a class="header-anchor" href="#_18、dubbo可以对结果进行缓存吗" aria-label="Permalink to &quot;18、Dubbo可以对结果进行缓存吗？&quot;">​</a></h3><h3 id="_19、dubbo-配置文件是如何加载到spring中的" tabindex="-1">19、Dubbo 配置文件是如何加载到Spring中的？ <a class="header-anchor" href="#_19、dubbo-配置文件是如何加载到spring中的" aria-label="Permalink to &quot;19、Dubbo 配置文件是如何加载到Spring中的？&quot;">​</a></h3><h3 id="_20、dubbo-可以对结果进行缓存吗" tabindex="-1">20、Dubbo 可以对结果进行缓存吗？ <a class="header-anchor" href="#_20、dubbo-可以对结果进行缓存吗" aria-label="Permalink to &quot;20、Dubbo 可以对结果进行缓存吗？&quot;">​</a></h3><h3 id="_21、dubbo-推荐用什么协议" tabindex="-1">21、Dubbo 推荐用什么协议？ <a class="header-anchor" href="#_21、dubbo-推荐用什么协议" aria-label="Permalink to &quot;21、Dubbo 推荐用什么协议？&quot;">​</a></h3><h3 id="_22、dubbo-支持分布式事务吗" tabindex="-1">22、Dubbo 支持分布式事务吗？ <a class="header-anchor" href="#_22、dubbo-支持分布式事务吗" aria-label="Permalink to &quot;22、Dubbo 支持分布式事务吗？&quot;">​</a></h3><h3 id="_23、dubbo-服务注册与发现的流程" tabindex="-1">23、Dubbo 服务注册与发现的流程？ <a class="header-anchor" href="#_23、dubbo-服务注册与发现的流程" aria-label="Permalink to &quot;23、Dubbo 服务注册与发现的流程？&quot;">​</a></h3><h3 id="_24、dubbo-通信协议-dubbo-协议为什么不能传大包" tabindex="-1">24、dubbo 通信协议 dubbo 协议为什么不能传大包； <a class="header-anchor" href="#_24、dubbo-通信协议-dubbo-协议为什么不能传大包" aria-label="Permalink to &quot;24、dubbo 通信协议 dubbo 协议为什么不能传大包；&quot;">​</a></h3><h3 id="_25、默认使用的是什么通信框架-还有别的选择吗" tabindex="-1">25、默认使用的是什么通信框架，还有别的选择吗? <a class="header-anchor" href="#_25、默认使用的是什么通信框架-还有别的选择吗" aria-label="Permalink to &quot;25、默认使用的是什么通信框架，还有别的选择吗?&quot;">​</a></h3><h3 id="_26、dubbo-与-spring-的关系" tabindex="-1">26、Dubbo 与 Spring 的关系？ <a class="header-anchor" href="#_26、dubbo-与-spring-的关系" aria-label="Permalink to &quot;26、Dubbo 与 Spring 的关系？&quot;">​</a></h3><h3 id="_27、如何解决服务调用链过长的问题" tabindex="-1">27、如何解决服务调用链过长的问题？ <a class="header-anchor" href="#_27、如何解决服务调用链过长的问题" aria-label="Permalink to &quot;27、如何解决服务调用链过长的问题？&quot;">​</a></h3><h3 id="_28、dubbo-超时设置有哪些方式" tabindex="-1">28、Dubbo 超时设置有哪些方式？ <a class="header-anchor" href="#_28、dubbo-超时设置有哪些方式" aria-label="Permalink to &quot;28、Dubbo 超时设置有哪些方式？&quot;">​</a></h3><h3 id="_29、dubbo-的架构设计" tabindex="-1">29、Dubbo 的架构设计 <a class="header-anchor" href="#_29、dubbo-的架构设计" aria-label="Permalink to &quot;29、Dubbo 的架构设计&quot;">​</a></h3><h3 id="_30、dubbo-支持哪些序列化方式" tabindex="-1">30、Dubbo 支持哪些序列化方式？ <a class="header-anchor" href="#_30、dubbo-支持哪些序列化方式" aria-label="Permalink to &quot;30、Dubbo 支持哪些序列化方式？&quot;">​</a></h3>',66),u=[t];function d(s,E,n,i,l,h){return b(),a("div",null,u)}const p=o(r,[["render",d]]);export{B as __pageData,p as default};
