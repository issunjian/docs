import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/algorithm/delete-node-in-a-bst.png",o="/docs/algorithm/delete-node-in-a-bst2.png",e="/docs/algorithm/delete-node-in-a-bst3.png",A=JSON.parse('{"title":"LeetCode 450. 删除二叉搜索树中的节点","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/binary-tree/450.删除二叉搜索树中的节点.md","filePath":"algorithm/binary-tree/450.删除二叉搜索树中的节点.md"}'),t={name:"algorithm/binary-tree/450.删除二叉搜索树中的节点.md"},c=l(`<h1 id="leetcode-450-删除二叉搜索树中的节点" tabindex="-1">LeetCode 450. 删除二叉搜索树中的节点 <a class="header-anchor" href="#leetcode-450-删除二叉搜索树中的节点" aria-label="Permalink to &quot;LeetCode 450. 删除二叉搜索树中的节点&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给定一个二叉搜索树的根节点 <strong>root</strong> 和一个值 <strong>key</strong>，删除二叉搜索树中的 <strong>key</strong> 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点； 如果找到了，删除它。 说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">6</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> \\   \\</span></span>
<span class="line"><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">给定需要删除的节点值是 </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">，所以我们首先找到 </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> 这个节点，然后删除它。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">一个正确的答案是 [</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">], 如下图所示。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">6</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;">     \\</span></span>
<span class="line"><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">       </span><span style="color:#BF9EEE;">7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">另一个正确答案是 [</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">]。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">6</span></span>
<span class="line"><span style="color:#F6F6F4;">   \\   \\</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> \\   \\</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">给定需要删除的节点值是 </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">，所以我们首先找到 </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> 这个节点，然后删除它。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">一个正确的答案是 [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">], 如下图所示。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">     \\</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">另一个正确答案是 [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">]。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;">   \\   \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">7</span></span></code></pre></div><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/delete-node-in-a-bst" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/delete-node-in-a-bst</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p>对于这道题，我们必须先了解一下二叉搜索树（BST）的性质，如下：</p><p>BST 性质</p><ul><li>中序遍历是升序</li><li>left 小于当前节点，right 大于当前节点</li><li>左子树、右子树也要是 BST</li></ul><p>了解了性质之后，我们知道要查找对应 <code>key</code> 值，可以与根节点进行比较，如果小于根节点，直接去左子树找就好了，如果大于根节点，直接去右子树找就好了。</p><p>而对于刚好等于根节点的话，我拿着大佬的图解来看看几种情况：</p><p>第一种情况，如果删除节点仅有右孩子，直接指向右孩子</p><p><img src="`+p+'" alt=""></p><p>第二种情况，如果删除节点仅有左孩子，直接指向左孩子</p><p><img src="'+o+'" alt=""></p><p>第三种情况，如果删除节点左右孩子都有，那么我们按照题意可以有两种删除方法：</p><p>① 找到要删除节点左子树的最右边的节点，即前驱的最大值（由 BST 性质得到）替换当前 root 节点，然后删除这个前驱</p><p>② 找到要删除节点右子树的最左边的节点，即后继最小值（由 BST 性质得到）替换当前 root 节点，然后删除这个后继</p><p><img src="'+e+`" alt=""></p><p>参考 <a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/solution/tu-jie-di-gui-shi-xian-shan-chu-bstzhong-de-jie-di/">lulu</a> 大佬图解</p><p>代码提供了两种解法，对于前两种情况处理是一样的，只是对于最后一种情况，可以删除前驱的最大值，或者删除后继的最小值。</p><p><strong>删除前驱的最大值代码</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{TreeNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">root</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{number}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">key</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{TreeNode}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 判断值是否小于root，小于走左子树，大于走右子树</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> root.val) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    root.left </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;">(root.left, key);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> root.val) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    root.right </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;">(root.right, key);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 1.如果删除节点没有左右子树，直接删除即可</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 2.如果删除节点仅有左孩子，直接指向左孩子</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.left;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 3.如果删除节点仅有右孩子，直接指向右孩子</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> root.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.right;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 4.如果左右孩子都有，本代码采用方式是将前驱的最大值替换root的值</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.left;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (last.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last.right;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      root.val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 然后删除这个前驱最大值节点即可</span></span>
<span class="line"><span style="color:#F6F6F4;">      root.left </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;">(root.left, last.val);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> root;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">key</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断值是否小于root，小于走左子树，大于走右子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> root.val) {</span></span>
<span class="line"><span style="color:#24292E;">    root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.left, key);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> root.val) {</span></span>
<span class="line"><span style="color:#24292E;">    root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.right, key);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1.如果删除节点没有左右子树，直接删除即可</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) {</span></span>
<span class="line"><span style="color:#24292E;">      root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2.如果删除节点仅有左孩子，直接指向左孩子</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) {</span></span>
<span class="line"><span style="color:#24292E;">      root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.left;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 3.如果删除节点仅有右孩子，直接指向右孩子</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> root.right) {</span></span>
<span class="line"><span style="color:#24292E;">      root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.right;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 4.如果左右孩子都有，本代码采用方式是将前驱的最大值替换root的值</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.left;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (last.right) {</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last.right;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      root.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last.val;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 然后删除这个前驱最大值节点即可</span></span>
<span class="line"><span style="color:#24292E;">      root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.left, last.val);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>删除后继的最小值代码</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{TreeNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">root</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{number}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">key</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{TreeNode}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 判断值是否小于root，小于走左子树，大于走右子树</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> root.val) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    root.left </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;">(root.left, key);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> root.val) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    root.right </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;">(root.right, key);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 1.如果删除节点没有左右子树，直接删除即可</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 2.如果删除节点仅有左孩子，直接指向左孩子</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.left;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 3.如果删除节点仅有右孩子，直接指向右孩子</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> root.right) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.right;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 4.如果左右孩子都有，本代码采用方式是将后继的最小值替换root的值</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.right;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (last.left) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last.left;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      root.val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 然后删除这个后继最小值节点即可</span></span>
<span class="line"><span style="color:#F6F6F4;">      root.right </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deleteNode</span><span style="color:#F6F6F4;">(root.right, last.val);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> root;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;"> * function TreeNode(val, left, right) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.left = (left===undefined ? null : left)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.right = (right===undefined ? null : right)</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">key</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 判断值是否小于root，小于走左子树，大于走右子树</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> root.val) {</span></span>
<span class="line"><span style="color:#24292E;">    root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.left, key);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> root.val) {</span></span>
<span class="line"><span style="color:#24292E;">    root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.right, key);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1.如果删除节点没有左右子树，直接删除即可</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) {</span></span>
<span class="line"><span style="color:#24292E;">      root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 2.如果删除节点仅有左孩子，直接指向左孩子</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right) {</span></span>
<span class="line"><span style="color:#24292E;">      root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.left;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 3.如果删除节点仅有右孩子，直接指向右孩子</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> root.right) {</span></span>
<span class="line"><span style="color:#24292E;">      root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.right;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 4.如果左右孩子都有，本代码采用方式是将后继的最小值替换root的值</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.right;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (last.left) {</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last.left;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      root.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last.val;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 然后删除这个后继最小值节点即可</span></span>
<span class="line"><span style="color:#24292E;">      root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deleteNode</span><span style="color:#24292E;">(root.right, last.val);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">学如逆水行舟，不进则退</span></span></code></pre></div>`,29),r=[c];function y(F,i,E,C,d,B){return n(),a("div",null,r)}const f=s(t,[["render",y]]);export{A as __pageData,f as default};
