import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"数值比较和排序的常用方法","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/基础/数值比较.md","filePath":"java/javase/基础/数值比较.md"}'),p={name:"java/javase/基础/数值比较.md"},o=l(`<h1 id="数值比较和排序的常用方法" tabindex="-1">数值比较和排序的常用方法 <a class="header-anchor" href="#数值比较和排序的常用方法" aria-label="Permalink to &quot;数值比较和排序的常用方法&quot;">​</a></h1><hr><h2 id="等值判断" tabindex="-1">等值判断 <a class="header-anchor" href="#等值判断" aria-label="Permalink to &quot;等值判断&quot;">​</a></h2><p>Object 类实现了 equals 方法 ，用于比较两个数据元素是否相等。</p><p>浮点类型由于精度丢失问题，进行等值判断常出现错误。如果有需求推荐使用 <a href="/docs/java/数据类型.html?id=bigdecimal-类">BigDecimal 类</a>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(a.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(b));         </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20.0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10.0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10.0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(a.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(b));         </span><span style="color:#7B7F8B;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(b));         </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(a.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(b));         </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="和-的区别" tabindex="-1">和 == 的区别 <a class="header-anchor" href="#和-的区别" aria-label="Permalink to &quot;和 == 的区别&quot;">​</a></h3><ol><li><p>对于基本类型，两者等价：判断数据是否相等。</p></li><li><p>对于对象（如 String 类）：</p></li></ol><ul><li><strong>==</strong>：比较两个元素内存地址是否相等，即是否是同一个元素。</li><li><strong>equals 方法</strong>：比较两个元素内容是否一致。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s1 </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> s2);                 </span><span style="color:#7B7F8B;">// 判断两个引用指向的内存地址是否相等  </span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s1.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(s2));            </span><span style="color:#7B7F8B;">// 判断两个引用指向的内存地址是否相等（s1 为空抛出空指针异常）</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Objects.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(s1,s2));    </span><span style="color:#7B7F8B;">// 判断两个引用指向的元素是否一致（推荐）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2);                 </span><span style="color:#6A737D;">// 判断两个引用指向的内存地址是否相等  </span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(s2));            </span><span style="color:#6A737D;">// 判断两个引用指向的内存地址是否相等（s1 为空抛出空指针异常）</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(s1,s2));    </span><span style="color:#6A737D;">// 判断两个引用指向的元素是否一致（推荐）</span></span></code></pre></div><h3 id="重写-equals-方法" tabindex="-1">重写 equals 方法 <a class="header-anchor" href="#重写-equals-方法" aria-label="Permalink to &quot;重写 equals 方法&quot;">​</a></h3><p>对于用户自定义类，正常使用 equals 方法需要进行重写。<strong>重写 equals 方法必须重写 hashcode 方法</strong>：以保证相同对象拥有相同的哈希地址。这样才能正常地把该类对象放入 HashSet/HashMap 等集合框架中查找。</p><p><em>Object 类的 hashcode 方法是本地方法（底层用 c/c++ 实现），直接返回对象的内存地址。</em></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">User</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> ID;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    ......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> obj)  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(obj </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(obj </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> User){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> other </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (User) obj;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.ID, other.ID) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name, other.name)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">17</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (ID </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ID.</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (name </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> name.</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ID;</span></span>
<span class="line"><span style="color:#24292E;">    String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    ......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> obj)  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> User){</span></span>
<span class="line"><span style="color:#24292E;">            User other </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (User) obj;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ID, other.ID) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name, other.name)){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">17</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (ID </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ID.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">31</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (name </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="数值比较" tabindex="-1">数值比较 <a class="header-anchor" href="#数值比较" aria-label="Permalink to &quot;数值比较&quot;">​</a></h2><p>Comparator 接口和 Comparable 接口都用于比较两个元素的大小：</p><ol><li><p>Comparable 接口位于 java.lang 包内，定义在要比较的实体类内部：包含 compareTo 方法。</p></li><li><p>Comparator 接口位于 java.util 包内，实现在类的外部：包含 compare 方法和 equals 方法。</p></li></ol><p><em>Comparator 接口的 equals 方法和 Object 类的 equals 方法不同， Object 类的 equals 方法实现在实体类的内部。</em></p><h3 id="compareto-方法" tabindex="-1">compareTo 方法 <a class="header-anchor" href="#compareto-方法" aria-label="Permalink to &quot;compareTo 方法&quot;">​</a></h3><p>Java 自带数据类型均已实现 Comparable 接口并重写 compareTo 方法，默认情况下</p><ul><li>如果 s1 等于 s2，则返回 0；</li><li>如果 s1 小于 s2，则返回小于 0 的值；</li><li>如果 s1 大于 s2，则返回大于 0 的值。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">90</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s1.</span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(s2));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Integer s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Integer s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">90</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(s2));</span></span></code></pre></div><h3 id="compare-方法" tabindex="-1">compare 方法 <a class="header-anchor" href="#compare-方法" aria-label="Permalink to &quot;compare 方法&quot;">​</a></h3><p>Arrays/Collections 类定义了 sort 方法对数组或者集合元素进行排列，数值的比较通过调用 Comparator 接口的 compare 方法实现。</p><p>执行 sort 方法时如果没有重写 compare 方法，默认调用的 compare 方法将会直接调用数据类型的 compareTo 方法，使数据从小到大排列。如果是自定义数据类型且未实现 compareTo 方法，则必须重写 compare 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students);                      </span><span style="color:#7B7F8B;">// 对数组排序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students);                 </span><span style="color:#7B7F8B;">// 对集合元素排序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students);                      </span><span style="color:#6A737D;">// 对数组排序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students);                 </span><span style="color:#6A737D;">// 对集合元素排序</span></span></code></pre></div><p>开发者可以通过重写 compare 方法，实现自定义排列顺序。但要注意，如果数组中保存的是基础类型数据则无法自定义排序。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparator</span><span style="color:#F6F6F4;">&lt;Student&gt;() {          </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> compare(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">s1</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">s2</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">	    </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">s1</span><span style="color:#62E884;">.getID() </span><span style="color:#F286C4;">-</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">s2</span><span style="color:#62E884;">.getID();</span></span>
<span class="line"><span style="color:#62E884;">    }</span><span style="color:#F6F6F4;">			</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, (s1, s2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;">  s1.</span><span style="color:#62E884;">getID</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> s2.</span><span style="color:#62E884;">getID</span><span style="color:#F6F6F4;">());     </span><span style="color:#7B7F8B;">// 使用 Lamdba 表达式简写</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;() {          </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">s1</span><span style="color:#24292E;">, Student </span><span style="color:#E36209;">s2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1.</span><span style="color:#6F42C1;">getID</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">getID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }			</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, (s1, s2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">  s1.</span><span style="color:#6F42C1;">getID</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">getID</span><span style="color:#24292E;">());     </span><span style="color:#6A737D;">// 使用 Lamdba 表达式简写</span></span></code></pre></div><hr><h2 id="数据排序" tabindex="-1">数据排序 <a class="header-anchor" href="#数据排序" aria-label="Permalink to &quot;数据排序&quot;">​</a></h2><p>Arrays/Collections 类定义了 sort 方法对数组或者集合元素进行排列，数值的比较通过调用 Comparator 接口的 compare 方法实现。</p>`,32),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{u as __pageData,d as default};
