import{_ as n,o as a,c as l,V as p}from"./chunks/framework.c6d8cbec.js";const s="/docs/assets/1667646792308.56b3ec55.png",o="/docs/assets/1667641783744.4f40a7e8.png",t="/docs/assets/1667644579895.c5111b6b.png",e="/docs/assets/1667646630527.054e6212.png",c="/docs/assets/1667647023761.cbdbaa68.png",r="/docs/assets/1667647087356.cae92044.png",y="/docs/assets/1667647222054.368052e6.png",F="/docs/assets/1667647400490.6dbce381.png",i="/docs/assets/1667648201462.de6f9f37.png",E="/docs/assets/1667649164429.aba0b5ba.png",u="/docs/assets/1667649331568.9a54ea15.png",C="/docs/assets/1667649379223.ecc62bc5.png",D="/docs/assets/1667649509262.eee69f26.png",d="/docs/assets/1667649788535.60ad6382.png",g="/docs/assets/1667649867150.c44d1bcb.png",A="/docs/assets/1667650170239.17d7d5b4.png",m="/docs/assets/1667650277680.6b90d191.png",h="/docs/assets/1667650503532.23e5aa5d.png",f="/docs/assets/1667651303731.8203680b.png",q="/docs/assets/1667659321570.59d6e62f.png",S="/docs/assets/1667659732559.e17ceade.png",B="/docs/assets/1667660323234.144f4877.png",b="/docs/assets/1667661022346.5536d883.png",N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/javase/08-Map集合、Stream流、File类.md","filePath":"backend/javase/08-Map集合、Stream流、File类.md"}'),v={name:"backend/javase/08-Map集合、Stream流、File类.md"},w=p('<h2 id="map集合、stream流、file类" tabindex="-1">Map集合、Stream流、File类 <a class="header-anchor" href="#map集合、stream流、file类" aria-label="Permalink to &quot;Map集合、Stream流、File类&quot;">​</a></h2><h2 id="一、map集合" tabindex="-1">一、Map集合 <a class="header-anchor" href="#一、map集合" aria-label="Permalink to &quot;一、Map集合&quot;">​</a></h2><p>Map接口下面的是三个实现类HashMap、LinkedHashMap、TreeMap。实际上这三个实现类并没有什么特有方法需要我们学习，它们的方法就是前面学习Map的方法。这里我们主要学习它们的底层原理。</p><h3 id="_1-1-hashmap" tabindex="-1">1.1 HashMap <a class="header-anchor" href="#_1-1-hashmap" aria-label="Permalink to &quot;1.1 HashMap&quot;">​</a></h3><p>首先，我们学习HashMap集合的底层原理。前面我们学习过HashSet的底层原理，实际上HashMap底层原理和HashSet是一样的。为什么这么说呢？因为我们往HashSet集合中添加元素时，实际上是把元素作为添加添加到了HashMap集合中。</p><p>下面是Map集合的体系结构，HashMap集合的特点是由键决定的： <strong>它的键是无序、不能重复，而且没有索引的</strong>。再各种Map集合中也是用得最多的一种集合。</p><img src="'+s+'"><p>刚才我们说，HashSet底层就是HashMap，我们可以看源码验证这一点，如下图所示，我们可以看到，创建HashSet集合时，底层帮你创建了HashMap集合；往HashSet集合中添加添加元素时，底层却是调用了Map集合的put方法把元素作为了键来存储。所以实际上根本没有什么HashSet集合，把HashMap的集合的值忽略不看就是HashSet集合。</p><img src="'+o+'"><p>HashSet的原理我们之前已经学过了，所以HashMap是一样的，底层是哈希表结构。</p><img src="'+t+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">HashMap底层数据结构</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 哈希表结构</span></span>
<span class="line"><span style="color:#F6F6F4;">	JDK8之前的哈希表 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> 数组</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">链表</span></span>
<span class="line"><span style="color:#F6F6F4;">	JDK8之后的哈希表 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> 数组</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">链表</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">红黑树</span></span>
<span class="line"><span style="color:#F6F6F4;">	哈希表是一种增删改查数据，性能相对都较好的数据结构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">往HashMap集合中键值对数据时，底层步骤如下</span></span>
<span class="line"><span style="color:#F6F6F4;">	第1步：当你第一次往HashMap集合中存储键值对时，底层会创建一个长度为16的数组</span></span>
<span class="line"><span style="color:#F6F6F4;">	第2步：把键然后将键和值封装成一个对象，叫做Entry对象</span></span>
<span class="line"><span style="color:#F6F6F4;">	第3步：再根据Entry对象的键计算hashCode值（和值无关）</span></span>
<span class="line"><span style="color:#F6F6F4;">	第4步：利用hashCode值和数组的长度做一个类似求余数的算法，会得到一个索引位置</span></span>
<span class="line"><span style="color:#F6F6F4;">	第5步：判断这个索引的位置是否为null，如果为null,就直接将这个Entry对象存储到这个索引位置</span></span>
<span class="line"><span style="color:#F6F6F4;">		   如果不为null，则还需要进行第6步的判断</span></span>
<span class="line"><span style="color:#F6F6F4;">	第6步：继续调用equals方法判断两个对象键是否相同</span></span>
<span class="line"><span style="color:#F6F6F4;">		  如果equals返回false，则以链表的形式往下挂</span></span>
<span class="line"><span style="color:#F6F6F4;">		  如果equals方法true,则认为键重复，此时新的键值对会替换就的键值对。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">HashMap底层需要注意这几点：</span></span>
<span class="line"><span style="color:#F6F6F4;">	1.底层数组默认长度为16，如果数组中有超过12个位置已经存储了元素，则会对数组进行扩容2倍</span></span>
<span class="line"><span style="color:#F6F6F4;">	  数组扩容的加载因子是0.</span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">75</span><span style="color:#F6F6F4;">，意思是：</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;">0.75</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    2.数组的同一个索引位置有多个元素、并且在8个元素以内(包括8)，则以链表的形式存储</span></span>
<span class="line"><span style="color:#F6F6F4;">    	JDK7版本：链表采用头插法（新元素往链表的头部添加）</span></span>
<span class="line"><span style="color:#F6F6F4;">    	JDK8版本：链表采用尾插法（新元素我那个链表的尾部添加）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    3.数组的同一个索引位置有多个元素、并且超过了8个，则以红黑树形式存储</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HashMap底层数据结构</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 哈希表结构</span></span>
<span class="line"><span style="color:#24292E;">	JDK8之前的哈希表 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 数组</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">链表</span></span>
<span class="line"><span style="color:#24292E;">	JDK8之后的哈希表 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 数组</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">链表</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">红黑树</span></span>
<span class="line"><span style="color:#24292E;">	哈希表是一种增删改查数据，性能相对都较好的数据结构</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">往HashMap集合中键值对数据时，底层步骤如下</span></span>
<span class="line"><span style="color:#24292E;">	第1步：当你第一次往HashMap集合中存储键值对时，底层会创建一个长度为16的数组</span></span>
<span class="line"><span style="color:#24292E;">	第2步：把键然后将键和值封装成一个对象，叫做Entry对象</span></span>
<span class="line"><span style="color:#24292E;">	第3步：再根据Entry对象的键计算hashCode值（和值无关）</span></span>
<span class="line"><span style="color:#24292E;">	第4步：利用hashCode值和数组的长度做一个类似求余数的算法，会得到一个索引位置</span></span>
<span class="line"><span style="color:#24292E;">	第5步：判断这个索引的位置是否为null，如果为null,就直接将这个Entry对象存储到这个索引位置</span></span>
<span class="line"><span style="color:#24292E;">		   如果不为null，则还需要进行第6步的判断</span></span>
<span class="line"><span style="color:#24292E;">	第6步：继续调用equals方法判断两个对象键是否相同</span></span>
<span class="line"><span style="color:#24292E;">		  如果equals返回false，则以链表的形式往下挂</span></span>
<span class="line"><span style="color:#24292E;">		  如果equals方法true,则认为键重复，此时新的键值对会替换就的键值对。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">HashMap底层需要注意这几点：</span></span>
<span class="line"><span style="color:#24292E;">	1.底层数组默认长度为16，如果数组中有超过12个位置已经存储了元素，则会对数组进行扩容2倍</span></span>
<span class="line"><span style="color:#24292E;">	  数组扩容的加载因子是0.</span><span style="color:#B31D28;font-style:italic;">75</span><span style="color:#24292E;">，意思是：</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">0.75</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    2.数组的同一个索引位置有多个元素、并且在8个元素以内(包括8)，则以链表的形式存储</span></span>
<span class="line"><span style="color:#24292E;">    	JDK7版本：链表采用头插法（新元素往链表的头部添加）</span></span>
<span class="line"><span style="color:#24292E;">    	JDK8版本：链表采用尾插法（新元素我那个链表的尾部添加）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    3.数组的同一个索引位置有多个元素、并且超过了8个，则以红黑树形式存储</span></span></code></pre></div><p>从HashMap底层存储键值对的过程中我们发现：决定键是否重复依赖与两个方法，一个是hashCode方法、一个是equals方法。有两个键计算得到的hashCode值相同，并且两个键使用equals比较为true，就认为键重复。</p><p><strong>所以，往Map集合中存储自定义对象作为键，为了保证键的唯一性，我们应该重写hashCode方法和equals方法。</strong></p><p>比如有如下案例：往HashMap集合中存储Student对象作为键，学生的家庭住址当做值。要求，当学生对象的姓名和年龄相同时就认为键重复。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparable</span><span style="color:#F6F6F4;">&lt;Student&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// this  o</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> o.age; </span><span style="color:#7B7F8B;">// 年龄升序排序</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> o) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> o.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> student </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Student) o;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> student.age </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(student.height, height) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> Objects.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(name, student.name);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Objects.</span><span style="color:#62E884;">hash</span><span style="color:#F6F6F4;">(name, age, height);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.height </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//...get,set方法自己补全....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Student{</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name=&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\&#39;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, age=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, height=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> height </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">}</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> height;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this  o</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o.age; </span><span style="color:#6A737D;">// 年龄升序排序</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> o) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> o.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Student student </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Student) o;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> student.age </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(student.height, height) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(name, student.name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(name, age, height);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//...get,set方法自己补全....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Student{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name=&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, age=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, height=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>写一个测试类，在测试类中，创建HashMap集合，键是Student类型，值是Stirng类型</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握Map集合下的实现类：HashMap集合的底层原理。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test1HashMap</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;Student, String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">盘丝洞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">水帘洞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">水帘洞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛魔王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">28</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">183.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛头山</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握Map集合下的实现类：HashMap集合的底层原理。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test1HashMap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;盘丝洞&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;水帘洞&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;水帘洞&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;牛魔王&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">183.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;牛头山&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面存储的键，有两个蜘蛛精，但是打印出只会有最后一个。</p><img src="`+e+'"><h3 id="_1-2-linkedhashmap" tabindex="-1">1.2 LinkedHashMap <a class="header-anchor" href="#_1-2-linkedhashmap" aria-label="Permalink to &quot;1.2 LinkedHashMap&quot;">​</a></h3><p>学习完HashMap集合的特点，以及底层原理。接下来我们学习一下LinkedHashMap集合。</p><ul><li>LinkedHashMap集合的特点也是由键决定的：<strong>有序的、不重复、无索引</strong>。</li></ul><img src="'+s+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握LinkedHashMap的底层原理。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test2LinkedHashMap</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();    //  按照键 无序，不重复，无索引。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;String, Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(); </span><span style="color:#7B7F8B;">//  按照键 有序，不重复，无索引。</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">手表</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">手表</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">220</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">手机</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Java</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握LinkedHashMap的底层原理。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test2LinkedHashMap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();    //  按照键 无序，不重复，无索引。</span></span>
<span class="line"><span style="color:#24292E;">        LinkedHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(); </span><span style="color:#6A737D;">//  按照键 有序，不重复，无索引。</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;手表&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;手表&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">220</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;手机&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Java&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行上面代码发现，如果是LinedHashMap集合键存储和取出的顺序是一样的</p><img src="`+c+'"><p>如果是HashMap，键存储和取出的顺序是不一致的</p><img src="'+r+'"><ul><li>LinkedHashMap的底层原理，和LinkedHashSet底层原理是一样的。底层多个一个双向链表来维护键的存储顺序。</li></ul><p>取元素时，先取头节点元素，然后再依次取下一个几点，一直到尾结点。所以是有序的。</p><img src="'+y+'"><h3 id="_1-3-treemap" tabindex="-1">1.3 TreeMap <a class="header-anchor" href="#_1-3-treemap" aria-label="Permalink to &quot;1.3 TreeMap&quot;">​</a></h3><p>最后，我们再学习Map集合下面的另一个子类叫TreeMap。根据我们前面学习其他Map集合的经验，我们应该可以猜出TreeMap有什么特点。</p><ul><li>TreeMap集合的特点也是由键决定的，默认按照键的升序排列，键不重复，也是无索引的。</li></ul><img src="'+F+`"><ul><li><p>TreeMap集合的底层原理和TreeSet也是一样的，底层都是红黑树实现的。所以可以对键进行排序。</p><p>比如往TreeMap集合中存储Student对象作为键，排序方法有两种。直接看代码吧</p></li></ul><p>**排序方式1：**写一个Student类，让Student类实现Comparable接口</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//第一步：先让Student类，实现Comparable接口</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparable</span><span style="color:#F6F6F4;">&lt;Student&gt;{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//无参数构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(){}</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//全参数构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">age;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.height</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">height;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//...get、set、toString()方法自己补上..</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//按照年龄进行比较，只需要在方法中让this.age和o.age相减就可以。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">    原理：</span></span>
<span class="line"><span style="color:#7B7F8B;">    在往TreeSet集合中添加元素时，add方法底层会调用compareTo方法，根据该方法的</span></span>
<span class="line"><span style="color:#7B7F8B;">    结果是正数、负数、还是零，决定元素放在后面、前面还是不存。</span></span>
<span class="line"><span style="color:#7B7F8B;">    */</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//this：表示将要添加进去的Student对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//o: 表示集合中已有的Student对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age</span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;">o.age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//第一步：先让Student类，实现Comparable接口</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//无参数构造方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(){}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//全参数构造方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">age;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.height</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">height;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//...get、set、toString()方法自己补上..</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//按照年龄进行比较，只需要在方法中让this.age和o.age相减就可以。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">    原理：</span></span>
<span class="line"><span style="color:#6A737D;">    在往TreeSet集合中添加元素时，add方法底层会调用compareTo方法，根据该方法的</span></span>
<span class="line"><span style="color:#6A737D;">    结果是正数、负数、还是零，决定元素放在后面、前面还是不存。</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//this：表示将要添加进去的Student对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//o: 表示集合中已有的Student对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">o.age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>**排序方式2：**在创建TreeMap集合时，直接传递Comparator比较器对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握TreeMap集合的使用。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test3TreeMap</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;Student, String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TreeMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparator</span><span style="color:#F6F6F4;">&lt;Student&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(o1.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">(), o2.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#7B7F8B;">//        Map&lt;Student, String&gt; map = new TreeMap&lt;&gt;(( o1,  o2) -&gt;   Double.compare(o2.getHeight(), o1.getHeight()));</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">盘丝洞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">水帘洞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">水帘洞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛魔王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">28</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">183.5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛头山</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握TreeMap集合的使用。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test3TreeMap</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeMap&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Student </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#6A737D;">//        Map&lt;Student, String&gt; map = new TreeMap&lt;&gt;(( o1,  o2) -&gt;   Double.compare(o2.getHeight(), o1.getHeight()));</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;盘丝洞&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;水帘洞&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;水帘洞&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;牛魔王&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">28</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">183.5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;牛头山&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这种方式都可以对TreeMap集合中的键排序。<strong>注意：只有TreeMap的键才能排序，HashMap键不能排序。</strong></p><h3 id="_1-4-集合嵌套" tabindex="-1">1.4 集合嵌套 <a class="header-anchor" href="#_1-4-集合嵌套" aria-label="Permalink to &quot;1.4 集合嵌套&quot;">​</a></h3><p>各位同学，到现在为止我们把Map集合和Collection集合的都已经学习完了。但是在实际开发中可能还会存在一种特殊的用法。就是把一个集合当做元素，存储到另一个集合中去，我们把这种用法称之为集合嵌套。</p><p>下面通过一个案例给大家演示一下</p><img src="`+i+`"><ul><li>案例分析</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.从需求中我们可以看到，有三个省份，每一个省份有多个城市</span></span>
<span class="line"><span style="color:#F6F6F4;">	我们可以用一个Map集合的键表示省份名称，而值表示省份有哪些城市</span></span>
<span class="line"><span style="color:#F6F6F4;">2.而又因为一个身份有多个城市，同一个省份的多个城市可以再用一个List集合来存储。</span></span>
<span class="line"><span style="color:#F6F6F4;">	所以Map集合的键是String类型，而指是List集合类型</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt;&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.从需求中我们可以看到，有三个省份，每一个省份有多个城市</span></span>
<span class="line"><span style="color:#24292E;">	我们可以用一个Map集合的键表示省份名称，而值表示省份有哪些城市</span></span>
<span class="line"><span style="color:#24292E;">2.而又因为一个身份有多个城市，同一个省份的多个城市可以再用一个List集合来存储。</span></span>
<span class="line"><span style="color:#24292E;">	所以Map集合的键是String类型，而指是List集合类型</span></span>
<span class="line"><span style="color:#24292E;">	HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span></code></pre></div><ul><li>代码如下</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：理解集合的嵌套。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 江苏省 = &quot;南京市&quot;,&quot;扬州市&quot;,&quot;苏州市“,&quot;无锡市&quot;,&quot;常州市&quot;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 湖北省 = &quot;武汉市&quot;,&quot;孝感市&quot;,&quot;十堰市&quot;,&quot;宜昌市&quot;,&quot;鄂州市&quot;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 河北省 = &quot;石家庄市&quot;,&quot;唐山市&quot;, &quot;邢台市&quot;, &quot;保定市&quot;, &quot;张家口市&quot;</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、定义一个Map集合存储全部的省份信息，和其对应的城市信息。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt;&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; cities1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(cities1, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">南京市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">扬州市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">苏州市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">无锡市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">常州市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">江苏省</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, cities1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; cities2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(cities2, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">武汉市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">孝感市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">十堰市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">宜昌市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">鄂州市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">湖北省</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, cities2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; cities3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(cities3, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">石家庄市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">唐山市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">邢台市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">保定市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张家口市</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">河北省</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, cities3);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; cities </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">湖北省</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> city </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> cities) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(city);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">((p, c) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(p </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> c);</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：理解集合的嵌套。</span></span>
<span class="line"><span style="color:#6A737D;"> * 江苏省 = &quot;南京市&quot;,&quot;扬州市&quot;,&quot;苏州市“,&quot;无锡市&quot;,&quot;常州市&quot;</span></span>
<span class="line"><span style="color:#6A737D;"> * 湖北省 = &quot;武汉市&quot;,&quot;孝感市&quot;,&quot;十堰市&quot;,&quot;宜昌市&quot;,&quot;鄂州市&quot;</span></span>
<span class="line"><span style="color:#6A737D;"> * 河北省 = &quot;石家庄市&quot;,&quot;唐山市&quot;, &quot;邢台市&quot;, &quot;保定市&quot;, &quot;张家口市&quot;</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、定义一个Map集合存储全部的省份信息，和其对应的城市信息。</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; cities1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(cities1, </span><span style="color:#032F62;">&quot;南京市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;扬州市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;苏州市&quot;</span><span style="color:#24292E;"> ,</span><span style="color:#032F62;">&quot;无锡市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;常州市&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;江苏省&quot;</span><span style="color:#24292E;">, cities1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; cities2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(cities2, </span><span style="color:#032F62;">&quot;武汉市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;孝感市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;十堰市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;宜昌市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;鄂州市&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;湖北省&quot;</span><span style="color:#24292E;">, cities2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; cities3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(cities3, </span><span style="color:#032F62;">&quot;石家庄市&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;唐山市&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;邢台市&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;保定市&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;张家口市&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;河北省&quot;</span><span style="color:#24292E;">, cities3);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; cities </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;湖北省&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String city </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cities) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(city);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((p, c) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;-----&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="二、jdk8新特性-stream流" tabindex="-1">二、JDK8新特性（Stream流） <a class="header-anchor" href="#二、jdk8新特性-stream流" aria-label="Permalink to &quot;二、JDK8新特性（Stream流）&quot;">​</a></h2><p>各位同学，接下来我们学习一个全新的知识，叫做Stream流（也叫Stream API）。它是从JDK8以后才有的一个新特性，是专业用于对集合或者数组进行便捷操作的。有多方便呢？我们用一个案例体验一下，然后再详细学习。</p><h3 id="_2-1-stream流体验" tabindex="-1">2.1 Stream流体验 <a class="header-anchor" href="#_2-1-stream流体验" aria-label="Permalink to &quot;2.1 Stream流体验&quot;">​</a></h3><p>案例需求：有一个List集合，元素有<code>&quot;张三丰&quot;,&quot;张无忌&quot;,&quot;周芷若&quot;,&quot;赵敏&quot;,&quot;张强&quot;</code>，找出姓张，且是3个字的名字，存入到一个新集合中去。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(names, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张三丰</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张无忌</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">周芷若</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">赵敏</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张强</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(names);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(names, </span><span style="color:#032F62;">&quot;张三丰&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;张无忌&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;周芷若&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;赵敏&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;张强&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(names);</span></span></code></pre></div><ul><li>用传统方式来做，代码是这样的</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 找出姓张，且是3个字的名字，存入到一个新集合中去。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> names) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(name.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> name.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 找出姓张，且是3个字的名字，存入到一个新集合中去。</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String name </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> names) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(name.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> name.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(list);</span></span></code></pre></div><ul><li>用Stream流来做，代码是这样的（ps: 是不是想流水线一样，一句话就写完了）</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> names.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)).</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">==</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">collect</span><span style="color:#F6F6F4;">(Collectors.</span><span style="color:#62E884;">toList</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(list2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> names.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(list2);</span></span></code></pre></div><p>先不用知道这里面每一句话是什么意思，具体每一句话的含义，待会再一步步学习。现在只是体验一下。</p><p>学习Stream流我们接下来，会按照下面的步骤来学习。</p><img src="`+E+'"><h3 id="_2-2-stream流的创建" tabindex="-1">2.2 Stream流的创建 <a class="header-anchor" href="#_2-2-stream流的创建" aria-label="Permalink to &quot;2.2 Stream流的创建&quot;">​</a></h3><p>好，接下来我们正式来学习Stream流。先来学习如何创建Stream流、或者叫获取Stream流。</p><img src="'+u+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">主要掌握下面四点：</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">、如何获取List集合的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">、如何获取Set集合的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">、如何获取Map集合的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">、如何获取数组的Stream流？</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">主要掌握下面四点：</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">、如何获取List集合的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">、如何获取Set集合的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">、如何获取Map集合的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">、如何获取数组的Stream流？</span></span></code></pre></div><p>直接上代码演示</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握Stream流的创建。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StreamTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、如何获取List集合的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(names, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张三丰</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张无忌</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">周芷若</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">赵敏</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张强</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; stream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> names.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、如何获取Set集合的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;String&gt; set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashSet</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(set, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">刘德华</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张曼玉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">马德</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">德玛西亚</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; stream1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> set.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        stream1.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">德</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)).</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、如何获取Map集合的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Double&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">古力娜扎</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">172.3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">迪丽热巴</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">马尔扎哈</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">166.3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">卡尔扎巴</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;String&gt; keys </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">keySet</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; ks </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> keys.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Collection</span><span style="color:#F6F6F4;">&lt;Double&gt; values </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;Double&gt; vs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> values.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;Map.Entry&lt;String, Double&gt;&gt; entries </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">entrySet</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;Map.Entry&lt;String, Double&gt;&gt; kvs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> entries.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        kvs.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(e </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">巴</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(e </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、如何获取数组的Stream流？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] names2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张翠山</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">东方不败</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">唐大山</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">独孤求败</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">(names2);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Stream.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(names2);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握Stream流的创建。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StreamTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、如何获取List集合的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(names, </span><span style="color:#032F62;">&quot;张三丰&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;张无忌&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;周芷若&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;赵敏&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;张强&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> names.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、如何获取Set集合的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(set, </span><span style="color:#032F62;">&quot;刘德华&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;张曼玉&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;马德&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;德玛西亚&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stream1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> set.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        stream1.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;德&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、如何获取Map集合的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;古力娜扎&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">172.3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;迪丽热巴&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;马尔扎哈&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">166.3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;卡尔扎巴&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; ks </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keys.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Collection&lt;</span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt; values </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt; vs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> values.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">Map</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt;&gt; entries </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">Map</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt;&gt; kvs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entries.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        kvs.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;巴&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(e </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;--&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、如何获取数组的Stream流？</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] names2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;张翠山&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;东方不败&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;唐大山&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;独孤求败&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(names2);</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(names2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-3-stream流中间方法" tabindex="-1">2.3 Stream流中间方法 <a class="header-anchor" href="#_2-3-stream流中间方法" aria-label="Permalink to &quot;2.3 Stream流中间方法&quot;">​</a></h3><p>在上一节，我们学习了创建Stream流的方法。接下来我们再来学习，Stream流中间操作的方法。</p><p><strong>中间方法指的是：调用完方法之后其结果是一个新的Stream流，于是可以继续调用方法，这样一来就可以支持链式编程</strong>（或者叫流式编程）。</p><img src="`+C+'"><img src="'+D+`"><p>话不多说，直接上代码演示</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握Stream流提供的常见中间方法。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StreamTest3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Double&gt; scores </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(scores, </span><span style="color:#BF9EEE;">88.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100.0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">60.0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">99.0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">99.6</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25.0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求1：找出成绩大于等于60分的数据，并升序后，再输出。</span></span>
<span class="line"><span style="color:#F6F6F4;">        scores.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Student&gt; students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">172.5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">172.5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">167.6</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">白晶晶</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">169.0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s5 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛魔王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">35</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">183.3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s6 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛夫人</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">34</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(students, s1, s2, s3, s4, s5, s6);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求2：找出年龄大于等于23,且年龄小于等于30岁的学生，并按照年龄降序输出.</span></span>
<span class="line"><span style="color:#F6F6F4;">        students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">((o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> o2.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> o1.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求3：取出身高最高的前3名学生，并输出。</span></span>
<span class="line"><span style="color:#F6F6F4;">        students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">((o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(o2.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">(), o1.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">()))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">limit</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----------------------------------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求4：取出身高倒数的2名学生，并输出。   s1 s2 s3 s4 s5 s6</span></span>
<span class="line"><span style="color:#F6F6F4;">        students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">((o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(o2.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">(), o1.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">()))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">skip</span><span style="color:#F6F6F4;">(students.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求5：找出身高超过168的学生叫什么名字，要求去除重复的名字，再输出。</span></span>
<span class="line"><span style="color:#F6F6F4;">        students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">168</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(Student</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">getName)</span></span>
<span class="line"><span style="color:#F6F6F4;">               .</span><span style="color:#62E884;">distinct</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// distinct去重复，自定义类型的对象（希望内容一样就认为重复，重写hashCode,equals）</span></span>
<span class="line"><span style="color:#F6F6F4;">        students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">168</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">distinct</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; st1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Stream.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">李四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; st2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Stream.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张三2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">李四2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王五</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Stream</span><span style="color:#F6F6F4;">&lt;String&gt; allSt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Stream.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(st1, st2);</span></span>
<span class="line"><span style="color:#F6F6F4;">        allSt.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握Stream流提供的常见中间方法。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StreamTest3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt; scores </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(scores, </span><span style="color:#005CC5;">88.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">60.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99.0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99.6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求1：找出成绩大于等于60分的数据，并升序后，再输出。</span></span>
<span class="line"><span style="color:#24292E;">        scores.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt; students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Student s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">172.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">172.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">167.6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;白晶晶&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">169.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;牛魔王&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">183.3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;牛夫人&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">34</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(students, s1, s2, s3, s4, s5, s6);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求2：找出年龄大于等于23,且年龄小于等于30岁的学生，并按照年龄降序输出.</span></span>
<span class="line"><span style="color:#24292E;">        students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">((o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> o2.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求3：取出身高最高的前3名学生，并输出。</span></span>
<span class="line"><span style="color:#24292E;">        students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">((o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-----------------------------------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求4：取出身高倒数的2名学生，并输出。   s1 s2 s3 s4 s5 s6</span></span>
<span class="line"><span style="color:#24292E;">        students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">((o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">skip</span><span style="color:#24292E;">(students.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求5：找出身高超过168的学生叫什么名字，要求去除重复的名字，再输出。</span></span>
<span class="line"><span style="color:#24292E;">        students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">168</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Student</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getName)</span></span>
<span class="line"><span style="color:#24292E;">               .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// distinct去重复，自定义类型的对象（希望内容一样就认为重复，重写hashCode,equals）</span></span>
<span class="line"><span style="color:#24292E;">        students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">168</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; st1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; st2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王五&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Stream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; allSt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(st1, st2);</span></span>
<span class="line"><span style="color:#24292E;">        allSt.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-5-stream流终结方法" tabindex="-1">2.5 Stream流终结方法 <a class="header-anchor" href="#_2-5-stream流终结方法" aria-label="Permalink to &quot;2.5 Stream流终结方法&quot;">​</a></h3><p>最后，我们再学习Stream流的终结方法。这些方法的特点是，调用完方法之后，其结果就不再是Stream流了，所以不支持链式编程。</p><img src="`+d+'"><p>我列举了下面的几个终结方法，接下来用几个案例来一个一个给同学们演示。</p><img src="'+g+`"><p>话不多说，直接上代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：Stream流的终结方法</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StreamTest4</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Student&gt; students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">172.5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">172.5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">167.6</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">白晶晶</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">169.0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s5 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛魔王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">35</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">183.3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s6 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">牛夫人</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">34</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">168.5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(students, s1, s2, s3, s4, s5, s6);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求1：请计算出身高超过168的学生有几人。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">168</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">count</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求2：请找出身高最高的学生对象，并输出。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">((o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(o1.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">(), o2.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">())).</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求3：请找出身高最矮的学生对象，并输出。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> ss </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">min</span><span style="color:#F6F6F4;">((o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(o1.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">(), o2.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">())).</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ss);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求4：请找出身高超过170的学生对象，并放到一个新集合中去返回。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 流只能收集一次。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Student&gt; students1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">170</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">collect</span><span style="color:#F6F6F4;">(Collectors.</span><span style="color:#62E884;">toList</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(students1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;Student&gt; students2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">170</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">collect</span><span style="color:#F6F6F4;">(Collectors.</span><span style="color:#62E884;">toSet</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(students2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求5：请找出身高超过170的学生对象，并把学生对象的名字和身高，存入到一个Map集合返回。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Double&gt; map </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">                students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">170</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                        .</span><span style="color:#62E884;">distinct</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">collect</span><span style="color:#F6F6F4;">(Collectors.</span><span style="color:#62E884;">toMap</span><span style="color:#F6F6F4;">(a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">(), a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Object[] arr = students.stream().filter(a -&gt; a.getHeight() &gt; 170).toArray();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> students.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(a </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">170</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">toArray</span><span style="color:#F6F6F4;">(len </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[len]);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：Stream流的终结方法</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StreamTest4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt; students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        Student s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">172.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">172.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">167.6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;白晶晶&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">169.0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;牛魔王&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">183.3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Student s6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;牛夫人&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">34</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">168.5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(students, s1, s2, s3, s4, s5, s6);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求1：请计算出身高超过168的学生有几人。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">168</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求2：请找出身高最高的学生对象，并输出。</span></span>
<span class="line"><span style="color:#24292E;">        Student s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">((o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求3：请找出身高最矮的学生对象，并输出。</span></span>
<span class="line"><span style="color:#24292E;">        Student ss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">((o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ss);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求4：请找出身高超过170的学生对象，并放到一个新集合中去返回。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 流只能收集一次。</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt; students1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">170</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(students1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt; students2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">170</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toSet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(students2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求5：请找出身高超过170的学生对象，并把学生对象的名字和身高，存入到一个Map集合返回。</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Double</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">170</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">distinct</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toMap</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Object[] arr = students.stream().filter(a -&gt; a.getHeight() &gt; 170).toArray();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> students.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">170</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(len </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[len]);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(arr));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>到这里，关于Stream流的操常见操作我们就已经学习完了。当然Stream流还有一些其他的方法，同学们遇到了也可以自己再研究一下。</p><h2 id="三、file类" tabindex="-1">三、File类 <a class="header-anchor" href="#三、file类" aria-label="Permalink to &quot;三、File类&quot;">​</a></h2><p>接下来，我们要学习的知识是一个File类。但是在讲这个知识点之前，我想先和同学们聊点别的，聊完之后再回过来学习File你会更容易理解一些。</p><ul><li><p>先问大家一个问题，目前你写代码时存储数据，可以用哪些方案?</p><p>答案如下图所示：可以是变量、可以是数组、可以是对象、可以是集合，但是这些数据都是存储在内存中的，只要程序执行结束，或者断点了，数据就消失了。不能永久存储。</p></li></ul><img src="`+A+'"><ul><li><p>有些数据要长久保存，该怎么办呢？</p><p>答案如下图所示：可以将数据以文件的形式存在硬盘里，即使程序结束了，断点了只要硬盘没坏，数据就永久存在。</p><img src="'+m+'"></li></ul><p><strong>而现在要学习的File类，它的就用来表示当前系统下的文件（也可以是文件夹）</strong>，通过File类提供的方法可以获取文件大小、判断文件是否存在、创建文件、创建文件夹等。</p><img src="'+h+'"><p>**但是需要我们注意：**File对象只能对文件进行操作，不能操作文件中的内容。</p><h3 id="_3-1-file对象的创建" tabindex="-1">3.1 File对象的创建 <a class="header-anchor" href="#_3-1-file对象的创建" aria-label="Permalink to &quot;3.1 File对象的创建&quot;">​</a></h3><p>学习File类和其他类一样，第一步是创建File类的对象。 想要创建对象，我们得看File类有哪些构造方法。</p><img src="'+f+`"><p>下面我们演示一下，File类创建对象的代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">需求我们注意的是：路径中</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\&quot;</span><span style="color:#E7EE98;">要写成</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">\\\\</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">， 路径中</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">可以直接用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">需求我们注意的是：路径中</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">要写成&quot;</span><span style="color:#24292E;">\\\\</span><span style="color:#032F62;">&quot;， 路径中&quot;</span><span style="color:#D73A49;">/</span><span style="color:#032F62;">&quot;可以直接用</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握File创建对象，代表具体文件的方案。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FileTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建一个File对象，指代某个具体的文件。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 路径分隔符</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// File f1 = new File(&quot;D:/resource/ab.txt&quot;);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// File f1 = new File(&quot;D:\\\\resource\\\\ab.txt&quot;);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> File.separator </span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">resource</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> File.separator </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ab.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 文件大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f2.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 注意：File对象可以指代一个不存在的文件路径</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/aaaa.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f3.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f3.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 我现在要定位的文件是在模块中，应该怎么定位呢？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 绝对路径：带盘符的</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// File f4 = new File(&quot;D:\\\\code\\\\javasepromax\\\\file-io-app\\\\src\\\\itheima.txt&quot;);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 相对路径（重点）：不带盘符，默认是直接去工程下寻找文件的。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file-io-app</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">src</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">itheima.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f4.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握File创建对象，代表具体文件的方案。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建一个File对象，指代某个具体的文件。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 路径分隔符</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// File f1 = new File(&quot;D:/resource/ab.txt&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// File f1 = new File(&quot;D:\\\\resource\\\\ab.txt&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        File f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> File.separator </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;resource&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> File.separator </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ab.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 文件大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        File f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f2.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意：File对象可以指代一个不存在的文件路径</span></span>
<span class="line"><span style="color:#24292E;">        File f3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/aaaa.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f3.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f3.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我现在要定位的文件是在模块中，应该怎么定位呢？</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 绝对路径：带盘符的</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// File f4 = new File(&quot;D:\\\\code\\\\javasepromax\\\\file-io-app\\\\src\\\\itheima.txt&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 相对路径（重点）：不带盘符，默认是直接去工程下寻找文件的。</span></span>
<span class="line"><span style="color:#24292E;">        File f4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file-io-app</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">itheima.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f4.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3-2-file判断和获取方法" tabindex="-1">3.2 File判断和获取方法 <a class="header-anchor" href="#_3-2-file判断和获取方法" aria-label="Permalink to &quot;3.2 File判断和获取方法&quot;">​</a></h3><p>各位同学，刚才我们创建File对象的时候，会传递一个文件路径过来。但是File对象封装的路径是存在还是不存在，是文件还是文件夹其实是不清楚的。好在File类提供了方法可以帮我们做判断。</p><img src="`+q+`"><p>话不多少，直接上代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">     目标：掌握File提供的判断文件类型、获取文件信息功能</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FileTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UnsupportedEncodingException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.创建文件对象，指代某个文件</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/ab.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//File f1 = new File(&quot;D:/resource/&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、public boolean exists()：判断当前文件对象，对应的文件路径是否存在，存在返回true.</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、public boolean isFile() : 判断当前文件对象指代的是否是文件，是文件返回true，反之。</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">isFile</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、public boolean isDirectory()  : 判断当前文件对象指代的是否是文件夹，是文件夹返回true，反之。</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">isDirectory</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     目标：掌握File提供的判断文件类型、获取文件信息功能</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> UnsupportedEncodingException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.创建文件对象，指代某个文件</span></span>
<span class="line"><span style="color:#24292E;">        File f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/ab.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//File f1 = new File(&quot;D:/resource/&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、public boolean exists()：判断当前文件对象，对应的文件路径是否存在，存在返回true.</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、public boolean isFile() : 判断当前文件对象指代的是否是文件，是文件返回true，反之。</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">isFile</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、public boolean isDirectory()  : 判断当前文件对象指代的是否是文件夹，是文件夹返回true，反之。</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">isDirectory</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>除了判断功能还有一些获取功能，看代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/ab.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 5.public String getName()：获取文件的名称（包含后缀）</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 6.public long length()：获取文件的大小，返回字节个数</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 7.public long lastModified()：获取文件的最后修改时间。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> time </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f1.</span><span style="color:#62E884;">lastModified</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">SimpleDateFormat</span><span style="color:#F6F6F4;"> sdf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SimpleDateFormat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">yyyy/MM/dd HH:mm:ss</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(sdf.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(time));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 8.public String getPath()：获取创建文件对象时，使用的路径</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">resource</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">ab.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file-io-app</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">src</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">itheima.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f2.</span><span style="color:#62E884;">getPath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f3.</span><span style="color:#62E884;">getPath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 9.public String getAbsolutePath()：获取绝对路径</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f2.</span><span style="color:#62E884;">getAbsolutePath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f3.</span><span style="color:#62E884;">getAbsolutePath</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">File f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/ab.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 5.public String getName()：获取文件的名称（包含后缀）</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 6.public long length()：获取文件的大小，返回字节个数</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 7.public long lastModified()：获取文件的最后修改时间。</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f1.</span><span style="color:#6F42C1;">lastModified</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">SimpleDateFormat sdf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleDateFormat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;yyyy/MM/dd HH:mm:ss&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sdf.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(time));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 8.public String getPath()：获取创建文件对象时，使用的路径</span></span>
<span class="line"><span style="color:#24292E;">File f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">resource</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">ab.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">File f3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file-io-app</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">itheima.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f2.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f3.</span><span style="color:#6F42C1;">getPath</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 9.public String getAbsolutePath()：获取绝对路径</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f2.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f3.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="_3-3-创建和删除方法" tabindex="-1">3.3 创建和删除方法 <a class="header-anchor" href="#_3-3-创建和删除方法" aria-label="Permalink to &quot;3.3 创建和删除方法&quot;">​</a></h3><p>刚才有同学问老师，我们不能不用Java代码创建一个文件或者文件夹呀？答案是有的，不光可以创建还可以删除。</p><p>File类提供了创建和删除文件的方法，话不多少，看代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握File创建和删除文件相关的方法。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FileTest3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、public boolean createNewFile()：创建一个新文件（文件内容为空），创建成功返回true,反之。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/itheima2.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">createNewFile</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、public boolean mkdir()：用于创建文件夹，注意：只能创建一级文件夹</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/aaa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f2.</span><span style="color:#62E884;">mkdir</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、public boolean mkdirs()：用于创建文件夹，注意：可以创建多级文件夹</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/bbb/ccc/ddd/eee/fff/ggg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f3.</span><span style="color:#62E884;">mkdirs</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、public boolean delete()：删除文件，或者空文件，注意：不能删除非空文件夹。</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f1.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f2.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f4 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f4.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握File创建和删除文件相关的方法。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileTest3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、public boolean createNewFile()：创建一个新文件（文件内容为空），创建成功返回true,反之。</span></span>
<span class="line"><span style="color:#24292E;">        File f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/itheima2.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">createNewFile</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、public boolean mkdir()：用于创建文件夹，注意：只能创建一级文件夹</span></span>
<span class="line"><span style="color:#24292E;">        File f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/aaa&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f2.</span><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、public boolean mkdirs()：用于创建文件夹，注意：可以创建多级文件夹</span></span>
<span class="line"><span style="color:#24292E;">        File f3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/bbb/ccc/ddd/eee/fff/ggg&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f3.</span><span style="color:#6F42C1;">mkdirs</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、public boolean delete()：删除文件，或者空文件，注意：不能删除非空文件夹。</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f1.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f2.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        File f4 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f4.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.</span><span style="color:#62E884;">mkdir</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 只能创建单级文件夹、</span></span>
<span class="line"><span style="color:#F6F6F4;">2.</span><span style="color:#62E884;">mkdirs</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 才能创建多级文件夹</span></span>
<span class="line"><span style="color:#F6F6F4;">3.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 文件可以直接删除，但是文件夹只能删除空的文件夹，文件夹有内容删除不了。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.</span><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 只能创建单级文件夹、</span></span>
<span class="line"><span style="color:#24292E;">2.</span><span style="color:#6F42C1;">mkdirs</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 才能创建多级文件夹</span></span>
<span class="line"><span style="color:#24292E;">3.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 文件可以直接删除，但是文件夹只能删除空的文件夹，文件夹有内容删除不了。</span></span></code></pre></div><h3 id="_3-4-遍历文件夹方法" tabindex="-1">3.4 遍历文件夹方法 <a class="header-anchor" href="#_3-4-遍历文件夹方法" aria-label="Permalink to &quot;3.4 遍历文件夹方法&quot;">​</a></h3><p>有人说，想获取到一个文件夹中的内容，有没有方法呀？也是有的，下面我们就学习两个这样的方法。</p><img src="`+S+`"><p>话不多少上代码，演示一下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握File提供的遍历文件夹的方法。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FileTest4</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、public String[] list()：获取当前目录下所有的&quot;一级文件名称&quot;到一个字符串数组中去返回。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">course</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">待研发内容</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f1.</span><span style="color:#62E884;">list</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> names) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、public File[] listFiles():（重点）获取当前目录下所有的&quot;一级文件对象&quot;到一个文件对象数组中去返回（重点）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;">[] files </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f1.</span><span style="color:#62E884;">listFiles</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> file </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> files) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(file.</span><span style="color:#62E884;">getAbsolutePath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/resource/aaa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;">[] files1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.</span><span style="color:#62E884;">listFiles</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(files1));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握File提供的遍历文件夹的方法。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileTest4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、public String[] list()：获取当前目录下所有的&quot;一级文件名称&quot;到一个字符串数组中去返回。</span></span>
<span class="line"><span style="color:#24292E;">        File f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">course</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">待研发内容&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f1.</span><span style="color:#6F42C1;">list</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String name </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> names) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、public File[] listFiles():（重点）获取当前目录下所有的&quot;一级文件对象&quot;到一个文件对象数组中去返回（重点）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">File</span><span style="color:#24292E;">[] files </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f1.</span><span style="color:#6F42C1;">listFiles</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (File file </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> files) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(file.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        File f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/resource/aaa&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">File</span><span style="color:#24292E;">[] files1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.</span><span style="color:#6F42C1;">listFiles</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(files1));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里需要注意几个问题</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.当主调是文件时，或者路径不存在时，返回null</span></span>
<span class="line"><span style="color:#F6F6F4;">2.当主调是空文件夹时，返回一个长度为0的数组</span></span>
<span class="line"><span style="color:#F6F6F4;">3.当主调是一个有内容的文件夹时，将里面所有一级文件和文件夹路径放在File数组中，并把数组返回</span></span>
<span class="line"><span style="color:#F6F6F4;">4.当主调是一个文件夹，且里面有隐藏文件时，将里面所有文件和文件夹的路径放在FIle数组中，包含隐藏文件</span></span>
<span class="line"><span style="color:#F6F6F4;">5.当主调是一个文件夹，但是没有权限访问时，返回null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.当主调是文件时，或者路径不存在时，返回null</span></span>
<span class="line"><span style="color:#24292E;">2.当主调是空文件夹时，返回一个长度为0的数组</span></span>
<span class="line"><span style="color:#24292E;">3.当主调是一个有内容的文件夹时，将里面所有一级文件和文件夹路径放在File数组中，并把数组返回</span></span>
<span class="line"><span style="color:#24292E;">4.当主调是一个文件夹，且里面有隐藏文件时，将里面所有文件和文件夹的路径放在FIle数组中，包含隐藏文件</span></span>
<span class="line"><span style="color:#24292E;">5.当主调是一个文件夹，但是没有权限访问时，返回null</span></span></code></pre></div><p>关于遍历文件夹的基本操作就学习完了。 但是有同学如果想要获取文件夹中子文件夹的内容，那目前还做不到。但是学习下面了下面的递归知识就，很容易做到了。</p><h2 id="四、递归" tabindex="-1">四、递归 <a class="header-anchor" href="#四、递归" aria-label="Permalink to &quot;四、递归&quot;">​</a></h2><p>各位同学，为了获取文件夹中子文件夹的内容，我们就需要学习递归这个知识点。但是递归是什么意思，我们需要单独讲一下。学习完递归是什么，以及递归的执行流程之后，我们再回过头来用递归来找文件夹中子文件夹的内容。</p><h3 id="_4-1-递归算法引入" tabindex="-1">4.1 递归算法引入 <a class="header-anchor" href="#_4-1-递归算法引入" aria-label="Permalink to &quot;4.1 递归算法引入&quot;">​</a></h3><ul><li><p>什么是递归？</p><p>递归是一种算法，从形式上来说，方法调用自己的形式称之为递归。</p></li><li><p>递归的形式：有直接递归、间接递归，如下面的代码。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：认识一下递归的形式。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RecursionTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 直接方法递归</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----test1---</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 直接方法递归</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 间接方法递归</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test2</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---test2---</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">test3</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test3</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">test2</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 间接递归</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：认识一下递归的形式。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RecursionTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接方法递归</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;----test1---&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 直接方法递归</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 间接方法递归</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;---test2---&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test3</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 间接递归</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果直接执行上面的代码，会进入死循环，最终导致栈内存溢出</p><img src="`+B+`"><p>以上只是用代码演示了一下，递归的形式。在下一节，在通过一个案例来给同学们讲一讲递归的执行流程。</p><h3 id="_4-2-递归算法的执行流程" tabindex="-1">4.2 递归算法的执行流程 <a class="header-anchor" href="#_4-2-递归算法的执行流程" aria-label="Permalink to &quot;4.2 递归算法的执行流程&quot;">​</a></h3><p>为了弄清楚递归的执行流程，接下来我们通过一个案例来学习一下。</p><p>案例需求：计算n的阶乘，比如5的阶乘 = 1 * 2 * 3 * 4 * 5 ； 6 的阶乘 = 1 * 2 * 3 * 4 * 5 * 6</p><p>分析需求用递归该怎么做</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">假设</span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(n)表示n的阶乘，那么我们可以推导出下面的式子</span></span>
<span class="line"><span style="color:#F6F6F4;">	 </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">3</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">4</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">4</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">3</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">总结规律：</span></span>
<span class="line"><span style="color:#F6F6F4;">	除了</span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; 出口</span></span>
<span class="line"><span style="color:#F6F6F4;">	其他的</span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(n) </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(n</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">假设</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(n)表示n的阶乘，那么我们可以推导出下面的式子</span></span>
<span class="line"><span style="color:#24292E;">	 </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">总结规律：</span></span>
<span class="line"><span style="color:#24292E;">	除了</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; 出口</span></span>
<span class="line"><span style="color:#24292E;">	其他的</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(n) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">n</span></span></code></pre></div><p>我们可以把f(n)当做一个方法，那么方法的写法如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握递归的应用，执行流程和算法思想。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RecursionTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5的阶乘是：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//求n个数的阶乘</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 终结点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(n </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(n </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> n;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握递归的应用，执行流程和算法思想。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RecursionTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;5的阶乘是：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//求n个数的阶乘</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 终结点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个代码的执行流程，我们用内存图的形式来分析一下，该案例中递归调用的特点是：<strong>一层一层调用，再一层一层往回返。</strong></p><img src="`+b+`"><h3 id="_4-3-递归文件搜索" tabindex="-1">4.3 递归文件搜索 <a class="header-anchor" href="#_4-3-递归文件搜索" aria-label="Permalink to &quot;4.3 递归文件搜索&quot;">​</a></h3><p>学习完递归算法执行流程后，最后我们回过头来。再来看一下，如果使用递归来遍历文件夹。</p><p>案例需求：在<code>D:\\\\</code>判断下搜索QQ.exe这个文件，然后直接输出。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.先调用文件夹的listFiles方法，获取文件夹的一级内容，得到一个数组</span></span>
<span class="line"><span style="color:#F6F6F4;">2.然后再遍历数组，获取数组中的File对象</span></span>
<span class="line"><span style="color:#F6F6F4;">3.因为File对象可能是文件也可能是文件夹，所以接下来就需要判断</span></span>
<span class="line"><span style="color:#F6F6F4;">	判断File对象如果是文件，就获取文件名，如果文件名是\`QQ.exe\`则打印，否则不打印</span></span>
<span class="line"><span style="color:#F6F6F4;">	判断File对象如果是文件夹，就递归执行1,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,3步骤</span></span>
<span class="line"><span style="color:#F6F6F4;">所以：把1，</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,3步骤写成方法，递归调用即可。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.先调用文件夹的listFiles方法，获取文件夹的一级内容，得到一个数组</span></span>
<span class="line"><span style="color:#24292E;">2.然后再遍历数组，获取数组中的File对象</span></span>
<span class="line"><span style="color:#24292E;">3.因为File对象可能是文件也可能是文件夹，所以接下来就需要判断</span></span>
<span class="line"><span style="color:#24292E;">	判断File对象如果是文件，就获取文件名，如果文件名是\`QQ.exe\`则打印，否则不打印</span></span>
<span class="line"><span style="color:#24292E;">	判断File对象如果是文件夹，就递归执行1,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,3步骤</span></span>
<span class="line"><span style="color:#24292E;">所以：把1，</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,3步骤写成方法，递归调用即可。</span></span></code></pre></div><p>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握文件搜索的实现。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RecursionTest3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#62E884;">searchFile</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) , </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">QQ.exe</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 去目录下搜索某个文件</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">dir</span><span style="color:#7B7F8B;">  目录</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">fileName</span><span style="color:#7B7F8B;"> 要搜索的文件名称</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">searchFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">dir</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">fileName</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、把非法的情况都拦截住</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(dir </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">dir.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> dir.</span><span style="color:#62E884;">isFile</span><span style="color:#F6F6F4;">()){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 代表无法搜索</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、dir不是null,存在，一定是目录对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取当前目录下的全部一级文件对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;">[] files </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dir.</span><span style="color:#62E884;">listFiles</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、判断当前目录下是否存在一级文件对象，以及是否可以拿到一级文件对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(files </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> files.length </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 4、遍历全部一级文件对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> files) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 5、判断文件是否是文件,还是文件夹</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(f.</span><span style="color:#62E884;">isFile</span><span style="color:#F6F6F4;">()){</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 是文件，判断这个文件名是否是我们要找的</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(f.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(fileName)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">找到了：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> f.</span><span style="color:#62E884;">getAbsolutePath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">Runtime</span><span style="color:#F6F6F4;"> runtime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Runtime.</span><span style="color:#62E884;">getRuntime</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                        runtime.</span><span style="color:#62E884;">exec</span><span style="color:#F6F6F4;">(f.</span><span style="color:#62E884;">getAbsolutePath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 是文件夹，继续重复这个过程（递归）</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#62E884;">searchFile</span><span style="color:#F6F6F4;">(f, fileName);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握文件搜索的实现。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RecursionTest3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">searchFile</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:/&quot;</span><span style="color:#24292E;">) , </span><span style="color:#032F62;">&quot;QQ.exe&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 去目录下搜索某个文件</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">dir</span><span style="color:#6A737D;">  目录</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">fileName</span><span style="color:#6A737D;"> 要搜索的文件名称</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">searchFile</span><span style="color:#24292E;">(File </span><span style="color:#E36209;">dir</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">fileName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、把非法的情况都拦截住</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(dir </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">dir.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> dir.</span><span style="color:#6F42C1;">isFile</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 代表无法搜索</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、dir不是null,存在，一定是目录对象。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取当前目录下的全部一级文件对象。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">File</span><span style="color:#24292E;">[] files </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dir.</span><span style="color:#6F42C1;">listFiles</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、判断当前目录下是否存在一级文件对象，以及是否可以拿到一级文件对象。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(files </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> files.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 4、遍历全部一级文件对象。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (File f </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> files) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 5、判断文件是否是文件,还是文件夹</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(f.</span><span style="color:#6F42C1;">isFile</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 是文件，判断这个文件名是否是我们要找的</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(f.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(fileName)){</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;找到了：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> f.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        Runtime runtime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Runtime.</span><span style="color:#6F42C1;">getRuntime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        runtime.</span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">(f.</span><span style="color:#6F42C1;">getAbsolutePath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 是文件夹，继续重复这个过程（递归）</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">searchFile</span><span style="color:#24292E;">(f, fileName);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,141),k=[w];function M(H,_,L,x,j,T){return a(),l("div",null,k)}const O=n(v,[["render",M]]);export{N as __pageData,O as default};
