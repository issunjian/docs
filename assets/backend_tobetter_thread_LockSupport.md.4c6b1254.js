import{_ as s,o as a,c as n,V as p}from"./chunks/framework.c6d8cbec.js";const E=JSON.parse('{"title":"深入理解Java并发线程阻塞唤醒类LockSupport","description":"深入理解Java并发线程阻塞唤醒类LockSupport","frontmatter":{"title":"深入理解Java并发线程阻塞唤醒类LockSupport","shortTitle":"线程阻塞唤醒类LockSupport","description":"深入理解Java并发线程阻塞唤醒类LockSupport","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,LockSupport"}]]},"headers":[],"relativePath":"backend/tobetter/thread/LockSupport.md","filePath":"backend/tobetter/thread/LockSupport.md"}'),o={name:"backend/tobetter/thread/LockSupport.md"},l=p(`<h1 id="深入理解java并发线程阻塞唤醒类locksupport" tabindex="-1">深入理解Java并发线程阻塞唤醒类LockSupport <a class="header-anchor" href="#深入理解java并发线程阻塞唤醒类locksupport" aria-label="Permalink to &quot;深入理解Java并发线程阻塞唤醒类LockSupport&quot;">​</a></h1><p>LockSupport位于java.util.concurrent.locks包下，有兴趣的可以直接去看源码，该类的方法并不是很多。LockSupprot是线程的阻塞原语，用来阻塞线程和唤醒线程。每个使用LockSupport的线程都会与一个许可关联，如果该许可可用，并且可在线程中使用，则调用park()将会立即返回，否则可能阻塞。如果许可尚不可用，则可以调用 unpark 使其可用。但是注意许可<strong>不可重入</strong>，也就是说只能调用一次park()方法，否则会一直阻塞。</p><p>LockSupport中的方法不多，这里将这些方法做一个总结：</p><h2 id="阻塞线程" tabindex="-1"><strong>阻塞线程</strong> <a class="header-anchor" href="#阻塞线程" aria-label="Permalink to &quot;**阻塞线程**&quot;">​</a></h2><ol><li><code>void park()</code>：阻塞当前线程，如果调用unpark方法或者当前线程被中断，从能从park()方法中返回</li><li><code>void park(Object blocker)</code>：功能同方法1，入参增加一个Object对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li><li><code>void parkNanos(long nanos)</code>：阻塞当前线程，最长不超过nanos纳秒，增加了超时返回的特性；</li><li><code>void parkNanos(Object blocker, long nanos)</code>：功能同方法3，入参增加一个Object对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li><li><code>void parkUntil(long deadline)</code>：阻塞当前线程，知道deadline；</li><li><code>void parkUntil(Object blocker, long deadline)</code>：功能同方法5，入参增加一个Object对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li></ol><h2 id="唤醒线程" tabindex="-1"><strong>唤醒线程</strong> <a class="header-anchor" href="#唤醒线程" aria-label="Permalink to &quot;**唤醒线程**&quot;">​</a></h2><p><code>void unpark(Thread thread)</code>:唤醒处于阻塞状态的指定线程</p><p>实际上LockSupport阻塞和唤醒线程的功能是依赖于sun.misc.Unsafe，这是一个很底层的类，有兴趣的可以去查阅资料，比如park()方法的功能实现则是靠unsafe.park()方法。</p><p>另外在阻塞线程这一系列方法中还有一个很有意思的现象就是，每个方法都会新增一个带有Object的阻塞对象的重载方法。那么增加了一个Object对象的入参会有什么不同的地方了？示例代码很简单就不说了，直接看dump线程的信息。</p><p><strong>调用park()方法dump线程</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">main</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> #</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> prio</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;"> os_prio</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> tid</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0x02cdcc00</span><span style="color:#F6F6F4;"> nid</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0x2b48</span><span style="color:#F6F6F4;"> waiting on condition [</span><span style="color:#BF9EEE;">0x00d6f000</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">   java.lang.Thread.State</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WAITING</span><span style="color:#F6F6F4;"> (parking)</span></span>
<span class="line"><span style="color:#F6F6F4;">        at sun.misc.Unsafe.</span><span style="color:#62E884;">park</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Native</span><span style="color:#F6F6F4;"> Method)</span></span>
<span class="line"><span style="color:#F6F6F4;">        at java.util.concurrent.locks.LockSupport.</span><span style="color:#62E884;">park</span><span style="color:#F6F6F4;">(LockSupport.java</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">304</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        at learn.LockSupportDemo.</span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(LockSupportDemo.java</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;"> #</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> os_prio</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> tid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x02cdcc00</span><span style="color:#24292E;"> nid</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x2b48</span><span style="color:#24292E;"> waiting on condition [</span><span style="color:#005CC5;">0x00d6f000</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   java.lang.Thread.State</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WAITING</span><span style="color:#24292E;"> (parking)</span></span>
<span class="line"><span style="color:#24292E;">        at sun.misc.Unsafe.</span><span style="color:#6F42C1;">park</span><span style="color:#24292E;">(Native Method)</span></span>
<span class="line"><span style="color:#24292E;">        at java.util.concurrent.locks.LockSupport.</span><span style="color:#6F42C1;">park</span><span style="color:#24292E;">(LockSupport.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">304</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        at learn.LockSupportDemo.</span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(LockSupportDemo.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)</span></span></code></pre></div><p><strong>调用park(Object blocker)方法dump线程</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&quot;main&quot; #1 prio=5 os_prio=0 tid=0x0069cc00 nid=0x6c0 waiting on condition [0x00dcf000]</span></span>
<span class="line"><span style="color:#f6f6f4;">   java.lang.Thread.State: WAITING (parking)</span></span>
<span class="line"><span style="color:#f6f6f4;">        at sun.misc.Unsafe.park(Native Method)</span></span>
<span class="line"><span style="color:#f6f6f4;">        - parking to wait for  &lt;0x048c2d18&gt; (a java.lang.String)</span></span>
<span class="line"><span style="color:#f6f6f4;">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span></span>
<span class="line"><span style="color:#f6f6f4;">        at learn.LockSupportDemo.main(LockSupportDemo.java:7)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&quot;main&quot; #1 prio=5 os_prio=0 tid=0x0069cc00 nid=0x6c0 waiting on condition [0x00dcf000]</span></span>
<span class="line"><span style="color:#24292e;">   java.lang.Thread.State: WAITING (parking)</span></span>
<span class="line"><span style="color:#24292e;">        at sun.misc.Unsafe.park(Native Method)</span></span>
<span class="line"><span style="color:#24292e;">        - parking to wait for  &lt;0x048c2d18&gt; (a java.lang.String)</span></span>
<span class="line"><span style="color:#24292e;">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span></span>
<span class="line"><span style="color:#24292e;">        at learn.LockSupportDemo.main(LockSupportDemo.java:7)</span></span></code></pre></div><p>通过分别调用这两个方法然后dump线程信息可以看出，带Object的park方法相较于无参的park方法会增加 <code>parking to wait for &lt;0x048c2d18&gt; (a java.lang.String）</code>的信息，这种信息就类似于记录“案发现场”，有助于工程人员能够迅速发现问题解决问题。</p><p>有个有意思的事情是，我们都知道如果使用synchronzed阻塞了线程dump线程时都会有阻塞对象的描述，在java 5推出LockSupport时遗漏了这一点，在java 6时进行了补充。</p><p>还有一点需要需要的是：<strong>synchronzed致使线程阻塞，线程会进入到BLOCKED状态，而调用LockSupprt方法阻塞线程会致使线程进入到WAITING状态。</strong></p><p>用一个很简单的例子说说这些方法怎么用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LockSupportDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> thread </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(() </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            LockSupport.</span><span style="color:#62E884;">park</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">被唤醒</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        thread.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        LockSupport.</span><span style="color:#62E884;">unpark</span><span style="color:#F6F6F4;">(thread);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LockSupportDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            LockSupport.</span><span style="color:#6F42C1;">park</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;被唤醒&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        LockSupport.</span><span style="color:#6F42C1;">unpark</span><span style="color:#24292E;">(thread);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>thread线程调用LockSupport.park()致使thread阻塞，当mian线程睡眠3秒结束后通过LockSupport.unpark(thread)方法唤醒thread线程,thread线程被唤醒执行后续操作。另外，还有一点值得关注的是，<strong><code>LockSupport.unpark(thread)</code>可以指定线程对象唤醒指定的线程</strong>。</p><hr><blockquote><p>内容大部分来源以下三个开源仓库：</p><ul><li><a href="http://concurrent.redspider.group/" target="_blank" rel="noreferrer">深入浅出 Java 多线程</a></li><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a></li><li><a href="https://github.com/CoderLeixiaoshuai/java-eight-part" target="_blank" rel="noreferrer">Java八股文</a></li></ul></blockquote><hr>`,22),t=[l];function e(c,r,y,i,F,d){return a(),n("div",null,t)}const k=s(o,[["render",e]]);export{E as __pageData,k as default};
