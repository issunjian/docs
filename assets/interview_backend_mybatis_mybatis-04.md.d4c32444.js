import{_ as e,o as s,c as a,V as t}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mybatis/mybatis-04.md","filePath":"interview/backend/mybatis/mybatis-04.md"}'),o={name:"interview/backend/mybatis/mybatis-04.md"},r=t(`<h3 id="_1、什么是-mybatis" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E4%BB%80%E4%B9%88%E6%98%AF-mybatis" target="_blank" rel="noreferrer">1、什么是 MyBatis？</a> <a class="header-anchor" href="#_1、什么是-mybatis" aria-label="Permalink to &quot;[1、什么是 MyBatis？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#1什么是-mybatis)&quot;">​</a></h3><p>MyBatis 是一个可以自定义 SQL、存储过程和高级映射的持久层框架。</p><h3 id="_2、当实体类中的属性名和表中的字段名不一样-怎么办" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E5%BD%93%E5%AE%9E%E4%BD%93%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D%E5%92%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E5%90%8D%E4%B8%8D%E4%B8%80%E6%A0%B7-%E6%80%8E%E4%B9%88%E5%8A%9E-" target="_blank" rel="noreferrer">2、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</a> <a class="header-anchor" href="#_2、当实体类中的属性名和表中的字段名不一样-怎么办" aria-label="Permalink to &quot;[2、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#2当实体类中的属性名和表中的字段名不一样-怎么办-)&quot;">​</a></h3><p>第1种： 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;select id=”selectorder” parametertype=”int” resultetype=”me.gacl.domain.order”&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id};</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/select&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;select id=”selectorder” parametertype=”int” resultetype=”me.gacl.domain.order”&gt;</span></span>
<span class="line"><span style="color:#24292e;">       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id};</span></span>
<span class="line"><span style="color:#24292e;">&lt;/select&gt;</span></span></code></pre></div><p>第2种： 通过<code>&lt;resultMap&gt;</code>来映射字段名和实体类属性名的一一对应的关系。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultMap=&quot;orderresultmap&quot;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">select * from orders where order_id=#{id}</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/select&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;resultMap type=”me.gacl.domain.order” id=”orderresultmap”&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;!–用id属性来映射主键字段–&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;id property=”id” column=”order_id”&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;result property = “orderno” column =”order_no”/&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;result property=”price” column=”order_price” /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/reslutMap&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultMap=&quot;orderresultmap&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">select * from orders where order_id=#{id}</span></span>
<span class="line"><span style="color:#24292e;">&lt;/select&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;resultMap type=”me.gacl.domain.order” id=”orderresultmap”&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!–用id属性来映射主键字段–&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;id property=”id” column=”order_id”&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    &lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据表中的属性–&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;result property = “orderno” column =”order_no”/&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;result property=”price” column=”order_price” /&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/reslutMap&gt;</span></span></code></pre></div><h3 id="_3、mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3mybatis%E6%98%AF%E5%A6%82%E4%BD%95%E5%B0%86sql%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%B0%81%E8%A3%85%E4%B8%BA%E7%9B%AE%E6%A0%87%E5%AF%B9%E8%B1%A1%E5%B9%B6%E8%BF%94%E5%9B%9E%E7%9A%84%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%98%A0%E5%B0%84%E5%BD%A2%E5%BC%8F" target="_blank" rel="noreferrer">3、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</a> <a class="header-anchor" href="#_3、mybatis是如何将sql执行结果封装为目标对象并返回的-都有哪些映射形式" aria-label="Permalink to &quot;[3、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#3mybatis是如何将sql执行结果封装为目标对象并返回的都有哪些映射形式)&quot;">​</a></h3><p>第一种是使用<code>&lt;resultMap&gt;</code>标签，逐一定义数据库列名和对象属性名之间的映射关系。</p><p>第二种是使用sql列的别名功能，将列的别名书写为对象属性名。</p><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h3 id="_4、当实体类中的属性名和表中的字段名不一样-怎么办" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E5%BD%93%E5%AE%9E%E4%BD%93%E7%B1%BB%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D%E5%92%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E5%90%8D%E4%B8%8D%E4%B8%80%E6%A0%B7-%E6%80%8E%E4%B9%88%E5%8A%9E" target="_blank" rel="noreferrer">4、当实体类中的属性名和表中的字段名不一样 ，怎么办</a> <a class="header-anchor" href="#_4、当实体类中的属性名和表中的字段名不一样-怎么办" aria-label="Permalink to &quot;[4、当实体类中的属性名和表中的字段名不一样 ，怎么办](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#4当实体类中的属性名和表中的字段名不一样-怎么办)&quot;">​</a></h3><p>第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultType=&quot;com.jourwon.pojo.Order&quot;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id};</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/select&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultType=&quot;com.jourwon.pojo.Order&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">       select order_id id, order_no orderno ,order_price price form orders where order_id=#{id};</span></span>
<span class="line"><span style="color:#24292e;">&lt;/select&gt;</span></span></code></pre></div><p>第2种： 通过<code>&lt;resultMap&gt;</code>来映射字段名和实体类属性名的一一对应的关系。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultMap=&quot;orderResultMap&quot;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    select * from orders where order_id=#{id}</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/select&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    </span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;resultMap type=&quot;com.jourwon.pojo.Order&quot; id=&quot;orderResultMap&quot;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;!–用id属性来映射主键字段–&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;id property=&quot;id&quot; column=&quot;order_id&quot;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    </span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;result property =&quot;orderno&quot; column =&quot;order_no&quot;/&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;result property=&quot;price&quot; column=&quot;order_price&quot; /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/reslutMap&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;select id=&quot;getOrder&quot; parameterType=&quot;int&quot; resultMap=&quot;orderResultMap&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">    select * from orders where order_id=#{id}</span></span>
<span class="line"><span style="color:#24292e;">&lt;/select&gt;</span></span>
<span class="line"><span style="color:#24292e;">    </span></span>
<span class="line"><span style="color:#24292e;">&lt;resultMap type=&quot;com.jourwon.pojo.Order&quot; id=&quot;orderResultMap&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!–用id属性来映射主键字段–&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;id property=&quot;id&quot; column=&quot;order_id&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">    </span></span>
<span class="line"><span style="color:#24292e;">    &lt;!–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;result property =&quot;orderno&quot; column =&quot;order_no&quot;/&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;result property=&quot;price&quot; column=&quot;order_price&quot; /&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/reslutMap&gt;</span></span></code></pre></div><h3 id="_5、使用mybatis的mapper接口调用时候有哪些要求" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E4%BD%BF%E7%94%A8mybatis%E7%9A%84mapper%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E6%97%B6%E5%80%99%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A6%81%E6%B1%82" target="_blank" rel="noreferrer">5、使用Mybatis的mapper接口调用时候有哪些要求？</a> <a class="header-anchor" href="#_5、使用mybatis的mapper接口调用时候有哪些要求" aria-label="Permalink to &quot;[5、使用Mybatis的mapper接口调用时候有哪些要求？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#5使用mybatis的mapper接口调用时候有哪些要求)&quot;">​</a></h3><p><strong>1、</strong> Mapper接口方法名和Mapper.xml中定义的每个SQL的id相同；</p><p><strong>2、</strong> Mapper接口方法的输入参数类型和mapper.xml中定义的每个sqlparameterType类型相同</p><p><strong>3、</strong> Mapper接口方法的输入输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</p><p><strong>4、</strong> Mapper.xml文件中的namespace，就是接口的类路径。</p><h3 id="_6、mybatis框架适用场合" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6mybatis%E6%A1%86%E6%9E%B6%E9%80%82%E7%94%A8%E5%9C%BA%E5%90%88%EF%BC%9A" target="_blank" rel="noreferrer">6、MyBatis框架适用场合：</a> <a class="header-anchor" href="#_6、mybatis框架适用场合" aria-label="Permalink to &quot;[6、MyBatis框架适用场合：](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#6mybatis框架适用场合：)&quot;">​</a></h3><p><strong>1、</strong> MyBatis专注于SQL本身，是一个足够灵活的DAO层解决方案。</p><p><strong>2、</strong> 对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis将是不错的选择。</p><h3 id="_7、为什么需要预编译" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E9%A2%84%E7%BC%96%E8%AF%91" target="_blank" rel="noreferrer">7、为什么需要预编译</a> <a class="header-anchor" href="#_7、为什么需要预编译" aria-label="Permalink to &quot;[7、为什么需要预编译](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#7为什么需要预编译)&quot;">​</a></h3><p><strong>定义：</strong></p><p>SQL 预编译指的是数据库驱动在发送 SQL 语句和参数给 DBMS 之前对 SQL 语句进行编译，这样 DBMS 执行 SQL 时，就不需要重新编译。</p><p><strong>为什么需要预编译</strong></p><p>JDBC 中使用对象 PreparedStatement 来抽象预编译语句，使用预编译。预编译阶段可以优化 SQL 的执行。预编译之后的 SQL 多数情况下可以直接执行，DBMS 不需要再次编译，越复杂的SQL，编译的复杂度将越大，预编译阶段可以合并多次操作为一个操作。同时预编译语句对象可以重复利用。把一个 SQL 预编译后产生的 PreparedStatement 对象缓存下来，下次对于同一个SQL，可以直接使用这个缓存的 PreparedState 对象。Mybatis默认情况下，将对所有的 SQL 进行预编译。</p><p>还有一个重要的原因，复制SQL注入</p><h3 id="_8、什么是mybatis" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E4%BB%80%E4%B9%88%E6%98%AFmybatis" target="_blank" rel="noreferrer">8、什么是Mybatis？</a> <a class="header-anchor" href="#_8、什么是mybatis" aria-label="Permalink to &quot;[8、什么是Mybatis？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#8什么是mybatis)&quot;">​</a></h3><p><strong>1、</strong> Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。</p><p><strong>2、</strong> MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><p><strong>3、</strong> 通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</p><h3 id="_9、mybatis是如何进行分页的-分页插件的原理是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9mybatis%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5%E7%9A%84%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、Mybatis是如何进行分页的？分页插件的原理是什么？</a> <a class="header-anchor" href="#_9、mybatis是如何进行分页的-分页插件的原理是什么" aria-label="Permalink to &quot;[9、Mybatis是如何进行分页的？分页插件的原理是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#9mybatis是如何进行分页的分页插件的原理是什么)&quot;">​</a></h3><p>Mybatis使用Row Bounds对象进行分页，它是针对Result Set结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页原理：分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><h3 id="_10、mybatis-都有哪些-executor-执行器-它们之间的区别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10mybatis-%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B-executor-%E6%89%A7%E8%A1%8C%E5%99%A8%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">10、Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？</a> <a class="header-anchor" href="#_10、mybatis-都有哪些-executor-执行器-它们之间的区别是什么" aria-label="Permalink to &quot;[10、Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MyBatis/MyBatis最新面试题，2021年面试题及答案汇总.md#10mybatis-都有哪些-executor-执行器它们之间的区别是什么)&quot;">​</a></h3><p>Mybatis 有三种基本的 Executor 执行器，SimpleExecutor、ReuseExecutor、</p><p>BatchExecutor。1、SimpleExecutor：每执行一次 update 或 select，就开启一个 Statement 对</p><p>象，用完立刻关闭 Statement 对象。2、ReuseExecutor：执行 update 或 select，以 sql 作为</p><p>key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，</p><p>而是放置于 Map3、BatchExecutor：完成批处理。</p><h3 id="_11、mybatis与hibernate有哪些不同" tabindex="-1">11、MyBatis与Hibernate有哪些不同？ <a class="header-anchor" href="#_11、mybatis与hibernate有哪些不同" aria-label="Permalink to &quot;11、MyBatis与Hibernate有哪些不同？&quot;">​</a></h3><h3 id="_12、讲下-mybatis-的缓存" tabindex="-1">12、讲下 MyBatis 的缓存 <a class="header-anchor" href="#_12、讲下-mybatis-的缓存" aria-label="Permalink to &quot;12、讲下 MyBatis 的缓存&quot;">​</a></h3><h3 id="_13、mybatis与hibernate有哪些不同" tabindex="-1">13、MyBatis与Hibernate有哪些不同？ <a class="header-anchor" href="#_13、mybatis与hibernate有哪些不同" aria-label="Permalink to &quot;13、MyBatis与Hibernate有哪些不同？&quot;">​</a></h3><h3 id="_14、xml-映射文件中-除了常见的-select-insert-updae-delete-标签之外-还有哪些标签" tabindex="-1">14、Xml 映射文件中，除了常见的 select|insert|updae|delete 标签之外，还有哪些标签？ <a class="header-anchor" href="#_14、xml-映射文件中-除了常见的-select-insert-updae-delete-标签之外-还有哪些标签" aria-label="Permalink to &quot;14、Xml 映射文件中，除了常见的 select|insert|updae|delete 标签之外，还有哪些标签？&quot;">​</a></h3><h3 id="_15、如何获取自动生成的-主-键值" tabindex="-1">15、如何获取自动生成的(主)键值? <a class="header-anchor" href="#_15、如何获取自动生成的-主-键值" aria-label="Permalink to &quot;15、如何获取自动生成的(主)键值?&quot;">​</a></h3><h3 id="_16、orm是什么" tabindex="-1">16、ORM是什么 <a class="header-anchor" href="#_16、orm是什么" aria-label="Permalink to &quot;16、ORM是什么&quot;">​</a></h3><h3 id="_17、简述mybatis的插件运行原理-以及如何编写一个插件。" tabindex="-1">17、简述Mybatis的插件运行原理，以及如何编写一个插件。 <a class="header-anchor" href="#_17、简述mybatis的插件运行原理-以及如何编写一个插件。" aria-label="Permalink to &quot;17、简述Mybatis的插件运行原理，以及如何编写一个插件。&quot;">​</a></h3><h3 id="_18、如何执行批量插入" tabindex="-1">18、如何执行批量插入? <a class="header-anchor" href="#_18、如何执行批量插入" aria-label="Permalink to &quot;18、如何执行批量插入?&quot;">​</a></h3><h3 id="_19、模糊查询-like-语句该怎么写" tabindex="-1">19、模糊查询 like 语句该怎么写 <a class="header-anchor" href="#_19、模糊查询-like-语句该怎么写" aria-label="Permalink to &quot;19、模糊查询 like 语句该怎么写&quot;">​</a></h3><h3 id="_20、mybatis的一级、二级缓存" tabindex="-1">20、Mybatis的一级、二级缓存: <a class="header-anchor" href="#_20、mybatis的一级、二级缓存" aria-label="Permalink to &quot;20、Mybatis的一级、二级缓存:&quot;">​</a></h3><h3 id="_21、mybatis与spring-的整合" tabindex="-1">21、Mybatis与Spring 的整合？ <a class="header-anchor" href="#_21、mybatis与spring-的整合" aria-label="Permalink to &quot;21、Mybatis与Spring 的整合？&quot;">​</a></h3><h3 id="_22、resulttype-resultmap-的区别" tabindex="-1">22、resultType resultMap 的区别？ <a class="header-anchor" href="#_22、resulttype-resultmap-的区别" aria-label="Permalink to &quot;22、resultType resultMap 的区别？&quot;">​</a></h3><h3 id="_23、在-mapper-中如何传递多个参数" tabindex="-1">23、在 mapper 中如何传递多个参数？ <a class="header-anchor" href="#_23、在-mapper-中如何传递多个参数" aria-label="Permalink to &quot;23、在 mapper 中如何传递多个参数？&quot;">​</a></h3><h3 id="_24、mybatis的表关联的映射" tabindex="-1">24、Mybatis的表关联的映射？ <a class="header-anchor" href="#_24、mybatis的表关联的映射" aria-label="Permalink to &quot;24、Mybatis的表关联的映射？&quot;">​</a></h3>`,57),l=[r];function n(p,i,c,d,E,u){return s(),a("div",null,l)}const m=e(o,[["render",n]]);export{B as __pageData,m as default};
