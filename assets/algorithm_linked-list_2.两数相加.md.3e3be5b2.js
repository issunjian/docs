import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"LeetCode 2. 两数相加","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/linked-list/2.两数相加.md","filePath":"algorithm/linked-list/2.两数相加.md"}'),p={name:"algorithm/linked-list/2.两数相加.md"},o=l(`<h1 id="leetcode-2-两数相加" tabindex="-1">LeetCode 2. 两数相加 <a class="header-anchor" href="#leetcode-2-两数相加" aria-label="Permalink to &quot;LeetCode 2. 两数相加&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 <strong>逆序</strong> 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">输入：(2 -&gt; 4 -&gt; 3</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (5 </span><span style="color:#F286C4;">-&gt; 6 -&gt; 4</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">输出：7 -&gt; 0 -&gt; 8</span></span>
<span class="line"><span style="color:#F286C4;">原因：342 + 465 = 807</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">输入：(2 -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 4 -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 3) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (5 -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 6 -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 4)</span></span>
<span class="line"><span style="color:#24292E;">输出：7 -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 0 -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> 8</span></span>
<span class="line"><span style="color:#24292E;">原因：342 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> 465 = 807</span></span></code></pre></div><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/add-two-numbers</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p>模拟相加，创建一个新的链表，注意一下进位，由于本题按照逆序来输出的，直接从头结点开始遍历就好了，两个链表其中一个为空节点，直接置为 0 即可。</p><p>同时，要注意，最后一个进位的情况，要进行判断一下。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function ListNode(val, next) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.next = (next===undefined ? null : next)</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">l1</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">l2</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addTwoNumbers</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">l1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">l2</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ListNode</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">head</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 头结点</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> cnt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 进位</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (l1 </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> l2) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> ans </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (l1 </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> l1.val </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (l2 </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> l2.val </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> cnt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    cnt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ans </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    p.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ListNode</span><span style="color:#F6F6F4;">(ans </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">    l1 </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (l1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> l1.next);</span></span>
<span class="line"><span style="color:#F6F6F4;">    l2 </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (l2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> l2.next);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  cnt </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (p.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ListNode</span><span style="color:#F6F6F4;">(cnt));</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> head.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"> * function ListNode(val, next) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = (val===undefined ? 0 : val)</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.next = (next===undefined ? null : next)</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">l1</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">l2</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addTwoNumbers</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">l1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">l2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;head&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 头结点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 进位</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (l1 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> l2) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (l1 </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> l1.val </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (l2 </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> l2.val </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> cnt;</span></span>
<span class="line"><span style="color:#24292E;">    cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ans </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(ans </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next;</span></span>
<span class="line"><span style="color:#24292E;">    l1 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (l1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l1.next);</span></span>
<span class="line"><span style="color:#24292E;">    l2 </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (l2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> l2.next);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  cnt </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(cnt));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head.next;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">学如逆水行舟，不进则退</span></span></code></pre></div>`,13),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const D=s(p,[["render",t]]);export{C as __pageData,D as default};
