import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring/Day01.md","filePath":"backend/spring/Day01.md"}'),o={name:"backend/spring/Day01.md"},p=l(`<h2 id="_1、spring-简介" tabindex="-1">1、Spring 简介 <a class="header-anchor" href="#_1、spring-简介" aria-label="Permalink to &quot;1、Spring 简介&quot;">​</a></h2><h3 id="_1-1-spring-课程介绍" tabindex="-1">1.1 Spring 课程介绍 <a class="header-anchor" href="#_1-1-spring-课程介绍" aria-label="Permalink to &quot;1.1 Spring 课程介绍&quot;">​</a></h3><h4 id="「spring」背景导入" tabindex="-1">「Spring」背景导入 <a class="header-anchor" href="#「spring」背景导入" aria-label="Permalink to &quot;「Spring」背景导入&quot;">​</a></h4><p><strong>我们为什么要学习 Spring 框架？</strong></p><h4 id="_1-1-1-为什么要学" tabindex="-1">1.1.1 为什么要学 <a class="header-anchor" href="#_1-1-1-为什么要学" aria-label="Permalink to &quot;1.1.1 为什么要学&quot;">​</a></h4><p>点击查看为什么要学</p><ul><li>Spring 技术是 JavaEE 开发必备技能，企业开发技术选型命中率&gt;90% 👈</li><li>专业角度 <ul><li><strong>简化开发</strong>，降低企业级开发的复杂性</li><li><strong>框架整合</strong>，高效整合其他技术，提高企业级应用开发与运行效率 <img src="http://www.yangeit.cn:21010/assets/image-20210729171139088-ab3c6728.png" alt="An image"> :::</li></ul></li></ul><h4 id="_1-1-2-学什么" tabindex="-1">1.1.2 学什么 <a class="header-anchor" href="#_1-1-2-学什么" aria-label="Permalink to &quot;1.1.2 学什么&quot;">​</a></h4><p>点击查看学什么</p><ul><li><p>简化开发</p><ul><li><strong>IOC(反转控制)</strong> DI</li><li><strong>AOP(面向切面编程)</strong><ul><li><strong>事务处理</strong></li></ul></li></ul></li><li><p>框架整合</p><ul><li><strong>MyBatis</strong></li><li>MyBatis-plus</li><li>Struts</li><li>Struts2</li><li>Hibernate</li><li>…… :::</li></ul></li></ul><h4 id="_1-1-3-怎么学" tabindex="-1">1.1.3 怎么学 <a class="header-anchor" href="#_1-1-3-怎么学" aria-label="Permalink to &quot;1.1.3 怎么学&quot;">​</a></h4><p>点击查看怎么学</p><ul><li>学习 Spring 框架</li><li>学习基础操作，思考间的联系 <ul><li>看打印的结果，并且思考为什么会输出这样的结果。</li></ul></li><li>学习案例，熟练应用操作的同时，体会</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729171346022-607c19ad.png" alt="An image"></p><p>An image</p><h3 id="_1-2-初识-spring" tabindex="-1">1.2 初识 Spring <a class="header-anchor" href="#_1-2-初识-spring" aria-label="Permalink to &quot;1.2 初识 Spring&quot;">​</a></h3><h4 id="_1-2-1「初识-spring」核心问题-答案" tabindex="-1">1.2.1「初识 Spring」核心问题&amp;答案 <a class="header-anchor" href="#_1-2-1「初识-spring」核心问题-答案" aria-label="Permalink to &quot;1.2.1「初识 Spring」核心问题&amp;答案&quot;">​</a></h4><p>目前我们使用的是 Spring 几版本？</p><ol><li>Spring5.0</li></ol><h4 id="_1-2-2-spring-家族" tabindex="-1">1.2.2 Spring 家族 <a class="header-anchor" href="#_1-2-2-spring-家族" aria-label="Permalink to &quot;1.2.2 Spring 家族&quot;">​</a></h4><p>点击查看详情</p><ul><li>官网：<a href="https://spring.io/" target="_blank" rel="noreferrer">https://spring.ioopen in new window</a></li><li>Spring 发展到今天已经形成了一种开发的生态圈，Spring 提供了若干个项目，每个项目用于完成特定的功能。</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729171850181-81fe43d9.png" alt="An image"></p><p>An image</p><h4 id="_1-2-3-spring-发展史" tabindex="-1">1.2.3 Spring 发展史 <a class="header-anchor" href="#_1-2-3-spring-发展史" aria-label="Permalink to &quot;1.2.3 Spring 发展史&quot;">​</a></h4><p><img src="http://www.yangeit.cn:21010/assets/image-20210729171926576-15a84686.png" alt="An image"></p><p>An image</p><h3 id="_1-3-spring-体系结构" tabindex="-1">1.3 Spring 体系结构 <a class="header-anchor" href="#_1-3-spring-体系结构" aria-label="Permalink to &quot;1.3 Spring 体系结构&quot;">​</a></h3><h4 id="_1-3-1「spring-体系结构」核心问题-答案" tabindex="-1">1.3.1「Spring 体系结构」核心问题&amp;答案 <a class="header-anchor" href="#_1-3-1「spring-体系结构」核心问题-答案" aria-label="Permalink to &quot;1.3.1「Spring 体系结构」核心问题&amp;答案&quot;">​</a></h4><p>问题</p><p>通过系统架构图，Spring 能不能进行数据层开发？Spring 能不能进行 web 层开发？</p><h4 id="_1-3-2-spring-framework-系统架构图" tabindex="-1">1.3.2 Spring Framework 系统架构图 <a class="header-anchor" href="#_1-3-2-spring-framework-系统架构图" aria-label="Permalink to &quot;1.3.2 Spring Framework 系统架构图&quot;">​</a></h4><p>点击查看系统架构图</p><ul><li>Spring Framework 是 Spring 生态圈中最基础的项目，是其他项目的根基</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729172153796-b3fd0bc3.png" alt="An image"></p><p>An image</p><p><img src="http://www.yangeit.cn:21010/assets/image-20210729172352627-cf42c613.png" alt="An image"></p><p>An image</p><h4 id="_1-3-3-spring-framework-课程学习路线" tabindex="-1">1.3.3 Spring Framework 课程学习路线 <a class="header-anchor" href="#_1-3-3-spring-framework-课程学习路线" aria-label="Permalink to &quot;1.3.3 Spring Framework 课程学习路线&quot;">​</a></h4><p>点击查看课程学习路线</p><p><img src="http://www.yangeit.cn:21010/assets/image-20210729172513669-0961d56a.png" alt="An image"></p><p>An image</p><h3 id="_1-4-spring-核心概念-🍐-❤️-👈" tabindex="-1">1.4 Spring 核心概念 🍐 ❤️ 👈 <a class="header-anchor" href="#_1-4-spring-核心概念-🍐-❤️-👈" aria-label="Permalink to &quot;1.4 Spring 核心概念 🍐 ❤️ 👈&quot;">​</a></h3><h4 id="_1-4-1「初识-spring」核心问题-答案" tabindex="-1">1.4.1「初识 Spring」核心问题&amp;答案 <a class="header-anchor" href="#_1-4-1「初识-spring」核心问题-答案" aria-label="Permalink to &quot;1.4.1「初识 Spring」核心问题&amp;答案&quot;">​</a></h4><p>问题 1：<strong>目前我们的代码存在什么问题以及怎么解决这些问题？</strong></p><p>点击查看答案</p><p><img src="http://www.yangeit.cn:21010/assets/image-20210729173516149-fd3e15ea.png" alt="An image"></p><p>An image</p><ul><li>代码书写现状 <ul><li><strong>耦合度偏高</strong></li></ul></li><li>解决方案 - <strong>使用对象时，在程序中不要主动使用 new 产生对象，转换为由外部提供对象</strong></li></ul><p>问题 2：<strong>请描述什么是 IOC，什么是 DI？</strong></p><p>点击查看答案</p><ul><li><p>使用对象时，由主动 new 产生对象转换为由提供对象，此过程中由程序转移到外部，此思想称为控制反转。</p><p>通俗的讲就是“</p><ul><li><p>Spring 技术对 IoC 思想进行了实现</p><ul><li>Spring 提供了一个容器，称为，用来充当 IoC 思想中的“外部”</li><li>IOC 容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在 IoC 容器中统称为</li></ul></li></ul></li><li><ul><li>在容器中建立 bean 与 bean 之间的依赖关系的整个过程，称为依赖注入。</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729174148134-8c17c12c.png" alt="An image"></p><p>An image</p><ul><li>目标：充分解耦 <ul><li><strong>使用 IoC 容器管理 bean（IOC)</strong></li><li><strong>在 IoC 容器内将有依赖关系的 bean 进行关系绑定（DI）</strong></li></ul></li><li>最终效果 - 使用对象时不仅可以直接从 IoC 容器中获取，并且获取到的 bean 已经绑定了所有的依赖关系 👈</li></ul></li></ul><p>问题 3：<strong>请用 Di 和 ioc 的思想描述下图：</strong></p><p>点击查看图片 :point_left:</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220512002710786-856f5ea8.png" alt="An image"></p><p>An image</p><p>点击查看答案</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220512182952689-c0aa72ee.png" alt="An image"></p><p>An image</p><h2 id="_2、-ioc-和-di-入门案例-🍐-✏️" tabindex="-1">2、 IOC 和 DI 入门案例 🍐 ✏️ <a class="header-anchor" href="#_2、-ioc-和-di-入门案例-🍐-✏️" aria-label="Permalink to &quot;2、 IOC 和 DI 入门案例 🍐 ✏️&quot;">​</a></h2><h3 id="_2-1-ioc-入门案例【重点】" tabindex="-1">2.1 IOC 入门案例【重点】 <a class="header-anchor" href="#_2-1-ioc-入门案例【重点】" aria-label="Permalink to &quot;2.1 IOC 入门案例【重点】&quot;">​</a></h3><h4 id="_2-1-1「ioc-入门案例」核心问题-答案" tabindex="-1">2.1.1「IOC 入门案例」核心问题&amp;答案 <a class="header-anchor" href="#_2-1-1「ioc-入门案例」核心问题-答案" aria-label="Permalink to &quot;2.1.1「IOC 入门案例」核心问题&amp;答案&quot;">​</a></h4><p>问题： <strong>标签中 id 属性和 class 属性的作用是什么？</strong></p><p>点击查看答案</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><ul><li>bean 标签：表示配置 bean</li><li>id 属性：表示给 bean 起名字</li><li>class 属性：表示给 bean 定义类型</li></ul><h4 id="_2-1-2-ioc-案例思路分析" tabindex="-1">2.1.2 IOC 案例思路分析 <a class="header-anchor" href="#_2-1-2-ioc-案例思路分析" aria-label="Permalink to &quot;2.1.2 IOC 案例思路分析&quot;">​</a></h4><p>点击查看思路分析</p><ol><li>管理什么？(Service 与 Dao)</li><li>如何将被管理的对象告知 IOC 容器？(配置文件)</li><li>被管理的对象交给 IOC 容器，如何获取到 IoC 容器？(接口)</li><li>IOC 容器得到后，如何从容器中获取 bean？(接口方法)</li><li>使用 Spring 导入哪些坐标？(pom.xml)</li></ol><h4 id="_2-1-3-实现步骤" tabindex="-1">2.1.3 实现步骤 <a class="header-anchor" href="#_2-1-3-实现步骤" aria-label="Permalink to &quot;2.1.3 实现步骤&quot;">​</a></h4><p>步骤</p><ul><li>【第一步】导入 Spring 坐标（pom.xml）</li><li>【第二步】定义 Spring 管理的类（接口）</li><li>【第三步】创建 Spring 配置文件，配置对应类作为 Spring 管理的 bean 对象(resources/applicationContext.xml)</li><li>【第四步】初始化 IOC 容器（Spring 核心容器/Spring 容器），通过容器获取 bean 对象</li></ul><h5 id="【第一步】导入-spring-坐标" tabindex="-1">【第一步】导入 Spring 坐标 <a class="header-anchor" href="#【第一步】导入-spring-坐标" aria-label="Permalink to &quot;【第一步】导入 Spring 坐标&quot;">​</a></h5><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependencies</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--导入spring的坐标spring-context，对应版本是5.2.10.RELEASE  正式版--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.springframework&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;spring-context&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;5.2.10.RELEASE&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependencies</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--导入spring的坐标spring-context，对应版本是5.2.10.RELEASE  正式版--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-context&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;5.2.10.RELEASE&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h5 id="【第二步】定义-spring-管理的类-接口" tabindex="-1">【第二步】定义 Spring 管理的类（接口） <a class="header-anchor" href="#【第二步】定义-spring-管理的类-接口" aria-label="Permalink to &quot;【第二步】定义 Spring 管理的类（接口）&quot;">​</a></h5><ul><li>BookDao 接口和 BookDaoImpl 实现类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookDaoImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book dao save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDaoImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book dao save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>BookService 接口和 BookServiceImpl 实现类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BookDaoImpl</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book service save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BookDao bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDaoImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book service save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="【第三步】创建-spring-配置文件-配置对应类作为-spring-管理的-bean-对象" tabindex="-1">【第三步】创建 Spring 配置文件，配置对应类作为 Spring 管理的 bean 对象 <a class="header-anchor" href="#【第三步】创建-spring-配置文件-配置对应类作为-spring-管理的-bean-对象" aria-label="Permalink to &quot;【第三步】创建 Spring 配置文件，配置对应类作为 Spring 管理的 bean 对象&quot;">​</a></h5><ul><li>定义 applicationContext.xml 配置文件并配置 BookServiceImpl</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">beans</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">xmlns</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.springframework.org/schema/beans</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#62E884;font-style:italic;">xmlns</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">xsi</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#62E884;font-style:italic;">xsi</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">schemaLocation</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--</span></span>
<span class="line"><span style="color:#7B7F8B;">		bean标签：表示配置bean</span></span>
<span class="line"><span style="color:#7B7F8B;">    	id属性：表示给bean起名字</span></span>
<span class="line"><span style="color:#7B7F8B;">    	class属性：表示给bean定义类型</span></span>
<span class="line"><span style="color:#7B7F8B;">	--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.service.impl.BookServiceImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">beans</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">beans</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xmlns:xsi</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xsi:schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">		bean标签：表示配置bean</span></span>
<span class="line"><span style="color:#6A737D;">    	id属性：表示给bean起名字</span></span>
<span class="line"><span style="color:#6A737D;">    	class属性：表示给bean定义类型</span></span>
<span class="line"><span style="color:#6A737D;">	--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">beans</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong><strong>注意事项：bean 定义时 id 属性在同一个上下文中(IOC 容器中)不能重复</strong></strong> 👈</p><h5 id="【第四步】初始化-ioc-容器-spring-核心容器-spring-容器-通过容器获取-bean-对象" tabindex="-1">【第四步】初始化 IOC 容器（Spring 核心容器/Spring 容器），通过容器获取 Bean 对象 <a class="header-anchor" href="#【第四步】初始化-ioc-容器-spring-核心容器-spring-容器-通过容器获取-bean-对象" aria-label="Permalink to &quot;【第四步】初始化 IOC 容器（Spring 核心容器/Spring 容器），通过容器获取 Bean 对象&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">App</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1.创建IoC容器对象，加载spring核心配置文件</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2 从IOC容器中获取Bean对象(BookService对象)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BookService</span><span style="color:#F6F6F4;"> bookService</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (BookService)ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//3 调用Bean对象(BookService对象)的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookService.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1.创建IoC容器对象，加载spring核心配置文件</span></span>
<span class="line"><span style="color:#24292E;">        ApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2 从IOC容器中获取Bean对象(BookService对象)</span></span>
<span class="line"><span style="color:#24292E;">        BookService bookService</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BookService)ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3 调用Bean对象(BookService对象)的方法</span></span>
<span class="line"><span style="color:#24292E;">        bookService.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-1-4-运行结果" tabindex="-1">2.1.4 运行结果 <a class="header-anchor" href="#_2-1-4-运行结果" aria-label="Permalink to &quot;2.1.4 运行结果&quot;">​</a></h4><p>点击查看运行结果</p><p><img src="http://www.yangeit.cn:21010/assets/image-20210729184337603-96916919.png" alt="image-20210729184337603"></p><p>image-20210729184337603</p><ul><li>关系梳理： <img src="http://www.yangeit.cn:21010/assets/image-20220412222948193-61afec11.png" alt="image-20220412222948193"></li></ul><h3 id="_2-2-di-入门案例【重点】" tabindex="-1">2.2 DI 入门案例【重点】 <a class="header-anchor" href="#_2-2-di-入门案例【重点】" aria-label="Permalink to &quot;2.2 DI 入门案例【重点】&quot;">​</a></h3><h4 id="_2-2-1「di-入门案例」核心问题-答案" tabindex="-1">2.2.1「DI 入门案例」核心问题&amp;答案 <a class="header-anchor" href="#_2-2-1「di-入门案例」核心问题-答案" aria-label="Permalink to &quot;2.2.1「DI 入门案例」核心问题&amp;答案&quot;">​</a></h4><p>问题：<strong>property 标签中 name 属性和 ref 属性的作用是什么？</strong></p><p>点击查看答案</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.UserDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--注入引用类型--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.service.impl.BookServiceImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--property标签：设置注入属性--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--name属性：设置注入的属性名，实际是set方法对应的名称--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--ref属性：设置注入引用类型bean的id或name--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--注入引用类型--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--property标签：设置注入属性--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--name属性：设置注入的属性名，实际是set方法对应的名称--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--ref属性：设置注入引用类型bean的id或name--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//setter注入需要提供要注入对象的set方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setUserDao</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> userDao) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.userDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> userDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//setter注入需要提供要注入对象的set方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setBookDao</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//setter注入需要提供要注入对象的set方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUserDao</span><span style="color:#24292E;">(UserDao userDao) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDao;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//setter注入需要提供要注入对象的set方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setBookDao</span><span style="color:#24292E;">(BookDao bookDao) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bookDao;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h4 id="_2-2-2-di-入门案例思路分析" tabindex="-1">2.2.2 DI 入门案例思路分析 <a class="header-anchor" href="#_2-2-2-di-入门案例思路分析" aria-label="Permalink to &quot;2.2.2 DI 入门案例思路分析&quot;">​</a></h4><p>思路分析</p><ol><li>基于 IOC 管理 bean</li><li>Service 中使用 new 形式创建的 Dao 对象是否保留？(否)</li><li>Service 中需要的 Dao 对象如何进入到 Service 中？(提供方法)</li><li>Service 与 Dao 间的关系如何描述？(配置)</li></ol><h4 id="_2-2-3-实现步骤" tabindex="-1">2.2.3 实现步骤 <a class="header-anchor" href="#_2-2-3-实现步骤" aria-label="Permalink to &quot;2.2.3 实现步骤&quot;">​</a></h4><p>实现步骤</p><ul><li>【第一步】删除使用 new 的形式创建对象的代码</li><li>【第二步】提供依赖对象对应的 setter 方法</li><li>【第三步】配置 service 与 dao 之间的关系</li></ul><p>点击查看图解</p><h5 id="图解" tabindex="-1">图解 <a class="header-anchor" href="#图解" aria-label="Permalink to &quot;图解&quot;">​</a></h5><p><img src="http://www.yangeit.cn:21010/assets/image-20210729183104748-c959aa67.png" alt="image-20210729183104748"></p><p>image-20210729183104748</p><p>点击查看实现代码</p><h5 id="【第一步】删除使用-new-的形式创建对象的代码" tabindex="-1"><strong>【第一步】删除使用 new 的形式创建对象的代码</strong> <a class="header-anchor" href="#【第一步】删除使用-new-的形式创建对象的代码" aria-label="Permalink to &quot;**【第一步】删除使用 new 的形式创建对象的代码**&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BookDaoImpl</span><span style="color:#F6F6F4;">();  </span><span style="color:#7B7F8B;">//【第一步】删除使用new的形式创建对象的代码</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book service save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BookDao bookDao </span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDaoImpl</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">//【第一步】删除使用new的形式创建对象的代码</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book service save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="【第二步】提供依赖对象对应的-setter-方法" tabindex="-1"><strong>【第二步】提供依赖对象对应的 setter 方法</strong> <a class="header-anchor" href="#【第二步】提供依赖对象对应的-setter-方法" aria-label="Permalink to &quot;**【第二步】提供依赖对象对应的 setter 方法**&quot;">​</a></h5><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book service save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//【第二步】提供依赖对象对应的setter方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setBookDao</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">bookDao</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BookDao bookDao;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book service save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//【第二步】提供依赖对象对应的setter方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setBookDao</span><span style="color:#24292E;">(BookDao </span><span style="color:#E36209;">bookDao</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bookDao;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h5 id="【第三步】配置-service-与-dao-之间的关系" tabindex="-1"><strong>【第三步】配置 service 与 dao 之间的关系</strong> <a class="header-anchor" href="#【第三步】配置-service-与-dao-之间的关系" aria-label="Permalink to &quot;**【第三步】配置 service 与 dao 之间的关系**&quot;">​</a></h5><blockquote><p>在 applicationContext.xml 中配置</p></blockquote><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">beans</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">xmlns</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.springframework.org/schema/beans</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#62E884;font-style:italic;">xmlns</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">xsi</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#62E884;font-style:italic;">xsi</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">schemaLocation</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--</span></span>
<span class="line"><span style="color:#7B7F8B;">		bean标签：表示配置bean</span></span>
<span class="line"><span style="color:#7B7F8B;">    	id属性：表示给bean起名字</span></span>
<span class="line"><span style="color:#7B7F8B;">    	class属性：表示给bean定义类型</span></span>
<span class="line"><span style="color:#7B7F8B;">	--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.service.impl.BookServiceImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--配置server与dao的关系</span></span>
<span class="line"><span style="color:#7B7F8B;">			property标签：表示配置当前bean的属性</span></span>
<span class="line"><span style="color:#7B7F8B;">        	name属性：表示配置哪一个具体的属性</span></span>
<span class="line"><span style="color:#7B7F8B;">        	ref属性：表示参照哪一个bean</span></span>
<span class="line"><span style="color:#7B7F8B;">		--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">beans</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">beans</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xmlns:xsi</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6F42C1;">xsi:schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">		bean标签：表示配置bean</span></span>
<span class="line"><span style="color:#6A737D;">    	id属性：表示给bean起名字</span></span>
<span class="line"><span style="color:#6A737D;">    	class属性：表示给bean定义类型</span></span>
<span class="line"><span style="color:#6A737D;">	--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--配置server与dao的关系</span></span>
<span class="line"><span style="color:#6A737D;">			property标签：表示配置当前bean的属性</span></span>
<span class="line"><span style="color:#6A737D;">        	name属性：表示配置哪一个具体的属性</span></span>
<span class="line"><span style="color:#6A737D;">        	ref属性：表示参照哪一个bean</span></span>
<span class="line"><span style="color:#6A737D;">		--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">beans</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_2-3-ioc-di-练习一下-pencil2" tabindex="-1">2.3 IoC DI 练习一下： :pencil2 <a class="header-anchor" href="#_2-3-ioc-di-练习一下-pencil2" aria-label="Permalink to &quot;2.3 IoC DI 练习一下： :pencil2&quot;">​</a></h3><p>练习</p><ol><li>导入 spring_01_quickstart 模块（也可以导入整个项目诸多模块）</li><li>阅读 applicationContext.xml 的注释信息，理解 bean 标签的属性含义</li><li>模仿 BookService 的类，试着创建一个 UserService 的接口，以及 UserServiceimpl 实现类（内部含有 bookService 和 bookDao 的成员变量）</li><li>在 ApplicationContext 中配置 bean 和 property</li><li>在 App 的 main 方法中加载 ApplicationContext.xml 容器，通过 getBean 获得 BookService 的对象，打印出来</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//3.获取IoC容器</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//4.获取bean（根据bean配置id获取）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BookService</span><span style="color:#F6F6F4;"> bookService </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (BookService) ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">bookService.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//3.获取IoC容器</span></span>
<span class="line"><span style="color:#24292E;">ApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//4.获取bean（根据bean配置id获取）</span></span>
<span class="line"><span style="color:#24292E;">BookService bookService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BookService) ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bookService.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="_3-bean-的配置" tabindex="-1">3.Bean 的配置 <a class="header-anchor" href="#_3-bean-的配置" aria-label="Permalink to &quot;3.Bean 的配置&quot;">​</a></h2><h3 id="_3-1-bean-的基础配置" tabindex="-1">3.1 Bean 的基础配置 <a class="header-anchor" href="#_3-1-bean-的基础配置" aria-label="Permalink to &quot;3.1 Bean 的基础配置&quot;">​</a></h3><h4 id="_3-1-1「ioc-入门案例」核心问题-答案" tabindex="-1">3.1.1「IOC 入门案例」核心问题&amp;答案 <a class="header-anchor" href="#_3-1-1「ioc-入门案例」核心问题-答案" aria-label="Permalink to &quot;3.1.1「IOC 入门案例」核心问题&amp;答案&quot;">​</a></h4><p>问题：<strong>bean 标签基本标签含义</strong></p><p>点击查看答案</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--bean标签标示配置bean</span></span>
<span class="line"><span style="color:#7B7F8B;">id属性标示给bean起名字</span></span>
<span class="line"><span style="color:#7B7F8B;">class属性表示给bean定义类型--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.service.impl.BookServiceImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!--7.配置Service与dao的关系--&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!--property标签表示配置当前bean的属性</span></span>
<span class="line"><span style="color:#7B7F8B;">name属性表示配置哪一个具体的属性</span></span>
<span class="line"><span style="color:#7B7F8B;">ref属性表示参照哪一个bean   --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--bean标签标示配置bean</span></span>
<span class="line"><span style="color:#6A737D;">id属性标示给bean起名字</span></span>
<span class="line"><span style="color:#6A737D;">class属性表示给bean定义类型--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--7.配置Service与dao的关系--&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--property标签表示配置当前bean的属性</span></span>
<span class="line"><span style="color:#6A737D;">name属性表示配置哪一个具体的属性</span></span>
<span class="line"><span style="color:#6A737D;">ref属性表示参照哪一个bean   --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao1&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>问题：<strong>Bean 的默认作用范围是什么？如何修改？</strong></p><p>点击查看答案</p><h4 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明" aria-label="Permalink to &quot;配置说明&quot;">​</a></h4><p><img src="http://www.yangeit.cn:21010/assets/image-20210729183628138-84a8e469.png" alt="image-20210729183628138"></p><p>image-20210729183628138</p><blockquote><p>扩展：scope 的取值不仅仅只有 singleton 和 prototype，还有 request、session、application、 websocket ，表示创建出的对象放置在 web 容器(tomcat)对应的位置。比如：request 表示保存到 request 域中。</p></blockquote><h4 id="代码演示" tabindex="-1">代码演示 <a class="header-anchor" href="#代码演示" aria-label="Permalink to &quot;代码演示&quot;">​</a></h4><p><img src="http://www.yangeit.cn:21010/assets/image-20210729192420048-1e59cfe5.png" alt="image-20210729192420048"></p><p>image-20210729192420048</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--scope：为bean设置作用范围，可选值为单例singloton，非单例prototype--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">scope</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">singleton</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--scope：为bean设置作用范围，可选值为单例singloton，非单例prototype--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scope</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;singleton&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="打印结果" tabindex="-1">打印结果 <a class="header-anchor" href="#打印结果" aria-label="Permalink to &quot;打印结果&quot;">​</a></h4><p><img src="http://www.yangeit.cn:21010/assets/image-20210729192730871-084ec184.png" alt="image-20210729192730871"></p><p>image-20210729192730871</p><blockquote><p>最后给大家说明一下：在我们的实际开发当中，绝大部分的 Bean 是单例的，也就是说绝大部分 Bean 不需要配置 scope 属性。👈</p></blockquote><h4 id="_3-1-2「bean-的配置」思考题-🍐" tabindex="-1">3.1.2「Bean 的配置」思考题： 🍐 <a class="header-anchor" href="#_3-1-2「bean-的配置」思考题-🍐" aria-label="Permalink to &quot;3.1.2「Bean 的配置」思考题： 🍐&quot;">​</a></h4><p>下列哪些对象用单例，哪些不适用？</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220412224454414-ed40826b.png" alt="image-20220412224454414"></p><p>image-20220412224454414</p><h3 id="_3-2-练习一下-✏️" tabindex="-1">3.2 练习一下： ✏️ <a class="header-anchor" href="#_3-2-练习一下-✏️" aria-label="Permalink to &quot;3.2 练习一下： ✏️&quot;">​</a></h3><p>需求和步鄹</p><ol><li>导入或者打开：spring_02_base_config 项目 <a href="http://www.yangeit.cn:21010/expand/importcode.html" target="_blank" rel="noreferrer">导入项目注意事项</a></li><li>需求： <ol><li>在配置文件中，修改 id 为 bookDao 的对象，配置为单例，打印 2 次实例化的 地址值，观察是否不同</li><li>在配置文件中，修改 id 为 bookDao 的对象，配置为 prototype，打印 2 次实例化的 地址值，观察是否不同</li></ol></li></ol><ul><li>注意：导工程后，一定要做的三个步鄹 <ol><li>检查 Maven 仓库</li><li>检查 jdk-1.8</li><li>检查编译器版本-1.8</li></ol></li></ul><h2 id="_4、bean-的实例化-🍐" tabindex="-1">4、Bean 的实例化 🍐 <a class="header-anchor" href="#_4、bean-的实例化-🍐" aria-label="Permalink to &quot;4、Bean 的实例化 🍐&quot;">​</a></h2><h3 id="_4-1「bean-的实例化」核心问题-答案" tabindex="-1">4.1「Bean 的实例化」核心问题&amp;答案 <a class="header-anchor" href="#_4-1「bean-的实例化」核心问题-答案" aria-label="Permalink to &quot;4.1「Bean 的实例化」核心问题&amp;答案&quot;">​</a></h3><p>问题：<strong>Bean 的实例化方式有几种？</strong></p><p>点击查看答案</p><ol><li>构造方法方式【重点】</li><li>静态工厂方式【了解】 <ol><li>指定工程，指定工程的静态方法</li></ol></li><li>实例工厂方式【了解】 实现 FactoryBean【熟悉】</li></ol><h3 id="_4-2-实例化-bean-的三种方式" tabindex="-1">4.2 实例化 Bean 的三种方式 <a class="header-anchor" href="#_4-2-实例化-bean-的三种方式" aria-label="Permalink to &quot;4.2 实例化 Bean 的三种方式&quot;">​</a></h3><h4 id="_4-2-1-构造方法方式【重点】-point-left" tabindex="-1">4.2.1 构造方法方式【重点】 :point_left <a class="header-anchor" href="#_4-2-1-构造方法方式【重点】-point-left" aria-label="Permalink to &quot;4.2.1 构造方法方式【重点】 :point_left&quot;">​</a></h4><p>要点</p><ol><li>bean 本质上就是对象，创建 bean 使用构造方法完成</li><li>默认使用无参数的构造方法进行创建 Bean，private 修饰的也可以（反射）</li><li>无参构造方法如果不存在，将抛出异常 BeanCreationException</li></ol><p>点击查看代码</p><ul><li>BookDaoImpl 实现类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookDaoImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BookDaoImpl</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book dao constructor is running ....</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book dao save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDaoImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDaoImpl</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book dao constructor is running ....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book dao save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>applicationContext.xml 配置</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--方式一：构造方法实例化bean--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--方式一：构造方法实例化bean--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><ul><li>AppForInstanceBook 测试类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AppForInstanceBook</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (BookDao) ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppForInstanceBook</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        BookDao bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BookDao) ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>运行结果</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729194137151-2f57fb3c.png" alt="image-20210729194137151"></p><p>image-20210729194137151</p><p>思考: 私有的无参数构造可以吗？</p><h4 id="_4-2-2-静态工厂方式【了解】" tabindex="-1">4.2.2 静态工厂方式【了解】 <a class="header-anchor" href="#_4-2-2-静态工厂方式【了解】" aria-label="Permalink to &quot;4.2.2 静态工厂方式【了解】&quot;">​</a></h4><p>点击查看代码</p><ul><li>OrderDao 接口和 OrderDaoImpl 实现类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OrderDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OrderDaoImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">OrderDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">order dao save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderDaoImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;order dao save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>OrderDaoFatory 工厂类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//静态工厂创建对象</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OrderDaoFactory</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">OrderDao</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getOrderDao</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">factory setup....</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OrderDaoImpl</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//静态工厂创建对象</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderDaoFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> OrderDao </span><span style="color:#6F42C1;">getOrderDao</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;factory setup....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrderDaoImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>applicationContext.xml 配置</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--方式二：使用静态工厂实例化bean--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.factory.OrderDaoFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">factory-method</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getOrderDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--方式二：使用静态工厂实例化bean--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;orderDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.factory.OrderDaoFactory&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory-method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;getOrderDao&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p><img src="http://www.yangeit.cn:21010/assets/image-20210729195248948-9dad5b9d.png" alt="image-20210729195248948"></p><p>image-20210729195248948</p><ul><li>AppForInstanceOrder 测试类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AppForInstanceOrder</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">OrderDao</span><span style="color:#F6F6F4;"> orderDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (OrderDao) ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        orderDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppForInstanceOrder</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        OrderDao orderDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (OrderDao) ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orderDao&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        orderDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>运行结果</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729195009198-7c75b261.png" alt="image-20210729195009198"></p><p>image-20210729195009198</p><h4 id="_4-2-3-实例工厂方式" tabindex="-1">4.2.3 实例工厂方式 <a class="header-anchor" href="#_4-2-3-实例工厂方式" aria-label="Permalink to &quot;4.2.3 实例工厂方式&quot;">​</a></h4><p>先造工厂，再造 bean</p><p>点击查看代码</p><ul><li>UserDao 接口和 UserDaoImpl 实现类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UserDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UserDaoImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user dao save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDaoImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user dao save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>UserDaoFactory 工厂类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//实例工厂创建对象</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UserDaoFactory</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getUserDao</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">UserDaoImpl</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//实例工厂创建对象</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDaoFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserDao </span><span style="color:#6F42C1;">getUserDao</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDaoImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>applicationContext.xml 配置</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--方式三：使用实例工厂实例化bean--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.factory.UserDaoFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">factory-method</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getUserDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">factory-bean</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--方式三：使用实例工厂实例化bean--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userFactory&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.factory.UserDaoFactory&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory-method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;getUserDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory-bean</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userFactory&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><p><img src="http://www.yangeit.cn:21010/assets/image-20210729200203249-e02481ff.png" alt="image-20210729200203249"></p><p>image-20210729200203249</p><ul><li>AppForInstanceUser 测试类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AppForInstanceUser</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        //创建实例工厂对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        UserDaoFactory userDaoFactory = new UserDaoFactory();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        //通过实例工厂对象创建对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        UserDao userDao = userDaoFactory.getUserDao();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//        userDao.save();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> userDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (UserDao) ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        userDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppForInstanceUser</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        //创建实例工厂对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        UserDaoFactory userDaoFactory = new UserDaoFactory();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        //通过实例工厂对象创建对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        UserDao userDao = userDaoFactory.getUserDao();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//        userDao.save();</span></span>
<span class="line"><span style="color:#24292E;">        ApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        UserDao userDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (UserDao) ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        userDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>运行结果</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20210729200240820-937c97a0.png" alt="image-20210729200240820"></p><p>image-20210729200240820</p><h4 id="_4-2-4-实现-factorybean-方式【扩展-了解】" tabindex="-1">4.2.4 实现 FactoryBean 方式【扩展,了解】 <a class="header-anchor" href="#_4-2-4-实现-factorybean-方式【扩展-了解】" aria-label="Permalink to &quot;4.2.4 实现 FactoryBean 方式【扩展,了解】&quot;">​</a></h4><p>点击查看代码</p><ul><li>定义 UserDaoFactoryBean 实现 <code>FactoryBean&lt;UserDao&gt;</code></li></ul><blockquote><p>UserDaoFactoryBean 中实例化什么类型的对象泛型就是该类型。</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//FactoryBean创建对象</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UserDaoFactoryBean</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FactoryBean</span><span style="color:#F6F6F4;">&lt;UserDao&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//代替原始实例工厂中创建对象的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getObject</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">UserDaoImpl</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#62E884;">getObjectType</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> UserDao.class;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//FactoryBean创建对象</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDaoFactoryBean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FactoryBean</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserDao</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//代替原始实例工厂中创建对象的方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserDao </span><span style="color:#6F42C1;">getObject</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDaoImpl</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getObjectType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> UserDao.class;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>applicationContext.xml 配置</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--方式四：使用FactoryBean实例化bean--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.factory.UserDaoFactoryBean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--方式四：使用FactoryBean实例化bean--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><blockquote><p>使用之前的 AppForInstanceUser 测试类去运行看结果就行了。注意配置文件中 id=&quot;userDao&quot;是否重复。 :::</p></blockquote><p>总结一下</p><ol><li>构造方法方式【重点】--默认无参数，开发最常用 👈</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Brand brand=new Brand()</span></span>
<span class="line"><span style="color:#F6F6F4;">brand.setBrandName()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Brand brand=new Brand()</span></span>
<span class="line"><span style="color:#24292E;">brand.setBrandName()</span></span></code></pre></div><ol start="2"><li><p>静态工厂方式【了解】</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.factory.OrderDaoFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">factory-method</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getOrderDa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">1.如果不用单例模式，就不能控制实例的个数</span></span>
<span class="line"><span style="color:#F6F6F4;">2.如果使用单例模式，需要修改大量的代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;orderDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.factory.OrderDaoFactory&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory-method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;getOrderDa&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">1.如果不用单例模式，就不能控制实例的个数</span></span>
<span class="line"><span style="color:#24292E;">2.如果使用单例模式，需要修改大量的代码</span></span></code></pre></div></li><li><p>实例工厂方式【了解】</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.factory.UserDaoFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">factory-bean</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">factory-method</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getUserDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">配置较多，先创建工厂在创建实例，了解即可</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userFactory&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.factory.UserDaoFactory&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory-bean</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userFactory&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">factory-method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;getUserDao&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">配置较多，先创建工厂在创建实例，了解即可</span></span></code></pre></div></li><li><p>实现<code>FactoryBean&lt;T&gt;</code>【熟悉】实例工厂变种， 👈</p></li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.factory.UserDaoFactoryBean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">1.默认是单例模式</span></span>
<span class="line"><span style="color:#F6F6F4;">2.如果要多例，可以手动配置</span></span>
<span class="line"><span style="color:#F6F6F4;"> public boolean isSingleton() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        return false;</span></span>
<span class="line"><span style="color:#F6F6F4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;userDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">1.默认是单例模式</span></span>
<span class="line"><span style="color:#24292E;">2.如果要多例，可以手动配置</span></span>
<span class="line"><span style="color:#24292E;"> public boolean isSingleton() {</span></span>
<span class="line"><span style="color:#24292E;">        return false;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h2 id="_5、bean-的生命周期-🍐" tabindex="-1">5、Bean 的生命周期 🍐 <a class="header-anchor" href="#_5、bean-的生命周期-🍐" aria-label="Permalink to &quot;5、Bean 的生命周期 🍐&quot;">​</a></h2><h3 id="_5-1「bean-的生命周期」核心问题-答案" tabindex="-1">5.1「Bean 的生命周期」核心问题&amp;答案 <a class="header-anchor" href="#_5-1「bean-的生命周期」核心问题-答案" aria-label="Permalink to &quot;5.1「Bean 的生命周期」核心问题&amp;答案&quot;">​</a></h3><p>问题</p><p><strong>1.如何做才执行 Bean 销毁的方法？</strong></p><p><strong>2.配置多例的 Bean 能够会调用销毁的方法吗？</strong></p><h3 id="_5-2-生命周期相关概念介绍" tabindex="-1">5.2 生命周期相关概念介绍 <a class="header-anchor" href="#_5-2-生命周期相关概念介绍" aria-label="Permalink to &quot;5.2 生命周期相关概念介绍&quot;">​</a></h3><p>提示</p><ul><li>生命周期：从创建到消亡的完整过程</li><li>bean 生命周期：bean 从创建到销毁的整体过程 👈</li><li>bean 生命周期控制：在 bean 创建后到销毁前做一些事情</li></ul><h3 id="_5-3-代码演示" tabindex="-1">5.3 代码演示 <a class="header-anchor" href="#_5-3-代码演示" aria-label="Permalink to &quot;5.3 代码演示&quot;">​</a></h3><h4 id="_5-3-1-bean-生命周期控制-方式-1-🍐" tabindex="-1">5.3.1 Bean 生命周期控制 方式 1 🍐 <a class="header-anchor" href="#_5-3-1-bean-生命周期控制-方式-1-🍐" aria-label="Permalink to &quot;5.3.1 Bean 生命周期控制 方式 1 🍐&quot;">​</a></h4><p>自行提供生命周期控制方法，在 bean 标签中配置</p><p>点击查看代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookDaoImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book dao save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//表示bean初始化对应的操作</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">init</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">init...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//表示bean销毁前对应的操作</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">destory</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">destory...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDaoImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book dao save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//表示bean初始化对应的操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;init...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//表示bean销毁前对应的操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destory</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;destory...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>applicationContext.xml 配置</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--init-method：设置bean初始化生命周期回调函数,此处填写init方法名--&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!--destroy-method：设置bean销毁生命周期回调函数，仅适用于单例对象，此处填写destory方法名--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">init-method</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">init</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">destroy-method</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">destory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--init-method：设置bean初始化生命周期回调函数,此处填写init方法名--&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--destroy-method：设置bean销毁生命周期回调函数，仅适用于单例对象，此处填写destory方法名--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init-method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;init&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy-method</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;destory&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><ul><li>测试类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AppForLifeCycle</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">( </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;"> ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//此处需要使用实现类类型，接口类型没有close方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (BookDao) ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//关闭容器，执行销毁的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        ctx.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppForLifeCycle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此处需要使用实现类类型，接口类型没有close方法</span></span>
<span class="line"><span style="color:#24292E;">        ClassPathXmlApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        BookDao bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BookDao) ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//关闭容器，执行销毁的方法</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_5-3-2-bean-生命周期控制-方式-2-🚀" tabindex="-1">5.3.2 Bean 生命周期控制 方式 2 🚀 <a class="header-anchor" href="#_5-3-2-bean-生命周期控制-方式-2-🚀" aria-label="Permalink to &quot;5.3.2 Bean 生命周期控制 方式 2 🚀&quot;">​</a></h4><p>实现 InitializingBean, DisposableBean 接口</p><p>点击查看代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BookServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookService</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">InitializingBean</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">DisposableBean</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setBookDao</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">bookDao</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">set .....</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book service save ...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">destroy</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">service destroy</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterPropertiesSet</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">service init</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookService</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">InitializingBean</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">DisposableBean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BookDao bookDao;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setBookDao</span><span style="color:#24292E;">(BookDao </span><span style="color:#E36209;">bookDao</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;set .....&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bookDao;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book service save ...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;service destroy&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterPropertiesSet</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;service init&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_5-3-3-bean-销毁时机" tabindex="-1">5.3.3 Bean 销毁时机 <a class="header-anchor" href="#_5-3-3-bean-销毁时机" aria-label="Permalink to &quot;5.3.3 Bean 销毁时机&quot;">​</a></h4><p>要点</p><ul><li>容器关闭前触发 bean 的销毁 👈</li><li>关闭容器方式： <ul><li>方式 1：手工关闭容器 <code>ConfigurableApplicationContext</code>接口<code>close()</code>操作</li><li>方式 2：注册关闭钩子，在虚拟机退出前先关闭容器再退出虚拟机 <code>ConfigurableApplicationContext</code>接口<code>registerShutdownHook()</code>操作</li></ul></li></ul><p>点击查看</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AppForLifeCycle</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">( </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;"> ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//此处需要使用实现类类型，接口类型没有close方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">applicationContext.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (BookDao) ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        bookDao.</span><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//注册关闭钩子函数，在虚拟机退出之前回调此函数，关闭容器</span></span>
<span class="line"><span style="color:#F6F6F4;">        ctx.</span><span style="color:#62E884;">registerShutdownHook</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//关闭容器</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//ctx.close();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppForLifeCycle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//此处需要使用实现类类型，接口类型没有close方法</span></span>
<span class="line"><span style="color:#24292E;">        ClassPathXmlApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;applicationContext.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        BookDao bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BookDao) ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        bookDao.</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//注册关闭钩子函数，在虚拟机退出之前回调此函数，关闭容器</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">registerShutdownHook</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//关闭容器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//ctx.close();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_5-3-4-bean-流程" tabindex="-1">5.3.4 Bean 流程 <a class="header-anchor" href="#_5-3-4-bean-流程" aria-label="Permalink to &quot;5.3.4 Bean 流程&quot;">​</a></h4><p>执行的流程</p><ul><li>分配内存</li><li>构造方法</li><li>set 方法</li><li>init 方法</li><li>bean 的调用方法</li><li>destroy 方法</li></ul><h3 id="_5-4-练习一下-✏️" tabindex="-1">5.4 练习一下：✏️ <a class="header-anchor" href="#_5-4-练习一下-✏️" aria-label="Permalink to &quot;5.4 练习一下：✏️&quot;">​</a></h3><p>需求和步鄹</p><ol><li>练习 scope 控制作用范围--单例和多例</li><li>练习生命周期的 2 中配置方法 （xml 配置和接口配置）</li><li>练习关闭容器 2 个方法</li></ol><h2 id="_6-依赖注入-di-配置" tabindex="-1">6.依赖注入(DI 配置) <a class="header-anchor" href="#_6-依赖注入-di-配置" aria-label="Permalink to &quot;6.依赖注入(DI 配置)&quot;">​</a></h2><h3 id="_6-1-依赖注入方式-🍐" tabindex="-1">6.1 依赖注入方式 🍐 <a class="header-anchor" href="#_6-1-依赖注入方式-🍐" aria-label="Permalink to &quot;6.1 依赖注入方式 🍐&quot;">​</a></h3><p>要点</p><ul><li>setter 注入 👈</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> userDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//setter注入需要提供要注入对象的set方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setUserDao</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> userDao) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.userDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> userDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserDao userDao;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//setter注入需要提供要注入对象的set方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUserDao</span><span style="color:#24292E;">(UserDao userDao) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDao;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><ul><li>构造器注入 🚀</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BookServiceImpl</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BookDao</span><span style="color:#F6F6F4;"> bookDao, </span><span style="color:#97E1F1;font-style:italic;">UserDao</span><span style="color:#F6F6F4;"> userDao) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.bookDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bookDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.userDao </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> userDao;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> BookDao bookDao;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserDao userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BookServiceImpl</span><span style="color:#24292E;">(BookDao bookDao, UserDao userDao) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.bookDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bookDao;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userDao </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDao;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_6-1-1「依赖注入」核心问题-答案" tabindex="-1">6.1.1「依赖注入」核心问题&amp;答案 <a class="header-anchor" href="#_6-1-1「依赖注入」核心问题-答案" aria-label="Permalink to &quot;6.1.1「依赖注入」核心问题&amp;答案&quot;">​</a></h4><h4 id="_6-1-2-依赖注入方式选择" tabindex="-1">6.1.2 依赖注入方式选择 <a class="header-anchor" href="#_6-1-2-依赖注入方式选择" aria-label="Permalink to &quot;6.1.2 依赖注入方式选择&quot;">​</a></h4><p>依赖注入方式选择</p><ol><li>强制依赖使用构造器进行，使用 setter 注入有概率不进行注入导致 null 对象出现</li><li>可选依赖使用 setter 注入进行，灵活性强</li><li>Spring 框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li><li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用 setter 注入完成可选依赖的注入</li><li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供 setter 方法就必须使用构造器注入</li></ol><p>警告</p><p>提问：什么是 setter 注入，什么是构造器注入？</p><h3 id="_6-2-自动装配-🍐" tabindex="-1">6.2 自动装配 🍐 <a class="header-anchor" href="#_6-2-自动装配-🍐" aria-label="Permalink to &quot;6.2 自动装配 🍐&quot;">​</a></h3><p>概念</p><ul><li>IoC 容器根据 bean 所依赖的资源在容器中自动查找并注入到 bean 中的过程称为自动装配</li><li>自动装配方式 <ul><li>👈</li><li>按名称</li><li>按构造方法</li><li>不启用自动装配</li></ul></li></ul><h4 id="_6-2-1「自动装配」核心问题-答案" tabindex="-1">6.2.1「自动装配」核心问题&amp;答案 <a class="header-anchor" href="#_6-2-1「自动装配」核心问题-答案" aria-label="Permalink to &quot;6.2.1「自动装配」核心问题&amp;答案&quot;">​</a></h4><p>提示</p><p>问题：<strong>如何配置按照类型自动装配？</strong></p><ul><li>配置中使用 bean 标签 autowire 属性设置自动装配的类型</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">autowire</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">byType</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.service.impl.BookServiceImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--autowire属性：开启自动装配，通常使用按类型装配--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autowire</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;byType&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h4 id="_6-2-2-自动装配类型" tabindex="-1">6.2.2 自动装配类型 <a class="header-anchor" href="#_6-2-2-自动装配类型" aria-label="Permalink to &quot;6.2.2 自动装配类型&quot;">​</a></h4><h5 id="依赖自动装配" tabindex="-1">依赖自动装配 <a class="header-anchor" href="#依赖自动装配" aria-label="Permalink to &quot;依赖自动装配&quot;">​</a></h5><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.dao.impl.BookDaoImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">bean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bookService</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">autowire</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">byType</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itheima.service.impl.BookServiceImpl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookDao&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bookService&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autowire</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;byType&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h5 id="依赖自动装配特征" tabindex="-1">依赖自动装配特征 <a class="header-anchor" href="#依赖自动装配特征" aria-label="Permalink to &quot;依赖自动装配特征&quot;">​</a></h5><p>注意:</p><ol><li>👈</li><li>使用按类型装配时（byType）必须保障容器中相同类型的 bean 唯一，推荐使用</li><li>使用按名称装配时（byName）必须保障容器中具有指定名称的 bean，因变量名与配置耦合，不推荐使用</li><li>自动装配优先级低于 setter 注入与构造器注入，同时出现时自动装配配置失效</li></ol><h3 id="_6-3-集合注入" tabindex="-1">6.3 集合注入 <a class="header-anchor" href="#_6-3-集合注入" aria-label="Permalink to &quot;6.3 集合注入&quot;">​</a></h3><p>各种数据类型依赖注入：</p><ol><li>简单数据类型注入，如：String int 等</li><li>引用数据类型注入，如：userDao、bookDao</li><li>集合数据类型注入，如：单列：数组 list set 双列：map Propertis</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">array</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">array</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;100&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;200&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;300&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">array</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;array&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;100&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;200&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;300&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">array</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">property</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">list</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">list</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;itcast&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;itheima&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;boxuegu&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;chuanzhihui&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">list</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;list&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">list</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;itcast&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;itheima&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;boxuegu&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;chuanzhihui&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">list</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">property</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">set</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;itcast&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;itheima&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;boxuegu&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;boxuegu&lt;/</span><span style="color:#F286C4;">value</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;set&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">set</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;itcast&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;itheima&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;boxuegu&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;boxuegu&lt;/</span><span style="color:#22863A;">value</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">set</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">property</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">map</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">map</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">entry</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">key</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">country</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">china</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">entry</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">key</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">province</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">henan</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">entry</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">key</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">city</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">kaifeng</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">map</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;map&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">map</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">entry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;country&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;china&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">entry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;province&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;henan&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">entry</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;kaifeng&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">map</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">property</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">properties</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">props</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">prop</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">key</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">country</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;china&lt;/</span><span style="color:#F286C4;">prop</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">prop</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">key</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">province</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;henan&lt;/</span><span style="color:#F286C4;">prop</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">prop</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">key</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">city</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;kaifeng&lt;/</span><span style="color:#F286C4;">prop</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">props</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">property</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">props</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">prop</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;country&quot;</span><span style="color:#24292E;">&gt;china&lt;/</span><span style="color:#22863A;">prop</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">prop</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;province&quot;</span><span style="color:#24292E;">&gt;henan&lt;/</span><span style="color:#22863A;">prop</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">prop</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;city&quot;</span><span style="color:#24292E;">&gt;kaifeng&lt;/</span><span style="color:#22863A;">prop</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">props</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">property</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">说明：property 标签表示 setter 方式注入，构造方式注入 constructor-arg 标签内部也可以写&lt;array&gt;、&lt;list&gt;、&lt;set&gt;、&lt;map&gt;、&lt;props&gt;标签</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">说明：property 标签表示 setter 方式注入，构造方式注入 constructor-arg 标签内部也可以写&lt;array&gt;、&lt;list&gt;、&lt;set&gt;、&lt;map&gt;、&lt;props&gt;标签</span></span></code></pre></div>`,278),e=[p];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const g=s(o,[["render",t]]);export{d as __pageData,g as default};
