import{_ as s,o as a,c as n,V as o}from"./chunks/framework.c6d8cbec.js";const g=JSON.parse('{"title":"混合模式","description":"","frontmatter":{"author":"Choi Yang","date":"2023-02-22T00:00:00.000Z"},"headers":[],"relativePath":"patterns/mixin-pattern/index.md","filePath":"patterns/mixin-pattern/index.md"}'),l={name:"patterns/mixin-pattern/index.md"},p=o(`<h1 id="混合模式" tabindex="-1">混合模式 <a class="header-anchor" href="#混合模式" aria-label="Permalink to &quot;混合模式&quot;">​</a></h1><p><code>mixin</code> 是一个对象，我们可以使用它向另一个对象或类添加可重用的功能，而不需要使用继承的方式。</p><blockquote><p>注意，我们不能单独使用 <code>mixin</code>：它们的唯一目的是在没有继承的情况下向对象或类添加功能。</p></blockquote><h2 id="mixin-使用" tabindex="-1">mixin 使用 <a class="header-anchor" href="#mixin-使用" aria-label="Permalink to &quot;mixin 使用&quot;">​</a></h2><p>假设对于我们的应用程序，我们需要创建多个狗。然而，我们创建的狗只有一个 <code>name</code> 属性，如下代码所示：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dog</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>一只狗除开拥有名字外，它应该还会汪汪叫，摇尾巴，玩！</p><p>我们可以创建一个 <code>mixin</code>，为我们提供 <code>bark</code>、<code>wagTail</code> 和 <code>play</code> 属性，而不是直接添加到 <code>Dog</code> 中。</p><p>开头咱们说过，一个 <code>mixin</code> 就是一个对象，因此我们创建一个名为 <code>dogFunctionality</code> 的对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> dogFunctionality </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">bark</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Woof!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">wagTail</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Wagging my tail!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">play</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Playing!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dogFunctionality</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">bark</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Woof!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">wagTail</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Wagging my tail!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Playing!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以通过 <code>Object.assign</code> 方法将上述 <code>dogFunctionality</code> 对象添加到 <code>Dog</code> 的原型中，也就是 <code>Dog.prototype</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dog</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> dogFunctionality </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">bark</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Woof!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">wagTail</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Wagging my tail!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">play</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Playing!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Dog</span><span style="color:#F6F6F4;">.prototype, dogFunctionality)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dogFunctionality</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">bark</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Woof!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">wagTail</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Wagging my tail!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Playing!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, dogFunctionality)</span></span></code></pre></div><p>那么在实例化 <code>Dog</code> 后，每一个实例对象都能访问 <code>Dog</code> 上的方法，包括在原型上的方法，因为我们可以通过原型链的方式去往上找。</p><p>不妨来示例化一下吧，<code>new</code> 出来一个宠物，名叫做 <code>pet1</code>，我们来访问一下上述新增加的方法试试：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pet1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Dog</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Daisy</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pet1.name </span><span style="color:#7B7F8B;">// Daisy</span></span>
<span class="line"><span style="color:#F6F6F4;">pet1.</span><span style="color:#62E884;">bark</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// Woof!</span></span>
<span class="line"><span style="color:#F6F6F4;">pet1.</span><span style="color:#62E884;">play</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// Playing!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pet1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Daisy&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pet1.name </span><span style="color:#6A737D;">// Daisy</span></span>
<span class="line"><span style="color:#24292E;">pet1.</span><span style="color:#6F42C1;">bark</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// Woof!</span></span>
<span class="line"><span style="color:#24292E;">pet1.</span><span style="color:#6F42C1;">play</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// Playing!</span></span></code></pre></div><p>会发现能正常使用，那么我们通过 <code>mixin</code> 方式可以轻松将自定义的一些方法添加到类或对象当中，不需要使用继承的方式。</p><h2 id="mixin-本身也可以继承" tabindex="-1">mixin 本身也可以继承 <a class="header-anchor" href="#mixin-本身也可以继承" aria-label="Permalink to &quot;mixin 本身也可以继承&quot;">​</a></h2><p>虽然我们可以在没有继承的情况下使用<code>mixin</code>添加方法，但 <code>mixin</code> 本身也可以使用继承。</p><p>比如说，大多数哺乳动物(除了海豚，也许还有其他物种)能走路和睡觉，而狗也是哺乳动物，应该也是要会走路和睡觉。</p><p>下面我们再创建一个名为 <code>animalFunctionality</code> 的 <code>mixin</code> 添加走路和睡觉的方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> animalFunctionality </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">walk</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Walking!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">sleep</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Sleeping!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">animalFunctionality</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">walk</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Walking!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Sleeping!&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以使用 <code>Object.assign</code> 将这些属性添加到 <code>dogFunctionality</code> 原型中。在上述例子中，目标对象是 <code>dogFunctionality</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> animalFunctionality </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// xxx</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> dogFunctionality </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// xxx</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">(dogFunctionality, animalFunctionality)</span></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Dog</span><span style="color:#F6F6F4;">.prototype, dogFunctionality)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">animalFunctionality</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// xxx</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dogFunctionality</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// xxx</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(dogFunctionality, animalFunctionality)</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Dog</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, dogFunctionality)</span></span></code></pre></div><h2 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-label="Permalink to &quot;Demo&quot;">​</a></h2><p>那么我们可以 <code>new</code> 来试试，又新增了 <code>walk</code> 和 <code>sleep</code> 方法。</p><iframe src="https://stackblitz.com/edit/mixin-pattern-demo?devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><h2 id="日常编码" tabindex="-1">日常编码 <a class="header-anchor" href="#日常编码" aria-label="Permalink to &quot;日常编码&quot;">​</a></h2><p>日常编码中的一个 <code>mixin</code> 例子就是浏览器环境中的 <code>Window</code> 对象了，它从 <code>WindowOrWorkerGlobalScope</code> 和 <code>WindowEventHandlers</code> 中混合了很多属性方法。</p><p>比如，我们常用的一些 <code>setTimeout</code> 、<code>setInterval</code>、<code>indexedDB</code> 和 <code>isSecureContext</code>。</p><p>由于它是一个 <code>mixin</code>，因此仅用于向对象去添加功能，而不能创建 <code>WindowOrWorkerGlobalScope</code> 类型的对象，我们来看看下方的例子：</p><iframe src="https://stackblitz.com/edit/mixin-pattern-window-demo?ctl=1&amp;devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><p>可以发现，我们直接去访问 <code>WindowOrWorkerGlobalScope</code> 或者 <code>WindowEventHandlers</code> 是访问不到的。</p><h2 id="react-es6-前" tabindex="-1">React (ES6 前) <a class="header-anchor" href="#react-es6-前" aria-label="Permalink to &quot;React (ES6 前)&quot;">​</a></h2><p>在引入 <code>ES6</code> 类之前，<code>mixin</code> 经常被用来为 <code>React</code> 组件添加功能。<code>React</code>团队不鼓励使用<code>mixin</code>，因为它很容易给组件增加不必要的复杂性，使其难以维护和重用。</p><p>React 团队鼓励使用更高阶的组件，这些组件现在通常可以被 <code>Hooks</code> 取代。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p><code>mixin</code> 允许我们轻松地向对象添加属性方法，而不需要将功能注入到对象的原型中。因为修改一个对象的原型被认为是一种糟糕的做法，它会导致原型污染和对于属性方法来源的不确定性。</p>`,37),e=[p];function c(t,r,y,F,i,d){return a(),n("div",null,e)}const C=s(l,[["render",c]]);export{g as __pageData,C as default};
