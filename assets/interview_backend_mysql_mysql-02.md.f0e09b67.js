import{_ as t,o as a,c as e,V as s}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mysql/mysql-02.md","filePath":"interview/backend/mysql/mysql-02.md"}'),d={name:"interview/backend/mysql/mysql-02.md"},r=s('<h3 id="_1、innodb的b-tree-存储整行数据和主键的值得区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1innodb%E7%9A%84b+tree-%E5%AD%98%E5%82%A8%E6%95%B4%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%92%8C%E4%B8%BB%E9%94%AE%E7%9A%84%E5%80%BC%E5%BE%97%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、innoDB的B+Tree 存储整行数据和主键的值得区别？</a> <a class="header-anchor" href="#_1、innodb的b-tree-存储整行数据和主键的值得区别" aria-label="Permalink to &quot;[1、innoDB的B+Tree 存储整行数据和主键的值得区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#1innodb的b+tree-存储整行数据和主键的值得区别)&quot;">​</a></h3><p><strong>1、</strong> 整行数据：innoDB的B+Tree存储了整行数据的是主键索引，也被成为聚凑索引。</p><p><strong>2、</strong> 存储主键的值：成为非主键索引，也被称为非聚凑索引</p><h3 id="_2、读写分离常见方案" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%A1%88" target="_blank" rel="noreferrer">2、读写分离常见方案？</a> <a class="header-anchor" href="#_2、读写分离常见方案" aria-label="Permalink to &quot;[2、读写分离常见方案？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#2读写分离常见方案)&quot;">​</a></h3><p><strong>1、</strong> 应用程序根据业务逻辑来判断，增删改等写操作命令发给主库，查询命令发给备库。</p><p><strong>2、</strong> 利用中间件来做代理，负责对数据库的请求识别出读还是写，并分发到不同的数据库中。（如：amoeba，MySQL-proxy）</p><h3 id="_3、六种关联查询" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E5%85%AD%E7%A7%8D%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2" target="_blank" rel="noreferrer">3、六种关联查询</a> <a class="header-anchor" href="#_3、六种关联查询" aria-label="Permalink to &quot;[3、六种关联查询](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#3六种关联查询)&quot;">​</a></h3><p><strong>1、</strong> 交叉连接（CROSS JOIN）</p><p><strong>2、</strong> 内连接（INNER JOIN）</p><p><strong>3、</strong> 外连接（LEFT JOIN/RIGHT JOIN）</p><p><strong>4、</strong> 联合查询（UNION与UNION ALL）</p><p><strong>5、</strong> 全连接（FULL JOIN）</p><p><strong>6、</strong> 交叉连接（CROSS JOIN）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">SELECT * FROM A,B(,C)或者SELECT * FROM A CROSS JOIN B (CROSS JOIN C)#没有任何关联条件，结果是笛卡尔积，结果集会很大，没有意义，很少使用内连接（INNER JOIN）SELECT * FROM A,B WHERE A.id=B.id或者SELECT * FROM A INNER JOIN B ON A.id=B.id多表中同时符合某种条件的数据记录的集合，INNER JOIN可以缩写为JOIN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SELECT * FROM A,B(,C)或者SELECT * FROM A CROSS JOIN B (CROSS JOIN C)#没有任何关联条件，结果是笛卡尔积，结果集会很大，没有意义，很少使用内连接（INNER JOIN）SELECT * FROM A,B WHERE A.id=B.id或者SELECT * FROM A INNER JOIN B ON A.id=B.id多表中同时符合某种条件的数据记录的集合，INNER JOIN可以缩写为JOIN</span></span></code></pre></div><p><strong>内连接分为三类</strong></p><p><strong>1、</strong> 等值连接：ON A.id=B.id</p><p><strong>2、</strong> 不等值连接：ON A.id &gt; B.id</p><p><strong>3、</strong> 自连接：SELECT * FROM A T1 INNER JOIN A T2 ON T1.id=T2.pid</p><p><strong>外连接（LEFT JOIN/RIGHT JOIN）</strong></p><p><strong>左外连接：</strong></p><p>LEFT OUTER JOIN, 以左表为主，先查询出左表，按照ON后的关联条件匹配右表，没有匹配到的用NULL填充，可以简写成LEFT JOIN</p><p><strong>右外连接：</strong></p><p>RIGHT OUTER JOIN, 以右表为主，先查询出右表，按照ON后的关联条件匹配左表，没有匹配到的用NULL填充，可以简写成RIGHT JOIN</p><p><strong>联合查询（UNION与UNION ALL）</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">SELECT * FROM A UNION SELECT * FROM B UNION ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SELECT * FROM A UNION SELECT * FROM B UNION ...</span></span></code></pre></div><p><strong>1、</strong> 就是把多个结果集集中在一起，UNION前的结果为基准，需要注意的是联合查询的列数要相等，相同的记录行会合并</p><p><strong>2、</strong> 如果使用UNION ALL，不会合并重复的记录行</p><p><strong>3、</strong> 效率 UNION 高于 UNION ALL</p><p><strong>全连接（FULL JOIN）</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">SELECT * FROM A LEFT JOIN B ON A.id=B.id UNIONSELECT * FROM A RIGHT JOIN B ON A.id=B.id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SELECT * FROM A LEFT JOIN B ON A.id=B.id UNIONSELECT * FROM A RIGHT JOIN B ON A.id=B.id</span></span></code></pre></div><p>MySQL不支持全连接</p><p>可以使用LEFT JOIN 和UNION和RIGHT JOIN联合使用</p><p><strong>有2张表</strong></p><p>1张R、1张S，R表有ABC三列，S表有CD两列，表中各有三条记录</p><p><strong>R表</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c1</td></tr><tr><td>a2</td><td>b2</td><td>c2</td></tr><tr><td>a3</td><td>b3</td><td>c3</td></tr></tbody></table><p><strong>S表</strong></p><table><thead><tr><th>C</th><th>D</th></tr></thead><tbody><tr><td>c1</td><td>d1</td></tr><tr><td>c2</td><td>d2</td></tr><tr><td>c4</td><td>d3</td></tr></tbody></table><p><strong>交叉连接(笛卡尔积)</strong></p><p>SQL</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select r.*,s.* from r,s</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select r.*,s.* from r,s</span></span></code></pre></div><p><strong>结果</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c1</td><td>c1</td><td>d1</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c1</td><td>d1</td></tr><tr><td>a3</td><td>b3</td><td>c3</td><td>c1</td><td>d1</td></tr><tr><td>a1</td><td>b1</td><td>c1</td><td>c2</td><td>d2</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c2</td><td>d2</td></tr><tr><td>a3</td><td>b3</td><td>c3</td><td>c2</td><td>d2</td></tr><tr><td>a1</td><td>b1</td><td>c1</td><td>c4</td><td>d3</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c4</td><td>d3</td></tr><tr><td>a3</td><td>b3</td><td>c3</td><td>c4</td><td>d3</td></tr></tbody></table><p><strong>内连接结果</strong></p><p>SQL</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select r.*,s.* from r inner join s on r.c=s.c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select r.*,s.* from r inner join s on r.c=s.c</span></span></code></pre></div><p><strong>结果</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c1</td><td>c1</td><td>d1</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c2</td><td>d2</td></tr></tbody></table><p><strong>左连接结果</strong></p><p>SQL</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select r.*,s.* from r left join s on r.c=s.c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select r.*,s.* from r left join s on r.c=s.c</span></span></code></pre></div><p><strong>结果</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c1</td><td>c1</td><td>d1</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c2</td><td>d2</td></tr><tr><td>a3</td><td>b3</td><td>c3</td><td></td><td></td></tr></tbody></table><p><strong>右连接结果</strong></p><p>SQL</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select r.*,s.* from r right join s on r.c=s.c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select r.*,s.* from r right join s on r.c=s.c</span></span></code></pre></div><p><strong>结果</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c1</td><td>c1</td><td>d1</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c2</td><td>d2</td></tr><tr><td></td><td></td><td></td><td>c4</td><td>d3</td></tr></tbody></table><p><strong>全表连接的结果（MySql不支持，Oracle支持）</strong></p><p>SQL</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select r.*,s.* from r full join s on r.c=s.c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select r.*,s.* from r full join s on r.c=s.c</span></span></code></pre></div><p><strong>结果</strong></p><table><thead><tr><th>A</th><th>B</th><th>C</th><th>C</th><th>D</th></tr></thead><tbody><tr><td>a1</td><td>b1</td><td>c1</td><td>c1</td><td>d1</td></tr><tr><td>a2</td><td>b2</td><td>c2</td><td>c2</td><td>d2</td></tr><tr><td>a3</td><td>b3</td><td>c3</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td>c4</td><td>d3</td></tr></tbody></table><h3 id="_4、什么是存储过程-有哪些优缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">4、什么是存储过程？有哪些优缺点？</a> <a class="header-anchor" href="#_4、什么是存储过程-有哪些优缺点" aria-label="Permalink to &quot;[4、什么是存储过程？有哪些优缺点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#4什么是存储过程有哪些优缺点)&quot;">​</a></h3><p><strong>存储过程</strong>，就是一些编译好了的SQL语句，这些SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后给这些代码块取一个名字，在用到这个功能的时候调用即可。</p><p><strong>优点：</strong></p><p><strong>1、</strong> 存储过程是一个预编译的代码块，执行效率比较高</p><p><strong>2、</strong> 存储过程在服务器端运行，减少客户端的压力</p><p><strong>3、</strong> 允许模块化程序设计，只需要创建一次过程，以后在程序中就可以调用该过程任意次，类似方法的复用</p><p><strong>4、</strong> 一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率</p><p><strong>5、</strong> 可以一定程度上确保数据安全</p><p><strong>缺点：</strong></p><p><strong>1、</strong> 调试麻烦</p><p><strong>2、</strong> 可移植性不灵活</p><p><strong>3、</strong> 重新编译问题</p><h3 id="_5、优化关联查询" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E4%BC%98%E5%8C%96%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2" target="_blank" rel="noreferrer">5、优化关联查询</a> <a class="header-anchor" href="#_5、优化关联查询" aria-label="Permalink to &quot;[5、优化关联查询](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#5优化关联查询)&quot;">​</a></h3><p><strong>1、</strong> 确定ON或者USING子句中是否有索引。</p><p><strong>2、</strong> 确保GROUP BY和ORDER BY只有一个表中的列，这样MySQL才有可能使用索引。</p><h3 id="_6、主键和候选键有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E4%B8%BB%E9%94%AE%E5%92%8C%E5%80%99%E9%80%89%E9%94%AE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、主键和候选键有什么区别？</a> <a class="header-anchor" href="#_6、主键和候选键有什么区别" aria-label="Permalink to &quot;[6、主键和候选键有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#6主键和候选键有什么区别)&quot;">​</a></h3><p>表格的每一行都由主键唯一标识,一个表只有一个主键。</p><p>主键也是候选键。按照惯例，候选键可以被指定为主键，并且可以用于任何外键引用。</p><h3 id="_7、既然提到了innodb使用户的b-树的索引模型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7%E6%97%A2%E7%84%B6%E6%8F%90%E5%88%B0%E4%BA%86innodb%E4%BD%BF%E7%94%A8%E6%88%B7%E7%9A%84b+%E6%A0%91%E7%9A%84%E7%B4%A2%E5%BC%95%E6%A8%A1%E5%9E%8B" target="_blank" rel="noreferrer">7、既然提到了InnoDB使用户的B+树的索引模型</a> <a class="header-anchor" href="#_7、既然提到了innodb使用户的b-树的索引模型" aria-label="Permalink to &quot;[7、既然提到了InnoDB使用户的B+树的索引模型](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#7既然提到了innodb使用户的b+树的索引模型)&quot;">​</a></h3><p><strong>那么你知道为什么采用B+树吗？这和Hash索引比较起来有什么缺点吗？</strong></p><p>因为hash索引底层是哈希表，哈希表是一种以key-value存储数据的结构，所以多个数据在存储关系上是完全没有任何顺序关系的，所以，对于区间查询是无法直接通过索引查询的，就需要全表扫描。所以，哈希索引只适用于等值查询的场景。而B+树是一种多路平衡查询树，所以他的节点是天然有序的（左子节点小于父节点，父节点小于右子节点），所以对于范围查询的时候不需要做全表扫描。</p><h3 id="_8、mysql-fetch-array和mysql-fetch-object的区别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8mysql_fetch_array%E5%92%8Cmysql_fetch_object%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、MySQL_fetch_array和MySQL_fetch_object的区别是什么？</a> <a class="header-anchor" href="#_8、mysql-fetch-array和mysql-fetch-object的区别是什么" aria-label="Permalink to &quot;[8、MySQL_fetch_array和MySQL_fetch_object的区别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#8mysql_fetch_array和mysql_fetch_object的区别是什么)&quot;">​</a></h3><p>以下是MySQL_fetch_array和MySQL_fetch_object的区别：</p><p>MySQL_fetch_array（） – 将结果行作为关联数组或来自数据库的常规数组返回。</p><p>MySQL_fetch_object – 从数据库返回结果行作为对象。</p><h3 id="_9、对于关系型数据库而言-索引是相当重要的概念-请回答有关索引的几个问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9%E5%AF%B9%E4%BA%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%80%8C%E8%A8%80%E7%B4%A2%E5%BC%95%E6%98%AF%E7%9B%B8%E5%BD%93%E9%87%8D%E8%A6%81%E7%9A%84%E6%A6%82%E5%BF%B5%E8%AF%B7%E5%9B%9E%E7%AD%94%E6%9C%89%E5%85%B3%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%9A" target="_blank" rel="noreferrer">9、对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：</a> <a class="header-anchor" href="#_9、对于关系型数据库而言-索引是相当重要的概念-请回答有关索引的几个问题" aria-label="Permalink to &quot;[9、对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#9对于关系型数据库而言索引是相当重要的概念请回答有关索引的几个问题：)&quot;">​</a></h3><p><strong>1、</strong> 索引的目的是什么？</p><p>快速访问数据表中的特定信息，提高检索速度</p><p>创建唯一性索引，保证数据库表中每一行数据的唯一性。</p><p>加速表和表之间的连接</p><p>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><p><strong>2、</strong> 索引对数据库系统的负面影响是什么？</p><p>负面影响：</p><p>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><p><strong>3、</strong> 为数据表建立索引的原则有哪些？</p><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。</p><p>在频繁使用的、需要排序的字段上建立索引</p><p><strong>4、</strong> 什么情况下不宜建立索引？</p><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。</p><p>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h3 id="_10、mysql如何优化distinct" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10mysql%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96distinct" target="_blank" rel="noreferrer">10、MySQL如何优化DISTINCT？</a> <a class="header-anchor" href="#_10、mysql如何优化distinct" aria-label="Permalink to &quot;[10、MySQL如何优化DISTINCT？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题大汇总，附答案.md#10mysql如何优化distinct)&quot;">​</a></h3><p>DISTINCT在所有列上转换为GROUP BY，并与ORDER BY子句结合使用。</p><p>1</p><p>SELECT DISTINCT t1.a FROM t1,t2 where t1.a=t2.a;</p><h3 id="_11、什么是幻读-脏读-不可重复读呢" tabindex="-1">11、什么是幻读，脏读，不可重复读呢？ <a class="header-anchor" href="#_11、什么是幻读-脏读-不可重复读呢" aria-label="Permalink to &quot;11、什么是幻读，脏读，不可重复读呢？&quot;">​</a></h3><h3 id="_12、linux添加索引" tabindex="-1">12、linux添加索引 <a class="header-anchor" href="#_12、linux添加索引" aria-label="Permalink to &quot;12、linux添加索引&quot;">​</a></h3><h3 id="_13、b-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据" tabindex="-1">13、B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据？ <a class="header-anchor" href="#_13、b-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据" aria-label="Permalink to &quot;13、B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据？&quot;">​</a></h3><h3 id="_14、数据库中间件了解过吗-sharding-jdbc-mycat" tabindex="-1">14、数据库中间件了解过吗，sharding jdbc，mycat？ <a class="header-anchor" href="#_14、数据库中间件了解过吗-sharding-jdbc-mycat" aria-label="Permalink to &quot;14、数据库中间件了解过吗，sharding jdbc，mycat？&quot;">​</a></h3><h3 id="_15、为什么要使用视图-什么是视图" tabindex="-1">15、为什么要使用视图？什么是视图？ <a class="header-anchor" href="#_15、为什么要使用视图-什么是视图" aria-label="Permalink to &quot;15、为什么要使用视图？什么是视图？&quot;">​</a></h3><h3 id="_16、null是什么意思" tabindex="-1">16、NULL是什么意思 <a class="header-anchor" href="#_16、null是什么意思" aria-label="Permalink to &quot;16、NULL是什么意思&quot;">​</a></h3><h3 id="_17、mysql中innodb引擎的行锁是怎么实现的" tabindex="-1">17、MySQL中InnoDB引擎的行锁是怎么实现的？ <a class="header-anchor" href="#_17、mysql中innodb引擎的行锁是怎么实现的" aria-label="Permalink to &quot;17、MySQL中InnoDB引擎的行锁是怎么实现的？&quot;">​</a></h3><h3 id="_18、优化器的执行过程" tabindex="-1">18、优化器的执行过程？ <a class="header-anchor" href="#_18、优化器的执行过程" aria-label="Permalink to &quot;18、优化器的执行过程？&quot;">​</a></h3><h3 id="_19、什么是最左前缀原则-什么是最左匹配原则" tabindex="-1">19、什么是最左前缀原则？什么是最左匹配原则 <a class="header-anchor" href="#_19、什么是最左前缀原则-什么是最左匹配原则" aria-label="Permalink to &quot;19、什么是最左前缀原则？什么是最左匹配原则&quot;">​</a></h3><h3 id="_20、like声明中的-和-是什么意思" tabindex="-1">20、LIKE声明中的％和_是什么意思？ <a class="header-anchor" href="#_20、like声明中的-和-是什么意思" aria-label="Permalink to &quot;20、LIKE声明中的％和_是什么意思？&quot;">​</a></h3><h3 id="_21、使用乐观锁" tabindex="-1">21、使用乐观锁 <a class="header-anchor" href="#_21、使用乐观锁" aria-label="Permalink to &quot;21、使用乐观锁&quot;">​</a></h3><h3 id="_22、varchar-50-中50的涵义" tabindex="-1">22、varchar(50)中50的涵义 <a class="header-anchor" href="#_22、varchar-50-中50的涵义" aria-label="Permalink to &quot;22、varchar(50)中50的涵义&quot;">​</a></h3><h3 id="_23、主从同步延迟的解决办法" tabindex="-1">23、主从同步延迟的解决办法 <a class="header-anchor" href="#_23、主从同步延迟的解决办法" aria-label="Permalink to &quot;23、主从同步延迟的解决办法&quot;">​</a></h3><h3 id="_24、mysql-遇到过死锁问题吗-你是如何解决的" tabindex="-1">24、MySQL 遇到过死锁问题吗，你是如何解决的？ <a class="header-anchor" href="#_24、mysql-遇到过死锁问题吗-你是如何解决的" aria-label="Permalink to &quot;24、MySQL 遇到过死锁问题吗，你是如何解决的？&quot;">​</a></h3><h3 id="_25、主键使用自增id还是uuid-为什么" tabindex="-1">25、主键使用自增ID还是UUID，为什么？ <a class="header-anchor" href="#_25、主键使用自增id还是uuid-为什么" aria-label="Permalink to &quot;25、主键使用自增ID还是UUID，为什么？&quot;">​</a></h3><h3 id="_26、什么是数据库事务" tabindex="-1">26、什么是数据库事务？ <a class="header-anchor" href="#_26、什么是数据库事务" aria-label="Permalink to &quot;26、什么是数据库事务？&quot;">​</a></h3><h3 id="_27、怎么查询sql语句是否使用了索引查询" tabindex="-1">27、怎么查询SQL语句是否使用了索引查询？ <a class="header-anchor" href="#_27、怎么查询sql语句是否使用了索引查询" aria-label="Permalink to &quot;27、怎么查询SQL语句是否使用了索引查询？&quot;">​</a></h3><h3 id="_28、什么是死锁-怎么解决" tabindex="-1">28、什么是死锁？怎么解决？ <a class="header-anchor" href="#_28、什么是死锁-怎么解决" aria-label="Permalink to &quot;28、什么是死锁？怎么解决？&quot;">​</a></h3><h3 id="_29、主键使用自增id还是uuid" tabindex="-1">29、主键使用自增ID还是UUID？ <a class="header-anchor" href="#_29、主键使用自增id还是uuid" aria-label="Permalink to &quot;29、主键使用自增ID还是UUID？&quot;">​</a></h3><h3 id="_30、mvcc熟悉吗-它的底层原理" tabindex="-1">30、MVCC熟悉吗，它的底层原理？ <a class="header-anchor" href="#_30、mvcc熟悉吗-它的底层原理" aria-label="Permalink to &quot;30、MVCC熟悉吗，它的底层原理？&quot;">​</a></h3>',127),o=[r];function n(l,c,p,h,i,E){return a(),e("div",null,o)}const g=t(d,[["render",n]]);export{B as __pageData,g as default};
