import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/jdk/stream.md","filePath":"backend/jdk/stream.md"}'),p={name:"backend/jdk/stream.md"},o=l(`<h2 id="创建-stream" tabindex="-1">创建 Stream <a class="header-anchor" href="#创建-stream" aria-label="Permalink to &quot;创建 Stream&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">List&lt;Employee&gt; emps = Arrays.asList(</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(102, &quot;李四&quot;, 59, 6666.66, Status.BUSY),</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(101, &quot;张三&quot;, 18, 9999.99, Status.FREE),</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(103, &quot;王五&quot;, 28, 3333.33, Status.VOCATION),</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(104, &quot;赵六&quot;, 8, 7777.77, Status.BUSY),</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(104, &quot;赵六&quot;, 8, 7777.77, Status.FREE),</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(104, &quot;赵六&quot;, 8, 7777.77, Status.FREE),</span></span>
<span class="line"><span style="color:#f6f6f4;">			new Employee(105, &quot;田七&quot;, 38, 5555.55, Status.BUSY)</span></span>
<span class="line"><span style="color:#f6f6f4;">	);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">List&lt;Employee&gt; emps = Arrays.asList(</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(102, &quot;李四&quot;, 59, 6666.66, Status.BUSY),</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(101, &quot;张三&quot;, 18, 9999.99, Status.FREE),</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(103, &quot;王五&quot;, 28, 3333.33, Status.VOCATION),</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(104, &quot;赵六&quot;, 8, 7777.77, Status.BUSY),</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(104, &quot;赵六&quot;, 8, 7777.77, Status.FREE),</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(104, &quot;赵六&quot;, 8, 7777.77, Status.FREE),</span></span>
<span class="line"><span style="color:#24292e;">			new Employee(105, &quot;田七&quot;, 38, 5555.55, Status.BUSY)</span></span>
<span class="line"><span style="color:#24292e;">	);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">//1.</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Collection</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">提供了两个方法</span><span style="color:#F6F6F4;">  </span><span style="color:#E7EE98;">stream</span><span style="color:#F6F6F4;">() </span><span style="color:#E7EE98;">与</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">parallelStream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#62E884;">List&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ArrayList</span><span style="color:#F286C4;">&lt;&gt;</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#62E884;">Stream&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list.stream</span><span style="color:#F6F6F4;">(); </span><span style="color:#62E884;">//获取一个顺序流</span></span>
<span class="line"><span style="color:#62E884;">Stream&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">parallelStream</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list.parallelStream</span><span style="color:#F6F6F4;">(); </span><span style="color:#62E884;">//获取一个并行流</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">//2.</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">通过</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Arrays</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">中的</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream</span><span style="color:#F6F6F4;">() </span><span style="color:#E7EE98;">获取一个数组流</span></span>
<span class="line"><span style="color:#62E884;">Integer[]</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nums</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Integer[</span><span style="color:#BF9EEE;">10</span><span style="color:#E7EE98;">]</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#62E884;">Stream&lt;Integer&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Arrays.stream</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">nums</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">//3.</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">通过</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Stream</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">类中静态方法</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">of</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#62E884;">Stream&lt;Integer&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream2</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Stream.of</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">1,2,3,4,5,6</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">//4.</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">创建无限流</span></span>
<span class="line"><span style="color:#62E884;">//迭代</span></span>
<span class="line"><span style="color:#62E884;">Stream&lt;Integer&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream3</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Stream.iterate</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">0,</span><span style="color:#F6F6F4;"> (x) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">x</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">).limit(</span><span style="color:#62E884;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">stream3.forEach(System.out::println</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">//生成</span></span>
<span class="line"><span style="color:#62E884;">Stream&lt;Double&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream4</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Stream.generate</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Math::random</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.limit</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">stream4.forEach(System.out::println</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//1.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Collection</span><span style="color:#24292E;"> </span><span style="color:#032F62;">提供了两个方法</span><span style="color:#24292E;">  </span><span style="color:#032F62;">stream</span><span style="color:#24292E;">() </span><span style="color:#032F62;">与</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parallelStream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">List&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ArrayList</span><span style="color:#D73A49;">&lt;&gt;</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">Stream&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list.stream</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//获取一个顺序流</span></span>
<span class="line"><span style="color:#6F42C1;">Stream&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">parallelStream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list.parallelStream</span><span style="color:#24292E;">(); </span><span style="color:#6F42C1;">//获取一个并行流</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//2.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通过</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Arrays</span><span style="color:#24292E;"> </span><span style="color:#032F62;">中的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream</span><span style="color:#24292E;">() </span><span style="color:#032F62;">获取一个数组流</span></span>
<span class="line"><span style="color:#6F42C1;">Integer[]</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nums</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Integer[</span><span style="color:#005CC5;">10</span><span style="color:#032F62;">]</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">Stream&lt;Integer&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Arrays.stream</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">nums</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//3.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">通过</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Stream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">类中静态方法</span><span style="color:#24292E;"> </span><span style="color:#032F62;">of</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">Stream&lt;Integer&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Stream.of</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1,2,3,4,5,6</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//4.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">创建无限流</span></span>
<span class="line"><span style="color:#6F42C1;">//迭代</span></span>
<span class="line"><span style="color:#6F42C1;">Stream&lt;Integer&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Stream.iterate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">0,</span><span style="color:#24292E;"> (x) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).limit(</span><span style="color:#6F42C1;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">stream3.forEach(System.out::println</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//生成</span></span>
<span class="line"><span style="color:#6F42C1;">Stream&lt;Double&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream4</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Stream.generate</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Math::random</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.limit</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">stream4.forEach(System.out::println</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="中间操作" tabindex="-1">中间操作 <a class="header-anchor" href="#中间操作" aria-label="Permalink to &quot;中间操作&quot;">​</a></h2><h3 id="筛选与切片" tabindex="-1">筛选与切片 <a class="header-anchor" href="#筛选与切片" aria-label="Permalink to &quot;筛选与切片&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">filter——接收</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Lambda</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">，</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">从流中排除某些元素。</span></span>
<span class="line"><span style="color:#62E884;">limit——截断流，使其元素不超过给定数量。</span></span>
<span class="line"><span style="color:#62E884;">skip(n</span><span style="color:#F6F6F4;">) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(</span><span style="color:#62E884;">n</span><span style="color:#F6F6F4;">) 互补</span></span>
<span class="line"><span style="color:#62E884;">distinct——筛选，通过流所生成元素的</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">hashCode</span><span style="color:#F6F6F4;">() </span><span style="color:#E7EE98;">和</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">equals</span><span style="color:#F6F6F4;">() </span><span style="color:#E7EE98;">去除重复元素</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">//内部迭代：迭代操作</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Stream</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">API</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">内部完成</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">//外部迭代</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">@Test</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test3</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Iterator&lt;Employee&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">it</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.iterator</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		while(</span><span style="color:#62E884;">it.hasNext</span><span style="color:#F6F6F4;">()){</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#62E884;">System.out.println(it.next(</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">		}</span></span>
<span class="line"><span style="color:#F6F6F4;">	}</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">//所有的中间操作不会做任何的处理</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Stream&lt;Employee&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#62E884;">.filter((e</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">				</span><span style="color:#62E884;">System.out.println(</span><span style="color:#62E884;">&quot;测试中间操作&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">				</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">e.getAge</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">35</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">			});</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">//只有当做终止操作时，所有的中间操作会一次性的全部执行，称为“惰性求值”</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">stream.forEach(System.out::println</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">emps.stream</span><span style="color:#F6F6F4;">().filter((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.println(&quot;短路！&quot;); // &amp;&amp;  ||</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">e.getSalary</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5000</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }).limit(</span><span style="color:#62E884;">3</span><span style="color:#F6F6F4;">).forEach(</span><span style="color:#62E884;">System.out::println</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">emps.parallelStream</span><span style="color:#F6F6F4;">().filter((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getSalary() </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5000</span><span style="color:#F6F6F4;">).skip(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">).forEach(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    emps.stream().distinct().forEach(System.out::println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">filter——接收</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Lambda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">，</span><span style="color:#24292E;"> </span><span style="color:#032F62;">从流中排除某些元素。</span></span>
<span class="line"><span style="color:#6F42C1;">limit——截断流，使其元素不超过给定数量。</span></span>
<span class="line"><span style="color:#6F42C1;">skip(n</span><span style="color:#24292E;">) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(</span><span style="color:#6F42C1;">n</span><span style="color:#24292E;">) 互补</span></span>
<span class="line"><span style="color:#6F42C1;">distinct——筛选，通过流所生成元素的</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hashCode</span><span style="color:#24292E;">() </span><span style="color:#032F62;">和</span><span style="color:#24292E;"> </span><span style="color:#032F62;">equals</span><span style="color:#24292E;">() </span><span style="color:#032F62;">去除重复元素</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">//内部迭代：迭代操作</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Stream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">API</span><span style="color:#24292E;"> </span><span style="color:#032F62;">内部完成</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">//外部迭代</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">@Test</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">public</span><span style="color:#24292E;"> </span><span style="color:#032F62;">void</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test3</span><span style="color:#24292E;">()</span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Iterator&lt;Employee&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		while(</span><span style="color:#6F42C1;">it.hasNext</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">System.out.println(it.next(</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//所有的中间操作不会做任何的处理</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Stream&lt;Employee&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">.filter((e</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6F42C1;">System.out.println(</span><span style="color:#6F42C1;">&quot;测试中间操作&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">e.getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			});</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">//只有当做终止操作时，所有的中间操作会一次性的全部执行，称为“惰性求值”</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">stream.forEach(System.out::println</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emps.stream</span><span style="color:#24292E;">().filter((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.println(&quot;短路！&quot;); // &amp;&amp;  ||</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">e.getSalary</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }).limit(</span><span style="color:#6F42C1;">3</span><span style="color:#24292E;">).forEach(</span><span style="color:#6F42C1;">System.out::println</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">emps.parallelStream</span><span style="color:#24292E;">().filter((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getSalary() </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">).skip(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).forEach(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    emps.stream().distinct().forEach(System.out::println);</span></span></code></pre></div><h3 id="映射" tabindex="-1">映射 <a class="header-anchor" href="#映射" aria-label="Permalink to &quot;映射&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">map——接收</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Lambda</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">将元素转换成其他形式或提取信息。接收一个函数作为参数,该函数会被应用到每个元素上,并将其映射成一个新的元素。</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">flatMap——接收一个函数作为参数,将流中的每个值都换成另一个流,然后把所有流连接成一个流</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span></span>
<span class="line"><span style="color:#F6F6F4;">   </span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">Stream&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">str</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getName());</span></span>
<span class="line"><span style="color:#F6F6F4;">   	</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">List&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">strList</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Arrays.asList</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">&quot;aaa&quot;</span><span style="color:#62E884;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bbb</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ccc</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ddd</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">eee</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">Stream&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">strList.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">String::toUpperCase</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">Stream&lt;Stream&lt;Character&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream2</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">strList.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">TestStreamAPI1::filterCharacter</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">   	</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">stream2.forEach((sm</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> {</span><span style="color:#62E884;">sm.forEach(System.out::println</span><span style="color:#F6F6F4;">);});</span></span>
<span class="line"><span style="color:#F6F6F4;">   	</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">Stream&lt;Character&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stream3</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">strList.stream</span><span style="color:#F6F6F4;">() </span><span style="color:#E7EE98;">.flatMap</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">TestStreamAPI1::filterCharacter</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">   	}</span></span>
<span class="line"><span style="color:#F6F6F4;">   	</span><span style="color:#62E884;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Stream</span><span style="color:#F286C4;">&lt;</span><span style="color:#E7EE98;">Characte</span><span style="color:#F6F6F4;">r</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">filterCharacter</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">str</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">List&lt;Character&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ArrayList</span><span style="color:#F286C4;">&lt;&gt;</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">Character</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ch</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">str.toCharArray</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">   			</span><span style="color:#62E884;">list.add(ch</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">   		}</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list.stream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">   	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">map——接收</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Lambda</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">将元素转换成其他形式或提取信息。接收一个函数作为参数,该函数会被应用到每个元素上,并将其映射成一个新的元素。</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">flatMap——接收一个函数作为参数,将流中的每个值都换成另一个流,然后把所有流连接成一个流</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">Stream&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getName());</span></span>
<span class="line"><span style="color:#24292E;">   	</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">List&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strList</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Arrays.asList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;aaa&quot;</span><span style="color:#6F42C1;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bbb&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ccc&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ddd&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;eee&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">Stream&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strList.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String::toUpperCase</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">Stream&lt;Stream&lt;Character&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strList.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">TestStreamAPI1::filterCharacter</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   	</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">stream2.forEach((sm</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">sm.forEach(System.out::println</span><span style="color:#24292E;">);});</span></span>
<span class="line"><span style="color:#24292E;">   	</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">Stream&lt;Character&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stream3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">strList.stream</span><span style="color:#24292E;">() </span><span style="color:#032F62;">.flatMap</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">TestStreamAPI1::filterCharacter</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   	}</span></span>
<span class="line"><span style="color:#24292E;">   	</span><span style="color:#6F42C1;">public</span><span style="color:#24292E;"> </span><span style="color:#032F62;">static</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Stream</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">Characte</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">filterCharacter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;">)</span><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">List&lt;Character&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ArrayList</span><span style="color:#D73A49;">&lt;&gt;</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">Character</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str.toCharArray</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">   			</span><span style="color:#6F42C1;">list.add(ch</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   		}</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list.stream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   	}</span></span></code></pre></div><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">()——自然排序</span></span>
<span class="line"><span style="color:#62E884;">sorted(Comparator</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">com</span><span style="color:#F6F6F4;">)——定制排序</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">   			.map(</span><span style="color:#62E884;">Employee::getName</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">   			</span><span style="color:#62E884;">.sorted</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">   			.forEach(</span><span style="color:#62E884;">System.out::println</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">   	</span><span style="color:#62E884;">//-----------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#F6F6F4;">   		</span><span style="color:#62E884;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">   			.sorted((</span><span style="color:#62E884;">x,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">y</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   				if(</span><span style="color:#62E884;">x.getAge</span><span style="color:#F6F6F4;">() == y.getAge()){</span></span>
<span class="line"><span style="color:#F6F6F4;">   					</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">x.getName</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.compareTo</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">y.getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">   				}else{</span></span>
<span class="line"><span style="color:#F6F6F4;">   					</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Integer.compare</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">x.getAge</span><span style="color:#F6F6F4;">(), </span><span style="color:#62E884;">y.getAge</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">   				}</span></span>
<span class="line"><span style="color:#F6F6F4;">   			}).forEach(</span><span style="color:#62E884;">System.out::println</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">()——自然排序</span></span>
<span class="line"><span style="color:#6F42C1;">sorted(Comparator</span><span style="color:#24292E;"> </span><span style="color:#032F62;">com</span><span style="color:#24292E;">)——定制排序</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   			.map(</span><span style="color:#6F42C1;">Employee::getName</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   			</span><span style="color:#6F42C1;">.sorted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   			.forEach(</span><span style="color:#6F42C1;">System.out::println</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">   	</span><span style="color:#6F42C1;">//-----------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">   		</span><span style="color:#6F42C1;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">   			.sorted((</span><span style="color:#6F42C1;">x,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   				if(</span><span style="color:#6F42C1;">x.getAge</span><span style="color:#24292E;">() == y.getAge()){</span></span>
<span class="line"><span style="color:#24292E;">   					</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x.getName</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.compareTo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">y.getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   				}else{</span></span>
<span class="line"><span style="color:#24292E;">   					</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Integer.compare</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">x.getAge</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">y.getAge</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   				}</span></span>
<span class="line"><span style="color:#24292E;">   			}).forEach(</span><span style="color:#6F42C1;">System.out::println</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="终止操作" tabindex="-1">终止操作 <a class="header-anchor" href="#终止操作" aria-label="Permalink to &quot;终止操作&quot;">​</a></h2><h3 id="allmatch——检查是否匹配所有元素" tabindex="-1">allMatch——检查是否匹配所有元素 <a class="header-anchor" href="#allmatch——检查是否匹配所有元素" aria-label="Permalink to &quot;allMatch——检查是否匹配所有元素&quot;">​</a></h3><h3 id="anymatch——检查是否至少匹配一个元素" tabindex="-1">anyMatch——检查是否至少匹配一个元素 <a class="header-anchor" href="#anymatch——检查是否至少匹配一个元素" aria-label="Permalink to &quot;anyMatch——检查是否至少匹配一个元素&quot;">​</a></h3><h3 id="nonematch——检查是否没有匹配的元素" tabindex="-1">noneMatch——检查是否没有匹配的元素 <a class="header-anchor" href="#nonematch——检查是否没有匹配的元素" aria-label="Permalink to &quot;noneMatch——检查是否没有匹配的元素&quot;">​</a></h3><h3 id="findfirst——返回第一个元素" tabindex="-1">findFirst——返回第一个元素 <a class="header-anchor" href="#findfirst——返回第一个元素" aria-label="Permalink to &quot;findFirst——返回第一个元素&quot;">​</a></h3><h3 id="findany——返回当前流中的任意元素" tabindex="-1">findAny——返回当前流中的任意元素 <a class="header-anchor" href="#findany——返回当前流中的任意元素" aria-label="Permalink to &quot;findAny——返回当前流中的任意元素&quot;">​</a></h3><h3 id="count——返回流中元素的总个数" tabindex="-1">count——返回流中元素的总个数 <a class="header-anchor" href="#count——返回流中元素的总个数" aria-label="Permalink to &quot;count——返回流中元素的总个数&quot;">​</a></h3><h3 id="max——返回流中最大值" tabindex="-1">max——返回流中最大值 <a class="header-anchor" href="#max——返回流中最大值" aria-label="Permalink to &quot;max——返回流中最大值&quot;">​</a></h3><h3 id="min——返回流中最小值" tabindex="-1">min——返回流中最小值 <a class="header-anchor" href="#min——返回流中最小值" aria-label="Permalink to &quot;min——返回流中最小值&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">allMatch——检查是否匹配所有元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">anyMatch——检查是否至少匹配一个元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">noneMatch——检查是否没有匹配的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">findFirst——返回第一个元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">findAny——返回当前流中的任意元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">count——返回流中元素的总个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">max——返回流中最大值</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">min——返回流中最小值</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bl</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.allMatch</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getStatus().equals(Status.BUSY));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bl1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.anyMatch</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getStatus().equals(Status.BUSY));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bl2</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.noneMatch</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getStatus().equals(Status.BUSY));		</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Optional&lt;Employee&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">op</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.sorted</span><span style="color:#F6F6F4;">((e</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">,</span><span style="color:#F6F6F4;"> e</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> Double.compare(e</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">.getSalary()</span><span style="color:#F286C4;">,</span><span style="color:#F6F6F4;"> e</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">.getSalary()))</span><span style="color:#62E884;">.findFirst</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">Optional&lt;Employee&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">op2</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.parallelStream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.filter</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getStatus().equals(Status.FREE))</span><span style="color:#E7EE98;">.findAny</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">count</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.filter</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> e.getStatus().equals(Status.FREE))</span><span style="color:#E7EE98;">.count</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">Optional&lt;Double&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">op</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Employee::getSalary</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.max</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Double::compare</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">				</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">Optional&lt;Employee&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">op2</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.min</span><span style="color:#F6F6F4;">((e</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">,</span><span style="color:#F6F6F4;"> e</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> Double.compare(e</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">.getSalary()</span><span style="color:#F286C4;">,</span><span style="color:#F6F6F4;"> e</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">.getSalary()));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">allMatch——检查是否匹配所有元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">anyMatch——检查是否至少匹配一个元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">noneMatch——检查是否没有匹配的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">findFirst——返回第一个元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">findAny——返回当前流中的任意元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">count——返回流中元素的总个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">max——返回流中最大值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">min——返回流中最小值</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">boolean</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.allMatch</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getStatus().equals(Status.BUSY));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">boolean</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bl1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.anyMatch</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getStatus().equals(Status.BUSY));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">boolean</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bl2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.noneMatch</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getStatus().equals(Status.BUSY));		</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Optional&lt;Employee&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">op</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.sorted</span><span style="color:#24292E;">((e</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> e</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Double.compare(e</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">.getSalary()</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> e</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">.getSalary()))</span><span style="color:#6F42C1;">.findFirst</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Optional&lt;Employee&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">op2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.parallelStream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.filter</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getStatus().equals(Status.FREE))</span><span style="color:#032F62;">.findAny</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">long</span><span style="color:#24292E;"> </span><span style="color:#032F62;">count</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.filter</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> e.getStatus().equals(Status.FREE))</span><span style="color:#032F62;">.count</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Optional&lt;Double&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">op</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Employee::getSalary</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.max</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Double::compare</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">				</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Optional&lt;Employee&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">op2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.min</span><span style="color:#24292E;">((e</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> e</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Double.compare(e</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">.getSalary()</span><span style="color:#D73A49;">,</span><span style="color:#24292E;"> e</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">.getSalary()));</span></span></code></pre></div><h3 id="规约" tabindex="-1">规约 <a class="header-anchor" href="#规约" aria-label="Permalink to &quot;规约&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">归约</span></span>
<span class="line"><span style="color:#62E884;">reduce(T</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">identity,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">BinaryOperator</span><span style="color:#F6F6F4;">) / reduce(</span><span style="color:#62E884;">BinaryOperator</span><span style="color:#F6F6F4;">) ——可以将流中元素反复结合起来，得到一个值。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">List&lt;Integer&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Arrays.asList</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">1,2,3,4,5,6,7,8,9,10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Integer</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">sum</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">0,</span><span style="color:#F6F6F4;"> (x, </span><span style="color:#E7EE98;">y</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">x</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">y</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Optional&lt;Double&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">op</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Employee::getSalary</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Double::sum</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">//需求：搜索名字中</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">“六”</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">出现的次数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Optional&lt;Integer&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">sum</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#62E884;">.map(Employee::getName</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#62E884;">.flatMap(TestStreamAPI1::filterCharacter</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#62E884;">.map((ch</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">				if(</span><span style="color:#62E884;">ch.equals(</span><span style="color:#62E884;">&#39;六&#39;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">				</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">			}).reduce(</span><span style="color:#62E884;">Integer::sum</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">归约</span></span>
<span class="line"><span style="color:#6F42C1;">reduce(T</span><span style="color:#24292E;"> </span><span style="color:#032F62;">identity,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">BinaryOperator</span><span style="color:#24292E;">) / reduce(</span><span style="color:#6F42C1;">BinaryOperator</span><span style="color:#24292E;">) ——可以将流中元素反复结合起来，得到一个值。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">List&lt;Integer&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Arrays.asList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">1,2,3,4,5,6,7,8,9,10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.reduce</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">0,</span><span style="color:#24292E;"> (x, </span><span style="color:#032F62;">y</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;"> </span><span style="color:#032F62;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">y</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Optional&lt;Double&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">op</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Employee::getSalary</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.reduce</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Double::sum</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//需求：搜索名字中</span><span style="color:#24292E;"> </span><span style="color:#032F62;">“六”</span><span style="color:#24292E;"> </span><span style="color:#032F62;">出现的次数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Optional&lt;Integer&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">.map(Employee::getName</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">.flatMap(TestStreamAPI1::filterCharacter</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">.map((ch</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				if(</span><span style="color:#6F42C1;">ch.equals(</span><span style="color:#6F42C1;">&#39;六&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">			}).reduce(</span><span style="color:#6F42C1;">Integer::sum</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="收集" tabindex="-1">收集 <a class="header-anchor" href="#收集" aria-label="Permalink to &quot;收集&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">//collect——将流转换为其他形式。接收一个</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Collector接口的实现,用于给Stream中元素做汇总的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">List&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Employee::getName</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.toList</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Set&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Employee::getName</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.toSet</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">HashSet&lt;String&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">hs</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Employee::getName</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.toCollection(HashSet::new</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Optional&lt;Double&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">max</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.map</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Employee::getSalary</span><span style="color:#F6F6F4;">)</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.maxBy(Double::compare</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Optional&lt;Employee&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">op</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.minBy((e1,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">e2</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Double.compare</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">e1.getSalary</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;">,e2.getSalary</span><span style="color:#F6F6F4;">())));</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Double</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">sum</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.summingDouble(Employee::getSalary</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Double</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">avg</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.averagingDouble(Employee::getSalary</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">Long</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">count</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.counting</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">DoubleSummaryStatistics</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">dss</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.summarizingDouble(Employee::getSalary</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">//分组</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">Map&lt;Status,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#E7EE98;">Employe</span><span style="color:#F6F6F4;">e</span><span style="color:#F286C4;">&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">map</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.groupingBy(Employee::getStatus</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">//多级分组</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Map&lt;Status,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Map</span><span style="color:#F286C4;">&lt;</span><span style="color:#E7EE98;">String,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#E7EE98;">Employe</span><span style="color:#F6F6F4;">e&gt;&gt;&gt; </span><span style="color:#E7EE98;">map</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">.collect(Collectors.groupingBy(Employee::getStatus,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">Collectors.groupingBy</span><span style="color:#F6F6F4;">((e) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            if(e.getAge() &gt;= 60)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#E7EE98;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">老年</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> if(</span><span style="color:#62E884;">e.getAge</span><span style="color:#F6F6F4;">() &gt;= 35)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">中年</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">成年</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        })));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#62E884;">//分区</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Map&lt;Boolean,</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#E7EE98;">Employe</span><span style="color:#F6F6F4;">e</span><span style="color:#F286C4;">&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">map</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span><span style="color:#E7EE98;">.collect</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">Collectors.partitioningBy((e</span><span style="color:#F6F6F4;">) -</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">e.getSalary</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5000</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">str</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">.map(Employee::getName</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">.collect(Collectors.joining(</span><span style="color:#62E884;">&quot;,&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Optional&lt;Double&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">sum</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">emps.stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">.map(Employee::getSalary</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">.collect(Collectors.reducing(Double::sum</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//collect——将流转换为其他形式。接收一个</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Collector接口的实现,用于给Stream中元素做汇总的方法</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">List&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Employee::getName</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Set&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Employee::getName</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.toSet</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">			</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">HashSet&lt;String&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hs</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Employee::getName</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.toCollection(HashSet::new</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Optional&lt;Double&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.map</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Employee::getSalary</span><span style="color:#24292E;">)</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.maxBy(Double::compare</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Optional&lt;Employee&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">op</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.minBy((e1,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">e2</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Double.compare</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">e1.getSalary</span><span style="color:#24292E;">()</span><span style="color:#6F42C1;">,e2.getSalary</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Double</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.summingDouble(Employee::getSalary</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Double</span><span style="color:#24292E;"> </span><span style="color:#032F62;">avg</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.averagingDouble(Employee::getSalary</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">Long</span><span style="color:#24292E;"> </span><span style="color:#032F62;">count</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.counting</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">DoubleSummaryStatistics</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dss</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.summarizingDouble(Employee::getSalary</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//分组</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">Map&lt;Status,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">Employe</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">map</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.groupingBy(Employee::getStatus</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//多级分组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Map&lt;Status,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">String,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">Employe</span><span style="color:#24292E;">e&gt;&gt;&gt; </span><span style="color:#032F62;">map</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">.collect(Collectors.groupingBy(Employee::getStatus,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Collectors.groupingBy</span><span style="color:#24292E;">((e) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            if(e.getAge() &gt;= 60)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;老年&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> if(</span><span style="color:#6F42C1;">e.getAge</span><span style="color:#24292E;">() &gt;= 35)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;中年&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;成年&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        })));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">//分区</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Map&lt;Boolean,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">List</span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">Employe</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">map</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span><span style="color:#032F62;">.collect</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Collectors.partitioningBy((e</span><span style="color:#24292E;">) -</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">e.getSalary</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#032F62;">str</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">.map(Employee::getName</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">.collect(Collectors.joining(</span><span style="color:#6F42C1;">&quot;,&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;----&quot;,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;----&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Optional&lt;Double&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">emps.stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">.map(Employee::getSalary</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">.collect(Collectors.reducing(Double::sum</span><span style="color:#24292E;">));</span></span></code></pre></div>`,24),t=[o];function e(c,r,y,F,E,i){return a(),n("div",null,t)}const g=s(p,[["render",e]]);export{u as __pageData,g as default};
