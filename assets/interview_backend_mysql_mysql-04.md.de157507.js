import{_ as e,o as s,c as a,V as t}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mysql/mysql-04.md","filePath":"interview/backend/mysql/mysql-04.md"}'),n={name:"interview/backend/mysql/mysql-04.md"},o=t(`<h3 id="_1、一个6亿的表a-一个3亿的表b-通过外间tid关联-你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E4%B8%80%E4%B8%AA6%E4%BA%BF%E7%9A%84%E8%A1%A8a%E4%B8%80%E4%B8%AA3%E4%BA%BF%E7%9A%84%E8%A1%A8b%E9%80%9A%E8%BF%87%E5%A4%96%E9%97%B4tid%E5%85%B3%E8%81%94%E4%BD%A0%E5%A6%82%E4%BD%95%E6%9C%80%E5%BF%AB%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%87%BA%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6%E7%9A%84%E7%AC%AC50000%E5%88%B0%E7%AC%AC50200%E4%B8%AD%E7%9A%84%E8%BF%99200%E6%9D%A1%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95%E3%80%82" target="_blank" rel="noreferrer">1、一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。</a> <a class="header-anchor" href="#_1、一个6亿的表a-一个3亿的表b-通过外间tid关联-你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。" aria-label="Permalink to &quot;[1、一个6亿的表a，一个3亿的表b，通过外间tid关联，你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#1一个6亿的表a一个3亿的表b通过外间tid关联你如何最快的查询出满足条件的第50000到第50200中的这200条数据记录。)&quot;">​</a></h3><p><strong>1、</strong> 如果A表TID是自增长,并且是连续的,B表的ID为索引 select * from a,b where a.tid = b.id and a.tid&gt;500000 limit 200;</p><p><strong>2、</strong> 如果A表的TID不是连续的,那么就需要使用覆盖索引.TID要么是主键,要么是辅助索引,B表ID也需要有索引。 select * from b , (select tid from a limit 50000,200) a where b.id = a .tid;</p><h3 id="_2、sql语句优化的一些方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2sql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">2、SQL语句优化的一些方法</a> <a class="header-anchor" href="#_2、sql语句优化的一些方法" aria-label="Permalink to &quot;[2、SQL语句优化的一些方法](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#2sql语句优化的一些方法)&quot;">​</a></h3><p><strong>1、</strong> 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p><strong>2、</strong> 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id from t where num is null</span></span>
<span class="line"><span style="color:#f6f6f4;">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</span></span>
<span class="line"><span style="color:#f6f6f4;">select id from t where num=0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id from t where num is null</span></span>
<span class="line"><span style="color:#24292e;">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</span></span>
<span class="line"><span style="color:#24292e;">select id from t where num=0</span></span></code></pre></div><p><strong>3、</strong> 应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。</p><p><strong>4、</strong> 应尽量避免在 where 子句中使用or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id from t where num=10 or num=20</span></span>
<span class="line"><span style="color:#f6f6f4;">-- 可以这样查询：</span></span>
<span class="line"><span style="color:#f6f6f4;">select id from t where num=10 union all select id from t where num=20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id from t where num=10 or num=20</span></span>
<span class="line"><span style="color:#24292e;">-- 可以这样查询：</span></span>
<span class="line"><span style="color:#24292e;">select id from t where num=10 union all select id from t where num=20</span></span></code></pre></div><p>5、in 和 not in 也要慎用，否则会导致全表扫描，如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id from t where num in(1,2,3) </span></span>
<span class="line"><span style="color:#f6f6f4;">-- 对于连续的数值，能用 between 就不要用 in 了：</span></span>
<span class="line"><span style="color:#f6f6f4;">select id from t where num between 1 and 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id from t where num in(1,2,3) </span></span>
<span class="line"><span style="color:#24292e;">-- 对于连续的数值，能用 between 就不要用 in 了：</span></span>
<span class="line"><span style="color:#24292e;">select id from t where num between 1 and 3</span></span></code></pre></div><p><strong>6、</strong> 下面的查询也将导致全表扫描：select id from t where name like ‘%李%’若要提高效率，可以考虑全文检索。</p><p><strong>7、</strong> 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id from t where num=@num</span></span>
<span class="line"><span style="color:#f6f6f4;">-- 可以改为强制查询使用索引：</span></span>
<span class="line"><span style="color:#f6f6f4;">select id from t with(index(索引名)) where num=@num</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id from t where num=@num</span></span>
<span class="line"><span style="color:#24292e;">-- 可以改为强制查询使用索引：</span></span>
<span class="line"><span style="color:#24292e;">select id from t with(index(索引名)) where num=@num</span></span></code></pre></div><p><strong>8、</strong> 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id from t where num/2=100</span></span>
<span class="line"><span style="color:#f6f6f4;">-- 应改为:</span></span>
<span class="line"><span style="color:#f6f6f4;">select id from t where num=100*2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id from t where num/2=100</span></span>
<span class="line"><span style="color:#24292e;">-- 应改为:</span></span>
<span class="line"><span style="color:#24292e;">select id from t where num=100*2</span></span></code></pre></div><p><strong>9、</strong> 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id from t where substring(name,1,3)=’abc’</span></span>
<span class="line"><span style="color:#f6f6f4;">-- name以abc开头的id应改为:</span></span>
<span class="line"><span style="color:#f6f6f4;">select id from t where name like ‘abc%’</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id from t where substring(name,1,3)=’abc’</span></span>
<span class="line"><span style="color:#24292e;">-- name以abc开头的id应改为:</span></span>
<span class="line"><span style="color:#24292e;">select id from t where name like ‘abc%’</span></span></code></pre></div><p><strong>10、</strong> 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><h3 id="_3、什么是数据库连接池-为什么需要数据库连接池呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E5%91%A2" target="_blank" rel="noreferrer">3、什么是数据库连接池?为什么需要数据库连接池呢?</a> <a class="header-anchor" href="#_3、什么是数据库连接池-为什么需要数据库连接池呢" aria-label="Permalink to &quot;[3、什么是数据库连接池?为什么需要数据库连接池呢?](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#3什么是数据库连接池为什么需要数据库连接池呢)&quot;">​</a></h3><p>「连接池基本原理：」 数据库连接池原理：在内部对象池中，维护一定数量的数据库连接，并对外暴露数据库连接的获取和返回方法。</p><p><strong>「应用程序和数据库建立连接的过程：」</strong></p><p><strong>1、</strong> 通过TCP协议的三次握手和数据库服务器建立连接</p><p><strong>2、</strong> 发送数据库用户账号密码，等待数据库验证用户身份</p><p><strong>3、</strong> 完成身份验证后，系统可以提交SQL语句到数据库执行</p><p><strong>4、</strong> 把连接关闭，TCP四次挥手告别。</p><p><strong>「数据库连接池好处：」</strong></p><p><strong>1、</strong> 资源重用 (连接复用)</p><p><strong>2、</strong> 更快的系统响应速度</p><p><strong>3、</strong> 新的资源分配手段</p><p><strong>4、</strong> 统一的连接管理，避免数据库连接泄漏</p><h3 id="_4、事物的四大特性-acid-介绍一下" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E4%BA%8B%E7%89%A9%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7acid%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B" target="_blank" rel="noreferrer">4、事物的四大特性(ACID)介绍一下?</a> <a class="header-anchor" href="#_4、事物的四大特性-acid-介绍一下" aria-label="Permalink to &quot;[4、事物的四大特性(ACID)介绍一下?](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#4事物的四大特性acid介绍一下)&quot;">​</a></h3><p>关系性数据库需要遵循ACID规则，具体内容如下：</p><p>![99_6.png][99_6.png]</p><p><strong>1、</strong> 原子性：</p><p>事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</p><p><strong>2、</strong> 一致性：</p><p>执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</p><p><strong>3、</strong> 隔离性：</p><p>并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</p><p><strong>4、</strong> 持久性：</p><p>一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p><h3 id="_5、索引分类" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5%E7%B4%A2%E5%BC%95%E5%88%86%E7%B1%BB" target="_blank" rel="noreferrer">5、索引分类？</a> <a class="header-anchor" href="#_5、索引分类" aria-label="Permalink to &quot;[5、索引分类？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#5索引分类)&quot;">​</a></h3><p><strong>单列索引</strong></p><p><strong>1、</strong> 普通索引：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。</p><p><strong>2、</strong> 唯一索引：索引列中的值必须是唯一的，但是允许为空值，</p><p><strong>3、</strong> 主键索引：是一种特殊的唯一索引，不允许有空值。</p><p><strong>组合索引：</strong></p><p>多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。</p><p><strong>全文索引：</strong></p><p>只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT 类型字段上使用全文索引，介绍了要求，说说什么是全文索引，就是在一堆文字中，通过其中的某个关键字等，就能找到该字段所属的记录行，比如有&quot;你是个靓仔，靓女 ...&quot; 通过靓仔，可能就可以找到该条记录</p><p><strong>空间索引：</strong></p><p>空间索引是对空间数据类型的字段建立的索引，MySQL中的空间数据类型有四种，GEOMETRY、POINT、LINESTRING、POLYGON。在创建空间索引时，使用SPATIAL关键字。要求，引擎为MyISAM，创建空间索引的列，必须将其声明为NOT NULL。</p><h3 id="_6、锁的优化策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6%E9%94%81%E7%9A%84%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">6、锁的优化策略</a> <a class="header-anchor" href="#_6、锁的优化策略" aria-label="Permalink to &quot;[6、锁的优化策略](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#6锁的优化策略)&quot;">​</a></h3><p>1\\、读写分离</p><p>2\\、分段加锁</p><p>3\\、减少锁持有的时间</p><p>4\\、多个线程尽量以相同的顺序去获取资源</p><p>不能将锁的粒度过于细化，不然可能会出现线程的加锁和释放次数过多，反而效率不如一次加一把大锁。</p><h3 id="_7、limit-1000000-加载很慢的话-你是怎么解决的呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7limit-1000000-%E5%8A%A0%E8%BD%BD%E5%BE%88%E6%85%A2%E7%9A%84%E8%AF%9D%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E7%9A%84%E5%91%A2" target="_blank" rel="noreferrer">7、limit 1000000 加载很慢的话，你是怎么解决的呢？</a> <a class="header-anchor" href="#_7、limit-1000000-加载很慢的话-你是怎么解决的呢" aria-label="Permalink to &quot;[7、limit 1000000 加载很慢的话，你是怎么解决的呢？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#7limit-1000000-加载很慢的话你是怎么解决的呢)&quot;">​</a></h3><p><strong>方案一：如果id是连续的，可以这样，返回上次查询的最大记录(偏移量)，再往下limit</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id，name from employee where id&gt;1000000 limit 10.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id，name from employee where id&gt;1000000 limit 10.</span></span></code></pre></div><p><strong>方案二：在业务允许的情况下限制页数：</strong></p><p>建议跟业务讨论，有没有必要查这么后的分页啦。因为绝大多数用户都不会往后翻太多页。</p><p><strong>方案三：order by + 索引（id为索引）</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">select id，name from employee order by id  limit 1000000，10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">select id，name from employee order by id  limit 1000000，10</span></span></code></pre></div><p><strong>方案四：利用延迟关联或者子查询优化超多分页场景。（先快速定位需要获取的id段，然后再关联）</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">SELECT a.* FROM employee a, (select id from employee where 条件 LIMIT 1000000,10 ) b where a.id=b.id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">SELECT a.* FROM employee a, (select id from employee where 条件 LIMIT 1000000,10 ) b where a.id=b.id</span></span></code></pre></div><h3 id="_8、什么是事务的隔离级别-mysql的默认隔离级别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%ABmysql%E7%9A%84%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、什么是事务的隔离级别？MySQL的默认隔离级别是什么？</a> <a class="header-anchor" href="#_8、什么是事务的隔离级别-mysql的默认隔离级别是什么" aria-label="Permalink to &quot;[8、什么是事务的隔离级别？MySQL的默认隔离级别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#8什么是事务的隔离级别mysql的默认隔离级别是什么)&quot;">​</a></h3><p>为了达到事务的四大特性，数据库定义了4种不同的事务隔离级别，由低到高依次为Read uncommitted、Read committed、Repeatable read、Serializable，这四个级别可以逐个解决脏读、不可重复读、幻读这几类问题。</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE-READ</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td></td><td></td><td></td></tr></tbody></table><p><strong>SQL 标准定义了四个隔离级别：</strong></p><p><strong>1、</strong> READ-UNCOMMITTED(读取未提交)：</p><p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</p><p><strong>2、</strong> READ-COMMITTED(读取已提交)： 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</p><p><strong>3、</strong> REPEATABLE-READ(可重复读)：</p><p>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</p><p><strong>4、</strong> SERIALIZABLE(可串行化)：</p><p>最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</p><p><strong>注意：</strong></p><p><strong>1、</strong> 这里需要注意的是：MySQL 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别</p><p><strong>2、</strong> 事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。</p><p><strong>3、</strong> 因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是<strong>READ-COMMITTED(读取提交内容):</strong>，但是你要知道的是InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）**并不会有任何性能损失。</p><p><strong>4、</strong> InnoDB 存储引擎在 <strong>分布式事务</strong> 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。</p><h3 id="_9、视图的使用场景有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9%E8%A7%86%E5%9B%BE%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">9、视图的使用场景有哪些？</a> <a class="header-anchor" href="#_9、视图的使用场景有哪些" aria-label="Permalink to &quot;[9、视图的使用场景有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#9视图的使用场景有哪些)&quot;">​</a></h3><p>视图根本用途：简化sql查询，提高开发效率。如果说还有另外一个用途那就是兼容老的表结构</p><p><strong>下面是视图的常见使用场景：</strong></p><p><strong>1、</strong> 重用SQL语句；</p><p><strong>2、</strong> 简化复杂的SQL操作。在编写查询后，可以方便的重用它而不必知道它的基本查询细节；</p><p><strong>3、</strong> 使用表的组成部分而不是整个表；</p><p><strong>4、</strong> 保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限；</p><p><strong>5、</strong> 更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</p><h3 id="_10、mysql数据库服务器性能分析的方法命令有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E7%9A%84%E6%96%B9%E6%B3%95%E5%91%BD%E4%BB%A4%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">10、MYSQL数据库服务器性能分析的方法命令有哪些?</a> <a class="header-anchor" href="#_10、mysql数据库服务器性能分析的方法命令有哪些" aria-label="Permalink to &quot;[10、MYSQL数据库服务器性能分析的方法命令有哪些?](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新2021年面试题，高级面试题及附答案解析.md#10mysql数据库服务器性能分析的方法命令有哪些)&quot;">​</a></h3><p>Show status, 一些值得监控的变量值：</p><p><strong>1、</strong> Bytes_received和Bytes_sent 和服务器之间来往的流量。</p><p><strong>2、</strong> Com_*服务器正在执行的命令。</p><p><strong>3、</strong> Created_*在查询执行期限间创建的临时表和文件。</p><p><strong>4、</strong> Handler_*存储引擎操作。</p><p><strong>5、</strong> Select_*不同类型的联接执行计划。</p><p><strong>6、</strong> Sort_*几种排序信息。</p><p>Show profiles 是MySql用来分析当前会话SQL语句执行的资源消耗情况</p><h3 id="_11、列值为null时-查询是否会用到索引" tabindex="-1">11、列值为NULL时，查询是否会用到索引？ <a class="header-anchor" href="#_11、列值为null时-查询是否会用到索引" aria-label="Permalink to &quot;11、列值为NULL时，查询是否会用到索引？&quot;">​</a></h3><h3 id="_12、mysql里记录货币用什么字段类型好" tabindex="-1">12、MySQL里记录货币用什么字段类型好 <a class="header-anchor" href="#_12、mysql里记录货币用什么字段类型好" aria-label="Permalink to &quot;12、MySQL里记录货币用什么字段类型好&quot;">​</a></h3><h3 id="_13、在高并发情况下-如何做到安全的修改同一行数据" tabindex="-1">13、在高并发情况下，如何做到安全的修改同一行数据？ <a class="header-anchor" href="#_13、在高并发情况下-如何做到安全的修改同一行数据" aria-label="Permalink to &quot;13、在高并发情况下，如何做到安全的修改同一行数据？&quot;">​</a></h3><h3 id="_14、b-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据" tabindex="-1">14、B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据， <a class="header-anchor" href="#_14、b-树在满足聚簇索引和覆盖索引的时候不需要回表查询数据" aria-label="Permalink to &quot;14、B+树在满足聚簇索引和覆盖索引的时候不需要回表查询数据，&quot;">​</a></h3><h3 id="_15、sql语言包括哪几部分-每部分都有哪些操作关键字" tabindex="-1">15、SQL语言包括哪几部分？每部分都有哪些操作关键字？ <a class="header-anchor" href="#_15、sql语言包括哪几部分-每部分都有哪些操作关键字" aria-label="Permalink to &quot;15、SQL语言包括哪几部分？每部分都有哪些操作关键字？&quot;">​</a></h3><h3 id="_16、优化特定类型的查询语句" tabindex="-1">16、优化特定类型的查询语句 <a class="header-anchor" href="#_16、优化特定类型的查询语句" aria-label="Permalink to &quot;16、优化特定类型的查询语句&quot;">​</a></h3><h3 id="_17、什么是数据库事务" tabindex="-1">17、什么是数据库事务？ <a class="header-anchor" href="#_17、什么是数据库事务" aria-label="Permalink to &quot;17、什么是数据库事务？&quot;">​</a></h3><h3 id="_18、谈谈mysql的explain" tabindex="-1">18、谈谈MySQL的Explain <a class="header-anchor" href="#_18、谈谈mysql的explain" aria-label="Permalink to &quot;18、谈谈MySQL的Explain&quot;">​</a></h3><h3 id="_19、视图的优点-缺点-讲一下" tabindex="-1">19、视图的优点，缺点，讲一下？ <a class="header-anchor" href="#_19、视图的优点-缺点-讲一下" aria-label="Permalink to &quot;19、视图的优点，缺点，讲一下？&quot;">​</a></h3><h3 id="_20、myisam-static和myisam-dynamic有什么区别" tabindex="-1">20、MyISAM Static和MyISAM Dynamic有什么区别？ <a class="header-anchor" href="#_20、myisam-static和myisam-dynamic有什么区别" aria-label="Permalink to &quot;20、MyISAM Static和MyISAM Dynamic有什么区别？&quot;">​</a></h3><h3 id="_21、隔离级别与锁的关系" tabindex="-1">21、隔离级别与锁的关系 <a class="header-anchor" href="#_21、隔离级别与锁的关系" aria-label="Permalink to &quot;21、隔离级别与锁的关系&quot;">​</a></h3><h3 id="_22、如何优化长难的查询语句-有实战过吗" tabindex="-1">22、如何优化长难的查询语句？有实战过吗？ <a class="header-anchor" href="#_22、如何优化长难的查询语句-有实战过吗" aria-label="Permalink to &quot;22、如何优化长难的查询语句？有实战过吗？&quot;">​</a></h3><h3 id="_23、b-tree的页子节点都可以存放哪些东西" tabindex="-1">23、B+Tree的页子节点都可以存放哪些东西？ <a class="header-anchor" href="#_23、b-tree的页子节点都可以存放哪些东西" aria-label="Permalink to &quot;23、B+Tree的页子节点都可以存放哪些东西？&quot;">​</a></h3><h3 id="_24、sql语句的语法顺序" tabindex="-1">24、SQL语句的语法顺序： <a class="header-anchor" href="#_24、sql语句的语法顺序" aria-label="Permalink to &quot;24、SQL语句的语法顺序：&quot;">​</a></h3><h3 id="_25、什么是锁" tabindex="-1">25、什么是锁？ <a class="header-anchor" href="#_25、什么是锁" aria-label="Permalink to &quot;25、什么是锁？&quot;">​</a></h3><h3 id="_26、你怎么看到为表格定义的所有索引" tabindex="-1">26、你怎么看到为表格定义的所有索引？ <a class="header-anchor" href="#_26、你怎么看到为表格定义的所有索引" aria-label="Permalink to &quot;26、你怎么看到为表格定义的所有索引？&quot;">​</a></h3><h3 id="_27、mysql里记录货币用什么字段类型比较好" tabindex="-1">27、MySQL里记录货币用什么字段类型比较好？ <a class="header-anchor" href="#_27、mysql里记录货币用什么字段类型比较好" aria-label="Permalink to &quot;27、MySQL里记录货币用什么字段类型比较好？&quot;">​</a></h3><h3 id="_28、数据库的乐观锁和悲观锁。" tabindex="-1">28、数据库的乐观锁和悲观锁。 <a class="header-anchor" href="#_28、数据库的乐观锁和悲观锁。" aria-label="Permalink to &quot;28、数据库的乐观锁和悲观锁。&quot;">​</a></h3><h3 id="_29、mysql有关权限的表都有哪几个" tabindex="-1">29、MySQL有关权限的表都有哪几个？ <a class="header-anchor" href="#_29、mysql有关权限的表都有哪几个" aria-label="Permalink to &quot;29、MySQL有关权限的表都有哪几个？&quot;">​</a></h3><h3 id="_30、索引不适合哪些场景" tabindex="-1">30、索引不适合哪些场景 <a class="header-anchor" href="#_30、索引不适合哪些场景" aria-label="Permalink to &quot;30、索引不适合哪些场景&quot;">​</a></h3>`,122),r=[o];function l(p,i,E,c,d,h){return s(),a("div",null,r)}const g=e(n,[["render",l]]);export{m as __pageData,g as default};
