import{_ as t,o,c as e,V as r}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mysql/mysql-10.md","filePath":"interview/backend/mysql/mysql-10.md"}'),a={name:"interview/backend/mysql/mysql-10.md"},s=r('<h3 id="_1、超大分页怎么处理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E8%B6%85%E5%A4%A7%E5%88%86%E9%A1%B5%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86" target="_blank" rel="noreferrer">1、超大分页怎么处理？</a> <a class="header-anchor" href="#_1、超大分页怎么处理" aria-label="Permalink to &quot;[1、超大分页怎么处理？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#1超大分页怎么处理)&quot;">​</a></h3><p><strong>超大的分页一般从两个方向上来解决.</strong></p><p><strong>1、</strong> 数据库层面,这也是我们主要集中关注的(虽然收效没那么大),类似于<code>select * from table where age &gt; 20 limit 1000000,10</code>这种查询其实也是有可以优化的余地的、这条语句需要load1000000数据然后基本上全部丢弃,只取10条当然比较慢、当时我们可以修改为<code>select * from table where id in (select id from table where age &gt; 20 limit 1000000,10)</code>.这样虽然也load了一百万的数据,但是由于索引覆盖,要查询的所有字段都在索引中,所以速度会很快、同时如果ID连续的好,我们还可以<code>select * from table where id &gt; 1000000 limit 10</code>,效率也是不错的,优化的可能性有许多种,但是核心思想都一样,就是减少load的数据.</p><p><strong>2、</strong> 从需求的角度减少这种请求…主要是不做类似的需求(直接跳转到几百万页之后的具体某一页.只允许逐页查看或者按照给定的路线走,这样可预测,可缓存)以及防止ID泄漏且连续被人恶意攻击.</p><p>解决超大分页,其实主要是靠缓存,可预测性的提前查到内容,缓存至Redis等k-V数据库中,直接返回即可</p><h3 id="_2、存储引擎分类有哪些以及使用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%88%86%E7%B1%BB%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">2、存储引擎分类有哪些以及使用场景？</a> <a class="header-anchor" href="#_2、存储引擎分类有哪些以及使用场景" aria-label="Permalink to &quot;[2、存储引擎分类有哪些以及使用场景？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#2存储引擎分类有哪些以及使用场景)&quot;">​</a></h3><p><strong>存储引擎主要有</strong></p><p><strong>1、</strong> MyIsam</p><p><strong>2、</strong> InnoDB</p><p><strong>3、</strong> Memory</p><p><strong>4、</strong> Archive</p><p><strong>5、</strong> Federated</p><p>默认为:InnoDB 引擎。InnoDB 底层存储结构为 B+树， B 树的每个节点对应 innodb</p><p>的一个 page，page 大小是固定的，一般设为 16k</p><p><strong>使用场景</strong></p><p><strong>1、</strong> 经常更新的表，适合处理多重并发的更新请求</p><p><strong>2、</strong> 支持事务。</p><p><strong>3、</strong> 可以从灾难中恢复(通过 bin-log 日志等)</p><p><strong>4、</strong> 外键约束。只有他支持外键。</p><p><strong>5、</strong> 支持自动增加列属性 auto_increment</p><h3 id="_3、视图有哪些特点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E8%A7%86%E5%9B%BE%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9" target="_blank" rel="noreferrer">3、视图有哪些特点？</a> <a class="header-anchor" href="#_3、视图有哪些特点" aria-label="Permalink to &quot;[3、视图有哪些特点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#3视图有哪些特点)&quot;">​</a></h3><p><strong>视图的特点如下:</strong></p><p><strong>1、</strong> 视图的列可以来自不同的表，是表的抽象和在逻辑意义上建立的新关系。</p><p><strong>2、</strong> 视图是由基本表(实表)产生的表(虚表)。</p><p><strong>3、</strong> 视图的建立和删除不影响基本表。</p><p><strong>4、</strong> 对视图内容的更新(添加，删除和修改)直接影响基本表。</p><p><strong>5、</strong> 当视图来自多个基本表时，不允许添加和删除数据。</p><p>视图的操作包括创建视图，查看视图，删除视图和修改视图。</p><h3 id="_4、什么是存储过程-有哪些优缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">4、什么是存储过程？有哪些优缺点？</a> <a class="header-anchor" href="#_4、什么是存储过程-有哪些优缺点" aria-label="Permalink to &quot;[4、什么是存储过程？有哪些优缺点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#4什么是存储过程有哪些优缺点)&quot;">​</a></h3><p>「存储过程」，就是一些编译好了的SQL语句，这些SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后给这些代码块取一个名字，在用到这个功能的时候调用即可。</p><p><strong>「优点：」</strong></p><p><strong>1、</strong> 存储过程是一个预编译的代码块，执行效率比较高</p><p><strong>2、</strong> 存储过程在服务器端运行，减少客户端的压力</p><p><strong>3、</strong> 允许模块化程序设计，只需要创建一次过程，以后在程序中就可以调用该过程任意次，类似方法的复用</p><p><strong>4、</strong> 一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率</p><p><strong>5、</strong> 可以一定程度上确保数据安全</p><p><strong>「缺点：」</strong></p><p><strong>1、</strong> 调试麻烦</p><p><strong>2、</strong> 可移植性不灵活</p><p><strong>3、</strong> 重新编译问题</p><h3 id="_5、日常工作中你是怎么优化sql的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E6%97%A5%E5%B8%B8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96sql%E7%9A%84" target="_blank" rel="noreferrer">5、日常工作中你是怎么优化SQL的？</a> <a class="header-anchor" href="#_5、日常工作中你是怎么优化sql的" aria-label="Permalink to &quot;[5、日常工作中你是怎么优化SQL的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#5日常工作中你是怎么优化sql的)&quot;">​</a></h3><p>可以从这几个维度回答这个问题：</p><p><strong>1、</strong> 加索引</p><p><strong>2、</strong> 避免返回不必要的数据</p><p><strong>3、</strong> 适当分批量进行</p><p><strong>4、</strong> 优化sql结构</p><p><strong>5、</strong> 分库分表</p><p><strong>6、</strong> 读写分离</p><h3 id="_6、创建索引的原则" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E5%88%99" target="_blank" rel="noreferrer">6、创建索引的原则</a> <a class="header-anchor" href="#_6、创建索引的原则" aria-label="Permalink to &quot;[6、创建索引的原则](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#6创建索引的原则)&quot;">​</a></h3><p><strong>索引虽好，但也不是无限制的使用，最好符合一下几个原则</strong></p><p><strong>1、</strong> 最左前缀匹配原则，组合索引非常重要的原则，MySQL会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p><strong>2、</strong> 较频繁作为查询条件的字段才去创建索引</p><p><strong>3、</strong> 更新频繁字段不适合创建索引</p><p><strong>4、</strong> 若是不能有效区分数据的列不适合做索引列(如性别，男女未知，最多也就三种，区分度实在太低)</p><p><strong>5、</strong> 尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p><p><strong>6、</strong> 定义有外键的数据列一定要建立索引。</p><p><strong>7、</strong> 对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</p><p><strong>8、</strong> 对于定义为text、image和bit的数据类型的列不要建立索引。</p><h3 id="_7、什么是死锁-怎么解决" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%BB%E9%94%81%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3" target="_blank" rel="noreferrer">7、什么是死锁？怎么解决？</a> <a class="header-anchor" href="#_7、什么是死锁-怎么解决" aria-label="Permalink to &quot;[7、什么是死锁？怎么解决？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#7什么是死锁怎么解决)&quot;">​</a></h3><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。</p><p><strong>常见的解决死锁的方法</strong></p><p><strong>1、</strong> 如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</p><p><strong>2、</strong> 在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</p><p><strong>3、</strong> 对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</p><p>如果业务不好处理,可以用分布式事务锁或者使用乐观锁</p><h3 id="_8、为表中得字段选择合适得数据类型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E4%B8%BA%E8%A1%A8%E4%B8%AD%E5%BE%97%E5%AD%97%E6%AE%B5%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E5%BE%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">8、为表中得字段选择合适得数据类型</a> <a class="header-anchor" href="#_8、为表中得字段选择合适得数据类型" aria-label="Permalink to &quot;[8、为表中得字段选择合适得数据类型](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#8为表中得字段选择合适得数据类型)&quot;">​</a></h3><p>字段类型优先级: 整形&gt;date,time&gt;enum,char&gt;varchar&gt;blob,text</p><p>优先考虑数字类型，其次是日期或者二进制类型，最后是字符串类型，同级别得数据类型，应该优先选择占用空间小的数据类型</p><h3 id="_9、mysql-索引使用有哪些注意事项呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9mysql-%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E5%91%A2" target="_blank" rel="noreferrer">9、MySQL 索引使用有哪些注意事项呢？</a> <a class="header-anchor" href="#_9、mysql-索引使用有哪些注意事项呢" aria-label="Permalink to &quot;[9、MySQL 索引使用有哪些注意事项呢？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#9mysql-索引使用有哪些注意事项呢)&quot;">​</a></h3><p>可以从三个维度回答这个问题：索引哪些情况会失效，索引不适合哪些场景，索引规则</p><p><strong>索引哪些情况会失效</strong></p><p><strong>1、</strong> 查询条件包含or，可能导致索引失效</p><p><strong>2、</strong> 如何字段类型是字符串，where时一定用引号括起来，否则索引失效</p><p><strong>3、</strong> like通配符可能导致索引失效。</p><p><strong>4、</strong> 联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。</p><p><strong>5、</strong> 在索引列上使用MySQL的内置函数，索引失效。</p><p><strong>6、</strong> 对索引列运算（如，+、-、*、/），索引失效。</p><p><strong>7、</strong> 索引字段上使用（！= 或者 &lt; &gt;，not in）时，可能会导致索引失效。</p><p><strong>8、</strong> 索引字段上使用is null， is not null，可能导致索引失效。</p><p><strong>9、</strong> 左连接查询或者右连接查询查询关联的字段编码格式不一样，可能导致索引失效。</p><p><strong>10、</strong> MySQL估计使用全表扫描要比使用索引快,则不使用索引。</p><p><strong>索引不适合哪些场景</strong></p><p><strong>1、</strong> 数据量少的不适合加索引</p><p><strong>2、</strong> 更新比较频繁的也不适合加索引</p><p><strong>3、</strong> 区分度低的字段不适合加索引（如性别）</p><p><strong>索引的一些潜规则</strong></p><p><strong>1、</strong> 覆盖索引</p><p>2、回表</p><p><strong>3、</strong> 索引数据结构（B+树）</p><p><strong>4、</strong> 最左前缀原则</p><p><strong>5、</strong> 索引下推</p><h3 id="_10、什么是锁" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E4%BB%80%E4%B9%88%E6%98%AF%E9%94%81" target="_blank" rel="noreferrer">10、什么是锁？</a> <a class="header-anchor" href="#_10、什么是锁" aria-label="Permalink to &quot;[10、什么是锁？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，常见面试题及答案汇总.md#10什么是锁)&quot;">​</a></h3><p>数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。</p><p>加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。</p><p><strong>基本锁类型：锁包括行级锁和表级锁</strong></p><h3 id="_11、索引有哪几种类型" tabindex="-1">11、索引有哪几种类型？ <a class="header-anchor" href="#_11、索引有哪几种类型" aria-label="Permalink to &quot;11、索引有哪几种类型？&quot;">​</a></h3><h3 id="_12、组合索引是什么-为什么需要注意组合索引中的顺序" tabindex="-1">12、组合索引是什么？为什么需要注意组合索引中的顺序？ <a class="header-anchor" href="#_12、组合索引是什么-为什么需要注意组合索引中的顺序" aria-label="Permalink to &quot;12、组合索引是什么？为什么需要注意组合索引中的顺序？&quot;">​</a></h3><h3 id="_13、mysql中innodb支持的四种事务隔离级别名称-以及逐级之间的区别" tabindex="-1">13、MySQL中InnoDB支持的四种事务隔离级别名称，以及逐级之间的区别？ <a class="header-anchor" href="#_13、mysql中innodb支持的四种事务隔离级别名称-以及逐级之间的区别" aria-label="Permalink to &quot;13、MySQL中InnoDB支持的四种事务隔离级别名称，以及逐级之间的区别？&quot;">​</a></h3><h3 id="_14、mysql如何获取当前日期" tabindex="-1">14、MySQL如何获取当前日期？ <a class="header-anchor" href="#_14、mysql如何获取当前日期" aria-label="Permalink to &quot;14、MySQL如何获取当前日期？&quot;">​</a></h3><h3 id="_15、关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" tabindex="-1">15、关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？ <a class="header-anchor" href="#_15、关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" aria-label="Permalink to &quot;15、关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&quot;">​</a></h3><h3 id="_16、mysql中-in-和-exists-区别" tabindex="-1">16、MySQL中 in 和 exists 区别 <a class="header-anchor" href="#_16、mysql中-in-和-exists-区别" aria-label="Permalink to &quot;16、MySQL中 in 和 exists 区别&quot;">​</a></h3><h3 id="_17、mysql中datetime和timestamp的区别" tabindex="-1">17、MySQL中DATETIME和TIMESTAMP的区别 <a class="header-anchor" href="#_17、mysql中datetime和timestamp的区别" aria-label="Permalink to &quot;17、MySQL中DATETIME和TIMESTAMP的区别&quot;">​</a></h3><h3 id="_18、简单描述mysql中-索引-主键-唯一索引-联合索引的区别-对数据库的性能有什么影响-从读写两方面" tabindex="-1">18、简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面） <a class="header-anchor" href="#_18、简单描述mysql中-索引-主键-唯一索引-联合索引的区别-对数据库的性能有什么影响-从读写两方面" aria-label="Permalink to &quot;18、简单描述MySQL中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）&quot;">​</a></h3><h3 id="_19、列的字符串类型可以是什么" tabindex="-1">19、列的字符串类型可以是什么？ <a class="header-anchor" href="#_19、列的字符串类型可以是什么" aria-label="Permalink to &quot;19、列的字符串类型可以是什么？&quot;">​</a></h3><h3 id="_20、mysql中in-和exists的区别。" tabindex="-1">20、MySQL中in 和exists的区别。 <a class="header-anchor" href="#_20、mysql中in-和exists的区别。" aria-label="Permalink to &quot;20、MySQL中in 和exists的区别。&quot;">​</a></h3><h3 id="_21、为什么要使用视图-什么是视图" tabindex="-1">21、为什么要使用视图？什么是视图？ <a class="header-anchor" href="#_21、为什么要使用视图-什么是视图" aria-label="Permalink to &quot;21、为什么要使用视图？什么是视图？&quot;">​</a></h3><h3 id="_22、什么是非标准字符串类型" tabindex="-1">22、什么是非标准字符串类型？ <a class="header-anchor" href="#_22、什么是非标准字符串类型" aria-label="Permalink to &quot;22、什么是非标准字符串类型？&quot;">​</a></h3><h3 id="_23、创建索引时需要注意什么" tabindex="-1">23、创建索引时需要注意什么？ <a class="header-anchor" href="#_23、创建索引时需要注意什么" aria-label="Permalink to &quot;23、创建索引时需要注意什么？&quot;">​</a></h3><h3 id="_24、简单总结下" tabindex="-1">24、简单总结下 <a class="header-anchor" href="#_24、简单总结下" aria-label="Permalink to &quot;24、简单总结下&quot;">​</a></h3><h3 id="_25、如果要存储用户的密码散列-应该使用什么字段进行存储" tabindex="-1">25、如果要存储用户的密码散列，应该使用什么字段进行存储？ <a class="header-anchor" href="#_25、如果要存储用户的密码散列-应该使用什么字段进行存储" aria-label="Permalink to &quot;25、如果要存储用户的密码散列，应该使用什么字段进行存储？&quot;">​</a></h3><h3 id="_26、sql注入漏洞产生的原因-如何防止" tabindex="-1">26、SQL注入漏洞产生的原因？如何防止？ <a class="header-anchor" href="#_26、sql注入漏洞产生的原因-如何防止" aria-label="Permalink to &quot;26、SQL注入漏洞产生的原因？如何防止？&quot;">​</a></h3><h3 id="_27、说一下数据库的三大范式" tabindex="-1">27、说一下数据库的三大范式 <a class="header-anchor" href="#_27、说一下数据库的三大范式" aria-label="Permalink to &quot;27、说一下数据库的三大范式&quot;">​</a></h3><h3 id="_28、什么是基本表-什么是视图" tabindex="-1">28、什么是基本表？什么是视图？ <a class="header-anchor" href="#_28、什么是基本表-什么是视图" aria-label="Permalink to &quot;28、什么是基本表？什么是视图？&quot;">​</a></h3><h3 id="_29、索引设计的原则" tabindex="-1">29、索引设计的原则？ <a class="header-anchor" href="#_29、索引设计的原则" aria-label="Permalink to &quot;29、索引设计的原则？&quot;">​</a></h3><h3 id="_30、索引有哪些优缺点" tabindex="-1">30、索引有哪些优缺点？ <a class="header-anchor" href="#_30、索引有哪些优缺点" aria-label="Permalink to &quot;30、索引有哪些优缺点？&quot;">​</a></h3>',115),n=[s];function E(l,p,i,h,g,B){return o(),e("div",null,n)}const m=t(a,[["render",E]]);export{A as __pageData,m as default};
