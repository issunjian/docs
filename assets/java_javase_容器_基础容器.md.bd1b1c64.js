import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"基础容器","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/容器/基础容器.md","filePath":"java/javase/容器/基础容器.md"}'),p={name:"java/javase/容器/基础容器.md"},o=l(`<h1 id="基础容器" tabindex="-1">基础容器 <a class="header-anchor" href="#基础容器" aria-label="Permalink to &quot;基础容器&quot;">​</a></h1><hr><h2 id="基本接口" tabindex="-1">基本接口 <a class="header-anchor" href="#基本接口" aria-label="Permalink to &quot;基本接口&quot;">​</a></h2><p>java 提供了一些基础容器类，可以用特定的方式组织、存储和操作对象数据。这些集合框架分为两大分支：Collection 接口和 Map 接口。</p><p>所有容器都定义在 java.util 文件夹内，使用时需要进行导入。</p><h3 id="collection-接口" tabindex="-1">Collection 接口 <a class="header-anchor" href="#collection-接口" aria-label="Permalink to &quot;Collection 接口&quot;">​</a></h3><p>【集合】用特定的方式组织、存储和操作对象数据。有三个常用子接口 List 接口、Queue 接口、Set 接口。</p><p>Collection 接口以及所有子接口和子方法 都定义在 java.util 文件夹内，使用时需进行导入。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 修改</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);                </span><span style="color:#7B7F8B;">// 添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);             </span><span style="color:#7B7F8B;">// 删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();               </span><span style="color:#7B7F8B;">// 清除所有元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 查询</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">();             </span><span style="color:#7B7F8B;">// 判断集合是否为空</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();                </span><span style="color:#7B7F8B;">// 返回集合元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">           </span><span style="color:#7B7F8B;">// 判断集合中是否含有元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 多集合操作</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(c2);            </span><span style="color:#7B7F8B;">// 并操作，添加其他集合中元素</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">removeAll</span><span style="color:#F6F6F4;">(c2);         </span><span style="color:#7B7F8B;">// 减操作，删除和其他集合共有元素</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">retainAll</span><span style="color:#F6F6F4;">(c2);         </span><span style="color:#7B7F8B;">// 交操作，只保留和其他集合共有元素 </span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(c2);            </span><span style="color:#7B7F8B;">// 判断是否和其他集合元素相同</span></span>
<span class="line"><span style="color:#F6F6F4;">collection.</span><span style="color:#62E884;">containsAll</span><span style="color:#F6F6F4;">(c2);       </span><span style="color:#7B7F8B;">// 判断是否包含其它集合所有元素  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建迭代器</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Iterator</span><span style="color:#F6F6F4;">&lt;Integer&gt; iter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> collection.</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 修改</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);                </span><span style="color:#6A737D;">// 添加元素</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);             </span><span style="color:#6A737D;">// 删除元素</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();               </span><span style="color:#6A737D;">// 清除所有元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查询</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();             </span><span style="color:#6A737D;">// 判断集合是否为空</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();                </span><span style="color:#6A737D;">// 返回集合元素个数</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 判断集合中是否含有元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 多集合操作</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(c2);            </span><span style="color:#6A737D;">// 并操作，添加其他集合中元素</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">removeAll</span><span style="color:#24292E;">(c2);         </span><span style="color:#6A737D;">// 减操作，删除和其他集合共有元素</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">retainAll</span><span style="color:#24292E;">(c2);         </span><span style="color:#6A737D;">// 交操作，只保留和其他集合共有元素 </span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(c2);            </span><span style="color:#6A737D;">// 判断是否和其他集合元素相同</span></span>
<span class="line"><span style="color:#24292E;">collection.</span><span style="color:#6F42C1;">containsAll</span><span style="color:#24292E;">(c2);       </span><span style="color:#6A737D;">// 判断是否包含其它集合所有元素  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建迭代器</span></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> collection.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="list-接口" tabindex="-1">List 接口 <a class="header-anchor" href="#list-接口" aria-label="Permalink to &quot;List 接口&quot;">​</a></h3><p>【列表】元素有序，可以按索引操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 修改</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);              </span><span style="color:#7B7F8B;">// 末尾添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 插入元素</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 按索引删除元素(int)</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);            </span><span style="color:#7B7F8B;">// 按内容删除对象元素(Object)</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Integer</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">));    </span><span style="color:#7B7F8B;">// 按内容删除基础类型元素</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 清除所有元素</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 修改元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 查找</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 判定是否为空</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();                    </span><span style="color:#7B7F8B;">// 查询列表元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 判定是否含有元素</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);                    </span><span style="color:#7B7F8B;">// 按索引查找元素</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);          </span><span style="color:#7B7F8B;">// 查询索引号：如果有返回第一个，没有返回-1</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);      </span><span style="color:#7B7F8B;">// 查询索引号：如果有返回最后一个，没有返回-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 转化</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();                </span><span style="color:#7B7F8B;">// 转化为字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">toArray</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 转化为 Object[] 数组</span></span>
<span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> [])list.</span><span style="color:#62E884;">toArray</span><span style="color:#F6F6F4;">();      </span><span style="color:#7B7F8B;">// 转化为对象数组，但不能是基础类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 修改</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data1&quot;</span><span style="color:#24292E;">);              </span><span style="color:#6A737D;">// 末尾添加元素</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;data0&quot;</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 插入元素</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 按索引删除元素(int)</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);            </span><span style="color:#6A737D;">// 按内容删除对象元素(Object)</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));    </span><span style="color:#6A737D;">// 按内容删除基础类型元素</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 清除所有元素</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;data2&quot;</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 修改元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查找</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 判定是否为空</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();                    </span><span style="color:#6A737D;">// 查询列表元素个数</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data3&quot;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 判定是否含有元素</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);                    </span><span style="color:#6A737D;">// 按索引查找元素</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data1&quot;</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 查询索引号：如果有返回第一个，没有返回-1</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data1&quot;</span><span style="color:#24292E;">);      </span><span style="color:#6A737D;">// 查询索引号：如果有返回最后一个，没有返回-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 转化</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();                </span><span style="color:#6A737D;">// 转化为字符串</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 转化为 Object[] 数组</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;"> [])list.</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">();      </span><span style="color:#6A737D;">// 转化为对象数组，但不能是基础类型</span></span></code></pre></div><h3 id="queue-接口" tabindex="-1">Queue 接口 <a class="header-anchor" href="#queue-接口" aria-label="Permalink to &quot;Queue 接口&quot;">​</a></h3><p>【队列】元素有序，在队列尾插入/在队列首移除。常用 Deque 子接口。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//修改</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">offer</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);                </span><span style="color:#7B7F8B;">// 队列尾插入元素，队列满返回 false</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">peek</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 获取队列首元素，队列空返回 null</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">poll</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 获取并移除队列首元素，队列空返回 null</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();                  </span><span style="color:#7B7F8B;">// 清空元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/* offer/peek/poll 方法可以用 add/get/remove 方法代替，但队列空/满时会抛出异常。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 查找</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 判定是否为空</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();                    </span><span style="color:#7B7F8B;">// 查询列表元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">queue.</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 判定是否含有元素</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//修改</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">offer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);                </span><span style="color:#6A737D;">// 队列尾插入元素，队列满返回 false</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 获取队列首元素，队列空返回 null</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 获取并移除队列首元素，队列空返回 null</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();                  </span><span style="color:#6A737D;">// 清空元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* offer/peek/poll 方法可以用 add/get/remove 方法代替，但队列空/满时会抛出异常。 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查找</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 判定是否为空</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();                    </span><span style="color:#6A737D;">// 查询列表元素个数</span></span>
<span class="line"><span style="color:#24292E;">queue.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data3&quot;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 判定是否含有元素</span></span></code></pre></div><h4 id="deque-接口" tabindex="-1">Deque 接口 <a class="header-anchor" href="#deque-接口" aria-label="Permalink to &quot;Deque 接口&quot;">​</a></h4><p>【双端队列】元素可以在两端进出。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">deque.</span><span style="color:#62E884;">offerFirst</span><span style="color:#F6F6F4;">(e);            </span><span style="color:#7B7F8B;">// 队列首添加元素 </span></span>
<span class="line"><span style="color:#F6F6F4;">deque.</span><span style="color:#62E884;">pollFirst</span><span style="color:#F6F6F4;">();              </span><span style="color:#7B7F8B;">// 队列首移除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">deque.</span><span style="color:#62E884;">peekFirst</span><span style="color:#F6F6F4;">();              </span><span style="color:#7B7F8B;">// 获取队列首元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">deque.</span><span style="color:#62E884;">offerLast</span><span style="color:#F6F6F4;">(e);	            </span><span style="color:#7B7F8B;">// 队列尾添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">deque.</span><span style="color:#62E884;">pollLast</span><span style="color:#F6F6F4;">();               </span><span style="color:#7B7F8B;">// 队列尾移除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">deque.</span><span style="color:#62E884;">peekLast</span><span style="color:#F6F6F4;">();               </span><span style="color:#7B7F8B;">// 获取队列尾元素 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/* offer/peek/poll 方法可以用 add/get/remove 方法代替，但队列空/满时会抛出异常。 */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">deque.</span><span style="color:#6F42C1;">offerFirst</span><span style="color:#24292E;">(e);            </span><span style="color:#6A737D;">// 队列首添加元素 </span></span>
<span class="line"><span style="color:#24292E;">deque.</span><span style="color:#6F42C1;">pollFirst</span><span style="color:#24292E;">();              </span><span style="color:#6A737D;">// 队列首移除元素</span></span>
<span class="line"><span style="color:#24292E;">deque.</span><span style="color:#6F42C1;">peekFirst</span><span style="color:#24292E;">();              </span><span style="color:#6A737D;">// 获取队列首元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">deque.</span><span style="color:#6F42C1;">offerLast</span><span style="color:#24292E;">(e);	            </span><span style="color:#6A737D;">// 队列尾添加元素</span></span>
<span class="line"><span style="color:#24292E;">deque.</span><span style="color:#6F42C1;">pollLast</span><span style="color:#24292E;">();               </span><span style="color:#6A737D;">// 队列尾移除元素</span></span>
<span class="line"><span style="color:#24292E;">deque.</span><span style="color:#6F42C1;">peekLast</span><span style="color:#24292E;">();               </span><span style="color:#6A737D;">// 获取队列尾元素 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* offer/peek/poll 方法可以用 add/get/remove 方法代替，但队列空/满时会抛出异常。 */</span></span></code></pre></div><h3 id="set-接口" tabindex="-1">Set 接口 <a class="header-anchor" href="#set-接口" aria-label="Permalink to &quot;Set 接口&quot;">​</a></h3><p>【集】数据不可重复。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 修改</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);              </span><span style="color:#7B7F8B;">// 添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();                  </span><span style="color:#7B7F8B;">// 清除所有元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 查询</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);                   </span><span style="color:#7B7F8B;">// 按序号查找元素（仅限于有序的 set 接口）</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">();                </span><span style="color:#7B7F8B;">// 判断是否为空</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 返回元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">set.</span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 判定是否含有元素</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 修改</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);              </span><span style="color:#6A737D;">// 添加元素</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 删除元素</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();                  </span><span style="color:#6A737D;">// 清除所有元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查询</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);                   </span><span style="color:#6A737D;">// 按序号查找元素（仅限于有序的 set 接口）</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">();                </span><span style="color:#6A737D;">// 判断是否为空</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 返回元素个数</span></span>
<span class="line"><span style="color:#24292E;">set.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 判定是否含有元素</span></span></code></pre></div><p><em>HashSet 类无序，因此不支持 get 方法：获取对象必须要通过 Iterator 来遍历。</em></p><h3 id="collections-类" tabindex="-1">Collections 类 <a class="header-anchor" href="#collections-类" aria-label="Permalink to &quot;Collections 类&quot;">​</a></h3><p>Collections 类是针对集合类的一个帮助类，他提供一系列静态方法实现各种集合操作。</p><ol><li>排序操作（主要针对List接口）</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">swap</span><span style="color:#F6F6F4;">(list, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);          </span><span style="color:#7B7F8B;">// 元素交换顺序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">shuffle</span><span style="color:#F6F6F4;">(list);             </span><span style="color:#7B7F8B;">// 元素随机排序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">reverse</span><span style="color:#F6F6F4;">(list);             </span><span style="color:#7B7F8B;">// 元素颠倒排序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(list);                </span><span style="color:#7B7F8B;">// 元素按大小排序，可以自定义比较顺序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">rotate</span><span style="color:#F6F6F4;">(list, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 元素右移指定长度</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(list, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 元素交换顺序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">shuffle</span><span style="color:#24292E;">(list);             </span><span style="color:#6A737D;">// 元素随机排序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(list);             </span><span style="color:#6A737D;">// 元素颠倒排序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(list);                </span><span style="color:#6A737D;">// 元素按大小排序，可以自定义比较顺序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">rotate</span><span style="color:#24292E;">(list, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 元素右移指定长度</span></span></code></pre></div><ol start="2"><li>查找和替换</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);              </span><span style="color:#7B7F8B;">// 二分查找元素索引，只适用于有序集合</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">(list);                               </span><span style="color:#7B7F8B;">// 返回最大元素，可以自定义比较顺序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">min</span><span style="color:#F6F6F4;">(list);                               </span><span style="color:#7B7F8B;">// 返回最小元素，可以自定义比较顺序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">frequency</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 返回对象出现次数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                      </span><span style="color:#7B7F8B;">// 使用指定元素填充</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">replaceAll</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">old</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">new</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);          </span><span style="color:#7B7F8B;">// 使用指定元素替换</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);              </span><span style="color:#6A737D;">// 二分查找元素索引，只适用于有序集合</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(list);                               </span><span style="color:#6A737D;">// 返回最大元素，可以自定义比较顺序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(list);                               </span><span style="color:#6A737D;">// 返回最小元素，可以自定义比较顺序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">frequency</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 返回对象出现次数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);                      </span><span style="color:#6A737D;">// 使用指定元素填充</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;old&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;new&quot;</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 使用指定元素替换</span></span></code></pre></div><ol start="3"><li>上锁（主要针对List接口）</li></ol><p>调用 Collections 类中的 synchronizedList 方法，可以将 List 接口转换成线程安全的容器使用。</p><p>List 接口中的方法都会被添加 synchronized 锁（效率不高）。但是 iterator 方法没有加锁，如果要遍历还需要在外层加锁。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">synchronizedList</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayList</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (list) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Iterator</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">(); </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i.</span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(i.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">synchronizedList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (list) {</span></span>
<span class="line"><span style="color:#24292E;">    Iterator i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(i.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="map-接口" tabindex="-1">Map 接口 <a class="header-anchor" href="#map-接口" aria-label="Permalink to &quot;Map 接口&quot;">​</a></h3><p>【图】组织存储 key-value 的数据元素组合：内部实际存储的是 <code>Map.Entry&lt;K, V&gt;</code> 静态内部类。</p><p>Entry 类可以通过 getKey、getValue、setKey、setValue 方法调整数据。</p><h4 id="map-接口方法" tabindex="-1">Map 接口方法 <a class="header-anchor" href="#map-接口方法" aria-label="Permalink to &quot;Map 接口方法&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 添加键值对,已有 key 则覆盖 value</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">putIfAbsent</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);       </span><span style="color:#7B7F8B;">// 添加键值对,已有 key 则不操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);              </span><span style="color:#7B7F8B;">// 删除键值对（按值）           </span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);            </span><span style="color:#7B7F8B;">// 删除键值对（按键值）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 获取值, key 不存在返回null</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">getOrDefault</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);     </span><span style="color:#7B7F8B;">// 获取值, key 不存在返回默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">containsKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key_1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);       </span><span style="color:#7B7F8B;">// 判断 key 是否存在  </span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">containsValue</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);             </span><span style="color:#7B7F8B;">// 判断 value 是否存在</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_1&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 添加键值对,已有 key 则覆盖 value</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">putIfAbsent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_2&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 添加键值对,已有 key 则不操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_1&quot;</span><span style="color:#24292E;">);              </span><span style="color:#6A737D;">// 删除键值对（按值）           </span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_2&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);            </span><span style="color:#6A737D;">// 删除键值对（按键值）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_1&quot;</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 获取值, key 不存在返回null</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">getOrDefault</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_2&quot;</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// 获取值, key 不存在返回默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">containsKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key_1&quot;</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 判断 key 是否存在  </span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">containsValue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);             </span><span style="color:#6A737D;">// 判断 value 是否存在</span></span></code></pre></div><hr><h2 id="线性存储" tabindex="-1">线性存储 <a class="header-anchor" href="#线性存储" aria-label="Permalink to &quot;线性存储&quot;">​</a></h2><h3 id="arraylist-类" tabindex="-1">ArrayList 类 <a class="header-anchor" href="#arraylist-类" aria-label="Permalink to &quot;ArrayList 类&quot;">​</a></h3><p>【数组序列】实现了 List 接口，内部使用 Object 数组存储：</p><ol><li>可以高效地按索引进行元素修改和查询。</li><li>添加元素时动态扩容：当容量满后，ArrayList 类会新建一个 1.5 倍容量的新数组，然后将当前数组数据全部复制过去。</li></ol><p><strong>ArrayList 构造方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();              </span><span style="color:#7B7F8B;">// 默认初始容量为 10</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 自定义初始容量</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;(queue);         </span><span style="color:#7B7F8B;">// 构造时直接复制其他容器元素（可以是任何 Collection 类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayList</span><span style="color:#F6F6F4;">();                         </span><span style="color:#7B7F8B;">// 未指定元素类型则为 Object 类</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();              </span><span style="color:#6A737D;">// 默认初始容量为 10</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 自定义初始容量</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(queue);         </span><span style="color:#6A737D;">// 构造时直接复制其他容器元素（可以是任何 Collection 类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">List list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">();                         </span><span style="color:#6A737D;">// 未指定元素类型则为 Object 类</span></span></code></pre></div><h3 id="linkedlist-类" tabindex="-1">LinkedList 类 <a class="header-anchor" href="#linkedlist-类" aria-label="Permalink to &quot;LinkedList 类&quot;">​</a></h3><p>【链表序列】实现了 List 和 Deque 接口。内部使用双向链表存储：</p><ol><li>可以高效地进行元素插入和删除。</li><li>容量无限。</li></ol><p><strong>LinkedList 构造方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;&gt;();              </span><span style="color:#7B7F8B;">// 创建空对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;&gt;(queue);         </span><span style="color:#7B7F8B;">// 复制其他容器元素</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;();              </span><span style="color:#6A737D;">// 创建空对象</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;&gt;(queue);         </span><span style="color:#6A737D;">// 复制其他容器元素</span></span></code></pre></div><h3 id="arraydeque-类" tabindex="-1">ArrayDeque 类 <a class="header-anchor" href="#arraydeque-类" aria-label="Permalink to &quot;ArrayDeque 类&quot;">​</a></h3><p>【数组双端队列】实现了 Deque 接口。内部使用 Object 数组存储（不允许存储 null 值）：</p><ol><li>可以高效进行元素查找和尾部插入取出，是用作队列、双端队列、栈甚至递归树的绝佳选择。</li><li>添加元素时动态扩容：当容量满后，ArrayDeque 类会新建一个 1.5 倍容量的新数组，然后将当前数组数据全部复制过去。</li></ol><p><strong>ArrayDeque 构造方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayDeque</span><span style="color:#F6F6F4;">&lt;String&gt; queue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayDeque</span><span style="color:#F6F6F4;">&lt;&gt;();              </span><span style="color:#7B7F8B;">// 创建空对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayDeque</span><span style="color:#F6F6F4;">&lt;String&gt; queue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayDeque</span><span style="color:#F6F6F4;">&lt;&gt;(list);          </span><span style="color:#7B7F8B;">// 复制其他容器元素</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayDeque&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayDeque&lt;&gt;();              </span><span style="color:#6A737D;">// 创建空对象</span></span>
<span class="line"><span style="color:#24292E;">ArrayDeque&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayDeque&lt;&gt;(list);          </span><span style="color:#6A737D;">// 复制其他容器元素</span></span></code></pre></div><h3 id="priorityqueue-类" tabindex="-1">PriorityQueue 类 <a class="header-anchor" href="#priorityqueue-类" aria-label="Permalink to &quot;PriorityQueue 类&quot;">​</a></h3><p>【无界优先级队列】实现了 Queue 接口。内部使用 Object 数组存储（不允许存储 null 值）：</p><ol><li><strong>PriorityQueue 类内会自动对元素进行排序</strong>，是作为堆的绝佳选择。但实际在数组中并不是有序存储，而只保证队首元素是最小值：每次弹出队首元素后会自动查找剩余队列中的最小元素放到队首。</li><li>添加元素时动态扩容：当容量满后，PriorityQueue 类会新建一个 1.5 倍容量的新数组，然后将当前数组数据全部复制过去。</li></ol><p><strong>PriorityQueue 构造方法</strong></p><p>开发者在构造队列时可通过重写 compare 方法自定义排序规则。如果存储未重写 compareTo 方法的自定义对象，则必须重写 compare 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 默认排序方法</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">PriorityQueue</span><span style="color:#F6F6F4;">&lt;Integer&gt; queue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PriorityQueue</span><span style="color:#F6F6F4;">&lt;Integer&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 自定义排序方法(Lambda 表达式)</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">PriorityQueue</span><span style="color:#F6F6F4;">&lt;Student&gt; queue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PriorityQueue</span><span style="color:#F6F6F4;">&lt;Student&gt;((s1, s2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(s1.</span><span style="color:#62E884;">getScore</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> s2.</span><span style="color:#62E884;">getScore</span><span style="color:#F6F6F4;">()){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s1.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(s2.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s1.</span><span style="color:#62E884;">getScore</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> s2.</span><span style="color:#62E884;">getScore</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 默认排序方法</span></span>
<span class="line"><span style="color:#24292E;">PriorityQueue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自定义排序方法(Lambda 表达式)</span></span>
<span class="line"><span style="color:#24292E;">PriorityQueue&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt; queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> PriorityQueue&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;((s1, s2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">getScore</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">getScore</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(s2.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1.</span><span style="color:#6F42C1;">getScore</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> s2.</span><span style="color:#6F42C1;">getScore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><hr><h2 id="哈希存储" tabindex="-1">哈希存储 <a class="header-anchor" href="#哈希存储" aria-label="Permalink to &quot;哈希存储&quot;">​</a></h2><h3 id="hashmap-类" tabindex="-1">HashMap 类 <a class="header-anchor" href="#hashmap-类" aria-label="Permalink to &quot;HashMap 类&quot;">​</a></h3><p>【哈希表】 实现 Map 接口。底层使用散列存储：构造一个 Entry 数组，根据 key 的 hash 值将 Entry 存入指定位置。</p><ul><li>key 值无序且不可重复，且允许 null 作为 key 值存在。</li><li>发生哈希冲突时，HashMap 采用链表保存多个元素。当链表长度大于 8 时，链表自动转化为红黑树。</li><li>达到负载因数后，HashMap 将调用 resize 方法动态扩容：新建一个 2 倍容量的新数组复制当前数组的数据。</li></ul><p><strong>HashMap 构造方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();                       </span><span style="color:#7B7F8B;">// 默认初始容量 16 负载因数 0.75</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">);                     </span><span style="color:#7B7F8B;">// 自定义初始容量</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0.5f</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 自定义初始容量和负载因数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();                       </span><span style="color:#6A737D;">// 默认初始容量 16 负载因数 0.75</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);                     </span><span style="color:#6A737D;">// 自定义初始容量</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5f</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 自定义初始容量和负载因数</span></span></code></pre></div><h3 id="linkedhashmap-类" tabindex="-1">LinkedHashMap 类 <a class="header-anchor" href="#linkedhashmap-类" aria-label="Permalink to &quot;LinkedHashMap 类&quot;">​</a></h3><p>【链式哈希表】继承 HashMap 类。</p><ol><li>底层使用散列存储：构造一个 Entry 数组，根据 key 的 hash 值将 Entry 存入指定位置。</li><li>Entry 额外添加了引用 before &amp; after ，使哈希表内的所有 Entry 构成一个双向链表维护 Entry 的顺序。</li></ol><p><strong>LinkedHashMap 构造方法</strong></p><p>在默认情况下 Entry 按照插入顺序排序，可指定创建时的初始容量和负载因数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;();                  </span><span style="color:#7B7F8B;">// 默认初始容量 16 负载因数 0.75 </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">);                </span><span style="color:#7B7F8B;">// 自定义初始容量</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0.5f</span><span style="color:#F6F6F4;">);          </span><span style="color:#7B7F8B;">// 自定义初始容量和负载因数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();                  </span><span style="color:#6A737D;">// 默认初始容量 16 负载因数 0.75 </span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);                </span><span style="color:#6A737D;">// 自定义初始容量</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.5f</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 自定义初始容量和负载因数</span></span></code></pre></div><p>Entry 也可以按照访问顺序排序：对 Entry 进行操作时会先删除再插入，将 Entry 移动到双向链表的表尾。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">，</span><span style="color:#BF9EEE;">0.5f</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);    </span><span style="color:#7B7F8B;">// 基于访问顺序排序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">32</span><span style="color:#24292E;">，</span><span style="color:#005CC5;">0.5f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// 基于访问顺序排序</span></span></code></pre></div><p>LinkedHashMap 类提供了 removeEldestEntry 方法，在使用 put 操作插入 Entry 时将自动调用此方法决定是否移除双向链表表头的 Entry：默认返回 false ，可通过重写此方法以实现 LRU 算法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Entry 超过容量后自动删除最久未使用的 Entry</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,Integer&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(capacity, </span><span style="color:#BF9EEE;">0.5f</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">removeEldestEntry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">eldest</span><span style="color:#F6F6F4;">) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> capacity;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Entry 超过容量后自动删除最久未使用的 Entry</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(capacity, </span><span style="color:#005CC5;">0.5f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeEldestEntry</span><span style="color:#24292E;">(Map.Entry </span><span style="color:#E36209;">eldest</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> capacity;  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="treemap-类" tabindex="-1">TreeMap 类 <a class="header-anchor" href="#treemap-类" aria-label="Permalink to &quot;TreeMap 类&quot;">​</a></h3><p>【树表】 实现了 Map 接口。底层使用红黑树存储：Entry 按照 key 值大小插入红黑树，并动态调整红黑树高度。</p><p><strong>TreeMap 类方法</strong></p><p>TreeMap 类提供了以下专属方法使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">firstKey</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">// 返回最小 key</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">lastKey</span><span style="color:#F6F6F4;">();                    </span><span style="color:#7B7F8B;">// 返回最大 key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">ceilingKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);             </span><span style="color:#7B7F8B;">// 返回大于等于10的最小 Key，不存在则返回 null</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">ceilingEntry</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 返回大于等于10的最小 Key 的键值对(getKey / getValue 方法)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">floorKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 返回小于等于10的最大 Key，不存在则返回 null</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">floorEntry</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);             </span><span style="color:#7B7F8B;">// 返回小于等于10的最大 Key 的键值对</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">firstKey</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">// 返回最小 key</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">lastKey</span><span style="color:#24292E;">();                    </span><span style="color:#6A737D;">// 返回最大 key</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">ceilingKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">);             </span><span style="color:#6A737D;">// 返回大于等于10的最小 Key，不存在则返回 null</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">ceilingEntry</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 返回大于等于10的最小 Key 的键值对(getKey / getValue 方法)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">floorKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 返回小于等于10的最大 Key，不存在则返回 null</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">floorEntry</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">);             </span><span style="color:#6A737D;">// 返回小于等于10的最大 Key 的键值对</span></span></code></pre></div><h3 id="set-子类" tabindex="-1">Set 子类 <a class="header-anchor" href="#set-子类" aria-label="Permalink to &quot;Set 子类&quot;">​</a></h3><ul><li><strong>HashSet 类</strong>：【散列集】基于 HashMap 类实现。</li><li><strong>LinkedHashSet 类</strong>：【链式散列集】基于 LinkedHashMap 类实现。</li><li><strong>TreeSet 类</strong>：【树集】基于 TreeMap 类实现。</li></ul><hr><h2 id="元素遍历" tabindex="-1">元素遍历 <a class="header-anchor" href="#元素遍历" aria-label="Permalink to &quot;元素遍历&quot;">​</a></h2><h3 id="遍历容器" tabindex="-1">遍历容器 <a class="header-anchor" href="#遍历容器" aria-label="Permalink to &quot;遍历容器&quot;">​</a></h3><h4 id="iterable-接口" tabindex="-1">Iterable 接口 <a class="header-anchor" href="#iterable-接口" aria-label="Permalink to &quot;Iterable 接口&quot;">​</a></h4><p>是集合框架的顶级接口，被所有容器类都实现。</p><ol><li><p>提供 iterator 方法，用来创建一个实现了 Iterator 接口的 iterator 对象：按容器类规定的顺序实现遍历集合。</p></li><li><p>JDK 1.8 引入 foreach 方法遍历集合。效率更高，但不能对元素进行删除操作，否则会抛出异常。</p></li></ol><h4 id="iterator-接口" tabindex="-1">Iterator 接口 <a class="header-anchor" href="#iterator-接口" aria-label="Permalink to &quot;Iterator 接口&quot;">​</a></h4><p>提供了 hasNext、next、remove 三个方法，可以按容器类规定的顺序实现遍历集合。</p><h3 id="遍历顺序" tabindex="-1">遍历顺序 <a class="header-anchor" href="#遍历顺序" aria-label="Permalink to &quot;遍历顺序&quot;">​</a></h3><h4 id="list-queue-接口" tabindex="-1">List / Queue 接口 <a class="header-anchor" href="#list-queue-接口" aria-label="Permalink to &quot;List / Queue 接口&quot;">​</a></h4><ul><li><strong>全部方法</strong>：按数组或链表顺序输出。</li></ul><h4 id="map-set-接口" tabindex="-1">Map / Set 接口 <a class="header-anchor" href="#map-set-接口" aria-label="Permalink to &quot;Map / Set 接口&quot;">​</a></h4><ul><li><strong>HashSet/HashMap 类</strong>：在返回数据时没有特别的顺序。</li><li><strong>LinkedHashSet/LinkedHashMap 类</strong>：默认按插入顺序返回数据，也可以按访问顺序返回。</li><li><strong>TreeSet/TreeMap 类</strong>：在返回数据时按 key 值从小到大排列，即按照树的中序遍历返回。</li></ul><h3 id="遍历方法" tabindex="-1">遍历方法 <a class="header-anchor" href="#遍历方法" aria-label="Permalink to &quot;遍历方法&quot;">​</a></h3><h4 id="collection-接口-1" tabindex="-1">Collection 接口 <a class="header-anchor" href="#collection-接口-1" aria-label="Permalink to &quot;Collection 接口&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// iterator 遍历</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Iterator</span><span style="color:#F6F6F4;">&lt;Integer&gt; iter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">(iter.</span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">()){              </span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> num </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> iter.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(num </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) iter.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 随机遍历（效率更高，但不能进行删除操作）</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> list) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// iterator 遍历</span></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(iter.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()){              </span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(num </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) iter.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 随机遍历（效率更高，但不能进行删除操作）</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String str </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> list) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="map-接口-1" tabindex="-1">Map 接口 <a class="header-anchor" href="#map-接口-1" aria-label="Permalink to &quot;Map 接口&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String,String&gt; map</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String,String&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#7B7F8B;">// iterator 遍历</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Iterator</span><span style="color:#F6F6F4;">&lt;Map.Entry&lt;String, String&gt;&gt; iter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">entrySet</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">(); </span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (iter.</span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">()) { </span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;String, String&gt; entry </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> iter.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">(); </span></span>
<span class="line"><span style="color:#F6F6F4;">	System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(entry.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">()); </span></span>
<span class="line"><span style="color:#F6F6F4;">} </span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#7B7F8B;">// 随机遍历（效率更高，但不能进行删除操作）</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;String, String&gt; entry </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">entrySet</span><span style="color:#F6F6F4;">()) { </span></span>
<span class="line"><span style="color:#F6F6F4;">	System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(entry.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">()); </span></span>
<span class="line"><span style="color:#F6F6F4;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 只遍历 key</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">keySet</span><span style="color:#F6F6F4;">()) { </span></span>
<span class="line"><span style="color:#F6F6F4;">	System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(key </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(key)); </span></span>
<span class="line"><span style="color:#F6F6F4;">} </span></span>
<span class="line"><span style="color:#F6F6F4;">		</span></span>
<span class="line"><span style="color:#7B7F8B;">// 只遍历 value</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">()) { </span></span>
<span class="line"><span style="color:#F6F6F4;">	System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(value); </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#6A737D;">// iterator 遍历</span></span>
<span class="line"><span style="color:#24292E;">Iterator&lt;</span><span style="color:#D73A49;">Map</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; iter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iter.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">	Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#6A737D;">// 随机遍历（效率更高，但不能进行删除操作）</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 只遍历 key</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key)); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#6A737D;">// 只遍历 value</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String value </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) { </span></span>
<span class="line"><span style="color:#24292E;">	System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(value); </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="遍历失败" tabindex="-1">遍历失败 <a class="header-anchor" href="#遍历失败" aria-label="Permalink to &quot;遍历失败&quot;">​</a></h3><p>在迭代元素的时候不能通过集合的方法修改或删除元素，但可以通过迭代器的 remove 方法删除元素。</p><ul><li><p>java.util 包下面的所有的集合类都是快速失败的。直接对原容器进行修改，会抛出 ConcurrentModificationException 异常。</p></li><li><p>java.util.concurrent 包下面的所有的集合类都是安全失败的。遍历时先对底层集合做拷贝再遍历，因此不会抛出异常。</p></li></ul>`,105),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
