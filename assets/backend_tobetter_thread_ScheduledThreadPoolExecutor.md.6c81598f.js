import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/ScheduledThreadPoolExecutor-cd4cead8-2ce3-4460-8ea3-9534cd4925f2.79271606.jpg",C=JSON.parse('{"title":"深入剖析Java计划任务ScheduledThreadPoolExecutor","description":"深入剖析Java计划任务ScheduledThreadPoolExecutor","frontmatter":{"title":"深入剖析Java计划任务ScheduledThreadPoolExecutor","shortTitle":"ScheduledThreadPoolExecutor","description":"深入剖析Java计划任务ScheduledThreadPoolExecutor","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ScheduledThreadPoolExecutor"}]]},"headers":[],"relativePath":"backend/tobetter/thread/ScheduledThreadPoolExecutor.md","filePath":"backend/tobetter/thread/ScheduledThreadPoolExecutor.md"}'),o={name:"backend/tobetter/thread/ScheduledThreadPoolExecutor.md"},e=l(`<p>自JDK 1.5 开始，JDK提供了<code>ScheduledThreadPoolExecutor</code>类用于计划任务（又称定时任务），这个类有两个用途：</p><ul><li>在给定的延迟之后运行任务</li><li>周期性重复执行任务</li></ul><p>在这之前，是使用<code>Timer</code>类来完成定时任务的，但是<code>Timer</code>有缺陷：</p><ul><li>Timer是<strong>单线程</strong>模式；</li><li>如果在执行任务期间某个TimerTask耗时较久，那么就会影响其它任务的调度；</li><li>Timer的任务调度是基于绝对时间的，对<strong>系统时间</strong>敏感；</li><li>Timer不会捕获执行TimerTask时所抛出的<strong>异常</strong>，由于Timer是单线程，所以一旦出现异常，则线程就会终止，其他任务也得不到执行。</li></ul><p>所以JDK 1.5之后，大家就摒弃<code>Timer</code>,使用<code>ScheduledThreadPoolExecutor</code>吧。</p><h2 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h2><p>假设我有一个需求，指定时间给大家发送消息。那么我们会将消息（包含发送时间）存储在数据库中，然后想用一个定时任务，每隔1秒检查数据库在当前时间有没有需要发送的消息，那这个计划任务怎么写？下面是一个Demo:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadPool</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledExecutorService</span><span style="color:#F6F6F4;"> executor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">ScheduledThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, Executors.</span><span style="color:#62E884;">defaultThreadFactory</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SimpleDateFormat</span><span style="color:#F6F6F4;"> df </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SimpleDateFormat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">yyyy-MM-dd HH:mm:ss</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 新建一个固定延迟时间的计划任务</span></span>
<span class="line"><span style="color:#F6F6F4;">        executor.</span><span style="color:#62E884;">scheduleWithFixedDelay</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> run() {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">if</span><span style="color:#62E884;"> (haveMsgAtCurrentTime</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#F6F6F4;">df</span><span style="color:#62E884;">.format(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> Date</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;">));</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">大家注意了，我要发消息了</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">haveMsgAtCurrentTime</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//查询数据库，有没有当前时间需要发送的消息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//这里省略实现，直接返回true</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ScheduledExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ScheduledThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, Executors.</span><span style="color:#6F42C1;">defaultThreadFactory</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> SimpleDateFormat df </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleDateFormat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 新建一个固定延迟时间的计划任务</span></span>
<span class="line"><span style="color:#24292E;">        executor.</span><span style="color:#6F42C1;">scheduleWithFixedDelay</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">haveMsgAtCurrentTime</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(df.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;大家注意了，我要发消息了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">haveMsgAtCurrentTime</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//查询数据库，有没有当前时间需要发送的消息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//这里省略实现，直接返回true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面截取前面的输出（这个demo会一直运行下去）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">48</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">49</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">50</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">51</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">52</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">53</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">54</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#BF9EEE;">2019</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">01</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">16</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">55</span></span>
<span class="line"><span style="color:#F6F6F4;">大家注意了，我要发消息了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">48</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">49</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">50</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">51</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">52</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">53</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">54</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span>
<span class="line"><span style="color:#005CC5;">2019</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">01</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">23</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">16</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">55</span></span>
<span class="line"><span style="color:#24292E;">大家注意了，我要发消息了</span></span></code></pre></div><p>这就是<code>ScheduledThreadPoolExecutor</code>的一个简单运用，想要知道奥秘，接下来的东西需要仔细的看哦。</p><h2 id="类结构" tabindex="-1">类结构 <a class="header-anchor" href="#类结构" aria-label="Permalink to &quot;类结构&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ScheduledThreadPoolExecutor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ThreadPoolExecutor</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledExecutorService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ScheduledThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">corePoolSize</span><span style="color:#F6F6F4;">,</span><span style="color:#97E1F1;font-style:italic;">ThreadFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">threadFactory</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(corePoolSize, Integer.MAX_VALUE, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, NANOSECONDS,</span></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DelayedWorkQueue</span><span style="color:#F6F6F4;">(), threadFactory);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//……</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledThreadPoolExecutor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledExecutorService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">corePoolSize</span><span style="color:#24292E;">,ThreadFactory </span><span style="color:#E36209;">threadFactory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(corePoolSize, Integer.MAX_VALUE, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, NANOSECONDS,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DelayedWorkQueue</span><span style="color:#24292E;">(), threadFactory);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//……</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ScheduledThreadPoolExecutor</code>继承了<code>ThreadPoolExecutor</code>，实现了<code>ScheduledExecutorService</code>。 线程池在之前的章节介绍过了，我们先看看<code>ScheduledExecutorService</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ScheduledExecutorService</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#62E884;">schedule</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">command</span><span style="color:#F6F6F4;">,</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">unit</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> &lt;V&gt; </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F6F6F4;">&lt;V&gt; </span><span style="color:#62E884;">schedule</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Callable</span><span style="color:#F6F6F4;">&lt;V&gt; </span><span style="color:#FFB86C;font-style:italic;">callable</span><span style="color:#F6F6F4;">,</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">unit</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#62E884;">scheduleAtFixedRate</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">command</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                  </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">initialDelay</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                  </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">period</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                  </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">unit</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#62E884;">scheduleWithFixedDelay</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">command</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                     </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">initialDelay</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                     </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                     </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">unit</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledExecutorService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExecutorService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ScheduledFuture&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">command</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">, TimeUnit </span><span style="color:#E36209;">unit</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; ScheduledFuture&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(Callable&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">callable</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">, TimeUnit </span><span style="color:#E36209;">unit</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ScheduledFuture&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">scheduleAtFixedRate</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">command</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initialDelay</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">period</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                  TimeUnit </span><span style="color:#E36209;">unit</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ScheduledFuture&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">scheduleWithFixedDelay</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">command</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initialDelay</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">delay</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                                     TimeUnit </span><span style="color:#E36209;">unit</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ScheduledExecutorService</code>实现了<code>ExecutorService</code> ,并增加若干定时相关的接口。 前两个方法用于单次调度执行任务，区别是有没有返回值。</p><p>重点理解一下后面两个方法：</p><ul><li><p>scheduleAtFixedRate</p><p>该方法在<code>initialDelay</code>时长后第一次执行任务，以后每隔<code>period</code>时长，再次执行任务。注意，period是从<strong>任务开始执行算起</strong>的。开始执行任务后，定时器每隔period时长<strong>检查该任务是否完成</strong>，如果完成则再次启动任务，否则等该任务结束后才再次启动任务。</p></li><li><p>scheduleWithFixDelay</p><p>该方法在<code>initialDelay</code>时长后第一次执行任务，以后每当任务执行<strong>完成后</strong>，等待<code>delay</code>时长，再次执行任务。</p></li></ul><h2 id="主要方法介绍" tabindex="-1">主要方法介绍 <a class="header-anchor" href="#主要方法介绍" aria-label="Permalink to &quot;主要方法介绍&quot;">​</a></h2><h3 id="schedule" tabindex="-1">schedule <a class="header-anchor" href="#schedule" aria-label="Permalink to &quot;schedule&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// delay时长后执行任务command，该任务只执行一次</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">schedule</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> command, </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> delay, </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (command </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> unit </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NullPointerException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 这里的decorateTask方法仅仅返回第二个参数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decorateTask</span><span style="color:#F6F6F4;">(command,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                   		</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFutureTask</span><span style="color:#F6F6F4;">&lt;Void&gt;(command, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#62E884;">triggerTime</span><span style="color:#F6F6F4;">(delay,unit)));</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 延时或者周期执行任务的主要方法,稍后统一说明</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">delayedExecute</span><span style="color:#F6F6F4;">(t);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// delay时长后执行任务command，该任务只执行一次</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ScheduledFuture</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(Runnable command, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> delay, TimeUnit unit) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (command </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> unit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里的decorateTask方法仅仅返回第二个参数</span></span>
<span class="line"><span style="color:#24292E;">    RunnableScheduledFuture&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorateTask</span><span style="color:#24292E;">(command,</span></span>
<span class="line"><span style="color:#24292E;">                                   		</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ScheduledFutureTask&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt;(command, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">triggerTime</span><span style="color:#24292E;">(delay,unit)));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 延时或者周期执行任务的主要方法,稍后统一说明</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">delayedExecute</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们先看看里面涉及到的几个类和接口<code>ScheduledFuture</code>、 <code>RunnableScheduledFuture</code>、 <code>ScheduledFutureTask</code>的关系：</p><img src="`+p+`"><p>我们先看看这几个接口和类：</p><h4 id="delayed接口" tabindex="-1">Delayed接口 <a class="header-anchor" href="#delayed接口" aria-label="Permalink to &quot;Delayed接口&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 继承Comparable接口，表示该类对象支持排序</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Delayed</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparable</span><span style="color:#F6F6F4;">&lt;Delayed&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 返回该对象剩余时延</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getDelay</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">unit</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 继承Comparable接口，表示该类对象支持排序</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Delayed</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Delayed</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 返回该对象剩余时延</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDelay</span><span style="color:#24292E;">(TimeUnit </span><span style="color:#E36209;">unit</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>Delayed</code>接口很简单，继承了<code>Comparable</code>接口，表示对象是可以比较排序的。</p><h4 id="scheduledfuture接口" tabindex="-1">ScheduledFuture接口 <a class="header-anchor" href="#scheduledfuture接口" aria-label="Permalink to &quot;ScheduledFuture接口&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 仅仅继承了Delayed和Future接口，自己没有任何代码</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ScheduledFuture</span><span style="color:#F6F6F4;">&lt;V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Delayed</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 仅仅继承了Delayed和Future接口，自己没有任何代码</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledFuture</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Delayed</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Future</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>没有添加其他方法。</p><h4 id="runnablescheduledfuture接口" tabindex="-1">RunnableScheduledFuture接口 <a class="header-anchor" href="#runnablescheduledfuture接口" aria-label="Permalink to &quot;RunnableScheduledFuture接口&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RunnableScheduledFuture</span><span style="color:#F6F6F4;">&lt;V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RunnableFuture</span><span style="color:#F6F6F4;">&lt;V&gt;, </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F6F6F4;">&lt;V&gt; {      </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 是否是周期任务，周期任务可被调度运行多次，非周期任务只被运行一次   </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isPeriodic</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunnableScheduledFuture</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RunnableFuture</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">ScheduledFuture</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {      </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是否是周期任务，周期任务可被调度运行多次，非周期任务只被运行一次   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPeriodic</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="scheduledfuturetask类" tabindex="-1">ScheduledFutureTask类 <a class="header-anchor" href="#scheduledfuturetask类" aria-label="Permalink to &quot;ScheduledFutureTask类&quot;">​</a></h4><p>回到<code>schecule</code>方法中，它创建了一个<code>ScheduledFutureTask</code>的对象，由上面的关系图可知，<code>ScheduledFutureTask</code>直接或者间接实现了很多接口，一起看看<code>ScheduledFutureTask</code>里面的实现方法吧。</p><p><strong>构造方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">ScheduledFutureTask</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> r, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> result, </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> ns, </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> period) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 调用父类FutureTask的构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(r, result);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// time表示任务下次执行的时间</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.time </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ns;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 周期任务，正数表示按照固定速率，负数表示按照固定时延,0表示不是周期任务</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.period </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> period;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 任务的编号</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sequenceNumber </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sequencer.</span><span style="color:#62E884;">getAndIncrement</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ScheduledFutureTask</span><span style="color:#24292E;">(Runnable r, V result, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ns, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> period) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用父类FutureTask的构造方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(r, result);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// time表示任务下次执行的时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ns;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 周期任务，正数表示按照固定速率，负数表示按照固定时延,0表示不是周期任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.period </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> period;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 任务的编号</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sequenceNumber </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sequencer.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Delayed接口的实现</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 实现Delayed接口的getDelay方法，返回任务开始执行的剩余时间</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getDelay</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> unit.</span><span style="color:#62E884;">convert</span><span style="color:#F6F6F4;">(time </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">(), TimeUnit.NANOSECONDS);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 实现Delayed接口的getDelay方法，返回任务开始执行的剩余时间</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDelay</span><span style="color:#24292E;">(TimeUnit unit) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> unit.</span><span style="color:#6F42C1;">convert</span><span style="color:#24292E;">(time </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">(), TimeUnit.NANOSECONDS);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Comparable接口的实现</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Comparable接口的compareTo方法，比较两个任务的”大小”。</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Delayed</span><span style="color:#F6F6F4;"> other) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (other </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (other </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> ScheduledFutureTask) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">ScheduledFutureTask</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ScheduledFutureTask</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;">)other;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> diff </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> time </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> x.time;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 小于0，说明当前任务的执行时间点早于other，要排在延时队列other的前面</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (diff </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 大于0，说明当前任务的执行时间点晚于other，要排在延时队列other的后面</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (diff </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 如果两个任务的执行时间点一样，比较两个任务的编号，编号小的排在队列前面，编号大的排在队列后面</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (sequenceNumber </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> x.sequenceNumber)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 如果任务类型不是ScheduledFutureTask，通过getDelay方法比较</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">getDelay</span><span style="color:#F6F6F4;">(TimeUnit.NANOSECONDS) </span><span style="color:#F286C4;">-</span></span>
<span class="line"><span style="color:#F6F6F4;">              other.</span><span style="color:#62E884;">getDelay</span><span style="color:#F6F6F4;">(TimeUnit.NANOSECONDS));</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (d </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ((d </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Comparable接口的compareTo方法，比较两个任务的”大小”。</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Delayed other) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (other </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (other </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> ScheduledFutureTask) {</span></span>
<span class="line"><span style="color:#24292E;">      ScheduledFutureTask&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ScheduledFutureTask</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">)other;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> diff </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> time </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> x.time;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 小于0，说明当前任务的执行时间点早于other，要排在延时队列other的前面</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (diff </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 大于0，说明当前任务的执行时间点晚于other，要排在延时队列other的后面</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (diff </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 如果两个任务的执行时间点一样，比较两个任务的编号，编号小的排在队列前面，编号大的排在队列后面</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sequenceNumber </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> x.sequenceNumber)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果任务类型不是ScheduledFutureTask，通过getDelay方法比较</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">getDelay</span><span style="color:#24292E;">(TimeUnit.NANOSECONDS) </span><span style="color:#D73A49;">-</span></span>
<span class="line"><span style="color:#24292E;">              other.</span><span style="color:#6F42C1;">getDelay</span><span style="color:#24292E;">(TimeUnit.NANOSECONDS));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (d </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ((d </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>setNextRunTime</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 任务执行完后，设置下次执行的时间</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setNextRunTime</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> period;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// p &gt; 0，说明是固定速率运行的任务</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 在原来任务开始执行时间的基础上加上p即可</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (p </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">      time </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// p &lt; 0，说明是固定时延运行的任务，</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 下次执行时间在当前时间(任务执行完成的时间)的基础上加上-p的时间</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">      time </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">triggerTime</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;">p);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 任务执行完后，设置下次执行的时间</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setNextRunTime</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> period;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// p &gt; 0，说明是固定速率运行的任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在原来任务开始执行时间的基础上加上p即可</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      time </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// p &lt; 0，说明是固定时延运行的任务，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 下次执行时间在当前时间(任务执行完成的时间)的基础上加上-p的时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">      time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">triggerTime</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">p);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Runnable接口实现</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> periodic </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isPeriodic</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 如果当前状态下不能执行任务，则取消任务</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#62E884;">canRunInCurrentRunState</span><span style="color:#F6F6F4;">(periodic))</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">cancel</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 不是周期性任务，执行一次任务即可，调用父类的run方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">periodic)</span></span>
<span class="line"><span style="color:#F6F6F4;">      ScheduledFutureTask.super.</span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 是周期性任务，调用FutureTask的runAndReset方法，方法执行完成后</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 重新设置任务下一次执行的时间，并将该任务重新入队，等待再次被调度</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (ScheduledFutureTask.super.</span><span style="color:#62E884;">runAndReset</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">setNextRunTime</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">reExecutePeriodic</span><span style="color:#F6F6F4;">(outerTask);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> periodic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPeriodic</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果当前状态下不能执行任务，则取消任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">canRunInCurrentRunState</span><span style="color:#24292E;">(periodic))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 不是周期性任务，执行一次任务即可，调用父类的run方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">periodic)</span></span>
<span class="line"><span style="color:#24292E;">      ScheduledFutureTask.super.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 是周期性任务，调用FutureTask的runAndReset方法，方法执行完成后</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 重新设置任务下一次执行的时间，并将该任务重新入队，等待再次被调度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ScheduledFutureTask.super.</span><span style="color:#6F42C1;">runAndReset</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setNextRunTime</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">reExecutePeriodic</span><span style="color:#24292E;">(outerTask);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>总结一下run方法的执行过程：</p><ol><li>如果当前线程池运行状态不可以执行任务，取消该任务，然后直接返回，否则执行步骤2；</li><li>如果不是周期性任务，调用FutureTask中的run方法执行，会设置执行结果，然后直接返回，否则执行步骤3；</li><li>如果是周期性任务，调用FutureTask中的runAndReset方法执行，不会设置执行结果，然后直接返回，否则执行步骤4和步骤5；</li><li>计算下次执行该任务的具体时间；</li><li>重复执行任务。</li></ol><p><code>runAndReset</code>方法是为任务多次执行而设计的。<code>runAndReset</code>方法执行完任务后不会设置任务的执行结果，也不会去更新任务的状态，维持任务的状态为初始状态（<strong>NEW</strong>状态），这也是该方法和<code>FutureTask</code>的<code>run</code>方法的区别。</p><h3 id="scheduleatfixedrate" tabindex="-1">scheduleAtFixedRate <a class="header-anchor" href="#scheduleatfixedrate" aria-label="Permalink to &quot;scheduleAtFixedRate&quot;">​</a></h3><p>我们看一下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 注意，固定速率和固定时延，传入的参数都是Runnable，也就是说这种定时任务是没有返回值的</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFuture</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">scheduleAtFixedRate</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> command,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                  </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> initialDelay,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                  </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> period,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                  </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (command </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> unit </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NullPointerException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (period </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IllegalArgumentException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 创建一个有初始延时和固定周期的任务</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ScheduledFutureTask</span><span style="color:#F6F6F4;">&lt;Void&gt; sft </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledFutureTask</span><span style="color:#F6F6F4;">&lt;Void&gt;(command,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    </span><span style="color:#62E884;">triggerTime</span><span style="color:#F6F6F4;">(initialDelay, unit),</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    unit.</span><span style="color:#62E884;">toNanos</span><span style="color:#F6F6F4;">(period));</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;">&lt;Void&gt; t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decorateTask</span><span style="color:#F6F6F4;">(command, sft);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// outerTask表示将会重新入队的任务</span></span>
<span class="line"><span style="color:#F6F6F4;">    sft.outerTask </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 稍后说明</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">delayedExecute</span><span style="color:#F6F6F4;">(t);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 注意，固定速率和固定时延，传入的参数都是Runnable，也就是说这种定时任务是没有返回值的</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ScheduledFuture</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scheduleAtFixedRate</span><span style="color:#24292E;">(Runnable command,</span></span>
<span class="line"><span style="color:#24292E;">                                                  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> initialDelay,</span></span>
<span class="line"><span style="color:#24292E;">                                                  </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> period,</span></span>
<span class="line"><span style="color:#24292E;">                                                  TimeUnit unit) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (command </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> unit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (period </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个有初始延时和固定周期的任务</span></span>
<span class="line"><span style="color:#24292E;">    ScheduledFutureTask&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; sft </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ScheduledFutureTask&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt;(command,</span></span>
<span class="line"><span style="color:#24292E;">                                    </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                    </span><span style="color:#6F42C1;">triggerTime</span><span style="color:#24292E;">(initialDelay, unit),</span></span>
<span class="line"><span style="color:#24292E;">                                    unit.</span><span style="color:#6F42C1;">toNanos</span><span style="color:#24292E;">(period));</span></span>
<span class="line"><span style="color:#24292E;">    RunnableScheduledFuture&lt;</span><span style="color:#D73A49;">Void</span><span style="color:#24292E;">&gt; t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorateTask</span><span style="color:#24292E;">(command, sft);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// outerTask表示将会重新入队的任务</span></span>
<span class="line"><span style="color:#24292E;">    sft.outerTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 稍后说明</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">delayedExecute</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>scheduleAtFixedRate</code>这个方法和<code>schedule</code>类似，不同点是<code>scheduleAtFixedRate</code>方法内部创建的是<code>ScheduledFutureTask</code>，带有初始延时和固定周期的任务 。</p><h3 id="schedulewithfixeddelay" tabindex="-1">scheduleWithFixedDelay <a class="header-anchor" href="#schedulewithfixeddelay" aria-label="Permalink to &quot;scheduleWithFixedDelay&quot;">​</a></h3><p><code>FixedDelay</code>也是通过<code>ScheduledFutureTask</code>体现的，唯一不同的地方在于创建的<code>ScheduledFutureTask</code>不同 。这里不再展示源码。</p><h3 id="delayedexecute" tabindex="-1">delayedExecute <a class="header-anchor" href="#delayedexecute" aria-label="Permalink to &quot;delayedExecute&quot;">​</a></h3><p>前面讲到的<code>schedule</code>、<code>scheduleAtFixedRate</code>和<code>scheduleWithFixedDelay</code>最后都调用了<code>delayedExecute</code>方法，该方法是定时任务执行的主要方法。 一起来看看源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">delayedExecute</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> task) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 线程池已经关闭，调用拒绝执行处理器处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">isShutdown</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">reject</span><span style="color:#F6F6F4;">(task);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 将任务加入到等待队列</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getQueue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(task);</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 线程池已经关闭，且当前状态不能运行该任务，将该任务从等待队列移除并取消该任务</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">isShutdown</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">!</span><span style="color:#62E884;">canRunInCurrentRunState</span><span style="color:#F6F6F4;">(task.</span><span style="color:#62E884;">isPeriodic</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(task))</span></span>
<span class="line"><span style="color:#F6F6F4;">        task.</span><span style="color:#62E884;">cancel</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 增加一个worker，就算corePoolSize=0也要增加一个worker</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">ensurePrestart</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delayedExecute</span><span style="color:#24292E;">(RunnableScheduledFuture</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> task) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 线程池已经关闭，调用拒绝执行处理器处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isShutdown</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(task);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 将任务加入到等待队列</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getQueue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(task);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 线程池已经关闭，且当前状态不能运行该任务，将该任务从等待队列移除并取消该任务</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isShutdown</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">canRunInCurrentRunState</span><span style="color:#24292E;">(task.</span><span style="color:#6F42C1;">isPeriodic</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(task))</span></span>
<span class="line"><span style="color:#24292E;">        task.</span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 增加一个worker，就算corePoolSize=0也要增加一个worker</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ensurePrestart</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>delayedExecute</code>方法的逻辑也很简单，主要就是将任务添加到等待队列，然后调用<code>ensurePrestart</code>方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ensurePrestart</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> wc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">workerCountOf</span><span style="color:#F6F6F4;">(ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (wc </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> corePoolSize)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">addWorker</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (wc </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">addWorker</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ensurePrestart</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> wc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">workerCountOf</span><span style="color:#24292E;">(ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (wc </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> corePoolSize)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addWorker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (wc </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addWorker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ensurePrestart</code>方法主要是调用了<code>addWorker</code>，线程池中的工作线程是通过该方法来启动并执行任务的。 具体可以查看前面讲的线程池章节。</p><p>对于<code>ScheduledThreadPoolExecutor</code>，<code>worker</code>添加到线程池后会在等待队列上等待获取任务，这点是和<code>ThreadPoolExecutor</code>一致的。<strong>但是worker是怎么从等待队列取定时任务的？</strong></p><p>因为<code>ScheduledThreadPoolExecutor</code>使用了<code>DelayedWorkQueue</code>保存等待的任务，该等待队列队首应该保存的是最近将要执行的任务，如果队首任务的开始执行时间还未到，<code>worker</code>也应该继续等待。</p><h2 id="delayedworkqueue" tabindex="-1">DelayedWorkQueue <a class="header-anchor" href="#delayedworkqueue" aria-label="Permalink to &quot;DelayedWorkQueue&quot;">​</a></h2><p><code>ScheduledThreadPoolExecutor</code>使用了<code>DelayedWorkQueue</code>保存等待的任务。</p><p>该等待队列队首应该保存的是<strong>最近将要执行的任务</strong>，所以<code>worker</code>只关心队首任务即可，如果队首任务的开始执行时间还未到，worker也应该继续等待。</p><p>DelayedWorkQueue是一个无界优先队列，使用数组存储，底层是使用堆结构来实现优先队列的功能。我们先看看DelayedWorkQueue的声明和成员变量：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">DelayedWorkQueue</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt;</span></span>
<span class="line"><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BlockingQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 队列初始容量</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> INITIAL_CAPACITY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 数组用来存储定时任务，通过数组实现堆排序</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;">[] queue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;">[INITIAL_CAPACITY];</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 当前在队首等待的线程</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> leader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 锁和监视器，用于leader线程</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReentrantLock</span><span style="color:#F6F6F4;"> lock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReentrantLock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Condition</span><span style="color:#F6F6F4;"> available </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lock.</span><span style="color:#62E884;">newCondition</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 其他代码，略</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DelayedWorkQueue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractQueue</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BlockingQueue</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 队列初始容量</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> INITIAL_CAPACITY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 数组用来存储定时任务，通过数组实现堆排序</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">RunnableScheduledFuture</span><span style="color:#24292E;">[] queue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">RunnableScheduledFuture</span><span style="color:#24292E;">[INITIAL_CAPACITY];</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 当前在队首等待的线程</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Thread leader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 锁和监视器，用于leader线程</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReentrantLock lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReentrantLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Condition available </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lock.</span><span style="color:#6F42C1;">newCondition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 其他代码，略</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当一个线程成为leader，它只要等待队首任务的delay时间即可，其他线程会无条件等待。leader取到任务返回前要通知其他线程，直到有线程成为新的leader。每当队首的定时任务被其他更早需要执行的任务替换时，leader设置为null，其他等待的线程（被当前leader通知）和当前的leader重新竞争成为leader。</p><p>同时，定义了锁lock和监视器available用于线程竞争成为leader。</p><p>当一个新的任务成为队首，或者需要有新的线程成为leader时，available监视器上的线程将会被通知，然后竞争成为leader线程。 有些类似于生产者-消费者模式。</p><p>接下来看看<code>DelayedWorkQueue</code>中几个比较重要的方法</p><h3 id="take" tabindex="-1">take <a class="header-anchor" href="#take" aria-label="Permalink to &quot;take&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">take</span><span style="color:#F6F6F4;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReentrantLock</span><span style="color:#F6F6F4;"> lock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.lock;</span></span>
<span class="line"><span style="color:#F6F6F4;">    lock.</span><span style="color:#62E884;">lockInterruptibly</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 取堆顶的任务，堆顶是最近要执行的任务</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;"> first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> queue[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 堆顶为空，线程要在条件available上等待</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (first </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">          available.</span><span style="color:#62E884;">await</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">// 堆顶任务还要多长时间才能执行</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> delay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first.</span><span style="color:#62E884;">getDelay</span><span style="color:#F6F6F4;">(TimeUnit.NANOSECONDS);</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">// 堆顶任务已经可以执行了，finishPoll会重新调整堆，使其满足最小堆特性，该方法设置任务在</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">// 堆中的index为-1并返回该任务</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (delay </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">finishPoll</span><span style="color:#F6F6F4;">(first);</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">// 如果leader不为空，说明已经有线程成为leader并等待堆顶任务</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">// 到达执行时间，此时，其他线程都需要在available条件上等待</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (leader </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            available.</span><span style="color:#62E884;">await</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// leader为空，当前线程成为新的leader</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> thisThread </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            leader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> thisThread;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;">// 当前线程已经成为leader了，只需要等待堆顶任务到达执行时间即可</span></span>
<span class="line"><span style="color:#F6F6F4;">              available.</span><span style="color:#62E884;">awaitNanos</span><span style="color:#F6F6F4;">(delay);</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;">// 返回堆顶元素之前将leader设置为空</span></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (leader </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> thisThread)</span></span>
<span class="line"><span style="color:#F6F6F4;">                leader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">          }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 通知其他在available条件等待的线程，这些线程可以去竞争成为新的leader</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (leader </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> queue[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        available.</span><span style="color:#62E884;">signal</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      lock.</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RunnableScheduledFuture </span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReentrantLock lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lock;</span></span>
<span class="line"><span style="color:#24292E;">    lock.</span><span style="color:#6F42C1;">lockInterruptibly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 取堆顶的任务，堆顶是最近要执行的任务</span></span>
<span class="line"><span style="color:#24292E;">        RunnableScheduledFuture first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> queue[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 堆顶为空，线程要在条件available上等待</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (first </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          available.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 堆顶任务还要多长时间才能执行</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> delay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first.</span><span style="color:#6F42C1;">getDelay</span><span style="color:#24292E;">(TimeUnit.NANOSECONDS);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 堆顶任务已经可以执行了，finishPoll会重新调整堆，使其满足最小堆特性，该方法设置任务在</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 堆中的index为-1并返回该任务</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (delay </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">finishPoll</span><span style="color:#24292E;">(first);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 如果leader不为空，说明已经有线程成为leader并等待堆顶任务</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 到达执行时间，此时，其他线程都需要在available条件上等待</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leader </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            available.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// leader为空，当前线程成为新的leader</span></span>
<span class="line"><span style="color:#24292E;">            Thread thisThread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            leader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisThread;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 当前线程已经成为leader了，只需要等待堆顶任务到达执行时间即可</span></span>
<span class="line"><span style="color:#24292E;">              available.</span><span style="color:#6F42C1;">awaitNanos</span><span style="color:#24292E;">(delay);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// 返回堆顶元素之前将leader设置为空</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> thisThread)</span></span>
<span class="line"><span style="color:#24292E;">                leader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 通知其他在available条件等待的线程，这些线程可以去竞争成为新的leader</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (leader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> queue[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        available.</span><span style="color:#6F42C1;">signal</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      lock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>take</code>方法是什么时候调用的呢？在线程池的章节中，介绍了<code>getTask</code>方法，工作线程会循环地从<code>workQueue</code>中取任务。但计划任务却不同，因为如果一旦<code>getTask</code>方法取出了任务就开始执行了，而这时可能还没有到执行的时间，所以在<code>take</code>方法中，要保证只有在到指定的执行时间的时候任务才可以被取走。</p><p>总结一下流程：</p><ol><li>如果堆顶元素为空，在available条件上等待。</li><li>如果堆顶任务的执行时间已到，将堆顶元素替换为堆的最后一个元素并调整堆使其满足<strong>最小堆</strong>特性，同时设置任务在堆中索引为-1，返回该任务。</li><li>如果leader不为空，说明已经有线程成为leader了，其他线程都要在available监视器上等待。</li><li>如果leader为空，当前线程成为新的leader，并等待直到堆顶任务执行时间到达。</li><li>take方法返回之前，将leader设置为空，并通知其他线程。</li></ol><p>再来说一下leader的作用，这里的leader是<strong>为了减少不必要的定时等待</strong>，当一个线程成为leader时，它只等待下一个节点的时间间隔，但其它线程无限期等待。 leader线程必须在从<code>take()</code>或<code>poll()</code>返回之前signal其它线程，除非其他线程成为了leader。</p><p>举例来说，如果没有leader，那么在执行take时，都要执行<code>available.awaitNanos(delay)</code>，假设当前线程执行了该段代码，这时还没有signal，第二个线程也执行了该段代码，则第二个线程也要被阻塞。但只有一个线程返回队首任务，其他的线程在<code>awaitNanos(delay)</code>之后，继续执行for循环，因为队首任务已经被返回了，所以这个时候的for循环拿到的队首任务是新的，又需要重新判断时间，又要继续阻塞。</p><p>所以，为了不让多个线程频繁的做无用的定时等待，这里增加了leader，如果leader不为空，则说明队列中第一个节点已经在等待出队，这时其它的线程会一直阻塞，减少了无用的阻塞（注意，在<code>finally</code>中调用了<code>signal()</code>来唤醒一个线程，而不是<code>signalAll()</code>）。</p><h3 id="offer" tabindex="-1">offer <a class="header-anchor" href="#offer" aria-label="Permalink to &quot;offer&quot;">​</a></h3><p>该方法往队列插入一个值，返回是否成功插入 。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">offer</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> x) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NullPointerException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">RunnableScheduledFuture</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (RunnableScheduledFuture)x;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReentrantLock</span><span style="color:#F6F6F4;"> lock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.lock;</span></span>
<span class="line"><span style="color:#F6F6F4;">    lock.</span><span style="color:#62E884;">lock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 队列元素已经大于等于数组的长度，需要扩容，新堆的容量是原来堆容量的1.5倍</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> queue.length)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">grow</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 堆中元素增加1</span></span>
<span class="line"><span style="color:#F6F6F4;">      size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 调整堆</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        queue[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">setIndex</span><span style="color:#F6F6F4;">(e, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">// 调整堆，使的满足最小堆，比较大小的方式就是上文提到的compareTo方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">siftUp</span><span style="color:#F6F6F4;">(i, e);</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (queue[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        leader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 通知其他在available条件上等待的线程，这些线程可以竞争成为新的leader</span></span>
<span class="line"><span style="color:#F6F6F4;">        available.</span><span style="color:#62E884;">signal</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      lock.</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">offer</span><span style="color:#24292E;">(Runnable x) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    RunnableScheduledFuture e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (RunnableScheduledFuture)x;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReentrantLock lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lock;</span></span>
<span class="line"><span style="color:#24292E;">    lock.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 队列元素已经大于等于数组的长度，需要扩容，新堆的容量是原来堆容量的1.5倍</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> queue.length)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">grow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 堆中元素增加1</span></span>
<span class="line"><span style="color:#24292E;">      size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 调整堆</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        queue[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setIndex</span><span style="color:#24292E;">(e, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 调整堆，使的满足最小堆，比较大小的方式就是上文提到的compareTo方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">siftUp</span><span style="color:#24292E;">(i, e);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (queue[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">        leader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通知其他在available条件上等待的线程，这些线程可以竞争成为新的leader</span></span>
<span class="line"><span style="color:#24292E;">        available.</span><span style="color:#6F42C1;">signal</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      lock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在堆中插入了一个节点，这个时候堆有可能不满足最小堆的定义，<code>siftUp</code>用于将堆调整为最小堆，这属于数据结构的基本内容，本文不做介绍。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>内部使用优化的DelayQueue来实现，由于使用队列来实现定时器，有出入队调整堆等操作，所以定时并不是非常非常精确。</p><hr><blockquote><p>内容大部分来源以下三个开源仓库：</p><ul><li><a href="http://concurrent.redspider.group/" target="_blank" rel="noreferrer">深入浅出 Java 多线程</a></li><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a></li><li><a href="https://github.com/CoderLeixiaoshuai/java-eight-part" target="_blank" rel="noreferrer">Java八股文</a></li></ul></blockquote><hr>`,87),t=[e];function c(r,y,F,i,E,d){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{C as __pageData,h as default};
