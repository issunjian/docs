import{_ as e,o,c as a,V as t}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端最新面试题，常见面试题及答案汇总.md","filePath":"interview/backend/前端/前端最新面试题，常见面试题及答案汇总.md"}'),r={name:"interview/backend/前端/前端最新面试题，常见面试题及答案汇总.md"},s=t('<h3 id="_1、display-none-与-visibility-hidden-的区别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1display%EF%BC%9Anone%EF%BC%9B%E4%B8%8E-visibility%EF%BC%9A-hidden-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">1、display：none；与 visibility： hidden 的区别是什么？</a> <a class="header-anchor" href="#_1、display-none-与-visibility-hidden-的区别是什么" aria-label="Permalink to &quot;[1、display：none；与 visibility： hidden 的区别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#1display：none；与-visibility：-hidden-的区别是什么)&quot;">​</a></h3><p>display：none； 使用该属性后，HTML 元素（对象）的宽度、高度等各种属性值都将“丢失”；</p><p>visibility：hidden； 使用该属性后，HTML 元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在，也即是说它仍具有高度、宽度等属性值。</p><h3 id="_2、jquery和zepto有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2jquery%E5%92%8Czepto%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、jquery和zepto有什么区别?</a> <a class="header-anchor" href="#_2、jquery和zepto有什么区别" aria-label="Permalink to &quot;[2、jquery和zepto有什么区别?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#2jquery和zepto有什么区别)&quot;">​</a></h3><p><strong>1、</strong> 针对移动端程序，Zepto有一些基本的触摸事件可以用来做触摸屏交互（tap事件、swipe事件），Zepto是不支持IE浏览器的，这不是Zepto的开发者Thomas Fucks在跨浏览器问题上犯了迷糊，而是经过了认真考虑后为了降低文件尺寸而做出的决定，就像jQuery的团队在2.0版中不再支持旧版的IE（6 7 8）一样。因为Zepto使用jQuery句法，所以它在文档中建议把jQuery作为IE上的后备库。那样程序仍能在IE中，而其他浏览器则能享受到Zepto在文件大小上的优势，然而它们两个的API不是完全兼容的，所以使用这种方法时一定要小心，并要做充分的测试。</p><p><strong>2、</strong> Dom操作的区别：添加id时jQuery不会生效而Zepto会生效。</p><p><strong>3、</strong> zepto主要用在移动设备上，只支持较新的浏览器，好处是代码量比较小，性能也较好。</p><p>jquery主要是兼容性好，可以跑在各种pc，移动上，好处是兼容各种浏览器，缺点是代码量大，同时考虑兼容，性能也不够好。</p><h3 id="_3、谈谈你对webpack的看法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9webpack%E7%9A%84%E7%9C%8B%E6%B3%95" target="_blank" rel="noreferrer">3、谈谈你对webpack的看法</a> <a class="header-anchor" href="#_3、谈谈你对webpack的看法" aria-label="Permalink to &quot;[3、谈谈你对webpack的看法](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#3谈谈你对webpack的看法)&quot;">​</a></h3><p><strong>1、</strong> <code>WebPack</code> 是一个模块打包工具，你可以使用<code>WebPack</code>管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包<code>Web</code>开发中所用到的<code>HTML</code>、<code>Javascript</code>、<code>CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，<code>webpack</code>有对应的模块加载器。<code>webpack</code>模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源</p><h3 id="_4、同步和异步的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">4、同步和异步的区别?</a> <a class="header-anchor" href="#_4、同步和异步的区别" aria-label="Permalink to &quot;[4、同步和异步的区别?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#4同步和异步的区别)&quot;">​</a></h3><p><strong>1、</strong> 同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作</p><p><strong>2、</strong> 异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容</p><h3 id="_5、行内元素和块级元素" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E5%92%8C%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0" target="_blank" rel="noreferrer">5、行内元素和块级元素</a> <a class="header-anchor" href="#_5、行内元素和块级元素" aria-label="Permalink to &quot;[5、行内元素和块级元素](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#5行内元素和块级元素)&quot;">​</a></h3><p><strong>行内元素（display: inline）</strong></p><p>宽度和高度是由内容决定，与其他元素共占一行的元素，我们将其叫行内元素，例如：<code>&lt;span&gt; 、 &lt;i&gt; 、 &lt;a&gt;</code>等</p><p><strong>块级元素（display: block)</strong></p><p>默认宽度由父容器决定，默认高度由内容决定，独占一行并且可以设置宽高的元素，我们将其叫做块级元素，例如：<code>&lt;p&gt; 、&lt;div&gt; 、&lt;ul&gt;等</code></p><p>在平时，我们经常使用CSS的display: inline-block，使它们拥有更多的状态</p><h3 id="_6、绝对定位和相对定位的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E5%92%8C%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、绝对定位和相对定位的区别</a> <a class="header-anchor" href="#_6、绝对定位和相对定位的区别" aria-label="Permalink to &quot;[6、绝对定位和相对定位的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#6绝对定位和相对定位的区别)&quot;">​</a></h3><p><strong>position: absolute</strong></p><p>绝对定位：是相对于元素最近的已定位的祖先元素</p><p><strong>position: relative</strong></p><p>相对定位：相对定位是相对于元素在文档中的初始位置</p><h3 id="_7、javascript原型-原型链-有什么特点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7javascript%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE--%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9" target="_blank" rel="noreferrer">7、JavaScript原型，原型链 ? 有什么特点？</a> <a class="header-anchor" href="#_7、javascript原型-原型链-有什么特点" aria-label="Permalink to &quot;[7、JavaScript原型，原型链 ? 有什么特点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#7javascript原型原型链--有什么特点)&quot;">​</a></h3><p><strong>1、</strong> 每个对象都会在其内部初始化一个属性，就是<code>prototype</code>(原型)，当我们访问一个对象的属性时</p><p><strong>2、</strong> 如果这个对象内部不存在这个属性，那么他就会去<code>prototype</code>里找这个属性，这<code>个prototype</code>又会有自己的<code>prototype</code>，于是就这样一直找下去，也就是我们平时所说的原型链的概念</p><p><strong>3、</strong> 关系：<code>instance.constructor.prototype = instance.__proto__</code></p><p><strong>特点：</strong></p><p><strong>1、</strong> <code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</p><p>2.当我们需要一个属性的时，<code>Javascript</code>引擎会先看当前对象中是否有这个属性， 如果没有的 就会查找他的<code>Prototype</code>对象是否有这个属性，如此递推下去，一直检索到 <code>Object</code> 内建对象</p><h3 id="_8、doctype有什么作用-标准模式与混杂模式如何区分-它们有何意义" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8doctype%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E6%84%8F%E4%B9%89" target="_blank" rel="noreferrer">8、DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?</a> <a class="header-anchor" href="#_8、doctype有什么作用-标准模式与混杂模式如何区分-它们有何意义" aria-label="Permalink to &quot;[8、DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#8doctype有什么作用标准模式与混杂模式如何区分它们有何意义)&quot;">​</a></h3><p>告诉浏览器使用哪个版本的HTML规范来渲染文档。DOCTYPE不存在或形式不正确会导致HTML文档以混杂模式呈现。</p><p>标准模式（Standards mode）以浏览器支持的最高标准运行；混杂模式（Quirks mode）中页面是一种比较宽松的向后兼容的方式显示。</p><h3 id="_9、display-none-与visibility-hidden-的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9display:-none;%E4%B8%8Evisibility:-hidden;%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、<code>display: none;</code>与<code>visibility: hidden;</code>的区别</a> <a class="header-anchor" href="#_9、display-none-与visibility-hidden-的区别" aria-label="Permalink to &quot;[9、`display: none;`与`visibility: hidden;`的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#9display:-none;与visibility:-hidden;的区别)&quot;">​</a></h3><p><strong>联系：它们都能让元素不可见</strong></p><p><strong>区别：</strong></p><p><strong>1、</strong> <code>display:none</code>;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility: hidden</code>;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</p><p><strong>2、</strong> <code>display: none</code>;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示<code>；visibility: hidden;</code>是继承属性，子孙节点消失由于继承了<code>hidden</code>，通过设置<code>visibility: visible;</code>可以让子孙节点显式</p><p><strong>3、</strong> 修改常规流中元素的<code>display</code>通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘。</p><p><strong>4、</strong> 读屏器不会读取<code>display: none</code>;元素内容；会读取<code>visibility: hidden;</code>元素内容</p><h3 id="_10、css3有哪些新特性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10css3%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B0%E7%89%B9%E6%80%A7" target="_blank" rel="noreferrer">10、css3有哪些新特性</a> <a class="header-anchor" href="#_10、css3有哪些新特性" aria-label="Permalink to &quot;[10、css3有哪些新特性](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新面试题，常见面试题及答案汇总.md#10css3有哪些新特性)&quot;">​</a></h3><p><strong>1、</strong> 新增各种<code>css</code>选择器</p><p><strong>2、</strong> 圆角 <code>border-radius</code></p><p><strong>3、</strong> 多列布局</p><p><strong>4、</strong> 阴影和反射</p><p><strong>5、</strong> 文字特效<code>text-shadow</code></p><p><strong>6、</strong> 线性渐变</p><p><strong>7、</strong> 旋转<code>transform</code></p><p><strong>CSS3新增伪类有那些？</strong></p><p><strong>1、</strong> <code>p:first-of-type</code> 选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code> 元素。</p><p><strong>2、</strong> <code>p:last-of-type</code> 选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个<code>&lt;p&gt;</code> 元素。</p><p><strong>3、</strong> <code>p:only-of-type</code> 选择属于其父元素唯一的 <code>&lt;p&gt;</code>元素的每个 <code>&lt;p&gt;</code> 元素。</p><p><strong>4、</strong> <code>p:only-child</code> 选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。</p><p><strong>5、</strong> <code>p:nth-child(2)</code> 选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。</p><p><strong>6、</strong> <code>:after</code> 在元素之前添加内容,也可以用来做清除浮动。</p><p><strong>7、</strong> <code>:before</code> 在元素之后添加内容</p><p><strong>8、</strong> <code>:enabled</code></p><p><strong>9、</strong> <code>:disabled</code> 控制表单控件的禁用状态。</p><p><strong>10、</strong> <code>:checked</code> 单选框或复选框被选中</p><h3 id="_11、开发中常用的指令有哪些" tabindex="-1">11、开发中常用的指令有哪些 <a class="header-anchor" href="#_11、开发中常用的指令有哪些" aria-label="Permalink to &quot;11、开发中常用的指令有哪些&quot;">​</a></h3><h3 id="_12、谈谈浮动和清除浮动" tabindex="-1">12、谈谈浮动和清除浮动 <a class="header-anchor" href="#_12、谈谈浮动和清除浮动" aria-label="Permalink to &quot;12、谈谈浮动和清除浮动&quot;">​</a></h3><h3 id="_13、知道的网页制作会用到的图片格式有哪些" tabindex="-1">13、知道的网页制作会用到的图片格式有哪些？ <a class="header-anchor" href="#_13、知道的网页制作会用到的图片格式有哪些" aria-label="Permalink to &quot;13、知道的网页制作会用到的图片格式有哪些？&quot;">​</a></h3><h3 id="_14、简述ajax执行流程" tabindex="-1">14、简述ajax执行流程 <a class="header-anchor" href="#_14、简述ajax执行流程" aria-label="Permalink to &quot;14、简述ajax执行流程&quot;">​</a></h3><h3 id="_15、拖放api-drag、drop" tabindex="-1">15、拖放API：drag、drop <a class="header-anchor" href="#_15、拖放api-drag、drop" aria-label="Permalink to &quot;15、拖放API：drag、drop&quot;">​</a></h3><h3 id="_16、websocket-如何兼容低版本浏览器" tabindex="-1">16、webSocket 如何兼容低版本浏览器？ <a class="header-anchor" href="#_16、websocket-如何兼容低版本浏览器" aria-label="Permalink to &quot;16、webSocket 如何兼容低版本浏览器？&quot;">​</a></h3><h3 id="_17、css优先级算法如何计算" tabindex="-1">17、CSS优先级算法如何计算？ <a class="header-anchor" href="#_17、css优先级算法如何计算" aria-label="Permalink to &quot;17、CSS优先级算法如何计算？&quot;">​</a></h3><h3 id="_18、css选择器有哪些-哪些属性可以继承" tabindex="-1">18、CSS选择器有哪些？哪些属性可以继承？ <a class="header-anchor" href="#_18、css选择器有哪些-哪些属性可以继承" aria-label="Permalink to &quot;18、CSS选择器有哪些？哪些属性可以继承？&quot;">​</a></h3><h3 id="_19、css新特性" tabindex="-1">19、CSS新特性 <a class="header-anchor" href="#_19、css新特性" aria-label="Permalink to &quot;19、CSS新特性&quot;">​</a></h3><h3 id="_20、-运算符能做什么" tabindex="-1">20、&amp;&amp; 运算符能做什么 <a class="header-anchor" href="#_20、-运算符能做什么" aria-label="Permalink to &quot;20、&amp;&amp; 运算符能做什么&quot;">​</a></h3><h3 id="_21、html语义化" tabindex="-1">21、HTML语义化 <a class="header-anchor" href="#_21、html语义化" aria-label="Permalink to &quot;21、HTML语义化&quot;">​</a></h3><h3 id="_22、html和xhtml有什么区别" tabindex="-1">22、html和xhtml有什么区别? <a class="header-anchor" href="#_22、html和xhtml有什么区别" aria-label="Permalink to &quot;22、html和xhtml有什么区别?&quot;">​</a></h3><h3 id="_23、你觉得jquery源码有哪些写的好的地方" tabindex="-1">23、你觉得jQuery源码有哪些写的好的地方 <a class="header-anchor" href="#_23、你觉得jquery源码有哪些写的好的地方" aria-label="Permalink to &quot;23、你觉得jQuery源码有哪些写的好的地方&quot;">​</a></h3><h3 id="_24、ajax请求方式有几种-8种" tabindex="-1">24、ajax请求方式有几种（8种）？ <a class="header-anchor" href="#_24、ajax请求方式有几种-8种" aria-label="Permalink to &quot;24、ajax请求方式有几种（8种）？&quot;">​</a></h3><h3 id="_25、什么是typescript" tabindex="-1">25、什么是typescript <a class="header-anchor" href="#_25、什么是typescript" aria-label="Permalink to &quot;25、什么是typescript&quot;">​</a></h3><h3 id="_26、box-sizing、transition、translate分别是什么" tabindex="-1">26、box-sizing、transition、translate分别是什么？ <a class="header-anchor" href="#_26、box-sizing、transition、translate分别是什么" aria-label="Permalink to &quot;26、box-sizing、transition、translate分别是什么？&quot;">​</a></h3><h3 id="_27、-运算符能做什么" tabindex="-1">27、!! 运算符能做什么？ <a class="header-anchor" href="#_27、-运算符能做什么" aria-label="Permalink to &quot;27、!! 运算符能做什么？&quot;">​</a></h3><h3 id="_28、什么是-event-target" tabindex="-1">28、什么是 event.target ？ <a class="header-anchor" href="#_28、什么是-event-target" aria-label="Permalink to &quot;28、什么是 event.target ？&quot;">​</a></h3><h3 id="_29、无样式内容闪烁-fouc-flash-of-unstyle-content" tabindex="-1">29、无样式内容闪烁（FOUC）Flash of Unstyle Content** <a class="header-anchor" href="#_29、无样式内容闪烁-fouc-flash-of-unstyle-content" aria-label="Permalink to &quot;29、无样式内容闪烁（FOUC）Flash of Unstyle Content**&quot;">​</a></h3><h3 id="_30、js引用方法" tabindex="-1">30、JS引用方法 <a class="header-anchor" href="#_30、js引用方法" aria-label="Permalink to &quot;30、JS引用方法&quot;">​</a></h3><h3 id="_31、javascript原型-原型链-有什么特点" tabindex="-1">31、JavaScript原型，原型链 ? 有什么特点？ <a class="header-anchor" href="#_31、javascript原型-原型链-有什么特点" aria-label="Permalink to &quot;31、JavaScript原型，原型链 ? 有什么特点？&quot;">​</a></h3>',81),d=[s];function n(i,E,c,l,p,h){return o(),a("div",null,d)}const b=e(r,[["render",n]]);export{B as __pageData,b as default};
