import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/90545c542bb7576f37d3e7d214d65ea2.aae4796d.png",o="/docs/assets/d8c828ba200687eb61e86a7c474bcaaa.29eacff0.png",e="/docs/assets/3b861901786b72335c400da1cd587007.01ad1339.png",t="/docs/assets/51dbf95c222354de4d9653a0ef270944.e42229e1.png",c="/docs/assets/5d7f479d69f7139d1ceb26ac27e2b19f.bbfa52ed.png",r="/docs/assets/5acb7ffa8c9856b6c5471632ae2e9ecf.df3aa87c.png",D=JSON.parse('{"title":"崩溃！我带的实习生竟然把图片直接存到了服务器上！","description":"","frontmatter":{"category":["Java企业级开发"],"tag":["Spring Boot"]},"headers":[],"relativePath":"backend/tobetter/springboot/oss.md","filePath":"backend/tobetter/springboot/oss.md"}'),y={name:"backend/tobetter/springboot/oss.md"},F=l('<h1 id="崩溃-我带的实习生竟然把图片直接存到了服务器上" tabindex="-1">崩溃！我带的实习生竟然把图片直接存到了服务器上！ <a class="header-anchor" href="#崩溃-我带的实习生竟然把图片直接存到了服务器上" aria-label="Permalink to &quot;崩溃！我带的实习生竟然把图片直接存到了服务器上！&quot;">​</a></h1><p>小二是新来的实习生，作为技术 leader，我给他安排了一个非常简单的练手任务，把前端 markdown 编辑器里上传的图片保存到服务器端，结果他真的就把图片直接保存到了服务器上，这下可把我气坏了，就不能搞个对象存储服务，比如说 OSS、MinIO？</p><p>他理直气壮地反驳道：“谁让你不讲清楚，我去找老板把你开掉！”我瞬间就怂了，说，“来来来，我手把手教你怎么把图片保存到 OSS 上，好不好？”</p><p>“不用了，还是我来教你吧。”小二非常自信，下面是他在 Spring Boot 应用中整合 OSS 做的记录。</p><p>特此声明：阿里云 OSS 的产品负责人看到后请自觉过来结算下推广费用（狗头）。真心讲：Spring Boot+OSS 在实际开发中挺常见的。</p><h3 id="一、开通-oss" tabindex="-1">一、开通 OSS <a class="header-anchor" href="#一、开通-oss" aria-label="Permalink to &quot;一、开通 OSS&quot;">​</a></h3><p>OSS 也就是 Object Storage Service，是阿里云提供的一套对象存储服务，国内的竞品还有七牛云的 Kodo和腾讯云的COS。</p><p>第一步，登录阿里云官网，搜索“OSS”关键字，进入 OSS 产品页。</p><p>第二步，如果是 OSS 新用户的话，可以享受 6 个月的新人专享优惠价，不过续费的时候还是会肉疼。</p><p>第三步，进入 OSS 管理控制台，点击「Bucket 列表」，点击「创建 Bucket」。</p><img src="'+p+`"><p>Bucket 的词面意思是桶，这里指存储空间，就是用于存储对象的容器。注意读写权限为“公共读”，也就是允许互联网用户访问云空间上的图片。</p><p>第四步，点击「确定」就算是开通成功了。</p><h3 id="二、整合-oss" tabindex="-1">二、整合 OSS <a class="header-anchor" href="#二、整合-oss" aria-label="Permalink to &quot;二、整合 OSS&quot;">​</a></h3><p>第一步，在 pom.xml 文件中添加 OSS 的依赖。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;!-- 阿里云 OSS --&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;3.10.2&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!-- 阿里云 OSS --&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;3.10.2&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>第二步，在 application.yml 文件中添加 OSS 配置项。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">aliyun:</span></span>
<span class="line"><span style="color:#f6f6f4;">  oss:</span></span>
<span class="line"><span style="color:#f6f6f4;">      # oss对外服务的访问域名</span></span>
<span class="line"><span style="color:#f6f6f4;">    endpoint: oss-cn-beijing.aliyuncs.com</span></span>
<span class="line"><span style="color:#f6f6f4;">      # 访问身份验证中用到用户标识</span></span>
<span class="line"><span style="color:#f6f6f4;">    accessKeyId: LTAI5</span></span>
<span class="line"><span style="color:#f6f6f4;">      # 用户用于加密签名字符串和oss用来验证签名字符串的密钥</span></span>
<span class="line"><span style="color:#f6f6f4;">    accessKeySecret: RYN</span></span>
<span class="line"><span style="color:#f6f6f4;">      # oss的存储空间</span></span>
<span class="line"><span style="color:#f6f6f4;">    bucketName: itwanger-oss1</span></span>
<span class="line"><span style="color:#f6f6f4;">      # 上传文件大小(M)</span></span>
<span class="line"><span style="color:#f6f6f4;">    maxSize: 3</span></span>
<span class="line"><span style="color:#f6f6f4;">      # 上传文件夹路径前缀</span></span>
<span class="line"><span style="color:#f6f6f4;">    dir:</span></span>
<span class="line"><span style="color:#f6f6f4;">      prefix: codingmore/images/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">aliyun:</span></span>
<span class="line"><span style="color:#24292e;">  oss:</span></span>
<span class="line"><span style="color:#24292e;">      # oss对外服务的访问域名</span></span>
<span class="line"><span style="color:#24292e;">    endpoint: oss-cn-beijing.aliyuncs.com</span></span>
<span class="line"><span style="color:#24292e;">      # 访问身份验证中用到用户标识</span></span>
<span class="line"><span style="color:#24292e;">    accessKeyId: LTAI5</span></span>
<span class="line"><span style="color:#24292e;">      # 用户用于加密签名字符串和oss用来验证签名字符串的密钥</span></span>
<span class="line"><span style="color:#24292e;">    accessKeySecret: RYN</span></span>
<span class="line"><span style="color:#24292e;">      # oss的存储空间</span></span>
<span class="line"><span style="color:#24292e;">    bucketName: itwanger-oss1</span></span>
<span class="line"><span style="color:#24292e;">      # 上传文件大小(M)</span></span>
<span class="line"><span style="color:#24292e;">    maxSize: 3</span></span>
<span class="line"><span style="color:#24292e;">      # 上传文件夹路径前缀</span></span>
<span class="line"><span style="color:#24292e;">    dir:</span></span>
<span class="line"><span style="color:#24292e;">      prefix: codingmore/images/</span></span></code></pre></div><p>第三步，新增 OssClientConfig.java 配置类，主要就是通过 @Value 注解从配置文件中获取配置项，然后创建 OSSClient。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OssClientConfig</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${aliyun.oss.endpoint}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> endpoint ;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${aliyun.oss.accessKeyId}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> accessKeyId ;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${aliyun.oss.accessKeySecret}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> accessKeySecret;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">OSSClient</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createOssClient</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (OSSClient)</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OSSClientBuilder</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">(endpoint, accessKeyId, accessKeySecret);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OssClientConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${aliyun.oss.endpoint}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    String endpoint ;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${aliyun.oss.accessKeyId}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    String accessKeyId ;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${aliyun.oss.accessKeySecret}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    String accessKeySecret;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> OSSClient </span><span style="color:#6F42C1;">createOssClient</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (OSSClient)</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OSSClientBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(endpoint, accessKeyId, accessKeySecret);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步，新增文件上传接口 OssController.java，参数为 MultipartFile。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Api</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">tags</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">上传</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/ossController</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OssController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOssService</span><span style="color:#F6F6F4;"> ossService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/upload</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">method</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiOperation</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">上传</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultObject</span><span style="color:#F6F6F4;">&lt;String&gt; </span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">MultipartFile</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">file</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">req</span><span style="color:#F6F6F4;">)  {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">success</span><span style="color:#F6F6F4;">(ossService.</span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(file));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Api</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;上传&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/ossController&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OssController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IOssService ossService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/upload&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">method</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;上传&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultObject&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file&quot;</span><span style="color:#24292E;">) MultipartFile </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, HttpServletRequest </span><span style="color:#E36209;">req</span><span style="color:#24292E;">)  {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(ossService.</span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(file));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步，新增 Service，将文件上传到 OSS，并返回文件保存路径。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OssServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOssService</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${aliyun.oss.maxSize}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> maxSize;</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${aliyun.oss.bucketName}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> bucketName;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${aliyun.oss.dir.prefix}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> dirPrefix;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">OSSClient</span><span style="color:#F6F6F4;"> ossClient;   </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">MultipartFile</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">file</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(file.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(), file.</span><span style="color:#62E884;">getOriginalFilename</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            LOGGER.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">inputStream</span><span style="color:#F6F6F4;">,</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> objectName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getBucketName</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建PutObject请求。</span></span>
<span class="line"><span style="color:#F6F6F4;">        ossClient.</span><span style="color:#62E884;">putObject</span><span style="color:#F6F6F4;">(bucketName, objectName, inputStream);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">formatPath</span><span style="color:#F6F6F4;">(objectName);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getBucketName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> ext </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> extItem</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">imageExtension){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(url.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(extItem) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">                ext </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> extItem;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> dirPrefix</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">today</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> IdUtil.</span><span style="color:#62E884;">randomUUID</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">ext;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">formatPath</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">objectName</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">bucketName</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> ossClient.</span><span style="color:#62E884;">getEndpoint</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getHost</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> objectName;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OssServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IOssService</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${aliyun.oss.maxSize}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maxSize;</span></span>
<span class="line"><span style="color:#24292E;">   </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${aliyun.oss.bucketName}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String bucketName;</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${aliyun.oss.dir.prefix}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String dirPrefix;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> OSSClient ossClient;   </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(MultipartFile </span><span style="color:#E36209;">file</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(file.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(), file.</span><span style="color:#6F42C1;">getOriginalFilename</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            LOGGER.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(InputStream </span><span style="color:#E36209;">inputStream</span><span style="color:#24292E;">,String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String objectName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBucketName</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建PutObject请求。</span></span>
<span class="line"><span style="color:#24292E;">        ossClient.</span><span style="color:#6F42C1;">putObject</span><span style="color:#24292E;">(bucketName, objectName, inputStream);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">formatPath</span><span style="color:#24292E;">(objectName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getBucketName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">url</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        String ext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(String extItem</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">imageExtension){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(url.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(extItem) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                ext </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> extItem;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dirPrefix</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">today</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> IdUtil.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">ext;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">formatPath</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">objectName</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://&quot;</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">bucketName</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ossClient.</span><span style="color:#6F42C1;">getEndpoint</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHost</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> objectName;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第六步，打开 Apipost，测试 OSS 上传接口，注意参数选择文件，点击发送后可以看到服务器端返回的图片链接。</p><img src="`+o+'"><p>第七步，进入阿里云 OSS 后台管理，可以确认图片确实已经上传成功。</p><img src="'+e+'"><h3 id="三、拉取前端代码来测试-oss-上传接口" tabindex="-1">三、拉取前端代码来测试 OSS 上传接口 <a class="header-anchor" href="#三、拉取前端代码来测试-oss-上传接口" aria-label="Permalink to &quot;三、拉取前端代码来测试 OSS 上传接口&quot;">​</a></h3><p>codingmore-admin-web 是编程喵（Codingmore）的前端管理项目，可以通过下面的地址拉取到本地。</p><blockquote><p><a href="https://github.com/itwanger/codingmore-admin-web" target="_blank" rel="noreferrer">https://github.com/itwanger/codingmore-admin-web</a></p></blockquote><p>执行 <code>yarn run dev</code> 命令后就可以启动 Web 管理端了，进入到文章编辑页面，选择一张图片进行上传，可以确认图片是可以正常从前端上传到服务器端，服务器端再上传到 OSS，之后再返回前端图片访问链接的。</p><img src="'+t+`"><h3 id="四、利用-oss-进行自动转链" tabindex="-1">四、利用 OSS 进行自动转链 <a class="header-anchor" href="#四、利用-oss-进行自动转链" aria-label="Permalink to &quot;四、利用 OSS 进行自动转链&quot;">​</a></h3><p>第一步，在 PostsServiceImpl.java 中添加图片转链的方法，主要利用正则表达式找出文章内容中的外链，然后将外链的图片上传到 OSS，然后再替换掉原来的外链图片。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 匹配图片的 markdown 语法</span></span>
<span class="line"><span style="color:#7B7F8B;">// ![](hhhx.png&quot;&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">// ![xx](hhhx.png?ax)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> IMG_PATTERN </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">!</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">[.*</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">]</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">((.*)</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleContentImg</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Posts</span><span style="color:#F6F6F4;"> posts) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> content </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> posts.</span><span style="color:#62E884;">getPostContent</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Pattern</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Pattern.</span><span style="color:#62E884;">compile</span><span style="color:#F6F6F4;">(IMG_PATTERN, Pattern.CASE_INSENSITIVE);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Matcher</span><span style="color:#F6F6F4;"> m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.</span><span style="color:#62E884;">matcher</span><span style="color:#F6F6F4;">(content);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;String&gt;&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (m.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> imageTag </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> m.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">使用分组进行替换{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, imageTag);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> imageUrl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> imageTag.</span><span style="color:#62E884;">substring</span><span style="color:#F6F6F4;">(imageTag.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, imageTag.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 确认是本站链接，不处理</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (imageUrl.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(iOssService.</span><span style="color:#62E884;">getEndPoint</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">continue</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 通过线程池将图片上传到 OSS</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;String&gt; future </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ossUploadImageExecutor.</span><span style="color:#62E884;">submit</span><span style="color:#F6F6F4;">(() </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> iOssService.</span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(imageUrl);</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(imageUrl, future);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> oldUrl </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">keySet</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;String&gt; future </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(oldUrl);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> imageUrl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> future.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">           content </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> content.</span><span style="color:#62E884;">replace</span><span style="color:#F6F6F4;">(oldUrl, imageUrl);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">ExecutionException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            LOGGER.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">获取图片链接出错{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    posts.</span><span style="color:#62E884;">setPostContent</span><span style="color:#F6F6F4;">(content);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 匹配图片的 markdown 语法</span></span>
<span class="line"><span style="color:#6A737D;">// ![](hhhx.png&quot;&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// ![xx](hhhx.png?ax)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String IMG_PATTERN </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">!</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">[.*</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">((.*)</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleContentImg</span><span style="color:#24292E;">(Posts posts) {</span></span>
<span class="line"><span style="color:#24292E;">    String content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> posts.</span><span style="color:#6F42C1;">getPostContent</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Pattern p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(IMG_PATTERN, Pattern.CASE_INSENSITIVE);</span></span>
<span class="line"><span style="color:#24292E;">    Matcher m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(content);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, Future&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (m.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        String imageTag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;使用分组进行替换{}&quot;</span><span style="color:#24292E;">, imageTag);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        String imageUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> imageTag.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(imageTag.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, imageTag.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 确认是本站链接，不处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (imageUrl.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(iOssService.</span><span style="color:#6F42C1;">getEndPoint</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过线程池将图片上传到 OSS</span></span>
<span class="line"><span style="color:#24292E;">        Future&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ossUploadImageExecutor.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> iOssService.</span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(imageUrl);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(imageUrl, future);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String oldUrl </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        Future&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(oldUrl);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           String imageUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">           content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> content.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(oldUrl, imageUrl);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException | ExecutionException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            LOGGER.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;获取图片链接出错{}&quot;</span><span style="color:#24292E;">, e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    posts.</span><span style="color:#6F42C1;">setPostContent</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步，在 OssServiceImpl.java 中添加根据外链地址上传图片到 OSS 的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">upload</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> url) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> objectName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getFileName</span><span style="color:#F6F6F4;">(url);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> inputStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URL</span><span style="color:#F6F6F4;">(url).</span><span style="color:#62E884;">openStream</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        ossClient.</span><span style="color:#62E884;">putObject</span><span style="color:#F6F6F4;">(bucketName, objectName, inputStream);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        LOGGER.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">formatOSSPath</span><span style="color:#F6F6F4;">(objectName);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">upload</span><span style="color:#24292E;">(String url) {</span></span>
<span class="line"><span style="color:#24292E;">    String objectName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFileName</span><span style="color:#24292E;">(url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(url).</span><span style="color:#6F42C1;">openStream</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        ossClient.</span><span style="color:#6F42C1;">putObject</span><span style="color:#24292E;">(bucketName, objectName, inputStream);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        LOGGER.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">formatOSSPath</span><span style="color:#24292E;">(objectName);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步，通过 Web 管理端来测试外链是否转链成功。先找两张外链的图片，可以看到 markdown 在预览的时候就不显示。</p><img src="`+c+'"><p>然后我们点击发布，可以看到两张图片都正常显示了，因为转成了 OSS 的图片访问地址。</p><img src="'+r+'"><h3 id="五、小结" tabindex="-1">五、小结 <a class="header-anchor" href="#五、小结" aria-label="Permalink to &quot;五、小结&quot;">​</a></h3><p>综上来看，实习生小二在 Spring Boot 中整合 OSS 的代码还是挺靠谱的。也许 OSS+CDN 才是图床的最好解决方案，不过<a href="https://mp.weixin.qq.com/s/VRmXn2_71yy3w-SvKTs1Fg" target="_blank" rel="noreferrer">阿里云的 HTTPS CDN 在 GitHub 上无法回源</a>导致图片不显示的问题仍然没有得到有效的解决。</p><p>需要源码的小伙伴可以直接到编程喵🐱源码路径拉取：</p><blockquote><p><a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></p></blockquote><hr>',47),i=[F];function E(u,g,d,f,C,S){return n(),a("div",null,i)}const b=s(y,[["render",E]]);export{D as __pageData,b as default};
