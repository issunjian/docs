import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/guava-01.d18a5471.png",o="/docs/assets/guava-20230329172935.26ed75e1.png",e="/docs/assets/guava-4b962b06-a626-4707-9fe9-f5729536d9c5.5e03202b.jpg",t="/docs/assets/guava-03.ebe99884.png",h=JSON.parse('{"title":"Guava：Google开源的Java工具库，太强大了","description":"描述：本文详细介绍了Google开源的Java工具库Guava，阐述了它在简化Java编程中的实际应用和优势。通过具体的代码示例，展示了如何使用Guava解决字符串处理、集合操作、缓存等常见问题。学习Guava的技巧，让您在Java编程中更加轻松、高效，享受编程的乐趣。","frontmatter":{"title":"Guava：Google开源的Java工具库，太强大了","shortTitle":"Guava工具库","category":["Java核心"],"tag":["常用工具类"],"description":"描述：本文详细介绍了Google开源的Java工具库Guava，阐述了它在简化Java编程中的实际应用和优势。通过具体的代码示例，展示了如何使用Guava解决字符串处理、集合操作、缓存等常见问题。学习Guava的技巧，让您在Java编程中更加轻松、高效，享受编程的乐趣。","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java进阶之路,Java入门,教程,java,Guava,java guava,google guava"}]]},"headers":[],"relativePath":"backend/tobetter/common-tool/guava.md","filePath":"backend/tobetter/common-tool/guava.md"}'),c={name:"backend/tobetter/common-tool/guava.md"},r=l('<h1 id="_9-7-guava工具库" tabindex="-1">9.7 Guava工具库 <a class="header-anchor" href="#_9-7-guava工具库" aria-label="Permalink to &quot;9.7 Guava工具库&quot;">​</a></h1><h3 id="_01、前世今生" tabindex="-1">01、前世今生 <a class="header-anchor" href="#_01、前世今生" aria-label="Permalink to &quot;01、前世今生&quot;">​</a></h3><p>你好呀，我是 Guava。</p><p>我由 Google 公司开源，目前在 GitHub 上已经有 39.9k 的铁粉了，由此可以证明我的受欢迎程度。</p><img src="'+p+`"><p>我的身体里主要包含有这些常用的模块：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等。新版的 JDK 中已经直接把我引入了，可想而知我有多优秀，忍不住骄傲了。</p><p>这么说吧，学好如何使用我，能让你在编程中变得更快乐，写出更优雅的代码！</p><h3 id="_02、引入-guava" tabindex="-1">02、引入 Guava <a class="header-anchor" href="#_02、引入-guava" aria-label="Permalink to &quot;02、引入 Guava&quot;">​</a></h3><p>如果你要在 Maven 项目使用我的话，需要先在 pom.xml 文件中引入我的依赖。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;guava&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;30.1-jre&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;guava&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;30.1-jre&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>一点要求，JDK 版本需要在 8 以上。</p><h3 id="_03、基本工具" tabindex="-1">03、基本工具 <a class="header-anchor" href="#_03、基本工具" aria-label="Permalink to &quot;03、基本工具&quot;">​</a></h3><p>Doug Lea，java.util.concurrent 包的作者，曾说过一句话：“<a href="https://tobebetterjavaer.com/exception/npe.html" target="_blank" rel="noreferrer">null 真糟糕</a>”。Tony Hoare，图灵奖得主、快速排序算法的作者，当然也是 null 的创建者，也曾说过类似的话：“null 的使用，让我损失了十亿美元。”鉴于此，我用 Optional 来表示可能为 null 的对象。</p><img src="`+o+`"><p>代码示例如下所示。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;Integer&gt; possible </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">possible.</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// returns true</span></span>
<span class="line"><span style="color:#F6F6F4;">possible.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// returns 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; possible </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">possible.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// returns true</span></span>
<span class="line"><span style="color:#24292E;">possible.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// returns 5</span></span></code></pre></div><p>我大哥 Java 在 JDK 8 中新增了 <a href="https://tobebetterjavaer.com/java8/optional.html" target="_blank" rel="noreferrer">Optional 类</a>，显然是从我这借鉴过去的，不过他的和我的有些不同。</p><ul><li>我的 Optional 是 abstract 的，意味着我可以有子类对象；我大哥的是 final 的，意味着没有子类对象。</li><li>我的 Optional 实现了 Serializable 接口，可以序列化；我大哥的没有。</li><li>我的一些方法和我大哥的也不尽相同。</li></ul><p>使用 Optional 除了赋予 null 语义，增加了可读性，最大的优点在于它是一种傻瓜式的防护。Optional 迫使你积极思考引用缺失的情况，因为你必须显式地从 Optional 获取引用。</p><p>除了 Optional 之外，我还提供了：</p><ul><li>参数校验</li><li>常见的 Object 方法，比如说 Objects.equals、Objects.hashCode，JDK 7 引入的 Objects 类提供同样的方法，当然也是从我这借鉴的灵感。</li><li>更强大的比较器</li></ul><h3 id="_04、集合" tabindex="-1">04、集合 <a class="header-anchor" href="#_04、集合" aria-label="Permalink to &quot;04、集合&quot;">​</a></h3><p>首先我来说一下，为什么需要不可变集合。</p><ul><li>保证线程安全。在并发程序中，使用不可变集合既保证线程的安全性，也大大地增强了并发时的效率（跟并发锁方式相比）。</li><li>如果一个对象不需要支持修改操作，不可变的集合将会节省空间和时间的开销。</li><li>可以当作一个常量来对待，并且集合中的对象在以后也不会被改变。</li></ul><p>与 JDK 中提供的不可变集合相比，我提供的 Immutable 才是真正的不可变，我为什么这么说呢？来看下面这个示例。</p><p>下面的代码利用 JDK 的 <a href="https://tobebetterjavaer.com/common-tool/collections.html" target="_blank" rel="noreferrer"><code>Collections.unmodifiableList(list)</code></a> 得到一个不可修改的集合 unmodifiableList。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayList</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">雷军</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">乔布斯</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> unmodifiableList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">unmodifiableList</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#F6F6F4;">unmodifiableList.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">马云</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;雷军&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;乔布斯&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">List unmodifiableList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">unmodifiableList</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">unmodifiableList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;马云&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>运行代码将会出现以下异常：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span>
<span class="line"><span style="color:#f6f6f4;">	at java.base/java.util.Collections$UnmodifiableCollection.add(Collections.java:1060)</span></span>
<span class="line"><span style="color:#f6f6f4;">	at com.itwanger.guava.NullTest.main(NullTest.java:29)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span>
<span class="line"><span style="color:#24292e;">	at java.base/java.util.Collections$UnmodifiableCollection.add(Collections.java:1060)</span></span>
<span class="line"><span style="color:#24292e;">	at com.itwanger.guava.NullTest.main(NullTest.java:29)</span></span></code></pre></div><p>很好，执行 <code>unmodifiableList.add()</code> 的时候抛出了 UnsupportedOperationException 异常，说明 <code>Collections.unmodifiableList()</code> 返回了一个不可变集合。但真的是这样吗？</p><p>你可以把 <code>unmodifiableList.add()</code> 换成 <code>list.add()</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayList</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">雷军</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">乔布斯</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> unmodifiableList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">unmodifiableList</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">马云</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;雷军&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;乔布斯&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">List unmodifiableList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">unmodifiableList</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;马云&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>再次执行的话，程序并没有报错，并且你会发现 unmodifiableList 中真的多了一个元素。说明什么呢？</p><p><code>Collections.unmodifiableList(…)</code> 实现的不是真正的不可变集合，当原始集合被修改后，不可变集合里面的元素也是跟着发生变化。</p><p>我就不会犯这种错，来看下面的代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; stringArrayList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">雷军</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">乔布斯</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ImmutableList</span><span style="color:#F6F6F4;">&lt;String&gt; immutableList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ImmutableList.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(stringArrayList);</span></span>
<span class="line"><span style="color:#F6F6F4;">immutableList.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">马云</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stringArrayList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;雷军&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;乔布斯&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">ImmutableList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; immutableList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ImmutableList.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(stringArrayList);</span></span>
<span class="line"><span style="color:#24292E;">immutableList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;马云&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>尝试 <code>immutableList.add()</code> 的时候会抛出 <code>UnsupportedOperationException</code>。我在源码中已经把 <code>add()</code> 方法废弃了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">  * Guaranteed to throw an exception and leave the collection unmodified.</span></span>
<span class="line"><span style="color:#7B7F8B;">  *</span></span>
<span class="line"><span style="color:#7B7F8B;">  * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">UnsupportedOperationException</span><span style="color:#7B7F8B;"> always</span></span>
<span class="line"><span style="color:#7B7F8B;">  * </span><span style="color:#F286C4;">@deprecated</span><span style="color:#7B7F8B;"> Unsupported operation.</span></span>
<span class="line"><span style="color:#7B7F8B;">  */</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">CanIgnoreReturnValue</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Deprecated</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">UnsupportedOperationException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">  * Guaranteed to throw an exception and leave the collection unmodified.</span></span>
<span class="line"><span style="color:#6A737D;">  *</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#6A737D;"> always</span></span>
<span class="line"><span style="color:#6A737D;">  * </span><span style="color:#D73A49;">@deprecated</span><span style="color:#6A737D;"> Unsupported operation.</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CanIgnoreReturnValue</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Deprecated</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnsupportedOperationException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>尝试 <code>stringArrayList.add()</code> 修改原集合的时候 immutableList 并不会因此而发生改变。</p><p>除了不可变集合以外，我还提供了新的集合类型，比如说：</p><ul><li>Multiset，可以多次添加相等的元素。当把 Multiset 看成普通的 Collection 时，它表现得就像无序的 ArrayList；当把 Multiset 看作 <code>Map&lt;E, Integer&gt;</code> 时，它也提供了符合性能期望的查询操作。</li><li>Multimap，可以很容易地把一个键映射到多个值。</li><li>BiMap，一种特殊的 Map，可以用 <code>inverse()</code> 反转 <code>BiMap&lt;K, V&gt;</code> 的键值映射；保证值是唯一的，因此 <code>values()</code> 返回 Set 而不是普通的 Collection。</li></ul><h3 id="_05、字符串处理" tabindex="-1">05、字符串处理 <a class="header-anchor" href="#_05、字符串处理" aria-label="Permalink to &quot;05、字符串处理&quot;">​</a></h3><p>字符串表示字符的不可变序列，创建后就不能更改。在我们日常的工作中，字符串的使用非常频繁，熟练的对其操作可以极大的提升我们的工作效率。</p><p>我提供了连接器——Joiner，可以用分隔符把字符串序列连接起来。下面的代码将会返回“雷军; 乔布斯”，你可以使用 <code>useForNull(String)</code> 方法用某个字符串来替换 null，而不像 <code>skipNulls()</code> 方法那样直接忽略 null。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Joiner</span><span style="color:#F6F6F4;"> joiner </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Joiner.</span><span style="color:#62E884;">on</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">; </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">skipNulls</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> joiner.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">雷军</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">乔布斯</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Joiner joiner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Joiner.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;; &quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">skipNulls</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> joiner.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;雷军&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;乔布斯&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>我还提供了拆分器—— Splitter，可以按照指定的分隔符把字符串序列进行拆分。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Splitter.</span><span style="color:#62E884;">on</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">trimResults</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">omitEmptyStrings</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">雷军,乔布斯,,   沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Splitter.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">trimResults</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">omitEmptyStrings</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;雷军,乔布斯,,   沉默王二&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_06、缓存" tabindex="-1">06、缓存 <a class="header-anchor" href="#_06、缓存" aria-label="Permalink to &quot;06、缓存&quot;">​</a></h3><p>缓存在很多场景下都是相当有用的。你应该知道，检索一个值的代价很高，尤其是需要不止一次获取值的时候，就应当考虑使用缓存。</p><p>我提供的 Cache 和 ConcurrentMap 很相似，但也不完全一样。最基本的区别是 ConcurrentMap 会一直保存所有添加的元素，直到显式地移除。相对地，我提供的 Cache 为了限制内存占用，通常都设定为自动回收元素。</p><p>如果你愿意消耗一些内存空间来提升速度，你能预料到某些键会被查询一次以上，缓存中存放的数据总量不会超出内存容量，就可以使用 Cache。</p><p>来个示例你感受下吧。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testCache</span><span style="color:#F6F6F4;">() throws ExecutionException, InterruptedException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">CacheLoader</span><span style="color:#F6F6F4;"> cacheLoader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CacheLoader</span><span style="color:#F6F6F4;">&lt;String, Animal&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果找不到元素，会调用这里</span></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Animal</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">load</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">LoadingCache</span><span style="color:#F6F6F4;">&lt;String, Animal&gt; loadingCache </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CacheBuilder.</span><span style="color:#62E884;">newBuilder</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">maximumSize</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 容量</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">expireAfterWrite</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, TimeUnit.SECONDS) </span><span style="color:#7B7F8B;">// 过期时间</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">removalListener</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyRemovalListener</span><span style="color:#F6F6F4;">()) </span><span style="color:#7B7F8B;">// 失效监听器</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">(cacheLoader); </span><span style="color:#7B7F8B;">//</span></span>
<span class="line"><span style="color:#F6F6F4;">    loadingCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">狗</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Animal</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">旺财</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    loadingCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">猫</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Animal</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">汤姆</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    loadingCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">狼</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Animal</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">灰太狼</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    loadingCache.</span><span style="color:#62E884;">invalidate</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">猫</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 手动失效</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Animal</span><span style="color:#F6F6F4;"> animal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> loadingCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">狼</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(animal);</span></span>
<span class="line"><span style="color:#F6F6F4;">    Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 狼已经自动过去，获取为 null 值报错</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(loadingCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">狼</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 缓存移除监听器</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyRemovalListener</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RemovalListener</span><span style="color:#F6F6F4;">&lt;String, Animal&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onRemoval</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">RemovalNotification</span><span style="color:#F6F6F4;">&lt;String, Animal&gt; </span><span style="color:#FFB86C;font-style:italic;">notification</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> reason </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key=%s,value=%s,reason=%s</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, notification.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">(), notification.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">(), notification.</span><span style="color:#62E884;">getCause</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(reason);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Animal</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Animal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCache</span><span style="color:#24292E;">() throws ExecutionException, InterruptedException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    CacheLoader cacheLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> CacheLoader&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Animal</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果找不到元素，会调用这里</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Animal </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">s</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    LoadingCache&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Animal</span><span style="color:#24292E;">&gt; loadingCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheBuilder.</span><span style="color:#6F42C1;">newBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">maximumSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 容量</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">expireAfterWrite</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, TimeUnit.SECONDS) </span><span style="color:#6A737D;">// 过期时间</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">removalListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRemovalListener</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 失效监听器</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(cacheLoader); </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">    loadingCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狗&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;旺财&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    loadingCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;猫&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;汤姆&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    loadingCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狼&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;灰太狼&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    loadingCache.</span><span style="color:#6F42C1;">invalidate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;猫&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 手动失效</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Animal animal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loadingCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狼&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(animal);</span></span>
<span class="line"><span style="color:#24292E;">    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 狼已经自动过去，获取为 null 值报错</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(loadingCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;狼&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 缓存移除监听器</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRemovalListener</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RemovalListener</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Animal</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onRemoval</span><span style="color:#24292E;">(RemovalNotification&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Animal</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">notification</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String reason </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key=%s,value=%s,reason=%s&quot;</span><span style="color:#24292E;">, notification.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), notification.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(), notification.</span><span style="color:#6F42C1;">getCause</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(reason);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animal</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, Integer </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>CacheLoader 中重写了 load 方法，这个方法会在查询缓存没有命中时被调用，我这里直接返回了 null，其实这样会在没有命中时抛出 CacheLoader returned null for key 异常信息。</p><p>MyRemovalListener 作为缓存元素失效时的监听类，在有元素缓存失效时会自动调用 onRemoval 方法，这里需要注意的是这个方法是同步方法，如果这里耗时较长，会阻塞直到处理完成。</p><p>LoadingCache 就是缓存的主要操作对象了，常用的就是其中的 put 和 get 方法了。</p><h3 id="_07、集合工具" tabindex="-1">07、集合工具 <a class="header-anchor" href="#_07、集合工具" aria-label="Permalink to &quot;07、集合工具&quot;">​</a></h3><p><code>com.google.common.collect</code>包下的集合工具：<code>Lists</code>也非常强大。</p><h4 id="创建空集合" tabindex="-1">创建空集合 <a class="header-anchor" href="#创建空集合" aria-label="Permalink to &quot;创建空集合&quot;">​</a></h4><p>有时候，我们想创建一个空集合。这时可以用Lists的<code>newArrayList</code>方法，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="快速初始化集合" tabindex="-1">快速初始化集合 <a class="header-anchor" href="#快速初始化集合" aria-label="Permalink to &quot;快速初始化集合&quot;">​</a></h4><p>有时候，我们想给一个集合中初始化一些元素。这时可以用Lists的newArrayList方法，例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span></code></pre></div><p>执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre></div><h4 id="笛卡尔积" tabindex="-1">笛卡尔积 <a class="header-anchor" href="#笛卡尔积" aria-label="Permalink to &quot;笛卡尔积&quot;">​</a></h4><p>如果你想将两个集合做<code>笛卡尔积</code>，Lists的<code>cartesianProduct</code>方法可以帮你实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt;&gt; productList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">cartesianProduct</span><span style="color:#F6F6F4;">(list1,list2);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(productList);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; productList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">cartesianProduct</span><span style="color:#24292E;">(list1,list2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(productList);</span></span></code></pre></div><p>执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]]</span></span></code></pre></div><h4 id="分页" tabindex="-1">分页 <a class="header-anchor" href="#分页" aria-label="Permalink to &quot;分页&quot;">​</a></h4><p>如果你想将一个<code>大集合</code>分成若干个<code>小集合</code>，可以使用Lists的<code>partition</code>方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt;&gt; partitionList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">partition</span><span style="color:#F6F6F4;">(list, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(partitionList);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;&gt; partitionList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(list, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(partitionList);</span></span></code></pre></div><p>执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]]</span></span></code></pre></div><p>这个例子中，list有5条数据，我将list集合按大小为2，分成了3页，即变成3个小集合。</p><p>这个是我最喜欢的方法之一，经常在项目中使用。</p><p>比如有个需求：现在有5000个id，需要调用批量用户查询接口，查出用户数据。但如果你直接查5000个用户，单次接口响应时间可能会非常慢。如果改成分页处理，每次只查500个用户，异步调用10次接口，就不会有单次接口响应慢的问题。</p><h4 id="流处理" tabindex="-1">流处理 <a class="header-anchor" href="#流处理" aria-label="Permalink to &quot;流处理&quot;">​</a></h4><p>如果我们想把某个集合转换成另外一个接口，可以使用Lists的 <code>transform</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; transformList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">transform</span><span style="color:#F6F6F4;">(list, x </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> x.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(transformList);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; transformList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(list, x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(transformList);</span></span></code></pre></div><p>将小写字母转换成了大写字母。</p><h4 id="颠倒顺序" tabindex="-1">颠倒顺序 <a class="header-anchor" href="#颠倒顺序" aria-label="Permalink to &quot;颠倒顺序&quot;">​</a></h4><p>Lists的有颠倒顺序的方法<code>reverse</code>。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">newArrayList</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; reverseList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Lists.</span><span style="color:#62E884;">reverse</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(reverseList);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">newArrayList</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; reverseList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Lists.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(reverseList);</span></span></code></pre></div><p>执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre></div><p>list的原始顺序是312，使用<code>reverse</code>方法颠倒顺序之后，变成了213。</p><p>Lists还有其他的好用的工具，我在这里只是抛砖引玉，有兴趣的小伙伴，可以仔细研究一下。</p><img src="`+e+'"><h3 id="_08、尾声" tabindex="-1">08、尾声 <a class="header-anchor" href="#_08、尾声" aria-label="Permalink to &quot;08、尾声&quot;">​</a></h3><p>上面介绍了我认为最常用的功能，作为 Google 公司开源的 Java 开发核心库，个人觉得实用性还是很高的（不然呢？嘿嘿嘿）。引入到你的项目后不仅能快速的实现一些开发中常用的功能，而且还可以让代码更加的优雅简洁。</p><p>我觉得适用于每一个 Java 项目，至于其他的一些功能，比如说散列、事件总线、数学运算、反射，就等待你去发掘了。</p><img src="'+t+'"><hr>',96),y=[r];function i(F,E,d,u,g,C){return a(),n("div",null,y)}const m=s(c,[["render",i]]);export{h as __pageData,m as default};
