import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/quartz-39e31fbf-5546-4627-9d49-651beeb961c1.1f921e06.png",o="/docs/assets/quartz-573fa3b6-551b-418d-9616-3066bb4f75d2.2f16127f.png",e="/docs/assets/quartz-ea2d0b63-4b99-4654-a03d-45023a741e88.bab35c94.png",t="/docs/assets/quartz-407d9133-7487-444e-83dd-d11524bfd748.6aace008.png",c="/docs/assets/quartz-277dc414-4d2d-4a68-91d5-10332998c8bf.8bbfa440.png",r="/docs/assets/quartz-12f8b138-33db-4faa-b31f-1d1b3fa5afe9.1a371883.png",y="/docs/assets/quartz-0acacdc6-3cf3-4042-a784-388bb10f0368.615e68a5.png",F="/docs/assets/quartz-ef1bd1b0-0f13-4dde-a84b-a1ae20b78430.53b8f535.png",i="/docs/assets/quartz-45abe530-05fe-498b-b32a-0d2bc5bd6996.aed164c9.png",A=JSON.parse('{"title":"Spring Boot 整合Quartz实现编程喵定时发布文章","description":"","frontmatter":{"title":"Spring Boot 整合Quartz实现编程喵定时发布文章","shortTitle":"整合Quartz","category":["Java企业级开发"],"tag":["Spring Boot"]},"headers":[],"relativePath":"backend/tobetter/springboot/quartz.md","filePath":"backend/tobetter/springboot/quartz.md"}'),E={name:"backend/tobetter/springboot/quartz.md"},d=l('<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>编程喵🐱实战项目中需要做一个定时发布文章的功能，于是我就很自然地想到了 Quartz，这是一个老而弥坚的开源任务调度框架。</p><img src="'+p+'"><p>记得我在 14 年开发大宗期货交易平台的时候就用到了它，每天凌晨定时需要统计一波交易数据，生成日报报表，「配合 Cron 表达式」（上一节有讲）用起来非常自洽。</p><p>可惜后来平台稳定了，新的政策出来了，直接把大宗期货交易灭了。于是我发财的机会也随着破灭了。想想都觉得可惜，哈哈哈。</p><img src="'+o+'"><p>时光荏苒，Quartz 发展到现在，已经可以和 Spring Boot 项目无缝衔接了，用起来也比之前在 Spring 项目中更丝滑。</p><h3 id="关于-quartz" tabindex="-1">关于 Quartz <a class="header-anchor" href="#关于-quartz" aria-label="Permalink to &quot;关于 Quartz&quot;">​</a></h3><p>Quartz 是一款功能强大的开源的任务调度框架，在 GitHub 上已经累计有 5k+ 的 star 了。小到单机应用，大到分布式，都可以整合 Quartz。</p><img src="'+e+`"><p>在使用 Quartz 之前，让我们先来搞清楚 4 个核心概念：</p><ul><li>Job：任务，要执行的具体内容。</li><li>JobDetail：任务详情，Job 是它要执行的内容，同时包含了这个任务调度的策略和方案。</li><li>Trigger：触发器，可以通过 Cron 表达式来指定任务执行的时间。</li><li>Scheduler：调度器，可以注册多个 JobDetail 和 Trigger，用来调度、暂停和删除任务。</li></ul><h3 id="整合-quartz" tabindex="-1">整合 Quartz <a class="header-anchor" href="#整合-quartz" aria-label="Permalink to &quot;整合 Quartz&quot;">​</a></h3><p>Quartz 存储任务的方式有两种，一种是使用内存，另外一种是使用数据库。内存在程序重启后就丢失了，所以我们这次使用数据库的方式来进行任务的持久化。</p><p>第一步，在 pom.xml 文件中添加 Quartz 的 starter。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;2.6.7&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;2.6.7&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>第二步，在 application.yml 添加 Quartz 相关配置，配置说明直接看注释。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">spring:</span></span>
<span class="line"><span style="color:#f6f6f4;">  quartz:</span></span>
<span class="line"><span style="color:#f6f6f4;">    job-store-type: jdbc # 默认为内存 memory 的方式，这里我们使用数据库的形式</span></span>
<span class="line"><span style="color:#f6f6f4;">    wait-for-jobs-to-complete-on-shutdown: true # 关闭时等待任务完成</span></span>
<span class="line"><span style="color:#f6f6f4;">    overwrite-existing-jobs: true # 可以覆盖已有的任务</span></span>
<span class="line"><span style="color:#f6f6f4;">    jdbc:</span></span>
<span class="line"><span style="color:#f6f6f4;">      initialize-schema: never # 是否自动使用 SQL 初始化 Quartz 表结构</span></span>
<span class="line"><span style="color:#f6f6f4;">    properties: # quartz原生配置</span></span>
<span class="line"><span style="color:#f6f6f4;">      org:</span></span>
<span class="line"><span style="color:#f6f6f4;">        quartz:</span></span>
<span class="line"><span style="color:#f6f6f4;">          scheduler:</span></span>
<span class="line"><span style="color:#f6f6f4;">            instanceName: scheduler # 调度器实例名称</span></span>
<span class="line"><span style="color:#f6f6f4;">            instanceId: AUTO # 调度器实例ID自动生成</span></span>
<span class="line"><span style="color:#f6f6f4;">          # JobStore 相关配置</span></span>
<span class="line"><span style="color:#f6f6f4;">          jobStore:</span></span>
<span class="line"><span style="color:#f6f6f4;">            class: org.quartz.impl.jdbcjobstore.JobStoreTX # JobStore 实现类</span></span>
<span class="line"><span style="color:#f6f6f4;">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate # 使用完全兼容JDBC的驱动</span></span>
<span class="line"><span style="color:#f6f6f4;">            tablePrefix: QRTZ_ # Quartz 表前缀</span></span>
<span class="line"><span style="color:#f6f6f4;">            useProperties: false # 是否将JobDataMap中的属性转为字符串存储</span></span>
<span class="line"><span style="color:#f6f6f4;">          # 线程池相关配置</span></span>
<span class="line"><span style="color:#f6f6f4;">          threadPool:</span></span>
<span class="line"><span style="color:#f6f6f4;">            threadCount: 25 # 线程池大小。默认为 10 。</span></span>
<span class="line"><span style="color:#f6f6f4;">            threadPriority: 5 # 线程优先级</span></span>
<span class="line"><span style="color:#f6f6f4;">            class: org.quartz.simpl.SimpleThreadPool # 指定线程池实现类，对调度器提供固定大小的线程池</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">spring:</span></span>
<span class="line"><span style="color:#24292e;">  quartz:</span></span>
<span class="line"><span style="color:#24292e;">    job-store-type: jdbc # 默认为内存 memory 的方式，这里我们使用数据库的形式</span></span>
<span class="line"><span style="color:#24292e;">    wait-for-jobs-to-complete-on-shutdown: true # 关闭时等待任务完成</span></span>
<span class="line"><span style="color:#24292e;">    overwrite-existing-jobs: true # 可以覆盖已有的任务</span></span>
<span class="line"><span style="color:#24292e;">    jdbc:</span></span>
<span class="line"><span style="color:#24292e;">      initialize-schema: never # 是否自动使用 SQL 初始化 Quartz 表结构</span></span>
<span class="line"><span style="color:#24292e;">    properties: # quartz原生配置</span></span>
<span class="line"><span style="color:#24292e;">      org:</span></span>
<span class="line"><span style="color:#24292e;">        quartz:</span></span>
<span class="line"><span style="color:#24292e;">          scheduler:</span></span>
<span class="line"><span style="color:#24292e;">            instanceName: scheduler # 调度器实例名称</span></span>
<span class="line"><span style="color:#24292e;">            instanceId: AUTO # 调度器实例ID自动生成</span></span>
<span class="line"><span style="color:#24292e;">          # JobStore 相关配置</span></span>
<span class="line"><span style="color:#24292e;">          jobStore:</span></span>
<span class="line"><span style="color:#24292e;">            class: org.quartz.impl.jdbcjobstore.JobStoreTX # JobStore 实现类</span></span>
<span class="line"><span style="color:#24292e;">            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate # 使用完全兼容JDBC的驱动</span></span>
<span class="line"><span style="color:#24292e;">            tablePrefix: QRTZ_ # Quartz 表前缀</span></span>
<span class="line"><span style="color:#24292e;">            useProperties: false # 是否将JobDataMap中的属性转为字符串存储</span></span>
<span class="line"><span style="color:#24292e;">          # 线程池相关配置</span></span>
<span class="line"><span style="color:#24292e;">          threadPool:</span></span>
<span class="line"><span style="color:#24292e;">            threadCount: 25 # 线程池大小。默认为 10 。</span></span>
<span class="line"><span style="color:#24292e;">            threadPriority: 5 # 线程优先级</span></span>
<span class="line"><span style="color:#24292e;">            class: org.quartz.simpl.SimpleThreadPool # 指定线程池实现类，对调度器提供固定大小的线程池</span></span></code></pre></div><p>Quartz 默认使用的是内存的方式来存储任务，为了持久化，我们这里改为 JDBC 的形式，并且指定 <code>spring.quartz.jdbc.initialize-schema=never</code>，这样我们可以手动创建数据表。因为该值的另外两个选项ALWAYS和EMBEDDED都不太符合我们的要求：</p><ul><li>ALWAYS：每次都初始化</li><li>EMBEDDED：只初始化嵌入式数据库，比如说 H2、HSQL</li></ul><p>那手动创建数据表的 SQL 语句去哪里找呢？</p><blockquote><p>GitHub 地址：<a href="https://github.com/quartz-scheduler/quartz/tree/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore" target="_blank" rel="noreferrer">https://github.com/quartz-scheduler/quartz/tree/master/quartz-core/src/main/resources/org/quartz/impl/jdbcjobstore</a></p></blockquote><p>为了方便小伙伴们下载，我把它放在了本教程的源码里面了：</p><img src="`+t+'"><p>如果使用 Intellij IDEA 旗舰版的话，首次打开 SQL 文件的时候会提示你指定数据源。在上图中，我配置了本地的 MySQL 数据库，导入成功后可以在数据库中查看到以下数据表：</p><img src="'+c+`"><p>Quartz数据库核心表如下：</p><table><thead><tr><th>Table Name</th><th>Description</th></tr></thead><tbody><tr><td>QRTZ_CALENDARS</td><td>存储Quartz的Calendar信息</td></tr><tr><td>QRTZ_CRON_TRIGGERS</td><td>存储CronTrigger，包括Cron表达式和时区信息</td></tr><tr><td>QRTZ_FIRED_TRIGGERS</td><td>存储与已触发的Trigger相关的状态信息，以及相联Job的执行信息</td></tr><tr><td>QRTZ_PAUSED_TRIGGER_GRPS</td><td>存储已暂停的Trigger组的信息</td></tr><tr><td>QRTZ_SCHEDULER_STATE</td><td>存储少量的有关Scheduler的状态信息，和别的Scheduler实例</td></tr><tr><td>QRTZ_LOCKS</td><td>存储程序的悲观锁的信息</td></tr><tr><td>QRTZ_JOB_DETAILS</td><td>存储每一个已配置的Job的详细信息</td></tr><tr><td>QRTZ_JOB_LISTENERS</td><td>存储有关已配置的JobListener的信息</td></tr><tr><td>QRTZ_SIMPLE_TRIGGERS</td><td>存储简单的Trigger，包括重复次数、间隔、以及已触的次数</td></tr><tr><td>QRTZ_BLOG_TRIGGERS</td><td>Trigger作为Blob类型存储</td></tr><tr><td>QRTZ_TRIGGER_LISTENERS</td><td>存储已配置的TriggerListener的信息</td></tr><tr><td>QRTZ_TRIGGERS</td><td>存储已配置的Trigger的信息</td></tr></tbody></table><p>剩下的就是对 Quartz 的 scheduler、jobStore 和 threadPool 配置。</p><p>第三步，创建任务调度的接口 IScheduleService，定义三个方法，分别是通过 Cron 表达式来调度任务、指定时间来调度任务，以及取消任务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">IScheduleService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 通过 Cron 表达式来调度任务</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">scheduleJob</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> Job&gt; </span><span style="color:#FFB86C;font-style:italic;">jobBeanClass</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">cron</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 指定时间来调度任务</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">scheduleFixTimeJob</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> Job&gt; </span><span style="color:#FFB86C;font-style:italic;">jobBeanClass</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">startTime</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 取消定时任务</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cancelScheduleJob</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">jobName</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IScheduleService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 通过 Cron 表达式来调度任务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">scheduleJob</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Job</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">jobBeanClass</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">cron</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">data</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 指定时间来调度任务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">scheduleFixTimeJob</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Job</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">jobBeanClass</span><span style="color:#24292E;">, Date </span><span style="color:#E36209;">startTime</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">data</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 取消定时任务</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    Boolean </span><span style="color:#6F42C1;">cancelScheduleJob</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">jobName</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步，创建任务调度业务实现类 ScheduleServiceImpl，通过Scheduler、CronTrigger、JobDetail的API来实现对应的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Slf4j</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ScheduleServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IScheduleService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> defaultGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">default_group</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Scheduler</span><span style="color:#F6F6F4;"> scheduler;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">scheduleJob</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> Job&gt; </span><span style="color:#FFB86C;font-style:italic;">jobBeanClass</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">cron</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> jobName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> UUID.</span><span style="color:#62E884;">fastUUID</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">JobDetail</span><span style="color:#F6F6F4;"> jobDetail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> JobBuilder.</span><span style="color:#62E884;">newJob</span><span style="color:#F6F6F4;">(jobBeanClass)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">withIdentity</span><span style="color:#F6F6F4;">(jobName, defaultGroup)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">usingJobData</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, data)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//创建触发器，指定任务执行时间</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">CronTrigger</span><span style="color:#F6F6F4;"> cronTrigger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> TriggerBuilder.</span><span style="color:#62E884;">newTrigger</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">withIdentity</span><span style="color:#F6F6F4;">(jobName, defaultGroup)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">withSchedule</span><span style="color:#F6F6F4;">(CronScheduleBuilder.</span><span style="color:#62E884;">cronSchedule</span><span style="color:#F6F6F4;">(cron))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 调度器进行任务调度</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            scheduler.</span><span style="color:#62E884;">scheduleJob</span><span style="color:#F6F6F4;">(jobDetail, cronTrigger);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">SchedulerException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            log.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">任务调度执行失败{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> jobName;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">scheduleFixTimeJob</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> Job&gt; </span><span style="color:#FFB86C;font-style:italic;">jobBeanClass</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">startTime</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//日期转CRON表达式</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> startCron </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">%d %d %d %d %d ? %d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                DateUtil.</span><span style="color:#62E884;">second</span><span style="color:#F6F6F4;">(startTime),</span></span>
<span class="line"><span style="color:#F6F6F4;">                DateUtil.</span><span style="color:#62E884;">minute</span><span style="color:#F6F6F4;">(startTime),</span></span>
<span class="line"><span style="color:#F6F6F4;">                DateUtil.</span><span style="color:#62E884;">hour</span><span style="color:#F6F6F4;">(startTime, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">                DateUtil.</span><span style="color:#62E884;">dayOfMonth</span><span style="color:#F6F6F4;">(startTime),</span></span>
<span class="line"><span style="color:#F6F6F4;">                DateUtil.</span><span style="color:#62E884;">month</span><span style="color:#F6F6F4;">(startTime) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                DateUtil.</span><span style="color:#62E884;">year</span><span style="color:#F6F6F4;">(startTime));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">scheduleJob</span><span style="color:#F6F6F4;">(jobBeanClass, startCron, data);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cancelScheduleJob</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">jobName</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> success </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 暂停触发器</span></span>
<span class="line"><span style="color:#F6F6F4;">            scheduler.</span><span style="color:#62E884;">pauseTrigger</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TriggerKey</span><span style="color:#F6F6F4;">(jobName, defaultGroup));</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 移除触发器中的任务</span></span>
<span class="line"><span style="color:#F6F6F4;">            scheduler.</span><span style="color:#62E884;">unscheduleJob</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TriggerKey</span><span style="color:#F6F6F4;">(jobName, defaultGroup));</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 删除任务</span></span>
<span class="line"><span style="color:#F6F6F4;">            scheduler.</span><span style="color:#62E884;">deleteJob</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">JobKey</span><span style="color:#F6F6F4;">(jobName, defaultGroup));</span></span>
<span class="line"><span style="color:#F6F6F4;">            success </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">SchedulerException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            log.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">任务取消失败{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> success;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduleServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IScheduleService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String defaultGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default_group&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Scheduler scheduler;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">scheduleJob</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Job</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">jobBeanClass</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">cron</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String jobName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UUID.</span><span style="color:#6F42C1;">fastUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        JobDetail jobDetail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JobBuilder.</span><span style="color:#6F42C1;">newJob</span><span style="color:#24292E;">(jobBeanClass)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withIdentity</span><span style="color:#24292E;">(jobName, defaultGroup)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">usingJobData</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, data)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建触发器，指定任务执行时间</span></span>
<span class="line"><span style="color:#24292E;">        CronTrigger cronTrigger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TriggerBuilder.</span><span style="color:#6F42C1;">newTrigger</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withIdentity</span><span style="color:#24292E;">(jobName, defaultGroup)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withSchedule</span><span style="color:#24292E;">(CronScheduleBuilder.</span><span style="color:#6F42C1;">cronSchedule</span><span style="color:#24292E;">(cron))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调度器进行任务调度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            scheduler.</span><span style="color:#6F42C1;">scheduleJob</span><span style="color:#24292E;">(jobDetail, cronTrigger);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SchedulerException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;任务调度执行失败{}&quot;</span><span style="color:#24292E;">, e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> jobName;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">scheduleFixTimeJob</span><span style="color:#24292E;">(Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Job</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">jobBeanClass</span><span style="color:#24292E;">, Date </span><span style="color:#E36209;">startTime</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//日期转CRON表达式</span></span>
<span class="line"><span style="color:#24292E;">        String startCron </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%d %d %d %d %d ? %d&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                DateUtil.</span><span style="color:#6F42C1;">second</span><span style="color:#24292E;">(startTime),</span></span>
<span class="line"><span style="color:#24292E;">                DateUtil.</span><span style="color:#6F42C1;">minute</span><span style="color:#24292E;">(startTime),</span></span>
<span class="line"><span style="color:#24292E;">                DateUtil.</span><span style="color:#6F42C1;">hour</span><span style="color:#24292E;">(startTime, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                DateUtil.</span><span style="color:#6F42C1;">dayOfMonth</span><span style="color:#24292E;">(startTime),</span></span>
<span class="line"><span style="color:#24292E;">                DateUtil.</span><span style="color:#6F42C1;">month</span><span style="color:#24292E;">(startTime) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                DateUtil.</span><span style="color:#6F42C1;">year</span><span style="color:#24292E;">(startTime));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scheduleJob</span><span style="color:#24292E;">(jobBeanClass, startCron, data);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Boolean </span><span style="color:#6F42C1;">cancelScheduleJob</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">jobName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 暂停触发器</span></span>
<span class="line"><span style="color:#24292E;">            scheduler.</span><span style="color:#6F42C1;">pauseTrigger</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TriggerKey</span><span style="color:#24292E;">(jobName, defaultGroup));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 移除触发器中的任务</span></span>
<span class="line"><span style="color:#24292E;">            scheduler.</span><span style="color:#6F42C1;">unscheduleJob</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TriggerKey</span><span style="color:#24292E;">(jobName, defaultGroup));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 删除任务</span></span>
<span class="line"><span style="color:#24292E;">            scheduler.</span><span style="color:#6F42C1;">deleteJob</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JobKey</span><span style="color:#24292E;">(jobName, defaultGroup));</span></span>
<span class="line"><span style="color:#24292E;">            success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SchedulerException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;任务取消失败{}&quot;</span><span style="color:#24292E;">, e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> success;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步，定义好要执行的任务，继承 QuartzJobBean 类，实现 executeInternal 方法，这里只定义一个定时发布文章的任务。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Slf4j</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PublishPostJob</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">QuartzJobBean</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IScheduleService</span><span style="color:#F6F6F4;"> scheduleService;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IPostsService</span><span style="color:#F6F6F4;"> postsService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">executeInternal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">JobExecutionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">jobExecutionContext</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">JobExecutionException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Trigger</span><span style="color:#F6F6F4;"> trigger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jobExecutionContext.</span><span style="color:#62E884;">getTrigger</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">JobDetail</span><span style="color:#F6F6F4;"> jobDetail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jobExecutionContext.</span><span style="color:#62E884;">getJobDetail</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">JobDataMap</span><span style="color:#F6F6F4;"> jobDataMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jobDetail.</span><span style="color:#62E884;">getJobDataMap</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jobDataMap.</span><span style="color:#62E884;">getLong</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        log.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">定时发布文章操作：{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取文章的 ID后获取文章，更新文章为发布的状态，还有发布的时间</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> success </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> postsService.</span><span style="color:#62E884;">updatePostByScheduler</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//完成后删除触发器和任务</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (success) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            log.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">定时任务执行成功，开始清除定时任务</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            scheduleService.</span><span style="color:#62E884;">cancelScheduleJob</span><span style="color:#F6F6F4;">(trigger.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PublishPostJob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">QuartzJobBean</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IScheduleService scheduleService;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IPostsService postsService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">executeInternal</span><span style="color:#24292E;">(JobExecutionContext </span><span style="color:#E36209;">jobExecutionContext</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JobExecutionException {</span></span>
<span class="line"><span style="color:#24292E;">        Trigger trigger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jobExecutionContext.</span><span style="color:#6F42C1;">getTrigger</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        JobDetail jobDetail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jobExecutionContext.</span><span style="color:#6F42C1;">getJobDetail</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        JobDataMap jobDataMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jobDetail.</span><span style="color:#6F42C1;">getJobDataMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Long data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jobDataMap.</span><span style="color:#6F42C1;">getLong</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;定时发布文章操作：{}&quot;</span><span style="color:#24292E;">,data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取文章的 ID后获取文章，更新文章为发布的状态，还有发布的时间</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> success </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> postsService.</span><span style="color:#6F42C1;">updatePostByScheduler</span><span style="color:#24292E;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//完成后删除触发器和任务</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (success) {</span></span>
<span class="line"><span style="color:#24292E;">            log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;定时任务执行成功，开始清除定时任务&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            scheduleService.</span><span style="color:#6F42C1;">cancelScheduleJob</span><span style="color:#24292E;">(trigger.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第六步，发布文章的接口里 PostsServiceImpl 添加定时发布的任务调度方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PostsServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServiceImpl</span><span style="color:#F6F6F4;">&lt;PostsMapper, Posts&gt; </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IPostsService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleScheduledAfter</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Posts</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">posts</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 文章已经保存为草稿了，并且拿到了文章 ID</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 调用定时任务</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> jobName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> scheduleService.</span><span style="color:#62E884;">scheduleFixTimeJob</span><span style="color:#F6F6F4;">(PublishPostJob.class, posts.</span><span style="color:#62E884;">getPostDate</span><span style="color:#F6F6F4;">(), posts.</span><span style="color:#62E884;">getPostsId</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        LOGGER.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">定时任务{}开始执行</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, jobName);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostsServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">PostsMapper</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Posts</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IPostsService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleScheduledAfter</span><span style="color:#24292E;">(Posts </span><span style="color:#E36209;">posts</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 文章已经保存为草稿了，并且拿到了文章 ID</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用定时任务</span></span>
<span class="line"><span style="color:#24292E;">        String jobName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scheduleService.</span><span style="color:#6F42C1;">scheduleFixTimeJob</span><span style="color:#24292E;">(PublishPostJob.class, posts.</span><span style="color:#6F42C1;">getPostDate</span><span style="color:#24292E;">(), posts.</span><span style="color:#6F42C1;">getPostsId</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        LOGGER.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;定时任务{}开始执行&quot;</span><span style="color:#24292E;">, jobName);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>好，我们现在启动服务，通过Swagger 来测试一下，注意设置文章的定时发布时间。</p><img src="`+r+'"><p>查看 Quartz 的数据表 qrtz_cron_triggers，发现任务已经添加进来了。</p><img src="'+y+'"><p>qrtz_job_details 表里也可以查看具体的任务详情。</p><img src="'+F+'"><p>文章定时发布的时间到了之后，在日志里也可以看到 Quartz 的执行日志。</p><img src="'+i+'"><p>再次查看 Quartz 数据表 qrtz_cron_triggers 和 qrtz_job_details 的时候，也会发现定时任务已经清除了。</p><p>整体上来说，Spring Boot 整合 Quartz还是非常丝滑的，配置少，步骤清晰，比 Spring Task 更强大，既能针对内存也能持久化，所以大家在遇到定时任务的时候完全可以尝试一把。</p><p>完整的功能在编程喵实战项目中已经实现了，可以把编程喵导入到本地尝试一下。</p><h3 id="业务梳理" tabindex="-1">业务梳理 <a class="header-anchor" href="#业务梳理" aria-label="Permalink to &quot;业务梳理&quot;">​</a></h3><p>简单来梳理一下编程喵定时发布文章的业务。</p><p>1）用户在发布文章的时候可以选择定时发布，如果选择定时发布，那么就要设置定时发布的时间，暂时规定至少十分钟以后可以定时。</p><p>2）当管理端用户选择了定时发布，那么在保存文章的时候，文章状态要先设置为草稿状态，对前端用户是不可见的状态。</p><hr><p>更多内容，只针对《Java程序员进阶之路》星球用户开放，需要的小伙伴可以<a href="https://tobebetterjavaer.com/zhishixingqiu/" target="_blank" rel="noreferrer">戳链接🔗</a>加入我们的星球，一起学习，一起卷。。<strong>编程喵</strong>🐱是一个 Spring Boot+Vue 的前后端分离项目，融合了市面上绝大多数流行的技术要点。通过学习实战项目，你可以将所学的知识通过实践进行检验、你可以拓宽自己的技术边界，你可以掌握一个真正的实战项目是如何从 0 到 1 的。</p><h3 id="源码路径" tabindex="-1">源码路径 <a class="header-anchor" href="#源码路径" aria-label="Permalink to &quot;源码路径&quot;">​</a></h3><blockquote><ul><li>编程喵：<a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></li><li>codingmore-quartz：<a href="https://github.com/itwanger/codingmore-learning/tree/main/codingmore-quartz" target="_blank" rel="noreferrer">https://github.com/itwanger/codingmore-learning</a></li></ul></blockquote><hr>',57),u=[d];function g(b,f,C,h,D,S){return a(),n("div",null,u)}const v=s(E,[["render",g]]);export{A as __pageData,v as default};
