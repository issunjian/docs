import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"面渣逆袭（MyBatis面试题八股文）必看👍","description":"图文详解 20 道MyBatis面试高频题，这次吊打面试官，我觉得稳了（手动 dog）","frontmatter":{"title":"面渣逆袭（MyBatis面试题八股文）必看👍","shortTitle":"面渣逆袭-MyBatis","category":["面渣逆袭"],"tag":["面渣逆袭"],"description":"图文详解 20 道MyBatis面试高频题，这次吊打面试官，我觉得稳了（手动 dog）","head":[["meta",{"name":"keywords","content":"MyBatis面试题,MyBatis,面试题,八股文"}]]},"headers":[],"relativePath":"interview/sanfene/mybatis.md","filePath":"interview/sanfene/mybatis.md"}'),p={name:"interview/sanfene/mybatis.md"},o=l(`<p>大家好，我是二哥呀，面渣逆袭系列继续，这节我们的主角是MyBatis，作为当前国内最流行的ORM框架，是我们这些crud选手最趁手的工具，赶紧来看看面试都会问哪些问题吧。</p><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><h3 id="_1-说说什么是mybatis" tabindex="-1">1. 说说什么是MyBatis? <a class="header-anchor" href="#_1-说说什么是mybatis" aria-label="Permalink to &quot;1. 说说什么是MyBatis?&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-41c60cf7-6551-4720-8735-290a083640a5.png" alt="MyBatis logo"></p><p><strong>先吹一下</strong>：</p><ul><li>Mybatis 是一个半 ORM（对象关系映射）框架，它内部封装了 JDBC，开发时只需要关注 SQL 语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement 等繁杂的过程。程序员直接编写原生态 sql，可以严格控制 sql 执行性能，灵活度高。</li><li>MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO 映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li></ul><p><strong>再说一下缺点</strong></p><ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库</li></ul><blockquote><p><strong>ORM是什么?</strong></p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-ea212850-56e0-4d12-98fb-03bb40007f44.png" alt="ORM简单示意图"></p><ul><li>ORM（Object Relational Mapping），对象关系映射，是一种为了解决关系型数据库数据与简单Java对象（POJO）的映射关系的技术。简单来说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系型数据库中。</li></ul><blockquote><p><strong>为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</strong></p></blockquote><ul><li>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。</li><li>而Mybatis在查询关联对象或关联集合对象时，需要手动编写SQL来完成，所以，被称之为半自动ORM映射工具。</li></ul><blockquote><p><strong>JDBC编程有哪些不足之处，MyBatis是如何解决的？</strong></p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-f8b181a3-ad40-4381-98ba-351668579bfb.png" alt="JDBC编程的不足"></p><ul><li>1、数据连接创建、释放频繁造成系统资源浪费从而影响系统性能，在mybatis-config.xml中配置数据链接池，使用连接池统一管理数据库连接。</li><li>2、sql语句写在代码中造成代码不易维护，将sql语句配置在XXXXmapper.xml文件中与java代码分离。</li><li>3、向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。Mybatis自动将java对象映射至sql语句。</li><li>4、对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。Mybatis自动将sql执行结果映射至java对象。</li></ul><h3 id="_2-hibernate-和-mybatis-有什么区别" tabindex="-1">2. Hibernate 和 MyBatis 有什么区别？ <a class="header-anchor" href="#_2-hibernate-和-mybatis-有什么区别" aria-label="Permalink to &quot;2. Hibernate 和 MyBatis 有什么区别？&quot;">​</a></h3><p><strong>相同点</strong></p><ul><li>都是对jdbc的封装，都是应用于持久层的框架。</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-4964e454-7c80-4768-bf0e-d0bf417353ef.gif" alt="这还用说？"></p><p><strong>不同点</strong></p><p>1）映射关系</p><ul><li>MyBatis 是一个半自动映射的框架，配置Java对象与sql语句执行结果的对应关系，多表关联关系配置简单</li><li>Hibernate 是一个全表映射的框架，配置Java对象与数据库表的对应关系，多表关联关系配置复杂</li></ul><p>2）<strong>SQL优化和移植性</strong></p><ul><li>Hibernate 对SQL语句封装，提供了日志、缓存、级联（级联比 MyBatis 强大）等特性，此外还提供 HQL（Hibernate Query Language）操作数据库，数据库无关性支持好，但会多消耗性能。如果项目需要支持多种数据库，代码开发量少，但SQL语句优化困难。</li><li>MyBatis 需要手动编写 SQL，支持动态 SQL、处理列表、动态生成表名、支持存储过程。开发工作量相对大些。直接使用SQL语句操作数据库，不支持数据库无关性，但sql语句优化容易。</li></ul><p>3）<strong>MyBatis和Hibernate的适用场景不同</strong></p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-d1c707f7-0bd0-415c-b190-4757792c072b.png" alt="Mybatis vs Hibernate"></p><ul><li>Hibernate 是标准的ORM框架，SQL编写量较少，但不够灵活，适合于需求相对稳定，中小型的软件项目，比如：办公自动化系统</li><li>MyBatis 是半ORM框架，需要编写较多SQL，但是比较灵活，适合于需求变化频繁，快速迭代的项目，比如：电商网站</li></ul><h3 id="_3-mybatis使用过程-生命周期" tabindex="-1">3. MyBatis使用过程？生命周期？ <a class="header-anchor" href="#_3-mybatis使用过程-生命周期" aria-label="Permalink to &quot;3. MyBatis使用过程？生命周期？&quot;">​</a></h3><p>MyBatis基本使用的过程大概可以分为这么几步：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-47bab2e8-5c08-4f61-9c0c-dddfe09fb2b5.png" alt="Mybatis基本使用步骤"></p><ul><li>1）创建SqlSessionFactory</li></ul><p>可以从配置或者直接编码来创建SqlSessionFactory</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> resource </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org/mybatis/example/mybatis-config.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> inputStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Resources.</span><span style="color:#62E884;">getResourceAsStream</span><span style="color:#F6F6F4;">(resource);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">SqlSessionFactory</span><span style="color:#F6F6F4;"> sqlSessionFactory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SqlSessionFactoryBuilder</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">(inputStream);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;org/mybatis/example/mybatis-config.xml&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">InputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Resources.</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(resource);</span></span>
<span class="line"><span style="color:#24292E;">SqlSessionFactory sqlSessionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inputStream);</span></span></code></pre></div><ul><li>2）通过SqlSessionFactory创建SqlSession</li></ul><p>SqlSession（会话）可以理解为程序和数据库之间的桥梁</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">SqlSession</span><span style="color:#F6F6F4;"> session </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sqlSessionFactory.</span><span style="color:#62E884;">openSession</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SqlSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSessionFactory.</span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li>3）通过sqlsession执行数据库操作</li></ul><p>可以通过 SqlSession 实例来直接执行已映射的 SQL 语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Blog</span><span style="color:#F6F6F4;"> blog </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Blog)session.</span><span style="color:#62E884;">selectOne</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.mybatis.example.BlogMapper.selectBlog</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">101</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Blog blog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Blog)session.</span><span style="color:#6F42C1;">selectOne</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span></code></pre></div><p>更常用的方式是先获取Mapper(映射)，然后再执行SQL语句：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">BlogMapper</span><span style="color:#F6F6F4;"> mapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> session.</span><span style="color:#62E884;">getMapper</span><span style="color:#F6F6F4;">(BlogMapper.class);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Blog</span><span style="color:#F6F6F4;"> blog </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mapper.</span><span style="color:#62E884;">selectBlog</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">101</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BlogMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(BlogMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">Blog blog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapper.</span><span style="color:#6F42C1;">selectBlog</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>4）调用session.commit()提交事务</li></ul><p>如果是更新、删除语句，我们还需要提交一下事务。</p><ul><li>5）调用session.close()关闭会话</li></ul><p>最后一定要记得关闭会话。</p><blockquote><p><strong>MyBatis生命周期？</strong></p></blockquote><p>上面提到了几个MyBatis的组件，一般说的MyBatis生命周期就是这些组件的生命周期。</p><ul><li>SqlSessionFactoryBuilder</li></ul><p>一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的生命周期只存在于方法的内部。</p><ul><li>SqlSessionFactory</li></ul><p>SqlSessionFactory 是用来创建SqlSession的，相当于一个数据库连接池，每次创建SqlSessionFactory都会使用数据库资源，多次创建和销毁是对资源的浪费。所以SqlSessionFactory是应用级的生命周期，而且应该是单例的。</p><ul><li>SqlSession</li></ul><p>SqlSession相当于JDBC中的Connection，SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的生命周期是一次请求或一个方法。</p><ul><li>Mapper</li></ul><p>映射器是一些绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的，它的生命周期在sqlsession事务方法之内，一般会控制在方法级。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-79f75371-14c9-4ac9-9d3b-5d80b22705a1.png" alt="MyBatis主要组件生命周期"></p><p>当然，万物皆可集成Spring，MyBatis通常也是和Spring集成使用，Spring可以帮助我们创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到我们的 bean 中，我们不需要关心它们的创建过程和生命周期，那就是另外的故事了。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-2c55dfeb-bea1-466f-9b1e-d8c001856aa5.png" alt="这个应该会"></p><h3 id="_4-在mapper中如何传递多个参数" tabindex="-1">4. 在mapper中如何传递多个参数？ <a class="header-anchor" href="#_4-在mapper中如何传递多个参数" aria-label="Permalink to &quot;4. 在mapper中如何传递多个参数？&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-dd039a20-ae4f-4f6a-b497-01937073198b.png" alt="mapper传递多个参数方法"></p><p><strong>方法1：顺序传参法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">selectUser</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> deptId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">selectUser</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UserResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    select </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from user</span></span>
<span class="line"><span style="color:#F6F6F4;">    where user_name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">} and dept_id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">selectUser</span><span style="color:#24292E;">(String name, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> deptId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;selectUser&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UserResultMap&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from user</span></span>
<span class="line"><span style="color:#24292E;">    where user_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">} and dept_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><code>\\#{}</code>里面的数字代表传入参数的顺序。</li><li>这种方法不建议使用，sql层表达不直观，且一旦顺序调整容易出错。</li></ul><p><strong>方法2：@Param注解传参法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">selectUser</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">Param</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> @</span><span style="color:#97E1F1;font-style:italic;">Param</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">deptId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) deptId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">selectUser</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UserResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    select </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from user</span></span>
<span class="line"><span style="color:#F6F6F4;">    where user_name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{userName} and dept_id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{deptId}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">selectUser</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userName&quot;</span><span style="color:#24292E;">) String name, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">Param</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;deptId&quot;</span><span style="color:#24292E;">) deptId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;selectUser&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UserResultMap&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from user</span></span>
<span class="line"><span style="color:#24292E;">    where user_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{userName} and dept_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{deptId}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><code>\\#{}</code>里面的名称对应的是注解@Param括号里面修饰的名称。</li><li>这种方法在参数不多的情况还是比较直观的，（推荐使用）。</li></ul><p><strong>方法3：Map传参法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">selectUser</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">String, Object</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> params);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">selectUser</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> parameterType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">java.util.Map</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UserResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    select </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from user</span></span>
<span class="line"><span style="color:#F6F6F4;">    where user_name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{userName} and dept_id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{deptId}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">selectUser</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> params);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;selectUser&quot;</span><span style="color:#24292E;"> parameterType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;java.util.Map&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UserResultMap&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from user</span></span>
<span class="line"><span style="color:#24292E;">    where user_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{userName} and dept_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{deptId}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><code>\\#{}</code>里面的名称对应的是Map里面的key名称。</li><li>这种方法适合传递多个参数，且参数易变能灵活传递的情况。</li></ul><p><strong>方法4：Java Bean传参法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">selectUser</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">selectUser</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> parameterType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.jourwon.pojo.User</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UserResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    select </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from user</span></span>
<span class="line"><span style="color:#F6F6F4;">    where user_name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{userName} and dept_id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{deptId}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> User </span><span style="color:#6F42C1;">selectUser</span><span style="color:#24292E;">(User user);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;selectUser&quot;</span><span style="color:#24292E;"> parameterType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.jourwon.pojo.User&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;UserResultMap&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from user</span></span>
<span class="line"><span style="color:#24292E;">    where user_name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{userName} and dept_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{deptId}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><code>\\#{}</code>里面的名称对应的是User类里面的成员属性。</li><li>这种方法直观，需要建一个实体类，扩展不容易，需要加属性，但代码可读性强，业务逻辑处理方便，推荐使用。（推荐使用）。</li></ul><h3 id="_5-实体类属性名和表中字段名不一样-怎么办" tabindex="-1">5. 实体类属性名和表中字段名不一样 ，怎么办? <a class="header-anchor" href="#_5-实体类属性名和表中字段名不一样-怎么办" aria-label="Permalink to &quot;5. 实体类属性名和表中字段名不一样 ，怎么办?&quot;">​</a></h3><ul><li>第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getOrder</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> parameterType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">int</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.jourwon.pojo.Order</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">       select order_id id, order_no orderno ,order_price price form orders where order_id</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{id};</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;getOrder&quot;</span><span style="color:#24292E;"> parameterType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;"> resultType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.jourwon.pojo.Order&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       select order_id id, order_no orderno ,order_price price form orders where order_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{id};</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li>第2种： 通过resultMap 中的&lt;result&gt;来映射字段名和实体类属性名的一一对应的关系。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getOrder</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> parameterType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">int</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  select </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from orders where order_id</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{id}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">resultMap type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.jourwon.pojo.Order</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;!</span><span style="color:#F6F6F4;">–用id属性来映射主键字段–</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">id property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">order_id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;!</span><span style="color:#F6F6F4;">–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result property </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderno</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> column </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">order_no</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">price</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">order_price</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">resultMap</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;getOrder&quot;</span><span style="color:#24292E;"> parameterType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderResultMap&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from orders where order_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{id}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">resultMap type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.jourwon.pojo.Order&quot;</span><span style="color:#24292E;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderResultMap&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!</span><span style="color:#24292E;">–用id属性来映射主键字段–</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;"> column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order_id&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!</span><span style="color:#24292E;">–用result属性来映射非主键字段，property为实体类属性名，column为数据库表中的属性–</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result property </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderno&quot;</span><span style="color:#24292E;"> column </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order_no&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;"> column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order_price&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">resultMap</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="_6-mybatis是否可以映射enum枚举类" tabindex="-1">6. Mybatis是否可以映射Enum枚举类？ <a class="header-anchor" href="#_6-mybatis是否可以映射enum枚举类" aria-label="Permalink to &quot;6. Mybatis是否可以映射Enum枚举类？&quot;">​</a></h3><ul><li>Mybatis当然可以映射枚举类，不单可以映射枚举类，Mybatis可以映射任何对象到表的一列上。映射方式为自定义一个TypeHandler，实现TypeHandler的setParameter()和getResult()接口方法。</li><li>TypeHandler有两个作用，一是完成从javaType至jdbcType的转换，二是完成jdbcType至javaType的转换，体现为setParameter()和getResult()两个方法，分别代表设置sql问号占位符参数和获取列查询结果。</li></ul><h3 id="_7-和-的区别" tabindex="-1">7. <code>#{}和\${}的区别</code>? <a class="header-anchor" href="#_7-和-的区别" aria-label="Permalink to &quot;7. \`#{}和\${}的区别\`?&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-8d2d5dc1-8f92-456d-b858-7d3a7888f2eb.png" alt=""></p><ul><li><code>#{}</code>是占位符，预编译处理；<code>\${}</code>是拼接符，字符串替换，没有预编译处理。</li><li>Mybatis在处理<code>#{}</code>时，<code>#{}</code>传入参数是以字符串传入，会将SQL中的<code>#{}</code>替换为?号，调用PreparedStatement的set方法来赋值。</li><li><code>#{}</code> 可以有效的防止SQL注入，提高系统安全性；<code>\${}</code> 不能防止SQL 注入</li><li><code>#{}</code> 的变量替换是在DBMS 中；<code>\${}</code> 的变量替换是在 DBMS 外</li></ul><h3 id="_8-模糊查询like语句该怎么写" tabindex="-1">8. 模糊查询like语句该怎么写? <a class="header-anchor" href="#_8-模糊查询like语句该怎么写" aria-label="Permalink to &quot;8. 模糊查询like语句该怎么写?&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-e5dde8ba-7808-410b-986a-2fc15ba55e21.png" alt="concat拼接like"></p><ul><li>1 ’<code>%\${question}%</code>’ 可能引起SQL注入，不推荐</li><li>2 <code>&quot;%&quot;#{question}&quot;%&quot;</code> 注意：因为<code>#{…}</code>解析成sql语句时候，会在变量外侧自动加单引号’ &#39;，所以这里 % 需要使用双引号&quot; &quot;，不能使用单引号 ’ &#39;，不然会查不到任何结果。</li><li>3 <code>CONCAT(&#39;%&#39;,#{question},&#39;%&#39;)</code> 使用CONCAT()函数，（推荐✨）</li><li>4 使用bind标签（不推荐）</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">listUserLikeUsername</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.jourwon.pojo.User</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">emsp;</span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">emsp;</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">bind name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pattern</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&#39;%&#39; + username + &#39;%&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">emsp;</span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">emsp;select id,sex,age,username,password from person where username LIKE #{pattern}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;listUserLikeUsername&quot;</span><span style="color:#24292E;"> resultType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.jourwon.pojo.User&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">emsp;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">emsp;</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">bind name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;pattern&quot;</span><span style="color:#24292E;"> value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&#39;%&#39; + username + &#39;%&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">emsp;</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">emsp;select id,sex,age,username,password from person where username LIKE #{pattern}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="_9-mybatis能执行一对一、一对多的关联查询吗" tabindex="-1">9. Mybatis能执行一对一、一对多的关联查询吗？ <a class="header-anchor" href="#_9-mybatis能执行一对一、一对多的关联查询吗" aria-label="Permalink to &quot;9. Mybatis能执行一对一、一对多的关联查询吗？&quot;">​</a></h3><p>当然可以，不止支持一对一、一对多的关联查询，还支持多对多、多对一的关联查询。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-aa1e0cc1-1a5f-4efe-9aed-3081b15c9a2a.png" alt="MyBatis级联"></p><ul><li><strong>一对一&lt;association&gt;</strong></li></ul><p>比如订单和支付是一对一的关系，这种关联的实现：</p><p>实体类:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Order</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> orderId;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> orderDesc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 支付对象</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Pay</span><span style="color:#F6F6F4;"> pay;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//……</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Order</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Integer orderId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String orderDesc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 支付对象</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Pay pay;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//……</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>结果映射</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> 订单resultMap </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">resultMap id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">peopleResultMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cn.fighter3.entity.Order</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">id property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">order_id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orderDesc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">order_desc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;">一对一结果映射</span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">association property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pay</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> javaType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cn.fighter3.entity.Pay</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">id column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">payId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pay_id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">account</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">account</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">association</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">resultMap</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 订单resultMap </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">resultMap id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;peopleResultMap&quot;</span><span style="color:#24292E;"> type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;cn.fighter3.entity.Order&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderId&quot;</span><span style="color:#24292E;"> column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order_id&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;orderDesc&quot;</span><span style="color:#24292E;"> column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;order_desc&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;">一对一结果映射</span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">association property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;pay&quot;</span><span style="color:#24292E;"> javaType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;cn.fighter3.entity.Pay&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;payId&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;pay_id&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;account&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;account&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">association</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">resultMap</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>查询就是普通的关联查</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getTeacher</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getTeacherMap</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> parameterType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">int</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    select </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from order o </span></span>
<span class="line"><span style="color:#F6F6F4;">     left join pay p on o.order_id</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">p.order_id</span></span>
<span class="line"><span style="color:#F6F6F4;">    where  o.order_id</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{orderId}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;getTeacher&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;getTeacherMap&quot;</span><span style="color:#24292E;"> parameterType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;int&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from order o </span></span>
<span class="line"><span style="color:#24292E;">     left join pay p on o.order_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">p.order_id</span></span>
<span class="line"><span style="color:#24292E;">    where  o.order_id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{orderId}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><strong>一对多<code>&lt;collection&gt;</code></strong></li></ul><p>比如商品分类和商品，是一对多的关系。</p><ul><li>实体类</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Category</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> categoryId;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> categoryName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">    * 商品列表</span></span>
<span class="line"><span style="color:#7B7F8B;">    **/</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Product&gt; products;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//……</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Category</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> categoryId;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String categoryName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">    * 商品列表</span></span>
<span class="line"><span style="color:#6A737D;">    **/</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Product</span><span style="color:#24292E;">&gt; products;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//……</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>​</p><ul><li>结果映射</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">resultMap type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Category</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">categoryBean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">id column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">categoryId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">category_id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">categoryName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">category_name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> 一对多的关系 </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 指的是集合属性的值, ofType：指的是集合中元素的类型 </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">collection property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">products</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ofType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Product</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">id column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">product_id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">productId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">productName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">productName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">result column</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">price</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> property</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">price</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">collection</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">resultMap</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">resultMap type</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Category&quot;</span><span style="color:#24292E;"> id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;categoryBean&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;categoryId&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;category_id&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;categoryName&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;category_name&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 一对多的关系 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 指的是集合属性的值, ofType：指的是集合中元素的类型 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">collection property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;products&quot;</span><span style="color:#24292E;"> ofType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Product&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">id column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;product_id&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;productId&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;productName&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;productName&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">result column</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;"> property</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;price&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">collection</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">resultMap</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li>查询</li></ul><p>查询就是一个普通的关联查询</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> 关联查询分类和产品表 </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">listCategory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultMap</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">categoryBean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    select c.</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">, p.</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> from category_ c left join product_ p on c.id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.cid</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 关联查询分类和产品表 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;listCategory&quot;</span><span style="color:#24292E;"> resultMap</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;categoryBean&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    select c.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">, p.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> from category_ c left join product_ p on c.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.cid</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>​ 那么多对一、多对多怎么实现呢？还是利用&lt;association&gt;和&lt;collection&gt;，篇幅所限，这里就不展开了。</p><h3 id="_10-mybatis是否支持延迟加载-原理" tabindex="-1">10. Mybatis是否支持延迟加载？原理？ <a class="header-anchor" href="#_10-mybatis是否支持延迟加载-原理" aria-label="Permalink to &quot;10. Mybatis是否支持延迟加载？原理？&quot;">​</a></h3><ul><li>Mybatis支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</li><li>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</li><li>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</li></ul><h3 id="_11-如何获取生成的主键" tabindex="-1">11. 如何获取生成的主键? <a class="header-anchor" href="#_11-如何获取生成的主键" aria-label="Permalink to &quot;11. 如何获取生成的主键?&quot;">​</a></h3><ul><li>新增标签中添加：keyProperty=&quot; ID &quot; 即可</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">insert id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">insert</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> useGeneratedKeys</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> keyProperty</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    insert into </span><span style="color:#62E884;">user</span><span style="color:#F6F6F4;">( </span></span>
<span class="line"><span style="color:#F6F6F4;">    user_name, user_password, create_time) </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">(#{userName}, #{userPassword} , #{createTime, jdbcType</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> TIMESTAMP})</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">insert</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">insert id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;insert&quot;</span><span style="color:#24292E;"> useGeneratedKeys</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> keyProperty</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;userId&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    insert into </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">( </span></span>
<span class="line"><span style="color:#24292E;">    user_name, user_password, create_time) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(#{userName}, #{userPassword} , #{createTime, jdbcType</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TIMESTAMP})</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">insert</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li>这时候就可以完成回填主键</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">mapper.</span><span style="color:#62E884;">insert</span><span style="color:#F6F6F4;">(user);</span></span>
<span class="line"><span style="color:#F6F6F4;">user.getId;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mapper.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">user.getId;</span></span></code></pre></div><h3 id="_12-mybatis支持动态sql吗" tabindex="-1">12. MyBatis支持动态SQL吗？ <a class="header-anchor" href="#_12-mybatis支持动态sql吗" aria-label="Permalink to &quot;12. MyBatis支持动态SQL吗？&quot;">​</a></h3><p>MyBatis中有一些支持动态SQL的标签，它们的原理是使用OGNL从SQL参数对象中计算表达式的值，根据表达式的值动态拼接SQL，以此来完成动态SQL的功能。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-f52c027d-25a5-4bd9-b5d3-1421655546a5.png" alt="MyBatis"></p><ul><li>if</li></ul><p>根据条件来组成where子句</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">findActiveBlogWithTitleLike</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">   resultType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Blog</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">SELECT </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FROM</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BLOG</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">WHERE</span><span style="color:#F6F6F4;"> state </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ‘ACTIVE’</span></span>
<span class="line"><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">title != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">AND</span><span style="color:#F6F6F4;"> title like #{title}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findActiveBlogWithTitleLike&quot;</span></span>
<span class="line"><span style="color:#24292E;">   resultType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Blog&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">SELECT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> FROM BLOG</span></span>
<span class="line"><span style="color:#24292E;">WHERE state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ‘ACTIVE’</span></span>
<span class="line"><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;title != null&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  AND title like #{title}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li>choose (when, otherwise)</li></ul><p>这个和Java 中的 switch 语句有点像</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">findActiveBlogLike</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">   resultType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Blog</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">SELECT </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FROM</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BLOG</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WHERE</span><span style="color:#F6F6F4;"> state </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ‘ACTIVE’</span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">choose</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">when test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">title != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">AND</span><span style="color:#F6F6F4;"> title like #{title}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">when</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">when test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">author != null and author.name != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">AND</span><span style="color:#F6F6F4;"> author_name like #{author.name}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">when</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">otherwise</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">AND</span><span style="color:#F6F6F4;"> featured </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">otherwise</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">choose</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findActiveBlogLike&quot;</span></span>
<span class="line"><span style="color:#24292E;">   resultType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Blog&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">SELECT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> FROM BLOG WHERE state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ‘ACTIVE’</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">choose</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">when test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;title != null&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    AND title like #{title}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">when</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">when test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;author != null and author.name != null&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">when</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">otherwise</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    AND featured </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">otherwise</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">choose</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><p>trim (where, set)</p></li><li><p>&lt;where&gt;可以用在所有的查询条件都是动态的情况</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">findActiveBlogLike</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">   resultType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Blog</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">SELECT </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FROM</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BLOG</span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">where</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">state != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">       state </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> #{state}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">title != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">AND</span><span style="color:#F6F6F4;"> title like #{title}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">author != null and author.name != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">AND</span><span style="color:#F6F6F4;"> author_name like #{author.name}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">where</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;findActiveBlogLike&quot;</span></span>
<span class="line"><span style="color:#24292E;">   resultType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Blog&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">SELECT </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> FROM BLOG</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">where</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;state != null&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       state </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> #{state}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;title != null&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      AND title like #{title}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;author != null and author.name != null&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">where</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li>&lt;set&gt; 可以用在动态更新的时候</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">update id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">updateAuthorIfNecessary</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  update </span><span style="color:#97E1F1;font-style:italic;">Author</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">set</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">username</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{username},</span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">password</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{password},</span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">email != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">email</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{email},</span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">&lt;if</span><span style="color:#F6F6F4;"> test</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bio != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">bio</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{bio}</span><span style="color:#F286C4;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">set</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  where id</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">#{id}</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">update</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">update id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;updateAuthorIfNecessary&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  update Author</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">set</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;username != null&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">username</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{username},</span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;password != null&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">password</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{password},</span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;email != null&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">email</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{email},</span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;if</span><span style="color:#24292E;"> test</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;bio != null&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">bio</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{bio}</span><span style="color:#D73A49;">&lt;/if&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">set</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  where id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">#{id}</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">update</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><p>foreach</p><p>看到名字就知道了，这个是用来循环的，可以对集合进行遍历</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">select id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">selectPostIn</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> resultType</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">domain.blog.Post</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">SELECT </span><span style="color:#F286C4;">*</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FROM</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">POST</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">P</span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">where</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">foreach item</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">item</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> index</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">index</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> collection</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">list</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">      open</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID in (</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> separator</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> close</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> nullable</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        #{item}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">foreach</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">where</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">select</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">select id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;selectPostIn&quot;</span><span style="color:#24292E;"> resultType</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;domain.blog.Post&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">SELECT </span><span style="color:#D73A49;">*</span></span>
<span class="line"><span style="color:#24292E;">FROM POST P</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">where</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">foreach item</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;item&quot;</span><span style="color:#24292E;"> index</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#24292E;"> collection</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;list&quot;</span></span>
<span class="line"><span style="color:#24292E;">      open</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;ID in (&quot;</span><span style="color:#24292E;"> separator</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;"> close</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;"> nullable</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        #{item}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">foreach</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">where</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">select</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="_13-mybatis如何执行批量操作" tabindex="-1">13. MyBatis如何执行批量操作？ <a class="header-anchor" href="#_13-mybatis如何执行批量操作" aria-label="Permalink to &quot;13. MyBatis如何执行批量操作？&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-24225f07-fbe6-40c8-a63b-a94983f9107a.png" alt="MyBatis批量操作"></p><p><strong>第一种方法：使用foreach标签</strong></p><p>foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。foreach标签的属性主要有item，index，collection，open，separator，close。</p><ul><li>item   表示集合中每一个元素进行迭代时的别名，随便起的变量名；</li><li>index   指定一个名字，用于表示在迭代过程中，每次迭代到的位置，不常用；</li><li>open   表示该语句以什么开始，常用“(”；</li><li>separator 表示在每次进行迭代之间以什么符号作为分隔符，常用“,”；</li><li>close   表示以什么结束，常用“)”。</li></ul><p>在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有以下3种情况：</p><ol><li>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list</li><li>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key</li></ol><p>看看批量保存的两种用法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> MySQL下批量保存，可以foreach遍历 </span><span style="color:#62E884;">mysql支持values</span><span style="color:#F6F6F4;">(),(),()语法 </span><span style="color:#F286C4;">--&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//推荐使用</span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">insert id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">addEmpsBatch</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">INSERT</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">INTO</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">emp</span><span style="color:#F6F6F4;">(ename,gender,email,did)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">VALUES</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">foreach collection</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">emps</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> item</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">emp</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> separator</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        (#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">foreach</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">insert</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> MySQL下批量保存，可以foreach遍历 </span><span style="color:#6F42C1;">mysql支持values</span><span style="color:#24292E;">(),(),()语法 </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//推荐使用</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">insert id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addEmpsBatch&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    INSERT INTO </span><span style="color:#6F42C1;">emp</span><span style="color:#24292E;">(ename,gender,email,did)</span></span>
<span class="line"><span style="color:#24292E;">    VALUES</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">foreach collection</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;emps&quot;</span><span style="color:#24292E;"> item</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;emp&quot;</span><span style="color:#24292E;"> separator</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        (#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">foreach</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">insert</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;"> 这种方式需要数据库连接属性allowMutiQueries</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">true的支持</span></span>
<span class="line"><span style="color:#F6F6F4;"> 如jdbc.url</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">jdbc</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">mysql</span><span style="color:#F286C4;">:</span><span style="color:#7B7F8B;">//localhost:3306/mybatis?allowMultiQueries=true --&gt;  </span></span>
<span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">insert id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">addEmpsBatch</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">foreach collection</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">emps</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> item</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">emp</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> separator</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">                                 </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">INSERT</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">INTO</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">emp</span><span style="color:#F6F6F4;">(ename,gender,email,did)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">VALUES</span><span style="color:#F6F6F4;">(#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">foreach</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">insert</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 这种方式需要数据库连接属性allowMutiQueries</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">true的支持</span></span>
<span class="line"><span style="color:#24292E;"> 如jdbc.url</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">jdbc</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">mysql</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//localhost:3306/mybatis?allowMultiQueries=true --&gt;  </span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">insert id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addEmpsBatch&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">foreach collection</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;emps&quot;</span><span style="color:#24292E;"> item</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;emp&quot;</span><span style="color:#24292E;"> separator</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;;&quot;</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">                                 </span></span>
<span class="line"><span style="color:#24292E;">        INSERT INTO </span><span style="color:#6F42C1;">emp</span><span style="color:#24292E;">(ename,gender,email,did)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">VALUES</span><span style="color:#24292E;">(#{emp.eName},#{emp.gender},#{emp.email},#{emp.dept.id})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">foreach</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">insert</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p><strong>第二种方法：使用ExecutorType.BATCH</strong></p><ul><li>Mybatis内置的ExecutorType有3种，默认为simple，该模式下它为每个语句的执行创建一个新的预处理语句，单条提交sql；而batch模式重复使用已经预处理的语句，并且批量执行所有更新语句，显然batch性能将更优； 但batch模式也有自己的问题，比如在Insert操作时，在事务没有提交之前，是没有办法获取到自增的id，在某些情况下不符合业务的需求。</li></ul><p>具体用法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//批量保存方法测试</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Test</span><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testBatch</span><span style="color:#F6F6F4;">() throws IOException{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">SqlSessionFactory</span><span style="color:#F6F6F4;"> sqlSessionFactory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getSqlSessionFactory</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//可以执行批量操作的sqlSession</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">SqlSession</span><span style="color:#F6F6F4;"> openSession </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sqlSessionFactory.</span><span style="color:#62E884;">openSession</span><span style="color:#F6F6F4;">(ExecutorType.BATCH);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//批量保存执行前时间</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">EmployeeMapper</span><span style="color:#F6F6F4;"> mapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> openSession.</span><span style="color:#62E884;">getMapper</span><span style="color:#F6F6F4;">(EmployeeMapper.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            mapper.</span><span style="color:#62E884;">addEmp</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Employee</span><span style="color:#F6F6F4;">(UUID.</span><span style="color:#62E884;">randomUUID</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">substring</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        openSession.</span><span style="color:#62E884;">commit</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> end </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//批量保存执行后的时间</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">执行时长</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (end </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> start));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//批量 预编译sql一次==》设置参数==》10000次==》执行1次   677</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//非批量  （预编译=设置参数=执行 ）==》10000次   1121</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        openSession.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//批量保存方法测试</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testBatch</span><span style="color:#24292E;">() throws IOException{</span></span>
<span class="line"><span style="color:#24292E;">    SqlSessionFactory sqlSessionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getSqlSessionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//可以执行批量操作的sqlSession</span></span>
<span class="line"><span style="color:#24292E;">    SqlSession openSession </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSessionFactory.</span><span style="color:#6F42C1;">openSession</span><span style="color:#24292E;">(ExecutorType.BATCH);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//批量保存执行前时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        EmployeeMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> openSession.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(EmployeeMapper.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            mapper.</span><span style="color:#6F42C1;">addEmp</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Employee</span><span style="color:#24292E;">(UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">), </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        openSession.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//批量保存执行后的时间</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;执行时长&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//批量 预编译sql一次==》设置参数==》10000次==》执行1次   677</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//非批量  （预编译=设置参数=执行 ）==》10000次   1121</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        openSession.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>mapper和mapper.xml如下</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">EmployeeMapper</span><span style="color:#F6F6F4;"> {   </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//批量保存员工</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addEmp</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Employee</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">employee</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EmployeeMapper</span><span style="color:#24292E;"> {   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//批量保存员工</span></span>
<span class="line"><span style="color:#24292E;">    Long </span><span style="color:#6F42C1;">addEmp</span><span style="color:#24292E;">(Employee </span><span style="color:#E36209;">employee</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">mapper namespace</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.jourwon.mapper.EmployeeMapper</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">&lt;!--</span><span style="color:#F6F6F4;">批量保存员工 </span><span style="color:#F286C4;">--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">insert id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">addEmp</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        insert into </span><span style="color:#62E884;">employee</span><span style="color:#F6F6F4;">(lastName,email,gender)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">(#{lastName},#{email},#{gender})</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">insert</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">mapper</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">mapper namespace</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;com.jourwon.mapper.EmployeeMapper&quot;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;">批量保存员工 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">insert id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;addEmp&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        insert into </span><span style="color:#6F42C1;">employee</span><span style="color:#24292E;">(lastName,email,gender)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(#{lastName},#{email},#{gender})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">insert</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">mapper</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="_14-说说mybatis的一级、二级缓存" tabindex="-1">14. 说说Mybatis的一级、二级缓存？ <a class="header-anchor" href="#_14-说说mybatis的一级、二级缓存" aria-label="Permalink to &quot;14. 说说Mybatis的一级、二级缓存？&quot;">​</a></h3><ol><li>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为SqlSession，各个SqlSession之间的缓存相互隔离，当 Session flush 或 close 之后，该 SqlSession 中的所有 Cache 就将清空，MyBatis默认打开一级缓存。</li></ol><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-54afb458-7dfc-4d48-9a90-4ad1a8739937.png" alt="Mybatis一级缓存"></p><ol start="2"><li>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同之处在于其存储作用域为 Mapper(Namespace)，可以在多个SqlSession之间共享，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置。</li></ol><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-8dae71da-ffd4-43f5-9ee9-258ea82d216b.png" alt="Mybatis二级缓存示意图"></p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><h3 id="_15-能说说mybatis的工作原理吗" tabindex="-1">15. 能说说MyBatis的工作原理吗？ <a class="header-anchor" href="#_15-能说说mybatis的工作原理吗" aria-label="Permalink to &quot;15. 能说说MyBatis的工作原理吗？&quot;">​</a></h3><p>我们已经大概知道了MyBatis的工作流程，按工作原理，可以分为两大步：<code>生成会话工厂</code>、<code>会话运行</code>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-61ac17ef-9eee-48c0-9a2d-545e1d554b13.png" alt="MyBatis的工作流程"></p><p>MyBatis是一个成熟的框架，篇幅限制，这里抓大放小，来看看它的主要工作流程。</p><blockquote><p><strong>构建会话工厂</strong></p></blockquote><p>构造会话工厂也可以分为两步：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-234a4d1b-2d44-4576-9954-26f56162750e.png" alt="构建会话工厂"></p><ul><li>获取配置</li></ul><p>获取配置这一步经过了几步转化，最终由生成了一个配置类Configuration实例，这个配置类实例非常重要，主要作用包括：</p><ul><li>读取配置文件，包括基础配置文件和映射文件</li><li>初始化基础配置，比如MyBatis的别名，还有其它的一些重要的类对象，像插件、映射器、ObjectFactory等等</li><li>提供一个单例，作为会话工厂构建的重要参数</li><li>它的构建过程也会初始化一些环境变量，比如数据源</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SqlSessionFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Reader</span><span style="color:#F6F6F4;"> reader, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> environment, </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> properties) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">SqlSessionFactory</span><span style="color:#F6F6F4;"> var5;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//省略异常处理</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">//xml配置构建器</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#97E1F1;font-style:italic;">XMLConfigBuilder</span><span style="color:#F6F6F4;"> parser </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLConfigBuilder</span><span style="color:#F6F6F4;">(reader, environment, properties);</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">//通过转化的Configuration构建SqlSessionFactory</span></span>
<span class="line"><span style="color:#F6F6F4;">          var5 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">(parser.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(Reader reader, String environment, Properties properties) {</span></span>
<span class="line"><span style="color:#24292E;">      SqlSessionFactory var5;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//省略异常处理</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//xml配置构建器</span></span>
<span class="line"><span style="color:#24292E;">          XMLConfigBuilder parser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLConfigBuilder</span><span style="color:#24292E;">(reader, environment, properties);</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//通过转化的Configuration构建SqlSessionFactory</span></span>
<span class="line"><span style="color:#24292E;">          var5 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>​</p><ul><li>构建SqlSessionFactory</li></ul><p>SqlSessionFactory只是一个接口，构建出来的实际上是它的实现类的实例，一般我们用的都是它的实现类DefaultSqlSessionFactory，</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SqlSessionFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Configuration</span><span style="color:#F6F6F4;"> config) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultSqlSessionFactory</span><span style="color:#F6F6F4;">(config);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactory </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(Configuration config) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSessionFactory</span><span style="color:#24292E;">(config);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p><strong>会话运行</strong></p></blockquote><p>会话运行是MyBatis最复杂的部分，它的运行离不开四大组件的配合：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-da477d50-209e-45b3-a003-6d63e674bd99.png" alt="MyBatis会话运行四大关键组件"></p><ul><li>Executor（执行器）</li></ul><p>Executor起到了至关重要的作用，SqlSession只是一个门面，相当于客服，真正干活的是是Executor，就像是默默无闻的工程师。它提供了相应的查询和更新方法，以及事务方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Environment</span><span style="color:#F6F6F4;"> environment </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.configuration.</span><span style="color:#62E884;">getEnvironment</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">TransactionFactory</span><span style="color:#F6F6F4;"> transactionFactory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getTransactionFactoryFromEnvironment</span><span style="color:#F6F6F4;">(environment);</span></span>
<span class="line"><span style="color:#F6F6F4;">tx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> transactionFactory.</span><span style="color:#62E884;">newTransaction</span><span style="color:#F6F6F4;">(environment.</span><span style="color:#62E884;">getDataSource</span><span style="color:#F6F6F4;">(), level, autoCommit);</span></span>
<span class="line"><span style="color:#7B7F8B;">//通过Configuration创建executor</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Executor</span><span style="color:#F6F6F4;"> executor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.configuration.</span><span style="color:#62E884;">newExecutor</span><span style="color:#F6F6F4;">(tx, execType);</span></span>
<span class="line"><span style="color:#F6F6F4;">var8 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultSqlSession</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.configuration, executor, autoCommit);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Environment environment </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.configuration.</span><span style="color:#6F42C1;">getEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">TransactionFactory transactionFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getTransactionFactoryFromEnvironment</span><span style="color:#24292E;">(environment);</span></span>
<span class="line"><span style="color:#24292E;">tx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transactionFactory.</span><span style="color:#6F42C1;">newTransaction</span><span style="color:#24292E;">(environment.</span><span style="color:#6F42C1;">getDataSource</span><span style="color:#24292E;">(), level, autoCommit);</span></span>
<span class="line"><span style="color:#6A737D;">//通过Configuration创建executor</span></span>
<span class="line"><span style="color:#24292E;">Executor executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.configuration.</span><span style="color:#6F42C1;">newExecutor</span><span style="color:#24292E;">(tx, execType);</span></span>
<span class="line"><span style="color:#24292E;">var8 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultSqlSession</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.configuration, executor, autoCommit);</span></span></code></pre></div><ul><li>StatementHandler（数据库会话器）</li></ul><p>StatementHandler，顾名思义，处理数据库会话的。我们以SimpleExecutor为例，看一下它的查询方法，先生成了一个StatementHandler实例，再拿这个handler去执行query。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doQuery</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">MappedStatement</span><span style="color:#F6F6F4;"> ms, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> parameter, </span><span style="color:#97E1F1;font-style:italic;">RowBounds</span><span style="color:#F6F6F4;"> rowBounds, </span><span style="color:#97E1F1;font-style:italic;">ResultHandler</span><span style="color:#F6F6F4;"> resultHandler, </span><span style="color:#97E1F1;font-style:italic;">BoundSql</span><span style="color:#F6F6F4;"> boundSql) throws SQLException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Statement</span><span style="color:#F6F6F4;"> stmt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> var9;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Configuration</span><span style="color:#F6F6F4;"> configuration </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ms.</span><span style="color:#62E884;">getConfiguration</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">StatementHandler</span><span style="color:#F6F6F4;"> handler </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> configuration.</span><span style="color:#62E884;">newStatementHandler</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span></span>
<span class="line"><span style="color:#F6F6F4;">        stmt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">prepareStatement</span><span style="color:#F6F6F4;">(handler, ms.</span><span style="color:#62E884;">getStatementLog</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        var9 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> handler.</span><span style="color:#62E884;">query</span><span style="color:#F6F6F4;">(stmt, resultHandler);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">closeStatement</span><span style="color:#F6F6F4;">(stmt);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> var9;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doQuery</span><span style="color:#24292E;">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    Statement stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    List var9;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Configuration configuration </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ms.</span><span style="color:#6F42C1;">getConfiguration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        StatementHandler handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> configuration.</span><span style="color:#6F42C1;">newStatementHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span></span>
<span class="line"><span style="color:#24292E;">        stmt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">prepareStatement</span><span style="color:#24292E;">(handler, ms.</span><span style="color:#6F42C1;">getStatementLog</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        var9 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> handler.</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(stmt, resultHandler);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">closeStatement</span><span style="color:#24292E;">(stmt);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> var9;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再以最常用的PreparedStatementHandler看一下它的query方法，其实在上面的<code>prepareStatement</code>已经对参数进行了预编译处理，到了这里，就直接执行sql，使用ResultHandler处理返回结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">query</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Statement</span><span style="color:#F6F6F4;"> statement, </span><span style="color:#97E1F1;font-style:italic;">ResultHandler</span><span style="color:#F6F6F4;"> resultHandler) throws SQLException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">PreparedStatement</span><span style="color:#F6F6F4;"> ps </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (PreparedStatement)statement;</span></span>
<span class="line"><span style="color:#F6F6F4;">    ps.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.resultSetHandler.</span><span style="color:#62E884;">handleResultSets</span><span style="color:#F6F6F4;">(ps);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">(Statement statement, ResultHandler resultHandler) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    PreparedStatement ps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (PreparedStatement)statement;</span></span>
<span class="line"><span style="color:#24292E;">    ps.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resultSetHandler.</span><span style="color:#6F42C1;">handleResultSets</span><span style="color:#24292E;">(ps);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>ParameterHandler （参数处理器）</li></ul><p>PreparedStatementHandler里对sql进行了预编译处理</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">parameterize</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Statement</span><span style="color:#F6F6F4;"> statement) throws SQLException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.parameterHandler.</span><span style="color:#62E884;">setParameters</span><span style="color:#F6F6F4;">((PreparedStatement)statement);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parameterize</span><span style="color:#24292E;">(Statement statement) throws SQLException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.parameterHandler.</span><span style="color:#6F42C1;">setParameters</span><span style="color:#24292E;">((PreparedStatement)statement);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里用的就是ParameterHandler，setParameters的作用就是设置预编译SQL语句的参数。</p><p>里面还会用到typeHandler类型处理器，对类型进行处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ParameterHandler</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getParameterObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setParameters</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">PreparedStatement</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">var1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SQLException</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ParameterHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Object </span><span style="color:#6F42C1;">getParameterObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setParameters</span><span style="color:#24292E;">(PreparedStatement </span><span style="color:#E36209;">var1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>ResultSetHandler（结果处理器）</p><p>我们前面也看到了，最后的结果要通过ResultSetHandler来进行处理，handleResultSets这个方法就是用来包装结果集的。Mybatis为我们提供了一个DefaultResultSetHandler，通常都是用这个实现类去进行结果的处理的。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ResultSetHandler</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;E&gt; </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt; </span><span style="color:#62E884;">handleResultSets</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Statement</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">var1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SQLException</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;E&gt; </span><span style="color:#97E1F1;font-style:italic;">Cursor</span><span style="color:#F6F6F4;">&lt;E&gt; </span><span style="color:#62E884;">handleCursorResultSets</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Statement</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">var1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SQLException</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleOutputParameters</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">CallableStatement</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">var1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SQLException</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ResultSetHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; List&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handleResultSets</span><span style="color:#24292E;">(Statement </span><span style="color:#E36209;">var1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; Cursor&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">handleCursorResultSets</span><span style="color:#24292E;">(Statement </span><span style="color:#E36209;">var1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleOutputParameters</span><span style="color:#24292E;">(CallableStatement </span><span style="color:#E36209;">var1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> SQLException;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它会使用typeHandle处理类型，然后用ObjectFactory提供的规则组装对象，返回给调用者。</p><p>整体上总结一下会话运行：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-ebd0712a-1f62-4154-b391-2cb596634710.png" alt="会话运行的简单示意图"></p><blockquote><p>我们最后把整个的工作流程串联起来，简单总结一下：</p></blockquote><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-dc142e94-8e7f-4ec6-a1f6-1d20669292ad.png" alt="MyBatis整体工作原理图"></p><ol><li>读取 MyBatis 配置文件——mybatis-config.xml 、加载映射文件——映射文件即 SQL 映射文件，文件中配置了操作数据库的 SQL 语句。最后生成一个配置对象。</li><li>构造会话工厂：通过 MyBatis 的环境等配置信息构建会话工厂 SqlSessionFactory。</li><li>创建会话对象：由会话工厂创建 SqlSession 对象，该对象中包含了执行 SQL 语句的所有方法。</li><li>Executor 执行器：MyBatis 底层定义了一个 Executor 接口来操作数据库，它将根据 SqlSession 传递的参数动态地生成需要执行的 SQL 语句，同时负责查询缓存的维护。</li><li>StatementHandler：数据库会话器，串联起参数映射的处理和运行结果映射的处理。</li><li>参数处理：对输入参数的类型进行处理，并预编译。</li><li>结果处理：对返回结果的类型进行处理，根据对象映射规则，返回相应的对象。</li></ol><h3 id="_16-mybatis的功能架构是什么样的" tabindex="-1">16. MyBatis的功能架构是什么样的？ <a class="header-anchor" href="#_16-mybatis的功能架构是什么样的" aria-label="Permalink to &quot;16. MyBatis的功能架构是什么样的？&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-c7b59a67-49f4-48f8-a25d-033daeea7e3e.png" alt="MyBatis功能架构"></p><p>我们一般把Mybatis的功能架构分为三层：</p><ul><li>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li></ul><h3 id="_17-为什么mapper接口不需要实现类" tabindex="-1">17. 为什么Mapper接口不需要实现类？ <a class="header-anchor" href="#_17-为什么mapper接口不需要实现类" aria-label="Permalink to &quot;17. 为什么Mapper接口不需要实现类？&quot;">​</a></h3><p>四个字回答：<strong>动态代理</strong>，我们来看一下获取Mapper的过程：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-15e30a15-f34c-4aa4-b131-4ddc8620348e.png" alt="Mapper代理"></p><ul><li>获取Mapper</li></ul><p>我们都知道定义的Mapper接口是没有实现类的，Mapper映射其实是通过<strong>动态代理</strong>实现的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">BlogMapper</span><span style="color:#F6F6F4;"> mapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> session.</span><span style="color:#62E884;">getMapper</span><span style="color:#F6F6F4;">(BlogMapper.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BlogMapper mapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session.</span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(BlogMapper.class);</span></span></code></pre></div><p>七拐八绕地进去看一下，发现获取Mapper的过程，需要先获取MapperProxyFactory——Mapper代理工厂。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMapper</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> type, </span><span style="color:#97E1F1;font-style:italic;">SqlSession</span><span style="color:#F6F6F4;"> sqlSession) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">MapperProxyFactory</span><span style="color:#F6F6F4;">&lt;T&gt; mapperProxyFactory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (MapperProxyFactory)</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.knownMappers.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(type);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (mapperProxyFactory </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BindingException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Type </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> type </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> is not known to the MapperRegistry.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> mapperProxyFactory.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(sqlSession);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">var5</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BindingException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Error getting mapper instance. Cause: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> var5, var5);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getMapper</span><span style="color:#24292E;">(Class</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type, SqlSession sqlSession) {</span></span>
<span class="line"><span style="color:#24292E;">    MapperProxyFactory&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; mapperProxyFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (MapperProxyFactory)</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.knownMappers.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(type);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mapperProxyFactory </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Type &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; is not known to the MapperRegistry.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mapperProxyFactory.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(sqlSession);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">var5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error getting mapper instance. Cause: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> var5, var5);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>MapperProxyFactory</li></ul><p>MapperProxyFactory的作用是生成MapperProxy（Mapper代理对象）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MapperProxyFactory</span><span style="color:#F6F6F4;">&lt;T&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;T&gt; mapperInterface;</span></span>
<span class="line"><span style="color:#F6F6F4;">  ……</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">MapperProxy</span><span style="color:#F6F6F4;">&lt;T&gt; </span><span style="color:#FFB86C;font-style:italic;">mapperProxy</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Proxy.</span><span style="color:#62E884;">newProxyInstance</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mapperInterface.</span><span style="color:#62E884;">getClassLoader</span><span style="color:#F6F6F4;">(), </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">[]{</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mapperInterface}, mapperProxy);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">SqlSession</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">sqlSession</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">MapperProxy</span><span style="color:#F6F6F4;">&lt;T&gt; mapperProxy </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MapperProxy</span><span style="color:#F6F6F4;">(sqlSession, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mapperInterface, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.methodCache);</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(mapperProxy);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperProxyFactory</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Class&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; mapperInterface;</span></span>
<span class="line"><span style="color:#24292E;">  ……</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(MapperProxy&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">mapperProxy</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Proxy.</span><span style="color:#6F42C1;">newProxyInstance</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mapperInterface.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Class</span><span style="color:#24292E;">[]{</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mapperInterface}, mapperProxy);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(SqlSession </span><span style="color:#E36209;">sqlSession</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      MapperProxy&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; mapperProxy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MapperProxy</span><span style="color:#24292E;">(sqlSession, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mapperInterface, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.methodCache);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(mapperProxy);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里可以看到动态代理对接口的绑定，它的作用就是生成动态代理对象（占位），而代理的方法被放到了MapperProxy中。</p><ul><li>MapperProxy</li></ul><p>MapperProxy里，通常会生成一个MapperMethod对象，它是通过cachedMapperMethod方法对其进行初始化的，然后执行excute方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> proxy, </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> method, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Object.class.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(method.</span><span style="color:#62E884;">getDeclaringClass</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> method.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, args) </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">cachedInvoker</span><span style="color:#F6F6F4;">(method).</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(proxy, method, args, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sqlSession);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">var5</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> ExceptionUtil.</span><span style="color:#62E884;">unwrapThrowable</span><span style="color:#F6F6F4;">(var5);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object proxy, Method method, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) throws Throwable {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Object.class.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getDeclaringClass</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, args) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">cachedInvoker</span><span style="color:#24292E;">(method).</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(proxy, method, args, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sqlSession);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">var5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> ExceptionUtil.</span><span style="color:#6F42C1;">unwrapThrowable</span><span style="color:#24292E;">(var5);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>MapperMethod</li></ul><p>MapperMethod里的excute方法，会真正去执行sql。这里用到了命令模式，其实绕一圈，最终它还是通过SqlSession的实例去运行对象的sql。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">SqlSession</span><span style="color:#F6F6F4;"> sqlSession, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> param;</span></span>
<span class="line"><span style="color:#F6F6F4;">      ……</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> SELECT</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">returnsVoid</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">hasResultHandler</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">executeWithResultHandler</span><span style="color:#F6F6F4;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">              result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">          } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">returnsMany</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">              result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">executeForMany</span><span style="color:#F6F6F4;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">          } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">returnsMap</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">              result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">executeForMap</span><span style="color:#F6F6F4;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">          } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">returnsCursor</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">              result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">executeForCursor</span><span style="color:#F6F6F4;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">          } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">              param </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">convertArgsToSqlCommandParam</span><span style="color:#F6F6F4;">(args);</span></span>
<span class="line"><span style="color:#F6F6F4;">              result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sqlSession.</span><span style="color:#62E884;">selectOne</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.command.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">(), param);</span></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">returnsOptional</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (result </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.method.</span><span style="color:#62E884;">getReturnType</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(result.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">()))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                  result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(result);</span></span>
<span class="line"><span style="color:#F6F6F4;">              }</span></span>
<span class="line"><span style="color:#F6F6F4;">          }</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">         ……</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(SqlSession sqlSession, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">      Object result;</span></span>
<span class="line"><span style="color:#24292E;">      Object param;</span></span>
<span class="line"><span style="color:#24292E;">      ……</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SELECT</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsVoid</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">hasResultHandler</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeWithResultHandler</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">              result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsMany</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeForMany</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsMap</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeForMap</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsCursor</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">              result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">executeForCursor</span><span style="color:#24292E;">(sqlSession, args);</span></span>
<span class="line"><span style="color:#24292E;">          } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">convertArgsToSqlCommandParam</span><span style="color:#24292E;">(args);</span></span>
<span class="line"><span style="color:#24292E;">              result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sqlSession.</span><span style="color:#6F42C1;">selectOne</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.command.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">(), param);</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">returnsOptional</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.method.</span><span style="color:#6F42C1;">getReturnType</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(result.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">()))) {</span></span>
<span class="line"><span style="color:#24292E;">                  result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         ……</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><h3 id="_18-mybatis都有哪些executor执行器" tabindex="-1">18.Mybatis都有哪些Executor执行器？ <a class="header-anchor" href="#_18-mybatis都有哪些executor执行器" aria-label="Permalink to &quot;18.Mybatis都有哪些Executor执行器？&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-59340143-5155-4719-869e-304b5738b2f2.png" alt="Mybatis Executor类型"></p><p>Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。</p><ul><li><strong>SimpleExecutor</strong>：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li><li><strong>ReuseExecutor</strong>：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。简言之，就是重复使用Statement对象。</li><li><strong>BatchExecutor</strong>：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</li></ul><p>作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。</p><blockquote><p><strong>Mybatis中如何指定使用哪一种Executor执行器？</strong></p></blockquote><ul><li>在Mybatis配置文件中，在设置（settings）可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数，如<code>SqlSession openSession(ExecutorType execType)</code>。</li><li>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。</li></ul><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><h3 id="_19-说说mybatis的插件运行原理-如何编写一个插件" tabindex="-1">19. 说说Mybatis的插件运行原理，如何编写一个插件？ <a class="header-anchor" href="#_19-说说mybatis的插件运行原理-如何编写一个插件" aria-label="Permalink to &quot;19. 说说Mybatis的插件运行原理，如何编写一个插件？&quot;">​</a></h3><blockquote><p><strong>插件的运行原理？</strong></p></blockquote><p>Mybatis会话的运行需要ParameterHandler、ResultSetHandler、StatementHandler、Executor这四大对象的配合，插件的原理就是在这四大对象调度的时候，插入一些我我们自己的代码。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-00f2581b-5aae-441a-83f7-75641b3ba010.png" alt="MyBatis插件原理简图"></p><p>Mybatis使用JDK的动态代理，为目标对象生成代理对象。它提供了一个工具类<code>Plugin</code>，实现了<code>InvocationHandler</code>接口。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-c487f77a-9b87-4d9b-9a49-5aa87401b5e8.png" alt="Plugin中调用插件方法"></p><p>使用<code>Plugin</code>生成代理对象，代理对象在调用方法的时候，就会进入invoke方法，在invoke方法中，如果存在签名的拦截方法，插件的intercept方法就会在这里被我们调用，然后就返回结果。如果不存在签名方法，那么将直接反射调用我们要执行的方法。</p><blockquote><p><strong>如何编写一个插件？</strong></p></blockquote><p>我们自己编写MyBatis 插件，只需要实现拦截器接口 <code>Interceptor (org.apache.ibatis. plugin Interceptor ）</code>，在实现类中对拦截对象和方法进行处理。</p><ul><li>实现Mybatis的Interceptor接口并重写intercept()方法</li></ul><p>这里我们只是在目标对象执行目标方法的前后进行了打印；</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Interceptor</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> props</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">intercept</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Invocation</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">invocation</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">before……</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">invocation.</span><span style="color:#62E884;">proceed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">after……</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> obj;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Properties props</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before……&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span>
<span class="line"><span style="color:#24292E;">        Object obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">invocation.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after……&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>然后再给插件编写注解，确定要拦截的对象，要拦截的方法</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Intercepts</span><span style="color:#F6F6F4;">({@</span><span style="color:#97E1F1;font-style:italic;">Signature</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">type</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executor.class,  </span><span style="color:#7B7F8B;">//确定要拦截的对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">update</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,        </span><span style="color:#7B7F8B;">//确定要拦截的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">args</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {MappedStatement.class,Object.class}   </span><span style="color:#7B7F8B;">//拦截方法的参数</span></span>
<span class="line"><span style="color:#F6F6F4;">)})</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Interceptor</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> props</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">intercept</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Invocation</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">invocation</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">before……</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">invocation.</span><span style="color:#62E884;">proceed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">after……</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> obj;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Intercepts</span><span style="color:#24292E;">({@</span><span style="color:#D73A49;">Signature</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">type</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executor.class,  </span><span style="color:#6A737D;">//确定要拦截的对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;update&quot;</span><span style="color:#24292E;">,        </span><span style="color:#6A737D;">//确定要拦截的方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {MappedStatement.class,Object.class}   </span><span style="color:#6A737D;">//拦截方法的参数</span></span>
<span class="line"><span style="color:#24292E;">)})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Interceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Properties props</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(Invocation </span><span style="color:#E36209;">invocation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before……&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果当前代理的是一个非代理对象，那么就会调用真实拦截对象的方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不是它就会调用下个插件代理对象的invoke方法</span></span>
<span class="line"><span style="color:#24292E;">        Object obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">invocation.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after……&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>最后，再MyBatis配置文件里面配置插件</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">plugins</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">plugin interceptor</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">xxx.MyPlugin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">property name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dbType</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mysql</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">plugin</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F286C4;">&lt;/</span><span style="color:#F6F6F4;">plugins</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">plugin interceptor</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;xxx.MyPlugin&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">property name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;dbType&quot;</span><span style="color:#24292E;">,value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mysql&quot;</span><span style="color:#D73A49;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><h3 id="_20-mybatis是如何进行分页的-分页插件的原理是什么" tabindex="-1">20. MyBatis是如何进行分页的？分页插件的原理是什么？ <a class="header-anchor" href="#_20-mybatis是如何进行分页的-分页插件的原理是什么" aria-label="Permalink to &quot;20. MyBatis是如何进行分页的？分页插件的原理是什么？&quot;">​</a></h3><blockquote><p><strong>MyBatis是如何分页的？</strong></p></blockquote><p>MyBatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><blockquote><p><strong>分页插件的原理是什么？</strong></p></blockquote><ul><li>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，拦截Executor的query方法</li><li>在执行查询的时候，拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</li><li>举例：<code>select * from student</code>，拦截sql后重写为：<code>select t.* from (select * from student) t limit 0, 10</code></li></ul><p>可以看一下一个大概的MyBatis通用分页拦截器：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mybatis-0bcdca85-e127-44ff-92e0-368a3f089ec8.png" alt="Mybatis-通用分页拦截器"></p>`,247),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{d as __pageData,g as default};
