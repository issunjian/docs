import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/fork-join-ba0c0e3f-dc9b-445d-874a-5878503a98f7.37f170a8.png",o="/docs/assets/fork-join-819f4ad9-25ce-4e7e-a1d7-e36a70e584a4.be6115a2.png",e="/docs/assets/fork-join-8e03485d-efe0-4edf-8516-a9b10dea6e7f.ecbc099e.png",k=JSON.parse('{"title":"深入理解Java并发编程之Fork/Join框架","description":"深入理解Java并发编程之Fork/Join框架","frontmatter":{"title":"深入理解Java并发编程之Fork/Join框架","shortTitle":"Fork/Join框架","description":"深入理解Java并发编程之Fork/Join框架","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ForkJoin"}]]},"headers":[],"relativePath":"backend/tobetter/thread/fork-join.md","filePath":"backend/tobetter/thread/fork-join.md"}'),t={name:"backend/tobetter/thread/fork-join.md"},c=l("",65),r=[c];function F(y,i,E,u,d,C){return n(),a("div",null,r)}const A=s(t,[["render",F]]);export{k as __pageData,A as default};
