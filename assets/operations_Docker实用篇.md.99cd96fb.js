import{_ as s,o as a,c as n,V as p}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"operations/Docker实用篇.md","filePath":"operations/Docker实用篇.md"}'),l={name:"operations/Docker实用篇.md"},o=p(`<h2 id="docker实用篇" tabindex="-1">Docker实用篇 <a class="header-anchor" href="#docker实用篇" aria-label="Permalink to &quot;Docker实用篇&quot;">​</a></h2><p>课程内容</p><ul><li>知悉Docker是什么、其作用 以及和Linux的区别</li><li>能使用Docker指令完成镜像的拉取，以及容器的创建，并能设置端口映射和数据卷</li><li>能使用DockerFile</li><li>能使用Docker编排技术的作用</li></ul><blockquote><p>完成标注为必练的列子</p></blockquote><p>知识储备</p><ol><li>已经在虚拟机上安装过Linux系统</li><li>理解虚拟机系统和宿主系统的关系</li></ol><h2 id="_1-初识docker" tabindex="-1">1.初识Docker <a class="header-anchor" href="#_1-初识docker" aria-label="Permalink to &quot;1.初识Docker&quot;">​</a></h2><h3 id="_1-1-什么是docker" tabindex="-1">1.1.什么是Docker <a class="header-anchor" href="#_1-1-什么是docker" aria-label="Permalink to &quot;1.1.什么是Docker&quot;">​</a></h3><p>Docker的定义</p><p><a href="http://www.yangeit.cn:21010/springcloud2023/SpringCloud01.html#_1-%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1" target="_blank" rel="noreferrer"><strong>微服务</strong></a>虽然具备各种各样的优势，但<strong>服务的拆分</strong>通用给<strong>部署</strong>带来了很大的麻烦。</p><ul><li>分布式系统中，依赖的组件非常多，不同组件之间<strong>部署时往往会产生一些冲突</strong>。</li><li>在数百上千台服务中<strong>重复部署，环境不一定一致，会遇到各种问题</strong></li></ul><p><strong>1. 应用部署的环境问题</strong>👇 👇</p><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p><ul><li>依赖关系复杂，容易出现兼容性问题</li><li>开发、测试、生产环境有差异 <ul><li>开发测试生产环境使用的机器不一样，配置不一样</li></ul></li></ul><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731141907366.png" alt="image-20210731141907366"></p><p>image-20210731141907366</p><p>例如一个项目中，部署时需要依赖于node.js、Redis、RabbitMQ、MySQL等，这些服务部署时<strong>所需要的函数库、依赖项各不相同</strong>，甚至会有冲突。给<strong>部署</strong>带来了极大的困难。</p><p><img src="https://picx.zhimg.com/v2-a62710d971c47422f25eca254b2add8a_1440w.jpg?source=172ae18b" alt=""></p><p>Docker 是一个开源的<strong>应用容器</strong>引擎，让开发者可以<strong>打包他们的应用以及依赖包</strong>到一个可移植的<strong>镜像</strong>中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现<strong>虚拟化</strong>。容器是<strong>完全使用沙箱机制</strong>，相互之间不会有任何接口</p><h4 id="docker解决依赖兼容问题" tabindex="-1"><strong>Docker解决依赖兼容问题</strong> <a class="header-anchor" href="#docker解决依赖兼容问题" aria-label="Permalink to &quot;**Docker解决依赖兼容问题**&quot;">​</a></h4><p>而Docker确巧妙的解决了这些问题，Docker是如何实现的呢？</p><p><strong>Docker为了解决依赖的兼容问题的，采用了两个手段：</strong></p><ul><li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p></li><li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p></li></ul><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731142219735.png" alt="image-20210731142219735"></p><p>image-20210731142219735</p><p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了。</p><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p><h4 id="docker解决操作系统环境差异" tabindex="-1"><strong>Docker解决操作系统环境差异</strong> <a class="header-anchor" href="#docker解决操作系统环境差异" aria-label="Permalink to &quot;**Docker解决操作系统环境差异**&quot;">​</a></h4><p>要解决不同操作系统环境差异问题，必须先了解操作系统结构。以一个Ubuntu操作系统为例，结构如下：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731143401460.png" alt="linux操作系统结构"></p><p>linux操作系统结构</p><p><strong>结构包括：</strong> 👇👇</p><ul><li>计算机硬件：例如CPU、内存、磁盘等</li><li>系统内核：所有Linux发行版的内核都是Linux，例如CentOS、Ubuntu、Fedora等。内核可以与计算机硬件交互，对外提供<strong>内核指令</strong>，用于操作计算机硬件。</li><li>系统应用：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便。</li></ul><p>**应用于计算机交互的流程如下：**👇👇</p><ol><li>应用调用操作系统应用（函数库），实现各种功能</li><li>系统函数库是对内核指令集的封装，会调用内核指令</li><li>内核指令操作计算机硬件</li></ol><p>Ubuntu和CentOSpringBoot都是基于Linux内核，无非是系统应用不同，提供的函数库有差异：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731144304990.png" alt="linux操作系统结构"></p><p>linux操作系统结构</p><p>此时，如果将一个Ubuntu版本的MySQL应用安装到CentOS系统，MySQL在调用Ubuntu函数库时，会发现找不到或者不匹配，就会报错了：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731144458680.png" alt="linux操作系统结构0"></p><p>linux操作系统结构0</p><p><strong>Docker如何解决不同系统环境的问题？</strong> 👇</p><ul><li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li><li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li></ul><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731144820638.png" alt="linux操作系统结构"></p><p>linux操作系统结构</p><p>小结</p><h5 id="_1️⃣-docker如何解决大型项目依赖关系复杂-不同组件依赖的兼容性问题" tabindex="-1">1️⃣ <strong>Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？</strong> <a class="header-anchor" href="#_1️⃣-docker如何解决大型项目依赖关系复杂-不同组件依赖的兼容性问题" aria-label="Permalink to &quot;1️⃣ **Docker如何解决大型项目依赖关系复杂，不同组件依赖的兼容性问题？**&quot;">​</a></h5><ul><li>Docker允许开发中将应用、依赖、函数库、配置<strong>一起打包</strong>，形成可<strong>移植镜像</strong></li><li>Docker应用运行在容器中，使用沙箱机制，相互<strong>隔离</strong>，互不影响</li></ul><h5 id="_2️⃣-docker如何解决开发、测试、生产环境有差异的问题" tabindex="-1">2️⃣ <strong>Docker如何解决开发、测试、生产环境有差异的问题？</strong> <a class="header-anchor" href="#_2️⃣-docker如何解决开发、测试、生产环境有差异的问题" aria-label="Permalink to &quot;2️⃣ **Docker如何解决开发、测试、生产环境有差异的问题？**&quot;">​</a></h5><ul><li>Docker镜像中包含<strong>完整运行环境</strong>，包括系统函数库，<strong>仅依赖系统的Linux内核，因此可以在任意Linux操作系统上运行</strong></li></ul><h5 id="_3️⃣-docker是一个快速交付应用、运行应用的技术-具备下列优势-👍-👍" tabindex="-1">3️⃣ <strong>Docker是一个快速交付应用、运行应用的技术，具备下列优势</strong>：👍 👍 <a class="header-anchor" href="#_3️⃣-docker是一个快速交付应用、运行应用的技术-具备下列优势-👍-👍" aria-label="Permalink to &quot;3️⃣ **Docker是一个快速交付应用、运行应用的技术，具备下列优势**：👍 👍&quot;">​</a></h5><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以<strong>迁移到任意Linux操作系统</strong></li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li><li>启动、移除都可以通过<strong>一行命令完成，方便快捷</strong> 简单实用</li></ul><p>课堂问题</p><p>🚩 1. Docker是什么？有什么作用或者用途？</p><h3 id="_1-2-docker和虚拟机的区别" tabindex="-1">1.2.Docker和虚拟机的区别 <a class="header-anchor" href="#_1-2-docker和虚拟机的区别" aria-label="Permalink to &quot;1.2.Docker和虚拟机的区别&quot;">​</a></h3><p>Docker和虚拟机的区别</p><p>Docker可以让<strong>一个应用</strong>在<strong>任何操作系统</strong>中非常<strong>方便的运行</strong>。而以前我们接触的虚拟机，也能在一个操作系统中，运行另外一个操作系统，保护系统中的任何应用跨系统。</p><p>虚拟机和Docker的区别</p><p><strong>虚拟机</strong>（virtual machine）是在操作系统中<strong>模拟硬件设备</strong>，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</p><p><strong>Docker</strong>仅仅是<strong>封装函数库</strong>，并没有模拟完整的操作系统，如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731145914960.png" alt="Docker和虚拟机的区别"></p><p>Docker和虚拟机的区别</p><p>对比来看：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731152243765.png" alt="Docker和虚拟机的差别"></p><p>Docker和虚拟机的差别</p><p>小结</p><p>Docker和虚拟机的差异：</p><ul><li>docker是一个系统进程；虚拟机是在操作系统中的操作系统</li><li>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</li></ul><p>课堂作业</p><p>🚩 1. 流利的说出Docker和虚拟机的区别或者说出Docker的优势！</p><h3 id="_1-3-docker架构" tabindex="-1">1.3.Docker架构 <a class="header-anchor" href="#_1-3-docker架构" aria-label="Permalink to &quot;1.3.Docker架构&quot;">​</a></h3><p>Docker架构</p><h4 id="镜像和容器" tabindex="-1">镜像和容器 <a class="header-anchor" href="#镜像和容器" aria-label="Permalink to &quot;镜像和容器&quot;">​</a></h4><p>**Docker中有几个重要的概念：**👇</p><ul><li><p><strong>镜像（Image）</strong>：Docker将<strong>应用程序</strong>及其所需的依赖、函数库、环境、配置等文件<strong>打包在一起</strong>，称为镜像。</p></li><li><p><strong>容器（Container）</strong>：<strong>镜像中的应用程序</strong>运行后形成的<strong>进程</strong>就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p></li></ul><blockquote><p>一切应用最终都是代码组成，都是硬盘中的一个个的字节形成的<strong>文件</strong>。只有运行时，才会加载到内存，形成进程。</p></blockquote><p>而<strong>镜像</strong>，就是把一个应用在硬盘上的文件、及其运行环境、部分系统函数库文件一起打包形成的文件包。只读的，相当于安装包。</p><p><strong>容器</strong>就是将这些文件中编写的程序、函数<strong>加载到内存</strong>中允许，形成<strong>进程</strong>，只不过要隔离起来。因此一个镜像可以启动多次，形成多个容器进程相当于已经运行的程序。</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731153059464.png" alt="image-20210731153059464"></p><p>image-20210731153059464</p><p>例如你下载了一个QQ，如果我们将QQ在磁盘上的运行<strong>文件</strong>及其运行的操作系统依赖打包，形成QQ镜像。然后<strong>你可以启动多次，双开、甚至三开QQ</strong>，跟多个妹子聊天。 <img src="https://t12.baidu.com/it/fm=173&amp;fmt=auto&amp;h=360&amp;img_JPEG=&amp;s=B29331C8550E37514CD2510B0300F0DA&amp;u=1134945143%2C2107540562&amp;w=300" alt=""></p><h4 id="dockerhub" tabindex="-1"><strong>DockerHub</strong> <a class="header-anchor" href="#dockerhub" aria-label="Permalink to &quot;**DockerHub**&quot;">​</a></h4><p>开源应用程序非常多，打包这些应用往往是重复的劳动。为了避免这些重复劳动，人们就会将自己打包的应用镜像，例如Redis、MySQL镜像放到网络上，共享使用，就像GitHub的代码共享一样。</p><blockquote><p>hub[hʌb] :轮毂; (某地或活动的)中心;</p><p>registry[ˈredʒɪstri]:登记处; 注册处;</p></blockquote><ul><li><p><strong>DockerHub</strong>：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为<strong>Docker Registry</strong>。</p></li><li><p>国内也有类似于DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub" target="_blank" rel="noreferrer">网易云镜像服务open in new window</a>、<a href="https://cr.console.aliyun.com/" target="_blank" rel="noreferrer">阿里云镜像库open in new window</a>等。</p></li></ul><p>我们一方面可以将自己的镜像<strong>共享到</strong>DockerHub类似Maven仓库或Git仓库，另一方面也可以从DockerHub<strong>拉取镜像</strong>：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731153743354.png" alt="image-20210731153743354"></p><p>image-20210731153743354</p><h4 id="docker架构" tabindex="-1">Docker架构 <a class="header-anchor" href="#docker架构" aria-label="Permalink to &quot;Docker架构&quot;">​</a></h4><p>要使用Docker来操作镜像、容器，就<strong>必须要安装Docker</strong>前提。</p><p>Docker是<strong>一个CS架构的程序</strong>，由两部分组成：</p><ul><li><p><strong>服务端(server)</strong>：Docker守护进程，负责处理Docker指令，管理镜像、容器等</p></li><li><p><strong>客户端(client)</strong>：通过<strong>命令或RestAPI</strong>向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li></ul><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731154257653.png" alt="Docker架构图"></p><p>Docker架构图</p><p>小结</p><p><strong>镜像</strong>：</p><ul><li>将应用程序及其依赖、环境、配置打包在一起</li></ul><p><strong>容器</strong>：</p><ul><li>镜像运行起来就是容器，一个镜像可以运行多个容器</li></ul><p><strong>Docker结构</strong>：</p><ul><li><p>服务端：接收命令或远程请求，操作镜像或容器</p></li><li><p>客户端：发送命令或者请求到Docker服务端</p></li></ul><p><strong>DockerHub：</strong></p><ul><li>一个镜像托管的服务器，类似的还有阿里云镜像服务，统称为DockerRegistry</li></ul><h3 id="_1-4-安装docker" tabindex="-1">1.4.安装Docker <a class="header-anchor" href="#_1-4-安装docker" aria-label="Permalink to &quot;1.4.安装Docker&quot;">​</a></h3><p>安装Docker</p><p>企业部署一般都是采用Linux操作系统，而其中又数CentOS发行版占比最多，因此我们在CentOS下安装Docker。参考课前资料中的文档图片可点击进入文档：</p><p><a href="http://www.yangeit.cn:21010/springcloud2023/Centos7installDocker.html" target="_blank" rel="noreferrer"><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731155002425.png" alt="image-20210731155002425"></a></p><p>image-20210731155002425</p><p>课堂作业</p><p>🚩 1. 参考上述的资料，在centos中安装docker！！必做</p><h2 id="_2-docker的基本操作" tabindex="-1">2.Docker的基本操作 <a class="header-anchor" href="#_2-docker的基本操作" aria-label="Permalink to &quot;2.Docker的基本操作&quot;">​</a></h2><h3 id="_2-1-镜像操作" tabindex="-1">2.1.镜像操作 <a class="header-anchor" href="#_2-1-镜像操作" aria-label="Permalink to &quot;2.1.镜像操作&quot;">​</a></h3><p>镜像操作</p><h4 id="镜像名称" tabindex="-1">镜像名称 <a class="header-anchor" href="#镜像名称" aria-label="Permalink to &quot;镜像名称&quot;">​</a></h4><p>首先来看下镜像的名称组成：</p><ul><li>镜名称一般分两部分组成：[repository]:[tag]。</li><li><strong>在没有指定tag时</strong>，默认是latest，代表最新版本的镜像</li></ul><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731155141362.png" alt="image-20210731155141362"></p><p>image-20210731155141362</p><p>这里的mysql就是repository，5.7就是tag，合一起就是镜像名称，代表5.7版本的MySQL镜像。</p><h4 id="镜像命令" tabindex="-1">镜像命令 <a class="header-anchor" href="#镜像命令" aria-label="Permalink to &quot;镜像命令&quot;">​</a></h4><p>常见的镜像操作命令如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731155649535.png" alt="常见的镜像操作"></p><p>常见的镜像操作</p><blockquote><p>命令不需要记忆，可以查看帮助文档，如输入 <code>docker --help</code> 能查看所有提示</p><p>如如输入 <code>docker image --help</code> 将会说明image这个命令的作用</p></blockquote><p><img src="http://image.yangeit.cn/i/2023/05/14/5469601903442661846.png" alt=""></p><p><strong>操作</strong></p><h4 id="案例1-拉取、查看镜像" tabindex="-1"><strong>案例1-拉取、查看镜像</strong> <a class="header-anchor" href="#案例1-拉取、查看镜像" aria-label="Permalink to &quot;**案例1-拉取、查看镜像**&quot;">​</a></h4><p><strong>需求：从DockerHub中拉取一个nginx镜像并查看</strong>🎯</p><p>1）首先去<strong>镜像仓库</strong>搜索nginx镜像，比如<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">DockerHubopen in new window</a>:</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731155844368.png" alt="image-20210731155844368"></p><p>image-20210731155844368</p><p>2）根据查看到的镜像名称，<strong>拉取</strong>自己需要的镜像，通过命令：<code>docker pull nginx</code></p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731155856199.png" alt="image-20210731155856199"></p><p>image-20210731155856199</p><p>3）通过命令：<code>docker images</code> 查看拉取到的镜像</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731155903037.png" alt="image-20210731155903037"></p><p>image-20210731155903037</p><h4 id="案例2-保存、导入镜像" tabindex="-1">案例2-保存、导入镜像 <a class="header-anchor" href="#案例2-保存、导入镜像" aria-label="Permalink to &quot;案例2-保存、导入镜像&quot;">​</a></h4><p><strong>需求：利用docker save将nginx镜像导出磁盘，然后再通过load加载回来</strong> 🎯</p><h5 id="_1️⃣-利用docker-xx-help命令查看docker-save和docker-load的语法" tabindex="-1">1️⃣ 利用docker xx --help命令查看docker save和docker load的语法 <a class="header-anchor" href="#_1️⃣-利用docker-xx-help命令查看docker-save和docker-load的语法" aria-label="Permalink to &quot;1️⃣ 利用docker xx --help命令查看docker save和docker load的语法&quot;">​</a></h5><p>例如，查看save命令用法，可以输入命令：</p><p>结果：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731161104732.png" alt="image-20210731161104732"></p><p>image-20210731161104732</p><p>命令格式：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">save</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-o</span><span style="color:#F6F6F4;"> [保存的目标文件名称] [镜像名称]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> [保存的目标文件名称] [镜像名称]</span></span></code></pre></div><h5 id="_2️⃣-使用docker-save导出镜像到磁盘" tabindex="-1">2️⃣ 使用docker save导出镜像到磁盘 <a class="header-anchor" href="#_2️⃣-使用docker-save导出镜像到磁盘" aria-label="Permalink to &quot;2️⃣ 使用docker save导出镜像到磁盘&quot;">​</a></h5><p>运行命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">save</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-o</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nginx.tar</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nginx:latest</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-o</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx.tar</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:latest</span></span></code></pre></div><p>结果如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731161354344.png" alt="image-20210731161354344"></p><p>image-20210731161354344</p><h5 id="_3️⃣-使用docker-load加载镜像" tabindex="-1">3️⃣ 使用docker load加载镜像 <a class="header-anchor" href="#_3️⃣-使用docker-load加载镜像" aria-label="Permalink to &quot;3️⃣ 使用docker load加载镜像&quot;">​</a></h5><p>先删除本地的nginx镜像：</p><blockquote><p>rmi 后面可以是名称或者ID</p></blockquote><p>然后运行命令，加载本地文件：</p><p>结果：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731161746245.png" alt="image-20210731161746245"></p><p>image-20210731161746245</p><p>课堂作业</p><p><strong>需求：</strong> 去DockerHub搜索并拉取一个Redis镜像 🎯必做</p><p><strong>目标：</strong></p><ol><li>去DockerHub搜索Redis镜像</li><li>查看Redis镜像的名称和版本</li><li>利用docker pull命令拉取镜像</li><li>利用docker save命令将 redis:latest打包为一个redis.tar包</li><li>利用docker rmi 删除本地的redis:latest</li><li>利用docker load 重新加载 redis.tar文件</li></ol><h3 id="_2-2-容器操作" tabindex="-1">2.2.容器操作 <a class="header-anchor" href="#_2-2-容器操作" aria-label="Permalink to &quot;2.2.容器操作&quot;">​</a></h3><p>容器操作</p><p>容器相关命令</p><p>容器操作的命令如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731161950495.png" alt="image-20210731161950495"></p><p>image-20210731161950495</p><p><strong>容器保护三个状态：</strong></p><ul><li>运行：进程正常运行</li><li>暂停：进程暂停，CPU不再运行，并不释放内存</li><li>停止：进程终止，回收进程占用的内存、CPU等资源</li></ul><p><strong>其中(参考上图)：</strong></p><ul><li><p>docker run：创建并运行一个容器，处于运行状态</p></li><li><p>docker pause：让一个运行的容器暂停</p></li><li><p>docker unpause：让一个容器从暂停状态恢复运行</p></li><li><p>docker stop：停止一个运行的容器</p></li><li><p>docker start：让一个停止的容器再次运行</p></li><li><p>docker rm：删除一个容器（所属的文件系统也会删除）</p></li></ul><blockquote><p>rmi 是删除镜像</p></blockquote><p><strong>代码操作</strong></p><h4 id="案例-创建并运行一个容器🎯" tabindex="-1"><strong>案例-创建并运行一个容器</strong>🎯 <a class="header-anchor" href="#案例-创建并运行一个容器🎯" aria-label="Permalink to &quot;**案例-创建并运行一个容器**🎯&quot;">​</a></h4><p>创建并运行nginx容器的命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--name</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">containerName</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-p</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">80</span><span style="color:#E7EE98;">:80</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-d</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">containerName</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#032F62;">:80</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p><strong>命令解读：</strong></p><ul><li>docker run ：创建并运行一个容器</li><li>--name : 给容器起一个名字，比如叫做mn</li><li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口</li><li>-d：后台运行容器</li><li>nginx：镜像名称，例如nginx</li></ul><p><a href="https://hub.docker.com/_/nginx" target="_blank" rel="noreferrer">docker hub官网open in new window</a></p><p>这里的<code>-p</code>参数，是将<strong>容器端口映射到宿主机端口</strong>。 1</p><blockquote><p>默认情况下，容器是隔离环境，我们直接访问宿主机的80端口，肯定访问不到容器中的nginx。</p></blockquote><p>现在，将容器的80与宿主机的80关联起来，当我们访问宿主机的80端口时，就会被映射到容器的80，这样就能访问到nginx了：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731163255863.png" alt="image-20210731163255863"></p><p>image-20210731163255863</p><p>操作截图：👇</p><p><img src="http://image.yangeit.cn/i/2023/05/14/5469606379683584453.png" alt=""></p><p>访问截图：👇</p><p><img src="http://image.yangeit.cn/i/2023/05/14/5469606555760464752.png" alt=""></p><p>日志截图：👇</p><p><img src="http://image.yangeit.cn/i/2023/05/14/5469606963778164928.png" alt=""></p><blockquote><p>通过帮助文档可以查出，docker logs mn -f能持续查看日志</p></blockquote><h4 id="案例-进入容器-修改文件-🎯" tabindex="-1"><strong>案例-进入容器，修改文件</strong> 🎯 <a class="header-anchor" href="#案例-进入容器-修改文件-🎯" aria-label="Permalink to &quot;**案例-进入容器，修改文件** 🎯&quot;">​</a></h4><p><strong>需求：进入Nginx容器，修改HTML文件内容，添加“东方红大厦欢迎你”</strong></p><blockquote><p><strong>提示</strong>：进入容器要用到<code>docker exec</code>命令。</p></blockquote><p><strong>步骤</strong>：</p><h5 id="_1️⃣-进入容器。进入我们刚刚创建的nginx容器的命令为" tabindex="-1">1️⃣ 进入容器。进入我们刚刚创建的nginx容器的命令为： <a class="header-anchor" href="#_1️⃣-进入容器。进入我们刚刚创建的nginx容器的命令为" aria-label="Permalink to &quot;1️⃣ 进入容器。进入我们刚刚创建的nginx容器的命令为：&quot;">​</a></h5><p><strong>命令解读：</strong></p><ul><li><code>docker exec</code> ：进入容器内部，执行一个命令</li><li><code>-it</code> : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li><code>mn</code> ：要进入的容器的名称</li><li><code>bash</code>：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><p>容器内部会<strong>模拟一个独立的Linux文件系统</strong>，看起来如同一个linux服务器一样：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731164159811.png" alt="image-20210731164159811"></p><p>image-20210731164159811</p><p><strong>nginx的环境、配置、运行文件全部都在这个文件系统中</strong>，包括我们要修改的html文件。</p><p>查看DockerHub网站中的nginx页面，可以知道nginx的html目录位置在<code>/usr/share/nginx/html</code></p><p>我们执行命令，进入该目录：</p><p>查看目录下文件：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731164455818.png" alt="image-20210731164455818"></p><p>image-20210731164455818</p><h5 id="_3️⃣-修改index-html的内容" tabindex="-1">3️⃣ 修改index.html的内容 <a class="header-anchor" href="#_3️⃣-修改index-html的内容" aria-label="Permalink to &quot;3️⃣ 修改index.html的内容&quot;">​</a></h5><p><strong>容器内没有vi命令，无法直接修改</strong>，我们用下面的命令来修改：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">sed</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-i</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-e</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">s#Welcome to nginx#东方红大厦欢迎您#g</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-e</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sed</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s#Welcome to nginx#东方红大厦欢迎您#g&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.html</span></span></code></pre></div><p>在浏览器访问自己的虚拟机地址，例如我的是：<code>http://192.168.150.101</code>，即可看到结果：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731164717604.png" alt="image-20210731164717604"></p><p>image-20210731164717604</p><h5 id="_4️⃣-停止容器" tabindex="-1">4️⃣ 停止容器 <a class="header-anchor" href="#_4️⃣-停止容器" aria-label="Permalink to &quot;4️⃣ 停止容器&quot;">​</a></h5><p><img src="http://image.yangeit.cn/i/2023/05/14/5469608609929237770.png" alt=""></p><h5 id="_5️⃣-删除容器" tabindex="-1">5️⃣ 删除容器 <a class="header-anchor" href="#_5️⃣-删除容器" aria-label="Permalink to &quot;5️⃣ 删除容器&quot;">​</a></h5><p><img src="http://image.yangeit.cn/i/2023/05/14/5469609348697167022.png" alt=""></p><p>小结</p><p><strong>docker run命令的常见参数有哪些？</strong></p><ul><li>--name：指定容器名称</li><li>-p：指定端口映射</li><li>-d：让容器后台运行</li></ul><p><strong>查看容器日志的命令：</strong></p><ul><li>docker logs</li><li>添加 -f 参数可以持续查看日志</li></ul><p><strong>查看容器状态：</strong></p><ul><li>docker ps</li><li>docker ps -a 查看所有容器，包括已经停止的</li></ul><h3 id="_2-3-数据卷-容器数据管理" tabindex="-1">2.3.数据卷（容器数据管理） <a class="header-anchor" href="#_2-3-数据卷-容器数据管理" aria-label="Permalink to &quot;2.3.数据卷（容器数据管理）&quot;">​</a></h3><p>数据卷（容器数据管理）</p><p>在之前的nginx案例中，修改nginx的html页面时，需要进入nginx内部。并且因为没有编辑器，修改文件也很麻烦。</p><p>这就是因为<strong>容器与数据（容器内文件）耦合</strong>带来的后果。</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731172440275.png" alt="容器与数据（容器内文件）耦合的后果"></p><p>容器与数据（容器内文件）耦合的后果</p><p>要解决这个问题，必须将数据与容器解耦 ，这就要用到<em>数据卷</em>了。</p><h4 id="什么是数据卷" tabindex="-1">什么是数据卷 <a class="header-anchor" href="#什么是数据卷" aria-label="Permalink to &quot;什么是数据卷&quot;">​</a></h4><p><strong>数据卷（volume）</strong> 是一个<strong>虚拟目录</strong>，指向宿主机文件系统中的某个目录。</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731173541846.png" alt="虚拟目录映射"></p><p>虚拟目录映射</p><p><strong>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了。</strong></p><p>这样，我们操作宿主机的<code>/var/lib/docker/volumes/html</code>目录，就等于操作容器内的<code>/usr/share/nginx/html</code>目录了</p><p>数据卷虚拟目录操作的基本语法如下：</p><p>docker volume命令是<strong>数据卷操作</strong>，根据命令后跟随的command来确定下一步的操作：</p><ul><li>create 创建一个volume</li><li>inspect 显示一个或多个volume的信息</li><li>ls 列出所有的volume</li><li>prune 删除未使用的volume</li><li>rm 删除一个或多个指定的volume</li></ul><blockquote><p>volume相当于数据卷，或者虚拟目录</p></blockquote><p><strong>具体实操，查看下面的创建和查看数据卷案例</strong> 👇</p><h4 id="挂载数据卷" tabindex="-1">挂载数据卷 <a class="header-anchor" href="#挂载数据卷" aria-label="Permalink to &quot;挂载数据卷&quot;">​</a></h4><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">\\</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">--name</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">mn</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">\\</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">-v</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">html:/root/html</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">\\</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">-p</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">8080</span><span style="color:#E7EE98;">:80</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">nginx</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">\\</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mn</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">html:/root/html</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8080</span><span style="color:#032F62;">:80</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span></code></pre></div><p>这里的-v就是挂载数据卷的命令：</p><ul><li><code>-v html:/root/htm</code> ：把html数据卷挂载到容器内的/root/html这个目录中</li><li><code>-name</code> : 为实例取的名字；</li><li><code>-p</code> : 实例暴露出来的端口映射。暴露端口后，我们才能在宿主的电脑中访问容器的实例；</li></ul><p><a href="https://www.woodscodeworld.com/docker/cmd.html#docker-run" target="_blank" rel="noreferrer">docker run操作教程open in new window</a></p><p><strong>具体实操，查看下面的给nginx/mysql挂载数据卷案例</strong> 👇</p><p><strong>代码操作</strong></p><h4 id="案例-创建和查看数据卷" tabindex="-1">案例-创建和查看数据卷 <a class="header-anchor" href="#案例-创建和查看数据卷" aria-label="Permalink to &quot;案例-创建和查看数据卷&quot;">​</a></h4><p><strong>需求</strong>：创建一个数据卷，并查看数据卷在宿主机的目录位置 🎯</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731175155453.png" alt="宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录关联关系图"></p><p>宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录关联关系图</p><h5 id="_1️⃣-创建数据卷" tabindex="-1">1️⃣ 创建数据卷 <a class="header-anchor" href="#_1️⃣-创建数据卷" aria-label="Permalink to &quot;1️⃣ 创建数据卷&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">volume</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">create</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">html</span></span></code></pre></div><h5 id="_2️⃣-查看所有数据卷" tabindex="-1">2️⃣ 查看所有数据卷 <a class="header-anchor" href="#_2️⃣-查看所有数据卷" aria-label="Permalink to &quot;2️⃣ 查看所有数据卷&quot;">​</a></h5><p>结果：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731173746910.png" alt="image-20210731173746910"></p><p>image-20210731173746910</p><h5 id="_3️⃣-查看数据卷详细信息卷" tabindex="-1">3️⃣ 查看数据卷详细信息卷 <a class="header-anchor" href="#_3️⃣-查看数据卷详细信息卷" aria-label="Permalink to &quot;3️⃣ 查看数据卷详细信息卷&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">volume</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">inspect</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">html</span></span></code></pre></div><p>结果：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731173809877.png" alt="image-20210731173809877"></p><p>image-20210731173809877</p><p>可以看到，我们创建的html这个数据卷关联的宿主机目录为<code>/var/lib/docker/volumes/html/_data</code>目录。</p><h5 id="_4️⃣-删除未使用的数据卷" tabindex="-1">4️⃣ 删除未使用的数据卷 <a class="header-anchor" href="#_4️⃣-删除未使用的数据卷" aria-label="Permalink to &quot;4️⃣ 删除未使用的数据卷&quot;">​</a></h5><p><img src="http://image.yangeit.cn/i/2023/05/14/5469612940569089249.png" alt=""></p><h4 id="案例-给nginx挂载数据卷" tabindex="-1">案例-给nginx挂载数据卷 <a class="header-anchor" href="#案例-给nginx挂载数据卷" aria-label="Permalink to &quot;案例-给nginx挂载数据卷&quot;">​</a></h4><p><strong>需求</strong>：创建一个nginx容器，修改容器内的<code>html目录内的index.html内容</code>🎯</p><p><strong>分析</strong>：上个案例中，我们进入nginx容器内部，已经知道nginx的html目录所在位置<code>/usr/share/nginx/html</code> ，我们需要把<code>这个目录</code>挂载到html这个数据卷上，方便操作其中的内容。</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731175155453.png" alt="宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录关联关系图"></p><p>宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录关联关系图</p><blockquote><p><strong>提示</strong>：运行容器时使用 -v 参数挂载数据卷</p></blockquote><p>步骤：</p><h5 id="_1️⃣-创建容器并挂载数据卷到容器内的html目录" tabindex="-1">1️⃣ 创建容器并挂载数据卷到容器内的HTML目录 <a class="header-anchor" href="#_1️⃣-创建容器并挂载数据卷到容器内的html目录" aria-label="Permalink to &quot;1️⃣ 创建容器并挂载数据卷到容器内的HTML目录&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">run</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--name</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">mn</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-v</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">html:/usr/share/nginx/html</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-p</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">80</span><span style="color:#E7EE98;">:80</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-d</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mn</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">html:/usr/share/nginx/html</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">80</span><span style="color:#032F62;">:80</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span></span></code></pre></div><p><img src="http://image.yangeit.cn/i/2023/05/14/5469614009302915640.png" alt=""></p><h5 id="_2️⃣-进入html数据卷所在位置-并修改html内容映射修改" tabindex="-1">2️⃣ 进入html数据卷所在位置，并修改HTML内容映射修改 <a class="header-anchor" href="#_2️⃣-进入html数据卷所在位置-并修改html内容映射修改" aria-label="Permalink to &quot;2️⃣ 进入html数据卷所在位置，并修改HTML内容映射修改&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># 查看html数据卷的位置</span></span>
<span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">volume</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">inspect</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">html</span></span>
<span class="line"><span style="color:#7B7F8B;"># 进入该目录</span></span>
<span class="line"><span style="color:#97E1F1;">cd</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">/var/lib/docker/volumes/html/_data</span></span>
<span class="line"><span style="color:#7B7F8B;"># 修改文件</span></span>
<span class="line"><span style="color:#62E884;">vi</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 查看html数据卷的位置</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">html</span></span>
<span class="line"><span style="color:#6A737D;"># 进入该目录</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/var/lib/docker/volumes/html/_data</span></span>
<span class="line"><span style="color:#6A737D;"># 修改文件</span></span>
<span class="line"><span style="color:#6F42C1;">vi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.html</span></span></code></pre></div><blockquote><p>注意：如果数据卷不存在，会自动创建</p></blockquote><h4 id="案例-给mysql挂载本地目录-🎯" tabindex="-1">案例-给MySQL挂载本地目录 🎯 <a class="header-anchor" href="#案例-给mysql挂载本地目录-🎯" aria-label="Permalink to &quot;案例-给MySQL挂载本地目录 🎯&quot;">​</a></h4><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下：</p><ul><li>带数据卷模式：宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录数据卷挂载</li><li>直接挂载模式：宿主机目录 ---&gt; 容器内目录目录挂载</li></ul><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731175155453.png" alt="宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录关联关系图"></p><p>宿主机目录 --&gt; 数据卷 ---&gt; 容器内目录关联关系图</p><p><strong>语法</strong>：</p><p><strong>目录挂载与数据卷挂载的语法是类似的：</strong></p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul><p><strong>需求：创建并运行一个MySQL容器，将宿主机目录直接挂载到容器</strong> 🎯</p><p>实现思路如下：</p><ol><li>在将课前资料中的<code>mysql.tar</code>文件上传到虚拟机，通过<code>load命令</code>加载为镜像</li><li>创建目录<code>/tmp/mysql/data</code></li><li>创建目录<code>/tmp/mysql/conf</code>，将课前资料提供的<code>hmy.cnf</code>文件上传到<code>/tmp/mysql/conf</code></li><li>去<code>DockerHub查阅资料</code>，<strong>创建并运行MySQL容器</strong>，要求： <ul><li>挂载<code>/tmp/mysql/data</code>到<code>mysql容器内数据存储目录</code></li><li>挂载<code>/tmp/mysql/conf/hmy.cnf</code>到<code>mysql容器的配置文件</code></li><li><strong>设置MySQL密码</strong> 👈</li></ul></li></ol><p><a href="http://image.yangeit.cn/i/2023/05/14/5469615986220996049.png" target="_blank" rel="noreferrer">点击查看运行容器命令open in new window</a></p><p>小结</p><p><strong>数据卷的作用：</strong></p><ul><li>将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</li></ul><p><strong>数据卷操作：</strong></p><ul><li>docker volume create：创建数据卷</li><li>docker volume ls：查看所有数据卷</li><li>docker volume inspect：查看数据卷详细信息，包括关联的宿主机目录位置</li><li>docker volume rm：删除指定数据卷</li><li>docker volume prune：删除所有未使用的数据卷</li></ul><p><strong>docker run的命令中通过 -v 参数挂载文件或目录到容器中：</strong></p><ul><li>-v volume名称:容器内目录</li><li>-v 宿主机文件:容器内文</li><li>-v 宿主机目录:容器内目录</li></ul><p><strong>数据卷挂载与目录直接挂载的</strong></p><ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li></ul><p>作业</p><p>🚩 1. 将上述的案例1、案例2、案例3依次练习一遍必练</p><h2 id="_3-dockerfile自定义镜像" tabindex="-1">3.Dockerfile自定义镜像 <a class="header-anchor" href="#_3-dockerfile自定义镜像" aria-label="Permalink to &quot;3.Dockerfile自定义镜像&quot;">​</a></h2><p>Dockerfile自定义镜像</p><p><strong>常见的镜像在DockerHub就能找到</strong>，但是我们<strong>自己写的项目</strong>就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解<strong>镜像的结构</strong>才行。</p><h3 id="_3-1-镜像结构" tabindex="-1">3.1.镜像结构 <a class="header-anchor" href="#_3-1-镜像结构" aria-label="Permalink to &quot;3.1.镜像结构&quot;">​</a></h3><p>镜像是将应用程序及其需要的<strong>系统函数库、环境、配置、依赖</strong>打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731175806273.png" alt="MySQL镜像的组成结构"></p><p>MySQL镜像的组成结构</p><p>简单来说，<strong>镜像</strong>就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等<strong>组合</strong>，然后编写好启动脚本打包在一起<strong>形成的文件</strong>。</p><p>我们要<strong>构建镜像</strong>，其实就是<strong>实现上述打包的过程</strong>。</p><h3 id="_3-2-dockerfile语法" tabindex="-1">3.2.Dockerfile语法 <a class="header-anchor" href="#_3-2-dockerfile语法" aria-label="Permalink to &quot;3.2.Dockerfile语法&quot;">​</a></h3><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><blockquote><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是<strong>Dockerfile文件</strong>。</p></blockquote><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731175806273.png" alt="MySQL镜像的组成结构"></p><p>MySQL镜像的组成结构</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。<strong>每一个指令都会形成一层Layer</strong>(上图)。</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731180321133.png" alt="image-20210731180321133"></p><p>image-20210731180321133</p><p>更新详细语法说明，请参考官网文档： <a href="https://docs.docker.com/engine/reference/builder" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/builderopen in new window</a></p><p><strong>实操：构建Java项目操作</strong></p><h4 id="案例1-基于ubuntu构建java项目" tabindex="-1">案例1-基于Ubuntu构建Java项目 <a class="header-anchor" href="#案例1-基于ubuntu构建java项目" aria-label="Permalink to &quot;案例1-基于Ubuntu构建Java项目&quot;">​</a></h4><p><strong>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</strong> 🎯</p><ul><li><p>步骤1：新建一个空文件夹<code>docker-demo</code></p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801101207444.png" alt="image-20210801101207444"></p><p>image-20210801101207444</p></li><li><p>步骤2：拷贝课前资料中的<code>docker-demo.jar</code>文件到<code>docker-demo</code>这个目录</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801101314816.png" alt="image-20210801101314816"></p><p>image-20210801101314816</p></li><li><p>步骤3：拷贝课前资料中的<code>jdk8.tar.gz</code>文件到<code>docker-demo</code>这个目录</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801101410200.png" alt="image-20210801101410200"></p><p>image-20210801101410200</p></li><li><p>步骤4：拷贝课前资料提供的<code>Dockerfile</code>到<code>docker-demo</code>这个目录</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801101455590.png" alt="image-20210801101455590"></p><p>image-20210801101455590</p><p>其中的内容如下：</p><div class="language-docker vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># 指定基础镜像</span></span>
<span class="line"><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> ubuntu:16.04</span></span>
<span class="line"><span style="color:#7B7F8B;"># 配置环境变量，JDK的安装目录</span></span>
<span class="line"><span style="color:#F286C4;">ENV</span><span style="color:#F6F6F4;"> JAVA_DIR=/usr/local</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 拷贝jdk和java项目的包</span></span>
<span class="line"><span style="color:#F286C4;">COPY</span><span style="color:#F6F6F4;"> ./jdk8.tar.gz $JAVA_DIR/</span></span>
<span class="line"><span style="color:#F286C4;">COPY</span><span style="color:#F6F6F4;"> ./docker-demo.jar /tmp/app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 安装JDK</span></span>
<span class="line"><span style="color:#F286C4;">RUN</span><span style="color:#F6F6F4;"> cd $JAVA_DIR \\</span></span>
<span class="line"><span style="color:#F6F6F4;"> &amp;&amp; tar -xf ./jdk8.tar.gz \\</span></span>
<span class="line"><span style="color:#F6F6F4;"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 配置环境变量</span></span>
<span class="line"><span style="color:#F286C4;">ENV</span><span style="color:#F6F6F4;"> JAVA_HOME=$JAVA_DIR/java8</span></span>
<span class="line"><span style="color:#F286C4;">ENV</span><span style="color:#F6F6F4;"> PATH=$PATH:$JAVA_HOME/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 暴露端口</span></span>
<span class="line"><span style="color:#F286C4;">EXPOSE</span><span style="color:#F6F6F4;"> 8090</span></span>
<span class="line"><span style="color:#7B7F8B;"># 入口，java项目的启动命令</span></span>
<span class="line"><span style="color:#F286C4;">ENTRYPOINT</span><span style="color:#F6F6F4;"> java -jar /tmp/app.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 指定基础镜像</span></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> ubuntu:16.04</span></span>
<span class="line"><span style="color:#6A737D;"># 配置环境变量，JDK的安装目录</span></span>
<span class="line"><span style="color:#D73A49;">ENV</span><span style="color:#24292E;"> JAVA_DIR=/usr/local</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 拷贝jdk和java项目的包</span></span>
<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> ./jdk8.tar.gz $JAVA_DIR/</span></span>
<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> ./docker-demo.jar /tmp/app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 安装JDK</span></span>
<span class="line"><span style="color:#D73A49;">RUN</span><span style="color:#24292E;"> cd $JAVA_DIR \\</span></span>
<span class="line"><span style="color:#24292E;"> &amp;&amp; tar -xf ./jdk8.tar.gz \\</span></span>
<span class="line"><span style="color:#24292E;"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 配置环境变量</span></span>
<span class="line"><span style="color:#D73A49;">ENV</span><span style="color:#24292E;"> JAVA_HOME=$JAVA_DIR/java8</span></span>
<span class="line"><span style="color:#D73A49;">ENV</span><span style="color:#24292E;"> PATH=$PATH:$JAVA_HOME/bin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="color:#D73A49;">EXPOSE</span><span style="color:#24292E;"> 8090</span></span>
<span class="line"><span style="color:#6A737D;"># 入口，java项目的启动命令</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> java -jar /tmp/app.jar</span></span></code></pre></div></li><li><p>步骤5：进入<code>docker-demo</code></p><p>将准备好的<code>docker-demo</code>上传到<code>虚拟机任意目录</code>，然后<code>进入docker-demo</code>目录下</p></li><li><p>步骤6：运行命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">build</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-t</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">javaweb:1.0</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">javaweb:1.0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span></code></pre></div></li></ul><p><img src="https://www.woodscodeworld.com/docker/d3.png" alt="build和run区别"></p><p>build和run区别</p><blockquote><p>通过docker build命令来构建一个docker的镜像文件</p><p>-t : 指定构建后的image的名字和标签，我们一般把标签用来表示版本；</p><p>docker build默认会查找构建路径下的Dockerfile同名文件；</p></blockquote><p>最后访问 <a href="http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%60%E8%99%9A%E6%8B%9F%E6%9C%BAip%60" target="_blank" rel="noreferrer">http://192.168.150.101:8090/hello/count，其中的ip改成你的\`虚拟机ip\`open in new window</a></p><h4 id="案例2-基于java8构建java项目" tabindex="-1">案例2-基于java8构建Java项目 <a class="header-anchor" href="#案例2-基于java8构建java项目" aria-label="Permalink to &quot;案例2-基于java8构建Java项目&quot;">​</a></h4><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些<strong>安装了部分软件的基础镜像上做改造</strong>。</p><blockquote><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p></blockquote><p><strong>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</strong> 🎯</p><p>实现思路如下：</p><ul><li><p>① 新建一个空的目录，然后在目录中新建一个文件，命名为<code>Dockerfile</code></p></li><li><p>② 拷贝课前资料提供的<code>docker-demo.jar</code>到这个目录中</p></li><li><p>③ 编写Dockerfile文件：</p><ul><li><p>a ）<strong>基于java:8-alpine作为基础镜像</strong>现成的</p></li><li><p>b ）将app.jar拷贝到镜像中</p></li><li><p>c ）暴露端口</p></li><li><p>d ）编写入口ENTRYPOINT 内容如下：</p><div class="language-docker vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> java:8-alpine</span></span>
<span class="line"><span style="color:#F286C4;">COPY</span><span style="color:#F6F6F4;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="color:#F286C4;">EXPOSE</span><span style="color:#F6F6F4;"> 8090</span></span>
<span class="line"><span style="color:#F286C4;">ENTRYPOINT</span><span style="color:#F6F6F4;"> java -jar /tmp/app.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> java:8-alpine</span></span>
<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="color:#D73A49;">EXPOSE</span><span style="color:#24292E;"> 8090</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> java -jar /tmp/app.jar</span></span></code></pre></div></li></ul></li><li><p>④ 使用<code>docker build</code>命令构建镜像</p></li><li><p>⑤ 使用<code>docker run</code>创建容器并运行</p></li></ul><p><img src="https://www.woodscodeworld.com/docker/d3.png" alt="build和run区别"></p><p>build和run区别</p><p>小结</p><ol><li><p>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</p></li><li><p>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</p></li><li><p>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</p></li></ol><h2 id="_4-docker-compose" tabindex="-1">4.Docker-Compose <a class="header-anchor" href="#_4-docker-compose" aria-label="Permalink to &quot;4.Docker-Compose&quot;">​</a></h2><h3 id="_4-1-初识和安装dockercompose" tabindex="-1">4.1.初识和安装DockerCompose <a class="header-anchor" href="#_4-1-初识和安装dockercompose" aria-label="Permalink to &quot;4.1.初识和安装DockerCompose&quot;">​</a></h3><p>初识和安装DockerCompose</p><p><strong>Docker Compose</strong>可以基于Compose文件 帮我们<strong>快速的部署分布式应用</strong>，而无需手动一个个创建和运行容器！分布式部署小帮手</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731180921742.png" alt="Docker Compose"></p><p>Docker Compose</p><p><strong>Compose文件是一个文本文件</strong>，通过指令定义集群中的每个容器如何运行相当于n个run方法。格式如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">version: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3.8</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;"> services:</span></span>
<span class="line"><span style="color:#F6F6F4;">  mysql:</span></span>
<span class="line"><span style="color:#F6F6F4;">    image: mysql:</span><span style="color:#BF9EEE;">5.7</span><span style="color:#F6F6F4;">.</span><span style="color:#BF9EEE;">25</span></span>
<span class="line"><span style="color:#F6F6F4;">    environment:</span></span>
<span class="line"><span style="color:#F6F6F4;">     MYSQL_ROOT_PASSWORD: </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    volumes:</span></span>
<span class="line"><span style="color:#F6F6F4;">     - </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/tmp/mysql/data:/var/lib/mysql</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">     - </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  web:</span></span>
<span class="line"><span style="color:#F6F6F4;">    build: .</span></span>
<span class="line"><span style="color:#F6F6F4;">    ports:</span></span>
<span class="line"><span style="color:#F6F6F4;">     - </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">8090:8090</span><span style="color:#DEE492;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">version: </span><span style="color:#032F62;">&quot;3.8&quot;</span></span>
<span class="line"><span style="color:#24292E;"> services:</span></span>
<span class="line"><span style="color:#24292E;">  mysql:</span></span>
<span class="line"><span style="color:#24292E;">    image: mysql:</span><span style="color:#005CC5;">5.7</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">25</span></span>
<span class="line"><span style="color:#24292E;">    environment:</span></span>
<span class="line"><span style="color:#24292E;">     MYSQL_ROOT_PASSWORD: </span><span style="color:#005CC5;">123</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    volumes:</span></span>
<span class="line"><span style="color:#24292E;">     - </span><span style="color:#032F62;">&quot;/tmp/mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line"><span style="color:#24292E;">     - </span><span style="color:#032F62;">&quot;/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf&quot;</span></span>
<span class="line"><span style="color:#24292E;">  web:</span></span>
<span class="line"><span style="color:#24292E;">    build: .</span></span>
<span class="line"><span style="color:#24292E;">    ports:</span></span>
<span class="line"><span style="color:#24292E;">     - </span><span style="color:#032F62;">&quot;8090:8090&quot;</span></span></code></pre></div><p>上面的Compose文件就描述一个项目，其中包含两个容器：</p><ul><li>mysql：一个基于<code>mysql:5.7.25</code>镜像构建的容器，并且挂载了两个目录</li><li>web：一个基于<code>docker build</code>临时构建的镜像容器，映射端口时8090</li></ul><p>DockerCompose的详细语法参考官网：<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noreferrer">https://docs.docker.com/compose/compose-file/open in new window</a></p><p>**其实DockerCompose文件可以看做是将多个docker run命令写到一个文件，只是语法稍有差异。**解释非常精辟</p><p>课堂作业</p><p>🚩 1. 能流利的说出DockerCompose的作用和定义，以及完成DockerCompose的安装必练</p><h3 id="_4-3-部署微服务集群" tabindex="-1">4.3.部署微服务集群 <a class="header-anchor" href="#_4-3-部署微服务集群" aria-label="Permalink to &quot;4.3.部署微服务集群&quot;">​</a></h3><p>前言</p><p>需求：将之前学习的cloud-demo微服务集群利用DockerCompose部署</p><p><strong>实现思路</strong>：</p><ol><li>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件</li><li>修改自己的cloud-demo项目，将数据库、nacos地址都命名为docker-compose中的服务名</li><li>使用maven打包工具，将项目中的每个微服务都打包为app.jar</li><li>将打包好的app.jar拷贝到cloud-demo中的每一个对应的子目录中</li><li>将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署</li></ol><p><strong>代码操作</strong></p><h4 id="_4-3-1-compose文件" tabindex="-1">4.3.1.compose文件 <a class="header-anchor" href="#_4-3-1-compose文件" aria-label="Permalink to &quot;4.3.1.compose文件&quot;">​</a></h4><p>查看课前资料提供的cloud-demo文件夹，里面已经编写好了docker-compose文件，而且每个微服务都准备了一个独立的目录：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210731181341330.png" alt="image-20210731181341330"></p><p>image-20210731181341330</p><p>内容如下：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">version</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3.2</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;">services</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">nacos</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">image</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nacos/nacos-server</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">environment</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">MODE</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">standalone</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">ports</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">8848:8848</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">mysql</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">image</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">mysql:5.7.25</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">environment</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">MYSQL_ROOT_PASSWORD</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">volumes</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">$PWD/mysql/data:/var/lib/mysql</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">$PWD/mysql/conf:/etc/mysql/conf.d/</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">userservice</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">build</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">./user-service</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">orderservice</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">build</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">./order-service</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">gateway</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">build</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">./gateway</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">ports</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10010:10010</span><span style="color:#DEE492;">&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">version</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;3.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#22863A;">services</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos/nacos-server</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">environment</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">MODE</span><span style="color:#24292E;">: </span><span style="color:#032F62;">standalone</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;8848:8848&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">mysql</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">image</span><span style="color:#24292E;">: </span><span style="color:#032F62;">mysql:5.7.25</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">environment</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">MYSQL_ROOT_PASSWORD</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">123</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">volumes</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;$PWD/mysql/data:/var/lib/mysql&quot;</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">userservice</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">build</span><span style="color:#24292E;">: </span><span style="color:#032F62;">./user-service</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">orderservice</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">build</span><span style="color:#24292E;">: </span><span style="color:#032F62;">./order-service</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">gateway</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">build</span><span style="color:#24292E;">: </span><span style="color:#032F62;">./gateway</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">ports</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      - </span><span style="color:#032F62;">&quot;10010:10010&quot;</span></span></code></pre></div><p>可以看到，其中包含5个service服务：</p><ul><li><code>nacos</code>：作为注册中心和配置中心 <ul><li><code>image: nacos/nacos-server</code>： 基于nacos/nacos-server镜像构建</li><li><code>environment</code>：环境变量 <ul><li><code>MODE: standalone</code>：单点模式启动</li></ul></li><li><code>ports</code>：端口映射，这里暴露了8848端口</li></ul></li><li><code>mysql</code>：数据库 <ul><li><code>image: mysql:5.7.25</code>：镜像版本是mysql:5.7.25</li><li><code>environment</code>：环境变量 <ul><li><code>MYSQL_ROOT_PASSWORD: 123</code>：设置数据库root账户的密码为123</li></ul></li><li><code>volumes</code>：数据卷挂载，这里挂载了mysql的data、conf目录，其中有我提前准备好的数据</li></ul></li><li><code>userservice</code>、<code>orderservice</code>、<code>gateway</code>：都是基于Dockerfile临时构建的</li></ul><p>查看mysql目录，可以看到其中已经准备好了cloud_order、cloud_user表：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801095205034.png" alt="image-20210801095205034"></p><p>image-20210801095205034</p><p>查看微服务目录，可以看到都包含Dockerfile文件：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801095320586.png" alt="image-20210801095320586"></p><p>image-20210801095320586</p><p>内容如下：</p><div class="language-docker vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">FROM</span><span style="color:#F6F6F4;"> java:8-alpine</span></span>
<span class="line"><span style="color:#F286C4;">COPY</span><span style="color:#F6F6F4;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="color:#F286C4;">ENTRYPOINT</span><span style="color:#F6F6F4;"> java -jar /tmp/app.jar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> java:8-alpine</span></span>
<span class="line"><span style="color:#D73A49;">COPY</span><span style="color:#24292E;"> ./app.jar /tmp/app.jar</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> java -jar /tmp/app.jar</span></span></code></pre></div><h4 id="_4-3-2-修改微服务配置" tabindex="-1">4.3.2.修改微服务配置 <a class="header-anchor" href="#_4-3-2-修改微服务配置" aria-label="Permalink to &quot;4.3.2.修改微服务配置&quot;">​</a></h4><p>因为微服务将来要部署为docker容器，而容器之间互联不是通过IP地址，而是通过容器名。这里我们将order-service、user-service、gateway服务的mysql、nacos地址都修改为基于容器名的访问。</p><p>如下所示：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">spring</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">datasource</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">url</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">username</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">root</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">password</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">driver-class-name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">application</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">orderservice</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">cloud</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">nacos</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">server-addr</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nacos:8848</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># nacos服务地址</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">datasource</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">url</span><span style="color:#24292E;">: </span><span style="color:#032F62;">jdbc:mysql://mysql:3306/cloud_order?useSSL=false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">root</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">123</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">driver-class-name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">application</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">orderservice</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">cloud</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos:8848</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># nacos服务地址</span></span></code></pre></div><h4 id="_4-3-3-打包" tabindex="-1">4.3.3.打包 <a class="header-anchor" href="#_4-3-3-打包" aria-label="Permalink to &quot;4.3.3.打包&quot;">​</a></h4><p>接下来需要将我们的每个微服务都打包。因为之前查看到Dockerfile中的jar包名称都是app.jar，因此我们的每个微服务都需要用这个名称。</p><p>可以通过修改pom.xml中的打包名称来实现，每个微服务都需要修改：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">build</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">&lt;!-- 服务打包的最终名称 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">finalName</span><span style="color:#F6F6F4;">&gt;app&lt;/</span><span style="color:#F286C4;">finalName</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">plugins</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">plugin</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.springframework.boot&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">plugin</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/</span><span style="color:#F286C4;">plugins</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">build</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- 服务打包的最终名称 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">finalName</span><span style="color:#24292E;">&gt;app&lt;/</span><span style="color:#22863A;">finalName</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">plugin</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">plugins</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">build</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>打包后：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801095951030.png" alt="image-20210801095951030"></p><p>image-20210801095951030</p><h4 id="_4-3-4-拷贝jar包到部署目录" tabindex="-1">4.3.4.拷贝jar包到部署目录 <a class="header-anchor" href="#_4-3-4-拷贝jar包到部署目录" aria-label="Permalink to &quot;4.3.4.拷贝jar包到部署目录&quot;">​</a></h4><p>编译打包好的app.jar文件，需要放到Dockerfile的同级目录中。注意：每个微服务的app.jar放到与服务名称对应的目录，别搞错了。</p><p>user-service：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801100201253.png" alt="image-20210801100201253"></p><p>image-20210801100201253</p><p>order-service：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801100231495.png" alt="image-20210801100231495"></p><p>image-20210801100231495</p><p>gateway：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801100308102.png" alt="image-20210801100308102"></p><p>image-20210801100308102</p><h4 id="_4-3-5-部署" tabindex="-1">4.3.5.部署 <a class="header-anchor" href="#_4-3-5-部署" aria-label="Permalink to &quot;4.3.5.部署&quot;">​</a></h4><p>最后，我们需要将文件整个cloud-demo文件夹上传到虚拟机中，理由DockerCompose部署。</p><p>上传到任意目录：</p><p><img src="http://image.yangeit.cn/i/2023/05/14/image-20210801100955653.png" alt="image-20210801100955653"></p><p>image-20210801100955653</p><p>部署：</p><p>进入cloud-demo目录，然后运行下面的命令：</p><p><strong>构建结果</strong></p><p><img src="http://image.yangeit.cn/i/2023/05/15/5469969315623080473.png" alt="构建结果"></p><p>构建结果</p><p><strong>重启服务</strong></p><p><img src="http://image.yangeit.cn/i/2023/05/15/5469968103951572647.png" alt="重启服务"></p><p>重启服务</p><p><strong>查看日志</strong></p><p><img src="http://image.yangeit.cn/i/2023/05/15/5469968515530233495.png" alt="查看日志"></p><p>查看日志</p><p><strong>浏览器运行效果</strong></p><p><img src="http://image.yangeit.cn/i/2023/05/15/5469968761274503451.png" alt="浏览器运行效果"></p><p>浏览器运行效果</p><h2 id="_5-docker镜像仓库" tabindex="-1">5.Docker镜像仓库 <a class="header-anchor" href="#_5-docker镜像仓库" aria-label="Permalink to &quot;5.Docker镜像仓库&quot;">​</a></h2><h3 id="_5-2-推送、拉取镜像" tabindex="-1">5.2.推送、拉取镜像 <a class="header-anchor" href="#_5-2-推送、拉取镜像" aria-label="Permalink to &quot;5.2.推送、拉取镜像&quot;">​</a></h3><p>推送镜像到私有镜像服务必须先tag，步骤如下：</p><p>① 重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/一定要重命名，ip为虚拟机IP</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">#  docker tag nginx:latest 虚拟机ip:8080/nginx:1.0 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">tag</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nginx:latest</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">192.168</span><span style="color:#E7EE98;">.150.101:8080/nginx:1.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#  docker tag nginx:latest 虚拟机ip:8080/nginx:1.0 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:latest</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.150.101:8080/nginx:1.0</span></span></code></pre></div><p>② 推送镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">push</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">192.168</span><span style="color:#E7EE98;">.150.101:8080/nginx:1.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.150.101:8080/nginx:1.0</span></span></code></pre></div><p>③ 拉取镜像</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">docker</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">pull</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">192.168</span><span style="color:#E7EE98;">.150.101:8080/nginx:1.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">192.168</span><span style="color:#032F62;">.150.101:8080/nginx:1.0</span></span></code></pre></div>`,434),e=[o];function t(r,c,i,y,g,d){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{m as __pageData,h as default};
