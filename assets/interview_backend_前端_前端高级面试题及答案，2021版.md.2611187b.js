import{_ as s,o as a,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端高级面试题及答案，2021版.md","filePath":"interview/backend/前端/前端高级面试题及答案，2021版.md"}'),o={name:"interview/backend/前端/前端高级面试题及答案，2021版.md"},t=e(`<h3 id="_1、rem与em的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#1rem%E4%B8%8Eem%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、rem与em的区别</a> <a class="header-anchor" href="#_1、rem与em的区别" aria-label="Permalink to &quot;[1、rem与em的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#1rem与em的区别)&quot;">​</a></h3><blockquote><p>rem是根据根的font-size变化，而em是根据父级的font-size变化</p></blockquote><p><strong>rem：</strong></p><p>相对于根元素html的font-size，假如html为font-size：12px，那么，在其当中的div设置为font-size：2rem,就是当中的div为24px</p><p><strong>em：</strong></p><p>相对于父元素计算，假如某个p元素为font-size:12px,在它内部有个span标签，设置font-size：2em,那么，这时候的span字体大小为：12*2=24px</p><h3 id="_2、git常用的命令" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#2git%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4" target="_blank" rel="noreferrer">2、git常用的命令</a> <a class="header-anchor" href="#_2、git常用的命令" aria-label="Permalink to &quot;[2、git常用的命令](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#2git常用的命令)&quot;">​</a></h3><p><strong>1、</strong> 从远程库克隆到本地：git clone 网站上的仓库地址</p><p><strong>2、</strong> 新增文件的命令：git add .</p><p><strong>3、</strong> 提交文件的命令：git commit –m或者git commit –a</p><p><strong>4、</strong> 查看工作区状况：git status –s</p><p><strong>5、</strong> 拉取合并远程分支的操作：git fetch/git merge或者git pull</p><p><strong>6、</strong> 查看提交记录命令：git reflog</p><h3 id="_3、sql语句的分类" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#3sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E5%88%86%E7%B1%BB" target="_blank" rel="noreferrer">3、SQL语句的分类</a> <a class="header-anchor" href="#_3、sql语句的分类" aria-label="Permalink to &quot;[3、SQL语句的分类](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#3sql语句的分类)&quot;">​</a></h3><p><strong>1、</strong> DDL:数据定义语句 <code>CREATE/DROP/ALTER…</code></p><p><strong>2、</strong> DCL:数据控制语句 <code>GRANT…</code></p><p><strong>3、</strong> DML:操作操作语句 <code>INSERT/UPDATE/DELETE</code></p><p><strong>4、</strong> DQL:查询语句 <code>SELECT</code></p><h3 id="_4、如何创建一个没有-prototype-原型-的对象" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#4%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%B2%A1%E6%9C%89-prototype%E5%8E%9F%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">4、如何创建一个没有 prototype(原型)的对象？</a> <a class="header-anchor" href="#_4、如何创建一个没有-prototype-原型-的对象" aria-label="Permalink to &quot;[4、如何创建一个没有 prototype(原型)的对象？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#4如何创建一个没有-prototype原型的对象)&quot;">​</a></h3><p>我们可以使用<code>Object.create</code>方法创建没有原型的对象。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const o1 = {};</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(o1.toString()); // [object Object]</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">const o2 = Object.create(null);</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(o2.toString());</span></span>
<span class="line"><span style="color:#f6f6f4;">// throws an error o2.toString is not a function</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const o1 = {};</span></span>
<span class="line"><span style="color:#24292e;">console.log(o1.toString()); // [object Object]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const o2 = Object.create(null);</span></span>
<span class="line"><span style="color:#24292e;">console.log(o2.toString());</span></span>
<span class="line"><span style="color:#24292e;">// throws an error o2.toString is not a function</span></span></code></pre></div><h3 id="_5、什么是作用域" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#5%E4%BB%80%E4%B9%88%E6%98%AF%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noreferrer">5、什么是作用域？</a> <a class="header-anchor" href="#_5、什么是作用域" aria-label="Permalink to &quot;[5、什么是作用域？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#5什么是作用域)&quot;">​</a></h3><p>JavaScript 中的作用域是我们可以有效访问变量或函数的区域。JS 有三种类型的作用域：<strong>全局作用域</strong>、<strong>函数作用域</strong>和<strong>块作用域(ES6)</strong>。</p><p><strong>全局作用域</strong>——在全局命名空间中声明的变量或函数位于全局作用域中，因此在代码中的任何地方都可以访问它们。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//global namespace</span></span>
<span class="line"><span style="color:#f6f6f4;">var g = &quot;global&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">function globalFunc(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  function innerFunc(){</span></span>
<span class="line"><span style="color:#f6f6f4;">    console.log(g); // can access &quot;g&quot; because &quot;g&quot; is a global variable</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;"> innerFunc();</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//global namespace</span></span>
<span class="line"><span style="color:#24292e;">var g = &quot;global&quot;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">function globalFunc(){</span></span>
<span class="line"><span style="color:#24292e;">  function innerFunc(){</span></span>
<span class="line"><span style="color:#24292e;">    console.log(g); // can access &quot;g&quot; because &quot;g&quot; is a global variable</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;"> innerFunc();</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p><strong>函数作用域</strong>——在函数中声明的变量、函数和参数可以在函数内部访问，但不能在函数外部访问。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function myFavoriteFunc(a) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  if (true) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    var b = &quot;Hello &quot; + a;</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;">  return b;</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">myFavoriteFunc(&quot;World&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(a); // Throws a ReferenceError &quot;a&quot; is not defined</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(b); // does not continue here</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function myFavoriteFunc(a) {</span></span>
<span class="line"><span style="color:#24292e;">  if (true) {</span></span>
<span class="line"><span style="color:#24292e;">    var b = &quot;Hello &quot; + a;</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;">  return b;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">myFavoriteFunc(&quot;World&quot;);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">console.log(a); // Throws a ReferenceError &quot;a&quot; is not defined</span></span>
<span class="line"><span style="color:#24292e;">console.log(b); // does not continue here</span></span></code></pre></div><ul><li><strong>块作用域</strong>-在块<code>{}</code>中声明的变量（<code>let，const</code>）只能在其中访问。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function testBlock(){</span></span>
<span class="line"><span style="color:#f6f6f4;">   if(true){</span></span>
<span class="line"><span style="color:#f6f6f4;">     let z = 5;</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;">   return z; </span></span>
<span class="line"><span style="color:#f6f6f4;"> }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"> testBlock(); // Throws a ReferenceError &quot;z&quot; is not defined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function testBlock(){</span></span>
<span class="line"><span style="color:#24292e;">   if(true){</span></span>
<span class="line"><span style="color:#24292e;">     let z = 5;</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;">   return z; </span></span>
<span class="line"><span style="color:#24292e;"> }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> testBlock(); // Throws a ReferenceError &quot;z&quot; is not defined</span></span></code></pre></div><p>作用域也是一组用于查找变量的规则。如果变量在当前作用域中不存在，它将向外部作用域中查找并搜索，如果该变量不存在，它将再次查找直到到达全局作用域，如果找到，则可以使用它，否则引发错误，这种查找过程也称为<strong>作用域链</strong>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">/* 作用域链</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"> 内部作用域-&gt;外部作用域-&gt; 全局作用域</span></span>
<span class="line"><span style="color:#f6f6f4;">*/</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">// 全局作用域</span></span>
<span class="line"><span style="color:#f6f6f4;">var variable1 = &quot;Comrades&quot;;   </span></span>
<span class="line"><span style="color:#f6f6f4;">var variable2 = &quot;Sayonara&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">function outer(){</span></span>
<span class="line"><span style="color:#f6f6f4;">// 外部作用域</span></span>
<span class="line"><span style="color:#f6f6f4;">var variable1 = &quot;World&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">function inner(){</span></span>
<span class="line"><span style="color:#f6f6f4;">// 内部作用域</span></span>
<span class="line"><span style="color:#f6f6f4;">  var variable2 = &quot;Hello&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">  console.log(variable2 + &quot; &quot; + variable1);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;">inner();</span></span>
<span class="line"><span style="color:#f6f6f4;">}  </span></span>
<span class="line"><span style="color:#f6f6f4;">outer(); // Hello World</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/* 作用域链</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> 内部作用域-&gt;外部作用域-&gt; 全局作用域</span></span>
<span class="line"><span style="color:#24292e;">*/</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 全局作用域</span></span>
<span class="line"><span style="color:#24292e;">var variable1 = &quot;Comrades&quot;;   </span></span>
<span class="line"><span style="color:#24292e;">var variable2 = &quot;Sayonara&quot;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">function outer(){</span></span>
<span class="line"><span style="color:#24292e;">// 外部作用域</span></span>
<span class="line"><span style="color:#24292e;">var variable1 = &quot;World&quot;;</span></span>
<span class="line"><span style="color:#24292e;">function inner(){</span></span>
<span class="line"><span style="color:#24292e;">// 内部作用域</span></span>
<span class="line"><span style="color:#24292e;">  var variable2 = &quot;Hello&quot;;</span></span>
<span class="line"><span style="color:#24292e;">  console.log(variable2 + &quot; &quot; + variable1);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">inner();</span></span>
<span class="line"><span style="color:#24292e;">}  </span></span>
<span class="line"><span style="color:#24292e;">outer(); // Hello World</span></span></code></pre></div><h3 id="_6、实现异步的方式有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#6%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">6、实现异步的方式有哪些？</a> <a class="header-anchor" href="#_6、实现异步的方式有哪些" aria-label="Permalink to &quot;[6、实现异步的方式有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#6实现异步的方式有哪些)&quot;">​</a></h3><p><strong>1、</strong> 回调函数模式：将需要异步执行的函数作为回调函数执行，其缺点在于处理复杂逻辑异步逻辑时，会造成回调地狱(回调嵌套层数太多，代码结构混乱)；</p><p><strong>2、</strong> 事件监听模式：采用事件驱动的思想，当某一事件发生时触发执行异步函数，其缺点在于整个代码全部得变为事件驱动模式，难以分辨主流程；</p><p><strong>3、</strong> 发布订阅模式：当异步任务执行完成时发布消息给信号中心，其他任务通过在信号中心中订阅消息来确定自己是否开始执行；</p><p><strong>4、</strong> Promise(ES6)：<code>Promise</code>对象共有三种状态<code>pending</code>(初始化状态)、<code>fulfilled</code>(成功状态)、<code>rejected</code>(失败状态)。</p><p><strong>5、</strong> async/await(ES7)：基于<code>Promise</code>实现的异步函数； （6）利用生成器实现。</p><h3 id="_7、如何处理-html5-新标签的浏览器兼容问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#7%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86-html5-%E6%96%B0%E6%A0%87%E7%AD%BE%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">7、如何处理 HTML5 新标签的浏览器兼容问题？</a> <a class="header-anchor" href="#_7、如何处理-html5-新标签的浏览器兼容问题" aria-label="Permalink to &quot;[7、如何处理 HTML5 新标签的浏览器兼容问题？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#7如何处理-html5-新标签的浏览器兼容问题)&quot;">​</a></h3><p>html</p><p>IE8/IE7/IE6 支持通过 document.createElement 方法产生的标签，可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，还需要添加标签默认的样式。</p><p>当然也可以直接使用成熟的框架，比如 html5shiv ;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">\`&lt;!--[if lt IE 9]&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;script&gt; src=&quot;https://cdn.jsdelivr.net/npm/html5shiv/dist/html5shiv.min.js&quot;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;![endif]--&gt;\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">\`&lt;!--[if lt IE 9]&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;script&gt; src=&quot;https://cdn.jsdelivr.net/npm/html5shiv/dist/html5shiv.min.js&quot;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;![endif]--&gt;\`</span></span></code></pre></div><p>[if lte IE 9]……[endif] 判断 IE 的版本，限定只有 IE9 以下浏览器版本需要执行的语句。</p><h3 id="_8、computed和watch有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#8computed%E5%92%8Cwatch%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">8、computed和watch有什么区别?</a> <a class="header-anchor" href="#_8、computed和watch有什么区别" aria-label="Permalink to &quot;[8、computed和watch有什么区别?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#8computed和watch有什么区别)&quot;">​</a></h3><p><strong>computed:</strong></p><p><strong>1、</strong> computed是计算属性,也就是计算值,它更多用于计算值的场景</p><p><strong>2、</strong> computed具有缓存性,computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时才会重新调用对应的getter来计算</p><p><strong>3、</strong> computed适用于计算比较消耗性能的计算场景</p><p><strong>watch:</strong></p><p><strong>1、</strong> 更多的是「观察」的作用,类似于某些数据的监听回调,用于观察props $emit或者本组件的值,当数据变化时来执行回调进行后续操作</p><p><strong>2、</strong> 无缓存性，页面重新渲染时值不变化也会执行</p><p><strong>小结:</strong></p><p><strong>1、</strong> 当我们要进行数值计算,而且依赖于其他数据，那么把这个数据设计为computed</p><p><strong>2、</strong> 如果你需要在某个数据变化时做一些事情，使用watch来观察这个数据变化</p><h3 id="_9、请写出一些前端性能优化的方式-越多越好" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#9%E8%AF%B7%E5%86%99%E5%87%BA%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E8%B6%8A%E5%A4%9A%E8%B6%8A%E5%A5%BD" target="_blank" rel="noreferrer">9、请写出一些前端性能优化的方式，越多越好</a> <a class="header-anchor" href="#_9、请写出一些前端性能优化的方式-越多越好" aria-label="Permalink to &quot;[9、请写出一些前端性能优化的方式，越多越好](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#9请写出一些前端性能优化的方式越多越好)&quot;">​</a></h3><p><strong>1、</strong> 减少dom操作</p><p><strong>2、</strong> 部署前，图片压缩，代码压缩</p><p><strong>3、</strong> 优化js代码结构，减少冗余代码</p><p><strong>4、</strong> 减少http请求，合理设置 HTTP缓存</p><p><strong>5、</strong> 使用内容分发cdn加速</p><p><strong>6、</strong> 静态资源缓存</p><p><strong>7、</strong> 图片延迟加载</p><p>可以看看这篇文章 <a href="https://juejin.im/post/5d5d1081e51d4561f17a50c1" target="_blank" rel="noreferrer">关于前端优化的一些方案</a></p><h3 id="_10、怎么理解宏任务-微任务" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#10%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1" target="_blank" rel="noreferrer">10、怎么理解宏任务，微任务？？？</a> <a class="header-anchor" href="#_10、怎么理解宏任务-微任务" aria-label="Permalink to &quot;[10、怎么理解宏任务，微任务？？？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题及答案，2021版.md#10怎么理解宏任务微任务)&quot;">​</a></h3><p><strong>1、</strong> 宏任务有：<code>script(整体代码)</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>I/O</code>、页面渲染；</p><p><strong>2、</strong> 微任务有：<code>Promise.then</code>、<code>Object.observe</code>、<code>MutationObserver</code>。</p><p><strong>3、</strong> 执行顺序大致如下：</p><p><strong>4、</strong> 主线程任务——&gt;宏任务——&gt;微任务——&gt;微任务里的宏任务——&gt;.......——&gt;直到任务全部完成</p><h3 id="_11、手动实现缓存方法" tabindex="-1">11、手动实现缓存方法 <a class="header-anchor" href="#_11、手动实现缓存方法" aria-label="Permalink to &quot;11、手动实现缓存方法&quot;">​</a></h3><h3 id="_12、css选择器" tabindex="-1">12、CSS选择器 <a class="header-anchor" href="#_12、css选择器" aria-label="Permalink to &quot;12、CSS选择器&quot;">​</a></h3><h3 id="_13、常见的浏览器内核比较" tabindex="-1">13、常见的浏览器内核比较 <a class="header-anchor" href="#_13、常见的浏览器内核比较" aria-label="Permalink to &quot;13、常见的浏览器内核比较&quot;">​</a></h3><h3 id="_14、判断数据类型的方法有哪些" tabindex="-1">14、判断数据类型的方法有哪些？ <a class="header-anchor" href="#_14、判断数据类型的方法有哪些" aria-label="Permalink to &quot;14、判断数据类型的方法有哪些？&quot;">​</a></h3><h3 id="_15、eventloop事件循环是什么" tabindex="-1">15、EventLoop事件循环是什么？ <a class="header-anchor" href="#_15、eventloop事件循环是什么" aria-label="Permalink to &quot;15、EventLoop事件循环是什么？&quot;">​</a></h3><h3 id="_16、js作用域及作用域链" tabindex="-1">16、JS作用域及作用域链 <a class="header-anchor" href="#_16、js作用域及作用域链" aria-label="Permalink to &quot;16、JS作用域及作用域链&quot;">​</a></h3><h3 id="_17、请解释什么是事件代理" tabindex="-1">17、请解释什么是事件代理 <a class="header-anchor" href="#_17、请解释什么是事件代理" aria-label="Permalink to &quot;17、请解释什么是事件代理&quot;">​</a></h3><h3 id="_18、如何通过原生js-判断一个元素当前是显示还是隐藏状态" tabindex="-1">18、如何通过原生js 判断一个元素当前是显示还是隐藏状态? <a class="header-anchor" href="#_18、如何通过原生js-判断一个元素当前是显示还是隐藏状态" aria-label="Permalink to &quot;18、如何通过原生js 判断一个元素当前是显示还是隐藏状态?&quot;">​</a></h3><h3 id="_19、jq中如何将一个jq对象转化为dom对象" tabindex="-1">19、Jq中如何将一个jq对象转化为dom对象？ <a class="header-anchor" href="#_19、jq中如何将一个jq对象转化为dom对象" aria-label="Permalink to &quot;19、Jq中如何将一个jq对象转化为dom对象？&quot;">​</a></h3><h3 id="_20、html5-的离线储存怎么使用-工作原理能不能解释一下" tabindex="-1">20、HTML5 的离线储存怎么使用，工作原理能不能解释一下？ <a class="header-anchor" href="#_20、html5-的离线储存怎么使用-工作原理能不能解释一下" aria-label="Permalink to &quot;20、HTML5 的离线储存怎么使用，工作原理能不能解释一下？&quot;">​</a></h3><h3 id="_21、html5新标签" tabindex="-1">21、HTML5新标签 <a class="header-anchor" href="#_21、html5新标签" aria-label="Permalink to &quot;21、HTML5新标签&quot;">​</a></h3><h3 id="_22、html5有哪些新特性-移除了那些元素-如何处理html5新标签的浏览器兼容问题-如何区分html和html5" tabindex="-1">22、HTML5有哪些新特性,移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5** <a class="header-anchor" href="#_22、html5有哪些新特性-移除了那些元素-如何处理html5新标签的浏览器兼容问题-如何区分html和html5" aria-label="Permalink to &quot;22、HTML5有哪些新特性,移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分HTML和HTML5**&quot;">​</a></h3><h3 id="_23、attribute和property的区别是什么" tabindex="-1">23、attribute和property的区别是什么？ <a class="header-anchor" href="#_23、attribute和property的区别是什么" aria-label="Permalink to &quot;23、attribute和property的区别是什么？&quot;">​</a></h3><h3 id="_24、typeof-typeof-返回数据类型是" tabindex="-1">24、typeof？typeof [ ]返回数据类型是？ <a class="header-anchor" href="#_24、typeof-typeof-返回数据类型是" aria-label="Permalink to &quot;24、typeof？typeof [ ]返回数据类型是？&quot;">​</a></h3><h3 id="_25、position-fixed-在android下无效怎么处理" tabindex="-1">25、position:fixed;在android下无效怎么处理？ <a class="header-anchor" href="#_25、position-fixed-在android下无效怎么处理" aria-label="Permalink to &quot;25、position:fixed;在android下无效怎么处理？&quot;">​</a></h3><h3 id="_26、在新窗口打开链接的方法是" tabindex="-1">26、在新窗口打开链接的方法是？ <a class="header-anchor" href="#_26、在新窗口打开链接的方法是" aria-label="Permalink to &quot;26、在新窗口打开链接的方法是？&quot;">​</a></h3><h3 id="_27、页面可见性-page-visibility-api-可以有哪些用途" tabindex="-1">27、页面可见性（Page Visibility API） 可以有哪些用途？ <a class="header-anchor" href="#_27、页面可见性-page-visibility-api-可以有哪些用途" aria-label="Permalink to &quot;27、页面可见性（Page Visibility API） 可以有哪些用途？&quot;">​</a></h3><h3 id="_28、function-prototype-call-方法的用途是什么" tabindex="-1">28、<code>Function.prototype.call</code> 方法的用途是什么？ <a class="header-anchor" href="#_28、function-prototype-call-方法的用途是什么" aria-label="Permalink to &quot;28、\`Function.prototype.call\` 方法的用途是什么？&quot;">​</a></h3><h3 id="_29、slice-splice" tabindex="-1">29、slice() splice()? <a class="header-anchor" href="#_29、slice-splice" aria-label="Permalink to &quot;29、slice() splice()?&quot;">​</a></h3><h3 id="_30、隐式和显式转换有什么区别" tabindex="-1">30、隐式和显式转换有什么区别）？ <a class="header-anchor" href="#_30、隐式和显式转换有什么区别" aria-label="Permalink to &quot;30、隐式和显式转换有什么区别）？&quot;">​</a></h3>`,88),l=[t];function p(r,c,i,d,f,u){return a(),n("div",null,l)}const g=s(o,[["render",p]]);export{h as __pageData,g as default};
