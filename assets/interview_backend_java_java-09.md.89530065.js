import{_ as a,o as e,c as t,V as o}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-09.md","filePath":"interview/backend/java/java-09.md"}'),r={name:"interview/backend/java/java-09.md"},s=o(`<h3 id="_1、线程和进程区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、线程和进程区别</a> <a class="header-anchor" href="#_1、线程和进程区别" aria-label="Permalink to &quot;[1、线程和进程区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#1线程和进程区别)&quot;">​</a></h3><p>什么是线程和进程?</p><p><strong>进程</strong></p><p>一个在内存中运行的应用程序。 每个正在系统上运行的程序都是一个进程</p><p><strong>线程</strong></p><p>进程中的一个执行任务（控制单元）， 它负责在程序里独立执行。</p><p>一个进程至少有一个线程，一个进程可以运行多个线程，多个线程可共享数据</p><p><strong>进程与线程的区别</strong></p><p><strong>1、</strong> 根本区别：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位</p><p><strong>2、</strong> 资源开销：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p><p><strong>3、</strong> 包含关系：如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><p><strong>4、</strong> 内存分配：同一进程的线程共享本进程的地址空间和资源，而进程与进程之间的地址空间和资源是相互独立的</p><p><strong>5、</strong> 影响关系：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃有可能导致整个进程都死掉。所以多进程要比多线程健壮。</p><p><strong>6、</strong> 执行过程：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行</p><h3 id="_2、老年代与标记复制算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E8%80%81%E5%B9%B4%E4%BB%A3%E4%B8%8E%E6%A0%87%E8%AE%B0%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">2、老年代与标记复制算法</a> <a class="header-anchor" href="#_2、老年代与标记复制算法" aria-label="Permalink to &quot;[2、老年代与标记复制算法](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#2老年代与标记复制算法)&quot;">​</a></h3><p><strong>而老年代因为每次只回收少量对象，因而采用 Mark-Compact 算法。</strong></p><p><strong>1、</strong> JAVA 虚拟机提到过的处于方法区的永生代(Permanet Generation)， 它用来存储 class 类，常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。</p><p><strong>2、</strong> 对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目前存放对象的那一块)，少数情况会直接分配到老生代。</p><p><strong>3、</strong> 当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后， EdenSpace 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 FromSpace 进行清理。</p><p><strong>4、</strong> 如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</p><p><strong>5、</strong> 在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</p><p><strong>6、</strong> 当对象在 Survivor 去躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被移到老生代中。</p><h3 id="_3、什么是treemap" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3%E4%BB%80%E4%B9%88%E6%98%AFtreemap" target="_blank" rel="noreferrer">3、什么是TreeMap</a> <a class="header-anchor" href="#_3、什么是treemap" aria-label="Permalink to &quot;[3、什么是TreeMap](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#3什么是treemap)&quot;">​</a></h3><p><strong>1、</strong> TreeMap 是一个<strong>有序的key-value集合</strong>，它是通过红黑树实现的。</p><p><strong>2、</strong> TreeMap基于<strong>红黑树（Red-Black tree）实现</strong>。该映射根据<strong>其键的自然顺序进行排序</strong>，或者根据<strong>创建映射时提供的 Comparator 进行排序</strong>，具体取决于使用的构造方法。</p><p><strong>3、</strong> TreeMap是线程<strong>非同步</strong>的。</p><h3 id="_4、如何停止一个正在运行的线程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E7%BA%BF%E7%A8%8B" target="_blank" rel="noreferrer">4、如何停止一个正在运行的线程？</a> <a class="header-anchor" href="#_4、如何停止一个正在运行的线程" aria-label="Permalink to &quot;[4、如何停止一个正在运行的线程？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#4如何停止一个正在运行的线程)&quot;">​</a></h3><p>在java中有以下3种方法可以终止正在运行的线程：</p><p><strong>1、</strong> 使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。</p><p><strong>2、</strong> 使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法。</p><p><strong>3、</strong> 使用interrupt方法中断线程。</p><h3 id="_5、java-中-编写多线程程序的时候你会遵循哪些最佳实践" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5java-%E4%B8%AD%E7%BC%96%E5%86%99%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%A0%E4%BC%9A%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5" target="_blank" rel="noreferrer">5、Java 中，编写多线程程序的时候你会遵循哪些最佳实践？</a> <a class="header-anchor" href="#_5、java-中-编写多线程程序的时候你会遵循哪些最佳实践" aria-label="Permalink to &quot;[5、Java 中，编写多线程程序的时候你会遵循哪些最佳实践？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#5java-中编写多线程程序的时候你会遵循哪些最佳实践)&quot;">​</a></h3><p>这是我在写Java 并发程序的时候遵循的一些最佳实践：</p><p><strong>1、</strong> 给线程命名，这样可以帮助调试。</p><p><strong>2、</strong> 最小化同步的范围，而不是将整个方法同步，只对关键部分做同步。</p><p><strong>3、</strong> 如果可以，更偏向于使用 volatile 而不是 synchronized。</p><p><strong>4、</strong> 使用更高层次的并发工具，而不是使用 wait() 和 notify() 来实现线程间通信，如 BlockingQueue，CountDownLatch 及 Semeaphore。</p><p><strong>5、</strong> 优先使用并发集合，而不是对集合进行同步。并发集合提供更好的可扩展性。</p><h3 id="_6、java语言采用何种编码方案-有何特点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6java%E8%AF%AD%E8%A8%80%E9%87%87%E7%94%A8%E4%BD%95%E7%A7%8D%E7%BC%96%E7%A0%81%E6%96%B9%E6%A1%88%E6%9C%89%E4%BD%95%E7%89%B9%E7%82%B9" target="_blank" rel="noreferrer">6、Java语言采用何种编码方案？有何特点？</a> <a class="header-anchor" href="#_6、java语言采用何种编码方案-有何特点" aria-label="Permalink to &quot;[6、Java语言采用何种编码方案？有何特点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#6java语言采用何种编码方案有何特点)&quot;">​</a></h3><p>Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一个唯一的数值，因此在任何的语言，平台，程序都可以放心的使用。</p><h3 id="_7、java-中你怎样唤醒一个阻塞的线程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7java-%E4%B8%AD%E4%BD%A0%E6%80%8E%E6%A0%B7%E5%94%A4%E9%86%92%E4%B8%80%E4%B8%AA%E9%98%BB%E5%A1%9E%E7%9A%84%E7%BA%BF%E7%A8%8B" target="_blank" rel="noreferrer">7、Java 中你怎样唤醒一个阻塞的线程？</a> <a class="header-anchor" href="#_7、java-中你怎样唤醒一个阻塞的线程" aria-label="Permalink to &quot;[7、Java 中你怎样唤醒一个阻塞的线程？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#7java-中你怎样唤醒一个阻塞的线程)&quot;">​</a></h3><p>首先 ，wait()、notify() 方法是针对对象的，调用任意对象的 wait()方法都将导致线程阻塞，阻塞的同时也将释放该对象的锁，相应地，调用任意对象的 notify()方法则将随机解除该对象阻塞的线程，但它需要重新获取该对象的锁，直到获取成功才能往下执行；</p><p>其次，wait、notify 方法必须在 synchronized 块或方法中被调用，并且要保证同步块或方法的锁对象与调用 wait、notify 方法的对象是同一个，如此一来在调用 wait 之前当前线程就已经成功获取某对象的锁，执行 wait 阻塞后当前线程就将之前获取的对象锁释放。</p><h3 id="_8、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8%E8%A7%A3%E9%87%8A%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%A0%88stack%E5%A0%86heap%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%BAmethod-area%E7%9A%84%E7%94%A8%E6%B3%95%E3%80%82" target="_blank" rel="noreferrer">8、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。</a> <a class="header-anchor" href="#_8、解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。" aria-label="Permalink to &quot;[8、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#8解释内存中的栈stack堆heap和方法区method-area的用法。)&quot;">​</a></h3><p>通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间；而通过new关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在常量池中，常量池是方法区的一部分，。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过JVM的启动参数来进行调整，栈空间用光了会引发StackOverflowError，而堆和常量池空间不足则会引发OutOfMemoryError。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">String str = new String(&quot;hello&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">String str = new String(&quot;hello&quot;);</span></span></code></pre></div><p>上面的语句中变量str放在栈上，用new创建出来的字符串对象放在堆上，而”hello”这个字面量是放在方法区的。</p><p><strong>补充1：</strong></p><p>较新版本的Java（从Java 6的某个更新开始）中，由于JIT编译器的发展和”逃逸分析”技术的逐渐成熟，栈上分配、标量替换等优化技术使得对象一定分配在堆上这件事情已经变得不那么绝对了。</p><p><strong>补充2：</strong></p><p>运行时常量池相当于Class文件常量池具有动态性，Java语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String类的intern()方法就是这样的。</p><p>看看下面代码的执行结果是什么并且比较一下Java 7以前和以后的运行结果是否一致。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">String s1 = new StringBuilder(&quot;go&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">    .append(&quot;od&quot;).toString();</span></span>
<span class="line"><span style="color:#f6f6f4;">System.out.println(s1.intern() == s1);</span></span>
<span class="line"><span style="color:#f6f6f4;">String s2 = new StringBuilder(&quot;ja&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">    .append(&quot;va&quot;).toString();</span></span>
<span class="line"><span style="color:#f6f6f4;">System.out.println(s2.intern() == s2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">String s1 = new StringBuilder(&quot;go&quot;)</span></span>
<span class="line"><span style="color:#24292e;">    .append(&quot;od&quot;).toString();</span></span>
<span class="line"><span style="color:#24292e;">System.out.println(s1.intern() == s1);</span></span>
<span class="line"><span style="color:#24292e;">String s2 = new StringBuilder(&quot;ja&quot;)</span></span>
<span class="line"><span style="color:#24292e;">    .append(&quot;va&quot;).toString();</span></span>
<span class="line"><span style="color:#24292e;">System.out.println(s2.intern() == s2);</span></span></code></pre></div><h3 id="_9、多线程同步有哪几种方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">9、多线程同步有哪几种方法？</a> <a class="header-anchor" href="#_9、多线程同步有哪几种方法" aria-label="Permalink to &quot;[9、多线程同步有哪几种方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#9多线程同步有哪几种方法)&quot;">​</a></h3><p>Synchronized关键字，Lock锁实现，分布式锁等。</p><h3 id="_10、什么是自旋" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E6%97%8B" target="_blank" rel="noreferrer">10、什么是自旋</a> <a class="header-anchor" href="#_10、什么是自旋" aria-label="Permalink to &quot;[10、什么是自旋](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题，中级面试题，大汇总.md#10什么是自旋)&quot;">​</a></h3><p>很多 synchronized 里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然 synchronized 里面的代码执行得非常快，不妨让等待锁的线程不要被阻塞，而是在 synchronized 的边界做忙循环，这就是自旋。如果做了多次循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p><p>忙循环：就是程序员用循环让一个线程等待，不像传统方法wait(), sleep() 或 yield() 它们都放弃了CPU控制，而忙循环不会放弃CPU，它就是在运行一个空循环。这么做的目的是为了保留CPU缓存，在多核系统中，一个等待线程醒来的时候可能会在另一个内核运行，这样会重建缓存。为了避免重建缓存和减少等待重建的时间就可以使用它了。</p><h3 id="_11、如何将字符串反转" tabindex="-1">11、如何将字符串反转？ <a class="header-anchor" href="#_11、如何将字符串反转" aria-label="Permalink to &quot;11、如何将字符串反转？&quot;">​</a></h3><h3 id="_12、什么是callable和future" tabindex="-1">12、什么是Callable和Future? <a class="header-anchor" href="#_12、什么是callable和future" aria-label="Permalink to &quot;12、什么是Callable和Future?&quot;">​</a></h3><h3 id="_13、zgc收集器中的染色指针有什么用" tabindex="-1">13、ZGC收集器中的染色指针有什么用？ <a class="header-anchor" href="#_13、zgc收集器中的染色指针有什么用" aria-label="Permalink to &quot;13、ZGC收集器中的染色指针有什么用？&quot;">​</a></h3><h3 id="_14、treemap和treeset在排序时如何比较元素-collections工具类中的sort-方法如何比较元素" tabindex="-1">14、TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？ <a class="header-anchor" href="#_14、treemap和treeset在排序时如何比较元素-collections工具类中的sort-方法如何比较元素" aria-label="Permalink to &quot;14、TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？&quot;">​</a></h3><h3 id="_15、java-中-嵌套公共静态类与顶级类有什么不同" tabindex="-1">15、Java 中，嵌套公共静态类与顶级类有什么不同？ <a class="header-anchor" href="#_15、java-中-嵌套公共静态类与顶级类有什么不同" aria-label="Permalink to &quot;15、Java 中，嵌套公共静态类与顶级类有什么不同？&quot;">​</a></h3><h3 id="_16、-和-equals-的区别是什么" tabindex="-1">16、== 和 equals 的区别是什么？ <a class="header-anchor" href="#_16、-和-equals-的区别是什么" aria-label="Permalink to &quot;16、== 和 equals 的区别是什么？&quot;">​</a></h3><h3 id="_17、你都有哪些手段用来排查内存溢出" tabindex="-1">17、你都有哪些手段用来排查内存溢出？ <a class="header-anchor" href="#_17、你都有哪些手段用来排查内存溢出" aria-label="Permalink to &quot;17、你都有哪些手段用来排查内存溢出？&quot;">​</a></h3><h3 id="_18、本地方法栈的作用" tabindex="-1">18、本地方法栈的作用？ <a class="header-anchor" href="#_18、本地方法栈的作用" aria-label="Permalink to &quot;18、本地方法栈的作用？&quot;">​</a></h3><h3 id="_19、工厂模式好处" tabindex="-1">19、工厂模式好处 <a class="header-anchor" href="#_19、工厂模式好处" aria-label="Permalink to &quot;19、工厂模式好处&quot;">​</a></h3><h3 id="_20、jvm的引用类型有哪些" tabindex="-1">20、JVM的引用类型有哪些？ <a class="header-anchor" href="#_20、jvm的引用类型有哪些" aria-label="Permalink to &quot;20、JVM的引用类型有哪些？&quot;">​</a></h3><h3 id="_21、哪个类包含-clone-方法-是-cloneable-还是-object" tabindex="-1">21、哪个类包含 clone 方法？是 Cloneable 还是 Object？ <a class="header-anchor" href="#_21、哪个类包含-clone-方法-是-cloneable-还是-object" aria-label="Permalink to &quot;21、哪个类包含 clone 方法？是 Cloneable 还是 Object？&quot;">​</a></h3><h3 id="_22、有什么堆外内存的排查思路" tabindex="-1">22、有什么堆外内存的排查思路？ <a class="header-anchor" href="#_22、有什么堆外内存的排查思路" aria-label="Permalink to &quot;22、有什么堆外内存的排查思路？&quot;">​</a></h3><h3 id="_23、什么是aqs" tabindex="-1">23、什么是AQS <a class="header-anchor" href="#_23、什么是aqs" aria-label="Permalink to &quot;23、什么是AQS&quot;">​</a></h3><h3 id="_24、64-位-jvm-中-int-的长度是多数" tabindex="-1">24、64 位 JVM 中，int 的长度是多数？ <a class="header-anchor" href="#_24、64-位-jvm-中-int-的长度是多数" aria-label="Permalink to &quot;24、64 位 JVM 中，int 的长度是多数？&quot;">​</a></h3><h3 id="_25、生产环境-cpu-占用过高-你如何解决" tabindex="-1">25、生产环境 CPU 占用过高，你如何解决？ <a class="header-anchor" href="#_25、生产环境-cpu-占用过高-你如何解决" aria-label="Permalink to &quot;25、生产环境 CPU 占用过高，你如何解决？&quot;">​</a></h3><h3 id="_26、java-中-怎么打印出一个字符串的所有排列" tabindex="-1">26、Java 中，怎么打印出一个字符串的所有排列？ <a class="header-anchor" href="#_26、java-中-怎么打印出一个字符串的所有排列" aria-label="Permalink to &quot;26、Java 中，怎么打印出一个字符串的所有排列？&quot;">​</a></h3><h3 id="_27、请解释tomcat中使用的连接器是什么" tabindex="-1">27、请解释Tomcat中使用的连接器是什么? <a class="header-anchor" href="#_27、请解释tomcat中使用的连接器是什么" aria-label="Permalink to &quot;27、请解释Tomcat中使用的连接器是什么?&quot;">​</a></h3><h3 id="_28、插入数据时-arraylist、linkedlist、vector谁速度较快" tabindex="-1">28、插入数据时 ArrayList、LinkedList、Vector谁速度较快？ <a class="header-anchor" href="#_28、插入数据时-arraylist、linkedlist、vector谁速度较快" aria-label="Permalink to &quot;28、插入数据时 ArrayList、LinkedList、Vector谁速度较快？&quot;">​</a></h3><h3 id="_29、java中会存在内存泄漏吗-请简单描述。" tabindex="-1">29、java中会存在内存泄漏吗，请简单描述。 <a class="header-anchor" href="#_29、java中会存在内存泄漏吗-请简单描述。" aria-label="Permalink to &quot;29、java中会存在内存泄漏吗，请简单描述。&quot;">​</a></h3><h3 id="_30、什么是方法重载" tabindex="-1">30、什么是方法重载？ <a class="header-anchor" href="#_30、什么是方法重载" aria-label="Permalink to &quot;30、什么是方法重载？&quot;">​</a></h3><h3 id="_31、什么是模板方法" tabindex="-1">31、什么是模板方法 <a class="header-anchor" href="#_31、什么是模板方法" aria-label="Permalink to &quot;31、什么是模板方法&quot;">​</a></h3><h3 id="_32、java中的同步集合与并发集合有什么区别" tabindex="-1">32、Java中的同步集合与并发集合有什么区别？ <a class="header-anchor" href="#_32、java中的同步集合与并发集合有什么区别" aria-label="Permalink to &quot;32、Java中的同步集合与并发集合有什么区别？&quot;">​</a></h3><h3 id="_33、说出-jdk-1-7-中的三个新特性" tabindex="-1">33、说出 JDK 1.7 中的三个新特性？ <a class="header-anchor" href="#_33、说出-jdk-1-7-中的三个新特性" aria-label="Permalink to &quot;33、说出 JDK 1.7 中的三个新特性？&quot;">​</a></h3><h3 id="_34、如何使用exception对象" tabindex="-1">34、如何使用exception对象？ <a class="header-anchor" href="#_34、如何使用exception对象" aria-label="Permalink to &quot;34、如何使用exception对象？&quot;">​</a></h3><h3 id="_35、serial-垃圾收集器-单线程、-复制算法" tabindex="-1">35、Serial 垃圾收集器（单线程、 复制算法） <a class="header-anchor" href="#_35、serial-垃圾收集器-单线程、-复制算法" aria-label="Permalink to &quot;35、Serial 垃圾收集器（单线程、 复制算法）&quot;">​</a></h3><h3 id="_36、为什么wait-notify-和-notifyall这些方法不在thread类里面" tabindex="-1">36、为什么wait, notify 和 notifyAll这些方法不在thread类里面？ <a class="header-anchor" href="#_36、为什么wait-notify-和-notifyall这些方法不在thread类里面" aria-label="Permalink to &quot;36、为什么wait, notify 和 notifyAll这些方法不在thread类里面？&quot;">​</a></h3><h3 id="_37、as-if-serial规则和happens-before规则的区别" tabindex="-1">37、as-if-serial规则和happens-before规则的区别 <a class="header-anchor" href="#_37、as-if-serial规则和happens-before规则的区别" aria-label="Permalink to &quot;37、as-if-serial规则和happens-before规则的区别&quot;">​</a></h3><h3 id="_38、什么是-cas" tabindex="-1">38、什么是 CAS <a class="header-anchor" href="#_38、什么是-cas" aria-label="Permalink to &quot;38、什么是 CAS&quot;">​</a></h3><h3 id="_39、两个相同的对象会有不同的的-hash-code-吗" tabindex="-1">39、两个相同的对象会有不同的的 hash code 吗？ <a class="header-anchor" href="#_39、两个相同的对象会有不同的的-hash-code-吗" aria-label="Permalink to &quot;39、两个相同的对象会有不同的的 hash code 吗？&quot;">​</a></h3><h3 id="_40、如果对象的引用被置为null-垃圾收集器是否会立即释放对象占用的内存" tabindex="-1">40、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？ <a class="header-anchor" href="#_40、如果对象的引用被置为null-垃圾收集器是否会立即释放对象占用的内存" aria-label="Permalink to &quot;40、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？&quot;">​</a></h3>`,88),n=[s];function l(i,h,E,c,p,d){return e(),t("div",null,n)}const B=a(r,[["render",l]]);export{u as __pageData,B as default};
