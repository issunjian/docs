import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/BIONIOAIO-1.3a5907dd.jpg",o="/docs/assets/BIONIOAIO-2.e6f093c4.jpg",e="/docs/assets/BIONIOAIO-4.a7723c35.jpg",t="/docs/assets/BIONIOAIO-8.0ab0d710.jpg",c="/docs/assets/BIONIOAIO-9.4de5d1eb.jpg",r="/docs/assets/BIONIOAIO-10.40fb070a.jpg",F="/docs/assets/BIONIOAIO-22.604bd0dd.jpg",y="/docs/assets/BIONIOAIO-23.5ca184d7.jpg",B=JSON.parse('{"title":"一文彻底解释清楚Java 中的NIO、BIO和AIO","description":"BIO采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少且稳定的场景。NIO使用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，提高性能和可伸缩性，适用于高并发场景。AIO采用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，进一步提高了并发处理能力，适用于高吞吐量场景。","frontmatter":{"title":"一文彻底解释清楚Java 中的NIO、BIO和AIO","shortTitle":"NIO和BIO、AIO的区别","category":["Java核心"],"tag":["Java NIO"],"description":"BIO采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少且稳定的场景。NIO使用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，提高性能和可伸缩性，适用于高并发场景。AIO采用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，进一步提高了并发处理能力，适用于高吞吐量场景。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"java,nio,bio,aio"}]]},"headers":[],"relativePath":"backend/tobetter/nio/BIONIOAIO.md","filePath":"backend/tobetter/nio/BIONIOAIO.md"}'),i={name:"backend/tobetter/nio/BIONIOAIO.md"},E=l('<h1 id="_12-2-bio、nio-和-aio-的区别" tabindex="-1">12.2 BIO、NIO 和 AIO 的区别 <a class="header-anchor" href="#_12-2-bio、nio-和-aio-的区别" aria-label="Permalink to &quot;12.2 BIO、NIO 和 AIO 的区别&quot;">​</a></h1><blockquote><p>上篇，我们了解了 <a href="https://tobebetterjavaer.com/nio/nio-better-io.html" target="_blank" rel="noreferrer">NIO 和传统 IO 的区别</a>，那这篇我们来了解 BIO、NIO 和 AIO 的区别，新手也很容易混淆，我们换一个方式来讲，讲给女朋友听👂。</p></blockquote><p>周末午后，在家里面进行电话面试，我问了面试者几个关于 IO 的问题，其中包括什么是 BIO、NIO 和 AIO？三者有什么区别？具体如何使用等问题，但是面试者回答的并不是很满意。于是我在面试评价中写道：&quot;对 Java 的 IO 提醒理解不够深入&quot;。恰好被女朋友看到了。</p><img src="'+p+'"><img src="'+o+'"><img src="'+e+'"><h3 id="java-io-与-bio、nio" tabindex="-1">Java IO 与 BIO、NIO <a class="header-anchor" href="#java-io-与-bio、nio" aria-label="Permalink to &quot;Java IO 与 BIO、NIO&quot;">​</a></h3><p>IO，常写作 I/O，是 Input/Output 的简称，即输入/输出。通常指数据在内部存储器（内存）和外部存储器（硬盘、优盘等）或其他周边设备之间的输入和输出。</p><p>输入/输出是信息处理系统（例如计算机）与外部世界（可能是人类或另一信息处理系统）之间的通信。</p><p>输入是系统接收的信号或数据，输出则是从其发送的信号或数据。</p><p>在 Java 中，提供了一系列 API，可以供开发者来读写外部数据或文件。我们称这些 API 为 <a href="https://tobebetterjavaer.com/io/shangtou.html" target="_blank" rel="noreferrer">Java IO</a>。</p><p>IO 是 Java 中比较重要，且比较难的知识点，主要是因为随着 Java 的发展，目前有三种 IO 共存。分别是 BIO、NIO 和 AIO。</p><p>BIO 全称 Block-IO 是一种<strong>同步且阻塞</strong>的通信模式。是一个比较传统的通信方式，模式简单，使用方便。但并发处理能力低，通信耗时，依赖网速。</p><p><a href="https://tobebetterjavaer.com/nio/nio-better-io.html" target="_blank" rel="noreferrer">Java NIO</a>，全程 Non-Block IO ，是 Java SE 1.4 版以后，针对网络传输效能优化的新功能。是一种<strong>非阻塞同步</strong>的通信模式。</p><p>NIO 与原来的 I/O 有同样的作用和目的, 他们之间最重要的区别是数据打包和传输的方式。原来的 I/O 以流的方式处理数据，而 NIO 以块的方式处理数据。</p><p>面向流的 I/O 系统一次一个字节地处理数据。一个输入流产生一个字节的数据，一个输出流消费一个字节的数据。</p><p>面向块的 I/O 系统以块的形式处理数据。每一个操作都在一步中产生或者消费一个数据块。按块处理数据比按(流式的)字节处理数据要快得多。但是面向块的 I/O 缺少一些面向流的 I/O 所具有的优雅性和简单性。</p><p>Java AIO，全称 Asynchronous IO，是<strong>异步非阻塞</strong>的 IO。是一种非阻塞异步的通信模式。</p><p>在 NIO 的基础上引入了新的异步通道的概念，并提供了异步文件通道和异步套接字通道的实现。</p><img src="'+t+'"><img src="'+c+'"><img src="'+r+`"><h3 id="三种-io-的区别" tabindex="-1">三种 IO 的区别 <a class="header-anchor" href="#三种-io-的区别" aria-label="Permalink to &quot;三种 IO 的区别&quot;">​</a></h3><p>首先，我们站在宏观的角度，重新画一下重点：</p><p><strong>BIO （Blocking I/O）：同步阻塞 I/O 模式。</strong></p><p><strong>NIO （New I/O）：同步非阻塞模式。</strong></p><p><strong>AIO （Asynchronous I/O）：异步非阻塞 I/O 模型。</strong></p><p>同步阻塞模式：这种模式下，我们的工作模式是先来到厨房，开始烧水，并坐在水壶面前一直等着水烧开。</p><p>同步非阻塞模式：这种模式下，我们的工作模式是先来到厨房，开始烧水，但是我们不一直坐在水壶前面等，而是回到客厅看电视，然后每隔几分钟到厨房看一下水有没有烧开。</p><p>异步非阻塞 I/O 模型：这种模式下，我们的工作模式是先来到厨房，开始烧水，我们不一直坐在水壶前面等，也不隔一段时间去看一下，而是在客厅看电视，水壶上面有个开关，水烧开之后他会通知我。</p><p>阻塞 VS 非阻塞：人是否坐在水壶前面一直等。</p><p>同步 VS 异步：水壶是不是在水烧开之后主动通知人。</p><h4 id="适用场景" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景&quot;">​</a></h4><p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，但程序直观简单易理解。</p><p>NIO 方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4 开始支持。</p><p>AIO 方式适用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用 OS 参与并发操作，编程比较复杂，JDK7 开始支持。</p><h4 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h4><p>使用 BIO 实现文件的读取和写入。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BioFileDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BioFileDemo</span><span style="color:#F6F6F4;"> demo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BioFileDemo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        demo.</span><span style="color:#62E884;">writeFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        demo.</span><span style="color:#62E884;">readFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 BIO 写入文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeFile</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> filename </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fileWriter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(filename);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bufferedWriter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(fileWriter);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            bufferedWriter.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">学编程就上技术派</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            bufferedWriter.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">写入完成</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            bufferedWriter.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            fileWriter.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 BIO 读取文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readFile</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> filename </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fileReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(filename);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> bufferedReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(fileReader);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bufferedReader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">读取的内容: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> line);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            bufferedReader.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            fileReader.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BioFileDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        BioFileDemo demo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BioFileDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        demo.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        demo.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 BIO 写入文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        String filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            FileWriter fileWriter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">            BufferedWriter bufferedWriter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(fileWriter);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            bufferedWriter.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;学编程就上技术派&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            bufferedWriter.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;写入完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            bufferedWriter.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            fileWriter.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 BIO 读取文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        String filename </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            FileReader fileReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(filename);</span></span>
<span class="line"><span style="color:#24292E;">            BufferedReader bufferedReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(fileReader);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            String line;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bufferedReader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;读取的内容: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> line);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            bufferedReader.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            fileReader.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个示例展示了如何使用 Java 中的传统阻塞 I/O（BIO）对文件进行读写操作。在 <code>writeFile()</code> 方法中，我们首先创建一个 FileWriter 对象，并使用 BufferedWriter 进行缓冲写入。接着，使用 <code>bufferedWriter.write()</code> 方法将字符串写入文件，然后调用 <code>bufferedWriter.newLine()</code> 方法添加换行符。最后，关闭 BufferedWriter 和 FileWriter。在 <code>readFile()</code> 方法中，我们创建一个 FileReader 对象，并使用 BufferedReader 进行缓冲读取。然后通过调用 <code>bufferedReader.readLine()</code> 方法循环读取文件内容，直到返回 null 表示读取完毕。最后，关闭 BufferedReader 和 FileReader。</p><p>接下来是 NIO 的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">NioFileDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">NioFileDemo</span><span style="color:#F6F6F4;"> demo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioFileDemo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        demo.</span><span style="color:#62E884;">writeFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        demo.</span><span style="color:#62E884;">readFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 NIO 写入文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeFile</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(path, EnumSet.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(StandardOpenOption.CREATE, StandardOpenOption.WRITE));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StandardCharsets.UTF_8.</span><span style="color:#62E884;">encode</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">学编程就上技术派</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            fileChannel.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">写入完成</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            fileChannel.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 NIO 读取文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readFile</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(path, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> bytesRead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (bytesRead </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                buffer.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">读取的内容: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> StandardCharsets.UTF_8.</span><span style="color:#62E884;">decode</span><span style="color:#F6F6F4;">(buffer));</span></span>
<span class="line"><span style="color:#F6F6F4;">                buffer.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                bytesRead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            fileChannel.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioFileDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        NioFileDemo demo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioFileDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        demo.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        demo.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 NIO 写入文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            FileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(path, EnumSet.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(StandardOpenOption.CREATE, StandardOpenOption.WRITE));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StandardCharsets.UTF_8.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;学编程就上技术派&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            fileChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;写入完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            fileChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 NIO 读取文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            FileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(path, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">            ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (bytesRead </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;读取的内容: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> StandardCharsets.UTF_8.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(buffer));</span></span>
<span class="line"><span style="color:#24292E;">                buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            fileChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个示例演示了如何使用 NIO 的 <a href="https://tobebetterjavaer.com/nio/buffer-channel.html" target="_blank" rel="noreferrer">FileChannel</a> 对文件进行读写操作。在 <code>writeFile()</code> 方法中，我们首先打开文件通道并指定创建和写入选项。接着，将要写入的字符串转换为 ByteBuffer，然后使用 <code>fileChannel.write()</code> 方法将其写入文件。在 <code>readFile()</code> 方法中，我们打开文件通道并指定读取选项，然后创建一个 ByteBuffer 用于存储读取到的数据。使用 <code>fileChannel.read()</code> 方法循环读取文件内容，直到返回 -1 表示读取完毕。在循环中，我们翻转缓冲区，将其解码为字符串并打印，然后清空缓冲区以进行下一次读取。最后，关闭文件通道。</p><p>使用 AIO 实现文件的读取和写入</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AioDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AioDemo</span><span style="color:#F6F6F4;"> demo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AioDemo</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        demo.</span><span style="color:#62E884;">writeFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        demo.</span><span style="color:#62E884;">readFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 AsynchronousFileChannel 写入文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeFile</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用 Paths.get() 获取文件路径</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 用 AsynchronousFileChannel.open() 打开文件通道，指定写入和创建文件的选项。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">AsynchronousFileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> AsynchronousFileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 将要写入的字符串（&quot;学编程就上技术派&quot;）转换为 ByteBuffer。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StandardCharsets.UTF_8.</span><span style="color:#62E884;">encode</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">学编程就上技术派</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 调用 fileChannel.write() 方法将 ByteBuffer 中的内容写入文件。这是一个异步操作，因此需要使用 Future 对象等待写入操作完成。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;Integer&gt; result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fileChannel.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 等待写操作完成</span></span>
<span class="line"><span style="color:#F6F6F4;">            result.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">写入完成</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            fileChannel.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">java.util.concurrent.ExecutionException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 AsynchronousFileChannel 读取文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readFile</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 指定读取文件的选项。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">AsynchronousFileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> AsynchronousFileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(path, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 创建一个 ByteBuffer，用于存储从文件中读取的数据。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 调用 fileChannel.read() 方法从文件中异步读取数据。该方法接受一个 CompletionHandler 对象，用于处理异步操作完成后的回调。</span></span>
<span class="line"><span style="color:#F6F6F4;">            fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, buffer, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CompletionHandler</span><span style="color:#F6F6F4;">&lt;Integer, ByteBuffer&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> completed(</span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">attachment</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#7B7F8B;">// 在 CompletionHandler 的 completed() 方法中，翻转 ByteBuffer（attachment.flip()），然后使用 Charset.forName(&quot;UTF-8&quot;).decode() 将其解码为字符串并打印。最后，清空缓冲区并关闭文件通道。</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">attachment</span><span style="color:#62E884;">.flip();</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">读取的内容: </span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">StandardCharsets</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">UTF_8</span><span style="color:#62E884;">.decode(attachment));</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">attachment</span><span style="color:#62E884;">.clear();</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F286C4;">try</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">fileChannel</span><span style="color:#62E884;">.close();</span></span>
<span class="line"><span style="color:#62E884;">                    } </span><span style="color:#F286C4;">catch</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">e</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">                    }</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> failed(</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">exc</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">attachment</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#7B7F8B;">// 如果异步读取操作失败，CompletionHandler 的 failed() 方法将被调用，打印错误信息。</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">读取失败</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">exc</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 等待异步操作完成</span></span>
<span class="line"><span style="color:#F6F6F4;">            Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AioDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        AioDemo demo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AioDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        demo.</span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        demo.</span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 AsynchronousFileChannel 写入文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用 Paths.get() 获取文件路径</span></span>
<span class="line"><span style="color:#24292E;">        Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 用 AsynchronousFileChannel.open() 打开文件通道，指定写入和创建文件的选项。</span></span>
<span class="line"><span style="color:#24292E;">            AsynchronousFileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsynchronousFileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将要写入的字符串（&quot;学编程就上技术派&quot;）转换为 ByteBuffer。</span></span>
<span class="line"><span style="color:#24292E;">            ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StandardCharsets.UTF_8.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;学编程就上技术派&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用 fileChannel.write() 方法将 ByteBuffer 中的内容写入文件。这是一个异步操作，因此需要使用 Future 对象等待写入操作完成。</span></span>
<span class="line"><span style="color:#24292E;">            Future&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 等待写操作完成</span></span>
<span class="line"><span style="color:#24292E;">            result.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;写入完成&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            fileChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException | InterruptedException | java.util.concurrent.ExecutionException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 AsynchronousFileChannel 读取文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readFile</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 指定读取文件的选项。</span></span>
<span class="line"><span style="color:#24292E;">            AsynchronousFileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsynchronousFileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(path, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建一个 ByteBuffer，用于存储从文件中读取的数据。</span></span>
<span class="line"><span style="color:#24292E;">            ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 调用 fileChannel.read() 方法从文件中异步读取数据。该方法接受一个 CompletionHandler 对象，用于处理异步操作完成后的回调。</span></span>
<span class="line"><span style="color:#24292E;">            fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, buffer, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> CompletionHandler&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ByteBuffer</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">completed</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">result</span><span style="color:#24292E;">, ByteBuffer </span><span style="color:#E36209;">attachment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 在 CompletionHandler 的 completed() 方法中，翻转 ByteBuffer（attachment.flip()），然后使用 Charset.forName(&quot;UTF-8&quot;).decode() 将其解码为字符串并打印。最后，清空缓冲区并关闭文件通道。</span></span>
<span class="line"><span style="color:#24292E;">                    attachment.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;读取的内容: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> StandardCharsets.UTF_8.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(attachment));</span></span>
<span class="line"><span style="color:#24292E;">                    attachment.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        fileChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">exc</span><span style="color:#24292E;">, ByteBuffer </span><span style="color:#E36209;">attachment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果异步读取操作失败，CompletionHandler 的 failed() 方法将被调用，打印错误信息。</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;读取失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    exc.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 等待异步操作完成</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException | InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码展示了一个名为 AioDemo 的类，包含两个方法：<code>writeFile()</code> 和 <code>readFile()</code>。这两个方法分别使用 AsynchronousFileChannel 对文件进行异步写入和读取操作。代码的具体含义我都加到注释当中了，注意查看。</p><p>滴滴滴，水开了。</p><img src="`+F+'"><img src="'+y+'"><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>BIO（Blocking I/O）：采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少且稳定的场景。</p><p>NIO（New I/O 或 Non-blocking I/O）：使用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，提高性能和可伸缩性，适用于高并发场景。</p><p>AIO（Asynchronous I/O）：采用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，进一步提高了并发处理能力，适用于高吞吐量场景。</p><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s/QQxrr5yP8X9YdFqIwXDoQQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/QQxrr5yP8X9YdFqIwXDoQQ</a></p></blockquote>',54),d=[E];function f(u,C,h,O,I,A){return n(),a("div",null,d)}const b=s(i,[["render",f]]);export{B as __pageData,b as default};
