import{_ as e,o as s,c as a,V as r}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/redis/redis-02.md","filePath":"interview/backend/redis/redis-02.md"}'),i={name:"interview/backend/redis/redis-02.md"},d=r('<h3 id="_1、redis集群最大节点个数是多少" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1redis%E9%9B%86%E7%BE%A4%E6%9C%80%E5%A4%A7%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0%E6%98%AF%E5%A4%9A%E5%B0%91" target="_blank" rel="noreferrer">1、Redis集群最大节点个数是多少？</a> <a class="header-anchor" href="#_1、redis集群最大节点个数是多少" aria-label="Permalink to &quot;[1、Redis集群最大节点个数是多少？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#1redis集群最大节点个数是多少)&quot;">​</a></h3><p>16384个</p><h3 id="_2、reids的特点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2reids%E7%9A%84%E7%89%B9%E7%82%B9" target="_blank" rel="noreferrer">2、Reids的特点</a> <a class="header-anchor" href="#_2、reids的特点" aria-label="Permalink to &quot;[2、Reids的特点](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#2reids的特点)&quot;">​</a></h3><p>Redis本质上是一个Key-Value类型的内存数据库，很像Memcached，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。</p><p>因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。</p><p>Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 Memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。</p><p>比方说用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务，用他的Set可以做高性能的tag系统等等。另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的Memcached来用。</p><p>Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</p><h3 id="_3、redis最适合的场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3redis%E6%9C%80%E9%80%82%E5%90%88%E7%9A%84%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">3、Redis最适合的场景？</a> <a class="header-anchor" href="#_3、redis最适合的场景" aria-label="Permalink to &quot;[3、Redis最适合的场景？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#3redis最适合的场景)&quot;">​</a></h3><p><strong>1、</strong> 会话缓存（Session Cache）</p><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？ 幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p><p><strong>2、</strong> 全页缓存（FPC）</p><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。 再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。 此外，对WordPress的用户来说，Pantheon有一个非常好的插件 wp-Redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p>3、队列</p><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。 如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p><p>4，排行榜/计数器</p><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可： 当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行： ZRANGE user_scores 0 10 WITHSCORES Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</p><p><strong>5、</strong> 发布/订阅</p><p>最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！</p><h3 id="_4、使用redis有哪些好处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E4%BD%BF%E7%94%A8redis%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E5%A4%84" target="_blank" rel="noreferrer">4、使用Redis有哪些好处？</a> <a class="header-anchor" href="#_4、使用redis有哪些好处" aria-label="Permalink to &quot;[4、使用Redis有哪些好处？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#4使用redis有哪些好处)&quot;">​</a></h3><p><strong>1、</strong> 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</p><p><strong>2、</strong> 支持丰富数据类型，支持string，list，set，sorted set，hash</p><p><strong>3、</strong> 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</p><p><strong>4、</strong> 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</p><h3 id="_5、为什么edis需要把所有数据放到内存中" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E4%B8%BA%E4%BB%80%E4%B9%88edis%E9%9C%80%E8%A6%81%E6%8A%8A%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E6%94%BE%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%AD" target="_blank" rel="noreferrer">5、为什么edis需要把所有数据放到内存中？</a> <a class="header-anchor" href="#_5、为什么edis需要把所有数据放到内存中" aria-label="Permalink to &quot;[5、为什么edis需要把所有数据放到内存中？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#5为什么edis需要把所有数据放到内存中)&quot;">​</a></h3><p>Redis为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以Redis具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘I/O速度为严重影响Redis的性能。在内存越来越便宜的今天，Redis将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。</p><h3 id="_6、redis的内存用完了会发生什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6redis%E7%9A%84%E5%86%85%E5%AD%98%E7%94%A8%E5%AE%8C%E4%BA%86%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">6、Redis的内存用完了会发生什么？</a> <a class="header-anchor" href="#_6、redis的内存用完了会发生什么" aria-label="Permalink to &quot;[6、Redis的内存用完了会发生什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#6redis的内存用完了会发生什么)&quot;">​</a></h3><p>如果达到设置的上限，Redis的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以将Redis当缓存来使用配置淘汰机制，当Redis达到内存上限时会冲刷掉旧的内容。</p><h3 id="_7、redis-的回收策略-淘汰策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7redis-%E7%9A%84%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">7、Redis 的回收策略（淘汰策略）</a> <a class="header-anchor" href="#_7、redis-的回收策略-淘汰策略" aria-label="Permalink to &quot;[7、Redis 的回收策略（淘汰策略）](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#7redis-的回收策略淘汰策略)&quot;">​</a></h3><p>volatile-lru：从已设置过期时间的数据集（ server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p>volatile-ttl： 从已设置过期时间的数据集（ server.db[i].expires） 中挑选将要过期的数据淘汰</p><p>volatile-random： 从已设置过期时间的数据集（ server.db[i].expires） 中任意选择数据淘汰</p><p>allkeys-lru： 从数据集（ server.db[i].dict） 中挑选最近最少使用的数据淘汰</p><p>allkeys-random： 从数据集（ server.db[i].dict） 中任意选择数据淘汰</p><p>no-enviction（ 驱逐） ： 禁止驱逐数据</p><p>注意这里的 6 种机制，volatile 和 allkeys 规定了是对已设置过期时间的数据集淘汰数据还是从全部数据集淘汰数据， 后面的 lru、ttl 以及 random 是三种不同的淘汰策略， 再加上一种 no-enviction 永不回收的策略。</p><p>使用策略规则：</p><p><strong>1、</strong> 如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率 低， 则使用 allkeys-lru</p><p><strong>2、</strong> 如果数据呈现平等分布， 也就是所有的数据访问频率都相同， 则使用allkeys-random</p><h3 id="_8、假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E5%81%87%E5%A6%82redis%E9%87%8C%E9%9D%A2%E6%9C%891%E4%BA%BF%E4%B8%AAkey%E5%85%B6%E4%B8%AD%E6%9C%8910w%E4%B8%AAkey%E6%98%AF%E4%BB%A5%E6%9F%90%E4%B8%AA%E5%9B%BA%E5%AE%9A%E7%9A%84%E5%B7%B2%E7%9F%A5%E7%9A%84%E5%89%8D%E7%BC%80%E5%BC%80%E5%A4%B4%E7%9A%84%E5%A6%82%E6%9E%9C%E5%B0%86%E5%AE%83%E4%BB%AC%E5%85%A8%E9%83%A8%E6%89%BE%E5%87%BA%E6%9D%A5" target="_blank" rel="noreferrer">8、假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？</a> <a class="header-anchor" href="#_8、假如redis里面有1亿个key-其中有10w个key是以某个固定的已知的前缀开头的-如果将它们全部找出来" aria-label="Permalink to &quot;[8、假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#8假如redis里面有1亿个key其中有10w个key是以某个固定的已知的前缀开头的如果将它们全部找出来)&quot;">​</a></h3><p>使用keys指令可以扫出指定模式的key列表。</p><p>对方接着追问：如果这个Redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</p><p>这个时候你要回答Redis关键的一个特性：Redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p><h3 id="_9、memcached-与redis-的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9memcached-%E4%B8%8Eredis-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、Memcached 与Redis 的区别？</a> <a class="header-anchor" href="#_9、memcached-与redis-的区别" aria-label="Permalink to &quot;[9、Memcached 与Redis 的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#9memcached-与redis-的区别)&quot;">​</a></h3><p><strong>1、</strong> Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset， hash 等数据结构的存储。而 memcache 只支持简单数据类型，需要客户端自己处理复杂对象</p><p><strong>2、</strong> Redis 支持数据的持久化， 可以将内存中的数据保持在磁盘中， 重启的时候可以再次加载进行使用（ PS： 持久化在 rdb、aof）。</p><h3 id="_10、redis-常见性能问题和解决方案" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10redis-%E5%B8%B8%E8%A7%81%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A" target="_blank" rel="noreferrer">10、Redis 常见性能问题和解决方案：</a> <a class="header-anchor" href="#_10、redis-常见性能问题和解决方案" aria-label="Permalink to &quot;[10、Redis 常见性能问题和解决方案：](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题大汇总，附答案.md#10redis-常见性能问题和解决方案：)&quot;">​</a></h3><p><strong>1、</strong> Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave函数， 会阻塞主线程的工作， 当快照比较大时对性能影响是非常大的， 会间断性暂停服务</p><p><strong>2、</strong> 如果数据比较重要， 某个 Slave 开启 AOF 备份数据， 策略设置为每秒同步一</p><p><strong>3、</strong> 为了主从复制的速度和连接的稳定性， Master 和 Slave 最好在同一个局域网</p><p><strong>4、</strong> 尽量避免在压力很大的主库上增加从</p><p><strong>5、</strong> 主从复制不要用图状结构， 用单向链表结构更为稳定， 即：Master &lt;- Slave1</p><p>&lt;- Slave2 &lt;- Slave3… 这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了， 可以立刻启用 Slave1 做 Master， 其他不变。</p><h3 id="_11、redis集群之间是如何复制的" tabindex="-1">11、Redis集群之间是如何复制的？ <a class="header-anchor" href="#_11、redis集群之间是如何复制的" aria-label="Permalink to &quot;11、Redis集群之间是如何复制的？&quot;">​</a></h3><h3 id="_12、jedis-与-redisson-对比有什么优缺点" tabindex="-1">12、Jedis 与 Redisson 对比有什么优缺点？ <a class="header-anchor" href="#_12、jedis-与-redisson-对比有什么优缺点" aria-label="Permalink to &quot;12、Jedis 与 Redisson 对比有什么优缺点？&quot;">​</a></h3><h3 id="_13、你知道有哪些redis分区实现方案" tabindex="-1">13、你知道有哪些Redis分区实现方案？ <a class="header-anchor" href="#_13、你知道有哪些redis分区实现方案" aria-label="Permalink to &quot;13、你知道有哪些Redis分区实现方案？&quot;">​</a></h3><h3 id="_14、redis分区有什么缺点" tabindex="-1">14、Redis分区有什么缺点？ <a class="header-anchor" href="#_14、redis分区有什么缺点" aria-label="Permalink to &quot;14、Redis分区有什么缺点？&quot;">​</a></h3><h3 id="_15、redis是单进程单线程的" tabindex="-1">15、Redis是单进程单线程的？ <a class="header-anchor" href="#_15、redis是单进程单线程的" aria-label="Permalink to &quot;15、Redis是单进程单线程的？&quot;">​</a></h3><h3 id="_16、redis支持的java客户端都有哪些-官方推荐用哪个" tabindex="-1">16、Redis支持的Java客户端都有哪些？官方推荐用哪个？ <a class="header-anchor" href="#_16、redis支持的java客户端都有哪些-官方推荐用哪个" aria-label="Permalink to &quot;16、Redis支持的Java客户端都有哪些？官方推荐用哪个？&quot;">​</a></h3><h3 id="_17、redis-持久化方案" tabindex="-1">17、Redis 持久化方案： <a class="header-anchor" href="#_17、redis-持久化方案" aria-label="Permalink to &quot;17、Redis 持久化方案：&quot;">​</a></h3><h3 id="_18、redis哨兵" tabindex="-1">18、Redis哨兵 <a class="header-anchor" href="#_18、redis哨兵" aria-label="Permalink to &quot;18、Redis哨兵&quot;">​</a></h3><h3 id="_19、如何实现集群中的-session-共享存储" tabindex="-1">19、如何实现集群中的 session 共享存储？ <a class="header-anchor" href="#_19、如何实现集群中的-session-共享存储" aria-label="Permalink to &quot;19、如何实现集群中的 session 共享存储？&quot;">​</a></h3><h3 id="_20、redis-中设置过期时间主要通过以下四种方式" tabindex="-1">20、Redis 中设置过期时间主要通过以下四种方式 <a class="header-anchor" href="#_20、redis-中设置过期时间主要通过以下四种方式" aria-label="Permalink to &quot;20、Redis 中设置过期时间主要通过以下四种方式&quot;">​</a></h3><h3 id="_21、一个redis实例最多能存放多少的keys-list、set、sorted-set他们最多能存放多少元素" tabindex="-1">21、一个Redis实例最多能存放多少的keys？List、Set、Sorted Set他们最多能存放多少元素？ <a class="header-anchor" href="#_21、一个redis实例最多能存放多少的keys-list、set、sorted-set他们最多能存放多少元素" aria-label="Permalink to &quot;21、一个Redis实例最多能存放多少的keys？List、Set、Sorted Set他们最多能存放多少元素？&quot;">​</a></h3><h3 id="_22、缓存和数据库间数据一致性问题" tabindex="-1">22、缓存和数据库间数据一致性问题 <a class="header-anchor" href="#_22、缓存和数据库间数据一致性问题" aria-label="Permalink to &quot;22、缓存和数据库间数据一致性问题&quot;">​</a></h3><h3 id="_23、redis分布式" tabindex="-1">23、Redis分布式 <a class="header-anchor" href="#_23、redis分布式" aria-label="Permalink to &quot;23、Redis分布式&quot;">​</a></h3><h3 id="_24、缓存雪崩问题" tabindex="-1">24、缓存雪崩问题 <a class="header-anchor" href="#_24、缓存雪崩问题" aria-label="Permalink to &quot;24、缓存雪崩问题&quot;">​</a></h3><h3 id="_25、redis常见的几种缓存策略" tabindex="-1">25、Redis常见的几种缓存策略 <a class="header-anchor" href="#_25、redis常见的几种缓存策略" aria-label="Permalink to &quot;25、Redis常见的几种缓存策略&quot;">​</a></h3><h3 id="_26、redis前端启动命令" tabindex="-1">26、Redis前端启动命令 <a class="header-anchor" href="#_26、redis前端启动命令" aria-label="Permalink to &quot;26、Redis前端启动命令&quot;">​</a></h3><h3 id="_27、redis-如何做内存优化" tabindex="-1">27、Redis 如何做内存优化？ <a class="header-anchor" href="#_27、redis-如何做内存优化" aria-label="Permalink to &quot;27、Redis 如何做内存优化？&quot;">​</a></h3><h3 id="_28、如何选择合适的持久化方式" tabindex="-1">28、如何选择合适的持久化方式？ <a class="header-anchor" href="#_28、如何选择合适的持久化方式" aria-label="Permalink to &quot;28、如何选择合适的持久化方式？&quot;">​</a></h3><h3 id="_29、redis-相比memcached-有哪些优势" tabindex="-1">29、Redis 相比Memcached 有哪些优势？ <a class="header-anchor" href="#_29、redis-相比memcached-有哪些优势" aria-label="Permalink to &quot;29、Redis 相比Memcached 有哪些优势？&quot;">​</a></h3>',72),t=[d];function o(E,n,l,h,c,B){return s(),a("div",null,t)}const R=e(i,[["render",o]]);export{u as __pageData,R as default};
