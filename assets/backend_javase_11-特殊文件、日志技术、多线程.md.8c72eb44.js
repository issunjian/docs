import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/1667990938340.d2d115b9.png",o="/docs/assets/1667991153379.c6590616.png",t="/docs/assets/1667991441046.6dec67f5.png",e="/docs/assets/1667992083258.2983384c.png",c="/docs/assets/image-2023-03-21-13-48-49.3a0f4e4a.png",r="/docs/assets/1667992486134.d6a28a71.png",y="/docs/assets/1667993320872.00f19676.png",F="/docs/assets/1667993682237.ece49b36.png",i="/docs/assets/1667993581146.b376fb47.png",E="/docs/assets/1667993965682.222e2172.png",u="/docs/assets/1667994441934.7a07984b.png",d="/docs/assets/1668506399372.9627311c.png",g="/docs/assets/1668506713783.5ab8299b.png",C="/docs/assets/1668507051101.d2f8fbc2.png",D="/docs/assets/1668507501024.58dcfedf.png",h="/docs/assets/1668508226111.f741ca28.png",A="/docs/assets/1668508373865.9a2b38a3.png",m="/docs/assets/1668508793279.c3f18df6.png",b="/docs/assets/1668509275659.8736cae4.png",q="/docs/assets/1668051403591.d61363ee.png",f="/docs/assets/1668052028054.b1051976.png",v="/docs/assets/1668052307537.73c3af5e.png",B="/docs/assets/1668052414444.06180a24.png",k="/docs/assets/1668069176927.7592aa4f.png",T="/docs/assets/1668069524799.2dc05fbd.png",S="/docs/assets/1668069740969.4dc2997a.png",x="/docs/assets/1668069923403.42069a7e.png",w="/docs/assets/1668070204768.7e3a76ca.png",I=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/javase/11-特殊文件、日志技术、多线程.md","filePath":"backend/javase/11-特殊文件、日志技术、多线程.md"}'),_={name:"backend/javase/11-特殊文件、日志技术、多线程.md"},M=l('<h2 id="特殊文件、日志技术、多线程" tabindex="-1">特殊文件、日志技术、多线程 <a class="header-anchor" href="#特殊文件、日志技术、多线程" aria-label="Permalink to &quot;特殊文件、日志技术、多线程&quot;">​</a></h2><ul><li>特殊文件 <ul><li>Properties文件 注意格式</li><li>XML文件 <ul><li>XML作用 🍐</li><li>XML解析 🚀 了解即可</li></ul></li></ul></li><li>日志文件 <ul><li>日志作用 🍐</li><li>Logback框架 🚀</li></ul></li><li>多线程 <ul><li>多线程创建方式 🍐 ✏️ ❤️</li></ul></li></ul><p>前置知识</p><ol><li>能使用字节流或者工具类读取文件</li><li>能使用HashMap存储双列数据</li><li>使用过sout快捷键</li><li>听说过三个臭皮匠顶个诸葛亮的典故</li></ol><h2 id="一、属性文件-🚩-🍐" tabindex="-1">一、属性文件 🚩 🍐 <a class="header-anchor" href="#一、属性文件-🚩-🍐" aria-label="Permalink to &quot;一、属性文件 🚩 🍐&quot;">​</a></h2><h3 id="_1️⃣-1-1-特殊文件概述" tabindex="-1">1️⃣ 1.1 特殊文件概述 <a class="header-anchor" href="#_1️⃣-1-1-特殊文件概述" aria-label="Permalink to &quot;1️⃣ 1.1 特殊文件概述&quot;">​</a></h3><p><strong>普通的文本文件，没有任何规律可言</strong>，不方便程序对文件中的数据信息处理 不方便解析。</p><img src="'+p+'"><p><strong>特殊的文本文件</strong> 格式固定，方便解析：</p><img src="'+o+'"><blockquote><ul><li>后缀为.properties的文件，称之为<strong>属性文件</strong>，它可以很方便的存储一些类<strong>似于键值对</strong>的数据。经常当做软件的配置文件使用。</li><li>xml文件能够表示<strong>更加复杂的数据关系</strong>，比如要表示多个用户的用户名、密码、家乡、性别等。在后面，也经常当做软件的配置文件使用。</li></ul></blockquote><p>特殊的文件,主要学习以下的三点</p><img src="'+t+'"><h3 id="_2️⃣-1-2-properties属性文件" tabindex="-1">2️⃣ 1.2 Properties属性文件 <a class="header-anchor" href="#_2️⃣-1-2-properties属性文件" aria-label="Permalink to &quot;2️⃣ 1.2 Properties属性文件&quot;">​</a></h3><p>Properties是Map接口下面的一个实现类，所以Properties也是一种双列集合，用来存储键值对 。</p><p><strong>Properties格式:</strong></p><ol><li>属性文件后缀以<code>.properties</code>结尾</li><li>属性文件里面的每一行都是一个键值对，键和值中间用=隔开。比如: <code>admin=123456</code></li><li><code>#</code>表示这样是注释信息，是用来解释这一行配置是什么意思。</li><li>每一行末尾不要习惯性加分号，以及空格等字符；不然会把分号，空格会当做值的一部分。</li><li>键不能重复，值可以重复</li></ol><p>点击查看图示</p><img src="'+e+'"><p><strong>Properties核心作用:</strong></p><p>Properties类的对象，用来表示属性文件，可以用来读取属性文件中的键值对。 <img src="'+c+'"></p><hr><p><strong>使用Properties读取属性文件中的键值对</strong>，需要用到的方法如下。</p><img src="'+r+`"><p>Properties读取属性文件的步骤如下</p><ol><li>创建一个Properties的对象出来（键值对集合，空容器）</li><li>调用load(字符输入流/字节输入流)方法，开始加载属性文件中的键值对数据到properties对象中去</li><li>调用getProperty(键)方法，根据键取值</li></ol><p>点击查看代码</p><p>代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握使用Properties类读取属性文件中的键值对信息。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PropertiesTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建一个Properties的对象出来（键值对集合，空容器）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> properties </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(properties);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、开始加载属性文件中的键值对数据到properties对象中去</span></span>
<span class="line"><span style="color:#F6F6F4;">        properties.</span><span style="color:#62E884;">load</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">properties-xml-log-app</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">src</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">users.properties</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(properties);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、根据键取值</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(properties.</span><span style="color:#62E884;">getProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">赵敏</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(properties.</span><span style="color:#62E884;">getProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张无忌</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、遍历全部的键和值。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取键的集合</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;String&gt; keys </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> properties.</span><span style="color:#62E884;">stringPropertyNames</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> keys) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//再根据键获取值</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> properties.</span><span style="color:#62E884;">getProperty</span><span style="color:#F6F6F4;">(key);</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(key </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> value);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        properties.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">((k, v) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(k </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> v);</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握使用Properties类读取属性文件中的键值对信息。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertiesTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建一个Properties的对象出来（键值对集合，空容器）</span></span>
<span class="line"><span style="color:#24292E;">        Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、开始加载属性文件中的键值对数据到properties对象中去</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;properties-xml-log-app</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">users.properties&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(properties);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、根据键取值</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;赵敏&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张无忌&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、遍历全部的键和值。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取键的集合</span></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">stringPropertyNames</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> keys) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//再根据键获取值</span></span>
<span class="line"><span style="color:#24292E;">            String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> properties.</span><span style="color:#6F42C1;">getProperty</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;----&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((k, v) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(k </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;----&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> v);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>使用Properties往属性文件中写键值对</strong>，需要用到的方法如下</p><img src="`+y+'"><p>往Properties属性文件中写键值对的步骤如下</p><ol><li>先准备一个.properties属性文件，按照格式写几个键值对</li><li>创建Properties对象出来，</li><li>调用setProperty存储一些键值对数据</li><li>调用store(字符输出流/字节输出流, 注释)，将Properties集合中的键和值写到文件中 <ul><li>注意：第二个参数是注释，必须得加；</li></ul></li></ol><p>先准备一个<code>users.properties</code>属性文件，如下图所示</p><img src="'+F+`"><p>接下来，编写代码读取上面的属性文件。代码如下：</p><p>点击查看代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PropertiesTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建Properties对象出来，先用它存储一些键值对数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> properties </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        properties.</span><span style="color:#62E884;">setProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张无忌</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">minmin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        properties.</span><span style="color:#62E884;">setProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">殷素素</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cuishan</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        properties.</span><span style="color:#62E884;">setProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张翠山</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">susu</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、把properties对象中的键值对数据存入到属性文件中去</span></span>
<span class="line"><span style="color:#F6F6F4;">        properties.</span><span style="color:#62E884;">store</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">properties-xml-log-app/src/users2.properties</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                         , </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">i saved many users!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertiesTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建Properties对象出来，先用它存储一些键值对数据</span></span>
<span class="line"><span style="color:#24292E;">        Properties properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张无忌&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;minmin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;殷素素&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;cuishan&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张翠山&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;susu&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、把properties对象中的键值对数据存入到属性文件中去</span></span>
<span class="line"><span style="color:#24292E;">        properties.</span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;properties-xml-log-app/src/users2.properties&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                         , </span><span style="color:#032F62;">&quot;i saved many users!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行上面的代码，<code>user2.properties</code> 配置文件打开效果如下图所示。</p><img src="`+i+'"><h2 id="二、xml文件-🚩-🍐-🚀" tabindex="-1">二、XML文件 🚩 🍐 🚀 <a class="header-anchor" href="#二、xml文件-🚩-🍐-🚀" aria-label="Permalink to &quot;二、XML文件 🚩 🍐 🚀&quot;">​</a></h2><h3 id="_1️⃣-2-1-xml文件概述-🍐" tabindex="-1">1️⃣ 2.1 XML文件概述 🍐 <a class="header-anchor" href="#_1️⃣-2-1-xml文件概述-🍐" aria-label="Permalink to &quot;1️⃣ 2.1 XML文件概述 🍐&quot;">​</a></h3><p>相关信息</p><p><strong>首先，我们来认识一下，什么是XML？</strong></p><p>XML是可扩展的标记语言，意思是它是由一些标签组成 的，而这些标签是自己定义的。本质上一种数据格式，可以用来表示复杂的数据关系。</p><p>XML文件有如下的特点：</p><ul><li>XML中的<code>&lt;标签名&gt;</code> 称为一个标签或者一个元素，一般是成对出现的。</li><li>XML中的标签名可以自己定义（可扩展） ，但是必须要正确的嵌套</li><li>XML中只能有一个根标签 。</li><li>XML标准中可以有属性</li><li>XML必须第一行有一个文档声明 ，格式是固定的<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li><li>XML文件必须是以.xml为后缀结尾</li></ul><p>如下图所示</p><img src="'+E+'"><img src="'+u+`"><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ?&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!-- 注释：以上抬头声明必须放在第一行，必须有 --&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!--  根标签只能有一个 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">users</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">user</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">desc</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">第一个用户</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;张无忌&lt;/</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">sex</span><span style="color:#F6F6F4;">&gt;男&lt;/</span><span style="color:#F286C4;">sex</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">地址</span><span style="color:#F6F6F4;">&gt;光明顶&lt;/</span><span style="color:#F286C4;">地址</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;">&gt;minmin&lt;/</span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">user</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">people</span><span style="color:#F6F6F4;">&gt;很多人&lt;/</span><span style="color:#F286C4;">people</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">user</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;敏敏&lt;/</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">sex</span><span style="color:#F6F6F4;">&gt;女&lt;/</span><span style="color:#F286C4;">sex</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">地址</span><span style="color:#F6F6F4;">&gt;光明顶&lt;/</span><span style="color:#F286C4;">地址</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;">&gt;wuji&lt;/</span><span style="color:#F286C4;">password</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">user</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">users</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> ?&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 注释：以上抬头声明必须放在第一行，必须有 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--  根标签只能有一个 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">users</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">user</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">desc</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;第一个用户&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;张无忌&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">sex</span><span style="color:#24292E;">&gt;男&lt;/</span><span style="color:#22863A;">sex</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">地址</span><span style="color:#24292E;">&gt;光明顶&lt;/</span><span style="color:#22863A;">地址</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;minmin&lt;/</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">user</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">people</span><span style="color:#24292E;">&gt;很多人&lt;/</span><span style="color:#22863A;">people</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">user</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;敏敏&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">sex</span><span style="color:#24292E;">&gt;女&lt;/</span><span style="color:#22863A;">sex</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">地址</span><span style="color:#24292E;">&gt;光明顶&lt;/</span><span style="color:#22863A;">地址</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;wuji&lt;/</span><span style="color:#22863A;">password</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">user</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">users</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>上面XML文件中的数据格式是最为常见的，标签有属性、文本、还有合理的嵌套。XML文件中除了写以上的数据格式之外，还有一些特殊的字符不能直接写。</p><ul><li><p>像 <code>&lt;,&gt;,&amp;</code> 等这些符号不能出现在标签的文本中，因为标签格式本身就有&lt;&gt;，会和标签格式冲突。</p><p>如果标签文本中有这些特殊字符，需要用一些占位符代替。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&amp;lt;  表示 &lt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&amp;gt;  表示 &gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&amp;amp; 表示 &amp;</span></span>
<span class="line"><span style="color:#f6f6f4;">&amp;apos; 表示 &#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">&amp;quot; 表示 &quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&amp;lt;  表示 &lt;</span></span>
<span class="line"><span style="color:#24292e;">&amp;gt;  表示 &gt;</span></span>
<span class="line"><span style="color:#24292e;">&amp;amp; 表示 &amp;</span></span>
<span class="line"><span style="color:#24292e;">&amp;apos; 表示 &#39;</span></span>
<span class="line"><span style="color:#24292e;">&amp;quot; 表示 &quot;</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">data</span><span style="color:#F6F6F4;">&gt; 3 </span><span style="color:#BF9EEE;">&amp;lt;</span><span style="color:#F6F6F4;"> 2 </span><span style="color:#BF9EEE;">&amp;amp;&amp;amp;</span><span style="color:#F6F6F4;"> 5 </span><span style="color:#BF9EEE;">&amp;gt;</span><span style="color:#F6F6F4;"> 4 &lt;/</span><span style="color:#F286C4;">data</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">data</span><span style="color:#24292E;">&gt; 3 </span><span style="color:#005CC5;">&amp;lt;</span><span style="color:#24292E;"> 2 </span><span style="color:#005CC5;">&amp;amp;&amp;amp;</span><span style="color:#24292E;"> 5 </span><span style="color:#005CC5;">&amp;gt;</span><span style="color:#24292E;"> 4 &lt;/</span><span style="color:#22863A;">data</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></li><li><p>如果在标签文本中，出现大量的特殊字符，不想使用特殊字符，此时可以用CDATA区，格式如下</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">data1</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;&lt;</span><span style="color:#F286C4;">img</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./part11/CDATA[</span></span>
<span class="line"><span style="color:#E7EE98;">   		3 &lt; 2 </span><span style="color:#EE6666;font-style:italic;text-decoration:underline;">&amp;&amp;</span><span style="color:#E7EE98;"> 5 &gt; 4</span></span>
<span class="line"><span style="color:#E7EE98;">    ]]&gt;</span></span>
<span class="line"><span style="color:#E7EE98;">&lt;/data1&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">data1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./part11/CDATA[</span></span>
<span class="line"><span style="color:#032F62;">   		3 &lt; 2 </span><span style="color:#B31D28;font-style:italic;">&amp;&amp;</span><span style="color:#032F62;"> 5 &gt; 4</span></span>
<span class="line"><span style="color:#032F62;">    ]]&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/data1&gt;</span></span></code></pre></div></li></ul><h3 id="_2️⃣-2-2-xml解析-🍐-🚀" tabindex="-1">2️⃣ 2.2 XML解析 🍐 🚀 <a class="header-anchor" href="#_2️⃣-2-2-xml解析-🍐-🚀" aria-label="Permalink to &quot;2️⃣ 2.2 XML解析 🍐 🚀&quot;">​</a></h3><p>使用程序读取XML文件中的数据，称之为XML解析</p><p>不需要我们自己写IO流代码去读取xml文件中的数据，直接使用现成的XML解析框架(如：DOM4J)</p><p>由于DOM4J是第三方提供的，所以需要把第三方提供的Jar包导入到自己的项目中来，才可以使用。具体步骤如下：</p><p><strong>DOM4J解析XML文件的思想是：</strong> 文档对象模型（意思是把整个XML文档、每一个标签、每一个属性都等都当做对象来看待）。</p><ul><li>Dowument对象表示整个XML文档</li><li>Element对象表示标签（元素）</li><li>Attribute对象表示属性</li><li>标签中的内容就是文本</li></ul><p>DOM4J解析XML需要用到的方法如下图所示</p><p><strong>XML解析的过程，是从根元素开始，从外层往里层解析。</strong> 我们先把Document对象，和根元素获取出来</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dom4JTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建一个Dom4J框架提供的解析器对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SAXReader</span><span style="color:#F6F6F4;"> saxReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SAXReader</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Document</span><span style="color:#F6F6F4;"> document </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">                saxReader.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">properties-xml-log-app</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">src</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">books.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、从文档对象中解析XML文件的全部数据了</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Element</span><span style="color:#F6F6F4;"> root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getRootElement</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(root.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dom4JTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建一个Dom4J框架提供的解析器对象</span></span>
<span class="line"><span style="color:#24292E;">        SAXReader saxReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SAXReader</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span></span>
<span class="line"><span style="color:#24292E;">        Document document </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                saxReader.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;properties-xml-log-app</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">books.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、从文档对象中解析XML文件的全部数据了</span></span>
<span class="line"><span style="color:#24292E;">        Element root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getRootElement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(root.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>准备好的books.xml文件</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">books</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;</span><span style="color:#F286C4;">book</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;凡人修仙传&lt;/</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">author</span><span style="color:#F6F6F4;">&gt;亡语&lt;/</span><span style="color:#F286C4;">author</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">desc</span><span style="color:#F6F6F4;">&gt;讲述韩立修仙的故事&lt;/</span><span style="color:#F286C4;">desc</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;/</span><span style="color:#F286C4;">book</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;</span><span style="color:#F286C4;">book</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;重生在黑马当班长&lt;/</span><span style="color:#F286C4;">name</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">author</span><span style="color:#F6F6F4;">&gt;嘿嘿&lt;/</span><span style="color:#F286C4;">author</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">desc</span><span style="color:#F6F6F4;">&gt;讲述在黑马学java的日子&lt;/</span><span style="color:#F286C4;">desc</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;/</span><span style="color:#F286C4;">book</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">books</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> ?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">books</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">book</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;凡人修仙传&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">author</span><span style="color:#24292E;">&gt;亡语&lt;/</span><span style="color:#22863A;">author</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">desc</span><span style="color:#24292E;">&gt;讲述韩立修仙的故事&lt;/</span><span style="color:#22863A;">desc</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">book</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">book</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;重生在黑马当班长&lt;/</span><span style="color:#22863A;">name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">author</span><span style="color:#24292E;">&gt;嘿嘿&lt;/</span><span style="color:#22863A;">author</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">desc</span><span style="color:#24292E;">&gt;讲述在黑马学java的日子&lt;/</span><span style="color:#22863A;">desc</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">book</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">books</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>获取到XML文件的根元素之后，接下来，就可以用根元素在获取到它里面的子元素（包括子标签、表属性等）。需要用到的方法如下图所示</p><p>接下来，把上面的方法先一个一个的演示一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dom4JTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建一个Dom4J框架提供的解析器对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SAXReader</span><span style="color:#F6F6F4;"> saxReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SAXReader</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Document</span><span style="color:#F6F6F4;"> document </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">                saxReader.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">properties-xml-log-app</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">src</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">book.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、从文档对象中解析XML文件的全部数据了</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Element</span><span style="color:#F6F6F4;"> root </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.</span><span style="color:#62E884;">getRootElement</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//        4.获得book</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Element&gt; book </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> root.</span><span style="color:#62E884;">elements</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">book</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Element</span><span style="color:#F6F6F4;"> element </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> book) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">书名：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">element.</span><span style="color:#62E884;">element</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">getStringValue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">作者：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">element.</span><span style="color:#62E884;">element</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">author</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">getStringValue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">描述：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">element.</span><span style="color:#62E884;">element</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">desc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">getStringValue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dom4JTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建一个Dom4J框架提供的解析器对象</span></span>
<span class="line"><span style="color:#24292E;">        SAXReader saxReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SAXReader</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span></span>
<span class="line"><span style="color:#24292E;">        Document document </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                saxReader.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;properties-xml-log-app</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">src</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">book.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、从文档对象中解析XML文件的全部数据了</span></span>
<span class="line"><span style="color:#24292E;">        Element root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getRootElement</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        4.获得book</span></span>
<span class="line"><span style="color:#24292E;">         List&lt;</span><span style="color:#D73A49;">Element</span><span style="color:#24292E;">&gt; book </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> root.</span><span style="color:#6F42C1;">elements</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;book&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Element element </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> book) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;书名：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">element</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getStringValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;作者：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">element</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;author&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getStringValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;描述：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">element.</span><span style="color:#6F42C1;">element</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;desc&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">getStringValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4️⃣-2-4-xml文件写入-🚀-了解" tabindex="-1">4️⃣ 2.4 XML文件写入 🚀 了解 <a class="header-anchor" href="#_4️⃣-2-4-xml文件写入-🚀-了解" aria-label="Permalink to &quot;4️⃣ 2.4 XML文件写入 🚀 了解&quot;">​</a></h3><p>能不能往XML文件中写入数据呢？ 答案是可以的。</p><p>DOM4J也提供了往XML文件中写标签的方法，但是用起来比较麻烦不建议使用。</p><p>我们自己使用StringBuilder按照标签的格式拼接，然后再使用BufferedWriter写到XML文件中去就可以了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Dom4JTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、使用一个StringBuilder对象来拼接XML格式的数据。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> sb </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;?xml version=</span><span style="color:#F286C4;">\\&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#F286C4;">\\&quot;</span><span style="color:#E7EE98;"> encoding=</span><span style="color:#F286C4;">\\&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#F286C4;">\\&quot;</span><span style="color:#E7EE98;"> ?&gt;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;book&gt;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;">&lt;name&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">从入门到跑路</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;/name&gt;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;">&lt;author&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dlei</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;/author&gt;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\t</span><span style="color:#E7EE98;">&lt;price&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">999.99</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;/price&gt;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&lt;/book&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">properties-xml-log-app/src/book.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">                ){</span></span>
<span class="line"><span style="color:#F6F6F4;">            bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(sb.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dom4JTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、使用一个StringBuilder对象来拼接XML格式的数据。</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;?xml version=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">1.0</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> encoding=</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">UTF-8</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;"> ?&gt;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;book&gt;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&lt;name&gt;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;从入门到跑路&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;/name&gt;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&lt;author&gt;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;dlei&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;/author&gt;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&lt;price&gt;&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">999.99</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;/price&gt;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&lt;/book&gt;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                BufferedWriter bw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;properties-xml-log-app/src/book.xml&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                ){</span></span>
<span class="line"><span style="color:#24292E;">            bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(sb.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_5️⃣-2-5-xml约束-🚀了解" tabindex="-1">5️⃣ 2.5 XML约束 🚀了解 <a class="header-anchor" href="#_5️⃣-2-5-xml约束-🚀了解" aria-label="Permalink to &quot;5️⃣ 2.5 XML约束 🚀了解&quot;">​</a></h3><p>XML约束</p><p>XML约束指的是<strong>限制</strong>XML文件中的<strong>标签或者属性</strong>，只能<strong>按照规定</strong>的格式<strong>写</strong>。提高规范性</p><p>比如我在项目中，想约束一个XML文件中的标签只能写&lt;书&gt;、&lt;书名&gt;、&lt;作者&gt;、&lt;售价&gt;这几个标签，如果写其他标签就报错。</p><p>约束技术：</p><p>一种是DTD约束已淘汰、一种是Schame约束下面作业可以体验一下效果。</p><p>作业练习</p><p>🚩 1. 按照下面的提示操作一下，体会一下约束的作用。</p><ul><li>第一步：在idea的src下创建一个pom.xml文件</li><li>第二步：在pom.xml文件中，粘贴下列代码</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">project</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">xmlns</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://maven.apache.org/POM/4.0.0</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#62E884;font-style:italic;">xmlns</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">xsi</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#62E884;font-style:italic;">xsi</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">schemaLocation</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;javaproject&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;com.huawei&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;1.0&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">modelVersion</span><span style="color:#F6F6F4;">&gt;4.0.0&lt;/</span><span style="color:#F286C4;">modelVersion</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!--   试着在这里写你自定一点标签 如&lt;book&gt;--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">project</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">project</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">xmlns</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">xmlns:xsi</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">xsi:schemaLocation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;javaproject&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.huawei&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">modelVersion</span><span style="color:#24292E;">&gt;4.0.0&lt;/</span><span style="color:#22863A;">modelVersion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!--   试着在这里写你自定一点标签 如&lt;book&gt;--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">project</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ul><li>第三步：在上述代码<code>深色</code>地方，写一些自定义的标签,如：<code>&lt;book&gt;</code>，或者输入 <code>&lt;</code>看是否有提示</li></ul><h2 id="三、日志技术-🚩-✏️" tabindex="-1">三、日志技术 🚩 ✏️ <a class="header-anchor" href="#三、日志技术-🚩-✏️" aria-label="Permalink to &quot;三、日志技术 🚩 ✏️&quot;">​</a></h2><h3 id="_1️⃣-3-1-日志概述-🍐" tabindex="-1">1️⃣ 3.1 日志概述 🍐 <a class="header-anchor" href="#_1️⃣-3-1-日志概述-🍐" aria-label="Permalink to &quot;1️⃣ 3.1 日志概述 🍐&quot;">​</a></h3><p>工作场景</p><ul><li>系统系统能记住<strong>某些数据被谁操作</strong>，比如被谁删除了？</li><li>想分析用户浏览系统的具体情况，比如<strong>挖掘</strong>用户的具体<strong>喜好</strong>？</li><li>当系统在开发中或者上线后<strong>出现了Bug</strong>，崩溃了，该通过<strong>什么去分析</strong>此时可以debug吗？，定位Bug?</li></ul><p>点击查看解决方案</p><p><strong>日志</strong>就可以帮我们解决以上的问题。</p><ul><li>日志就好比生活中的日记，日记可以记录生活中的点点滴滴；</li><li>而程序中的日志，通常就是<strong>一个文件</strong>，里面<strong>记录</strong>了程序<strong>运行过程</strong>中产生的<strong>各种数据</strong>。</li></ul><p><strong>日志技术有如下好处：</strong></p><ol><li><p>日志可以将系统执行的信息，方便的记录到指定位置，可以是<strong>控制台</strong>、可以是<strong>文件</strong>、可以是<strong>数据库</strong>中电脑关机不会消失。</p></li><li><p>日志可以随时以<strong>开关</strong>的形式<strong>控制启停</strong>非常灵活，无需侵入到源代码中去修改。</p></li></ol><h3 id="_2️⃣-3-2-日志的体系-🚀" tabindex="-1">2️⃣ 3.2 日志的体系 🚀 <a class="header-anchor" href="#_2️⃣-3-2-日志的体系-🚀" aria-label="Permalink to &quot;2️⃣ 3.2 日志的体系 🚀&quot;">​</a></h3><p>日志框架和日志的体系</p><ol><li>所谓日志框架就是由一些牛人或者第三方公司<strong>已经做好的实现代码</strong>，后来者就可以直接<strong>拿过去使用</strong>开发实用。🍐</li><li>日志框架有很多种，比如有JUL（java.util.logging）、Log4j、logback等。<strong>但是实现了同一套接口</strong> 一通百通 🍐</li></ol><blockquote><p>比较常用的日志框架，和日志接口的关系如下图所示</p></blockquote><ol start="3"><li>Logback日志框架，在行业中最为广泛使用</li></ol><p><strong>Logback日志分为哪几个模块</strong> 🚀</p><h3 id="_3️⃣-3-3-logback快速入门" tabindex="-1">3️⃣ 3.3 Logback快速入门 <a class="header-anchor" href="#_3️⃣-3-3-logback快速入门" aria-label="Permalink to &quot;3️⃣ 3.3 Logback快速入门&quot;">​</a></h3><blockquote><p>接下来，就带领小伙伴们快速使用一下Logback日志框架，</p></blockquote><p>使用Logback记录几条日志信息 到文件中去 和打印在控制台 上。</p><p><strong>Logback入门案例</strong></p><p>由于Logback是第三方提供的技术，所以首先需要啊将Jar包引入到项目中，具体步骤如下</p><ol><li>在资料中找到<code>slftj-api.jar、logback-core.jar、logback-classes.jar</code> 这三个jar包，复制一下</li><li>在当前模块下面新建一个lib文件夹，把刚刚复制的三个jar包都粘贴到此处</li><li>从资料中找到<code>logback.xml</code>配置文件(也可以复制创建文件)，将此文件复制粘贴到src目录下（必须是src目录）</li></ol><p>点击查看logback.xml代码</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">configuration</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--</span></span>
<span class="line"><span style="color:#7B7F8B;">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span>
<span class="line"><span style="color:#7B7F8B;">    --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">appender</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">CONSOLE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ch.qos.logback.core.ConsoleAppender</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">target</span><span style="color:#F6F6F4;">&gt;System.out&lt;/</span><span style="color:#F286C4;">target</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">encoder</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span></span>
<span class="line"><span style="color:#7B7F8B;">                %msg：日志消息，%n是换行符--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">pattern</span><span style="color:#F6F6F4;">&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level]  %c [%thread] : %msg%n&lt;/</span><span style="color:#F286C4;">pattern</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;/</span><span style="color:#F286C4;">encoder</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">appender</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!-- File是输出的方向通向文件的 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">appender</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">FILE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ch.qos.logback.core.rolling.RollingFileAppender</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">encoder</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">pattern</span><span style="color:#F6F6F4;">&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#F286C4;">pattern</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">charset</span><span style="color:#F6F6F4;">&gt;utf-8&lt;/</span><span style="color:#F286C4;">charset</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;/</span><span style="color:#F286C4;">encoder</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--日志输出路径--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">file</span><span style="color:#F6F6F4;">&gt;D:/log/itheima-data.log&lt;/</span><span style="color:#F286C4;">file</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--指定日志文件拆分和压缩规则--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">rollingPolicy</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">fileNamePattern</span><span style="color:#F6F6F4;">&gt;D:/log/itheima-data-%i-%d{yyyy-MM-dd}-.log.gz&lt;/</span><span style="color:#F286C4;">fileNamePattern</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">&lt;!--文件拆分大小--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">maxFileSize</span><span style="color:#F6F6F4;">&gt;1MB&lt;/</span><span style="color:#F286C4;">maxFileSize</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;/</span><span style="color:#F286C4;">rollingPolicy</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">appender</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--</span></span>
<span class="line"><span style="color:#7B7F8B;">        1、控制日志的输出情况：如，开启日志，取消日志</span></span>
<span class="line"><span style="color:#7B7F8B;">    --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">root</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">level</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">debug</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">appender-ref</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">CONSOLE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">/&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">appender-ref</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">FILE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">root</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">configuration</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span>
<span class="line"><span style="color:#6A737D;">    --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;CONSOLE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--输出流对象 默认 System.out 改为 System.err--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">target</span><span style="color:#24292E;">&gt;System.out&lt;/</span><span style="color:#22863A;">target</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度</span></span>
<span class="line"><span style="color:#6A737D;">                %msg：日志消息，%n是换行符--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level]  %c [%thread] : %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- File是输出的方向通向文件的 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;utf-8&lt;/</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--日志输出路径--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;D:/log/itheima-data.log&lt;/</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--指定日志文件拆分和压缩规则--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">rollingPolicy</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!--通过指定压缩文件名称，来确定分割文件方式--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;D:/log/itheima-data-%i-%d{yyyy-MM-dd}-.log.gz&lt;/</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">&lt;!--文件拆分大小--&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;1MB&lt;/</span><span style="color:#22863A;">maxFileSize</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--</span></span>
<span class="line"><span style="color:#6A737D;">        1、控制日志的输出情况：如，开启日志，取消日志</span></span>
<span class="line"><span style="color:#6A737D;">    --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;CONSOLE&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ol start="4"><li><p>然后就可以开始写代码了，在代码中创建一个日志记录日对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Logger</span><span style="color:#F6F6F4;"> LOGGER </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> LoggerFactory.</span><span style="color:#62E884;">getLogger</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">当前类名</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger LOGGER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;当前类名&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div></li><li><p>开始记录日志，代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LogBackTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 创建一个Logger日志对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Logger</span><span style="color:#F6F6F4;"> LOGGER </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> LoggerFactory.</span><span style="color:#62E884;">getLogger</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">LogBackTest</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//while (true) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chu法方法开始执行~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">chu</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chu法方法执行成功~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                LOGGER.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chu法方法执行失败了，出现了bug~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//}</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">chu</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        LOGGER.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">参数a:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> a);</span></span>
<span class="line"><span style="color:#F6F6F4;">        LOGGER.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">参数b:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">        LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">结果是：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> c);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogBackTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 创建一个Logger日志对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger LOGGER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;LogBackTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//while (true) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chu法方法开始执行~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">chu</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chu法方法执行成功~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                LOGGER.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chu法方法执行失败了，出现了bug~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//}</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">chu</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        LOGGER.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数a:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a);</span></span>
<span class="line"><span style="color:#24292E;">        LOGGER.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数b:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">        LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;结果是：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ol><p>当我们运行程序时，就可以看到控制台记录的日志</p><p>同时在文件中，也有一份这样的日志信息。文件在哪里内，从配置文件中去找</p><p>打开<code>D:/log/itheima-data.log</code>看一下文件中是否有记录日志吧！！</p><p>关于Logback的快速入门我们就做完了。至于日志的配置文件中，其他的配置是什么含义我们下一节再继续学习。</p><p>课堂作业</p><p>🚩 按照上述步骤，完成课堂案例吧！</p><ol><li>导入jar包（3个），导入xml配置文件，写一个类，书写一个main方法 快快开始把！！</li></ol><blockquote><p>运行main方法后，观察d盘的log目录下 是否存在日志文件</p></blockquote><h3 id="_4️⃣-3-4-日志配置文件-🚀" tabindex="-1">4️⃣ 3.4 日志配置文件 🚀 <a class="header-anchor" href="#_4️⃣-3-4-日志配置文件-🚀" aria-label="Permalink to &quot;4️⃣ 3.4 日志配置文件 🚀&quot;">​</a></h3><p>Logback提供了一个核心配置文件logback.xml，日志框架在记录日志时会读取配置文件中的配置信息，从而记录日志的形式。具体可以做哪些配置呢？</p><p>配置</p><ol><li>可以配置日志输出的位置是文件、还是控制台</li><li>可以配置日志输出的格式</li><li>还可以配置日志关闭和开启、以及哪些日志输出哪些日志不输出。 实操一下</li></ol><ul><li><p><strong>控制日志往文件中输出，还是往控制台输出</strong></p></li><li><p><strong>控制打开和关闭日志</strong> 👈</p></li><li><p><strong>控制日志的输出的格式</strong></p><p>日志格式是由一些特殊的符号组成，可以根据需要删减不想看到的部分。比如不想看到线程名那就不要[%thread]。但是不建议小伙伴们更改这些格式，因为这些都是日志很基本的信息。</p></li></ul><h3 id="_5️⃣-3-5-配置日志级别" tabindex="-1">5️⃣ 3.5 配置日志级别 <a class="header-anchor" href="#_5️⃣-3-5-配置日志级别" aria-label="Permalink to &quot;5️⃣ 3.5 配置日志级别&quot;">​</a></h3><ul><li><p>在哪里配置日志级别呢？如下图所示</p></li><li><p><strong>Logback只输出大于或者等于核心配置文件配置的日志级别信息</strong>。小于配置级别的日志信息，不被记录。</p></li></ul><p>相关信息</p><ul><li>配置的是trace，则trace、debug、info、warn、error级别的日志都被输出</li><li>配置的是debug, 则debug、info、warn、error级别的日志被输出</li><li>配置的是info,则info、warn、error级别的日志被输出</li></ul><p>课堂作业</p><p>🚩 1. 思考一下，是否是级别越低越好，因为这样信息越多越全？</p><h2 id="四、单元测试-🚩-✏️" tabindex="-1">四、单元测试 🚩 ✏️ <a class="header-anchor" href="#四、单元测试-🚩-✏️" aria-label="Permalink to &quot;四、单元测试 🚩 ✏️&quot;">​</a></h2><h3 id="_4-1-单元测试快速入门" tabindex="-1">4.1 单元测试快速入门 <a class="header-anchor" href="#_4-1-单元测试快速入门" aria-label="Permalink to &quot;4.1 单元测试快速入门&quot;">​</a></h3><p>所谓单元测试，就是针对最小的功能单元，编写测试代码对其进行正确性测试。</p><p>在main方法中写测试代码有如下的几个问题，如下图所示：</p><img src="`+d+'"><p>为了测试更加方便，有一些第三方的公司或者组织提供了很好用的测试框架，给开发者使用。这里给小伙伴们介绍一种Junit测试框架。</p><p><strong>Junit是第三方公司开源出来的</strong>，用于对代码进行单元测试的工具（IDEA已经集成了junit框架）。相比于在main方法中测试有如下几个优点。👍</p><img src="'+g+'"><hr><p>我们知道单元测试是什么之后，接下来带领小伙伴们使用一下。<strong>由于Junit是第三方提供的</strong>，所以我们需要把jar包导入到我们的项目中，才能使用，具体步骤如下图所示：</p><img src="'+C+`"><p>接下来，我们就按照上面的步骤，来使用一下.</p><p>点击查看验证代码</p><p>先准备一个类，假设写了一个StringUtil工具类，代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StringUtil</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printNumber</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">名字长度：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">name.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringUtil</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printNumber</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;名字长度：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">name.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来，写一个测试类，测试StringUtil工具类中的方法能否正常使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StringUtilTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testPrintNumber</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        StringUtil.</span><span style="color:#62E884;">printNumber</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">admin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        StringUtil.</span><span style="color:#62E884;">printNumber</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringUtilTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testPrintNumber</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        StringUtil.</span><span style="color:#6F42C1;">printNumber</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        StringUtil.</span><span style="color:#6F42C1;">printNumber</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>写完代码之后，我们会发现测试方法左边，会有一个绿色的三角形按钮。点击这个按钮，就可以运行测试方法。</p><img src="`+D+`"><h3 id="_4-2-单元测试断言-🍐" tabindex="-1">4.2 单元测试断言 🍐 <a class="header-anchor" href="#_4-2-单元测试断言-🍐" aria-label="Permalink to &quot;4.2 单元测试断言 🍐&quot;">​</a></h3><p>接下来，我们学习一个单元测试的断言机制</p><p><strong>所谓断言：意思是程序员可以预测程序的运行结果，检查程序的运行结果是否与预期一致。</strong></p><p>点击查看代码</p><p>我们在StringUtil类中新增一个测试方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMaxIndex</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> data){</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(data </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> data.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMaxIndex</span><span style="color:#24292E;">(String data){</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(data </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>接下来，我们在StringUtilTest类中写一个测试方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StringUtilTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testGetMaxIndex</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StringUtil.</span><span style="color:#62E884;">getMaxIndex</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">       System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(index1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StringUtil.</span><span style="color:#62E884;">getMaxIndex</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">admin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">       System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(index2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//断言机制：预测index2的结果可能是4</span></span>
<span class="line"><span style="color:#F6F6F4;">        Assert.</span><span style="color:#62E884;">assertEquals</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">方法内部有Bug</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,index2);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringUtilTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testGetMaxIndex</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtil.</span><span style="color:#6F42C1;">getMaxIndex</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(index1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringUtil.</span><span style="color:#6F42C1;">getMaxIndex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(index2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//断言机制：预测index2的结果可能是4</span></span>
<span class="line"><span style="color:#24292E;">        Assert.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;方法内部有Bug&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,index2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行测试方法，结果如下图所示，表示我们预期值与实际值不一致</p><img src="`+h+'"><p>作业</p><p>🚩 1. 参考上面的单元测试的入门案例，练习一下吧？</p><ol><li>测试方法test01 sout输出&quot;我和java不得不说的故事&quot; 观察运行颜色</li><li>测试方法test02 sout输出1/0 观察运行颜色</li><li>测试方法test03 使用断言 Assert.assertEquals(&quot;我估计有错&quot;,4,2); 观察运行后的颜色</li></ol><h3 id="_4-3-junit框架的常用注解-🚀-了解" tabindex="-1">4.3 Junit框架的常用注解 🚀 了解 <a class="header-anchor" href="#_4-3-junit框架的常用注解-🚀-了解" aria-label="Permalink to &quot;4.3 Junit框架的常用注解 🚀 了解&quot;">​</a></h3><p>小伙伴们，刚才我们以及学习了<code>@Test</code>注解，可以用来标记一个方法为测试方法，测试才能启动执行。</p><p>除了@Test注解，还有一些其他的注解，我们要知道其他注解标记的方法什么时候执行，以及其他注解在什么场景下可以使用。</p><img src="'+A+`"><p>接下来，我们演示一下其他注解的使用。我们在StringUtilTest测试类中，再新增几个测试方法。代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StringUtilTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Before</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt; test1 Before 执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">BeforeClass</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test11</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt; test11 BeforeClass 执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">After</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test2</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt; test2 After 执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">AfterCalss</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test22</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--&gt; test22 AfterCalss 执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringUtilTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Before</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--&gt; test1 Before 执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">BeforeClass</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test11</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--&gt; test11 BeforeClass 执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">After</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--&gt; test2 After 执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AfterCalss</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test22</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--&gt; test22 AfterCalss 执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行上面的测试类，结果如下图所示，观察执行结果特点如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.被@</span><span style="color:#97E1F1;font-style:italic;">BeforeClass标记的方法</span><span style="color:#F6F6F4;">,执行在所有方法之前</span></span>
<span class="line"><span style="color:#F6F6F4;">2.被@</span><span style="color:#97E1F1;font-style:italic;">AfterCalss标记的方法</span><span style="color:#F6F6F4;">，执行在所有方法之后</span></span>
<span class="line"><span style="color:#F6F6F4;">3.被@</span><span style="color:#97E1F1;font-style:italic;">Before标记的方法</span><span style="color:#F6F6F4;">，执行在每一个@</span><span style="color:#97E1F1;font-style:italic;">Test方法之前</span></span>
<span class="line"><span style="color:#F6F6F4;">4.被@</span><span style="color:#97E1F1;font-style:italic;">After标记的方法</span><span style="color:#F6F6F4;">，执行在每一个@</span><span style="color:#97E1F1;font-style:italic;">Test方法之后</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.被@</span><span style="color:#D73A49;">BeforeClass标记的方法</span><span style="color:#24292E;">,执行在所有方法之前</span></span>
<span class="line"><span style="color:#24292E;">2.被@</span><span style="color:#D73A49;">AfterCalss标记的方法</span><span style="color:#24292E;">，执行在所有方法之后</span></span>
<span class="line"><span style="color:#24292E;">3.被@</span><span style="color:#D73A49;">Before标记的方法</span><span style="color:#24292E;">，执行在每一个@</span><span style="color:#D73A49;">Test方法之前</span></span>
<span class="line"><span style="color:#24292E;">4.被@</span><span style="color:#D73A49;">After标记的方法</span><span style="color:#24292E;">，执行在每一个@</span><span style="color:#D73A49;">Test方法之后</span></span></code></pre></div><img src="`+m+'"><p>应用场景</p><p>我们现在已经知道每一个注解的作用了，那他们有什么用呢？应用场景在哪里?</p><ol><li>测试之前，需要加载准备数据</li><li>测试之后，需要释放内存</li></ol><p>最后，我们再补充一点。前面的注解是基于Junit4版本的，再Junit5版本中对注解作了更新，但是作用是一样的换汤不换药。所以这里就不做演示了</p><img src="'+b+`"><h2 id="五、多线程-🚩-❤️-🍐" tabindex="-1">五、多线程 🚩 ❤️ 🍐 <a class="header-anchor" href="#五、多线程-🚩-❤️-🍐" aria-label="Permalink to &quot;五、多线程 🚩 ❤️ 🍐&quot;">​</a></h2><p>多线程</p><p>接下来我们来学习一个<strong>全新而且非常重要</strong>的知识，叫做多线程</p><p><strong>线程其实是程序中的一条执行路径</strong></p><blockquote><p>之前写过的程序，其实都是单线程程序，如上图代码，如果前面的for循环没有执行完，for循环下面的代码是不会执行的。</p></blockquote><p>怎样的程序才是多线程程序呢？</p><ol><li>如下图所示：</li></ol><ul><li><p>12306网站就是支持多线程的，因为同时可以有很多人一起进入网站购票，而且每一个人互不影响。</p></li><li><p>百度网盘，可以同时下载或者上传多个文件。</p></li><li><p>单线程程序，就好比农村的路，同时只能一辆车通过，而4车道显然同时能通过多辆车</p></li></ul><p>这些程序中其实就有多条执行路径，每一条执行执行路径就是一条线程，所以这样的程序就是多线程程序。</p><p>认识了什么是多线程程序，那如何使用Java创建线程呢？ Java提供了几种创建线程的方式</p><h3 id="多线程的创建方式-✏️" tabindex="-1">多线程的创建方式 ✏️ <a class="header-anchor" href="#多线程的创建方式-✏️" aria-label="Permalink to &quot;多线程的创建方式 ✏️&quot;">​</a></h3><h4 id="_1️⃣-4-1-线程创建方式1" tabindex="-1">1️⃣ 4.1 线程创建方式1 <a class="header-anchor" href="#_1️⃣-4-1-线程创建方式1" aria-label="Permalink to &quot;1️⃣ 4.1 线程创建方式1&quot;">​</a></h4><p>Java为开发者提供了一个类叫做Thread，此类的对象用来表示线程。创建线程并执行线程的步骤如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.定义一个子类继承Thread类，并重写run方法</span></span>
<span class="line"><span style="color:#F6F6F4;">2.创建Thread的子类对象</span></span>
<span class="line"><span style="color:#F6F6F4;">3.调用start方法启动线程（启动线程后，会自动执行run方法中的代码）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.定义一个子类继承Thread类，并重写run方法</span></span>
<span class="line"><span style="color:#24292E;">2.创建Thread的子类对象</span></span>
<span class="line"><span style="color:#24292E;">3.调用start方法启动线程（启动线程后，会自动执行run方法中的代码）</span></span></code></pre></div><p>代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyThread</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 2、必须重写Thread类的run方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 描述线程的执行任务。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">子线程MyThread输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2、必须重写Thread类的run方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 描述线程的执行任务。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;子线程MyThread输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再定义一个测试类，在测试类中创建MyThread线程对象，并启动线程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// main方法是由一条默认的主线程负责执行。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、创建MyThread线程类的对象代表一个线程</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、启动线程（自动执行run方法的）</span></span>
<span class="line"><span style="color:#F6F6F4;">        t.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">主线程main输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// main方法是由一条默认的主线程负责执行。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、创建MyThread线程类的对象代表一个线程</span></span>
<span class="line"><span style="color:#24292E;">        Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、启动线程（自动执行run方法的）</span></span>
<span class="line"><span style="color:#24292E;">        t.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;主线程main输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打印结果如下图所示，我们会发现MyThread和main线程在相互抢夺CPU的执行权（<strong>注意：哪一个线程先执行，哪一个线程后执行，目前我们是无法控制的，每次输出结果都会不一样</strong>）</p><p><strong>最后我们还需要注意一点</strong>：不能直接去调用run方法，如果直接调用run方法就不认为是一条线程启动了，而是把Thread当做一个普通对象，此时run方法中的执行的代码会成为主线程的一部分。此时执行结果是这样的。</p><h4 id="_2️⃣-4-2-线程创建方式2" tabindex="-1">2️⃣ 4.2 线程创建方式2 <a class="header-anchor" href="#_2️⃣-4-2-线程创建方式2" aria-label="Permalink to &quot;2️⃣ 4.2 线程创建方式2&quot;">​</a></h4><p>接下来我们学习线程的第二种创建方式。Java为开发者提供了一个Runnable接口，该接口中只有一个run方法，意思就是通过Runnable接口的实现类对象专门来表示线程要执行的任务。具体步骤如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.先写一个Runnable接口的实现类，重写</span><span style="color:#62E884;">run方法</span><span style="color:#F6F6F4;">(这里面就是线程要执行的代码)</span></span>
<span class="line"><span style="color:#F6F6F4;">2.再创建一个Runnable实现类的对象</span></span>
<span class="line"><span style="color:#F6F6F4;">3.创建一个Thread对象，把Runnable实现类的对象传递给Thread</span></span>
<span class="line"><span style="color:#F6F6F4;">4.调用</span><span style="color:#62E884;">Thread对象的start</span><span style="color:#F6F6F4;">()方法启动线程（启动后会自动执行Runnable里面的run方法）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.先写一个Runnable接口的实现类，重写</span><span style="color:#6F42C1;">run方法</span><span style="color:#24292E;">(这里面就是线程要执行的代码)</span></span>
<span class="line"><span style="color:#24292E;">2.再创建一个Runnable实现类的对象</span></span>
<span class="line"><span style="color:#24292E;">3.创建一个Thread对象，把Runnable实现类的对象传递给Thread</span></span>
<span class="line"><span style="color:#24292E;">4.调用</span><span style="color:#6F42C1;">Thread对象的start</span><span style="color:#24292E;">()方法启动线程（启动后会自动执行Runnable里面的run方法）</span></span></code></pre></div><p>代码如下：先准备一个Runnable接口的实现类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 1、定义一个任务类，实现Runnable接口</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyRunnable</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 2、重写runnable的run方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 线程要执行的任务。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">子线程输出 ===》</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 1、定义一个任务类，实现Runnable接口</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRunnable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2、重写runnable的run方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 线程要执行的任务。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;子线程输出 ===》&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再写一个测试类，在测试类中创建线程对象，并执行线程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、创建任务对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> target </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyRunnable</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、把任务对象交给一个线程对象处理。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//  public Thread(Runnable target)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(target).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">主线程main输出 ===》</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、创建任务对象。</span></span>
<span class="line"><span style="color:#24292E;">        Runnable target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyRunnable</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、把任务对象交给一个线程对象处理。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//  public Thread(Runnable target)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(target).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;主线程main输出 ===》&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行上面代码，结果如下图所示**（注意：没有出现下面交替执行的效果，也是正常的）**</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">主线程main输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">主线程main输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">2</span></span>
<span class="line"><span style="color:#F6F6F4;">主线程main输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">3</span></span>
<span class="line"><span style="color:#F6F6F4;">子线程输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">子线程输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">2</span></span>
<span class="line"><span style="color:#F6F6F4;">子线程输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">3</span></span>
<span class="line"><span style="color:#F6F6F4;">子线程输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">4</span></span>
<span class="line"><span style="color:#F6F6F4;">子线程输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">主线程main输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">4</span></span>
<span class="line"><span style="color:#F6F6F4;">主线程main输出 </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">》</span><span style="color:#BF9EEE;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">主线程main输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">主线程main输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">主线程main输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">子线程输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">子线程输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">子线程输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">子线程输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">子线程输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">主线程main输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">主线程main输出 </span><span style="color:#D73A49;">===</span><span style="color:#24292E;">》</span><span style="color:#005CC5;">5</span></span></code></pre></div><h4 id="_3️⃣-4-3-线程创建方式2—匿名内部类" tabindex="-1">3️⃣ 4.3 线程创建方式2—匿名内部类 <a class="header-anchor" href="#_3️⃣-4-3-线程创建方式2—匿名内部类" aria-label="Permalink to &quot;3️⃣ 4.3 线程创建方式2—匿名内部类&quot;">​</a></h4><p>小伙伴们注意了，现在这种写法不是新知识。只是将前面第二种方式用匿名内部类改写一下。因为小伙伴们在看别人写的代码时，有可能会看到这种写法。你知道是怎么回事就可以了。</p><p>刚刚我们学习的第二种线程的创建方式，需要写一个Runnable接口的实现类，然后再把Runnable实现类的对象传递给Thread对象。</p><p><strong>现在我不想写Runnable实现类，于是可以直接创建Runnable接口的匿名内部类对象，传递给Thread对象。</strong></p><p>代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTest2_2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、直接创建Runnable接口的匿名内部类形式（任务对象）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> target </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">子线程1输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        };</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(target).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 简化形式1：</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">子线程2输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 简化形式2：</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(() </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">子线程3输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">主线程main输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTest2_2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、直接创建Runnable接口的匿名内部类形式（任务对象）</span></span>
<span class="line"><span style="color:#24292E;">        Runnable target </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;子线程1输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(target).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 简化形式1：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;子线程2输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 简化形式2：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;子线程3输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;主线程main输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_4️⃣4-4-线程的创建方式3" tabindex="-1">4️⃣4.4 线程的创建方式3 <a class="header-anchor" href="#_4️⃣4-4-线程的创建方式3" aria-label="Permalink to &quot;4️⃣4.4 线程的创建方式3&quot;">​</a></h4><p>接下来，我们学习线程的第三种创建方式。已经有两种了为什么还有要第三种呢？ 这样，我们先分析一下前面两种都存在的一个问题。然后再引出第三种可以解决这个问题。</p><ul><li><p>假设线程执行完毕之后有一些数据需要返回，前面两种方式重写的run方法均没有返回结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    ...线程执行的代码...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    ...线程执行的代码...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li><li><p>JDK5提供了Callable接口和FutureTask类来创建线程，它最大的优点就是有返回值。</p><p>在Callable接口中有一个call方法，重写call方法就是线程要执行的代码，它是有返回值的</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    ...线程执行的代码...</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> 结果;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    ...线程执行的代码...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> 结果;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><p><strong>第三种创建线程的方式，步骤如下</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.先定义一个Callable接口的实现类，重写call方法</span></span>
<span class="line"><span style="color:#F6F6F4;">2.创建Callable实现类的对象</span></span>
<span class="line"><span style="color:#F6F6F4;">3.创建FutureTask类的对象，将Callable对象传递给FutureTask</span></span>
<span class="line"><span style="color:#F6F6F4;">4.创建Thread对象，将Future对象传递给Thread</span></span>
<span class="line"><span style="color:#F6F6F4;">5.调用</span><span style="color:#62E884;">Thread的start</span><span style="color:#F6F6F4;">()方法启动线程(启动后会自动执行call方法)</span></span>
<span class="line"><span style="color:#F6F6F4;">   等</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">()方法执行完之后，会自动将返回值结果封装到FutrueTask对象中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">6.调用</span><span style="color:#62E884;">FutrueTask对的get</span><span style="color:#F6F6F4;">()方法获取返回结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.先定义一个Callable接口的实现类，重写call方法</span></span>
<span class="line"><span style="color:#24292E;">2.创建Callable实现类的对象</span></span>
<span class="line"><span style="color:#24292E;">3.创建FutureTask类的对象，将Callable对象传递给FutureTask</span></span>
<span class="line"><span style="color:#24292E;">4.创建Thread对象，将Future对象传递给Thread</span></span>
<span class="line"><span style="color:#24292E;">5.调用</span><span style="color:#6F42C1;">Thread的start</span><span style="color:#24292E;">()方法启动线程(启动后会自动执行call方法)</span></span>
<span class="line"><span style="color:#24292E;">   等</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">()方法执行完之后，会自动将返回值结果封装到FutrueTask对象中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">6.调用</span><span style="color:#6F42C1;">FutrueTask对的get</span><span style="color:#24292E;">()方法获取返回结果</span></span></code></pre></div><p>代码如下：先准备一个Callable接口的实现类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 1、让这个类实现Callable接口</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyCallable</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Callable</span><span style="color:#F6F6F4;">&lt;String&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyCallable</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> n;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 2、重写call方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 描述线程的任务，返回线程执行返回后的结果。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求：求1-n的和返回。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> n; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            sum </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> i;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">线程求出了1-</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的和是：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> sum;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 1、让这个类实现Callable接口</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCallable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Callable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCallable</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2、重写call方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 描述线程的任务，返回线程执行返回后的结果。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求：求1-n的和返回。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;线程求出了1-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的和是：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sum;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再定义一个测试类，在测试类中创建线程并启动线程，还要获取返回结果</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTest3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、创建一个Callable的对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Callable</span><span style="color:#F6F6F4;">&lt;String&gt; call </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyCallable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、把Callable的对象封装成一个FutureTask对象（任务对象）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 未来任务对象的作用？</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、是一个任务对象，实现了Runnable对象.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完毕后的结果。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FutureTask</span><span style="color:#F6F6F4;">&lt;String&gt; f1  </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FutureTask</span><span style="color:#F6F6F4;">&lt;&gt;(call);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 5、把任务对象交给一个Thread对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(f1).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Callable</span><span style="color:#F6F6F4;">&lt;String&gt; call2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyCallable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FutureTask</span><span style="color:#F6F6F4;">&lt;String&gt; f2  </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FutureTask</span><span style="color:#F6F6F4;">&lt;&gt;(call2);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(f2).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 6、获取线程执行完毕后返回的结果。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 注意：如果执行到这儿，假如上面的线程还没有执行完毕</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 这里的代码会暂停，等待上面线程执行完毕后才会获取结果。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f1.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(rs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> rs2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f2.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(rs2);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTest3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、创建一个Callable的对象</span></span>
<span class="line"><span style="color:#24292E;">        Callable&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; call </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCallable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、把Callable的对象封装成一个FutureTask对象（任务对象）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 未来任务对象的作用？</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、是一个任务对象，实现了Runnable对象.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完毕后的结果。</span></span>
<span class="line"><span style="color:#24292E;">        FutureTask&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; f1  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> FutureTask&lt;&gt;(call);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 5、把任务对象交给一个Thread对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(f1).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Callable&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; call2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyCallable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        FutureTask&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; f2  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> FutureTask&lt;&gt;(call2);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(f2).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 6、获取线程执行完毕后返回的结果。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注意：如果执行到这儿，假如上面的线程还没有执行完毕</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这里的代码会暂停，等待上面线程执行完毕后才会获取结果。</span></span>
<span class="line"><span style="color:#24292E;">        String rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f1.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(rs);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        String rs2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f2.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(rs2);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>作业</p><p>🚩 1. 利用上述的3种创建方式的任意1种创建线程，输出100次我爱java</p><blockquote><p>提示：可以创建100个线程，每个线程打印1次，也可以创建1个线程，单个线程打印100次，还可以创建10个线程，每个线程打印10次</p></blockquote><p>🚩 2.参考上述MyCallable案例，完成一个表白100次，然后给一个结果：你是个好人的案例</p><blockquote><p>提示：在call中运行100次后才返回：你是好人</p></blockquote><h3 id="多线程常用方法-🚩" tabindex="-1">多线程常用方法 🚩 <a class="header-anchor" href="#多线程常用方法-🚩" aria-label="Permalink to &quot;多线程常用方法 🚩&quot;">​</a></h3><img src="`+q+`"><p>下面我们演示一下<code>getName()</code>、<code>setName(String name)</code>、<code>currentThread()</code>、<code>sleep(long time)</code>这些方法的使用效果。</p><p>点击查看演示代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyThread</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(name); </span><span style="color:#7B7F8B;">//1.执行父类Thread(String name)构造器，为当前线程设置名字了</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2.currentThread() 哪个线程执行它，它就会得到哪个线程对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//3.getName() 获取线程名称</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(t.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(name); </span><span style="color:#6A737D;">//1.执行父类Thread(String name)构造器，为当前线程设置名字了</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2.currentThread() 哪个线程执行它，它就会得到哪个线程对象。</span></span>
<span class="line"><span style="color:#24292E;">        Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//3.getName() 获取线程名称</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再测试类中，创建线程对象，并启动线程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        t1.</span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">//设置线程名称;</span></span>
<span class="line"><span style="color:#F6F6F4;">        t1.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(t1.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());  </span><span style="color:#7B7F8B;">//Thread-0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2号线程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// t2.setName(&quot;2号线程&quot;);</span></span>
<span class="line"><span style="color:#F6F6F4;">        t2.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(t2.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// Thread-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 主线程对象的名字</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 哪个线程执行它，它就会得到哪个线程对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        m.</span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">最牛的线程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(m.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(m.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">线程输出：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Thread t1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(String name) </span><span style="color:#6A737D;">//设置线程名称;</span></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());  </span><span style="color:#6A737D;">//Thread-0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Thread t2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2号线程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// t2.setName(&quot;2号线程&quot;);</span></span>
<span class="line"><span style="color:#24292E;">        t2.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(t2.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// Thread-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 主线程对象的名字</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 哪个线程执行它，它就会得到哪个线程对象。</span></span>
<span class="line"><span style="color:#24292E;">        Thread m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        m.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;最牛的线程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;线程输出：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行上面代码，效果如下图所示，我们发现每一条线程都有自己了名字了。</p><img src="`+f+`"><p>点击查看join方法代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// join方法作用：让当前调用这个方法的线程先执行完。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1号线程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        t1.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        t1.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2号线程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        t2.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        t2.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyThread</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3号线程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        t3.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        t3.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// join方法作用：让当前调用这个方法的线程先执行完。</span></span>
<span class="line"><span style="color:#24292E;">        Thread t1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1号线程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t1.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Thread t2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2号线程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        t2.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t2.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Thread t3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyThread</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3号线程&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        t3.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        t3.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行效果是1号线程先执行完，再执行2号线程；2号线程执行完，再执行3号线程；3号线程执行完就结束了。</p><img src="`+v+'"><p>我们再尝试，把join()方法去掉，再看执行效果。此时你会发现2号线程没有执行完1号线程就执行了效果是多次运行才出现的，根据个人电脑而异，可能小伙伴半天也出现不了也是正常的</p><img src="'+B+'"><p>总结</p><ol><li>重点练习cureentThread 获取当前线程</li><li>练习sleep(毫秒) 让当前执行的线程休眠，俗称睡一下</li></ol><h3 id="并发和并行-🍐" tabindex="-1">并发和并行 🍐 <a class="header-anchor" href="#并发和并行-🍐" aria-label="Permalink to &quot;并发和并行 🍐&quot;">​</a></h3><p>先学习第一个补充知识点，并发和并行。在讲解并发和并行的含义之前，我们先来了解一下什么是进程、线程？</p><ul><li>正常运行的程序（软件）就是一个独立的进程</li><li>线程是属于进程，一个进程中包含多个线程</li><li>进程中的线程其实并发和并行同时存在（继续往下看）</li></ul><p>我们可以打开系统的任务管理器看看（快捷键：Ctrl+Shfit+Esc），自己的电脑上目前有哪些进程。</p><img src="'+k+'"><p>知道了什么是进程和线程之后，接着我们再来学习并发和并行的含义。</p><p><strong>首先，来学习一下什么是并发？</strong></p><p>进程中的线程由CPU负责调度执行，但是CPU同时处理线程的数量是优先的，为了保证全部线程都能执行到，CPU采用轮询机制为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。（简单记：并发就是多条线程交替执行）</p><p><strong>接下，再来学习一下什么是并行？</strong></p><p>并行指的是，多个线程同时被CPU调度执行。如下图所示，多个CPU核心在执行多条线程</p><img src="'+T+'"><p><strong>最后一个问题，多线程到底是并发还是并行呢？</strong></p><p>其实多个线程在我们的电脑上执行，并发和并行是同时存在的。</p><h3 id="线程的生命周期-🍐" tabindex="-1">线程的生命周期 🍐 <a class="header-anchor" href="#线程的生命周期-🍐" aria-label="Permalink to &quot;线程的生命周期 🍐&quot;">​</a></h3><p>接下来，我们学习最后一个有关线程的知识点，叫做线程的生命周期。所谓生命周期就是线程从生到死的过程中间有哪些状态，以及这些状态之间是怎么切换的。</p><p>为了让大家同好的理解线程的生命周期，先用人的生命周期举个例子，人从生到死有下面的几个过程。在人的生命周期过程中，各种状态之间可能会有切换，线程也是一样的。</p><img src="'+S+'"><p>接下来就来学习线程的生命周期。在Thread类中有一个嵌套的枚举类叫Thread.Status，这里面定义了线程的6中状态。如下图所示</p><img src="'+x+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">NEW</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 新建状态，线程还没有启动</span></span>
<span class="line"><span style="color:#F6F6F4;">RUNNABLE</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 可以运行状态，线程调用了</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">()方法后处于这个状态</span></span>
<span class="line"><span style="color:#F6F6F4;">BLOCKED</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 锁阻塞状态，没有获取到锁处于这个状态</span></span>
<span class="line"><span style="color:#F6F6F4;">WAITING</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 无限等待状态，线程执行时被调用了wait方法处于这个状态</span></span>
<span class="line"><span style="color:#F6F6F4;">TIMED_WAITING</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 计时等待状态，线程执行时被调用了</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(毫秒)或者</span><span style="color:#62E884;">wait</span><span style="color:#F6F6F4;">(毫秒)方法处于这个状态</span></span>
<span class="line"><span style="color:#F6F6F4;">TERMINATED</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 终止状态, 线程执行完毕或者遇到异常时，处于这个状态。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">NEW</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 新建状态，线程还没有启动</span></span>
<span class="line"><span style="color:#24292E;">RUNNABLE</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 可以运行状态，线程调用了</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">()方法后处于这个状态</span></span>
<span class="line"><span style="color:#24292E;">BLOCKED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 锁阻塞状态，没有获取到锁处于这个状态</span></span>
<span class="line"><span style="color:#24292E;">WAITING</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 无限等待状态，线程执行时被调用了wait方法处于这个状态</span></span>
<span class="line"><span style="color:#24292E;">TIMED_WAITING</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 计时等待状态，线程执行时被调用了</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(毫秒)或者</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">(毫秒)方法处于这个状态</span></span>
<span class="line"><span style="color:#24292E;">TERMINATED</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 终止状态, 线程执行完毕或者遇到异常时，处于这个状态。</span></span></code></pre></div><p>这几种状态之间切换关系如下图所示</p><img src="`+w+`"><p>点击查看演示代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 1.线程有6种状态，如果不记得，直接在Thread源码中，看State枚举</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 2.wait方法会导致线程处于Waiting状态，直到被notify或者notifyAll唤醒， wait，notify,notifyAll必须在synchronized 包裹中执行</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 3.当线程执行完后，会处于消亡状态</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadStateTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> thread </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (Thread.class){</span></span>
<span class="line"><span style="color:#7B7F8B;">//                  Thread.class.wait(); //思考：如果使用wait 此时状态是什么？</span></span>
<span class="line"><span style="color:#F6F6F4;">                  Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2222</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//思考：如果使用sleep 此时状态是什么？</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">              }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 执行了</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.此时thread的状态为：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">thread.</span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        thread.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2.此时thread的状态为：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">thread.</span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1111</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3.此时thread的状态为：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">thread.</span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1111</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">4.此时thread的状态为：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">thread.</span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 1.线程有6种状态，如果不记得，直接在Thread源码中，看State枚举</span></span>
<span class="line"><span style="color:#6A737D;"> * 2.wait方法会导致线程处于Waiting状态，直到被notify或者notifyAll唤醒， wait，notify,notifyAll必须在synchronized 包裹中执行</span></span>
<span class="line"><span style="color:#6A737D;"> * 3.当线程执行完后，会处于消亡状态</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadStateTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        Thread thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (Thread.class){</span></span>
<span class="line"><span style="color:#6A737D;">//                  Thread.class.wait(); //思考：如果使用wait 此时状态是什么？</span></span>
<span class="line"><span style="color:#24292E;">                  Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2222</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//思考：如果使用sleep 此时状态是什么？</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; 执行了&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1.此时thread的状态为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">thread.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        thread.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2.此时thread的状态为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">thread.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1111</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3.此时thread的状态为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">thread.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1111</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;4.此时thread的状态为：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">thread.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,262),L=[M];function P(j,R,X,N,O,U){return n(),a("div",null,L)}const J=s(_,[["render",P]]);export{I as __pageData,J as default};
