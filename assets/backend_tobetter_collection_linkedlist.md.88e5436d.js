import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/linkedlist-01.75df7d0b.png",o="/docs/assets/linkedlist-02.dd47080e.png",e="/docs/assets/linkedlist-03.5696a6c6.png",t="/docs/assets/linkedlist-04.8b137112.png",C=JSON.parse('{"title":"深入探讨 Java LinkedList：从源码分析到实践应用","description":"本文详细解析了 Java LinkedList 的实现原理、功能特点以及源码，为您提供了 LinkedList 的实际应用示例和性能优化建议。阅读本文，将帮助您更深入地理解 LinkedList，从而在实际编程中充分发挥其优势。","frontmatter":{"title":"深入探讨 Java LinkedList：从源码分析到实践应用","shortTitle":"LinkedList详解（附源码）","category":["Java核心"],"tag":["集合框架（容器）"],"description":"本文详细解析了 Java LinkedList 的实现原理、功能特点以及源码，为您提供了 LinkedList 的实际应用示例和性能优化建议。阅读本文，将帮助您更深入地理解 LinkedList，从而在实际编程中充分发挥其优势。","head":[["meta",{"name":"keywords","content":"Java,LinkedList,LinkedList源码,java linkedlist,源码分析"}]]},"headers":[],"relativePath":"backend/tobetter/collection/linkedlist.md","filePath":"backend/tobetter/collection/linkedlist.md"}'),c={name:"backend/tobetter/collection/linkedlist.md"},r=l(`<h1 id="_6-4-linkedlist详解-附源码" tabindex="-1">6.4 LinkedList详解（附源码） <a class="header-anchor" href="#_6-4-linkedlist详解-附源码" aria-label="Permalink to &quot;6.4 LinkedList详解（附源码）&quot;">​</a></h1><blockquote><p>这篇换个表达方式，一起来欣赏。</p></blockquote><p>大家好，我是 LinkedList，和 ArrayList 是同门师兄弟，但我俩练的内功却完全不同。师兄练的是动态数组，我练的是链表。</p><p>问大家一个问题，知道我为什么要练链表这门内功吗？</p><p>举个例子来讲吧，假如你们手头要管理一推票据，可能有一张，也可能有一亿张。</p><p>该怎么办呢？</p><p>申请一个 10G 的大数组等着？那万一票据只有 100 张呢？</p><p>申请一个默认大小的数组，随着数据量的增大扩容？要知道扩容是需要重新复制数组的，很耗时间。</p><p>关键是，数组还有一个弊端就是，假如现在有 500 万张票据，现在要从中间删除一个票据，就需要把 250 万张票据往前移动一格。</p><p>遇到这种情况的时候，我师兄几乎情绪崩溃，难受的要命。师父不忍心看到师兄这样痛苦，于是打我进入师门那一天，就强迫我练链表这门内功，一开始我很不理解，害怕师父偏心，不把师门最厉害的内功教我。</p><p>直到有一天，我亲眼目睹师兄差点因为移动数据而走火入魔，我才明白师父的良苦用心。从此以后，我苦练“链表”这门内功，取得了显著的进步，师父和师兄都夸我有天赋。</p><p>链表这门内功大致分为三个层次：</p><ul><li>第一层叫做“单向链表”，我只有一个后指针，指向下一个数据；</li><li>第二层叫做“双向链表”，我有两个指针，后指针指向下一个数据，前指针指向上一个数据。</li><li>第三层叫做“二叉树”，把后指针去掉，换成左右指针。</li></ul><p>但我现在的功力还达不到第三层，不过师父说我有这个潜力，练成神功是早晚的事。</p><h3 id="_01、linkedlist的内功心法" tabindex="-1">01、LinkedList的内功心法 <a class="header-anchor" href="#_01、linkedlist的内功心法" aria-label="Permalink to &quot;01、LinkedList的内功心法&quot;">​</a></h3><p>好了，经过我这么样的一个剖白后，大家对我应该已经不陌生了。那么接下来，我给大家展示一下我的内功心法。</p><p>我的内功心法主要是一个私有的静态内部类，叫 Node，也就是节点。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 链表中的节点类。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> item; </span><span style="color:#7B7F8B;">// 节点中存储的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; next; </span><span style="color:#7B7F8B;">// 指向下一个节点的指针</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; prev; </span><span style="color:#7B7F8B;">// 指向上一个节点的指针</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 构造一个新的节点。</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">prev</span><span style="color:#7B7F8B;"> 前一个节点</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#7B7F8B;"> 节点中要存储的元素</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#7B7F8B;"> 后一个节点</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Node</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; </span><span style="color:#FFB86C;font-style:italic;">prev</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 存储元素</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 设置下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> prev; </span><span style="color:#7B7F8B;">// 设置上一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 链表中的节点类。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    E item; </span><span style="color:#6A737D;">// 节点中存储的元素</span></span>
<span class="line"><span style="color:#24292E;">    Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; next; </span><span style="color:#6A737D;">// 指向下一个节点的指针</span></span>
<span class="line"><span style="color:#24292E;">    Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; prev; </span><span style="color:#6A737D;">// 指向上一个节点的指针</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 构造一个新的节点。</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">prev</span><span style="color:#6A737D;"> 前一个节点</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">element</span><span style="color:#6A737D;"> 节点中要存储的元素</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">next</span><span style="color:#6A737D;"> 后一个节点</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">(Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">prev</span><span style="color:#24292E;">, E </span><span style="color:#E36209;">element</span><span style="color:#24292E;">, Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 存储元素</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 设置下一个节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev; </span><span style="color:#6A737D;">// 设置上一个节点</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>它由三部分组成：</p><ul><li>节点上的元素</li><li>下一个节点</li><li>上一个节点</li></ul><p>我画幅图给你们展示下吧。</p><img src="`+p+`"><ul><li>对于第一个节点来说，prev 为 null；</li><li>对于最后一个节点来说，next 为 null；</li><li>其余的节点呢，prev 指向前一个，next 指向后一个。</li></ul><p>我的内功心法就这么简单，其实我早已经牢记在心了。但师父叮嘱我，每天早上醒来的时候，每天晚上睡觉的时候，一定要默默地背诵一遍。虽然我有些厌烦，但我对师父的教诲从来都是言听计从。</p><h3 id="_02、linkedlist的招式" tabindex="-1">02、LinkedList的招式 <a class="header-anchor" href="#_02、linkedlist的招式" aria-label="Permalink to &quot;02、LinkedList的招式&quot;">​</a></h3><p>和师兄 ArrayList 一样，我的招式也无外乎“增删改查”这 4 种。在此之前，我们都必须得初始化。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">LinkedList</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedList</span><span style="color:#24292E;">();</span></span></code></pre></div><p>师兄在初始化的时候可以指定大小，也可以不指定，等到添加第一个元素的时候进行第一次扩容。而我，没有大小，只要内存够大，我就可以无穷大。</p><h4 id="_1-招式一-增" tabindex="-1"><strong>1）招式一：增</strong> <a class="header-anchor" href="#_1-招式一-增" aria-label="Permalink to &quot;**1）招式一：增**&quot;">​</a></h4><p>可以调用 add 方法添加元素：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>add 方法内部其实调用的是 linkLast 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 将指定的元素添加到列表的尾部。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 始终为 true（根据 Java 集合框架规范）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(e); </span><span style="color:#7B7F8B;">// 在列表的尾部添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 添加元素成功，返回 true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将指定的元素添加到列表的尾部。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 始终为 true（根据 Java 集合框架规范）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(e); </span><span style="color:#6A737D;">// 在列表的尾部添加元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 添加元素成功，返回 true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>linkLast，顾名思义，就是在链表的尾部添加元素：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在列表的尾部添加指定的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; l </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last; </span><span style="color:#7B7F8B;">// 获取链表的最后一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; newNode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;&gt;(l, e, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 创建一个新的节点，并将其设置为链表的最后一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 将新的节点设置为链表的最后一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (l </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果链表为空，则将新节点设置为头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        l.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 否则将新节点链接到链表的尾部</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加链表的元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在列表的尾部添加指定的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last; </span><span style="color:#6A737D;">// 获取链表的最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; newNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;&gt;(l, e, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建一个新的节点，并将其设置为链表的最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">    last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 将新的节点设置为链表的最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果链表为空，则将新节点设置为头节点</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        l.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 否则将新节点链接到链表的尾部</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加链表的元素个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>添加第一个元素的时候，first 和 last 都为 null。</li><li>然后新建一个节点 newNode，它的 prev 和 next 也为 null。</li><li>然后把 last 和 first 都赋值为 newNode。</li></ul><p>此时还不能称之为链表，因为前后节点都是断裂的。</p><img src="`+o+'"><ul><li>添加第二个元素的时候，first 和 last 都指向的是第一个节点。</li><li>然后新建一个节点 newNode，它的 prev 指向的是第一个节点，next 为 null。</li><li>然后把第一个节点的 next 赋值为 newNode。</li></ul><p>此时的链表还不完整。</p><img src="'+e+'"><ul><li>添加第三个元素的时候，first 指向的是第一个节点，last 指向的是最后一个节点。</li><li>然后新建一个节点 newNode，它的 prev 指向的是第二个节点，next 为 null。</li><li>然后把第二个节点的 next 赋值为 newNode。</li></ul><p>此时的链表已经完整了。</p><img src="'+t+`"><p>我这个增的招式，还可以演化成另外两个版本：</p><ul><li><code>addFirst()</code> 方法将元素添加到第一位；</li><li><code>addLast()</code> 方法将元素添加到末尾。</li></ul><p>addFirst 内部其实调用的是 linkFirst：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在列表的开头添加指定的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFirst</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">linkFirst</span><span style="color:#F6F6F4;">(e); </span><span style="color:#7B7F8B;">// 在列表的开头添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在列表的开头添加指定的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFirst</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">linkFirst</span><span style="color:#24292E;">(e); </span><span style="color:#6A737D;">// 在列表的开头添加元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>linkFirst 负责把新的节点设为 first，并将新的 first 的 next 更新为之前的 first。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在列表的开头添加指定的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">linkFirst</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; </span><span style="color:#7B7F8B;">// 获取链表的第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; newNode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, e, f); </span><span style="color:#7B7F8B;">// 创建一个新的节点，并将其设置为链表的第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 将新的节点设置为链表的第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (f </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果链表为空，则将新节点设置为尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        f.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 否则将新节点链接到链表的头部</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加链表的元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在列表的开头添加指定的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkFirst</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; </span><span style="color:#6A737D;">// 获取链表的第一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; newNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;&gt;(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, e, f); </span><span style="color:#6A737D;">// 创建一个新的节点，并将其设置为链表的第一个节点</span></span>
<span class="line"><span style="color:#24292E;">    first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 将新的节点设置为链表的第一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果链表为空，则将新节点设置为尾节点</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        f.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 否则将新节点链接到链表的头部</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加链表的元素个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>addLast 的内核其实和 addFirst 差不多，内部调用的是 linkLast 方法，前面分析过了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在列表的尾部添加指定的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 始终为 true（根据 Java 集合框架规范）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addLast</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(e); </span><span style="color:#7B7F8B;">// 在列表的尾部添加元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 添加元素成功，返回 true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在列表的尾部添加指定的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要添加到列表的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 始终为 true（根据 Java 集合框架规范）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(e); </span><span style="color:#6A737D;">// 在列表的尾部添加元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 添加元素成功，返回 true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-招式二-删" tabindex="-1"><strong>2）招式二：删</strong> <a class="header-anchor" href="#_2-招式二-删" aria-label="Permalink to &quot;**2）招式二：删**&quot;">​</a></h4><p>我这个删的招式还挺多的：</p><ul><li><code>remove()</code>：删除第一个节点</li><li><code>remove(int)</code>：删除指定位置的节点</li><li><code>remove(Object)</code>：删除指定元素的节点</li><li><code>removeFirst()</code>：删除第一个节点</li><li><code>removeLast()</code>：删除最后一个节点</li></ul><p><code>remove()</code> 内部调用的是 <code>removeFirst()</code>，所以这两个招式的功效一样。</p><p><code>remove(int)</code> 内部其实调用的是 unlink 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 删除指定位置上的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要删除的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 从列表中删除的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引越界（index &amp;lt; 0 || index &amp;gt;= size()）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkElementIndex</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否越界</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index)); </span><span style="color:#7B7F8B;">// 删除指定位置的节点，并返回节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 删除指定位置上的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要删除的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 从列表中删除的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引越界（index &amp;lt; 0 || index &amp;gt;= size()）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkElementIndex</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否越界</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index)); </span><span style="color:#6A737D;">// 删除指定位置的节点，并返回节点的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>unlink 方法其实很好理解，就是更新当前节点的 next 和 prev，然后把当前节点上的元素设为 null。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 从链表中删除指定节点。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#7B7F8B;"> 要删除的节点</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 从链表中删除的节点的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> x) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.item; </span><span style="color:#7B7F8B;">// 获取要删除节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next; </span><span style="color:#7B7F8B;">// 获取要删除节点的下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.prev; </span><span style="color:#7B7F8B;">// 获取要删除节点的上一个节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (prev </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除节点是第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将链表的头节点设置为要删除节点的下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        prev.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将要删除节点的上一个节点指向要删除节点的下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        x.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除节点的上一个节点设置为空</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (next </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除节点是最后一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> prev; </span><span style="color:#7B7F8B;">// 将链表的尾节点设置为要删除节点的上一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        next.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> prev; </span><span style="color:#7B7F8B;">// 将要删除节点的下一个节点指向要删除节点的上一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        x.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除节点的下一个节点设置为空</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    x.item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除节点的元素设置为空</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 减少链表的元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 返回被删除节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 从链表中删除指定节点。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">x</span><span style="color:#6A737D;"> 要删除的节点</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 从链表中删除的节点的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">E </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> E element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.item; </span><span style="color:#6A737D;">// 获取要删除节点的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next; </span><span style="color:#6A737D;">// 获取要删除节点的下一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.prev; </span><span style="color:#6A737D;">// 获取要删除节点的上一个节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (prev </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除节点是第一个节点</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将链表的头节点设置为要删除节点的下一个节点</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        prev.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将要删除节点的上一个节点指向要删除节点的下一个节点</span></span>
<span class="line"><span style="color:#24292E;">        x.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除节点的上一个节点设置为空</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除节点是最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev; </span><span style="color:#6A737D;">// 将链表的尾节点设置为要删除节点的上一个节点</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        next.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev; </span><span style="color:#6A737D;">// 将要删除节点的下一个节点指向要删除节点的上一个节点</span></span>
<span class="line"><span style="color:#24292E;">        x.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除节点的下一个节点设置为空</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    x.item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除节点的元素设置为空</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 减少链表的元素个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 返回被删除节点的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>remove(Object) 内部也调用了 unlink 方法，只不过在此之前要先找到元素所在的节点：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 从链表中删除指定元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#7B7F8B;"> 要从链表中删除的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 如果链表包含指定元素，则返回 true；否则返回 false</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除的元素为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) { </span><span style="color:#7B7F8B;">// 遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x.item </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果节点的元素为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(x); </span><span style="color:#7B7F8B;">// 删除节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回 true 表示删除成功</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果要删除的元素不为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) { </span><span style="color:#7B7F8B;">// 遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(x.item)) { </span><span style="color:#7B7F8B;">// 如果节点的元素等于要删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(x); </span><span style="color:#7B7F8B;">// 删除节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回 true 表示删除成功</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 如果链表中不包含要删除的元素，则返回 false 表示删除失败</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 从链表中删除指定元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">o</span><span style="color:#6A737D;"> 要从链表中删除的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 如果链表包含指定元素，则返回 true；否则返回 false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除的元素为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) { </span><span style="color:#6A737D;">// 遍历链表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.item </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果节点的元素为 null</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 删除节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 true 表示删除成功</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果要删除的元素不为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) { </span><span style="color:#6A737D;">// 遍历链表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(x.item)) { </span><span style="color:#6A737D;">// 如果节点的元素等于要删除的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 删除节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 true 表示删除成功</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果链表中不包含要删除的元素，则返回 false 表示删除失败</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>元素为 null 的时候，必须使用 == 来判断；元素为非 null 的时候，要使用 equals 来判断。</p><p>removeFirst 内部调用的是 unlinkFirst 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 从链表中删除第一个元素并返回它。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 如果链表为空，则抛出 NoSuchElementException 异常。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 从链表中删除的第一个元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">NoSuchElementException</span><span style="color:#7B7F8B;"> 如果链表为空</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">removeFirst</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; </span><span style="color:#7B7F8B;">// 获取链表的第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (f </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果链表为空</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NoSuchElementException</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 抛出 NoSuchElementException 异常</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlinkFirst</span><span style="color:#F6F6F4;">(f); </span><span style="color:#7B7F8B;">// 调用 unlinkFirst 方法删除第一个节点并返回它的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 从链表中删除第一个元素并返回它。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果链表为空，则抛出 NoSuchElementException 异常。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 从链表中删除的第一个元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">NoSuchElementException</span><span style="color:#6A737D;"> 如果链表为空</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">removeFirst</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; </span><span style="color:#6A737D;">// 获取链表的第一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果链表为空</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoSuchElementException</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 抛出 NoSuchElementException 异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unlinkFirst</span><span style="color:#24292E;">(f); </span><span style="color:#6A737D;">// 调用 unlinkFirst 方法删除第一个节点并返回它的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>unlinkFirst 负责的就是把第一个节点毁尸灭迹，并且捎带把后一个节点的 prev 设为 null。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 删除链表中的第一个节点并返回它的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">f</span><span style="color:#7B7F8B;"> 要删除的第一个节点</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 被删除节点的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlinkFirst</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> f) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.item; </span><span style="color:#7B7F8B;">// 获取要删除的节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.next; </span><span style="color:#7B7F8B;">// 获取要删除的节点的下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    f.item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的元素设置为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">    f.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的下一个节点设置为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">    first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将链表的头节点设置为要删除的节点的下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (next </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果链表只有一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将链表的尾节点设置为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        next.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除节点的下一个节点的前驱设置为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 减少链表的大小</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 返回被删除节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 删除链表中的第一个节点并返回它的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">f</span><span style="color:#6A737D;"> 要删除的第一个节点</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 被删除节点的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">unlinkFirst</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> f) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> E element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.item; </span><span style="color:#6A737D;">// 获取要删除的节点的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.next; </span><span style="color:#6A737D;">// 获取要删除的节点的下一个节点</span></span>
<span class="line"><span style="color:#24292E;">    f.item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的元素设置为 null</span></span>
<span class="line"><span style="color:#24292E;">    f.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的下一个节点设置为 null</span></span>
<span class="line"><span style="color:#24292E;">    first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将链表的头节点设置为要删除的节点的下一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果链表只有一个节点</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将链表的尾节点设置为 null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        next.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除节点的下一个节点的前驱设置为 null</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 减少链表的大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 返回被删除节点的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-招式三-改" tabindex="-1"><strong>3）招式三：改</strong> <a class="header-anchor" href="#_3-招式三-改" aria-label="Permalink to &quot;**3）招式三：改**&quot;">​</a></h4><p>可以调用 <code>set()</code> 方法来更新元素：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王五</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王五&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>来看一下 <code>set()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 将链表中指定位置的元素替换为指定元素，并返回原来的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要替换元素的位置（从 0 开始）</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#7B7F8B;"> 要插入的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 替换前的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkElementIndex</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否超出范围</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 获取要替换的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> oldVal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.item; </span><span style="color:#7B7F8B;">// 获取要替换节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    x.item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 将要替换的节点的元素设置为指定元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldVal; </span><span style="color:#7B7F8B;">// 返回替换前的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将链表中指定位置的元素替换为指定元素，并返回原来的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要替换元素的位置（从 0 开始）</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">element</span><span style="color:#6A737D;"> 要插入的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 替换前的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, E element) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkElementIndex</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否超出范围</span></span>
<span class="line"><span style="color:#24292E;">    Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 获取要替换的节点</span></span>
<span class="line"><span style="color:#24292E;">    E oldVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.item; </span><span style="color:#6A737D;">// 获取要替换节点的元素</span></span>
<span class="line"><span style="color:#24292E;">    x.item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 将要替换的节点的元素设置为指定元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldVal; </span><span style="color:#6A737D;">// 返回替换前的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来看一下node方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 获取链表中指定位置的节点。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 节点的位置（从 0 开始）</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 指定位置的节点</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> (size </span><span style="color:#F286C4;">&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) { </span><span style="color:#7B7F8B;">// 如果索引在链表的前半部分</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> index; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 从头节点开始向后遍历链表，直到找到指定位置的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">            x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x; </span><span style="color:#7B7F8B;">// 返回指定位置的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果索引在链表的后半部分</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> index; i</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 从尾节点开始向前遍历链表，直到找到指定位置的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">            x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.prev;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x; </span><span style="color:#7B7F8B;">// 返回指定位置的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 获取链表中指定位置的节点。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 节点的位置（从 0 开始）</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 指定位置的节点</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (size </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) { </span><span style="color:#6A737D;">// 如果索引在链表的前半部分</span></span>
<span class="line"><span style="color:#24292E;">        Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> index; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 从头节点开始向后遍历链表，直到找到指定位置的节点</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 返回指定位置的节点</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果索引在链表的后半部分</span></span>
<span class="line"><span style="color:#24292E;">        Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> index; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 从尾节点开始向前遍历链表，直到找到指定位置的节点</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.prev;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 返回指定位置的节点</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>size &gt;&gt; 1</code>：也就是右移一位，相当于除以 2。对于计算机来说，移位比除法运算效率更高，因为数据在计算机内部都是以二进制存储的。</p><p>换句话说，node 方法会对下标进行一个初步判断，如果靠近前半截，就从下标 0 开始遍历；如果靠近后半截，就从末尾开始遍历，这样可以提高效率，最大能提高一半的效率。</p><p>找到指定下标的节点就简单了，直接把原有节点的元素替换成新的节点就 OK 了，prev 和 next 都不用改动。</p><h4 id="_4-招式四-查" tabindex="-1"><strong>4）招式四：查</strong> <a class="header-anchor" href="#_4-招式四-查" aria-label="Permalink to &quot;**4）招式四：查**&quot;">​</a></h4><p>我这个查的招式可以分为两种：</p><ul><li>indexOf(Object)：查找某个元素所在的位置</li><li>get(int)：查找某个位置上的元素</li></ul><p>来看一下 indexOf 方法的源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回链表中首次出现指定元素的位置，如果不存在该元素则返回 -1。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#7B7F8B;"> 要查找的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 首次出现指定元素的位置，如果不存在该元素则返回 -1</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 初始化索引为 0</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要查找的元素为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) { </span><span style="color:#7B7F8B;">// 从头节点开始向后遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x.item </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> index; </span><span style="color:#7B7F8B;">// 返回该元素的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            index</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 索引加 1</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果要查找的元素不为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) { </span><span style="color:#7B7F8B;">// 从头节点开始向后遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(x.item)) </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> index; </span><span style="color:#7B7F8B;">// 返回该元素的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            index</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 索引加 1</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 如果没有找到要查找的元素，则返回 -1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回链表中首次出现指定元素的位置，如果不存在该元素则返回 -1。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">o</span><span style="color:#6A737D;"> 要查找的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 首次出现指定元素的位置，如果不存在该元素则返回 -1</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 初始化索引为 0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要查找的元素为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) { </span><span style="color:#6A737D;">// 从头节点开始向后遍历链表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.item </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> index; </span><span style="color:#6A737D;">// 返回该元素的索引</span></span>
<span class="line"><span style="color:#24292E;">            index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 索引加 1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果要查找的元素不为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) { </span><span style="color:#6A737D;">// 从头节点开始向后遍历链表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(x.item)) </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> index; </span><span style="color:#6A737D;">// 返回该元素的索引</span></span>
<span class="line"><span style="color:#24292E;">            index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 索引加 1</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果没有找到要查找的元素，则返回 -1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>get 方法的内核其实还是 node 方法，node 方法之前已经说明过了，这里略过。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkElementIndex</span><span style="color:#F6F6F4;">(index);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index).item;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkElementIndex</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index).item;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其实，查这个招式还可以演化为其他的一些，比如说：</p><ul><li><code>getFirst()</code> 方法用于获取第一个元素；</li><li><code>getLast()</code> 方法用于获取最后一个元素；</li><li><code>poll()</code> 和 <code>pollFirst()</code> 方法用于删除并返回第一个元素（两个方法尽管名字不同，但方法体是完全相同的）；</li><li><code>pollLast()</code> 方法用于删除并返回最后一个元素；</li><li><code>peekFirst()</code> 方法用于返回但不删除第一个元素。</li></ul><h3 id="_03、linkedlist-的挑战" tabindex="-1">03、LinkedList 的挑战 <a class="header-anchor" href="#_03、linkedlist-的挑战" aria-label="Permalink to &quot;03、LinkedList 的挑战&quot;">​</a></h3><p>说句实在话，我不是很喜欢和师兄 ArrayList 拿来比较，因为我们各自修炼的内功不同，没有孰高孰低。</p><p>虽然师兄经常喊我一声师弟，但我们之间其实挺和谐的。但我知道，在外人眼里，同门师兄弟，总要一较高下的。</p><p>比如说，我们俩在增删改查时候的时间复杂度。</p><p>也许这就是命运吧，从我进入师门的那天起，这种争论就一直没有停息过。</p><p>无论外人怎么看待我们，在我眼里，师兄永远都是一哥，我敬重他，他也愿意保护我。</p><p><a href="https://tobebetterjavaer.com/collection/list-war-2.html" target="_blank" rel="noreferrer">好戏在后头</a>，等着瞧吧。</p><p>我这里先简单聊一下，权当抛砖引玉。</p><p>想象一下，你在玩一款游戏，游戏中有一个道具栏，你需要不断地往里面添加、删除道具。如果你使用的是我的师兄 ArrayList，那么每次添加、删除道具时都需要将后面的道具向后移动或向前移动，这样就会非常耗费时间。但是如果你使用的是我 LinkedList，那么只需要将新道具插入到链表中的指定位置，或者将要删除的道具从链表中删除即可，这样就可以快速地完成道具栏的更新。</p><p>除了游戏中的道具栏，我 LinkedList 还可以用于实现 LRU（Least Recently Used）缓存淘汰算法。LRU 缓存淘汰算法是一种常用的缓存淘汰策略，它的基本思想是，当缓存空间不够时，优先淘汰最近最少使用的缓存数据。在实现 LRU 缓存淘汰算法时，你可以使用我 LinkedList 来存储缓存数据，每次访问缓存数据时，将该数据从链表中删除并移动到链表的头部，这样链表的尾部就是最近最少使用的缓存数据，当缓存空间不够时，只需要将链表尾部的缓存数据淘汰即可。</p><p>总之，各有各的好，且行且珍惜。</p><hr>`,98),y=[r];function F(i,E,d,B,D,A){return n(),a("div",null,y)}const f=s(c,[["render",F]]);export{C as __pageData,f as default};
