import{_ as e,o as s,c as a,V as i}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/redis/redis-04.md","filePath":"interview/backend/redis/redis-04.md"}'),d={name:"interview/backend/redis/redis-04.md"},r=i('<h3 id="_1、为什么redis需要把所有数据放到内存中" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1%E4%B8%BA%E4%BB%80%E4%B9%88redis%E9%9C%80%E8%A6%81%E6%8A%8A%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E6%94%BE%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%AD" target="_blank" rel="noreferrer">1、为什么Redis需要把所有数据放到内存中？</a> <a class="header-anchor" href="#_1、为什么redis需要把所有数据放到内存中" aria-label="Permalink to &quot;[1、为什么Redis需要把所有数据放到内存中？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#1为什么redis需要把所有数据放到内存中)&quot;">​</a></h3><p>Redis为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以Redis具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘I/O速度为严重影响Redis的性能。在内存越来越便宜的今天，Redis将会越来越受欢迎。</p><p>如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。</p><h3 id="_2、查看redis使用情况及状态信息用什么命令" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E6%9F%A5%E7%9C%8Bredis%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E5%8F%8A%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BB%80%E4%B9%88%E5%91%BD%E4%BB%A4" target="_blank" rel="noreferrer">2、查看Redis使用情况及状态信息用什么命令？</a> <a class="header-anchor" href="#_2、查看redis使用情况及状态信息用什么命令" aria-label="Permalink to &quot;[2、查看Redis使用情况及状态信息用什么命令？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#2查看redis使用情况及状态信息用什么命令)&quot;">​</a></h3><p>info</p><h3 id="_4、修改配置不重启redis会实时生效吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E4%B8%8D%E9%87%8D%E5%90%AFredis%E4%BC%9A%E5%AE%9E%E6%97%B6%E7%94%9F%E6%95%88%E5%90%97" target="_blank" rel="noreferrer">4、修改配置不重启Redis会实时生效吗？</a> <a class="header-anchor" href="#_4、修改配置不重启redis会实时生效吗" aria-label="Permalink to &quot;[4、修改配置不重启Redis会实时生效吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#4修改配置不重启redis会实时生效吗)&quot;">​</a></h3><p>针对运行实例，有许多配置选项可以通过 CONFIG SET 命令进行修改，而无需执行任何形式的重启。 从 Redis 2.2 开始，可以从 AOF 切换到 RDB 的快照持久性或其他方式而不需要重启 Redis。检索 ‘CONFIG GET *’ 命令获取更多信息。</p><p>但偶尔重新启动是必须的，如为升级 Redis 程序到新的版本，或者当你需要修改某些目前 CONFIG 命令还不支持的配置参数的时候。</p><h3 id="_5、是否使用过-redis-集群-集群的原理是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E8%BF%87-redis-%E9%9B%86%E7%BE%A4%E9%9B%86%E7%BE%A4%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">5、是否使用过 Redis 集群，集群的原理是什么？</a> <a class="header-anchor" href="#_5、是否使用过-redis-集群-集群的原理是什么" aria-label="Permalink to &quot;[5、是否使用过 Redis 集群，集群的原理是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#5是否使用过-redis-集群集群的原理是什么)&quot;">​</a></h3><p><strong>1、</strong> Redis Sentinal 着眼于高可用， 在 master 宕机时会自动将 slave 提升为master， 继续提供服务。</p><p><strong>2、</strong> Redis Cluster 着眼于扩展性， 在单个 Redis 内存不足时， 使用 Cluster 进行分片存储。</p><h3 id="_6、缓存并发问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E7%BC%93%E5%AD%98%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">6、缓存并发问题</a> <a class="header-anchor" href="#_6、缓存并发问题" aria-label="Permalink to &quot;[6、缓存并发问题](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#6缓存并发问题)&quot;">​</a></h3><p>这里的并发指的是多个Redis的client同时set key引起的并发问题。比较有效的解决方案就是把Redis.set操作放在队列中使其串行化，必须的一个一个执行，具体的代码就不上了，当然加锁也是可以的，至于为什么不用Redis中的事务，留给各位看官自己思考探究。</p><h3 id="_7、使用过redis分布式锁么-它是什么回事" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E4%BD%BF%E7%94%A8%E8%BF%87redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%88%E5%AE%83%E6%98%AF%E4%BB%80%E4%B9%88%E5%9B%9E%E4%BA%8B" target="_blank" rel="noreferrer">7、使用过Redis分布式锁么，它是什么回事？</a> <a class="header-anchor" href="#_7、使用过redis分布式锁么-它是什么回事" aria-label="Permalink to &quot;[7、使用过Redis分布式锁么，它是什么回事？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#7使用过redis分布式锁么它是什么回事)&quot;">​</a></h3><p>先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。</p><p>这时候对方会告诉你说你回答得不错，然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？</p><p>这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回我记得set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！对方这时会显露笑容，心里开始默念：摁，这小子还不错。</p><h3 id="_8、reids主从复制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8reids%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" target="_blank" rel="noreferrer">8、Reids主从复制</a> <a class="header-anchor" href="#_8、reids主从复制" aria-label="Permalink to &quot;[8、Reids主从复制](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#8reids主从复制)&quot;">​</a></h3><p>复制是高可用Redis的基础，哨兵和集群都是在复制基础上实现高可用的。复制主要实现了数据的多机备份，以及对于读操作的负载均衡和简单的故障恢复。缺陷：故障恢复无法自动化；写操作无法负载均衡；存储能力受到单机的限制。</p><h3 id="_9、redis与memcached相比有哪些优势" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9redis%E4%B8%8Ememcached%E7%9B%B8%E6%AF%94%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8A%BF" target="_blank" rel="noreferrer">9、Redis与Memcached相比有哪些优势？</a> <a class="header-anchor" href="#_9、redis与memcached相比有哪些优势" aria-label="Permalink to &quot;[9、Redis与Memcached相比有哪些优势？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#9redis与memcached相比有哪些优势)&quot;">​</a></h3><p><strong>1、</strong> Memcached所有的值均是简单的字符串，Redis作为其替代者，支持更为丰富的数据类型</p><p><strong>2、</strong> Redis的速度比Memcached快很多Redis的速度比Memcached快很多</p><p><strong>3、</strong> Redis可以持久化其数据Redis可以持久化其数据</p><h3 id="_10、redis-最适合的场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10redis-%E6%9C%80%E9%80%82%E5%90%88%E7%9A%84%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">10、Redis 最适合的场景？</a> <a class="header-anchor" href="#_10、redis-最适合的场景" aria-label="Permalink to &quot;[10、Redis 最适合的场景？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新2021年面试题及答案，汇总版.md#10redis-最适合的场景)&quot;">​</a></h3><p><strong>1、</strong> 会话缓存（ Session Cache）</p><p>最常用的一种使用 Redis 的情景是会话缓存（ session cache）。用 Redis 缓存会话比其他存储（ 如 Memcached）的优势在于：Redis 提供持久化。当维护一个不是严格要求一致性的缓存时， 如果用户的购物车信息全部丢失， 大部分人都会不高兴的， 现在， 他们还会这样吗？ 幸运的是， 随着 Redis 这些年的改进， 很容易找到怎么恰当的使用 Redis 来缓存会话的文档。甚至广为人知的商业平台Magento 也提供 Redis 的插件。</p><p><strong>2、</strong> 全页缓存（ FPC）</p><p>除基本的会话 token 之外， Redis 还提供很简便的 FPC 平台。回到一致性问题， 即使重启了 Redis 实例， 因为有磁盘的持久化， 用户也不会看到页面加载速度的下降，这是一个极大改进，类似 PHP 本地 FPC。 再次以 Magento 为例，Magento 提供一个插件来使用 Redis 作为全页缓存后端。 此外， 对 WordPress 的用户来说， Pantheon 有一个非常好的插件 wp-Redis， 这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><p>3、队列</p><p>Reids 在内存存储引擎领域的一大优点是提供 list 和 set 操作， 这使得 Redis 能作为一个很好的消息队列平台来使用。Redis 作为队列使用的操作，就类似于本地程序语言（ 如 Python）对 list 的 push/pop 操作。 如果你快速的在 Google 中搜索“ Redis queues”， 你马上就能找到大量的开源项目， 这些项目的目的就是利用 Redis 创建非常好的后端工具， 以满足各种队列需求。例如， Celery 有一个后台就是使用 Redis 作为 broker， 你可以从这里去查看。</p><p>4， 排行榜/计数器</p><p>Redis 在内存中对数字进行递增或递减的操作实现的非常好。集合（ Set） 和有序集合（ Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis 只是正好提供了这两种数据结构。所以， 我们要从排序集合中获取到排名最靠前的 10 个用户– 我们称之为“ user_scores”， 我们只需要像下面一样执行即可： 当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数， 你需要这样执行： ZRANGE user_scores 0 10 WITHSCORES Agora Games 就是一个很好的例子， 用 Ruby 实现的， 它的排行榜就是使用 Redis 来存储数据的， 你可以在这里看到。</p><p><strong>5、</strong> 发布/订阅</p><p>最后（ 但肯定不是最不重要的）是 Redis 的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用， 还可作为基于发布/订阅的脚本触发器， 甚至用 Redis 的发布/订阅功能来建立聊天系统！</p><h3 id="_11、redis对象有5种类型" tabindex="-1">11、Redis对象有5种类型 <a class="header-anchor" href="#_11、redis对象有5种类型" aria-label="Permalink to &quot;11、Redis对象有5种类型&quot;">​</a></h3><h3 id="_12、redis回收进程如何工作的" tabindex="-1">12、Redis回收进程如何工作的？ <a class="header-anchor" href="#_12、redis回收进程如何工作的" aria-label="Permalink to &quot;12、Redis回收进程如何工作的？&quot;">​</a></h3><h3 id="_13、redis中的管道有什么用" tabindex="-1">13、Redis中的管道有什么用？ <a class="header-anchor" href="#_13、redis中的管道有什么用" aria-label="Permalink to &quot;13、Redis中的管道有什么用？&quot;">​</a></h3><h3 id="_14、reids持久化触发条件" tabindex="-1">14、Reids持久化触发条件 <a class="header-anchor" href="#_14、reids持久化触发条件" aria-label="Permalink to &quot;14、Reids持久化触发条件&quot;">​</a></h3><h3 id="_15、memcache与redis的区别都有哪些" tabindex="-1">15、Memcache与Redis的区别都有哪些？ <a class="header-anchor" href="#_15、memcache与redis的区别都有哪些" aria-label="Permalink to &quot;15、Memcache与Redis的区别都有哪些？&quot;">​</a></h3><h3 id="_16、redis的同步机制了解么" tabindex="-1">16、Redis的同步机制了解么？ <a class="header-anchor" href="#_16、redis的同步机制了解么" aria-label="Permalink to &quot;16、Redis的同步机制了解么？&quot;">​</a></h3><h3 id="_17、redis-最适合的场景" tabindex="-1">17、Redis 最适合的场景 <a class="header-anchor" href="#_17、redis-最适合的场景" aria-label="Permalink to &quot;17、Redis 最适合的场景&quot;">​</a></h3><h3 id="_18、如果有大量的-key-需要设置同一时间过期-一般需要注意什么" tabindex="-1">18、如果有大量的 key 需要设置同一时间过期，一般需要注意什么？ <a class="header-anchor" href="#_18、如果有大量的-key-需要设置同一时间过期-一般需要注意什么" aria-label="Permalink to &quot;18、如果有大量的 key 需要设置同一时间过期，一般需要注意什么？&quot;">​</a></h3><h3 id="_19、使用过-redis-做异步队列么-你是怎么用的" tabindex="-1">19、使用过 Redis 做异步队列么，你是怎么用的？ <a class="header-anchor" href="#_19、使用过-redis-做异步队列么-你是怎么用的" aria-label="Permalink to &quot;19、使用过 Redis 做异步队列么，你是怎么用的？&quot;">​</a></h3><h3 id="_20、redis相比memcached有哪些优势" tabindex="-1">20、Redis相比Memcached有哪些优势？ <a class="header-anchor" href="#_20、redis相比memcached有哪些优势" aria-label="Permalink to &quot;20、Redis相比Memcached有哪些优势？&quot;">​</a></h3><h3 id="_21、都有哪些办法可以降低redis的内存使用情况呢" tabindex="-1">21、都有哪些办法可以降低Redis的内存使用情况呢？ <a class="header-anchor" href="#_21、都有哪些办法可以降低redis的内存使用情况呢" aria-label="Permalink to &quot;21、都有哪些办法可以降低Redis的内存使用情况呢？&quot;">​</a></h3><h3 id="_22、redis主要消耗什么物理资源" tabindex="-1">22、Redis主要消耗什么物理资源？ <a class="header-anchor" href="#_22、redis主要消耗什么物理资源" aria-label="Permalink to &quot;22、Redis主要消耗什么物理资源？&quot;">​</a></h3><h3 id="_23、redis事物的了解cas-check-and-set-操作实现乐观锁" tabindex="-1">23、Redis事物的了解CAS(check-and-set 操作实现乐观锁 )? <a class="header-anchor" href="#_23、redis事物的了解cas-check-and-set-操作实现乐观锁" aria-label="Permalink to &quot;23、Redis事物的了解CAS(check-and-set 操作实现乐观锁 )?&quot;">​</a></h3><h3 id="_24、为什么redis需要把所有数据放到内存中" tabindex="-1">24、为什么Redis需要把所有数据放到内存中? <a class="header-anchor" href="#_24、为什么redis需要把所有数据放到内存中" aria-label="Permalink to &quot;24、为什么Redis需要把所有数据放到内存中?&quot;">​</a></h3><h3 id="_25、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" tabindex="-1">25、MySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据？ <a class="header-anchor" href="#_25、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" aria-label="Permalink to &quot;25、MySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据？&quot;">​</a></h3><h3 id="_26、scan系列命令注意事项" tabindex="-1">26、SCAN系列命令注意事项 <a class="header-anchor" href="#_26、scan系列命令注意事项" aria-label="Permalink to &quot;26、SCAN系列命令注意事项&quot;">​</a></h3><h3 id="_27、redis-集群的主从复制模型是怎样的" tabindex="-1">27、Redis 集群的主从复制模型是怎样的？ <a class="header-anchor" href="#_27、redis-集群的主从复制模型是怎样的" aria-label="Permalink to &quot;27、Redis 集群的主从复制模型是怎样的？&quot;">​</a></h3><h3 id="_28、读写分离模型" tabindex="-1">28、读写分离模型 <a class="header-anchor" href="#_28、读写分离模型" aria-label="Permalink to &quot;28、读写分离模型&quot;">​</a></h3><h3 id="_29、redis-开启aof" tabindex="-1">29、Redis 开启AOF <a class="header-anchor" href="#_29、redis-开启aof" aria-label="Permalink to &quot;29、Redis 开启AOF&quot;">​</a></h3>',53),o=[r];function t(E,h,n,c,l,B){return s(),a("div",null,o)}const m=e(d,[["render",t]]);export{u as __pageData,m as default};
