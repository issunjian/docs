import{_ as o,H as s,o as e,c as t,J as a,E as c,V as n,a as r}from"./chunks/framework.c6d8cbec.js";const q=JSON.parse('{"title":"那些坑","description":"","frontmatter":{"title":"那些坑","date":"2019-09-03T12:02:41.000Z","categories":"坑"},"headers":[],"relativePath":"problem/那些坑.md","filePath":"problem/那些坑.md"}'),y={name:"problem/那些坑.md"},F=n(`<p><img src="https://s2.ax1x.com/2019/09/02/nP3n39.png" alt=""></p><h2 id="axios" tabindex="-1">Axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;Axios&quot;">​</a></h2><blockquote><p>axios 中，默认把请求头和响应头设置为<code>application/json;charset=UTF-8</code></p></blockquote><p><strong>所以这个时候在 node 中使用 bodyParser 的 req.body 获取的时候会得不到请求的数据。</strong></p><h3 id="两种解决方式" tabindex="-1">两种解决方式： <a class="header-anchor" href="#两种解决方式" aria-label="Permalink to &quot;两种解决方式：&quot;">​</a></h3><h4 id="前端解决方法-使用-urlsearchparams-对象" tabindex="-1">前端解决方法: 使用 URLSearchParams 对象 <a class="header-anchor" href="#前端解决方法-使用-urlsearchparams-对象" aria-label="Permalink to &quot;前端解决方法: 使用 URLSearchParams 对象&quot;">​</a></h4><blockquote><p>注意：IE 浏览器不支持</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">getPage</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> param </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URLSearchParams</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//把post的数据添加到param对象中</span></span>
<span class="line"><span style="color:#F6F6F4;">    param.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pageIndex</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    param.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pageSize</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// param是一个对象，直接把它传给服务器</span></span>
<span class="line"><span style="color:#F6F6F4;">    axios.</span><span style="color:#62E884;">post</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">http://127.0.0.1:8888/getNewArticle</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,param)</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(res);</span></span>
<span class="line"><span style="color:#F6F6F4;">    })</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">catch</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(err);</span></span>
<span class="line"><span style="color:#F6F6F4;">    })</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getPage</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//把post的数据添加到param对象中</span></span>
<span class="line"><span style="color:#24292E;">    param.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pageIndex&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    param.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;pageSize&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// param是一个对象，直接把它传给服务器</span></span>
<span class="line"><span style="color:#24292E;">    axios.</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://127.0.0.1:8888/getNewArticle&#39;</span><span style="color:#24292E;">,param)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res);</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>URLSearchParams 对象会把请求头设置为相应的格式<code>application/x-www-form-urlencoded;charset=UTF-8</code></p><h4 id="后端解决方法-使用-bodyparse-json-方法" tabindex="-1">后端解决方法: 使用 bodyParse.json()方法 <a class="header-anchor" href="#后端解决方法-使用-bodyparse-json-方法" aria-label="Permalink to &quot;后端解决方法: 使用 bodyParse.json()方法&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 使用中间件</span></span>
<span class="line"><span style="color:#F6F6F4;">app.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  bodyParser.</span><span style="color:#62E884;">urlencoded</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">    extended</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">app.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(bodyParser.</span><span style="color:#62E884;">json</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用中间件</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  bodyParser.</span><span style="color:#6F42C1;">urlencoded</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    extended: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(bodyParser.</span><span style="color:#6F42C1;">json</span><span style="color:#24292E;">());</span></span></code></pre></div><p>既然请求头是 json 格式，那就按 json 格式解析咯</p><h3 id="yapi模拟数据-axios-的-post-请求传递参数" tabindex="-1"><a href="http://yapi.demo.qunar.com" target="_blank" rel="noreferrer">Yapi</a>模拟数据&gt;axios 的 post 请求传递参数 <a class="header-anchor" href="#yapi模拟数据-axios-的-post-请求传递参数" aria-label="Permalink to &quot;[Yapi](http://yapi.demo.qunar.com)模拟数据&gt;axios 的 post 请求传递参数&quot;">​</a></h3><blockquote><p><strong>这个情况说的是在<a href="http://yapi.demo.qunar.com" target="_blank" rel="noreferrer">Yapi</a>模拟数据的时候</strong></p><p>正常来说直接写对象就行</p></blockquote><p>使用<code>querystring</code>的<code>stringify</code>将对象转为字符串，或者直接手动传字符串<code>&quot;id=1&amp;name=gauhar&quot;</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> axios </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">axios</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> qs </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">querystring</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">123456</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">axios</span></span>
<span class="line"><span style="color:#F6F6F4;">  .</span><span style="color:#62E884;">post</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://yapi.demo.qunar.com/mock/65699/path</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, qs.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(data))</span></span>
<span class="line"><span style="color:#F6F6F4;">  .</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(res.data);</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">  .</span><span style="color:#62E884;">catch</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(err);</span></span>
<span class="line"><span style="color:#F6F6F4;">  });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> qs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;querystring&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">axios</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://yapi.demo.qunar.com/mock/65699/path&quot;</span><span style="color:#24292E;">, qs.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(data))</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res.data);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span></code></pre></div><h3 id="axios-的-delete-请求传参" tabindex="-1">axios 的 delete 请求传参 <a class="header-anchor" href="#axios-的-delete-请求传参" aria-label="Permalink to &quot;axios 的 delete 请求传参&quot;">​</a></h3><blockquote><p>如果是 body 传参，则需要使用可选的 config，设置 data 对象传参。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">axios.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(URL, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  data</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> },</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#7B7F8B;">// 注意并不是像put,post,patch那样直接用data属性</span></span>
<span class="line"><span style="color:#62E884;">axios</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  method</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">delete</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  data</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">}); </span><span style="color:#7B7F8B;">// 错误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">axios.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">URL</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  data: { foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 注意并不是像put,post,patch那样直接用data属性</span></span>
<span class="line"><span style="color:#6F42C1;">axios</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&quot;delete&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  data: {</span></span>
<span class="line"><span style="color:#24292E;">    foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// 错误</span></span></code></pre></div><h2 id="npm-清空缓存" tabindex="-1">npm 清空缓存 <a class="header-anchor" href="#npm-清空缓存" aria-label="Permalink to &quot;npm 清空缓存&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm cache clean --force</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm cache clean --force</span></span></code></pre></div><h2 id="webpack-使用-webpack-dev-server" tabindex="-1">webpack 使用 webpack-dev-server <a class="header-anchor" href="#webpack-使用-webpack-dev-server" aria-label="Permalink to &quot;webpack 使用 webpack-dev-server&quot;">​</a></h2><blockquote><p>这个必须得全局安装，否则执行命令会出错</p></blockquote><p>下载：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">npm i webpack-dev-server -g</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i webpack-dev-server -g</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 建议使用这个配置，新版本建议这样配置,默认会生成main.js</span></span>
<span class="line"><span style="color:#F6F6F4;">devServer: {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 设置对外公开路径，后期这个目录中的文件可以被外界访问</span></span>
<span class="line"><span style="color:#F6F6F4;">  publicPath: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/dist</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 建议使用这个配置，新版本建议这样配置,默认会生成main.js</span></span>
<span class="line"><span style="color:#6F42C1;">devServer</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 设置对外公开路径，后期这个目录中的文件可以被外界访问</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">publicPath</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;/dist&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">webpack-dev-server --open</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">webpack-dev-server --open</span></span></code></pre></div><h2 id="icomoon-字体图标" tabindex="-1">icomoon 字体图标 <a class="header-anchor" href="#icomoon-字体图标" aria-label="Permalink to &quot;icomoon 字体图标&quot;">​</a></h2><blockquote><p>两个重要文件：demo.css ； IcoMoon-Free.ttf</p></blockquote><p><strong>注意点：css 文件中引入 ttf 的路径</strong></p><p>html 中使用：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">link</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">rel</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">stylesheet</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">href</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./demo.css</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">必须加icon类名</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">icon icon-image</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;12&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">icon icon-paint-format</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;12&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!-- glyph的字体大小为32 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">glyph</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> icon icon-music</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;12&lt;/</span><span style="color:#F286C4;">p</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;stylesheet&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;./demo.css&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">必须加icon类名</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;icon icon-image&quot;</span><span style="color:#24292E;">&gt;12&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;icon icon-paint-format&quot;</span><span style="color:#24292E;">&gt;12&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- glyph的字体大小为32 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;glyph&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot; icon icon-music&quot;</span><span style="color:#24292E;">&gt;12&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="element-ui" tabindex="-1">Element-ui <a class="header-anchor" href="#element-ui" aria-label="Permalink to &quot;Element-ui&quot;">​</a></h2><p>在使用自定义验证函数的时候，注意调用 callback 函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">data</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 验证非空公共函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">notnull</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">rule</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (value.</span><span style="color:#62E884;">trim</span><span style="color:#F6F6F4;">().length </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">callback</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">不能为空哦</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">      } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#7B7F8B;">// !!!!!!!!!!!!!!!!!!</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//--------------------------------------</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 一定要调用callback回调函数，不然进来这个notnull函数之后程序不会继续往下执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">callback</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 手机号，姓名，验证码不能为空</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> validateUsername </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> notnull;  </span><span style="color:#7B7F8B;">// 调用上面的notnull函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        rules</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            username</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">                { required</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, message</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">请输入用户名或手机</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, trigger</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">blur</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> },</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 验证自定义验证函数</span></span>
<span class="line"><span style="color:#F6F6F4;">                { validator</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> validateUsername, trigger</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">blur</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">            ],</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">data</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 验证非空公共函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">notnull</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">rule</span><span style="color:#24292E;">, </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value.</span><span style="color:#6F42C1;">trim</span><span style="color:#24292E;">().</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;不能为空哦&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// !!!!!!!!!!!!!!!!!!</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//--------------------------------------</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 一定要调用callback回调函数，不然进来这个notnull函数之后程序不会继续往下执行</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 手机号，姓名，验证码不能为空</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> validateUsername </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> notnull;  </span><span style="color:#6A737D;">// 调用上面的notnull函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        rules: {</span></span>
<span class="line"><span style="color:#24292E;">            username: [</span></span>
<span class="line"><span style="color:#24292E;">                { required: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, message: </span><span style="color:#032F62;">&quot;请输入用户名或手机&quot;</span><span style="color:#24292E;">, trigger: </span><span style="color:#032F62;">&quot;blur&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 验证自定义验证函数</span></span>
<span class="line"><span style="color:#24292E;">                { validator: validateUsername, trigger: </span><span style="color:#032F62;">&quot;blur&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">            ],</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>两个字符串在进行比较大小的时候，会隐式转换为 Unicode 编码，再进行比较。此时默认调用字符串的 charCodeAt()方法转换</p><p><img src="https://s2.ax1x.com/2019/09/02/nPQb8A.png" alt="1563352137788"></p><p>截取数组的时候，可以通过设置数组的 length 长度，强行截取</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.length </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr); </span><span style="color:#7B7F8B;">// [1,2,3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span><span style="color:#6A737D;">// [1,2,3]</span></span></code></pre></div><p>在使用<code>vue</code>的<code>props</code>传值的时候注意，这个传值的过程是需要时间的，如果在内容渲染上面用到，在<code>props</code>传值这个过程中，他是<code>undefind</code></p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">这里的data.scores.environment就是父组件props过来的数据,解决方法就是三元表达式判断，如果是undefined就返回0</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">el-progress</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;font-style:italic;">type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">circle</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;font-style:italic;">:percentage</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data.scores.environment ? data.scores.environment *10 : 0</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">el-progress</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">这里的data.scores.environment就是父组件props过来的数据,解决方法就是三元表达式判断，如果是undefined就返回0</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">el-progress</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;circle&quot;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">:percentage</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;data.scores.environment ? data.scores.environment *10 : 0&quot;</span></span>
<span class="line"><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">el-progress</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="filter" tabindex="-1">filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter&quot;">​</a></h2><blockquote><p>filter 的 callback 函数需要返回布尔值 true 或 false. 如果为 true 则表示通过啦！如果为 false 则失败。</p></blockquote><h2 id="空字符串-是false-空对象-和空数组-是true" tabindex="-1">空字符串<code>&#39;&#39;</code>是<code>false</code> 空对象<code>{}</code>和空数组<code>[]</code>是<code>true</code> <a class="header-anchor" href="#空字符串-是false-空对象-和空数组-是true" aria-label="Permalink to &quot;空字符串\`&#39;&#39;\`是\`false\` 空对象\`{}\`和空数组\`[]\`是\`true\`&quot;">​</a></h2><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><h3 id="calc、vh、vw、vmin、vmax" tabindex="-1">calc、vh、vw、vmin、vmax <a class="header-anchor" href="#calc、vh、vw、vmin、vmax" aria-label="Permalink to &quot;calc、vh、vw、vmin、vmax&quot;">​</a></h3><blockquote><p>css 计算属性</p><p><code>vw </code>相对于视窗(可视化区域)的宽度：视窗宽度是<code>100vw</code></p><p><code>vh</code> 相对于视窗的高度：视窗高度是<code>100vh</code></p><p><code>vmin</code> 视窗(可视化区域)的<strong>宽度</strong>和视窗的<strong>高度</strong>，两个值之间<strong>最小</strong>的一个。如：width:500,height: 1000，则 100vmin = 500</p><p><code>vmax</code> 视窗(可视化区域)的<strong>宽度</strong>和视窗的<strong>高度</strong>，两个值之间<strong>最大</strong>的一个。</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">注意：运算符的两边要加空格</span></span>
<span class="line"><span style="color:#F286C4;">width:calc(50% - 10px</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">注意：运算符的两边要加空格</span></span>
<span class="line"><span style="color:#24292E;">width:calc(50% - 10px)</span></span></code></pre></div><h3 id="css-行内块元素之间的间距" tabindex="-1">css 行内块元素之间的间距 <a class="header-anchor" href="#css-行内块元素之间的间距" aria-label="Permalink to &quot;css 行内块元素之间的间距&quot;">​</a></h3><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.将所有的行内块元素直接设置浮动，个人认为最直接的方法，当然是在适当的场景中，因为过度的浮动会产生需要清除浮动的</span></span>
<span class="line"><span style="color:#F6F6F4;">必要</span></span>
<span class="line"><span style="color:#F6F6F4;">2.在产生边距的行内块的父元素设置属性：font-size：0px;</span></span>
<span class="line"><span style="color:#F6F6F4;">3.在父元素上设置，word-spacing(词边距)的值设为合适的负值即可</span></span>
<span class="line"><span style="color:#F6F6F4;">4.在html中将行内块元素在同一行显示，不要进行美观缩进或者换行</span></span>
<span class="line"><span style="color:#F6F6F4;">5.开启flex布局</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.将所有的行内块元素直接设置浮动，个人认为最直接的方法，当然是在适当的场景中，因为过度的浮动会产生需要清除浮动的</span></span>
<span class="line"><span style="color:#24292E;">必要</span></span>
<span class="line"><span style="color:#24292E;">2.在产生边距的行内块的父元素设置属性：font-size：0px;</span></span>
<span class="line"><span style="color:#24292E;">3.在父元素上设置，word-spacing(词边距)的值设为合适的负值即可</span></span>
<span class="line"><span style="color:#24292E;">4.在html中将行内块元素在同一行显示，不要进行美观缩进或者换行</span></span>
<span class="line"><span style="color:#24292E;">5.开启flex布局</span></span></code></pre></div><h3 id="less" tabindex="-1">less <a class="header-anchor" href="#less" aria-label="Permalink to &quot;less&quot;">​</a></h3><blockquote><p>原样输出代码，加上<code>~&#39;&#39;</code></p></blockquote><div class="language-less vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">~</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">calc(100vh-90rpx)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">~</span><span style="color:#032F62;">&quot;calc(100vh-90rpx)&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="css-清除浮动" tabindex="-1">css 清除浮动 <a class="header-anchor" href="#css-清除浮动" aria-label="Permalink to &quot;css 清除浮动&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;font-style:italic;">.clearfix</span><span style="color:#F286C4;font-style:italic;">::</span><span style="color:#62E884;font-style:italic;">after</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#62E884;font-style:italic;">.clearfix</span><span style="color:#F286C4;font-style:italic;">::</span><span style="color:#62E884;font-style:italic;">before</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">content</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">display</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">table</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;font-style:italic;">.clearfix</span><span style="color:#F286C4;font-style:italic;">::</span><span style="color:#62E884;font-style:italic;">after</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">clear</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">both</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">.clearfix::after</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">.clearfix::before</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">display</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">table</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">.clearfix::after</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">clear</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">both</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="css3-选择器连接符" tabindex="-1">css3 选择器连接符<code>~</code> <a class="header-anchor" href="#css3-选择器连接符" aria-label="Permalink to &quot;css3 选择器连接符\`~\`&quot;">​</a></h3><blockquote><p>相当于选择<strong>兄弟元素</strong></p></blockquote><p>这种波浪线~ 分割两个 Css 选择器，第二部分选择器仅匹配那些不是第一个选择器 且不是第一个选择器的后代的元素（不是第一个选择器 且 不是他的后代元素）</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">这里表示输入框验证正确的时候，他的兄弟元素button的伪类的内容为验证通过😄</span></span>
<span class="line"><span style="color:#F286C4;">  input</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">valid</span></span>
<span class="line"><span style="color:#F286C4;">  ~ button::ayanfter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">content</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">验证通过😄</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">这里表示输入框验证正确的时候，他的兄弟元素button的伪类的内容为验证通过😄</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">input</span><span style="color:#6F42C1;">:valid</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">~</span><span style="color:#24292E;"> </span><span style="color:#22863A;">button</span><span style="color:#24292E;">::ayanfter {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;验证通过😄&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="css-验证输入框" tabindex="-1">css 验证输入框 <a class="header-anchor" href="#css-验证输入框" aria-label="Permalink to &quot;css 验证输入框&quot;">​</a></h3><blockquote><p><code>pattern</code>接收一个正则</p><p><code>required</code>不能为空，如果为空，<code>input</code>是<code>invalid</code>的状态</p><p><code>valid</code>验证通过</p><p><code>invalid</code>验证不通过</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">html</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">en</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">charset</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">viewport</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">content</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">width=device-width, initial-scale=1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">http-equiv</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">X-UA-Compatible</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">content</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ie=edge</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;Document&lt;/</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">style</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;font-style:italic;">.box</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">400</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">400</span><span style="color:#F286C4;">px</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">margin</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">auto</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">input</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">valid</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">color</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">aquamarine</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">input</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">valid</span><span style="color:#F286C4;"> ~ button</span><span style="color:#F286C4;font-style:italic;">::</span><span style="color:#62E884;font-style:italic;">after</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">content</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">验证通过😄</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">input</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">invalid</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">color</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">red</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">input</span><span style="color:#F286C4;font-style:italic;">:</span><span style="color:#62E884;font-style:italic;">invalid</span><span style="color:#F286C4;"> ~ button</span><span style="color:#F286C4;font-style:italic;">::</span><span style="color:#62E884;font-style:italic;">after</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;">content</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">验证失败😞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">style</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">box</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">      &lt;</span><span style="color:#F286C4;">input</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">text</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">required</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">pattern</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\\d{0,5}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt; 输入0到5个数字才是正确的</span></span>
<span class="line"><span style="color:#F6F6F4;">      &lt;</span><span style="color:#F286C4;">button</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">button</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http-equiv</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;X-UA-Compatible&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ie=edge&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;Document&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">.box</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">width</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">400</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">height</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">400</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auto</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">input</span><span style="color:#6F42C1;">:valid</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">aquamarine</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">input</span><span style="color:#6F42C1;">:valid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;"> </span><span style="color:#22863A;">button</span><span style="color:#6F42C1;">::after</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;验证通过😄&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">input</span><span style="color:#6F42C1;">:invalid</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">red</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">input</span><span style="color:#6F42C1;">:invalid</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;"> </span><span style="color:#22863A;">button</span><span style="color:#6F42C1;">::after</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;验证失败😞&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;box&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">required</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pattern</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;\\d{0,5}&quot;</span><span style="color:#24292E;"> /&gt; 输入0到5个数字才是正确的</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="cookie、session、localstorage" tabindex="-1">cookie、session、localStorage <a class="header-anchor" href="#cookie、session、localstorage" aria-label="Permalink to &quot;cookie、session、localStorage&quot;">​</a></h2><blockquote><p>区别</p></blockquote><ol><li>cookie 数据始终在同源的 http 请求中携带（即使不需要）,数据不能超过 4k</li><li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。</li><li><strong>作用域不同</strong>，sessionStorage<strong>不在</strong>不同的<strong>浏览器窗口</strong>中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的。</li><li>session 存储在服务端</li></ol><h2 id="网页标题左侧-icon" tabindex="-1">网页标题左侧 icon <a class="header-anchor" href="#网页标题左侧-icon" aria-label="Permalink to &quot;网页标题左侧 icon&quot;">​</a></h2><blockquote><p><code>href</code>填写 icon 文件路径</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">link</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">rel</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">shortcut icon</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">href</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">图标地址</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">type</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">image/x-icon</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rel</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;shortcut icon&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;图标地址&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;image/x-icon&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p><strong>给行内元素的父元素设置为伸缩盒子，行内元素就可以设置宽高了</strong></p><h2 id="数组的-every-方法" tabindex="-1">数组的 every 方法 <a class="header-anchor" href="#数组的-every-方法" aria-label="Permalink to &quot;数组的 every 方法&quot;">​</a></h2><p>every 需要所有的循环项都为 true 时才返回 true，否则返回 false。相当于全选状态</p><h2 id="数组的-some-方法" tabindex="-1">数组的 some 方法 <a class="header-anchor" href="#数组的-some-方法" aria-label="Permalink to &quot;数组的 some 方法&quot;">​</a></h2><p>some 只要有一个为 true 那么就会返回 true。</p><h2 id="对象转换为数组" tabindex="-1">对象转换为数组 <a class="header-anchor" href="#对象转换为数组" aria-label="Permalink to &quot;对象转换为数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">(对象);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(对象);</span></span></code></pre></div><h2 id="focus-和-focusin-的区别" tabindex="-1">focus 和 focusin 的区别 <a class="header-anchor" href="#focus-和-focusin-的区别" aria-label="Permalink to &quot;focus 和 focusin 的区别&quot;">​</a></h2><blockquote><p>blur 和 focusout 同理</p></blockquote><p>当元素即将接收 <code>focus</code> 事件时，<code>focusin </code>事件被触发。 这个事件和 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/focus" target="_blank" rel="noreferrer">focus</a> 事件的主要区别在于后者不会冒泡。</p><h2 id="js-计算当前时间点所在的周一和周日的时间戳" tabindex="-1">js 计算当前时间点所在的周一和周日的时间戳 <a class="header-anchor" href="#js-计算当前时间点所在的周一和周日的时间戳" aria-label="Permalink to &quot;js 计算当前时间点所在的周一和周日的时间戳&quot;">​</a></h2><blockquote><p>精髓在于利用<code>相差的天数</code>*一天的时间戳计算</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> today </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> date.</span><span style="color:#62E884;">getTime</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 获取今天的时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> todayWeek </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> date.</span><span style="color:#62E884;">getDay</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//获取今天是星期几</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> oneDayTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">//一天的时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> mon </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> today </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> (todayWeek </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> oneDayTime; </span><span style="color:#7B7F8B;">// 今天的时间戳 - 相差天数的时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sun </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> today </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> todayWeek) </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> oneDayTime; </span><span style="color:#7B7F8B;">// 今天的时间戳 + 相差天数的时间戳</span></span>
<span class="line"><span style="color:#7B7F8B;">// 获取年月日再转时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">(mon);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDateDay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDate.</span><span style="color:#62E884;">getDate</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDateMonth </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDate.</span><span style="color:#62E884;">getMonth</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDateYear </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDate.</span><span style="color:#62E884;">getFullYear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDateYear </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> monDateMonth </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> monDateDay;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Date.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(start)); </span><span style="color:#7B7F8B;">//周一的时间戳</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">(sun);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDateDay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDate.</span><span style="color:#62E884;">getDate</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDateMonth </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDate.</span><span style="color:#62E884;">getMonth</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDateYear </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDate.</span><span style="color:#62E884;">getFullYear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> end </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDateYear </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> sunDateMonth </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> sunDateDay;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Date.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(end)); </span><span style="color:#7B7F8B;">//周日的时间戳</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取今天的时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> todayWeek </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.</span><span style="color:#6F42C1;">getDay</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//获取今天是星期几</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oneDayTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//一天的时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (todayWeek </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> oneDayTime; </span><span style="color:#6A737D;">// 今天的时间戳 - 相差天数的时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> todayWeek) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> oneDayTime; </span><span style="color:#6A737D;">// 今天的时间戳 + 相差天数的时间戳</span></span>
<span class="line"><span style="color:#6A737D;">// 获取年月日再转时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(mon);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDateDay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDate.</span><span style="color:#6F42C1;">getDate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDateMonth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDate.</span><span style="color:#6F42C1;">getMonth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDateYear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDate.</span><span style="color:#6F42C1;">getFullYear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDateYear </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> monDateMonth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> monDateDay;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Date.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(start)); </span><span style="color:#6A737D;">//周一的时间戳</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(sun);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDateDay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDate.</span><span style="color:#6F42C1;">getDate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDateMonth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDate.</span><span style="color:#6F42C1;">getMonth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDateYear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDate.</span><span style="color:#6F42C1;">getFullYear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDateYear </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sunDateMonth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sunDateDay;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Date.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(end)); </span><span style="color:#6A737D;">//周日的时间戳</span></span></code></pre></div><h2 id="最简单的深拷贝" tabindex="-1">最简单的深拷贝 <a class="header-anchor" href="#最简单的深拷贝" aria-label="Permalink to &quot;最简单的深拷贝&quot;">​</a></h2><blockquote><p>不能拷贝函数</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(变量));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(变量));</span></span></code></pre></div><h2 id="json-stringify-不能把函数转换" tabindex="-1">Json.stringify()不能把<strong>函数</strong>转换 ！！ <a class="header-anchor" href="#json-stringify-不能把函数转换" aria-label="Permalink to &quot;Json.stringify()不能把**函数**转换 ！！&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fun</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(fun)); </span><span style="color:#7B7F8B;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">111</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(fun)); </span><span style="color:#6A737D;">//undefined</span></span></code></pre></div><h2 id="node-的辅助工具" tabindex="-1">node 的辅助工具 <a class="header-anchor" href="#node-的辅助工具" aria-label="Permalink to &quot;node 的辅助工具&quot;">​</a></h2><ol><li>nvm 可以切换 node 版本</li><li>nrm 切换镜像源</li></ol><p><code>nrm ls</code></p><p><img src="https://s2.ax1x.com/2019/09/02/nPlP8s.png" alt="1565532790996"></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">nrm</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">use</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">yarn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nrm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">use</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yarn</span></span></code></pre></div><h2 id="右键-git-bash-here-命令行" tabindex="-1">右键 git Bash here 命令行 <a class="header-anchor" href="#右键-git-bash-here-命令行" aria-label="Permalink to &quot;右键 git Bash here 命令行&quot;">​</a></h2><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">复制快捷键：ctrl + insert</span></span>
<span class="line"><span style="color:#F6F6F4;">粘贴快捷键：shift + insert</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">复制快捷键：ctrl + insert</span></span>
<span class="line"><span style="color:#24292E;">粘贴快捷键：shift + insert</span></span></code></pre></div><h2 id="js-执行顺序" tabindex="-1">js 执行顺序 <a class="header-anchor" href="#js-执行顺序" aria-label="Permalink to &quot;js 执行顺序&quot;">​</a></h2><blockquote><p><code>macrotask</code>宏任务队列</p><p><code>microtask</code>微任务队列</p></blockquote><ul><li>macrotask：主代码块、setTimeout、setInterval 等（可以看到，事件队列中的每一个事件都是一个 macrotask，现在称之为宏任务队列）</li><li>microtask：Promise、process.nextTick 等</li><li>在某一个<strong>宏任务队列执行完后</strong>，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有<code>微任务</code>都执行完毕（在渲染前）。</li></ul><p>promise 的 resolve 和 reject 是才是异步的回调。</p><p>创建了一个 promise 实例对象的时候，钻进去回调函数中，执行输出<code>2</code>，for 循环，调用 resolve 函数(异步，微任务)，执行输出<code>3</code>，代码往下面走，执行输出<code>5</code>，在渲染宏任务之前，完成微任务输出<code>4</code>，最后输出<code>1</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    i </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">9999</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2 3 5 4 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9999</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 2 3 5 4 1</span></span></code></pre></div><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><h3 id="cors" tabindex="-1">cors <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;cors&quot;">​</a></h3><p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。该属性表示哪些域名可以访问资源，如果设置通配符<code>*</code>则表示所有网站都可以访问资源。</p><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">请求头设置Content-Type 的值仅限于下列三者之一：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">text/plain</span></span>
<span class="line"><span style="color:#F6F6F4;">multipart/form-data</span></span>
<span class="line"><span style="color:#F6F6F4;">application/x-www-form-urlencoded</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">请求头设置Content-Type 的值仅限于下列三者之一：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">text/plain</span></span>
<span class="line"><span style="color:#24292E;">multipart/form-data</span></span>
<span class="line"><span style="color:#24292E;">application/x-www-form-urlencoded</span></span></code></pre></div><h3 id="jsonp" tabindex="-1">jsonp <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;jsonp&quot;">​</a></h3><blockquote><p>浏览器通过 src 请求接口，url 携带函数名，服务器通过传递的函数名，返回一个<code>json</code>格式的字符串数据给浏览器</p></blockquote><ol><li>声明一个回调函数，其函数名(如 show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的 data)。</li><li>创建一个<code>&lt;script&gt;</code>标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。</li><li>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是 show，它准备好的数据是<code>show(&#39;我不爱你&#39;)</code>。</li><li>最后服务器把准备的数据通过 HTTP 协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。</li></ol><h3 id="代理服务器。。" tabindex="-1">代理服务器。。 <a class="header-anchor" href="#代理服务器。。" aria-label="Permalink to &quot;代理服务器。。&quot;">​</a></h3><h2 id="js-定义变量时使用-var-关键字与不使用的区别" tabindex="-1">js 定义变量时使用 var 关键字与不使用的区别 <a class="header-anchor" href="#js-定义变量时使用-var-关键字与不使用的区别" aria-label="Permalink to &quot;js 定义变量时使用 var 关键字与不使用的区别&quot;">​</a></h2><p>在全局作用域下，两者都是定义为全局变量。for 循环的使用 var 定义的变量也是全局的，在局部作用域下(function,class...)，</p><p>如果不使用关键字定义，则变量时全局变量。使用关键字定义，就是局部变量。</p><blockquote><p>特别注意的是：函数身上有一个 name 属性，是函数名</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 由于这个函数里面没有用关键字定义变量，所以当Foo函数被调用的时候，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 这个函数是变量</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.say </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">  name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 谁调用Foo函数，this就指向谁</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 函数也是对象，这里是给Foo函数对象定义了getName属性</span></span>
<span class="line"><span style="color:#F6F6F4;">Foo.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">bar</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">bar.rrr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 函数也是对象，这里是给bar函数定义了getName属性</span></span>
<span class="line"><span style="color:#7B7F8B;">// 这里是给Foo函数对象的原型身上绑定了一个getName属性，它是一个函数</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Foo</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">            下面这两个函数都是全局作用域下的，都会变量提升</span></span>
<span class="line"><span style="color:#7B7F8B;">            区别在于，function关键字定义的，提升的优先级较高，而var在后</span></span>
<span class="line"><span style="color:#7B7F8B;">            所以var定义的函数会覆盖function定义的函数</span></span>
<span class="line"><span style="color:#7B7F8B;">        */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">dir</span><span style="color:#F6F6F4;">(Foo); </span><span style="color:#7B7F8B;">//可以查看Foo函数对象，特别注意的是：函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(window.a); </span><span style="color:#7B7F8B;">//undefined 因为这个时候Foo函数还没有被调用</span></span>
<span class="line"><span style="color:#F6F6F4;">Foo.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 调用了Foo函数对象的getName方法</span></span>
<span class="line"><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 全局作用域下的函数，var最后覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 首先这里调用Foo函数之前，代码已经跑完，</span></span>
<span class="line"><span style="color:#7B7F8B;">// 所以Foo()执行之后，里面的getName方法覆盖了全局的var定义的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> Foo.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">//调用了Foo函数对象的getName方法，执行了方法，然后实例化了对象。所以这里是Foo.getName对象</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// new关键字创建了一个实例对象，然后调用了原型身上的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">//new关键字创建了一个实例对象，然后调用了console.log(tt.say);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 然后在通过new关键字，实例化了Foo原型身上的getName方法</span></span>
<span class="line"><span style="color:#7B7F8B;">// 所以这里是Foo.getName对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 和上面的getName()一样; 1 // 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Foo.name); </span><span style="color:#7B7F8B;">// Foo 函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">dir</span><span style="color:#F6F6F4;">(bar); </span><span style="color:#7B7F8B;">// 查看bar函数对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(window.name); </span><span style="color:#7B7F8B;">// 上面的代码调用了Foo函数，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(window.a);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 由于这个函数里面没有用关键字定义变量，所以当Foo函数被调用的时候，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个函数是变量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.say </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dd&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 谁调用Foo函数，this就指向谁</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 函数也是对象，这里是给Foo函数对象定义了getName属性</span></span>
<span class="line"><span style="color:#24292E;">Foo.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">bar.rrr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 函数也是对象，这里是给bar函数定义了getName属性</span></span>
<span class="line"><span style="color:#6A737D;">// 这里是给Foo函数对象的原型身上绑定了一个getName属性，它是一个函数</span></span>
<span class="line"><span style="color:#005CC5;">Foo</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">            下面这两个函数都是全局作用域下的，都会变量提升</span></span>
<span class="line"><span style="color:#6A737D;">            区别在于，function关键字定义的，提升的优先级较高，而var在后</span></span>
<span class="line"><span style="color:#6A737D;">            所以var定义的函数会覆盖function定义的函数</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">dir</span><span style="color:#24292E;">(Foo); </span><span style="color:#6A737D;">//可以查看Foo函数对象，特别注意的是：函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.a); </span><span style="color:#6A737D;">//undefined 因为这个时候Foo函数还没有被调用</span></span>
<span class="line"><span style="color:#24292E;">Foo.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 调用了Foo函数对象的getName方法</span></span>
<span class="line"><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 全局作用域下的函数，var最后覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 首先这里调用Foo函数之前，代码已经跑完，</span></span>
<span class="line"><span style="color:#6A737D;">// 所以Foo()执行之后，里面的getName方法覆盖了全局的var定义的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Foo.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//调用了Foo函数对象的getName方法，执行了方法，然后实例化了对象。所以这里是Foo.getName对象</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// new关键字创建了一个实例对象，然后调用了原型身上的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//new关键字创建了一个实例对象，然后调用了console.log(tt.say);</span></span>
<span class="line"><span style="color:#6A737D;">// 然后在通过new关键字，实例化了Foo原型身上的getName方法</span></span>
<span class="line"><span style="color:#6A737D;">// 所以这里是Foo.getName对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 和上面的getName()一样; 1 // 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Foo.name); </span><span style="color:#6A737D;">// Foo 函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">dir</span><span style="color:#24292E;">(bar); </span><span style="color:#6A737D;">// 查看bar函数对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.name); </span><span style="color:#6A737D;">// 上面的代码调用了Foo函数，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.a);</span></span></code></pre></div><h2 id="audio-标签" tabindex="-1">audio 标签 <a class="header-anchor" href="#audio-标签" aria-label="Permalink to &quot;audio 标签&quot;">​</a></h2><blockquote><p>load 方法，重新加载 audio 标签</p></blockquote><p>因为用户体验的问题，部分环境(浏览器，苹果)必须要用户操作过，才能播放音频。js 动态赋值 src 属性，调用 play 方法也是不行的。</p><p>所以最好的解决方法是，首先在 html 中就写好 src 地址，然后用户点击某个地方时，调用 play 方法</p><h2 id="js-dom-变量" tabindex="-1">js dom 变量 <a class="header-anchor" href="#js-dom-变量" aria-label="Permalink to &quot;js dom 变量&quot;">​</a></h2><blockquote><p>在标签名，id 名相同时，在 js 中直接通过相同的变量名获取 dom 节点，而无需声明</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">canvas</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">canvas</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">canvas</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">canvas</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;canvas&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">canvas</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(canvas); </span><span style="color:#7B7F8B;">// ID为canvas的canvas dom 节点</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(canvas); </span><span style="color:#6A737D;">// ID为canvas的canvas dom 节点</span></span></code></pre></div><h2 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h2><p><code>v-if</code>不要和<code>v-for</code>一起使用，<code>v-for</code>的优先级较高，应该分层写</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">v-if=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">flag</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;div v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    {{item}}</span></span>
<span class="line"><span style="color:#F6F6F4;">  &lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">v-if</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">flag</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;div v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">    {{item}}</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="版本号错误" tabindex="-1">版本号错误 <a class="header-anchor" href="#版本号错误" aria-label="Permalink to &quot;版本号错误&quot;">​</a></h3><p>我在使用全局@vue/cli 脚手架创建项目的时候，出现了以下错误，一开始也是很懵，但静下心来看报错还是看出了问题。</p>`,126),i=n(`<p>解决方法：全局安装最新版的<code>vue</code>： <code>yarn global add vue</code>更新到<code>2.6.11</code>版本</p><p><img src="https://s2.ax1x.com/2019/12/28/le3Cx1.png" alt="image-20191228112657389"></p><h3 id="重写打印" tabindex="-1">重写打印 <a class="header-anchor" href="#重写打印" aria-label="Permalink to &quot;重写打印&quot;">​</a></h3><blockquote><p>vue 的打印输出很不友好，默认不展开，为... 我们要一个一个点开</p></blockquote><p>在<code>main.js</code>加入以下代码，使用时：<code>this.$print(&#39;打印的东西&#39;)</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 重写打印方法</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Vue</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">$print</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> type </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">log</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> log </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(obj));</span></span>
<span class="line"><span style="color:#F6F6F4;">  console[type](log);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 重写打印方法</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$print</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> type </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;log&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">log</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(obj));</span></span>
<span class="line"><span style="color:#24292E;">  console[type](log);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,6);function E(d,u,C,h,g,m){const l=s("Banner"),p=s("font");return e(),t("div",null,[a(l),F,a(p,{color:"red"},{default:c(()=>[r("**版本号不一致**")]),_:1}),i])}const v=o(y,[["render",E]]);export{q as __pageData,v as default};
