import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-0dff19b2-e1ef-4e04-8c52-ba711186d65c.7b4b0aa5.jpg",o="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-32a186fc-8926-47ba-83cc-bce135c0f9f1.c0aafe01.jpg",e="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-c50ff1f0-da13-4d73-b898-40c75e5e9386.5cf218d4.jpg",t="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-5372b75c-6a67-4ac4-80ab-a4e480cdd956.ac0f6e6b.jpg",c="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-8537e15b-e13a-4d71-b5fe-4d8ac4b07da9.69cd02ee.jpg",r="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-3327d3b2-b052-4bb3-bbb6-bf69609de339.c7ed540f.jpg",y="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-86c33d9f-8f65-4871-bfb3-cec828bd3f20.221cac18.jpg",F="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-cb7842a4-a884-455a-baf5-489367d15067.b6259ddd.jpg",i="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-e1e6e6e3-fdd6-4471-9f8a-c366225ad91d.86c3d560.jpg",E="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-278f5642-f166-4686-90a6-4711c8b75605.33d02635.jpg",d="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-bce8b24b-fab1-4ed4-8350-698673578051.8d9a7be5.jpg",u="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-93e2b3ef-90cd-4768-b7b7-c7977c365b34.26206f77.jpg",h="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-ae9babfa-708d-4f1f-a13b-ff5ceeb6aa4f.16807280.jpg",C="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-419f9b8e-684e-4410-b11d-a955db5ae046.f75f94b5.jpg",g="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-e589d377-fbf9-47a0-9db5-f4cc0e5a4bf9.9a11061e.jpg",f="/docs/assets/segmentfault-chaoxxnettyrmkzpjglsegmentfaultsf-cedfb2fd-2e25-4fb5-b13c-13d85aa14f0b.ae8de18d.jpg",S=JSON.parse('{"title":"超详细Netty入门，看这篇就够了！","description":"本文主要讲述Netty框架的一些特性以及重要组件，希望看完之后能对Netty框架有一个比较直观的感受，希望能帮助读者快速入门Netty，减少一些弯路。","frontmatter":{"title":"超详细Netty入门，看这篇就够了！","shortTitle":"超详细Netty入门","description":"本文主要讲述Netty框架的一些特性以及重要组件，希望看完之后能对Netty框架有一个比较直观的感受，希望能帮助读者快速入门Netty，减少一些弯路。","tag":["netty"],"category":["思否"],"head":[["meta",{"name":"description","content":"本文主要讲述Netty框架的一些特性以及重要组件，希望看完之后能对Netty框架有一个比较直观的感受，希望能帮助读者快速入门Netty，减少一些弯路。"}],["meta",{"name":"keywords","content":"java,netty,网络编程,nio"}]]},"headers":[],"relativePath":"backend/tobetter/netty/rumen.md","filePath":"backend/tobetter/netty/rumen.md"}'),b={name:"backend/tobetter/netty/rumen.md"},v=l('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>本文主要讲述Netty框架的一些特性以及重要组件，希望看完之后能对Netty框架有一个比较直观的感受，希望能帮助读者快速入门Netty，减少一些弯路。</p><h2 id="一、netty概述" tabindex="-1">一、Netty概述 <a class="header-anchor" href="#一、netty概述" aria-label="Permalink to &quot;一、Netty概述&quot;">​</a></h2><p>官方的介绍：</p><blockquote><p>Netty is <em>an asynchronous event-driven network application framework</em></p><p>for rapid development of maintainable high performance protocol servers &amp; clients.</p></blockquote><p><strong>Netty</strong>是 一个<strong>异步事件驱动</strong>的网络应用程序框架，用于<strong>快速开发可维护的高性能协议服务器和客户端</strong>。</p><h2 id="二、为什么使用netty" tabindex="-1">二、为什么使用Netty <a class="header-anchor" href="#二、为什么使用netty" aria-label="Permalink to &quot;二、为什么使用Netty&quot;">​</a></h2><p>从官网上介绍，Netty是一个网络应用程序框架，开发服务器和客户端。也就是用于网络编程的一个框架。既然是网络编程，Socket就不谈了，为什么不用NIO呢？</p><h3 id="_2-1-nio的缺点" tabindex="-1">2.1 NIO的缺点 <a class="header-anchor" href="#_2-1-nio的缺点" aria-label="Permalink to &quot;2.1 NIO的缺点&quot;">​</a></h3><p>对于这个问题，之前我写了一篇文章<a href="https://link.segmentfault.com/?enc=agRLfiABIMgKG7X%2FpGCBLQ%3D%3D.PYxUPbZYqgCJCKbOX%2BK5pLLqNsErqqtDaRFXa4DOAQAUE5J28smXY4FKrw2sBEDTfcu1SgXd%2B%2BYzIO7803fSpA%3D%3D" target="_blank" rel="noreferrer">《NIO入门》</a>对NIO有比较详细的介绍，NIO的主要问题是：</p><ul><li>NIO的类库和API繁杂，学习成本高，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。</li><li>需要熟悉Java多线程编程。这是因为NIO编程涉及到Reactor模式，你必须对多线程和网络编程非常熟悉，才能写出高质量的NIO程序。</li><li>臭名昭著的epoll bug。它会导致Selector空轮询，最终导致CPU 100%。直到JDK1.7版本依然没得到根本性的解决。</li></ul><h3 id="_2-2-netty的优点" tabindex="-1">2.2 Netty的优点 <a class="header-anchor" href="#_2-2-netty的优点" aria-label="Permalink to &quot;2.2 Netty的优点&quot;">​</a></h3><p>相对地，Netty的优点有很多：</p><ul><li>API使用简单，学习成本低。</li><li>功能强大，内置了多种解码编码器，支持多种协议。</li><li>性能高，对比其他主流的NIO框架，Netty的性能最优。</li><li>社区活跃，发现BUG会及时修复，迭代版本周期短，不断加入新的功能。</li><li>Dubbo、Elasticsearch都采用了Netty，质量得到验证。</li></ul><h2 id="三、架构图" tabindex="-1">三、架构图 <a class="header-anchor" href="#三、架构图" aria-label="Permalink to &quot;三、架构图&quot;">​</a></h2><img src="'+p+'"><p>上面这张图就是在官网首页的架构图，我们从上到下分析一下。</p><blockquote><p>绿色的部分<strong>Core</strong>核心模块，包括零拷贝、API库、可扩展的事件模型。</p><p>橙色部分<strong>Protocol Support</strong>协议支持，包括Http协议、webSocket、SSL(安全套接字协议)、谷歌Protobuf协议、zlib/gzip压缩与解压缩、Large File Transfer大文件传输等等。</p><p>红色的部分<strong>Transport Services</strong>传输服务，包括Socket、Datagram、Http Tunnel等等。</p></blockquote><p>以上可看出Netty的功能、协议、传输方式都比较全，比较强大。</p><h2 id="四、永远的hello-word" tabindex="-1">四、永远的Hello Word <a class="header-anchor" href="#四、永远的hello-word" aria-label="Permalink to &quot;四、永远的Hello Word&quot;">​</a></h2><p>首先搭建一个HelloWord工程，先熟悉一下API，还有为后面的学习做铺垫。以下面这张图为依据：</p><img src="'+o+`"><h3 id="_4-1-引入maven依赖" tabindex="-1">4.1 引入Maven依赖 <a class="header-anchor" href="#_4-1-引入maven依赖" aria-label="Permalink to &quot;4.1 引入Maven依赖&quot;">​</a></h3><p>使用的版本是4.1.20，相对比较稳定的一个版本。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;io.netty&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;netty-all&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;4.1.20.Final&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.netty&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;netty-all&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.1.20.Final&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_4-2-创建服务端启动类" tabindex="-1">4.2 创建服务端启动类 <a class="header-anchor" href="#_4-2-创建服务端启动类" aria-label="Permalink to &quot;4.2 创建服务端启动类&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyServer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//创建两个线程组 boosGroup、workerGroup</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> bossGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> workerGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//创建服务端的启动对象，设置参数</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ServerBootstrap</span><span style="color:#F6F6F4;"> bootstrap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerBootstrap</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//设置两个线程组boosGroup和workerGroup</span></span>
<span class="line"><span style="color:#F6F6F4;">            bootstrap.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">(bossGroup, workerGroup)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//设置服务端通道实现类型    </span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//设置线程队列得到连接个数    </span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">option</span><span style="color:#F6F6F4;">(ChannelOption.SO_BACKLOG, </span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//设置保持活动连接状态    </span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">childOption</span><span style="color:#F6F6F4;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//使用匿名内部类的形式初始化通道对象    </span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">childHandler</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInitializer</span><span style="color:#F6F6F4;">&lt;SocketChannel&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">protected</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> initChannel(</span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">socketChannel</span><span style="color:#62E884;">) </span><span style="color:#F286C4;">throws</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                            </span><span style="color:#7B7F8B;">//给pipeline管道设置处理器</span></span>
<span class="line"><span style="color:#62E884;">                            </span><span style="color:#F6F6F4;">socketChannel</span><span style="color:#62E884;">.pipeline().addLast(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> MyServerHandler</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                    });</span><span style="color:#7B7F8B;">//给workerGroup的EventLoop对应的管道设置处理器</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">java技术爱好者的服务端已经准备就绪...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//绑定端口号，启动服务端</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ChannelFuture</span><span style="color:#F6F6F4;"> channelFuture </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bootstrap.</span><span style="color:#62E884;">bind</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">6666</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//对关闭通道进行监听</span></span>
<span class="line"><span style="color:#F6F6F4;">            channelFuture.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">closeFuture</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            bossGroup.</span><span style="color:#62E884;">shutdownGracefully</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            workerGroup.</span><span style="color:#62E884;">shutdownGracefully</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建两个线程组 boosGroup、workerGroup</span></span>
<span class="line"><span style="color:#24292E;">        EventLoopGroup bossGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        EventLoopGroup workerGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//创建服务端的启动对象，设置参数</span></span>
<span class="line"><span style="color:#24292E;">            ServerBootstrap bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//设置两个线程组boosGroup和workerGroup</span></span>
<span class="line"><span style="color:#24292E;">            bootstrap.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(bossGroup, workerGroup)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置服务端通道实现类型    </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置线程队列得到连接个数    </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">option</span><span style="color:#24292E;">(ChannelOption.SO_BACKLOG, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置保持活动连接状态    </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">childOption</span><span style="color:#24292E;">(ChannelOption.SO_KEEPALIVE, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//使用匿名内部类的形式初始化通道对象    </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">socketChannel</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6A737D;">//给pipeline管道设置处理器</span></span>
<span class="line"><span style="color:#24292E;">                            socketChannel.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyServerHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    });</span><span style="color:#6A737D;">//给workerGroup的EventLoop对应的管道设置处理器</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;java技术爱好者的服务端已经准备就绪...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//绑定端口号，启动服务端</span></span>
<span class="line"><span style="color:#24292E;">            ChannelFuture channelFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bootstrap.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6666</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//对关闭通道进行监听</span></span>
<span class="line"><span style="color:#24292E;">            channelFuture.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            bossGroup.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            workerGroup.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4-3-创建服务端处理器" tabindex="-1">4.3 创建服务端处理器 <a class="header-anchor" href="#_4-3-创建服务端处理器" aria-label="Permalink to &quot;4.3 创建服务端处理器&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 自定义的Handler需要继承Netty规定好的HandlerAdapter</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 才能被Netty框架所关联，有点类似SpringMVC的适配器模式</span></span>
<span class="line"><span style="color:#7B7F8B;"> **/</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyServerHandler</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInboundHandlerAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">channelRead</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">msg</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ByteBuf</span><span style="color:#F6F6F4;"> byteBuf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (ByteBuf) msg;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">收到客户端</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">remoteAddress</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">发送的消息：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> byteBuf.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">channelReadComplete</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//发送消息给客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">        ctx.</span><span style="color:#62E884;">writeAndFlush</span><span style="color:#F6F6F4;">(Unpooled.</span><span style="color:#62E884;">copiedBuffer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">服务端已收到消息，并给你发送一个问号?</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">exceptionCaught</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">cause</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//发生异常，关闭通道</span></span>
<span class="line"><span style="color:#F6F6F4;">        ctx.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义的Handler需要继承Netty规定好的HandlerAdapter</span></span>
<span class="line"><span style="color:#6A737D;"> * 才能被Netty框架所关联，有点类似SpringMVC的适配器模式</span></span>
<span class="line"><span style="color:#6A737D;"> **/</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyServerHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelInboundHandlerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#24292E;">        ByteBuf byteBuf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ByteBuf) msg;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;收到客户端&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">remoteAddress</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;发送的消息：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> byteBuf.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelReadComplete</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//发送消息给客户端</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(Unpooled.</span><span style="color:#6F42C1;">copiedBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;服务端已收到消息，并给你发送一个问号?&quot;</span><span style="color:#24292E;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionCaught</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">cause</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//发生异常，关闭通道</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4-4-创建客户端启动类" tabindex="-1">4.4 创建客户端启动类 <a class="header-anchor" href="#_4-4-创建客户端启动类" aria-label="Permalink to &quot;4.4 创建客户端启动类&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyClient</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">NioEventLoopGroup</span><span style="color:#F6F6F4;"> eventExecutors </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//创建bootstrap对象，配置参数</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Bootstrap</span><span style="color:#F6F6F4;"> bootstrap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Bootstrap</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//设置线程组</span></span>
<span class="line"><span style="color:#F6F6F4;">            bootstrap.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">(eventExecutors)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//设置客户端的通道实现类型    </span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">(NioSocketChannel.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//使用匿名内部类初始化通道</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">handler</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInitializer</span><span style="color:#F6F6F4;">&lt;SocketChannel&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">protected</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> initChannel(</span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">ch</span><span style="color:#62E884;">) </span><span style="color:#F286C4;">throws</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                            </span><span style="color:#7B7F8B;">//添加客户端通道的处理器</span></span>
<span class="line"><span style="color:#62E884;">                            </span><span style="color:#F6F6F4;">ch</span><span style="color:#62E884;">.pipeline().addLast(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> MyClientHandler</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                    });</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">客户端准备就绪，随时可以起飞~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//连接服务端</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ChannelFuture</span><span style="color:#F6F6F4;"> channelFuture </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bootstrap.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6666</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//对通道关闭进行监听</span></span>
<span class="line"><span style="color:#F6F6F4;">            channelFuture.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">closeFuture</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//关闭线程组</span></span>
<span class="line"><span style="color:#F6F6F4;">            eventExecutors.</span><span style="color:#62E884;">shutdownGracefully</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        NioEventLoopGroup eventExecutors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//创建bootstrap对象，配置参数</span></span>
<span class="line"><span style="color:#24292E;">            Bootstrap bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Bootstrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//设置线程组</span></span>
<span class="line"><span style="color:#24292E;">            bootstrap.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(eventExecutors)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//设置客户端的通道实现类型    </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(NioSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//使用匿名内部类初始化通道</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">handler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">                        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#6A737D;">//添加客户端通道的处理器</span></span>
<span class="line"><span style="color:#24292E;">                            ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClientHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    });</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;客户端准备就绪，随时可以起飞~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//连接服务端</span></span>
<span class="line"><span style="color:#24292E;">            ChannelFuture channelFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bootstrap.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6666</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//对通道关闭进行监听</span></span>
<span class="line"><span style="color:#24292E;">            channelFuture.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//关闭线程组</span></span>
<span class="line"><span style="color:#24292E;">            eventExecutors.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4-5-创建客户端处理器" tabindex="-1">4.5 创建客户端处理器 <a class="header-anchor" href="#_4-5-创建客户端处理器" aria-label="Permalink to &quot;4.5 创建客户端处理器&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyClientHandler</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInboundHandlerAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">channelActive</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//发送消息到服务端</span></span>
<span class="line"><span style="color:#F6F6F4;">        ctx.</span><span style="color:#62E884;">writeAndFlush</span><span style="color:#F6F6F4;">(Unpooled.</span><span style="color:#62E884;">copiedBuffer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">歪比巴卜~茉莉~Are you good~马来西亚~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">channelRead</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">msg</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//接收服务端发送过来的消息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ByteBuf</span><span style="color:#F6F6F4;"> byteBuf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (ByteBuf) msg;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">收到服务端</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">remoteAddress</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的消息：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> byteBuf.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClientHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelInboundHandlerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelActive</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//发送消息到服务端</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(Unpooled.</span><span style="color:#6F42C1;">copiedBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;歪比巴卜~茉莉~Are you good~马来西亚~&quot;</span><span style="color:#24292E;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//接收服务端发送过来的消息</span></span>
<span class="line"><span style="color:#24292E;">        ByteBuf byteBuf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ByteBuf) msg;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;收到服务端&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">remoteAddress</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的消息：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> byteBuf.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4-6-测试" tabindex="-1">4.6 测试 <a class="header-anchor" href="#_4-6-测试" aria-label="Permalink to &quot;4.6 测试&quot;">​</a></h3><p>先启动服务端，再启动客户端，就可以看到结果：</p><p>MyServer打印结果:</p><img src="`+e+'"><p>MyClient打印结果：</p><img src="'+t+`"><h2 id="五、netty的特性与重要组件" tabindex="-1">五、Netty的特性与重要组件 <a class="header-anchor" href="#五、netty的特性与重要组件" aria-label="Permalink to &quot;五、Netty的特性与重要组件&quot;">​</a></h2><h3 id="_5-1-taskqueue任务队列" tabindex="-1">5.1 taskQueue任务队列 <a class="header-anchor" href="#_5-1-taskqueue任务队列" aria-label="Permalink to &quot;5.1 taskQueue任务队列&quot;">​</a></h3><p>如果Handler处理器有一些长时间的业务处理，可以交给<strong>taskQueue异步处理</strong>。怎么用呢，请看代码演示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyServerHandler</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInboundHandlerAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">channelRead</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">msg</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//获取到线程池eventLoop，添加线程，执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        ctx.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">eventLoop</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> run() {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">try</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#7B7F8B;">//长时间操作，不至于长时间的业务操作导致Handler阻塞</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">Thread</span><span style="color:#62E884;">.sleep(</span><span style="color:#BF9EEE;">1000</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">长时间的业务处理</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">e</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyServerHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelInboundHandlerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//获取到线程池eventLoop，添加线程，执行</span></span>
<span class="line"><span style="color:#24292E;">        ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">eventLoop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//长时间操作，不至于长时间的业务操作导致Handler阻塞</span></span>
<span class="line"><span style="color:#24292E;">                    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;长时间的业务处理&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们打一个debug调试，是可以看到添加进去的taskQueue有一个任务。</p><img src="`+c+`"><h3 id="_5-2-scheduletaskqueue延时任务队列" tabindex="-1">5.2 scheduleTaskQueue延时任务队列 <a class="header-anchor" href="#_5-2-scheduletaskqueue延时任务队列" aria-label="Permalink to &quot;5.2 scheduleTaskQueue延时任务队列&quot;">​</a></h3><p>延时任务队列和上面介绍的任务队列非常相似，只是多了一个可延迟一定时间再执行的设置，请看代码演示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ctx.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">eventLoop</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">schedule</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> run() {</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#F286C4;">try</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#7B7F8B;">//长时间操作，不至于长时间的业务操作导致Handler阻塞</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">Thread</span><span style="color:#62E884;">.sleep(</span><span style="color:#BF9EEE;">1000</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">长时间的业务处理</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">e</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">        }</span></span>
<span class="line"><span style="color:#62E884;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">},</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, TimeUnit.SECONDS);</span><span style="color:#7B7F8B;">//5秒后执行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">eventLoop</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//长时间操作，不至于长时间的业务操作导致Handler阻塞</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;长时间的业务处理&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">},</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span><span style="color:#6A737D;">//5秒后执行</span></span></code></pre></div><p>依然打开debug进行调试查看，我们可以有一个scheduleTaskQueue任务待执行中</p><img src="`+r+`"><h3 id="_5-3-future异步机制" tabindex="-1">5.3 Future异步机制 <a class="header-anchor" href="#_5-3-future异步机制" aria-label="Permalink to &quot;5.3 Future异步机制&quot;">​</a></h3><p>在搭建HelloWord工程的时候，我们看到有一行这样的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ChannelFuture</span><span style="color:#F6F6F4;"> channelFuture </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bootstrap.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6666</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ChannelFuture channelFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bootstrap.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6666</span><span style="color:#24292E;">);</span></span></code></pre></div><p>很多操作都返回这个ChannelFuture对象，究竟这个ChannelFuture对象是用来做什么的呢？</p><p>ChannelFuture提供操作完成时一种异步通知的方式。一般在Socket编程中，等待响应结果都是同步阻塞的，而Netty则不会造成阻塞，因为ChannelFuture是采取类似观察者模式的形式进行获取结果。请看一段代码演示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//添加监听器</span></span>
<span class="line"><span style="color:#F6F6F4;">channelFuture.</span><span style="color:#62E884;">addListener</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ChannelFutureListener</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//使用匿名内部类，ChannelFutureListener接口</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//重写operationComplete方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> operationComplete(</span><span style="color:#97E1F1;font-style:italic;">ChannelFuture</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">future</span><span style="color:#62E884;">) </span><span style="color:#F286C4;">throws</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#7B7F8B;">//判断是否操作成功    </span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#F286C4;">if</span><span style="color:#62E884;"> (</span><span style="color:#F6F6F4;">future</span><span style="color:#62E884;">.isSuccess()) {</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">连接成功</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">        } </span><span style="color:#F286C4;">else</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">连接失败</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">        }</span></span>
<span class="line"><span style="color:#62E884;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//添加监听器</span></span>
<span class="line"><span style="color:#24292E;">channelFuture.</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelFutureListener</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//使用匿名内部类，ChannelFutureListener接口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//重写operationComplete方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">operationComplete</span><span style="color:#24292E;">(ChannelFuture </span><span style="color:#E36209;">future</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//判断是否操作成功    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (future.</span><span style="color:#6F42C1;">isSuccess</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;连接成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;连接失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="_5-4-bootstrap与serverbootstrap" tabindex="-1">5.4 Bootstrap与ServerBootStrap <a class="header-anchor" href="#_5-4-bootstrap与serverbootstrap" aria-label="Permalink to &quot;5.4 Bootstrap与ServerBootStrap&quot;">​</a></h3><p>Bootstrap和ServerBootStrap是Netty提供的一个创建客户端和服务端启动器的工厂类，使用这个工厂类非常便利地创建启动类，根据上面的一些例子，其实也看得出来能大大地减少了开发的难度。首先看一个类图：</p><img src="`+y+'"><p>可以看出都是继承于AbstractBootStrap抽象类，所以大致上的配置方法都相同。</p><p>一般来说，使用Bootstrap创建启动器的步骤可分为以下几步：</p><img src="'+F+`"><h4 id="_5-4-1-group" tabindex="-1">5.4.1 group() <a class="header-anchor" href="#_5-4-1-group" aria-label="Permalink to &quot;5.4.1 group()&quot;">​</a></h4><p>在上一篇文章<a href="https://link.segmentfault.com/?enc=8YUVvwPe1VtseGOoRML3jw%3D%3D.TxhHePrtQ3YA3LiqpxVgtOmR%2Fm7lwLCbdFutqSoirxkq13MQxjV3yI7uz4p99BT%2FcGQAJ2aUXbFZsMtJ7wthfg%3D%3D" target="_blank" rel="noreferrer">《Reactor模式》</a>中，我们就讲过服务端要使用两个线程组：</p><ul><li>bossGroup 用于监听客户端连接，专门负责与客户端创建连接，并把连接注册到workerGroup的Selector中。</li><li>workerGroup用于处理每一个连接发生的读写事件。</li></ul><p>一般创建线程组直接使用以下new就完事了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> bossGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> workerGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EventLoopGroup bossGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">EventLoopGroup workerGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">();</span></span></code></pre></div><p>有点好奇的是，既然是线程组，那线程数默认是多少呢？深入源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//使用一个常量保存</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> DEFAULT_EVENT_LOOP_THREADS;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//NettyRuntime.availableProcessors() * 2，cpu核数的两倍赋值给常量</span></span>
<span class="line"><span style="color:#F6F6F4;">        DEFAULT_EVENT_LOOP_THREADS </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, SystemPropertyUtil.</span><span style="color:#62E884;">getInt</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">io.netty.eventLoopThreads</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, NettyRuntime.</span><span style="color:#62E884;">availableProcessors</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (logger.</span><span style="color:#62E884;">isDebugEnabled</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            logger.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-Dio.netty.eventLoopThreads: {}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, DEFAULT_EVENT_LOOP_THREADS);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MultithreadEventLoopGroup</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nThreads, </span><span style="color:#97E1F1;font-style:italic;">Executor</span><span style="color:#F6F6F4;"> executor, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">... args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//如果不传入，则使用常量的值，也就是cpu核数的两倍</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(nThreads </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> DEFAULT_EVENT_LOOP_THREADS </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> nThreads, executor, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//使用一个常量保存</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> DEFAULT_EVENT_LOOP_THREADS;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//NettyRuntime.availableProcessors() * 2，cpu核数的两倍赋值给常量</span></span>
<span class="line"><span style="color:#24292E;">        DEFAULT_EVENT_LOOP_THREADS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, SystemPropertyUtil.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;io.netty.eventLoopThreads&quot;</span><span style="color:#24292E;">, NettyRuntime.</span><span style="color:#6F42C1;">availableProcessors</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (logger.</span><span style="color:#6F42C1;">isDebugEnabled</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-Dio.netty.eventLoopThreads: {}&quot;</span><span style="color:#24292E;">, DEFAULT_EVENT_LOOP_THREADS);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MultithreadEventLoopGroup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nThreads, Executor executor, Object... args) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//如果不传入，则使用常量的值，也就是cpu核数的两倍</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(nThreads </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> DEFAULT_EVENT_LOOP_THREADS </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> nThreads, executor, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>通过源码可以看到，默认的线程数是cpu核数的两倍。假设想自定义线程数，可以使用有参构造器：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//设置bossGroup线程数为1</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> bossGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//设置workerGroup线程数为16</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> workerGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NioEventLoopGroup</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//设置bossGroup线程数为1</span></span>
<span class="line"><span style="color:#24292E;">EventLoopGroup bossGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//设置workerGroup线程数为16</span></span>
<span class="line"><span style="color:#24292E;">EventLoopGroup workerGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NioEventLoopGroup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="_5-4-2-channel" tabindex="-1">5.4.2 channel() <a class="header-anchor" href="#_5-4-2-channel" aria-label="Permalink to &quot;5.4.2 channel()&quot;">​</a></h4><p>这个方法用于设置通道类型，当建立连接后，会根据这个设置创建对应的Channel实例。</p><img src="`+i+'"><p>使用debug模式可以看到</p><img src="'+E+`"><p>通道类型有以下：</p><p><strong>NioSocketChannel</strong>： 异步非阻塞的客户端 TCP Socket 连接。</p><p><strong>NioServerSocketChannel</strong>： 异步非阻塞的服务器端 TCP Socket 连接。</p><blockquote><p>常用的就是这两个通道类型，因为是异步非阻塞的。所以是首选。</p></blockquote><p>OioSocketChannel： 同步阻塞的客户端 TCP Socket 连接。</p><p>OioServerSocketChannel： 同步阻塞的服务器端 TCP Socket 连接。</p><blockquote><p>稍微在本地调试过，用起来和Nio有一些不同，是阻塞的，所以API调用也不一样。因为是阻塞的IO，几乎没什么人会选择使用Oio，所以也很难找到例子。我稍微琢磨了一下，经过几次报错之后，总算调通了。代码如下：</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//server端代码，跟上面几乎一样，只需改三个地方</span></span>
<span class="line"><span style="color:#7B7F8B;">//这个地方使用的是OioEventLoopGroup</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> bossGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ServerBootstrap</span><span style="color:#F6F6F4;"> bootstrap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerBootstrap</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">bootstrap.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">(bossGroup)</span><span style="color:#7B7F8B;">//只需要设置一个线程组boosGroup</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">(OioServerSocketChannel.class)</span><span style="color:#7B7F8B;">//设置服务端通道实现类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//client端代码，只需改两个地方</span></span>
<span class="line"><span style="color:#7B7F8B;">//使用的是OioEventLoopGroup</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> eventExecutors </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">//通道类型设置为OioSocketChannel</span></span>
<span class="line"><span style="color:#F6F6F4;">bootstrap.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">(eventExecutors)</span><span style="color:#7B7F8B;">//设置线程组</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">(OioSocketChannel.class)</span><span style="color:#7B7F8B;">//设置客户端的通道实现类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//server端代码，跟上面几乎一样，只需改三个地方</span></span>
<span class="line"><span style="color:#6A737D;">//这个地方使用的是OioEventLoopGroup</span></span>
<span class="line"><span style="color:#24292E;">EventLoopGroup bossGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">ServerBootstrap bootstrap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">bootstrap.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(bossGroup)</span><span style="color:#6A737D;">//只需要设置一个线程组boosGroup</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(OioServerSocketChannel.class)</span><span style="color:#6A737D;">//设置服务端通道实现类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//client端代码，只需改两个地方</span></span>
<span class="line"><span style="color:#6A737D;">//使用的是OioEventLoopGroup</span></span>
<span class="line"><span style="color:#24292E;">EventLoopGroup eventExecutors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//通道类型设置为OioSocketChannel</span></span>
<span class="line"><span style="color:#24292E;">bootstrap.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(eventExecutors)</span><span style="color:#6A737D;">//设置线程组</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(OioSocketChannel.class)</span><span style="color:#6A737D;">//设置客户端的通道实现类型</span></span></code></pre></div><p>NioSctpChannel： 异步的客户端 Sctp（Stream Control Transmission Protocol，流控制传输协议）连接。</p><p>NioSctpServerChannel： 异步的 Sctp 服务器端连接。</p><blockquote><p>本地没启动成功，网上看了一些网友的评论，说是只能在linux环境下才可以启动。从报错信息看：SCTP not supported on this platform，不支持这个平台。因为我电脑是window系统，所以网友说的有点道理。</p></blockquote><h4 id="_5-4-3-option-与childoption" tabindex="-1">5.4.3 option()与childOption() <a class="header-anchor" href="#_5-4-3-option-与childoption" aria-label="Permalink to &quot;5.4.3 option()与childOption()&quot;">​</a></h4><p>首先说一下这两个的区别。</p><p>option()设置的是服务端用于接收进来的连接，也就是boosGroup线程。</p><p>childOption()是提供给父管道接收到的连接，也就是workerGroup线程。</p><p>搞清楚了之后，我们看一下常用的一些设置有哪些：</p><p>SocketChannel参数，也就是childOption()常用的参数：</p><blockquote><p><strong>SO_RCVBUF</strong> Socket参数，TCP数据接收缓冲区大小。</p><p><strong>TCP_NODELAY</strong> TCP参数，立即发送数据，默认值为Ture。</p><p><strong>SO_KEEPALIVE</strong> Socket参数，连接保活，默认值为False。启用该功能时，TCP会主动探测空闲连接的有效性。</p></blockquote><p>ServerSocketChannel参数，也就是option()常用参数：</p><blockquote><p><strong>SO_BACKLOG</strong> Socket参数，服务端接受连接的队列长度，如果队列已满，客户端连接将被拒绝。默认值，Windows为200，其他为128。</p></blockquote><p>由于篇幅限制，其他就不列举了，大家可以去网上找资料看看，了解一下。</p><h4 id="_5-4-4-设置流水线-重点" tabindex="-1">5.4.4 设置流水线(重点) <a class="header-anchor" href="#_5-4-4-设置流水线-重点" aria-label="Permalink to &quot;5.4.4 设置流水线(重点)&quot;">​</a></h4><p>ChannelPipeline是Netty处理请求的责任链，ChannelHandler则是具体处理请求的处理器。实际上每一个channel都有一个处理器的流水线。</p><p>在Bootstrap中childHandler()方法需要初始化通道，实例化一个ChannelInitializer，这时候需要重写initChannel()初始化通道的方法，装配流水线就是在这个地方进行。代码演示如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//使用匿名内部类的形式初始化通道对象</span></span>
<span class="line"><span style="color:#F6F6F4;">bootstrap.</span><span style="color:#62E884;">childHandler</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInitializer</span><span style="color:#F6F6F4;">&lt;SocketChannel&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> initChannel(</span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">socketChannel</span><span style="color:#62E884;">) </span><span style="color:#F286C4;">throws</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#7B7F8B;">//给pipeline管道设置自定义的处理器</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#F6F6F4;">socketChannel</span><span style="color:#62E884;">.pipeline().addLast(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> MyServerHandler</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//使用匿名内部类的形式初始化通道对象</span></span>
<span class="line"><span style="color:#24292E;">bootstrap.</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">socketChannel</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//给pipeline管道设置自定义的处理器</span></span>
<span class="line"><span style="color:#24292E;">        socketChannel.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyServerHandler</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>处理器Handler主要分为两种：</p><blockquote><p>ChannelInboundHandlerAdapter(入站处理器)、ChannelOutboundHandler(出站处理器)</p></blockquote><p>入站指的是数据从底层java NIO Channel到Netty的Channel。</p><p>出站指的是通过Netty的Channel来操作底层的java NIO Channel。</p><p><strong>ChannelInboundHandlerAdapter处理器常用的事件有</strong>：</p><ol><li>注册事件 fireChannelRegistered。</li><li>连接建立事件 fireChannelActive。</li><li>读事件和读完成事件 fireChannelRead、fireChannelReadComplete。</li><li>异常通知事件 fireExceptionCaught。</li><li>用户自定义事件 fireUserEventTriggered。</li><li>Channel 可写状态变化事件 fireChannelWritabilityChanged。</li><li>连接关闭事件 fireChannelInactive。</li></ol><p><strong>ChannelOutboundHandler处理器常用的事件有</strong>：</p><ol><li>端口绑定 bind。</li><li>连接服务端 connect。</li><li>写事件 write。</li><li>刷新时间 flush。</li><li>读事件 read。</li><li>主动断开连接 disconnect。</li><li>关闭 channel 事件 close。</li></ol><blockquote><p>还有一个类似的handler()，主要用于装配parent通道，也就是bossGroup线程。一般情况下，都用不上这个方法。</p></blockquote><h4 id="_5-4-5-bind" tabindex="-1">5.4.5 bind() <a class="header-anchor" href="#_5-4-5-bind" aria-label="Permalink to &quot;5.4.5 bind()&quot;">​</a></h4><p>提供用于服务端或者客户端绑定服务器地址和端口号，默认是异步启动。如果加上sync()方法则是同步。</p><p>有五个同名的重载方法，作用都是用于绑定地址端口号。不一一介绍了。</p><h4 id="_5-4-6-优雅地关闭eventloopgroup" tabindex="-1">5.4.6 优雅地关闭EventLoopGroup <a class="header-anchor" href="#_5-4-6-优雅地关闭eventloopgroup" aria-label="Permalink to &quot;5.4.6 优雅地关闭EventLoopGroup&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//释放掉所有的资源，包括创建的线程</span></span>
<span class="line"><span style="color:#F6F6F4;">bossGroup.</span><span style="color:#62E884;">shutdownGracefully</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">workerGroup.</span><span style="color:#62E884;">shutdownGracefully</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//释放掉所有的资源，包括创建的线程</span></span>
<span class="line"><span style="color:#24292E;">bossGroup.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">workerGroup.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">();</span></span></code></pre></div><p>会关闭所有的child Channel。关闭之后，释放掉底层的资源。</p><h3 id="_5-5-channel" tabindex="-1">5.5 Channel <a class="header-anchor" href="#_5-5-channel" aria-label="Permalink to &quot;5.5 Channel&quot;">​</a></h3><p>Channel是什么？不妨看一下官方文档的说明：</p><blockquote><p>A nexus to a network socket or a component which is capable of I/O operations such as read, write, connect, and bind</p></blockquote><p>翻译大意：一种连接到网络套接字或能进行读、写、连接和绑定等I/O操作的组件。</p><p>如果上面这段说明比较抽象，下面还有一段说明：</p><blockquote><p>A channel provides a user:</p><p>the current state of the channel (e.g. is it open? is it connected?),</p><p>the configuration parameters of the channel (e.g. receive buffer size),</p><p>the I/O operations that the channel supports (e.g. read, write, connect, and bind), and</p><p>the ChannelPipeline which handles all I/O events and requests associated with the channel.</p></blockquote><p>翻译大意：</p><p>channel为用户提供：</p><ol><li>通道当前的状态（例如它是打开？还是已连接？）</li><li>channel的配置参数（例如接收缓冲区的大小）</li><li>channel支持的IO操作（例如读、写、连接和绑定），以及处理与channel相关联的所有IO事件和请求的ChannelPipeline。</li></ol><h4 id="_5-5-1-获取channel的状态" tabindex="-1">5.5.1 获取channel的状态 <a class="header-anchor" href="#_5-5-1-获取channel的状态" aria-label="Permalink to &quot;5.5.1 获取channel的状态&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isOpen</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//如果通道打开，则返回true</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isRegistered</span><span style="color:#F6F6F4;">();</span><span style="color:#7B7F8B;">//如果通道注册到EventLoop，则返回true</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isActive</span><span style="color:#F6F6F4;">();</span><span style="color:#7B7F8B;">//如果通道处于活动状态并且已连接，则返回true</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isWritable</span><span style="color:#F6F6F4;">();</span><span style="color:#7B7F8B;">//当且仅当I/O线程将立即执行请求的写入操作时，返回true。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isOpen</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//如果通道打开，则返回true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isRegistered</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//如果通道注册到EventLoop，则返回true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isActive</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//如果通道处于活动状态并且已连接，则返回true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isWritable</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//当且仅当I/O线程将立即执行请求的写入操作时，返回true。</span></span></code></pre></div><p>以上就是获取channel的四种状态的方法。</p><h4 id="_5-5-2-获取channel的配置参数" tabindex="-1">5.5.2 获取channel的配置参数 <a class="header-anchor" href="#_5-5-2-获取channel的配置参数" aria-label="Permalink to &quot;5.5.2 获取channel的配置参数&quot;">​</a></h4><p>获取单条配置信息，使用getOption()，代码演示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ChannelConfig</span><span style="color:#F6F6F4;"> config </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> channel.</span><span style="color:#62E884;">config</span><span style="color:#F6F6F4;">();</span><span style="color:#7B7F8B;">//获取配置参数</span></span>
<span class="line"><span style="color:#7B7F8B;">//获取ChannelOption.SO_BACKLOG参数,</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> soBackLogConfig </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> config.</span><span style="color:#62E884;">getOption</span><span style="color:#F6F6F4;">(ChannelOption.SO_BACKLOG);</span></span>
<span class="line"><span style="color:#7B7F8B;">//因为我启动器配置的是128，所以我这里获取的soBackLogConfig=128</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ChannelConfig config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//获取配置参数</span></span>
<span class="line"><span style="color:#6A737D;">//获取ChannelOption.SO_BACKLOG参数,</span></span>
<span class="line"><span style="color:#24292E;">Integer soBackLogConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getOption</span><span style="color:#24292E;">(ChannelOption.SO_BACKLOG);</span></span>
<span class="line"><span style="color:#6A737D;">//因为我启动器配置的是128，所以我这里获取的soBackLogConfig=128</span></span></code></pre></div><p>获取多条配置信息，使用getOptions()，代码演示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ChannelConfig</span><span style="color:#F6F6F4;"> config </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> channel.</span><span style="color:#62E884;">config</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">ChannelOption</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt;, Object&gt; options </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> config.</span><span style="color:#62E884;">getOptions</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">ChannelOption</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt;, Object&gt; entry </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> options.</span><span style="color:#62E884;">entrySet</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(entry.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> : </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">SO_REUSEADDR : false</span></span>
<span class="line"><span style="color:#7B7F8B;">WRITE_BUFFER_LOW_WATER_MARK : 32768</span></span>
<span class="line"><span style="color:#7B7F8B;">WRITE_BUFFER_WATER_MARK : WriteBufferWaterMark(low: 32768, high: 65536)</span></span>
<span class="line"><span style="color:#7B7F8B;">SO_BACKLOG : 128</span></span>
<span class="line"><span style="color:#7B7F8B;">以下省略...</span></span>
<span class="line"><span style="color:#7B7F8B;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ChannelConfig config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channel.</span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;ChannelOption&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; options </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> config.</span><span style="color:#6F42C1;">getOptions</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;ChannelOption&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> options.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">SO_REUSEADDR : false</span></span>
<span class="line"><span style="color:#6A737D;">WRITE_BUFFER_LOW_WATER_MARK : 32768</span></span>
<span class="line"><span style="color:#6A737D;">WRITE_BUFFER_WATER_MARK : WriteBufferWaterMark(low: 32768, high: 65536)</span></span>
<span class="line"><span style="color:#6A737D;">SO_BACKLOG : 128</span></span>
<span class="line"><span style="color:#6A737D;">以下省略...</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><h4 id="_5-5-3-channel支持的io操作" tabindex="-1">5.5.3 channel支持的IO操作 <a class="header-anchor" href="#_5-5-3-channel支持的io操作" aria-label="Permalink to &quot;5.5.3 channel支持的IO操作&quot;">​</a></h4><p><strong>写操作</strong>，这里演示从服务端写消息发送到客户端：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">channelRead</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#F6F6F4;"> ctx, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> msg) throws Exception {</span></span>
<span class="line"><span style="color:#F6F6F4;">    ctx.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">writeAndFlush</span><span style="color:#F6F6F4;">(Unpooled.</span><span style="color:#62E884;">copiedBuffer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">这波啊，这波是肉蛋葱鸡~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelRead</span><span style="color:#24292E;">(ChannelHandlerContext ctx, Object msg) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(Unpooled.</span><span style="color:#6F42C1;">copiedBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;这波啊，这波是肉蛋葱鸡~&quot;</span><span style="color:#24292E;">, CharsetUtil.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>客户端控制台：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//收到服务端/127.0.0.1:6666的消息：这波啊，这波是肉蛋葱鸡~</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//收到服务端/127.0.0.1:6666的消息：这波啊，这波是肉蛋葱鸡~</span></span></code></pre></div><p><strong>连接</strong>操作，代码演示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ChannelFuture</span><span style="color:#F6F6F4;"> connect </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> channelFuture.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InetSocketAddress</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6666</span><span style="color:#F6F6F4;">));</span><span style="color:#7B7F8B;">//一般使用启动器，这种方式不常用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ChannelFuture connect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> channelFuture.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6666</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">//一般使用启动器，这种方式不常用</span></span></code></pre></div><p><strong>通过channel获取ChannelPipeline</strong>，并做相关的处理：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//获取ChannelPipeline对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ChannelPipeline</span><span style="color:#F6F6F4;"> pipeline </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">pipeline</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">//往pipeline中添加ChannelHandler处理器，装配流水线</span></span>
<span class="line"><span style="color:#F6F6F4;">pipeline.</span><span style="color:#62E884;">addLast</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyServerHandler</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//获取ChannelPipeline对象</span></span>
<span class="line"><span style="color:#24292E;">ChannelPipeline pipeline </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//往pipeline中添加ChannelHandler处理器，装配流水线</span></span>
<span class="line"><span style="color:#24292E;">pipeline.</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyServerHandler</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="_5-6-selector" tabindex="-1">5.6 Selector <a class="header-anchor" href="#_5-6-selector" aria-label="Permalink to &quot;5.6 Selector&quot;">​</a></h3><p>在NioEventLoop中，有一个成员变量selector，这是nio包的Selector，在之前<a href="https://link.segmentfault.com/?enc=ktdjyId44xLx3TYJyiHkXQ%3D%3D.NbnQcgUeKiCxY0ye1cCMw%2BMy6nmMA2TH3gDoRvGDqh01WxnjqRBqKYJvkofjXB%2FnxtlzVbdFVhwV3Y0Anrqvfw%3D%3D" target="_blank" rel="noreferrer">《NIO入门》</a>中，我已经讲过Selector了。</p><p>Netty中的Selector也和NIO的Selector是一样的，就是用于监听事件，管理注册到Selector中的channel，实现多路复用器。</p><img src="`+d+'"><h3 id="_5-7-pipeline与channelpipeline" tabindex="-1">5.7 PiPeline与ChannelPipeline <a class="header-anchor" href="#_5-7-pipeline与channelpipeline" aria-label="Permalink to &quot;5.7 PiPeline与ChannelPipeline&quot;">​</a></h3><p>在前面介绍Channel时，我们知道可以在channel中装配ChannelHandler流水线处理器，那一个channel不可能只有一个channelHandler处理器，肯定是有很多的，既然是很多channelHandler在一个流水线工作，肯定是有顺序的。</p><p>于是pipeline就出现了，pipeline相当于处理器的容器。初始化channel时，把channelHandler按顺序装在pipeline中，就可以实现按序执行channelHandler了。</p><img src="'+u+'"><p>在一个Channel中，只有一个ChannelPipeline。该pipeline在Channel被创建的时候创建。ChannelPipeline包含了一个ChannelHander形成的列表，且所有ChannelHandler都会注册到ChannelPipeline中。</p><h3 id="_5-8-channelhandlercontext" tabindex="-1">5.8 ChannelHandlerContext <a class="header-anchor" href="#_5-8-channelhandlercontext" aria-label="Permalink to &quot;5.8 ChannelHandlerContext&quot;">​</a></h3><p>在Netty中，Handler处理器是有我们定义的，上面讲过通过集成入站处理器或者出站处理器实现。这时如果我们想在Handler中获取pipeline对象，或者channel对象，怎么获取呢。</p><p>于是Netty设计了这个ChannelHandlerContext上下文对象，就可以拿到channel、pipeline等对象，就可以进行读写等操作。</p><img src="'+h+`"><p>通过类图，ChannelHandlerContext是一个接口，下面有三个实现类。</p><p>实际上ChannelHandlerContext在pipeline中是一个链表的形式。看一段源码就明白了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//ChannelPipeline实现类DefaultChannelPipeline的构造器方法</span></span>
<span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultChannelPipeline</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Channel</span><span style="color:#F6F6F4;"> channel) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.channel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ObjectUtil.</span><span style="color:#62E884;">checkNotNull</span><span style="color:#F6F6F4;">(channel, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">channel</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    succeededFuture </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SucceededChannelFuture</span><span style="color:#F6F6F4;">(channel, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    voidPromise </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">VoidChannelPromise</span><span style="color:#F6F6F4;">(channel, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//设置头结点head，尾结点tail</span></span>
<span class="line"><span style="color:#F6F6F4;">    tail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TailContext</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">HeadContext</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    head.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tail;</span></span>
<span class="line"><span style="color:#F6F6F4;">    tail.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//ChannelPipeline实现类DefaultChannelPipeline的构造器方法</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultChannelPipeline</span><span style="color:#24292E;">(Channel channel) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ObjectUtil.</span><span style="color:#6F42C1;">checkNotNull</span><span style="color:#24292E;">(channel, </span><span style="color:#032F62;">&quot;channel&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    succeededFuture </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SucceededChannelFuture</span><span style="color:#24292E;">(channel, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    voidPromise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VoidChannelPromise</span><span style="color:#24292E;">(channel, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//设置头结点head，尾结点tail</span></span>
<span class="line"><span style="color:#24292E;">    tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TailContext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HeadContext</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    head.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tail;</span></span>
<span class="line"><span style="color:#24292E;">    tail.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面我用一张图来表示，会更加清晰一点：</p><img src="`+C+'"><h3 id="_5-9-eventloopgroup" tabindex="-1">5.9 EventLoopGroup <a class="header-anchor" href="#_5-9-eventloopgroup" aria-label="Permalink to &quot;5.9 EventLoopGroup&quot;">​</a></h3><p>我们先看一下EventLoopGroup的类图：</p><img src="'+g+`"><p>其中包括了常用的实现类NioEventLoopGroup。OioEventLoopGroup在前面的例子中也有使用过。</p><p>从Netty的架构图中，可以知道服务器是需要两个线程组进行配合工作的，而这个线程组的接口就是EventLoopGroup。</p><p>每个EventLoopGroup里包括一个或多个EventLoop，每个EventLoop中维护一个Selector实例。</p><h4 id="_5-9-1-轮询机制的实现原理" tabindex="-1">5.9.1 轮询机制的实现原理 <a class="header-anchor" href="#_5-9-1-轮询机制的实现原理" aria-label="Permalink to &quot;5.9.1 轮询机制的实现原理&quot;">​</a></h4><p>我们不妨看一段DefaultEventExecutorChooserFactory的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AtomicInteger</span><span style="color:#F6F6F4;"> idx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AtomicInteger</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">EventExecutor</span><span style="color:#F6F6F4;">[] executors;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">EventExecutor</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//idx.getAndIncrement()相当于idx++，然后对任务长度取模</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> executors[idx.</span><span style="color:#62E884;">getAndIncrement</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> executors.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AtomicInteger idx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicInteger</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">EventExecutor</span><span style="color:#24292E;">[] executors;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> EventExecutor </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//idx.getAndIncrement()相当于idx++，然后对任务长度取模</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> executors[idx.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> executors.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码可以确定执行的方式是轮询机制，接下来debug调试一下：</p><img src="`+f+`"><p>它这里还有一个判断，如果线程数不是2的N次方，则采用取模算法实现。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">EventExecutor</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> executors[Math.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">(idx.</span><span style="color:#62E884;">getAndIncrement</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> executors.length)];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> EventExecutor </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> executors[Math.</span><span style="color:#6F42C1;">abs</span><span style="color:#24292E;">(idx.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> executors.length)];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,173),A=[v];function D(B,k,m,x,q,_){return n(),a("div",null,A)}const O=s(b,[["render",D]]);export{S as __pageData,O as default};
