import{_ as s,o as n,c as a,V as p}from"./chunks/framework.c6d8cbec.js";const l="/docs/assets/swagger-febf2633-5b02-425b-a513-c8583e14d621.9b260e6a.png",o="/docs/assets/swagger-9cb36679-f1f7-469e-925e-2e54090f700f.c1376c1f.png",e="/docs/assets/swagger-25187213-723a-4120-8485-06759a509659.a5404be2.png",t="/docs/assets/swagger-0f2b9c42-bae4-4712-be29-3771ab3bd3a8.3beb6647.png",c="/docs/assets/swagger-529160e4-aa31-410a-aa04-93e9576322b6.e8a7e293.png",r="/docs/assets/swagger-d0d336e1-2cba-49f4-bd65-6df7f89a6c9f.92c2df50.png",i="/docs/assets/swagger-cb3c15e7-ecfd-4e5e-92b7-673acb966a54.52edae46.png",y="/docs/assets/swagger-0597f86d-1188-4fe1-8de8-fdb57c5cd524.0a870dd2.png",g="/docs/assets/swagger-05265d24-5242-48ac-9776-58e72798a545.c74084c3.png",F="/docs/assets/swagger-8b3d90d6-4eac-4db8-ab52-69c55078df36.9556c36c.png",u="/docs/assets/swagger-41096e72-bd7c-4663-b57e-fbc8506ec1cc.4fd38e66.png",v=JSON.parse('{"title":"Spring Boot整合Swagger-UI实现在线API文档","description":"","frontmatter":{"category":["Java企业级开发"],"tag":["Spring Boot"],"title":"Spring Boot整合Swagger-UI实现在线API文档"},"headers":[],"relativePath":"backend/tobetter/springboot/swagger.md","filePath":"backend/tobetter/springboot/swagger.md"}'),f={name:"backend/tobetter/springboot/swagger.md"},d=p('<h2 id="关于-swagger" tabindex="-1">关于 Swagger <a class="header-anchor" href="#关于-swagger" aria-label="Permalink to &quot;关于 Swagger&quot;">​</a></h2><p>Swagger 是一个用于生成、描述和调用 RESTful 接口的 Web 服务。</p><img src="'+l+'"><blockquote><p>想要理解RESTful架构的话，可以戳链接查看阮一峰老师的博客：<a href="https://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2011/09/restful.html</a></p></blockquote><p>换句话说，Swagger 就是将项目中想要暴露的接口展示在页面上，开发者可以直接进行接口调用和测试，能在很大程度上提升开发的效率。</p><p>比如说，一个后端程序员写了一个登录接口，想要测试自己写的接口是否符合预期的话，就得先模拟用户登录的行为，包括正常的行为（输入正确的用户名和密码）和异常的行为（输入错误的用户名和密码），这就要命了。</p><p>但有了 Swagger 后，可以通过简单的配置生成接口的展示页面，把接口的请求参数、返回结果通过可视化的形式展示出来，并且提供了便捷的测试服务。</p><ul><li>前端程序员可以通过接口展示页面查看需要传递的请求参数和返回的数据格式，不需要后端程序员再编写接口文档了；</li><li>后端程序员可以通过接口展示页面测试验证自己的接口是否符合预期，降低了开发阶段的调试成本。</li></ul><p>前后端分离就可以很完美的落地了，有没有？</p><blockquote><p>Swagger 官网地址：<a href="https://swagger.io/" target="_blank" rel="noreferrer">https://swagger.io/</a></p></blockquote><p>那在 Swagger 出现之前，局面就比较糟糕。前端经常抱怨后端给的接口文档与实际情况不一致。后端又觉得编写及维护接口文档会耗费不少精力，经常来不及更新。</p><p>大家都被无情地折磨，痛不堪言。。。</p><p>Swagger 定义了一套规范，你只需要按照它的规范去定义接口及接口相关的信息，然后通过 Swagger 衍生出来的一系列工具，就可以生成各种格式的接口文档，甚至还可以生成多种语言的客户端和服务端代码，以及在线接口调试页面等等。</p><p>那只要及时更新 Swagger 的描述文件，就可以自动生成接口文档了，做到调用端代码、服务端代码以及接口文档的一致性。</p><h2 id="整合-swagger-ui" tabindex="-1">整合 Swagger-UI <a class="header-anchor" href="#整合-swagger-ui" aria-label="Permalink to &quot;整合 Swagger-UI&quot;">​</a></h2><p>Swagger-UI 是一套 HTML/CSS/JS 框架，用于渲染 Swagger 文档，以便提供美观的 API 文档界面。</p><p>也就是说，Swagger-UI 是 Swagger 提供的一套可视化渲染组件，支持在线导入描述文件和本地部署UI项目。</p><img src="'+o+`"><p>第一步，在 pom.xml 文件中添加 Swagger 的 starter。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;3.0.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;3.0.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>咦，不是说添加 Swagger 的依赖吗？怎么添加的是 springfox-boot-starter 呢？</p><p>这是因为：</p><ul><li>Swagger 是一种规范。</li><li>springfox-swagger 是一个基于 Spring 生态系统的，Swagger 规范的实现。</li><li>springfox-boot-starter 是 springfox 针对 Spring Boot 项目提供的一个 starter，简化 Swagger 依赖的导入，否则我们就需要在 pom.xml 文件中添加 springfox-swagger、springfox-swagger-ui 等多个依赖。</li></ul><p>第二步，添加 Swagger 的 Java 配置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">EnableOpenApi</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SwaggerConfig</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Docket</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">docket</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Docket</span><span style="color:#F6F6F4;"> docket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Docket</span><span style="color:#F6F6F4;">(DocumentationType.OAS_30)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">apiInfo</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">apiInfo</span><span style="color:#F6F6F4;">()).</span><span style="color:#62E884;">enable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">select</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//apis： 添加swagger接口提取范围</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">apis</span><span style="color:#F6F6F4;">(RequestHandlerSelectors.</span><span style="color:#62E884;">basePackage</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">top.codingmore.controller</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">paths</span><span style="color:#F6F6F4;">(PathSelectors.</span><span style="color:#62E884;">any</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> docket;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ApiInfo</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">apiInfo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiInfoBuilder</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">title</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">编程猫实战项目笔记</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">description</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">编程喵是一个 Spring Boot+Vue 的前后端分离项目</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">contact</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Contact</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://codingmore.top</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">www.qing_gee@163.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">version</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">v1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableOpenApi</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SwaggerConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Docket </span><span style="color:#6F42C1;">docket</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Docket docket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Docket</span><span style="color:#24292E;">(DocumentationType.OAS_30)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">apiInfo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">apiInfo</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">enable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//apis： 添加swagger接口提取范围</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">apis</span><span style="color:#24292E;">(RequestHandlerSelectors.</span><span style="color:#6F42C1;">basePackage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;top.codingmore.controller&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">(PathSelectors.</span><span style="color:#6F42C1;">any</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> docket;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ApiInfo </span><span style="color:#6F42C1;">apiInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiInfoBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;编程猫实战项目笔记&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;编程喵是一个 Spring Boot+Vue 的前后端分离项目&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">contact</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Contact</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;https://codingmore.top&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;www.qing_gee@163.com&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;v1.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1）@Configuration 注解通常用来声明一个 Java 配置类，取代了以往的 xml 配置文件，让配置变得更加的简单和直接。</p><p>2）@EnableOpenApi 注解表明开启 Swagger。</p><p>3）SwaggerConfig 类中包含了一个 @Bean 注解声明的方法 <code>docket()</code>，该方法会被 Spring 的 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类进行扫描，然后添加到 Spring 容器当中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">AnnotationConfigApplicationContext</span><span style="color:#F6F6F4;"> ctx </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AnnotationConfigApplicationContext</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  ctx.</span><span style="color:#62E884;">register</span><span style="color:#F6F6F4;">(AppConfig.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">  ctx.</span><span style="color:#62E884;">refresh</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">MyBean</span><span style="color:#F6F6F4;"> myBean </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(MyBean.class);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">AnnotationConfigApplicationContext ctx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AnnotationConfigApplicationContext</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  ctx.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(AppConfig.class);</span></span>
<span class="line"><span style="color:#24292E;">  ctx.</span><span style="color:#6F42C1;">refresh</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  MyBean myBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(MyBean.class);</span></span></code></pre></div><p>简单描述一下 Swagger 的配置内容：</p><ul><li><code>new Docket(DocumentationType.OAS_30)</code>，使用 3.0 版本的 Swagger API。OAS 是 OpenAPI Specification 的简称，翻译成中文就是 OpenAPI 说明书，Swagger 遵循的就是这套规范。</li><li><code>apiInfo(apiInfo())</code>，配置 API 文档基本信息，标题、描述、作者、版本等。</li><li><code>apis(RequestHandlerSelectors.basePackage(&quot;top.codingmore.controller&quot;))</code> 指定 API 的接口范围为 controller 控制器。</li><li><code>paths(PathSelectors.any())</code> 指定匹配所有的 URL。</li></ul><p>第三步，添加控制器类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Api</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">tags</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">测试 Swagger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RestController</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/swagger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SwaggerController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiOperation</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">测试</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二又帅又丑</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Api</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;测试 Swagger&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/swagger&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SwaggerController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二又帅又丑&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1）@Api注解，用在类上，该注解将控制器标注为一个 Swagger 资源。该注解有 3 个属性：</p><ul><li>tags，具有相同标签的 API 会被归在一组内展示</li><li>value，如果 tags 没有定义，value 将作为 API 的 tags 使用。</li><li>description，已废弃</li></ul><p>2）@ApiOperation 注解，用在方法上，描述这个方法是做什么用的。该注解有 4 个属性：</p><ul><li>value 操作的简单说明，长度为120个字母，60个汉字。</li><li>notes 对操作的详细说明。</li><li>httpMethod HTTP请求的动作名，可选值有：&quot;GET&quot;, &quot;HEAD&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot; and &quot;PATCH&quot;。</li><li>code 默认为200，有效值必须符合标准的HTTP Status Code Definitions。</li></ul><p>3）@RestController 注解，用在类上，是@ResponseBody和@Controller的组合注解，如果方法要返回 JSON 的话，可省去 @ResponseBody 注解。</p><p>4）@RequestMapping 注解，可用在类（父路径）和方法（子路径）上，主要用来定义 API 的请求路径和请求类型。该注解有 6 个属性：</p><ul><li>value，指定请求的实际地址</li><li>method，指定请求的method类型， GET、POST、PUT、DELETE等</li><li>consumes，指定处理请求的提交内容类型（Content-Type），例如 application/json, text/html</li><li>produces，指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</li><li>params，指定request中必须包含某些参数值</li><li>headers，指定request中必须包含某些指定的header值</li></ul><p>第四步，启动服务，在浏览器中输入 <code>http://localhost:8080/swagger-ui/</code> 就可以访问 Swagger 生成的 API 文档了。</p><img src="`+e+'"><p>点开 get 请求的面板，点击「try it out」再点击「excute」可以查看接口返回的数据。</p><img src="'+t+'"><h2 id="版本不兼容" tabindex="-1">版本不兼容 <a class="header-anchor" href="#版本不兼容" aria-label="Permalink to &quot;版本不兼容&quot;">​</a></h2><p>在 Spring Boot 整合 Swagger 的过程中，我发现一个大 bug，Spring Boot 2.6.7 版本和 springfox 3.0.0 版本不兼容，启动的时候直接就报错了。</p><img src="'+c+'"><blockquote><p>Caused by: java.lang.NullPointerException: Cannot invoke &quot;org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()&quot; because &quot;this.condition&quot; is null</p></blockquote><p>一路跟踪下来，发现 GitHub 上确认有人在 Spring Boot 仓库下提到了这个 bug。</p><blockquote><p><a href="https://github.com/spring-projects/spring-boot/issues/28794" target="_blank" rel="noreferrer">https://github.com/spring-projects/spring-boot/issues/28794</a></p></blockquote><p>Spring Boot 说这是 springfox 的 bug。</p><img src="'+r+'"><p>追踪过来一看，确实。</p><img src="'+i+'"><p>有人提到的解决方案是切换到 SpringDoc。</p><img src="'+y+`"><p>这样就需要切换注解 <code>@Api → @Tag</code>，<code>@ApiOperation(value = &quot;foo&quot;, notes = &quot;bar&quot;) → @Operation(summary = &quot;foo&quot;, description = &quot;bar&quot;)</code>，对旧项目不是很友好，如果是新项目的话，倒是可以直接尝试 SpringDoc。</p><p>还有人提出的解决方案是：</p><ul><li>先将匹配策略调整为 ant-path-matcher（application.yml）。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">spring:</span></span>
<span class="line"><span style="color:#f6f6f4;">  mvc:</span></span>
<span class="line"><span style="color:#f6f6f4;">    path match:</span></span>
<span class="line"><span style="color:#f6f6f4;">      matching-strategy: ANT_PATH_MATCHER</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">spring:</span></span>
<span class="line"><span style="color:#24292e;">  mvc:</span></span>
<span class="line"><span style="color:#24292e;">    path match:</span></span>
<span class="line"><span style="color:#24292e;">      matching-strategy: ANT_PATH_MATCHER</span></span></code></pre></div><ul><li>然后在 Spring 容器中注入下面这个 bean，可以放在 SwaggerConfig 类中。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">@Bean</span></span>
<span class="line"><span style="color:#f6f6f4;">public static BeanPostProcessor springfoxHandlerProviderBeanPostProcessor() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    return new BeanPostProcessor() {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        @Override</span></span>
<span class="line"><span style="color:#f6f6f4;">        public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {</span></span>
<span class="line"><span style="color:#f6f6f4;">            if (bean instanceof WebMvcRequestHandlerProvider || bean instanceof WebFluxRequestHandlerProvider) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                customizeSpringfoxHandlerMappings(getHandlerMappings(bean));</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">            return bean;</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        private &lt;T extends RequestMappingInfoHandlerMapping&gt; void customizeSpringfoxHandlerMappings(List&lt;T&gt; mappings) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            List&lt;T&gt; copy = mappings.stream()</span></span>
<span class="line"><span style="color:#f6f6f4;">                    .filter(mapping -&gt; mapping.getPatternParser() == null)</span></span>
<span class="line"><span style="color:#f6f6f4;">                    .collect(Collectors.toList());</span></span>
<span class="line"><span style="color:#f6f6f4;">            mappings.clear();</span></span>
<span class="line"><span style="color:#f6f6f4;">            mappings.addAll(copy);</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        @SuppressWarnings(&quot;unchecked&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">        private List&lt;RequestMappingInfoHandlerMapping&gt; getHandlerMappings(Object bean) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            try {</span></span>
<span class="line"><span style="color:#f6f6f4;">                Field field = ReflectionUtils.findField(bean.getClass(), &quot;handlerMappings&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">                field.setAccessible(true);</span></span>
<span class="line"><span style="color:#f6f6f4;">                return (List&lt;RequestMappingInfoHandlerMapping&gt;) field.get(bean);</span></span>
<span class="line"><span style="color:#f6f6f4;">            } catch (IllegalArgumentException | IllegalAccessException e) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                throw new IllegalStateException(e);</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    };</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@Bean</span></span>
<span class="line"><span style="color:#24292e;">public static BeanPostProcessor springfoxHandlerProviderBeanPostProcessor() {</span></span>
<span class="line"><span style="color:#24292e;">    return new BeanPostProcessor() {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        @Override</span></span>
<span class="line"><span style="color:#24292e;">        public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {</span></span>
<span class="line"><span style="color:#24292e;">            if (bean instanceof WebMvcRequestHandlerProvider || bean instanceof WebFluxRequestHandlerProvider) {</span></span>
<span class="line"><span style="color:#24292e;">                customizeSpringfoxHandlerMappings(getHandlerMappings(bean));</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">            return bean;</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        private &lt;T extends RequestMappingInfoHandlerMapping&gt; void customizeSpringfoxHandlerMappings(List&lt;T&gt; mappings) {</span></span>
<span class="line"><span style="color:#24292e;">            List&lt;T&gt; copy = mappings.stream()</span></span>
<span class="line"><span style="color:#24292e;">                    .filter(mapping -&gt; mapping.getPatternParser() == null)</span></span>
<span class="line"><span style="color:#24292e;">                    .collect(Collectors.toList());</span></span>
<span class="line"><span style="color:#24292e;">            mappings.clear();</span></span>
<span class="line"><span style="color:#24292e;">            mappings.addAll(copy);</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        @SuppressWarnings(&quot;unchecked&quot;)</span></span>
<span class="line"><span style="color:#24292e;">        private List&lt;RequestMappingInfoHandlerMapping&gt; getHandlerMappings(Object bean) {</span></span>
<span class="line"><span style="color:#24292e;">            try {</span></span>
<span class="line"><span style="color:#24292e;">                Field field = ReflectionUtils.findField(bean.getClass(), &quot;handlerMappings&quot;);</span></span>
<span class="line"><span style="color:#24292e;">                field.setAccessible(true);</span></span>
<span class="line"><span style="color:#24292e;">                return (List&lt;RequestMappingInfoHandlerMapping&gt;) field.get(bean);</span></span>
<span class="line"><span style="color:#24292e;">            } catch (IllegalArgumentException | IllegalAccessException e) {</span></span>
<span class="line"><span style="color:#24292e;">                throw new IllegalStateException(e);</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    };</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><blockquote><p>解决方案地址：<a href="https://github.com/springfox/springfox/issues/3462" target="_blank" rel="noreferrer">https://github.com/springfox/springfox/issues/3462</a></p></blockquote><p>重新编译项目，就会发现错误消失了，我只能说GitHub 仓库的 issue 区都是大神！</p><p>查看 Swagger 接口文档，发现一切正常。</p><img src="`+g+'"><p>我只能再强调一次，GitHub 仓库的 issue 区都是大神！大家遇到问题的时候，一定要多到 issue 区看看。</p><p>至于为什么要这样做，问题的解决者给出了自己的答案。</p><img src="'+F+'"><p>大致的意思就是 springfox 和 Spring 在 pathPatternsCondition 上产生了分歧，这两个步骤就是用来消除这个分歧的。</p><p>除此之外，还有另外一种保守的做法，直接将 Spring Boot 的版本回退到更低的版本，比如说 2.4.5。</p><img src="'+u+'"><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>Swagger 虽然解决了调用端代码、服务端代码以及接口文档的不一致的问题，但有一说一，Swagger-UI 实在是太丑了。</p><hr><p>更多内容，只针对《Java程序员进阶之路》星球用户开放，需要的小伙伴可以<a href="https://tobebetterjavaer.com/zhishixingqiu/" target="_blank" rel="noreferrer">戳链接🔗</a>加入我们的星球，一起学习，一起卷。。<strong>编程喵</strong>🐱是一个 Spring Boot+Vue 的前后端分离项目，融合了市面上绝大多数流行的技术要点。通过学习实战项目，你可以将所学的知识通过实践进行检验、你可以拓宽自己的技术边界，你可以掌握一个真正的实战项目是如何从 0 到 1 的。</p><hr><h2 id="源码路径" tabindex="-1">源码路径 <a class="header-anchor" href="#源码路径" aria-label="Permalink to &quot;源码路径&quot;">​</a></h2><blockquote><ul><li>编程喵：<a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></li><li>codingmore-swagger：<a href="https://github.com/itwanger/codingmore-learning/tree/main/codingmore-swagger" target="_blank" rel="noreferrer">https://github.com/itwanger/codingmore-learning</a></li></ul></blockquote>',79),E=[d];function b(h,q,m,w,C,S){return n(),a("div",null,E)}const D=s(f,[["render",b]]);export{v as __pageData,D as default};
