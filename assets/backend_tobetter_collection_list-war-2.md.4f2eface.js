import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/list-war-2-01.56888335.png",o="/docs/assets/list-war-2-02.461b4277.png",e="/docs/assets/list-war-2-03.353519ae.png",t="/docs/assets/list-war-2-04.9370830f.png",f=JSON.parse('{"title":"ArrayList和LinkedList的区别：如何选择？","description":"本文详细比较了 ArrayList 和 LinkedList 的特性、性能差异以及适用场景。阅读本文，您将更好地理解两者的优劣，从而在实际编程中做出更明智的集合类选择，提高程序性能。","frontmatter":{"title":"ArrayList和LinkedList的区别：如何选择？","shortTitle":"ArrayList和LinkedList的区别","category":["Java核心"],"tag":["集合框架（容器）"],"description":"本文详细比较了 ArrayList 和 LinkedList 的特性、性能差异以及适用场景。阅读本文，您将更好地理解两者的优劣，从而在实际编程中做出更明智的集合类选择，提高程序性能。","head":[["meta",{"name":"keywords","content":"Java,LinkedList,ArrayList,java arraylist linkedlist, arraylist linkedlist"}]]},"headers":[],"relativePath":"backend/tobetter/collection/list-war-2.md","filePath":"backend/tobetter/collection/list-war-2.md"}'),c={name:"backend/tobetter/collection/list-war-2.md"},r=l('<h1 id="_6-5-arraylist和linkedlist的区别" tabindex="-1">6.5 ArrayList和LinkedList的区别 <a class="header-anchor" href="#_6-5-arraylist和linkedlist的区别" aria-label="Permalink to &quot;6.5 ArrayList和LinkedList的区别&quot;">​</a></h1><p>“终于，二哥，我们要聊 <a href="https://tobebetterjavaer.com/collection/linkedlist.html" target="_blank" rel="noreferrer">LinkedList</a> 和 <a href="https://tobebetterjavaer.com/collection/arraylist.html" target="_blank" rel="noreferrer">ArrayList</a> 之间的差别了，我期待了很久。”三妹嘟囔着说。</p><p>“其实经过前面两节的分析，差别已经很清晰了。”我喃喃道。</p><p>“哥，你再说点吧，深挖一下，OK？”</p><p>“好吧，那就让我们出发吧！”</p><blockquote><p>PS：为了和前面两节的源码做适当的区分，这里采用的是 Java 11 的源码，请务必注意。但整体上差别很小。</p></blockquote><h3 id="_01、arraylist-是如何实现的" tabindex="-1">01、ArrayList 是如何实现的？ <a class="header-anchor" href="#_01、arraylist-是如何实现的" aria-label="Permalink to &quot;01、ArrayList 是如何实现的？&quot;">​</a></h3><p>ArrayList 实现了 List 接口，继承了 AbstractList 抽象类。</p><img src="'+p+`"><p>底层是基于数组实现的，并且实现了动态扩容（当需要添加新元素时，如果 elementData 数组已满，则会自动扩容，新的容量将是原来的 1.5 倍），来看一下 ArrayList 的部分源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArrayList</span><span style="color:#F6F6F4;">&lt;E&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractList</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt;, </span><span style="color:#97E1F1;font-style:italic;">RandomAccess</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Cloneable</span><span style="color:#F6F6F4;">, java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> DEFAULT_CAPACITY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 默认容量为 10</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] elementData; </span><span style="color:#7B7F8B;">// 存储元素的数组，数组类型为 Object</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> size; </span><span style="color:#7B7F8B;">// 列表的大小，即列表中元素的个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">RandomAccess</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Cloneable</span><span style="color:#24292E;">, java.io.</span><span style="color:#6F42C1;">Serializable</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> DEFAULT_CAPACITY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 默认容量为 10</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] elementData; </span><span style="color:#6A737D;">// 存储元素的数组，数组类型为 Object</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> size; </span><span style="color:#6A737D;">// 列表的大小，即列表中元素的个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ArrayList 还实现了 RandomAccess 接口，这是一个标记接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RandomAccess</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccess</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>内部是空的，标记“实现了这个接口的类支持快速（通常是固定时间）随机访问”。快速随机访问是什么意思呢？就是说不需要遍历，就可以通过下标（索引）直接访问到内存地址。而 LinkedList 没有实现该接口，表示它不支持高效的随机访问，需要通过遍历来访问元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引越界（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Objects.</span><span style="color:#62E884;">checkIndex</span><span style="color:#F6F6F4;">(index, size); </span><span style="color:#7B7F8B;">// 检查索引是否越界</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 调用 elementData 方法获取元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 注意：该方法并没有检查索引是否越界，调用该方法前需要先检查索引是否越界。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (E) elementData[index]; </span><span style="color:#7B7F8B;">// 强制类型转换，将 Object 类型转换为 E 类型</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引越界（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    Objects.</span><span style="color:#6F42C1;">checkIndex</span><span style="color:#24292E;">(index, size); </span><span style="color:#6A737D;">// 检查索引是否越界</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 调用 elementData 方法获取元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> * 注意：该方法并没有检查索引是否越界，调用该方法前需要先检查索引是否越界。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">E </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (E) elementData[index]; </span><span style="color:#6A737D;">// 强制类型转换，将 Object 类型转换为 E 类型</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ArrayList 还实现了 Cloneable 接口，这表明 ArrayList 是支持<a href="https://tobebetterjavaer.com/basic-extra-meal/deep-copy.html" target="_blank" rel="noreferrer">拷贝</a>的。ArrayList 内部的确也重写了 Object 类的 <code>clone()</code> 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回该列表的浅表副本。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * （元素本身不会被复制。）</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 该列表的副本</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">clone</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; v </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;">) </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">clone</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 调用 Object 类的 clone 方法，得到一个浅表副本</span></span>
<span class="line"><span style="color:#F6F6F4;">        v.elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(elementData, size); </span><span style="color:#7B7F8B;">// 复制 elementData 数组，创建一个新数组作为副本</span></span>
<span class="line"><span style="color:#F6F6F4;">        v.modCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将 modCount 置为 0</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> v; </span><span style="color:#7B7F8B;">// 返回副本</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">CloneNotSupportedException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// this shouldn&#39;t happen, since we are Cloneable</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InternalError</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回该列表的浅表副本。</span></span>
<span class="line"><span style="color:#6A737D;"> * （元素本身不会被复制。）</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 该列表的副本</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ArrayList</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 调用 Object 类的 clone 方法，得到一个浅表副本</span></span>
<span class="line"><span style="color:#24292E;">        v.elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(elementData, size); </span><span style="color:#6A737D;">// 复制 elementData 数组，创建一个新数组作为副本</span></span>
<span class="line"><span style="color:#24292E;">        v.modCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将 modCount 置为 0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v; </span><span style="color:#6A737D;">// 返回副本</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (CloneNotSupportedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// this shouldn&#39;t happen, since we are Cloneable</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InternalError</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>ArrayList 还实现了 <a href="https://tobebetterjavaer.com/io/Serializbale.html" target="_blank" rel="noreferrer">Serializable</a> 接口，同样是一个标记接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Serializable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>内部也是空的，标记“实现了这个接口的类支持序列化”。序列化是什么意思呢？Java 的序列化是指，将对象转换成以字节序列的形式来表示，这些字节序中包含了对象的字段和方法。序列化后的对象可以被写到数据库、写到文件，也可用于网络传输。</p><p>眼睛雪亮的小伙伴可能会注意到，ArrayList 中的关键字段 elementData 使用了 <a href="https://tobebetterjavaer.com/io/transient.html" target="_blank" rel="noreferrer">transient 关键字</a>修饰，这个关键字的作用是，让它修饰的字段不被序列化。</p><p>这不前后矛盾吗？一个类既然实现了 Serilizable 接口，肯定是想要被序列化的，对吧？那为什么保存关键数据的 elementData 又不想被序列化呢?</p><p>这还得从 “ArrayList 是基于数组实现的”开始说起。大家都知道，数组是定长的，就是说，数组一旦声明了，长度（容量）就是固定的，不能像某些东西一样伸缩自如。这就很麻烦，数组一旦装满了，就不能添加新的元素进来了。</p><p>ArrayList 不想像数组这样活着，它想能屈能伸，所以它实现了动态扩容。一旦在添加元素的时候，发现容量用满了 <code>s == elementData.length</code>，就按照原来数组的 1.5 倍（<code>oldCapacity &gt;&gt; 1</code>）进行扩容。扩容之后，再将原有的数组复制到新分配的内存地址上 <code>Arrays.copyOf(elementData, newCapacity)</code>。</p><p>这部分源码我们在之前讲 <a href="https://tobebetterjavaer.com/collection/arraylist.html" target="_blank" rel="noreferrer">ArrayList</a> 的时候就已经讲的很清楚了，这里就一笔带过。</p><p>动态扩容意味着什么？</p><p>意味着数组的实际大小可能永远无法被填满的，总有多余出来空置的内存空间。</p><p>比如说，默认的数组大小是 10，当添加第 11 个元素的时候，数组的长度扩容了 1.5 倍，也就是 15，意味着还有 4 个内存空间是闲置的，对吧？</p><p>序列化的时候，如果把整个数组都序列化的话，是不是就多序列化了 4 个内存空间。当存储的元素数量非常非常多的时候，闲置的空间就非常非常大，序列化耗费的时间就会非常非常多。</p><p>于是，ArrayList 做了一个愉快而又聪明的决定，内部提供了两个私有方法 writeObject 和 readObject 来完成序列化和反序列化。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 将此列表实例的状态序列写入指定的 ObjectOutputStream。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * （即，保存这个列表实例到一个流中。）</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#7B7F8B;"> 要写入的流</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">java.io.IOException</span><span style="color:#7B7F8B;"> 如果写入流时发生异常</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeObject</span><span style="color:#F6F6F4;">(java.io.ObjectOutputStream s)</span></span>
<span class="line"><span style="color:#F6F6F4;">        throws java.io.IOException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">defaultWriteObject</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 写出对象的默认字段</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Write out size as capacity for behavioral compatibility with clone()</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">writeInt</span><span style="color:#F6F6F4;">(size); </span><span style="color:#7B7F8B;">// 写出 size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Write out all elements in the proper order.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        s.</span><span style="color:#62E884;">writeObject</span><span style="color:#F6F6F4;">(elementData[i]); </span><span style="color:#7B7F8B;">// 依次写出 elementData 数组中的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将此列表实例的状态序列写入指定的 ObjectOutputStream。</span></span>
<span class="line"><span style="color:#6A737D;"> * （即，保存这个列表实例到一个流中。）</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">s</span><span style="color:#6A737D;"> 要写入的流</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">java.io.IOException</span><span style="color:#6A737D;"> 如果写入流时发生异常</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(java.io.ObjectOutputStream s)</span></span>
<span class="line"><span style="color:#24292E;">        throws java.io.IOException {</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">defaultWriteObject</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 写出对象的默认字段</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Write out size as capacity for behavioral compatibility with clone()</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(size); </span><span style="color:#6A737D;">// 写出 size</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Write out all elements in the proper order.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        s.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(elementData[i]); </span><span style="color:#6A737D;">// 依次写出 elementData 数组中的元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从 writeObject 方法的源码中可以看得出，它使用了 ArrayList 的实际大小 size 而不是数组的长度（<code>elementData.length</code>）来作为元素的上限进行序列化。</p><p>此处应该有掌声啊！不是为我，为 Java 源码的作者们，他们真的是太厉害了，可以用两个词来形容他们——殚精竭虑、精益求精。</p><p>666</p><p>这是readObject方法的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 从指定的 ObjectInputStream 中读取此列表实例的状态序列。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * （即，从流中恢复这个列表实例。）</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#7B7F8B;"> 从中读取此列表实例的状态序列的流</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">java.io.IOException</span><span style="color:#7B7F8B;"> 如果读取流时发生异常</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">ClassNotFoundException</span><span style="color:#7B7F8B;"> 如果在读取流时找不到类</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readObject</span><span style="color:#F6F6F4;">(java.io.ObjectInputStream s)</span></span>
<span class="line"><span style="color:#F6F6F4;">        throws java.io.IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> EMPTY_ELEMENTDATA; </span><span style="color:#7B7F8B;">// 初始化 elementData 数组为空数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读取默认字段</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">defaultReadObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读取容量，这个值被忽略，因为在 ArrayList 中，容量和长度是两个不同的概念</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">readInt</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (size </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 分配一个新的 elementData 数组，大小为 size</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> elementData;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 依次从输入流中读取元素，并将其存储在数组中</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            a[i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">readObject</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 读取对象并存储在 elementData 数组中</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 从指定的 ObjectInputStream 中读取此列表实例的状态序列。</span></span>
<span class="line"><span style="color:#6A737D;"> * （即，从流中恢复这个列表实例。）</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">s</span><span style="color:#6A737D;"> 从中读取此列表实例的状态序列的流</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">java.io.IOException</span><span style="color:#6A737D;"> 如果读取流时发生异常</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">ClassNotFoundException</span><span style="color:#6A737D;"> 如果在读取流时找不到类</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">(java.io.ObjectInputStream s)</span></span>
<span class="line"><span style="color:#24292E;">        throws java.io.IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#24292E;">    elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> EMPTY_ELEMENTDATA; </span><span style="color:#6A737D;">// 初始化 elementData 数组为空数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取默认字段</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">defaultReadObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取容量，这个值被忽略，因为在 ArrayList 中，容量和长度是两个不同的概念</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (size </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 分配一个新的 elementData 数组，大小为 size</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementData;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 依次从输入流中读取元素，并将其存储在数组中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            a[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 读取对象并存储在 elementData 数组中</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_02、linkedlist-是如何实现的" tabindex="-1">02、LinkedList 是如何实现的？ <a class="header-anchor" href="#_02、linkedlist-是如何实现的" aria-label="Permalink to &quot;02、LinkedList 是如何实现的？&quot;">​</a></h3><p>LinkedList 是一个继承自 AbstractSequentialList 的双向链表，因此它也可以被当作堆栈、队列或双端队列进行操作。</p><img src="`+o+`"><p>来看一下部分源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LinkedList</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractSequentialList</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt;, </span><span style="color:#97E1F1;font-style:italic;">Deque</span><span style="color:#F6F6F4;">&lt;E&gt;, </span><span style="color:#97E1F1;font-style:italic;">Cloneable</span><span style="color:#F6F6F4;">, java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 非序列化字段，表示链表中的节点个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; first; </span><span style="color:#7B7F8B;">// 非序列化字段，指向链表中的第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; last; </span><span style="color:#7B7F8B;">// 非序列化字段，指向链表中的最后一个节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractSequentialList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">Deque</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">Cloneable</span><span style="color:#24292E;">, java.io.</span><span style="color:#6F42C1;">Serializable</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 非序列化字段，表示链表中的节点个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; first; </span><span style="color:#6A737D;">// 非序列化字段，指向链表中的第一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; last; </span><span style="color:#6A737D;">// 非序列化字段，指向链表中的最后一个节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>LinkedList 内部定义了一个 Node 节点，它包含 3 个部分：元素内容 item，前引用 prev 和后引用 next。这个在讲 <a href="https://tobebetterjavaer.com/collection/linkedlist.html" target="_blank" rel="noreferrer">LinkedList</a> 的时候也讲过了，这里略过。</p><p>LinkedList 还实现了 Cloneable 接口，这表明 LinkedList 是支持拷贝的。</p><p>LinkedList 还实现了 Serializable 接口，这表明 LinkedList 是支持序列化的。眼睛雪亮的小伙伴可能又注意到了，LinkedList 中的关键字段 size、first、last 都使用了 transient 关键字修饰，这不又矛盾了吗？到底是想序列化还是不想序列化？</p><p>答案是 LinkedList 想按照自己的方式序列化，来看它自己实现的 <code>writeObject()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeObject</span><span style="color:#F6F6F4;">(java.io.ObjectOutputStream s)</span></span>
<span class="line"><span style="color:#F6F6F4;">        throws java.io.IOException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 写入默认的序列化标记</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">defaultWriteObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 写入链表的节点个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">writeInt</span><span style="color:#F6F6F4;">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 按正确的顺序写入所有元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next)</span></span>
<span class="line"><span style="color:#F6F6F4;">        s.</span><span style="color:#62E884;">writeObject</span><span style="color:#F6F6F4;">(x.item);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(java.io.ObjectOutputStream s)</span></span>
<span class="line"><span style="color:#24292E;">        throws java.io.IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入默认的序列化标记</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">defaultWriteObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写入链表的节点个数</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(size);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按正确的顺序写入所有元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next)</span></span>
<span class="line"><span style="color:#24292E;">        s.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(x.item);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>发现没？LinkedList 在序列化的时候只保留了元素的内容 item，并没有保留元素的前后引用。这样就节省了不少内存空间，对吧？</p><p>那有些小伙伴可能就疑惑了，只保留元素内容，不保留前后引用，那反序列化的时候怎么办？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readObject</span><span style="color:#F6F6F4;">(java.io.ObjectInputStream s)</span></span>
<span class="line"><span style="color:#F6F6F4;">        throws java.io.IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读取默认的序列化标记</span></span>
<span class="line"><span style="color:#F6F6F4;">    s.</span><span style="color:#62E884;">defaultReadObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读取链表的节点个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">readInt</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 按正确的顺序读取所有元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">((E)s.</span><span style="color:#62E884;">readObject</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 读取元素并将其添加到链表末尾</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; l </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; newNode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;&gt;(l, e, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 将新节点作为链表尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (l </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 如果链表为空，将新节点作为链表头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        l.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 否则将新节点链接到链表尾部</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加节点个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">(java.io.ObjectInputStream s)</span></span>
<span class="line"><span style="color:#24292E;">        throws java.io.IOException, ClassNotFoundException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取默认的序列化标记</span></span>
<span class="line"><span style="color:#24292E;">    s.</span><span style="color:#6F42C1;">defaultReadObject</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取链表的节点个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 按正确的顺序读取所有元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">((E)s.</span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 读取元素并将其添加到链表末尾</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; newNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList.Node&lt;&gt;(l, e, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 将新节点作为链表尾节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 如果链表为空，将新节点作为链表头节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        l.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 否则将新节点链接到链表尾部</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加节点个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注意 for 循环中的 <code>linkLast()</code> 方法，它可以把链表重新链接起来，这样就恢复了链表序列化之前的顺序。很妙，对吧？</p><p>和 ArrayList 相比，LinkedList 没有实现 RandomAccess 接口，这是因为 LinkedList 存储数据的内存地址是不连续的，所以不支持随机访问。</p><h3 id="_03、新增元素时究竟谁快" tabindex="-1">03、新增元素时究竟谁快？ <a class="header-anchor" href="#_03、新增元素时究竟谁快" aria-label="Permalink to &quot;03、新增元素时究竟谁快？&quot;">​</a></h3><p>前面我们已经从多个维度了解了 ArrayList 和 LinkedList 的实现原理和各自的特点。那接下来，我们就来聊聊 ArrayList 和 LinkedList 在新增元素时究竟谁快？</p><h4 id="_1-arraylist" tabindex="-1"><strong>1）ArrayList</strong> <a class="header-anchor" href="#_1-arraylist" aria-label="Permalink to &quot;**1）ArrayList**&quot;">​</a></h4><p>ArrayList 新增元素有两种情况，一种是直接将元素添加到数组末尾，一种是将元素插入到指定位置。</p><p>添加到数组末尾的源码（这部分前面讲 <a href="https://tobebetterjavaer.com/collection/arraylist.html" target="_blank" rel="noreferrer">ArrayList</a> 的时候讲过了，这里再温故一下）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(e, elementData, size);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] elementData, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> s) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (s </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> elementData.length)</span></span>
<span class="line"><span style="color:#F6F6F4;">        elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">grow</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 扩容数组</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[s] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e; </span><span style="color:#7B7F8B;">// 将元素添加到数组末尾</span></span>
<span class="line"><span style="color:#F6F6F4;">    size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(e, elementData, size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] elementData, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> s) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> elementData.length)</span></span>
<span class="line"><span style="color:#24292E;">        elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grow</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 扩容数组</span></span>
<span class="line"><span style="color:#24292E;">    elementData[s] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e; </span><span style="color:#6A737D;">// 将元素添加到数组末尾</span></span>
<span class="line"><span style="color:#24292E;">    size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加元素个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很简单，先判断是否需要扩容，然后直接通过索引将元素添加到末尾。</p><p>插入到指定位置的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">rangeCheckForAdd</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查插入位置是否越界</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> s; </span><span style="color:#7B7F8B;">// 当前元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] elementData; </span><span style="color:#7B7F8B;">// 元素数组</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> (elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.elementData).length) </span><span style="color:#7B7F8B;">// 如果数组已满，则扩容</span></span>
<span class="line"><span style="color:#F6F6F4;">        elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">grow</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(elementData, index,</span></span>
<span class="line"><span style="color:#F6F6F4;">            elementData, index </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">            s </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> index); </span><span style="color:#7B7F8B;">// 将插入位置后的元素向右移动一位</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[index] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 将新元素插入到指定位置</span></span>
<span class="line"><span style="color:#F6F6F4;">    size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, E element) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheckForAdd</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查插入位置是否越界</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> s; </span><span style="color:#6A737D;">// 当前元素个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] elementData; </span><span style="color:#6A737D;">// 元素数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> (elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.elementData).length) </span><span style="color:#6A737D;">// 如果数组已满，则扩容</span></span>
<span class="line"><span style="color:#24292E;">        elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grow</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index,</span></span>
<span class="line"><span style="color:#24292E;">            elementData, index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            s </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index); </span><span style="color:#6A737D;">// 将插入位置后的元素向右移动一位</span></span>
<span class="line"><span style="color:#24292E;">    elementData[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 将新元素插入到指定位置</span></span>
<span class="line"><span style="color:#24292E;">    size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加元素个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>先检查插入的位置是否在合理的范围之内，然后判断是否需要扩容，再把该位置以后的元素复制到新添加元素的位置之后，最后通过索引将元素添加到指定的位置。</p><h4 id="_2-linkedlist" tabindex="-1"><strong>2）LinkedList</strong> <a class="header-anchor" href="#_2-linkedlist" aria-label="Permalink to &quot;**2）LinkedList**&quot;">​</a></h4><p>LinkedList 新增元素也有两种情况，一种是直接将元素添加到队尾，一种是将元素插入到指定位置。</p><p>添加到队尾的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(e); </span><span style="color:#7B7F8B;">// 将元素添加到链表末尾</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; l </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last; </span><span style="color:#7B7F8B;">// 获取链表的尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; newNode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;&gt;(l, e, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 创建新节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 将新节点作为链表的尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (l </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 如果链表为空，则将新节点作为链表的头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        l.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 否则将新节点链接到链表的尾部</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加节点个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(e); </span><span style="color:#6A737D;">// 将元素添加到链表末尾</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last; </span><span style="color:#6A737D;">// 获取链表的尾节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; newNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList.Node&lt;&gt;(l, e, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建新节点</span></span>
<span class="line"><span style="color:#24292E;">    last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 将新节点作为链表的尾节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 如果链表为空，则将新节点作为链表的头节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        l.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 否则将新节点链接到链表的尾部</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加节点个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>先将队尾的节点 last 存放到临时变量 l 中，然后生成新的 Node 节点，并赋给 last，如果 l 为 null，说明是第一次添加，所以 first 为新的节点；否则将新的节点赋给之前 last 的 next。</p><p>插入到指定位置的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkPositionIndex</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查插入位置是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> size)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">linkLast</span><span style="color:#F6F6F4;">(element); </span><span style="color:#7B7F8B;">// 如果插入位置为链表末尾，则将元素添加到链表末尾</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">linkBefore</span><span style="color:#F6F6F4;">(element, </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index)); </span><span style="color:#7B7F8B;">// 否则将元素插入到指定位置的前面的节点后面</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">LinkedList.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> (size </span><span style="color:#F286C4;">&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) { </span><span style="color:#7B7F8B;">// 如果插入位置在链表前半部分，则从头节点开始查找</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> index; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 否则从尾节点开始查找</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> index; i</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.prev;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">linkBefore</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e, LinkedList.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> succ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; pred </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> succ.prev; </span><span style="color:#7B7F8B;">// 获取插入位置的前驱节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; newNode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;&gt;(pred, e, succ); </span><span style="color:#7B7F8B;">// 创建新节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    succ.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 将新节点链接到后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (pred </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 如果前驱节点为空，则将新节点作为头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        pred.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newNode; </span><span style="color:#7B7F8B;">// 否则将新节点链接到前驱节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 增加节点个数</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, E element) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkPositionIndex</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查插入位置是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> size)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">linkLast</span><span style="color:#24292E;">(element); </span><span style="color:#6A737D;">// 如果插入位置为链表末尾，则将元素添加到链表末尾</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">linkBefore</span><span style="color:#24292E;">(element, </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index)); </span><span style="color:#6A737D;">// 否则将元素插入到指定位置的前面的节点后面</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">LinkedList.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (size </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) { </span><span style="color:#6A737D;">// 如果插入位置在链表前半部分，则从头节点开始查找</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> index; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 否则从尾节点开始查找</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> index; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.prev;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkBefore</span><span style="color:#24292E;">(E e, LinkedList.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> succ) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> succ.prev; </span><span style="color:#6A737D;">// 获取插入位置的前驱节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; newNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList.Node&lt;&gt;(pred, e, succ); </span><span style="color:#6A737D;">// 创建新节点</span></span>
<span class="line"><span style="color:#24292E;">    succ.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 将新节点链接到后继节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pred </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 如果前驱节点为空，则将新节点作为头节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        pred.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNode; </span><span style="color:#6A737D;">// 否则将新节点链接到前驱节点</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 增加节点个数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>先检查插入的位置是否在合理的范围之内，然后判断插入的位置是否是队尾，如果是，添加到队尾；否则执行 <code>linkBefore()</code> 方法。</p><p>在执行 <code>linkBefore()</code> 方法之前，会调用 <code>node()</code> 方法查找指定位置上的元素，这一步是需要遍历 LinkedList 的。如果插入的位置靠前前半段，就从队头开始往后找；否则从队尾往前找。也就是说，如果插入的位置越靠近 LinkedList 的中间位置，遍历所花费的时间就越多。</p><p>找到指定位置上的元素（参数succ）之后，就开始执行 <code>linkBefore()</code> 方法，先将 succ 的前一个节点（prev）存放到临时变量 pred 中，然后生成新的 Node 节点（newNode），并将 succ 的前一个节点变更为 newNode，如果 pred 为 null，说明插入的是队头，所以 first 为新节点；否则将 pred 的后一个节点变更为 newNode。</p><img src="`+e+`"><p>经过源码分析以后，你是不是在想：“好像 ArrayList 在新增元素的时候效率并不一定比 LinkedList 低啊！”</p><p>当两者的起始长度是一样的情况下：</p><ul><li>如果是从集合的头部新增元素，ArrayList 花费的时间应该比 LinkedList 多，因为需要对头部以后的元素进行复制。</li></ul><p>我们来测试一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArrayListTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFromHeaderTest</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt;(num);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeStart </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeEnd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ArrayList从集合头部位置新增元素花费的时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (timeEnd </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> timeStart));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@author</span><span style="color:#7B7F8B;"> 王二</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LinkedListTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFromHeaderTest</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeStart </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            list.</span><span style="color:#62E884;">addFirst</span><span style="color:#F6F6F4;">(i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeEnd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">LinkedList从集合头部位置新增元素花费的时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (timeEnd </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> timeStart));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayListTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFromHeaderTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(num);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ArrayList从集合头部位置新增元素花费的时间&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (timeEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timeStart));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@author</span><span style="color:#6A737D;"> 王二</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedListTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFromHeaderTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">addFirst</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;LinkedList从集合头部位置新增元素花费的时间&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (timeEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timeStart));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>num 为 10000，代码实测后的时间如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">ArrayList从集合头部位置新增元素花费的时间595</span></span>
<span class="line"><span style="color:#f6f6f4;">LinkedList从集合头部位置新增元素花费的时间15</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ArrayList从集合头部位置新增元素花费的时间595</span></span>
<span class="line"><span style="color:#24292e;">LinkedList从集合头部位置新增元素花费的时间15</span></span></code></pre></div><p>此时，ArrayList 花费的时间比 LinkedList 要多很多。</p><ul><li>如果是从集合的中间位置新增元素，ArrayList 花费的时间搞不好要比 LinkedList 少，因为 LinkedList 需要遍历。</li></ul><p>来看测试代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArrayListTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFromMidTest</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt;(num);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeStart </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(temp </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeEnd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ArrayList从集合中间位置新增元素花费的时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (timeEnd </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> timeStart));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LinkedListTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFromMidTest</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeStart </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(temp </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeEnd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">LinkedList从集合中间位置新增元素花费的时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (timeEnd </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> timeStart));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayListTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFromMidTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(num);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(temp </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ArrayList从集合中间位置新增元素花费的时间&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (timeEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timeStart));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedListTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFromMidTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(temp </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;LinkedList从集合中间位置新增元素花费的时间&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (timeEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timeStart));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>num 为 10000，代码实测后的时间如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">ArrayList从集合中间位置新增元素花费的时间16</span></span>
<span class="line"><span style="color:#f6f6f4;">LinkedList从集合中间位置新增元素花费的时间114</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ArrayList从集合中间位置新增元素花费的时间16</span></span>
<span class="line"><span style="color:#24292e;">LinkedList从集合中间位置新增元素花费的时间114</span></span></code></pre></div><p>ArrayList 花费的时间比 LinkedList 要少很多很多。</p><ul><li>如果是从集合的尾部新增元素，ArrayList 花费的时间应该比 LinkedList 少，因为数组是一段连续的内存空间，也不需要复制数组；而链表需要创建新的对象，前后引用也要重新排列。</li></ul><p>来看测试代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArrayListTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFromTailTest</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt;(num);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeStart </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeEnd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ArrayList从集合尾部位置新增元素花费的时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (timeEnd </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> timeStart));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LinkedListTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addFromTailTest</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeStart </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> num) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeEnd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">LinkedList从集合尾部位置新增元素花费的时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (timeEnd </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> timeStart));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayListTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFromTailTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(num);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ArrayList从集合尾部位置新增元素花费的时间&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (timeEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timeStart));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedListTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addFromTailTest</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeStart </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num) {</span></span>
<span class="line"><span style="color:#24292E;">            list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeEnd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;LinkedList从集合尾部位置新增元素花费的时间&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (timeEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> timeStart));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>num 为 10000，代码实测后的时间如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">ArrayList从集合尾部位置新增元素花费的时间69</span></span>
<span class="line"><span style="color:#f6f6f4;">LinkedList从集合尾部位置新增元素花费的时间193</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ArrayList从集合尾部位置新增元素花费的时间69</span></span>
<span class="line"><span style="color:#24292e;">LinkedList从集合尾部位置新增元素花费的时间193</span></span></code></pre></div><p>ArrayList 花费的时间比 LinkedList 要少一些。</p><p>这样的结论和预期的是不是不太相符？ArrayList 在添加元素的时候如果不涉及到扩容，性能在两种情况下（中间位置新增元素、尾部新增元素）比 LinkedList 好很多，只有头部新增元素的时候比 LinkedList 差，因为数组复制的原因。</p><p>当然了，如果涉及到数组扩容的话，ArrayList 的性能就没那么可观了，因为扩容的时候也要复制数组。</p><h3 id="_04、删除元素时究竟谁快" tabindex="-1">04、删除元素时究竟谁快？ <a class="header-anchor" href="#_04、删除元素时究竟谁快" aria-label="Permalink to &quot;04、删除元素时究竟谁快？&quot;">​</a></h3><h4 id="_1-arraylist-1" tabindex="-1"><strong>1）ArrayList</strong> <a class="header-anchor" href="#_1-arraylist-1" aria-label="Permalink to &quot;**1）ArrayList**&quot;">​</a></h4><p>ArrayList 删除元素的时候，有两种方式，一种是直接删除元素（<code>remove(Object)</code>），需要直先遍历数组，找到元素对应的索引；一种是按照索引删除元素（<code>remove(int)</code>）。</p><p>来看一下源码（其实前面也讲过了，这里温习一下）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] es </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> elementData; </span><span style="color:#7B7F8B;">// 获取数组元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.size; </span><span style="color:#7B7F8B;">// 获取数组大小</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    found</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (es[i] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;"> found;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(es[i]))</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;"> found;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">fastRemove</span><span style="color:#F6F6F4;">(es, i); </span><span style="color:#7B7F8B;">// 调用 fastRemove 方法快速移除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Objects.</span><span style="color:#62E884;">checkIndex</span><span style="color:#F6F6F4;">(index, size); </span><span style="color:#7B7F8B;">// 检查索引是否越界</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] es </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> elementData; </span><span style="color:#7B7F8B;">// 获取数组元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    oldValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (E) es[index]; </span><span style="color:#7B7F8B;">// 获取要删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">fastRemove</span><span style="color:#F6F6F4;">(es, index); </span><span style="color:#7B7F8B;">// 调用 fastRemove 方法快速移除元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldValue; </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] es </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementData; </span><span style="color:#6A737D;">// 获取数组元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.size; </span><span style="color:#6A737D;">// 获取数组大小</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    found</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (es[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> found;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(es[i]))</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> found;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fastRemove</span><span style="color:#24292E;">(es, i); </span><span style="color:#6A737D;">// 调用 fastRemove 方法快速移除元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    Objects.</span><span style="color:#6F42C1;">checkIndex</span><span style="color:#24292E;">(index, size); </span><span style="color:#6A737D;">// 检查索引是否越界</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] es </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementData; </span><span style="color:#6A737D;">// 获取数组元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (E) es[index]; </span><span style="color:#6A737D;">// 获取要删除的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fastRemove</span><span style="color:#24292E;">(es, index); </span><span style="color:#6A737D;">// 调用 fastRemove 方法快速移除元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue; </span><span style="color:#6A737D;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>本质上讲，两个方法是一样的，它们最后调用的都是 <code>fastRemove(Object, int)</code> 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fastRemove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] es, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> newSize;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((newSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> i) </span><span style="color:#7B7F8B;">// 如果要删除的不是最后一个元素</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(es, i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, es, i, newSize </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> i); </span><span style="color:#7B7F8B;">// 将要删除元素后面的元素向前移动一位</span></span>
<span class="line"><span style="color:#F6F6F4;">    es[size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newSize] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将最后一个元素置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fastRemove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] es, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newSize;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((newSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> i) </span><span style="color:#6A737D;">// 如果要删除的不是最后一个元素</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(es, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, es, i, newSize </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i); </span><span style="color:#6A737D;">// 将要删除元素后面的元素向前移动一位</span></span>
<span class="line"><span style="color:#24292E;">    es[size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newSize] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将最后一个元素置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从源码可以看得出，只要删除的不是最后一个元素，都需要重新移动数组。删除的元素位置越靠前，代价就越大。</p><h4 id="_2-linkedlist-1" tabindex="-1"><strong>2）LinkedList</strong> <a class="header-anchor" href="#_2-linkedlist-1" aria-label="Permalink to &quot;**2）LinkedList**&quot;">​</a></h4><p>LinkedList 删除元素的时候，有四种常用的方式：</p><ul><li><code>remove(int)</code>，删除指定位置上的元素</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkElementIndex</span><span style="color:#F6F6F4;">(index);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkElementIndex</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>先检查索引，再调用 <code>node(int)</code> 方法（ 前后半段遍历，和新增元素操作一样）找到节点 Node，然后调用 <code>unlink(Node)</code> 解除节点的前后引用，同时更新前节点的后引用和后节点的前引用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> x) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.item; </span><span style="color:#7B7F8B;">// 获取要删除的节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next; </span><span style="color:#7B7F8B;">// 获取要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.prev; </span><span style="color:#7B7F8B;">// 获取要删除的节点的前驱节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (prev </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除的节点是第一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将头节点更新为要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        prev.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将要删除的节点的前驱节点的后继节点指向要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        x.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的前驱节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (next </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除的节点是最后一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> prev; </span><span style="color:#7B7F8B;">// 将尾节点更新为要删除的节点的前驱节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        next.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> prev; </span><span style="color:#7B7F8B;">// 将要删除的节点的后继节点的前驱节点指向要删除的节点的前驱节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        x.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的后继节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    x.item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的元素置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将链表的长度减一</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">E </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> E element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.item; </span><span style="color:#6A737D;">// 获取要删除的节点的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next; </span><span style="color:#6A737D;">// 获取要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.prev; </span><span style="color:#6A737D;">// 获取要删除的节点的前驱节点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (prev </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除的节点是第一个节点</span></span>
<span class="line"><span style="color:#24292E;">        first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将头节点更新为要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        prev.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将要删除的节点的前驱节点的后继节点指向要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#24292E;">        x.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的前驱节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除的节点是最后一个节点</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev; </span><span style="color:#6A737D;">// 将尾节点更新为要删除的节点的前驱节点</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        next.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> prev; </span><span style="color:#6A737D;">// 将要删除的节点的后继节点的前驱节点指向要删除的节点的前驱节点</span></span>
<span class="line"><span style="color:#24292E;">        x.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的后继节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    x.item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的元素置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将链表的长度减一</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>remove(Object)</code>，直接删除元素</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除的元素为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x.item </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果找到了要删除的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(x); </span><span style="color:#7B7F8B;">// 调用 unlink 方法删除指定节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回删除成功</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(x.item)) { </span><span style="color:#7B7F8B;">// 如果找到了要删除的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">unlink</span><span style="color:#F6F6F4;">(x); </span><span style="color:#7B7F8B;">// 调用 unlink 方法删除指定节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回删除成功</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 没有找到要删除的节点，返回删除失败</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除的元素为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.item </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果找到了要删除的节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 调用 unlink 方法删除指定节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回删除成功</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(x.item)) { </span><span style="color:#6A737D;">// 如果找到了要删除的节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">unlink</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 调用 unlink 方法删除指定节点</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回删除成功</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 没有找到要删除的节点，返回删除失败</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>也是先前后半段遍历，找到要删除的元素后调用 <code>unlink(Node)</code>。</p><ul><li><code>removeFirst()</code>，删除第一个节点</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">removeFirst</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (f </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NoSuchElementException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlinkFirst</span><span style="color:#F6F6F4;">(f);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unlinkFirst</span><span style="color:#F6F6F4;">(LinkedList.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> f) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.item; </span><span style="color:#7B7F8B;">// 获取要删除的节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.next; </span><span style="color:#7B7F8B;">// 获取要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    f.item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的元素置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">    f.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的后继节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">    first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将头节点更新为要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (next </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果链表已经为空</span></span>
<span class="line"><span style="color:#F6F6F4;">        last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将尾节点置为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        next.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要删除的节点的后继节点的前驱节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将链表的长度减一</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">removeFirst</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoSuchElementException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unlinkFirst</span><span style="color:#24292E;">(f);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">unlinkFirst</span><span style="color:#24292E;">(LinkedList.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> f) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> E element </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.item; </span><span style="color:#6A737D;">// 获取要删除的节点的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.next; </span><span style="color:#6A737D;">// 获取要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#24292E;">    f.item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的元素置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">    f.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的后继节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">    first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将头节点更新为要删除的节点的后继节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果链表已经为空</span></span>
<span class="line"><span style="color:#24292E;">        last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将尾节点置为 null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        next.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要删除的节点的后继节点的前驱节点置为 null，帮助垃圾回收</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将链表的长度减一</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>删除第一个节点就不需要遍历了，只需要把第二个节点更新为第一个节点即可。</p><ul><li><code>removeLast()</code>，删除最后一个节点</li></ul><p>删除最后一个节点和删除第一个节点类似，只需要把倒数第二个节点更新为最后一个节点即可。</p><p>可以看得出，LinkedList 在删除比较靠前和比较靠后的元素时，非常高效，但如果删除的是中间位置的元素，效率就比较低了。</p><p>这里就不再做代码测试了，感兴趣的话可以自己试试，结果和新增元素保持一致：</p><ul><li>从集合头部删除元素时，ArrayList 花费的时间比 LinkedList 多很多；</li><li>从集合中间位置删除元素时，ArrayList 花费的时间比 LinkedList 少很多；</li><li>从集合尾部删除元素时，ArrayList 花费的时间比 LinkedList 少一点。</li></ul><p>我本地的统计结果如下所示，可以作为参考：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">ArrayList从集合头部位置删除元素花费的时间380</span></span>
<span class="line"><span style="color:#f6f6f4;">LinkedList从集合头部位置删除元素花费的时间4</span></span>
<span class="line"><span style="color:#f6f6f4;">ArrayList从集合中间位置删除元素花费的时间381</span></span>
<span class="line"><span style="color:#f6f6f4;">LinkedList从集合中间位置删除元素花费的时间5922</span></span>
<span class="line"><span style="color:#f6f6f4;">ArrayList从集合尾部位置删除元素花费的时间8</span></span>
<span class="line"><span style="color:#f6f6f4;">LinkedList从集合尾部位置删除元素花费的时间12</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ArrayList从集合头部位置删除元素花费的时间380</span></span>
<span class="line"><span style="color:#24292e;">LinkedList从集合头部位置删除元素花费的时间4</span></span>
<span class="line"><span style="color:#24292e;">ArrayList从集合中间位置删除元素花费的时间381</span></span>
<span class="line"><span style="color:#24292e;">LinkedList从集合中间位置删除元素花费的时间5922</span></span>
<span class="line"><span style="color:#24292e;">ArrayList从集合尾部位置删除元素花费的时间8</span></span>
<span class="line"><span style="color:#24292e;">LinkedList从集合尾部位置删除元素花费的时间12</span></span></code></pre></div><h3 id="_05、遍历元素时究竟谁快" tabindex="-1">05、遍历元素时究竟谁快？ <a class="header-anchor" href="#_05、遍历元素时究竟谁快" aria-label="Permalink to &quot;05、遍历元素时究竟谁快？&quot;">​</a></h3><h4 id="_1-arraylist-2" tabindex="-1"><strong>1）ArrayList</strong> <a class="header-anchor" href="#_1-arraylist-2" aria-label="Permalink to &quot;**1）ArrayList**&quot;">​</a></h4><p>遍历 ArrayList 找到某个元素的话，通常有两种形式：</p><ul><li><code>get(int)</code>，根据索引找元素</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Objects.</span><span style="color:#62E884;">checkIndex</span><span style="color:#F6F6F4;">(index, size);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    Objects.</span><span style="color:#6F42C1;">checkIndex</span><span style="color:#24292E;">(index, size);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于 ArrayList 是由数组实现的，所以根据索引找元素非常的快，一步到位。</p><ul><li><code>indexOf(Object)</code>，根据元素找索引</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOfRange</span><span style="color:#F6F6F4;">(o, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, size);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOfRange</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> start, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> end) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] es </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> elementData; </span><span style="color:#7B7F8B;">// 获取 ArrayList 中的元素数组</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要查找的元素为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> start; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> end; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (es[i] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i; </span><span style="color:#7B7F8B;">// 返回元素在 ArrayList 中的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> start; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> end; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(es[i])) { </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i; </span><span style="color:#7B7F8B;">// 返回元素在 ArrayList 中的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 没有找到要查找的元素，返回 -1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOfRange</span><span style="color:#24292E;">(o, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, size);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOfRange</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> start, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> end) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] es </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementData; </span><span style="color:#6A737D;">// 获取 ArrayList 中的元素数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要查找的元素为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (es[i] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 返回元素在 ArrayList 中的索引</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> start; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> end; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(es[i])) { </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 返回元素在 ArrayList 中的索引</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 没有找到要查找的元素，返回 -1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据元素找索引的话，就需要遍历整个数组了，从头到尾依次找。</p><h4 id="_2-linkedlist-2" tabindex="-1"><strong>2）LinkedList</strong> <a class="header-anchor" href="#_2-linkedlist-2" aria-label="Permalink to &quot;**2）LinkedList**&quot;">​</a></h4><p>遍历 LinkedList 找到某个元素的话，通常也有两种形式：</p><ul><li><code>get(int)</code>，找指定位置上的元素</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkElementIndex</span><span style="color:#F6F6F4;">(index);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index).item;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkElementIndex</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index).item;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>既然需要调用 <code>node(int)</code> 方法，就意味着需要前后半段遍历了。</p><ul><li><code>indexOf(Object)</code>，找元素所在的位置</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 初始化索引为 0</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要查找的元素为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) { </span><span style="color:#7B7F8B;">// 从头节点开始遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x.item </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> index; </span><span style="color:#7B7F8B;">// 返回元素在 LinkedList 中的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            index</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 索引加一</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; x </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next) { </span><span style="color:#7B7F8B;">// 从头节点开始遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(x.item)) </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> index; </span><span style="color:#7B7F8B;">// 返回元素在 LinkedList 中的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            index</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 索引加一</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 没有找到要查找的元素，返回 -1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 初始化索引为 0</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要查找的元素为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) { </span><span style="color:#6A737D;">// 从头节点开始遍历链表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x.item </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> index; </span><span style="color:#6A737D;">// 返回元素在 LinkedList 中的索引</span></span>
<span class="line"><span style="color:#24292E;">            index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 索引加一</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; x </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next) { </span><span style="color:#6A737D;">// 从头节点开始遍历链表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(x.item)) </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> index; </span><span style="color:#6A737D;">// 返回元素在 LinkedList 中的索引</span></span>
<span class="line"><span style="color:#24292E;">            index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 索引加一</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 没有找到要查找的元素，返回 -1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要遍历整个链表，和 ArrayList 的 <code>indexOf()</code> 类似。</p><p>那在我们对集合遍历的时候，通常有两种做法，一种是使用 for 循环，一种是使用<a href="https://tobebetterjavaer.com/collection/iterator-iterable.html" target="_blank" rel="noreferrer">迭代器（Iterator）</a>。</p><p>如果使用的是 for 循环，可想而知 LinkedList 在 get 的时候性能会非常差，因为每一次外层的 for 循环，都要执行一次 <code>node(int)</code> 方法进行前后半段的遍历。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">LinkedList.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// assert isElementIndex(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> (size </span><span style="color:#F286C4;">&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) { </span><span style="color:#7B7F8B;">// 如果要查找的元素在链表的前半部分</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first; </span><span style="color:#7B7F8B;">// 从头节点开始遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> index; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 循环查找元素</span></span>
<span class="line"><span style="color:#F6F6F4;">            x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x; </span><span style="color:#7B7F8B;">// 返回要查找的元素节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果要查找的元素在链表的后半部分</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last; </span><span style="color:#7B7F8B;">// 从尾节点开始遍历链表</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> index; i</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 循环查找元素</span></span>
<span class="line"><span style="color:#F6F6F4;">            x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x.prev;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x; </span><span style="color:#7B7F8B;">// 返回要查找的元素节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LinkedList.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// assert isElementIndex(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> (size </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) { </span><span style="color:#6A737D;">// 如果要查找的元素在链表的前半部分</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first; </span><span style="color:#6A737D;">// 从头节点开始遍历链表</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> index; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 循环查找元素</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.next;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 返回要查找的元素节点</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果要查找的元素在链表的后半部分</span></span>
<span class="line"><span style="color:#24292E;">        LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last; </span><span style="color:#6A737D;">// 从尾节点开始遍历链表</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> index; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 循环查找元素</span></span>
<span class="line"><span style="color:#24292E;">            x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x.prev;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x; </span><span style="color:#6A737D;">// 返回要查找的元素节点</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那如果使用的是迭代器呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Iterator</span><span style="color:#F6F6F4;">&lt;String&gt; it </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">(); it.</span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">();) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    it.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Iterator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; it </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">(); it.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">();) {</span></span>
<span class="line"><span style="color:#24292E;">    it.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>迭代器只会调用一次 <code>node(int)</code> 方法，在执行 <code>list.iterator()</code> 的时候：先调用 AbstractSequentialList 类的 <code>iterator()</code> 方法，再调用 AbstractList 类的 <code>listIterator()</code> 方法，再调用 LinkedList 类的 <code>listIterator(int)</code> 方法，如下图所示。</p><img src="`+t+`"><p>最后返回的是 LinkedList 类的内部私有类 ListItr 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ListIterator</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">E</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">listIterator</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkPositionIndex</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否在有效范围内</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> LinkedList.</span><span style="color:#62E884;">ListItr</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 创建一个新的 ListItr 对象并返回</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ListItr</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ListIterator</span><span style="color:#F6F6F4;">&lt;E&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; lastReturned; </span><span style="color:#7B7F8B;">// 上一个已返回的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;E&gt; next; </span><span style="color:#7B7F8B;">// 下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nextIndex; </span><span style="color:#7B7F8B;">// 下一个节点的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> expectedModCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> modCount; </span><span style="color:#7B7F8B;">// 链表被修改的次数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ListItr</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// assert isPositionIndex(index);</span></span>
<span class="line"><span style="color:#F6F6F4;">        next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> size) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">node</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 如果 index 等于 size，next 为 null，否则返回 node(index)</span></span>
<span class="line"><span style="color:#F6F6F4;">        nextIndex </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> index; </span><span style="color:#7B7F8B;">// 设置 nextIndex 为 index</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> nextIndex </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; </span><span style="color:#7B7F8B;">// 如果下一个节点的索引小于链表的长度，返回 true，否则返回 false</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">checkForComodification</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 检查链表是否已经被修改</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">()) </span><span style="color:#7B7F8B;">// 如果没有下一个节点，抛出 NoSuchElementException 异常</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NoSuchElementException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        lastReturned </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next; </span><span style="color:#7B7F8B;">// 将下一个节点设置为上一个已返回节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> next.next; </span><span style="color:#7B7F8B;">// 将下一个节点设置为当前节点的下一个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        nextIndex</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将下一个节点的索引增加 1</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> lastReturned.item; </span><span style="color:#7B7F8B;">// 返回上一个已返回节点的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListIterator</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">E</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listIterator</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkPositionIndex</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否在有效范围内</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList.</span><span style="color:#6F42C1;">ListItr</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 创建一个新的 ListItr 对象并返回</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListItr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListIterator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; lastReturned; </span><span style="color:#6A737D;">// 上一个已返回的节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> LinkedList.Node&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; next; </span><span style="color:#6A737D;">// 下一个节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nextIndex; </span><span style="color:#6A737D;">// 下一个节点的索引</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expectedModCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> modCount; </span><span style="color:#6A737D;">// 链表被修改的次数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ListItr</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// assert isPositionIndex(index);</span></span>
<span class="line"><span style="color:#24292E;">        next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> size) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">node</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 如果 index 等于 size，next 为 null，否则返回 node(index)</span></span>
<span class="line"><span style="color:#24292E;">        nextIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> index; </span><span style="color:#6A737D;">// 设置 nextIndex 为 index</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nextIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; </span><span style="color:#6A737D;">// 如果下一个节点的索引小于链表的长度，返回 true，否则返回 false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkForComodification</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 检查链表是否已经被修改</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 如果没有下一个节点，抛出 NoSuchElementException 异常</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NoSuchElementException</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        lastReturned </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next; </span><span style="color:#6A737D;">// 将下一个节点设置为上一个已返回节点</span></span>
<span class="line"><span style="color:#24292E;">        next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next.next; </span><span style="color:#6A737D;">// 将下一个节点设置为当前节点的下一个节点</span></span>
<span class="line"><span style="color:#24292E;">        nextIndex</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将下一个节点的索引增加 1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> lastReturned.item; </span><span style="color:#6A737D;">// 返回上一个已返回节点的元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行 ListItr 的构造方法时调用了一次 <code>node(int)</code> 方法，返回第一个节点。在此之后，迭代器就执行 <code>hasNext()</code> 判断有没有下一个，执行 <code>next()</code> 方法下一个节点。</p><p>由此，可以得出这样的结论：<strong>遍历 LinkedList 的时候，千万不要使用 for 循环，要使用迭代器。</strong></p><p>也就是说，for 循环遍历的时候，ArrayList 花费的时间远小于 LinkedList；迭代器遍历的时候，两者性能差不多。</p><h3 id="_06、两者的使用场景" tabindex="-1">06、两者的使用场景 <a class="header-anchor" href="#_06、两者的使用场景" aria-label="Permalink to &quot;06、两者的使用场景&quot;">​</a></h3><p>当需要频繁随机访问元素的时候，例如读取大量数据并进行处理或者需要对数据进行排序或查找的场景，可以使用 ArrayList。例如一个学生管理系统，需要对学生列表进行排序或查找操作，可以使用 ArrayList 存储学生信息，以便快速访问和处理。</p><p>当需要频繁插入和删除元素的时候，例如实现队列或栈，或者需要在中间插入或删除元素的场景，可以使用 LinkedList。例如一个实时聊天系统，需要实现一个消息队列，可以使用 LinkedList 存储消息，以便快速插入和删除消息。</p><p>在一些特殊场景下，可能需要同时支持随机访问和插入/删除操作。例如一个在线游戏系统，需要实现一个玩家列表，需要支持快速查找和遍历玩家，同时也需要支持玩家的加入和离开。在这种情况下，可以使用 LinkedList 和 ArrayList 的组合，例如使用 LinkedList 存储玩家，以便快速插入和删除玩家，同时使用 ArrayList 存储玩家列表，以便快速查找和遍历玩家。</p><p>“好了，三妹，关于 LinkedList 和 ArrayList 的差别，我们就先聊到这，你也不用太去扣细节，直到其中的差别就好了。”</p><p>“好的，二哥。”</p><hr>`,157),y=[r];function F(i,E,d,A,D,C){return n(),a("div",null,y)}const B=s(c,[["render",F]]);export{f as __pageData,B as default};
