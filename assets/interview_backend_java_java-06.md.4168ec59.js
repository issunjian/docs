import{_ as a,o as e,c as o,V as t}from"./chunks/framework.c6d8cbec.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-06.md","filePath":"interview/backend/java/java-06.md"}'),r={name:"interview/backend/java/java-06.md"},s=t('<h3 id="_1、jdk-和-jre-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#1jdk-%E5%92%8C-jre-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、JDK 和 JRE 有什么区别？</a> <a class="header-anchor" href="#_1、jdk-和-jre-有什么区别" aria-label="Permalink to &quot;[1、JDK 和 JRE 有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#1jdk-和-jre-有什么区别)&quot;">​</a></h3><p>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</p><p>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。 具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h3 id="_2、能否使用任何类作为-map-的-key" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#2%E8%83%BD%E5%90%A6%E4%BD%BF%E7%94%A8%E4%BB%BB%E4%BD%95%E7%B1%BB%E4%BD%9C%E4%B8%BA-map-%E7%9A%84-key" target="_blank" rel="noreferrer">2、能否使用任何类作为 Map 的 key？</a> <a class="header-anchor" href="#_2、能否使用任何类作为-map-的-key" aria-label="Permalink to &quot;[2、能否使用任何类作为 Map 的 key？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#2能否使用任何类作为-map-的-key)&quot;">​</a></h3><p>可以使用任何类作为 Map 的 key，然而在使用之前，需要考虑以下几点：</p><p><strong>1、</strong> 如果类重写了 equals() 方法，也应该重写 hashCode() 方法。</p><p><strong>2、</strong> 类的所有实例需要遵循与 equals() 和 hashCode() 相关的规则。</p><p><strong>3、</strong> 如果一个类没有使用 equals()，不应该在 hashCode() 中使用它。</p><p><strong>4、</strong> 用户自定义 Key 类最佳实践是使之为不可变的，这样 hashCode() 值可以被缓存起来，拥有更好的性能。不可变的类也可以确保 hashCode() 和 equals() 在未来不会改变，这样就会解决与可变相关的问题了。</p><h3 id="_3、简述synchronized-和java-util-concurrent-locks-lock的异同" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#3%E7%AE%80%E8%BF%B0synchronized-%E5%92%8Cjavautilconcurrentlockslock%E7%9A%84%E5%BC%82%E5%90%8C" target="_blank" rel="noreferrer">3、简述synchronized 和java.util.concurrent.locks.Lock的异同？</a> <a class="header-anchor" href="#_3、简述synchronized-和java-util-concurrent-locks-lock的异同" aria-label="Permalink to &quot;[3、简述synchronized 和java.util.concurrent.locks.Lock的异同？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#3简述synchronized-和javautilconcurrentlockslock的异同)&quot;">​</a></h3><p>Lock是Java 5以后引入的新的API，和关键字synchronized相比主要相同点：Lock 能完成synchronized所实现的所有功能；主要不同点：Lock有比synchronized更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且最好在finally 块中释放（这是释放外部资源的最好的地方）。</p><h3 id="_4、什么是线程组-为什么在java中不推荐使用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%BB%84%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8java%E4%B8%AD%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">4、什么是线程组，为什么在Java中不推荐使用？</a> <a class="header-anchor" href="#_4、什么是线程组-为什么在java中不推荐使用" aria-label="Permalink to &quot;[4、什么是线程组，为什么在Java中不推荐使用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#4什么是线程组为什么在java中不推荐使用)&quot;">​</a></h3><p>ThreadGroup类，可以把线程归属到某一个线程组中，线程组中可以有线程对象，也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。</p><p>为什么不推荐使用？因为使用有很多的安全隐患吧，没有具体追究，如果需要使用，推荐使用线程池。</p><h3 id="_5、你所知道的web服务器有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#5%E4%BD%A0%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">5、你所知道的web服务器有哪些？</a> <a class="header-anchor" href="#_5、你所知道的web服务器有哪些" aria-label="Permalink to &quot;[5、你所知道的web服务器有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#5你所知道的web服务器有哪些)&quot;">​</a></h3><p><strong>1、</strong> Tomcat</p><p><strong>2、</strong> Jboss</p><p><strong>3、</strong> Weblogic</p><p><strong>4、</strong> Glassfish</p><h3 id="_6、java中如何实现序列化-有什么意义" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#6java%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%89%E4%BB%80%E4%B9%88%E6%84%8F%E4%B9%89" target="_blank" rel="noreferrer">6、Java中如何实现序列化，有什么意义？</a> <a class="header-anchor" href="#_6、java中如何实现序列化-有什么意义" aria-label="Permalink to &quot;[6、Java中如何实现序列化，有什么意义？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#6java中如何实现序列化有什么意义)&quot;">​</a></h3><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。</p><p>要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆（可以参考第29题）。</p><h3 id="_7、单例模式使用注意事项" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#7%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A" target="_blank" rel="noreferrer">7、单例模式使用注意事项：</a> <a class="header-anchor" href="#_7、单例模式使用注意事项" aria-label="Permalink to &quot;[7、单例模式使用注意事项：](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#7单例模式使用注意事项：)&quot;">​</a></h3><p><strong>1、</strong> 使用时不能用反射模式创建单例，否则会实例化一个新的对象</p><p><strong>2、</strong> 使用懒单例模式时注意线程安全问题</p><p><strong>3、</strong> 饿单例模式和懒单例模式构造方法都是私有的，因而是不能被继承的，有些单例模式可以被继承（如登记式模式）</p><h3 id="_8、请解释tomcat的默认端口是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#8%E8%AF%B7%E8%A7%A3%E9%87%8Atomcat%E7%9A%84%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、请解释Tomcat的默认端口是什么?</a> <a class="header-anchor" href="#_8、请解释tomcat的默认端口是什么" aria-label="Permalink to &quot;[8、请解释Tomcat的默认端口是什么?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#8请解释tomcat的默认端口是什么)&quot;">​</a></h3><p>Tomcat的默认端口是8080。在本地机器上初始化Tomcat之后，您可以验证Tomcat是否正在运行URL:<a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a></p><h3 id="_9、创建线程的有哪些方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#9%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">9、创建线程的有哪些方式？</a> <a class="header-anchor" href="#_9、创建线程的有哪些方式" aria-label="Permalink to &quot;[9、创建线程的有哪些方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#9创建线程的有哪些方式)&quot;">​</a></h3><p><strong>1、</strong> 继承Thread类创建线程类</p><p><strong>2、</strong> 通过Runnable接口创建线程类</p><p><strong>3、</strong> 通过Callable和Future创建线程</p><p><strong>4、</strong> 通过线程池创建</p><h3 id="_10、什么是oop" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E4%BC%81%E4%B8%9A%E7%9C%9F%E9%9D%A2%E8%AF%95%E9%A2%98.md#10%E4%BB%80%E4%B9%88%E6%98%AFoop" target="_blank" rel="noreferrer">10、什么是OOP?</a> <a class="header-anchor" href="#_10、什么是oop" aria-label="Permalink to &quot;[10、什么是OOP?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，企业真面试题.md#10什么是oop)&quot;">​</a></h3><p>面向对象编程</p><h3 id="_11、怎么获取-java-程序使用的内存-堆使用的百分比" tabindex="-1">11、怎么获取 Java 程序使用的内存？堆使用的百分比？ <a class="header-anchor" href="#_11、怎么获取-java-程序使用的内存-堆使用的百分比" aria-label="Permalink to &quot;11、怎么获取 Java 程序使用的内存？堆使用的百分比？&quot;">​</a></h3><h3 id="_12、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用" tabindex="-1">12、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？ <a class="header-anchor" href="#_12、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用" aria-label="Permalink to &quot;12、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？&quot;">​</a></h3><h3 id="_13、synchronized和reentrantlock的区别" tabindex="-1">13、synchronized和ReentrantLock的区别 <a class="header-anchor" href="#_13、synchronized和reentrantlock的区别" aria-label="Permalink to &quot;13、synchronized和ReentrantLock的区别&quot;">​</a></h3><h3 id="_14、lock-接口和synchronized-对比同步它有什么优势" tabindex="-1">14、Lock 接口和synchronized 对比同步它有什么优势？ <a class="header-anchor" href="#_14、lock-接口和synchronized-对比同步它有什么优势" aria-label="Permalink to &quot;14、Lock 接口和synchronized 对比同步它有什么优势？&quot;">​</a></h3><h3 id="_15、说说类加载的过程" tabindex="-1">15、说说类加载的过程 <a class="header-anchor" href="#_15、说说类加载的过程" aria-label="Permalink to &quot;15、说说类加载的过程&quot;">​</a></h3><h3 id="_16、接口是什么-为什么要使用接口而不是直接使用具体类" tabindex="-1">16、接口是什么？为什么要使用接口而不是直接使用具体类？ <a class="header-anchor" href="#_16、接口是什么-为什么要使用接口而不是直接使用具体类" aria-label="Permalink to &quot;16、接口是什么？为什么要使用接口而不是直接使用具体类？&quot;">​</a></h3><h3 id="_17、什么是并发容器的实现" tabindex="-1">17、什么是并发容器的实现？ <a class="header-anchor" href="#_17、什么是并发容器的实现" aria-label="Permalink to &quot;17、什么是并发容器的实现？&quot;">​</a></h3><h3 id="_18、switch-是否能作用在byte-上-是否能作用在long-上-是否能作用在string上" tabindex="-1">18、switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？ <a class="header-anchor" href="#_18、switch-是否能作用在byte-上-是否能作用在long-上-是否能作用在string上" aria-label="Permalink to &quot;18、switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？&quot;">​</a></h3><h3 id="_19、java-中的-treemap-是采用什么树实现的-答案" tabindex="-1">19、Java 中的 TreeMap 是采用什么树实现的？(答案) <a class="header-anchor" href="#_19、java-中的-treemap-是采用什么树实现的-答案" aria-label="Permalink to &quot;19、Java 中的 TreeMap 是采用什么树实现的？(答案)&quot;">​</a></h3><h3 id="_20、setstate到底是异步还是同步" tabindex="-1">20、setState到底是异步还是同步? <a class="header-anchor" href="#_20、setstate到底是异步还是同步" aria-label="Permalink to &quot;20、setState到底是异步还是同步?&quot;">​</a></h3><h3 id="_21、阐述final、finally、finalize的区别。" tabindex="-1">21、阐述final、finally、finalize的区别。 <a class="header-anchor" href="#_21、阐述final、finally、finalize的区别。" aria-label="Permalink to &quot;21、阐述final、finally、finalize的区别。&quot;">​</a></h3><h3 id="_22、什么是父类引用指向子类对象" tabindex="-1">22、什么是父类引用指向子类对象？ <a class="header-anchor" href="#_22、什么是父类引用指向子类对象" aria-label="Permalink to &quot;22、什么是父类引用指向子类对象？&quot;">​</a></h3><h3 id="_23、arraylist-和-vector-的区别是什么" tabindex="-1">23、ArrayList 和 Vector 的区别是什么？ <a class="header-anchor" href="#_23、arraylist-和-vector-的区别是什么" aria-label="Permalink to &quot;23、ArrayList 和 Vector 的区别是什么？&quot;">​</a></h3><h3 id="_24、线程之间如何通信及线程之间如何同步" tabindex="-1">24、线程之间如何通信及线程之间如何同步 <a class="header-anchor" href="#_24、线程之间如何通信及线程之间如何同步" aria-label="Permalink to &quot;24、线程之间如何通信及线程之间如何同步&quot;">​</a></h3><h3 id="_25、java中你怎样唤醒一个阻塞的线程" tabindex="-1">25、Java中你怎样唤醒一个阻塞的线程？ <a class="header-anchor" href="#_25、java中你怎样唤醒一个阻塞的线程" aria-label="Permalink to &quot;25、Java中你怎样唤醒一个阻塞的线程？&quot;">​</a></h3><h3 id="_26、你如何确保main-方法所在的线程是java-程序最后结束的线程" tabindex="-1">26、你如何确保main()方法所在的线程是Java 程序最后结束的线程？ <a class="header-anchor" href="#_26、你如何确保main-方法所在的线程是java-程序最后结束的线程" aria-label="Permalink to &quot;26、你如何确保main()方法所在的线程是Java 程序最后结束的线程？&quot;">​</a></h3><h3 id="_27、java-中的-math-round-1-5-等于多少" tabindex="-1">27、java 中的 Math.round(-1.5) 等于多少？ <a class="header-anchor" href="#_27、java-中的-math-round-1-5-等于多少" aria-label="Permalink to &quot;27、java 中的 Math.round(-1.5) 等于多少？&quot;">​</a></h3><h3 id="_28、线程的状态" tabindex="-1">28、线程的状态 <a class="header-anchor" href="#_28、线程的状态" aria-label="Permalink to &quot;28、线程的状态&quot;">​</a></h3><h3 id="_29、futuretask是什么" tabindex="-1">29、FutureTask是什么 <a class="header-anchor" href="#_29、futuretask是什么" aria-label="Permalink to &quot;29、FutureTask是什么&quot;">​</a></h3><h3 id="_30、hashtable-与-hashmap-有什么不同之处" tabindex="-1">30、Hashtable 与 HashMap 有什么不同之处？ <a class="header-anchor" href="#_30、hashtable-与-hashmap-有什么不同之处" aria-label="Permalink to &quot;30、Hashtable 与 HashMap 有什么不同之处？&quot;">​</a></h3><h3 id="_31、thow与thorws区别" tabindex="-1">31、Thow与thorws区别 <a class="header-anchor" href="#_31、thow与thorws区别" aria-label="Permalink to &quot;31、Thow与thorws区别&quot;">​</a></h3><h3 id="_32、java线程具有五中基本状态" tabindex="-1">32、Java线程具有五中基本状态 <a class="header-anchor" href="#_32、java线程具有五中基本状态" aria-label="Permalink to &quot;32、Java线程具有五中基本状态&quot;">​</a></h3><h3 id="_33、构造方法能不能显式调用" tabindex="-1">33、构造方法能不能显式调用？ <a class="header-anchor" href="#_33、构造方法能不能显式调用" aria-label="Permalink to &quot;33、构造方法能不能显式调用？&quot;">​</a></h3><h3 id="_34、哪些是-gc-roots" tabindex="-1">34、哪些是 GC Roots？ <a class="header-anchor" href="#_34、哪些是-gc-roots" aria-label="Permalink to &quot;34、哪些是 GC Roots？&quot;">​</a></h3><h3 id="_35、你知道哪些故障处理工具" tabindex="-1">35、你知道哪些故障处理工具？ <a class="header-anchor" href="#_35、你知道哪些故障处理工具" aria-label="Permalink to &quot;35、你知道哪些故障处理工具？&quot;">​</a></h3><h3 id="_36、java-中怎样将-bytes-转换为-long-类型" tabindex="-1">36、Java 中怎样将 bytes 转换为 long 类型？ <a class="header-anchor" href="#_36、java-中怎样将-bytes-转换为-long-类型" aria-label="Permalink to &quot;36、Java 中怎样将 bytes 转换为 long 类型？&quot;">​</a></h3><h3 id="_37、程序计数器有什么作用" tabindex="-1">37、程序计数器有什么作用？ <a class="header-anchor" href="#_37、程序计数器有什么作用" aria-label="Permalink to &quot;37、程序计数器有什么作用？&quot;">​</a></h3><h3 id="_38、如果一个类中有抽象方法-那么这个一定是抽象类" tabindex="-1">38、如果一个类中有抽象方法，那么这个一定是抽象类？ <a class="header-anchor" href="#_38、如果一个类中有抽象方法-那么这个一定是抽象类" aria-label="Permalink to &quot;38、如果一个类中有抽象方法，那么这个一定是抽象类？&quot;">​</a></h3><h3 id="_39、什么是隐式转换-什么是显式转换" tabindex="-1">39、什么是隐式转换，什么是显式转换 <a class="header-anchor" href="#_39、什么是隐式转换-什么是显式转换" aria-label="Permalink to &quot;39、什么是隐式转换，什么是显式转换&quot;">​</a></h3><h3 id="_40、如何创建守护线程" tabindex="-1">40、如何创建守护线程？ <a class="header-anchor" href="#_40、如何创建守护线程" aria-label="Permalink to &quot;40、如何创建守护线程？&quot;">​</a></h3>',65),n=[s];function h(l,i,E,c,d,A){return e(),o("div",null,n)}const B=a(r,[["render",h]]);export{b as __pageData,B as default};
