import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring/分布式事务.md","filePath":"backend/spring/分布式事务.md"}'),p={name:"backend/spring/分布式事务.md"},o=l(`<h2 id="分布式事务" tabindex="-1">分布式事务 <a class="header-anchor" href="#分布式事务" aria-label="Permalink to &quot;分布式事务&quot;">​</a></h2><h2 id="_0-学习目标" tabindex="-1">0.学习目标 <a class="header-anchor" href="#_0-学习目标" aria-label="Permalink to &quot;0.学习目标&quot;">​</a></h2><h2 id="_1-分布式事务问题" tabindex="-1">1.分布式事务问题 <a class="header-anchor" href="#_1-分布式事务问题" aria-label="Permalink to &quot;1.分布式事务问题&quot;">​</a></h2><h2 id="_1-1-本地事务" tabindex="-1">1.1.本地事务 <a class="header-anchor" href="#_1-1-本地事务" aria-label="Permalink to &quot;1.1.本地事务&quot;">​</a></h2><p>本地事务，也就是传统的<strong>单机事务</strong>。在传统数据库事务中，必须要满足四个原则：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724165045186.png" alt="image-20210724165045186"></p><p>image-20210724165045186</p><h2 id="_1-2-分布式事务" tabindex="-1">1.2.分布式事务 <a class="header-anchor" href="#_1-2-分布式事务" aria-label="Permalink to &quot;1.2.分布式事务&quot;">​</a></h2><p><strong>分布式事务</strong>，就是指不是在单个服务或单个数据库架构下，产生的事务，例如：</p><ul><li>跨数据源的分布式事务</li><li>跨服务的分布式事务</li><li>综合情况</li></ul><p>在数据库水平拆分、服务垂直拆分之后，一个业务操作通常要跨多个数据库、服务才能完成。例如电商行业中比较常见的下单付款案例，包括下面几个行为：</p><ul><li>创建新订单</li><li>扣减商品库存</li><li>从用户账户余额扣除金额</li></ul><p>完成上面的操作需要访问三个不同的微服务和三个不同的数据库。</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724165338958.png" alt="image-20210724165338958"></p><p>image-20210724165338958</p><p>订单的创建、库存的扣减、账户扣款在每一个服务和数据库内是一个本地事务，可以保证ACID原则。</p><p>但是当我们把三件事情看做一个&quot;业务&quot;，要满足保证“业务”的原子性，要么所有操作全部成功，要么全部失败，不允许出现部分成功部分失败的现象，这就是<strong>分布式系统下的事务</strong>了。</p><p>此时ACID难以满足，这是分布式事务要解决的问题</p><h2 id="_1-3-演示分布式事务问题" tabindex="-1">1.3.演示分布式事务问题 <a class="header-anchor" href="#_1-3-演示分布式事务问题" aria-label="Permalink to &quot;1.3.演示分布式事务问题&quot;">​</a></h2><p>我们通过一个案例来演示分布式事务的问题：</p><p>1）<strong>创建数据库，名为seata_demo，然后导入课前资料提供的SQL文件：</strong></p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724165634571.png" alt="image-20210724165634571"></p><p>image-20210724165634571</p><p>2）<strong>导入课前资料提供的微服务：</strong></p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724165709994.png" alt="image-20210724165709994"></p><p>image-20210724165709994</p><p>微服务结构如下：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724165729273.png" alt="image-20210724165729273"></p><p>image-20210724165729273</p><p>其中：</p><p>seata-demo：父工程，负责管理项目依赖</p><ul><li>account-service：账户服务，负责管理用户的资金账户。提供扣减余额的接口</li><li>storage-service：库存服务，负责管理商品库存。提供扣减库存的接口</li><li>order-service：订单服务，负责管理订单。创建订单时，需要调用account-service和storage-service</li></ul><p><strong>3）启动nacos、所有微服务</strong></p><p><strong>4）测试下单功能，发出Post请求：</strong></p><p>请求如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">curl</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--location</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--request</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">POST</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">http://localhost:8082/order?userId=user202103032042012&amp;commodityCode=100202003032041&amp;count=20&amp;money=200</span><span style="color:#DEE492;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--location</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--request</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost:8082/order?userId=user202103032042012&amp;commodityCode=100202003032041&amp;count=20&amp;money=200&#39;</span></span></code></pre></div><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724170113404.png" alt="image-20210724170113404"></p><p>image-20210724170113404</p><p>测试发现，当库存不足时，如果余额已经扣减，并不会回滚，出现了分布式事务问题。</p><h2 id="_2-理论基础" tabindex="-1">2.理论基础 <a class="header-anchor" href="#_2-理论基础" aria-label="Permalink to &quot;2.理论基础&quot;">​</a></h2><p>解决分布式事务问题，需要一些分布式系统的基础知识作为理论指导。</p><h2 id="_2-1-cap定理" tabindex="-1">2.1.CAP定理 <a class="header-anchor" href="#_2-1-cap定理" aria-label="Permalink to &quot;2.1.CAP定理&quot;">​</a></h2><p>1998年，加州大学的计算机科学家 Eric Brewer 提出，分布式系统有三个指标。</p><blockquote><ul><li>Consistency（一致性）</li><li>Availability（可用性）</li><li>Partition tolerance （分区容错性）</li></ul></blockquote><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724170517944.png" alt="image-20210724170517944"></p><p>image-20210724170517944</p><p>它们的第一个字母分别是 C、A、P。</p><p>Eric Brewer 说，这三个指标不可能同时做到。这个结论就叫做 CAP 定理。</p><h3 id="_2-1-1-一致性" tabindex="-1">2.1.1.一致性 <a class="header-anchor" href="#_2-1-1-一致性" aria-label="Permalink to &quot;2.1.1.一致性&quot;">​</a></h3><p>Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。</p><p>比如现在包含两个节点，其中的初始数据是一致的：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724170704694.png" alt="image-20210724170704694"></p><p>image-20210724170704694</p><p>当我们修改其中一个节点的数据时，两者的数据产生了差异：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724170735847.png" alt="image-20210724170735847"></p><p>image-20210724170735847</p><p>要想保住一致性，就必须实现node01 到 node02的数据 同步：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724170834855.png" alt="image-20210724170834855"></p><p>image-20210724170834855</p><h3 id="_2-1-2-可用性" tabindex="-1">2.1.2.可用性 <a class="header-anchor" href="#_2-1-2-可用性" aria-label="Permalink to &quot;2.1.2.可用性&quot;">​</a></h3><p>Availability （可用性）：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝。</p><p>如图，有三个节点的集群，访问任何一个都可以及时得到响应：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724170932072.png" alt="image-20210724170932072"></p><p>image-20210724170932072</p><p>当有部分节点因为网络故障或其它原因无法访问时，代表节点不可用：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724171007516.png" alt="image-20210724171007516"></p><p>image-20210724171007516</p><h3 id="_2-1-3-分区容错" tabindex="-1">2.1.3.分区容错 <a class="header-anchor" href="#_2-1-3-分区容错" aria-label="Permalink to &quot;2.1.3.分区容错&quot;">​</a></h3><p><strong>Partition（分区）</strong>：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724171041210.png" alt="image-20210724171041210"></p><p>image-20210724171041210</p><p><strong>Tolerance（容错）</strong>：在集群出现分区时，整个系统也要持续对外提供服务</p><h3 id="_2-1-4-矛盾" tabindex="-1">2.1.4.矛盾 <a class="header-anchor" href="#_2-1-4-矛盾" aria-label="Permalink to &quot;2.1.4.矛盾&quot;">​</a></h3><p>在分布式系统中，系统间的网络不能100%保证健康，一定会有故障的时候，而服务有必须对外保证服务。因此Partition Tolerance不可避免。</p><p>当节点接收到新的数据变更时，就会出现问题了：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724171546472.png" alt="image-20210724171546472"></p><p>image-20210724171546472</p><p>如果此时要保证<strong>一致性</strong>，就必须等待网络恢复，完成数据同步后，整个集群才对外提供服务，服务处于阻塞状态，不可用。</p><p>如果此时要保证<strong>可用性</strong>，就不能等待网络恢复，那node01、node02与node03之间就会出现数据不一致。</p><p>也就是说，在P一定会出现的情况下，A和C之间只能实现一个。</p><h2 id="_2-2-base理论" tabindex="-1">2.2.BASE理论 <a class="header-anchor" href="#_2-2-base理论" aria-label="Permalink to &quot;2.2.BASE理论&quot;">​</a></h2><p>BASE理论是对CAP的一种解决思路，包含三个思想：</p><ul><li><strong>Basically Available</strong> <strong>（基本可用）</strong>：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li>**Soft State（软状态）：**在一定时间内，允许出现中间状态，比如临时的不一致状态。</li><li><strong>Eventually Consistent（最终一致性）</strong>：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li></ul><h2 id="_2-3-解决分布式事务的思路" tabindex="-1">2.3.解决分布式事务的思路 <a class="header-anchor" href="#_2-3-解决分布式事务的思路" aria-label="Permalink to &quot;2.3.解决分布式事务的思路&quot;">​</a></h2><p>分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论，有两种解决思路：</p><ul><li><p>AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。</p></li><li><p>CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态。</p></li></ul><p>但不管是哪一种模式，都需要在子系统事务之间互相通讯，协调事务状态，也就是需要一个<strong>事务协调者(TC)</strong>：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724172123567.png" alt="image-20210724172123567"></p><p>image-20210724172123567</p><p>这里的子系统事务，称为<strong>分支事务</strong>；有关联的各个分支事务在一起称为<strong>全局事务</strong>。</p><h2 id="_3-初识seata" tabindex="-1">3.初识Seata <a class="header-anchor" href="#_3-初识seata" aria-label="Permalink to &quot;3.初识Seata&quot;">​</a></h2><p>Seata是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p><p>官网地址：<a href="http://seata.io/%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84%E6%96%87%E6%A1%A3%E3%80%81%E6%92%AD%E5%AE%A2%E4%B8%AD%E6%8F%90%E4%BE%9B%E4%BA%86%E5%A4%A7%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E3%80%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%82" target="_blank" rel="noreferrer">http://seata.io/，其中的文档、播客中提供了大量的使用说明、源码分析。open in new window</a></p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724172225817.png" alt="image-20210724172225817"></p><p>image-20210724172225817</p><h2 id="_3-1-seata的架构" tabindex="-1">3.1.Seata的架构 <a class="header-anchor" href="#_3-1-seata的架构" aria-label="Permalink to &quot;3.1.Seata的架构&quot;">​</a></h2><p>Seata事务管理中有三个重要的角色：</p><ul><li><p><strong>TC (Transaction Coordinator) -</strong> **事务协调者：**维护全局和分支事务的状态，协调全局事务提交或回滚。</p></li><li><p><strong>TM (Transaction Manager) -</strong> **事务管理器：**定义全局事务的范围、开始全局事务、提交或回滚全局事务。</p></li><li><p><strong>RM (Resource Manager) -</strong> **资源管理器：**管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p></li></ul><p>整体的架构如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724172326452.png" alt="image-20210724172326452"></p><p>image-20210724172326452</p><p>Seata基于上述架构提供了四种不同的分布式事务解决方案：</p><ul><li>XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</li><li>TCC模式：最终一致的分阶段事务模式，有业务侵入</li><li>AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式</li><li>SAGA模式：长事务模式，有业务侵入</li></ul><p>无论哪种方案，都离不开TC，也就是事务的协调者。</p><h2 id="_3-2-部署tc服务" tabindex="-1">3.2.部署TC服务 <a class="header-anchor" href="#_3-2-部署tc服务" aria-label="Permalink to &quot;3.2.部署TC服务&quot;">​</a></h2><p>参考课前资料提供的文档《 <a href="http://xn--seata-vn9hk12f0m1b31qe33bern.md/" target="_blank" rel="noreferrer">seata的部署和集成.mdopen in new window</a> 》：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724172549013.png" alt="image-20210724172549013"></p><p>image-20210724172549013</p><h2 id="_3-3-微服务集成seata" tabindex="-1">3.3.微服务集成Seata <a class="header-anchor" href="#_3-3-微服务集成seata" aria-label="Permalink to &quot;3.3.微服务集成Seata&quot;">​</a></h2><p>我们以order-service为例来演示。</p><h3 id="_3-3-1-引入依赖" tabindex="-1">3.3.1.引入依赖 <a class="header-anchor" href="#_3-3-1-引入依赖" aria-label="Permalink to &quot;3.3.1.引入依赖&quot;">​</a></h3><p>首先，在order-service中引入依赖：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--seata--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;spring-cloud-starter-alibaba-seata&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">exclusions</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--版本较低，1.3.0，因此排除--&gt;</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">exclusion</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;seata-spring-boot-starter&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;io.seata&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;/</span><span style="color:#F286C4;">exclusion</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">exclusions</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;io.seata&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;seata-spring-boot-starter&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;\${seata.version}&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--seata--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;com.alibaba.cloud&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-cloud-starter-alibaba-seata&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--版本较低，1.3.0，因此排除--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;seata-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.seata&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.seata&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;seata-spring-boot-starter&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--seata starter 采用1.4.2版本--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;\${seata.version}&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_3-3-2-配置tc地址" tabindex="-1">3.3.2.配置TC地址 <a class="header-anchor" href="#_3-3-2-配置tc地址" aria-label="Permalink to &quot;3.3.2.配置TC地址&quot;">​</a></h3><p>在order-service中的application.yml中，配置TC服务信息，通过注册中心nacos，结合服务名称获取TC地址：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">seata</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">registry</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">type</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nacos</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># 注册中心类型 nacos</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">nacos</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">server-addr</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">127.0.0.1:8848</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># nacos地址</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">namespace</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># namespace，默认为空</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">group</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">DEFAULT_GROUP</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># 分组，默认是DEFAULT_GROUP</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">application</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">seata-tc-server</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># seata服务名称</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">username</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nacos</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">password</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nacos</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">tx-service-group</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">seata-demo</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># 事务组名称</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">service</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;">vgroup-mapping</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># 事务组与cluster的映射关系</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;">seata-demo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">SH</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">seata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">registry</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># TC服务注册中心的配置，微服务根据这些信息去注册中心获取tc服务地址</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 注册中心类型 nacos</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">nacos</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">server-addr</span><span style="color:#24292E;">: </span><span style="color:#032F62;">127.0.0.1:8848</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># nacos地址</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">namespace</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># namespace，默认为空</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">group</span><span style="color:#24292E;">: </span><span style="color:#032F62;">DEFAULT_GROUP</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 分组，默认是DEFAULT_GROUP</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">application</span><span style="color:#24292E;">: </span><span style="color:#032F62;">seata-tc-server</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># seata服务名称</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">username</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#032F62;">nacos</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">tx-service-group</span><span style="color:#24292E;">: </span><span style="color:#032F62;">seata-demo</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 事务组名称</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">service</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">vgroup-mapping</span><span style="color:#24292E;">: </span><span style="color:#6A737D;"># 事务组与cluster的映射关系</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">seata-demo</span><span style="color:#24292E;">: </span><span style="color:#032F62;">SH</span></span></code></pre></div><p>微服务如何根据这些配置寻找TC的地址呢？</p><p>我们知道注册到Nacos中的微服务，确定一个具体实例需要四个信息：</p><ul><li>namespace：命名空间</li><li>group：分组</li><li>application：服务名</li><li>cluster：集群名</li></ul><p>以上四个信息，在刚才的yaml文件中都能找到：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724173654258.png" alt="image-20210724173654258"></p><p>image-20210724173654258</p><p>namespace为空，就是默认的public</p><p>结合起来，TC服务的信息就是：public@DEFAULT_GROUP@seata-tc-server@SH，这样就能确定TC服务集群了。然后就可以去Nacos拉取对应的实例信息了。</p><h3 id="_3-3-3-其它服务" tabindex="-1">3.3.3.其它服务 <a class="header-anchor" href="#_3-3-3-其它服务" aria-label="Permalink to &quot;3.3.3.其它服务&quot;">​</a></h3><p>其它两个微服务也都参考order-service的步骤来做，完全一样。</p><h2 id="_4-动手实践" tabindex="-1">4.动手实践 <a class="header-anchor" href="#_4-动手实践" aria-label="Permalink to &quot;4.动手实践&quot;">​</a></h2><p>下面我们就一起学习下Seata中的四种不同的事务模式。</p><h2 id="_4-1-xa模式" tabindex="-1">4.1.XA模式 <a class="header-anchor" href="#_4-1-xa模式" aria-label="Permalink to &quot;4.1.XA模式&quot;">​</a></h2><p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准，XA 规范 描述了全局的TM与局部的RM之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p><h3 id="_4-1-1-两阶段提交" tabindex="-1">4.1.1.两阶段提交 <a class="header-anchor" href="#_4-1-1-两阶段提交" aria-label="Permalink to &quot;4.1.1.两阶段提交&quot;">​</a></h3><p>XA是规范，目前主流数据库都实现了这种规范，实现的原理都是基于两阶段提交。</p><p>正常情况：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724174102768.png" alt="image-20210724174102768"></p><p>image-20210724174102768</p><p>异常情况：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724174234987.png" alt="image-20210724174234987"></p><p>image-20210724174234987</p><p>一阶段：</p><ul><li>事务协调者通知每个事物参与者执行本地事务</li><li>本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁</li></ul><p>二阶段：</p><ul><li>事务协调者基于一阶段的报告来判断下一步操作 <ul><li>如果一阶段都成功，则通知所有事务参与者，提交事务</li><li>如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务</li></ul></li></ul><h3 id="_4-1-2-seata的xa模型" tabindex="-1">4.1.2.Seata的XA模型 <a class="header-anchor" href="#_4-1-2-seata的xa模型" aria-label="Permalink to &quot;4.1.2.Seata的XA模型&quot;">​</a></h3><p>Seata对原始的XA模式做了简单的封装和改造，以适应自己的事务模型，基本架构如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724174424070.png" alt="image-20210724174424070"></p><p>image-20210724174424070</p><p>RM一阶段的工作：</p><p>① 注册分支事务到TC</p><p>② 执行分支业务sql但不提交</p><p>③ 报告执行状态到TC</p><p>TC二阶段的工作：</p><ul><li><p>TC检测各分支事务执行状态</p><p>a.如果都成功，通知所有RM提交事务</p><p>b.如果有失败，通知所有RM回滚事务</p></li></ul><p>RM二阶段的工作：</p><ul><li>接收TC指令，提交或回滚事务</li></ul><h3 id="_4-1-3-优缺点" tabindex="-1">4.1.3.优缺点 <a class="header-anchor" href="#_4-1-3-优缺点" aria-label="Permalink to &quot;4.1.3.优缺点&quot;">​</a></h3><p>XA模式的优点是什么？</p><ul><li>事务的强一致性，满足ACID原则。</li><li>常用数据库都支持，实现简单，并且没有代码侵入</li></ul><p>XA模式的缺点是什么？</p><ul><li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li><li>依赖关系型数据库实现事务</li></ul><h3 id="_4-1-4-实现xa模式" tabindex="-1">4.1.4.实现XA模式 <a class="header-anchor" href="#_4-1-4-实现xa模式" aria-label="Permalink to &quot;4.1.4.实现XA模式&quot;">​</a></h3><p>Seata的starter已经完成了XA模式的自动装配，实现非常简单，步骤如下：</p><p>1）修改application.yml文件（每个参与事务的微服务），开启XA模式：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">seata</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">data-source-proxy-mode</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">XA</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">seata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">data-source-proxy-mode</span><span style="color:#24292E;">: </span><span style="color:#032F62;">XA</span></span></code></pre></div><p>2）给发起全局事务的入口方法添加@GlobalTransactional注解:</p><p>本例中是OrderServiceImpl中的create方法.</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724174859556.png" alt="image-20210724174859556"></p><p>image-20210724174859556</p><p>3）重启服务并测试</p><p>重启order-service，再次测试，发现无论怎样，三个微服务都能成功回滚。</p><h2 id="_4-2-at模式" tabindex="-1">4.2.AT模式 <a class="header-anchor" href="#_4-2-at模式" aria-label="Permalink to &quot;4.2.AT模式&quot;">​</a></h2><p>AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。</p><h3 id="_4-2-1-seata的at模型" tabindex="-1">4.2.1.Seata的AT模型 <a class="header-anchor" href="#_4-2-1-seata的at模型" aria-label="Permalink to &quot;4.2.1.Seata的AT模型&quot;">​</a></h3><p>基本流程图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724175327511.png" alt="image-20210724175327511"></p><p>image-20210724175327511</p><p>阶段一RM的工作：</p><ul><li>注册分支事务</li><li>记录undo-log（数据快照）</li><li>执行业务sql并提交</li><li>报告事务状态</li></ul><p>阶段二提交时RM的工作：</p><ul><li>删除undo-log即可</li></ul><p>阶段二回滚时RM的工作：</p><ul><li>根据undo-log恢复数据到更新前</li></ul><h3 id="_4-2-2-流程梳理" tabindex="-1">4.2.2.流程梳理 <a class="header-anchor" href="#_4-2-2-流程梳理" aria-label="Permalink to &quot;4.2.2.流程梳理&quot;">​</a></h3><p>我们用一个真实的业务来梳理下AT模式的原理。</p><p>比如，现在又一个数据库表，记录用户余额：</p><table><thead><tr><th><strong>id</strong></th><th><strong>money</strong></th></tr></thead><tbody><tr><td>1</td><td>100</td></tr></tbody></table><p>其中一个分支业务要执行的SQL为：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">update</span><span style="color:#F6F6F4;"> tb_account </span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">money</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">money</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">where</span><span style="color:#F6F6F4;"> id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">update</span><span style="color:#24292E;"> tb_account </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">money</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">money</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>AT模式下，当前分支事务执行流程如下：</p><p>一阶段：</p><p>1）TM发起并注册全局事务到TC</p><p>2）TM调用分支事务</p><p>3）分支事务准备执行业务SQL</p><p>4）RM拦截业务SQL，根据where条件查询原始数据，形成快照。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">id</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">money</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;money&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>5）RM执行业务SQL，提交本地事务，释放数据库锁。此时 <code>money = 90</code></p><p>6）RM报告本地事务状态给TC</p><p>二阶段：</p><p>1）TM通知TC事务结束</p><p>2）TC检查分支事务状态</p><p>a）如果都成功，则立即删除快照</p><p>b）如果有分支事务失败，需要回滚。读取快照数据（<code>{&quot;id&quot;: 1, &quot;money&quot;: 100}</code>），将快照恢复到数据库。此时数据库再次恢复为100</p><p>流程图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724180722921.png" alt="image-20210724180722921"></p><p>image-20210724180722921</p><h3 id="_4-2-3-at与xa的区别" tabindex="-1">4.2.3.AT与XA的区别 <a class="header-anchor" href="#_4-2-3-at与xa的区别" aria-label="Permalink to &quot;4.2.3.AT与XA的区别&quot;">​</a></h3><p>简述AT模式与XA模式最大的区别是什么？</p><ul><li>XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。</li><li>XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。</li><li>XA模式强一致；AT模式最终一致</li></ul><h3 id="_4-2-4-脏写问题" tabindex="-1">4.2.4.脏写问题 <a class="header-anchor" href="#_4-2-4-脏写问题" aria-label="Permalink to &quot;4.2.4.脏写问题&quot;">​</a></h3><p>在多线程并发访问AT模式的分布式事务时，有可能出现脏写问题，如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724181541234.png" alt="image-20210724181541234"></p><p>image-20210724181541234</p><p>解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724181843029.png" alt="image-20210724181843029"></p><p>image-20210724181843029</p><h3 id="_4-2-5-优缺点" tabindex="-1">4.2.5.优缺点 <a class="header-anchor" href="#_4-2-5-优缺点" aria-label="Permalink to &quot;4.2.5.优缺点&quot;">​</a></h3><p>AT模式的优点：</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li><li>利用全局锁实现读写隔离</li><li>没有代码侵入，框架自动完成回滚和提交</li></ul><p>AT模式的缺点：</p><ul><li>两阶段之间属于软状态，属于最终一致</li><li>框架的快照功能会影响性能，但比XA模式要好很多</li></ul><h3 id="_4-2-6-实现at模式" tabindex="-1">4.2.6.实现AT模式 <a class="header-anchor" href="#_4-2-6-实现at模式" aria-label="Permalink to &quot;4.2.6.实现AT模式&quot;">​</a></h3><p>AT模式中的快照生成、回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p><p>只不过，AT模式需要一个表来记录全局锁、另一张表来记录数据快照undo_log。</p><p>1）导入数据库表，记录全局锁</p><p>导入课前资料提供的Sql文件：seata-at.sql，其中lock_table导入到TC服务关联的数据库，undo_log表导入到微服务关联的数据库：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724182217272.png" alt="image-20210724182217272"></p><p>image-20210724182217272</p><p>2）修改application.yml文件，将事务模式修改为AT模式即可：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">seata</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">data-source-proxy-mode</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">AT</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;"># 默认就是AT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">seata</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">data-source-proxy-mode</span><span style="color:#24292E;">: </span><span style="color:#032F62;">AT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 默认就是AT</span></span></code></pre></div><p>3）重启服务并测试</p><h2 id="_4-3-tcc模式" tabindex="-1">4.3.TCC模式 <a class="header-anchor" href="#_4-3-tcc模式" aria-label="Permalink to &quot;4.3.TCC模式&quot;">​</a></h2><p>TCC模式与AT模式非常相似，每阶段都是独立事务，不同的是TCC通过人工编码来实现数据恢复。需要实现三个方法：</p><ul><li><p>Try：资源的检测和预留；</p></li><li><p>Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。</p></li><li><p>Cancel：预留资源释放，可以理解为try的反向操作。</p></li></ul><h3 id="_4-3-1-流程分析" tabindex="-1">4.3.1.流程分析 <a class="header-anchor" href="#_4-3-1-流程分析" aria-label="Permalink to &quot;4.3.1.流程分析&quot;">​</a></h3><p>举例，一个扣减用户余额的业务。假设账户A原来余额是100，需要余额扣减30元。</p><ul><li><strong>阶段一（ Try ）</strong>：检查余额是否充足，如果充足则冻结金额增加30元，可用余额扣除30</li></ul><p>初识余额：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724182424907.png" alt="image-20210724182424907"></p><p>image-20210724182424907</p><p>余额充足，可以冻结：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724182457951.png" alt="image-20210724182457951"></p><p>image-20210724182457951</p><p>此时，总金额 = 冻结金额 + 可用金额，数量依然是100不变。事务直接提交无需等待其它事务。</p><ul><li><strong>阶段二（Confirm)</strong>：假如要提交（Confirm），则冻结金额扣减30</li></ul><p>确认可以提交，不过之前可用金额已经扣减过了，这里只要清除冻结金额就好了：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724182706011.png" alt="image-20210724182706011"></p><p>image-20210724182706011</p><p>此时，总金额 = 冻结金额 + 可用金额 = 0 + 70 = 70元</p><ul><li><strong>阶段二(Canncel)</strong>：如果要回滚（Cancel），则冻结金额扣减30，可用余额增加30</li></ul><p>需要回滚，那么就要释放冻结金额，恢复可用金额：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724182810734.png" alt="image-20210724182810734"></p><p>image-20210724182810734</p><h3 id="_4-3-2-seata的tcc模型" tabindex="-1">4.3.2.Seata的TCC模型 <a class="header-anchor" href="#_4-3-2-seata的tcc模型" aria-label="Permalink to &quot;4.3.2.Seata的TCC模型&quot;">​</a></h3><p>Seata中的TCC模型依然延续之前的事务架构，如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724182937713.png" alt="image-20210724182937713"></p><p>image-20210724182937713</p><h3 id="_4-3-3-优缺点" tabindex="-1">4.3.3.优缺点 <a class="header-anchor" href="#_4-3-3-优缺点" aria-label="Permalink to &quot;4.3.3.优缺点&quot;">​</a></h3><p>TCC模式的每个阶段是做什么的？</p><ul><li>Try：资源检查和预留</li><li>Confirm：业务执行和提交</li><li>Cancel：预留资源的释放</li></ul><p>TCC的优点是什么？</p><ul><li>一阶段完成直接提交事务，释放数据库资源，性能好</li><li>相比AT模型，无需生成快照，无需使用全局锁，性能最强</li><li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库</li></ul><p>TCC的缺点是什么？</p><ul><li>有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦</li><li>软状态，事务是最终一致</li><li>需要考虑Confirm和Cancel的失败情况，做好幂等处理</li></ul><h3 id="_4-3-4-事务悬挂和空回滚" tabindex="-1">4.3.4.事务悬挂和空回滚 <a class="header-anchor" href="#_4-3-4-事务悬挂和空回滚" aria-label="Permalink to &quot;4.3.4.事务悬挂和空回滚&quot;">​</a></h3><h4 id="_1-空回滚" tabindex="-1">1）空回滚 <a class="header-anchor" href="#_1-空回滚" aria-label="Permalink to &quot;1）空回滚&quot;">​</a></h4><p>当某分支事务的try阶段<strong>阻塞</strong>时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是<strong>空回滚</strong>。</p><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724183426891.png" alt="image-20210724183426891"></p><p>image-20210724183426891</p><p>执行cancel操作时，应当判断try是否已经执行，如果尚未执行，则应该空回滚。</p><h4 id="_2-业务悬挂" tabindex="-1">2）业务悬挂 <a class="header-anchor" href="#_2-业务悬挂" aria-label="Permalink to &quot;2）业务悬挂&quot;">​</a></h4><p>对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是<strong>业务悬挂</strong>。</p><p>执行try操作时，应当判断cancel是否已经执行过了，如果已经执行，应当阻止空回滚后的try操作，避免悬挂</p><h3 id="_4-3-5-实现tcc模式" tabindex="-1">4.3.5.实现TCC模式 <a class="header-anchor" href="#_4-3-5-实现tcc模式" aria-label="Permalink to &quot;4.3.5.实现TCC模式&quot;">​</a></h3><p>解决空回滚和业务悬挂问题，必须要记录当前事务状态，是在try、还是cancel？</p><h4 id="_1-思路分析" tabindex="-1">1）思路分析 <a class="header-anchor" href="#_1-思路分析" aria-label="Permalink to &quot;1）思路分析&quot;">​</a></h4><p>这里我们定义一张表：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">CREATE</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">TABLE</span><span style="color:#F6F6F4;"> \`</span><span style="color:#62E884;">account_freeze_tbl</span><span style="color:#F6F6F4;">\` (</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">\`</span><span style="color:#E7EE98;">xid</span><span style="color:#DEE492;">\`</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">varchar</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">NOT NULL</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">\`</span><span style="color:#E7EE98;">user_id</span><span style="color:#DEE492;">\`</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">varchar</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">255</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">DEFAULT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">NULL</span><span style="color:#F6F6F4;"> COMMENT </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">用户id</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">\`</span><span style="color:#E7EE98;">freeze_money</span><span style="color:#DEE492;">\`</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">int</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">) unsigned </span><span style="color:#F286C4;">DEFAULT</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> COMMENT </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">冻结金额</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">\`</span><span style="color:#E7EE98;">state</span><span style="color:#DEE492;">\`</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">int</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">DEFAULT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">NULL</span><span style="color:#F6F6F4;"> COMMENT </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">事务状态，0:try，1:confirm，2:cancel</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">PRIMARY KEY</span><span style="color:#F6F6F4;"> (</span><span style="color:#DEE492;">\`</span><span style="color:#E7EE98;">xid</span><span style="color:#DEE492;">\`</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">USING</span><span style="color:#F6F6F4;"> BTREE</span></span>
<span class="line"><span style="color:#F6F6F4;">) ENGINE</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">InnoDB </span><span style="color:#F286C4;">DEFAULT</span><span style="color:#F6F6F4;"> CHARSET</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">utf8 ROW_FORMAT</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">COMPACT;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">CREATE</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#24292E;"> \`</span><span style="color:#6F42C1;">account_freeze_tbl</span><span style="color:#24292E;">\` (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`xid\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">128</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">NOT NULL</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`user_id\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">varchar</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">255</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NULL</span><span style="color:#24292E;"> COMMENT </span><span style="color:#032F62;">&#39;用户id&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`freeze_money\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">) unsigned </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;"> COMMENT </span><span style="color:#032F62;">&#39;冻结金额&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`state\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">NULL</span><span style="color:#24292E;"> COMMENT </span><span style="color:#032F62;">&#39;事务状态，0:try，1:confirm，2:cancel&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">PRIMARY KEY</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">\`xid\`</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">USING</span><span style="color:#24292E;"> BTREE</span></span>
<span class="line"><span style="color:#24292E;">) ENGINE</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">InnoDB </span><span style="color:#D73A49;">DEFAULT</span><span style="color:#24292E;"> CHARSET</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">utf8 ROW_FORMAT</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">COMPACT;</span></span></code></pre></div><p>其中：</p><ul><li>xid：是全局事务id</li><li>freeze_money：用来记录用户冻结金额</li><li>state：用来记录事务状态</li></ul><p>那此时，我们的业务开怎么做呢？</p><ul><li>Try业务： <ul><li>记录冻结金额和事务状态到account_freeze表</li><li>扣减account表可用金额</li></ul></li><li>Confirm业务 <ul><li>根据xid删除account_freeze表的冻结记录</li></ul></li><li>Cancel业务 <ul><li>修改account_freeze表，冻结金额为0，state为2</li><li>修改account表，恢复可用金额</li></ul></li><li>如何判断是否空回滚？ <ul><li>cancel业务中，根据xid查询account_freeze，如果为null则说明try还没做，需要空回滚</li></ul></li><li>如何避免业务悬挂？ <ul><li>try业务中，根据xid查询account_freeze ，如果已经存在则证明Cancel已经执行，拒绝执行try业务</li></ul></li></ul><p>接下来，我们改造account-service，利用TCC实现余额扣减功能。</p><h4 id="_2-声明tcc接口" tabindex="-1">2）声明TCC接口 <a class="header-anchor" href="#_2-声明tcc接口" aria-label="Permalink to &quot;2）声明TCC接口&quot;">​</a></h4><p>TCC的Try、Confirm、Cancel方法都需要在接口中基于注解来声明，</p><p>我们在account-service项目中的<code>cn.itcast.account.service</code>包中新建一个接口，声明TCC三个接口：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">cn.itcast.account.service</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.rm.tcc.api.BusinessActionContext;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.rm.tcc.api.BusinessActionContextParameter;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.rm.tcc.api.LocalTCC;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.rm.tcc.api.TwoPhaseBusinessAction;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">LocalTCC</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AccountTCCService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">TwoPhaseBusinessAction</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">name</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">deduct</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">commitMethod</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">confirm</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">rollbackMethod</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cancel</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deduct</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContextParameter</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">paramName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">userId</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                @</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContextParameter</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">paramName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">money</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">money</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">confirm</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cancel</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> cn.itcast.account.service;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.rm.tcc.api.BusinessActionContext;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.rm.tcc.api.BusinessActionContextParameter;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.rm.tcc.api.LocalTCC;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.rm.tcc.api.TwoPhaseBusinessAction;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">LocalTCC</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountTCCService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TwoPhaseBusinessAction</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;deduct&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">commitMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;confirm&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">rollbackMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;cancel&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deduct</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">BusinessActionContextParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">paramName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;userId&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">BusinessActionContextParameter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">paramName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;money&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">money</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">confirm</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-编写实现类" tabindex="-1">3）编写实现类 <a class="header-anchor" href="#_3-编写实现类" aria-label="Permalink to &quot;3）编写实现类&quot;">​</a></h4><p>在account-service服务中的<code>cn.itcast.account.service.impl</code>包下新建一个类，实现TCC业务：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">cn.itcast.account.service.impl</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.entity.AccountFreeze;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.mapper.AccountFreezeMapper;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.mapper.AccountMapper;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.service.AccountTCCService;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.core.context.RootContext;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.rm.tcc.api.BusinessActionContext;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.stereotype.Service;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.transaction.annotation.Transactional;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Slf4j</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AccountTCCServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AccountTCCService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AccountMapper</span><span style="color:#F6F6F4;"> accountMapper;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AccountFreezeMapper</span><span style="color:#F6F6F4;"> freezeMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deduct</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">userId</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">money</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 0.获取事务id</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> xid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RootContext.</span><span style="color:#62E884;">getXID</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.扣减可用余额</span></span>
<span class="line"><span style="color:#F6F6F4;">        accountMapper.</span><span style="color:#62E884;">deduct</span><span style="color:#F6F6F4;">(userId, money);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.记录冻结金额，事务状态</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AccountFreeze</span><span style="color:#F6F6F4;"> freeze </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AccountFreeze</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setUserId</span><span style="color:#F6F6F4;">(userId);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setFreezeMoney</span><span style="color:#F6F6F4;">(money);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(AccountFreeze.State.TRY);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setXid</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freezeMapper.</span><span style="color:#62E884;">insert</span><span style="color:#F6F6F4;">(freeze);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">confirm</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.获取事务id</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> xid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">getXid</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.根据id删除冻结记录</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">deleteById</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cancel</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 0.查询冻结记录</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> xid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">getXid</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AccountFreeze</span><span style="color:#F6F6F4;"> freeze </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">selectById</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.恢复可用余额</span></span>
<span class="line"><span style="color:#F6F6F4;">        accountMapper.</span><span style="color:#62E884;">refund</span><span style="color:#F6F6F4;">(freeze.</span><span style="color:#62E884;">getUserId</span><span style="color:#F6F6F4;">(), freeze.</span><span style="color:#62E884;">getFreezeMoney</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.将冻结金额清零，状态改为CANCEL</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setFreezeMoney</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(AccountFreeze.State.CANCEL);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">updateById</span><span style="color:#F6F6F4;">(freeze);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> cn.itcast.account.service.impl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.entity.AccountFreeze;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.mapper.AccountFreezeMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.mapper.AccountMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.service.AccountTCCService;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.core.context.RootContext;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.rm.tcc.api.BusinessActionContext;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.stereotype.Service;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.transaction.annotation.Transactional;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountTCCServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountTCCService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountMapper accountMapper;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountFreezeMapper freezeMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deduct</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">money</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 0.获取事务id</span></span>
<span class="line"><span style="color:#24292E;">        String xid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RootContext.</span><span style="color:#6F42C1;">getXID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.扣减可用余额</span></span>
<span class="line"><span style="color:#24292E;">        accountMapper.</span><span style="color:#6F42C1;">deduct</span><span style="color:#24292E;">(userId, money);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.记录冻结金额，事务状态</span></span>
<span class="line"><span style="color:#24292E;">        AccountFreeze freeze </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountFreeze</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(userId);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setFreezeMoney</span><span style="color:#24292E;">(money);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(AccountFreeze.State.TRY);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setXid</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">        freezeMapper.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(freeze);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">confirm</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.获取事务id</span></span>
<span class="line"><span style="color:#24292E;">        String xid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getXid</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.根据id删除冻结记录</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 0.查询冻结记录</span></span>
<span class="line"><span style="color:#24292E;">        String xid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getXid</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        AccountFreeze freeze </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">selectById</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.恢复可用余额</span></span>
<span class="line"><span style="color:#24292E;">        accountMapper.</span><span style="color:#6F42C1;">refund</span><span style="color:#24292E;">(freeze.</span><span style="color:#6F42C1;">getUserId</span><span style="color:#24292E;">(), freeze.</span><span style="color:#6F42C1;">getFreezeMoney</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.将冻结金额清零，状态改为CANCEL</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setFreezeMoney</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(AccountFreeze.State.CANCEL);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">updateById</span><span style="color:#24292E;">(freeze);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>4）空回滚和业务悬挂实现</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">cn.itcast.account.service.impl</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.entity.AccountFreeze;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.mapper.AccountFreezeMapper;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.mapper.AccountMapper;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.itcast.account.service.AccountTCCService;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.core.context.RootContext;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> io.seata.rm.tcc.api.BusinessActionContext;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.stereotype.Service;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.transaction.annotation.Transactional;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Slf4j</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AccountTCCServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AccountTCCService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AccountMapper</span><span style="color:#F6F6F4;"> accountMapper;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AccountFreezeMapper</span><span style="color:#F6F6F4;"> freezeMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deduct</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">userId</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">money</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 0.获取事务id</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> xid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RootContext.</span><span style="color:#62E884;">getXID</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 查询freeze，防止业务悬挂</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AccountFreeze</span><span style="color:#F6F6F4;"> oldFreeze </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">selectById</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (oldFreeze </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 拒绝业务</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.扣减可用余额</span></span>
<span class="line"><span style="color:#F6F6F4;">        accountMapper.</span><span style="color:#62E884;">deduct</span><span style="color:#F6F6F4;">(userId, money);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.记录冻结金额，事务状态</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AccountFreeze</span><span style="color:#F6F6F4;"> freeze </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AccountFreeze</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setUserId</span><span style="color:#F6F6F4;">(userId);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setFreezeMoney</span><span style="color:#F6F6F4;">(money);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(AccountFreeze.State.TRY);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setXid</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freezeMapper.</span><span style="color:#62E884;">insert</span><span style="color:#F6F6F4;">(freeze);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">confirm</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.获取事务id</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> xid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">getXid</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.根据id删除冻结记录</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">deleteById</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cancel</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">BusinessActionContext</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 0.查询冻结记录</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> xid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">getXid</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> userId </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctx.</span><span style="color:#62E884;">getActionContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">userId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">AccountFreeze</span><span style="color:#F6F6F4;"> freeze </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">selectById</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 空回滚判断</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (freeze </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            freeze </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AccountFreeze</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            freeze.</span><span style="color:#62E884;">setUserId</span><span style="color:#F6F6F4;">(userId);</span></span>
<span class="line"><span style="color:#F6F6F4;">            freeze.</span><span style="color:#62E884;">setFreezeMoney</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            freeze.</span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(AccountFreeze.State.CANCEL);</span></span>
<span class="line"><span style="color:#F6F6F4;">            freeze.</span><span style="color:#62E884;">setXid</span><span style="color:#F6F6F4;">(xid);</span></span>
<span class="line"><span style="color:#F6F6F4;">            freezeMapper.</span><span style="color:#62E884;">insert</span><span style="color:#F6F6F4;">(freeze);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 幂等判断</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(freeze.</span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> AccountFreeze.State.CANCEL){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 已经处理过了，无需重复cancel</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.恢复可用余额</span></span>
<span class="line"><span style="color:#F6F6F4;">        accountMapper.</span><span style="color:#62E884;">refund</span><span style="color:#F6F6F4;">(freeze.</span><span style="color:#62E884;">getUserId</span><span style="color:#F6F6F4;">(), freeze.</span><span style="color:#62E884;">getFreezeMoney</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.将冻结金额清零，状态改为CANCEL</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setFreezeMoney</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        freeze.</span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(AccountFreeze.State.CANCEL);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> freezeMapper.</span><span style="color:#62E884;">updateById</span><span style="color:#F6F6F4;">(freeze);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> cn.itcast.account.service.impl;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.entity.AccountFreeze;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.mapper.AccountFreezeMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.mapper.AccountMapper;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.itcast.account.service.AccountTCCService;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.core.context.RootContext;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> io.seata.rm.tcc.api.BusinessActionContext;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.stereotype.Service;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.transaction.annotation.Transactional;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountTCCServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountTCCService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountMapper accountMapper;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> AccountFreezeMapper freezeMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deduct</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">userId</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">money</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 0.获取事务id</span></span>
<span class="line"><span style="color:#24292E;">        String xid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RootContext.</span><span style="color:#6F42C1;">getXID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 查询freeze，防止业务悬挂</span></span>
<span class="line"><span style="color:#24292E;">        AccountFreeze oldFreeze </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">selectById</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldFreeze </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 拒绝业务</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.扣减可用余额</span></span>
<span class="line"><span style="color:#24292E;">        accountMapper.</span><span style="color:#6F42C1;">deduct</span><span style="color:#24292E;">(userId, money);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.记录冻结金额，事务状态</span></span>
<span class="line"><span style="color:#24292E;">        AccountFreeze freeze </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountFreeze</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(userId);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setFreezeMoney</span><span style="color:#24292E;">(money);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(AccountFreeze.State.TRY);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setXid</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">        freezeMapper.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(freeze);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">confirm</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.获取事务id</span></span>
<span class="line"><span style="color:#24292E;">        String xid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getXid</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.根据id删除冻结记录</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">deleteById</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cancel</span><span style="color:#24292E;">(BusinessActionContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 0.查询冻结记录</span></span>
<span class="line"><span style="color:#24292E;">        String xid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getXid</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String userId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctx.</span><span style="color:#6F42C1;">getActionContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userId&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        AccountFreeze freeze </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">selectById</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空回滚判断</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (freeze </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            freeze </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountFreeze</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            freeze.</span><span style="color:#6F42C1;">setUserId</span><span style="color:#24292E;">(userId);</span></span>
<span class="line"><span style="color:#24292E;">            freeze.</span><span style="color:#6F42C1;">setFreezeMoney</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            freeze.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(AccountFreeze.State.CANCEL);</span></span>
<span class="line"><span style="color:#24292E;">            freeze.</span><span style="color:#6F42C1;">setXid</span><span style="color:#24292E;">(xid);</span></span>
<span class="line"><span style="color:#24292E;">            freezeMapper.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(freeze);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 幂等判断</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(freeze.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> AccountFreeze.State.CANCEL){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 已经处理过了，无需重复cancel</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.恢复可用余额</span></span>
<span class="line"><span style="color:#24292E;">        accountMapper.</span><span style="color:#6F42C1;">refund</span><span style="color:#24292E;">(freeze.</span><span style="color:#6F42C1;">getUserId</span><span style="color:#24292E;">(), freeze.</span><span style="color:#6F42C1;">getFreezeMoney</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.将冻结金额清零，状态改为CANCEL</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setFreezeMoney</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        freeze.</span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(AccountFreeze.State.CANCEL);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> freezeMapper.</span><span style="color:#6F42C1;">updateById</span><span style="color:#24292E;">(freeze);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_4-4-saga模式" tabindex="-1">4.4.SAGA模式 <a class="header-anchor" href="#_4-4-saga模式" aria-label="Permalink to &quot;4.4.SAGA模式&quot;">​</a></h2><p>Saga 模式是 Seata 即将开源的长事务解决方案，将由蚂蚁金服主要贡献。</p><p>其理论基础是Hector &amp; Kenneth 在1987年发表的论文<a href="https://microservices.io/patterns/data/saga.html" target="_blank" rel="noreferrer">Sagasopen in new window</a>。</p><p>Seata官网对于Saga的指南：<a href="https://seata.io/zh-cn/docs/user/saga.html" target="_blank" rel="noreferrer">https://seata.io/zh-cn/docs/user/saga.htmlopen in new window</a></p><h3 id="_4-4-1-原理" tabindex="-1">4.4.1.原理 <a class="header-anchor" href="#_4-4-1-原理" aria-label="Permalink to &quot;4.4.1.原理&quot;">​</a></h3><p>在 Saga 模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。</p><p>分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会去退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724184846396.png" alt="image-20210724184846396"></p><p>image-20210724184846396</p><p>Saga也分为两个阶段：</p><ul><li>一阶段：直接提交本地事务</li><li>二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚</li></ul><h3 id="_4-4-2-优缺点" tabindex="-1">4.4.2.优缺点 <a class="header-anchor" href="#_4-4-2-优缺点" aria-label="Permalink to &quot;4.4.2.优缺点&quot;">​</a></h3><p>优点：</p><ul><li>事务参与者可以基于事件驱动实现异步调用，吞吐高</li><li>一阶段直接提交事务，无锁，性能好</li><li>不用编写TCC中的三个阶段，实现简单</li></ul><p>缺点：</p><ul><li>软状态持续时间不确定，时效性差</li><li>没有锁，没有事务隔离，会有脏写</li></ul><h2 id="_4-5-四种模式对比" tabindex="-1">4.5.四种模式对比 <a class="header-anchor" href="#_4-5-四种模式对比" aria-label="Permalink to &quot;4.5.四种模式对比&quot;">​</a></h2><p>我们从以下几个方面来对比四种实现：</p><ul><li>一致性：能否保证事务的一致性？强一致还是最终一致？</li><li>隔离性：事务之间的隔离性如何？</li><li>代码侵入：是否需要对业务代码改造？</li><li>性能：有无性能损耗？</li><li>场景：常见的业务场景</li></ul><p>如图：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724185021819.png" alt="image-20210724185021819"></p><p>image-20210724185021819</p><h2 id="_5-高可用" tabindex="-1">5.高可用 <a class="header-anchor" href="#_5-高可用" aria-label="Permalink to &quot;5.高可用&quot;">​</a></h2><p>Seata的TC服务作为分布式事务核心，一定要保证集群的高可用性。</p><h2 id="_5-1-高可用架构模型" tabindex="-1">5.1.高可用架构模型 <a class="header-anchor" href="#_5-1-高可用架构模型" aria-label="Permalink to &quot;5.1.高可用架构模型&quot;">​</a></h2><p>搭建TC服务集群非常简单，启动多个TC服务，注册到nacos即可。</p><p>但集群并不能确保100%安全，万一集群所在机房故障怎么办？所以如果要求较高，一般都会做异地多机房容灾。</p><p>比如一个TC集群在上海，另一个TC集群在杭州：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724185240957.png" alt="image-20210724185240957"></p><p>image-20210724185240957</p><p>微服务基于事务组（tx-service-group)与TC集群的映射关系，来查找当前应该使用哪个TC集群。当SH集群故障时，只需要将vgroup-mapping中的映射关系改成HZ。则所有微服务就会切换到HZ的TC集群了。</p><h2 id="_5-2-实现高可用" tabindex="-1">5.2.实现高可用 <a class="header-anchor" href="#_5-2-实现高可用" aria-label="Permalink to &quot;5.2.实现高可用&quot;">​</a></h2><p>具体实现请参考课前资料提供的文档《<a href="http://xn--seata-vn9hk12f0m1b31qe33bern.md/" target="_blank" rel="noreferrer">seata的部署和集成.mdopen in new window</a>》：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724172549013.png" alt="image-20210724172549013"></p><p>image-20210724172549013</p><p>第三章节：</p><p><img src="http://image.yangeit.cn/i/2023/05/23/image-20210724185638729.png" alt="image-20210724185638729"></p><p>image-20210724185638729</p>`,330),e=[o];function t(c,r,y,i,F,E){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
