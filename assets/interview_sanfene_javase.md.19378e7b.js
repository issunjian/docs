import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"面渣逆袭（Java基础篇面试题八股文）必看👍","description":"图文详解 53 道Java基础面试高频题，这次吊打面试官，我觉得稳了（手动 dog）","frontmatter":{"title":"面渣逆袭（Java基础篇面试题八股文）必看👍","shortTitle":"面渣逆袭-Java SE","category":["面渣逆袭"],"tag":["面渣逆袭"],"description":"图文详解 53 道Java基础面试高频题，这次吊打面试官，我觉得稳了（手动 dog）","head":[["meta",{"name":"keywords","content":"Java,Java SE,面试题,Java基础面试题,Java面试题,八股文,java"}]]},"headers":[],"relativePath":"interview/sanfene/javase.md","filePath":"interview/sanfene/javase.md"}'),p={name:"interview/sanfene/javase.md"},o=l(`<h2 id="java-概述" tabindex="-1">Java 概述 <a class="header-anchor" href="#java-概述" aria-label="Permalink to &quot;Java 概述&quot;">​</a></h2><h3 id="_1-什么是-java" tabindex="-1">1.什么是 Java？ <a class="header-anchor" href="#_1-什么是-java" aria-label="Permalink to &quot;1.什么是 Java？&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-1.png" alt="下辈子还学Java"></p><p>PS：碎怂 Java，有啥好介绍的。哦，面试啊。</p><p>Java 是一门面向对象的编程语言，不仅吸收了 C++语言的各种优点，还摒弃了 C++里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><h3 id="_2-java-语言有哪些特点" tabindex="-1">2.Java 语言有哪些特点？ <a class="header-anchor" href="#_2-java-语言有哪些特点" aria-label="Permalink to &quot;2.Java 语言有哪些特点？&quot;">​</a></h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-2.png" alt="Java语言特点"></p><ul><li>面向对象（封装，继承，多态）；</li><li>平台无关性，平台无关性的具体表现在于，Java 是“一次编写，到处运行（Write Once，Run any Where）”的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</li><li>支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；</li><li>编译与解释并存；</li></ul><h3 id="_3-jvm、jdk-和-jre-有什么区别" tabindex="-1">3.JVM、JDK 和 JRE 有什么区别？ <a class="header-anchor" href="#_3-jvm、jdk-和-jre-有什么区别" aria-label="Permalink to &quot;3.JVM、JDK 和 JRE 有什么区别？&quot;">​</a></h3><p><strong>JVM</strong>：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p><p><strong>JRE</strong>： Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p><p><strong>JDK</strong>: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>简单来说，JDK 包含 JRE，JRE 包含 JVM。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-3.png" alt="JDK、JRE、JVM关系"></p><h3 id="_4-说说什么是跨平台性-原理是什么" tabindex="-1">4.说说什么是跨平台性？原理是什么 <a class="header-anchor" href="#_4-说说什么是跨平台性-原理是什么" aria-label="Permalink to &quot;4.说说什么是跨平台性？原理是什么&quot;">​</a></h3><p>所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p>实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。</p><h3 id="_5-什么是字节码-采用字节码的好处是什么" tabindex="-1">5.什么是字节码？采用字节码的好处是什么? <a class="header-anchor" href="#_5-什么是字节码-采用字节码的好处是什么" aria-label="Permalink to &quot;5.什么是字节码？采用字节码的好处是什么?&quot;">​</a></h3><p>所谓的字节码，就是 Java 程序经过编译之类产生的.class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p><p><strong>Java</strong> 程序从源代码到运行主要有三步：</p><ul><li><strong>编译</strong>：将我们的代码（.java）编译成虚拟机可以识别理解的字节码(.class)</li><li><strong>解释</strong>：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码</li><li><strong>执行</strong>：对应的机器执行二进制机器码</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-4.png" alt="Java程序执行过程"></p><p>只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。</p><h3 id="_6-为什么说-java-语言-编译与解释并存" tabindex="-1">6.为什么说 Java 语言“编译与解释并存”？ <a class="header-anchor" href="#_6-为什么说-java-语言-编译与解释并存" aria-label="Permalink to &quot;6.为什么说 Java 语言“编译与解释并存”？&quot;">​</a></h3><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p><p>简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</p><p>比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p><p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\\*.class</code> 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-5.png" alt="编译与解释"></p><h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h2><h3 id="_7-java-有哪些数据类型" tabindex="-1">7.Java 有哪些数据类型？ <a class="header-anchor" href="#_7-java-有哪些数据类型" aria-label="Permalink to &quot;7.Java 有哪些数据类型？&quot;">​</a></h3><p><b>定义：</b>Java 语言是强类型语言，对于每一种数据都定义了明确的具体的数据类型，在内存中分配了不同大小的内存空间。</p><p>Java 语言数据类型分为两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-6.png" alt="Java数据类型"></p><p><b>基本数据类型：</b></p><ul><li>数值型 <ul><li>整数类型（byte、short、int、long）</li><li>浮点类型（float、double）</li></ul></li><li>字符型（char）</li><li>布尔型（boolean）</li></ul><p>Java 基本数据类型范围和默认值：</p><table><thead><tr><th>基本类型</th><th>位数</th><th>字节</th><th>默认值</th></tr></thead><tbody><tr><td><code>int</code></td><td>32</td><td>4</td><td>0</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td>0</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td>0L</td></tr><tr><td><code>byte</code></td><td>8</td><td>1</td><td>0</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td>&#39;u0000&#39;</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td>0f</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td>0d</td></tr><tr><td><code>boolean</code></td><td>1</td><td></td><td>false</td></tr></tbody></table><p><strong>引用数据类型：</strong></p><ul><li>类（class）</li><li>接口（interface）</li><li>数组([])</li></ul><h3 id="_8-自动类型转换、强制类型转换-看看这几行代码" tabindex="-1">8.自动类型转换、强制类型转换？看看这几行代码？ <a class="header-anchor" href="#_8-自动类型转换、强制类型转换-看看这几行代码" aria-label="Permalink to &quot;8.自动类型转换、强制类型转换？看看这几行代码？&quot;">​</a></h3><p>Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-7.png" alt="Java自动类型转换方向"></p><p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p><blockquote><p><code>float f=3.4</code>，对吗？</p></blockquote><p>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p><blockquote><p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p></blockquote><p>对于 short s1 = 1; s1 = s1 + 1;编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p><p>而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="_9-什么是自动拆箱-封箱" tabindex="-1">9.什么是自动拆箱/封箱？ <a class="header-anchor" href="#_9-什么是自动拆箱-封箱" aria-label="Permalink to &quot;9.什么是自动拆箱/封箱？&quot;">​</a></h3><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-8.png" alt="装箱和拆箱"></p><p>举例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;  </span><span style="color:#7B7F8B;">//装箱</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i;   </span><span style="color:#7B7F8B;">//拆箱</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Integer i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">//装箱</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;   </span><span style="color:#6A737D;">//拆箱</span></span></code></pre></div><h3 id="_10-和-有什么区别" tabindex="-1">10.&amp;和&amp;&amp;有什么区别？ <a class="header-anchor" href="#_10-和-有什么区别" aria-label="Permalink to &quot;10.&amp;和&amp;&amp;有什么区别？&quot;">​</a></h3><p>&amp;运算符有两种用法：<code>短路与</code>、<code>逻辑与</code>。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。</p><p>&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;。</p><p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。</p><p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><h3 id="_11-switch-是否能作用在-byte-long-string-上" tabindex="-1">11.switch 是否能作用在 byte/long/String 上？ <a class="header-anchor" href="#_11-switch-是否能作用在-byte-long-string-上" aria-label="Permalink to &quot;11.switch 是否能作用在 byte/long/String 上？&quot;">​</a></h3><p>Java5 以前 switch(expr)中，expr 只能是 byte、short、char、int。</p><p>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</p><p>从 Java 7 开始，expr 还可以是字符串(String)，但是长整型(long)在目前所有的版本中都是不可以的。</p><h3 id="_12-break-continue-return-的区别及作用" tabindex="-1">12.break ,continue ,return 的区别及作用？ <a class="header-anchor" href="#_12-break-continue-return-的区别及作用" aria-label="Permalink to &quot;12.break ,continue ,return 的区别及作用？&quot;">​</a></h3><ul><li>break 跳出整个循环，不再执行循环(<strong>结束当前的循环体</strong>)</li><li>continue 跳出本次循环，继续执行下次循环(<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li><li>return 程序返回，不再执行下面的代码(<strong>结束当前的方法 直接返回</strong>)</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-9.png" alt="break 、continue 、return"></p><h3 id="_13-用最有效率的方法计算-2-乘以-8" tabindex="-1">13.用最有效率的方法计算 2 乘以 8？ <a class="header-anchor" href="#_13-用最有效率的方法计算-2-乘以-8" aria-label="Permalink to &quot;13.用最有效率的方法计算 2 乘以 8？&quot;">​</a></h3><p>2 &lt;&lt; 3。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 2 的三次方。</p><h3 id="_14-说说自增自减运算-看下这几个代码运行结果" tabindex="-1">14.说说自增自减运算？看下这几个代码运行结果？ <a class="header-anchor" href="#_14-说说自增自减运算-看下这几个代码运行结果" aria-label="Permalink to &quot;14.说说自增自减运算？看下这几个代码运行结果？&quot;">​</a></h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。</p><p>++和--运算符可以放在变量之前，也可以放在变量之后。</p><p>当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。</p><p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。</p><p>用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。</p><blockquote><p>看一下这段代码运行结果？</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i  </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(i);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(i);</span></span></code></pre></div><p>答案是 1。有点离谱对不对。</p><p>对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p><p>相当于这样的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">；</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i;</span></span>
<span class="line"><span style="color:#F6F6F4;">i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">；</span></span>
<span class="line"><span style="color:#F6F6F4;">i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(i);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">；</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">；</span></span>
<span class="line"><span style="color:#24292E;">i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(i);</span></span></code></pre></div><blockquote><p>这段代码会输出什么？</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> count</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">count = </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">count);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;count = &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">count);</span></span></code></pre></div><p>答案是 0。</p><p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">autoAdd</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count)</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> count;</span></span>
<span class="line"><span style="color:#F6F6F4;">    count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> coutn </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> temp;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">autoAdd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> coutn </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。</p><h2 id="面向对象" tabindex="-1">面向对象 <a class="header-anchor" href="#面向对象" aria-label="Permalink to &quot;面向对象&quot;">​</a></h2><h3 id="_15-面向对象和面向过程的区别" tabindex="-1">15.⾯向对象和⾯向过程的区别? <a class="header-anchor" href="#_15-面向对象和面向过程的区别" aria-label="Permalink to &quot;15.⾯向对象和⾯向过程的区别?&quot;">​</a></h3><ul><li><strong>⾯向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li><li><strong>⾯向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li></ul><p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-10.png" alt="面向对象和面向过程的区别"></p><h3 id="_16-面向对象有哪些特性" tabindex="-1">16.面向对象有哪些特性 <a class="header-anchor" href="#_16-面向对象有哪些特性" aria-label="Permalink to &quot;16.面向对象有哪些特性&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-11.png" alt="面向对象三大特征"></p><ul><li><p><b>封装</b></p><p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法。</p></li><li><p><b>继承</b></p><p>继承是使⽤已存在的类的定义作为基础创建新的类，新类的定义可以增加新的属性或新的方法，也可以继承父类的属性和方法。通过继承可以很方便地进行代码复用。</p></li></ul><blockquote><p>关于继承有以下三个要点：</p></blockquote><ol><li><p>⼦类拥有⽗类对象所有的属性和⽅法（包括私有属性和私有⽅法），但是⽗类中的私有属性和⽅法⼦类是⽆法访问，只是拥有。</p></li><li><p>⼦类可以拥有⾃⼰属性和⽅法，即⼦类可以对⽗类进⾏扩展。</p></li><li><p>⼦类可以⽤⾃⼰的⽅式实现⽗类的⽅法。</p></li></ol><ul><li><p><b>多态</b></p><p>所谓多态就是指程序中定义的引⽤变量所指向的具体类型和通过该引⽤变量发出的⽅法调⽤在编程时并不确定，⽽是在程序运⾏期间才确定，即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p></li></ul><h3 id="_17-重载-overload-和重写-override-的区别" tabindex="-1">17.重载（overload）和重写（override）的区别？ <a class="header-anchor" href="#_17-重载-overload-和重写-override-的区别" aria-label="Permalink to &quot;17.重载（overload）和重写（override）的区别？&quot;">​</a></h3><p>方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><ul><li><p>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</p></li><li><p>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。</p></li></ul><p>方法重载的规则：</p><ol><li>方法名一致，参数列表中参数的顺序，类型，个数不同。</li><li>重载与方法的返回值无关，存在于父类和子类，同类中。</li><li>可以抛出不同的异常，可以有不同修饰符。</li></ol><h3 id="_18-访问修饰符-public、private、protected、以及不写-默认-时的区别" tabindex="-1">18.访问修饰符 public、private、protected、以及不写（默认）时的区别？ <a class="header-anchor" href="#_18-访问修饰符-public、private、protected、以及不写-默认-时的区别" aria-label="Permalink to &quot;18.访问修饰符 public、private、protected、以及不写（默认）时的区别？&quot;">​</a></h3><p>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-12.png" alt="访问修饰符和可见性"></p><h3 id="_19-this-关键字有什么作用" tabindex="-1">19.this 关键字有什么作用？ <a class="header-anchor" href="#_19-this-关键字有什么作用" aria-label="Permalink to &quot;19.this 关键字有什么作用？&quot;">​</a></h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p><p>this 的用法在 Java 中大体可以分为 3 种：</p><ol><li><p>普通的直接引用，this 相当于是指向当前对象本身</p></li><li><p>形参与成员变量名字重名，用 this 来区分：</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name,</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">age;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(String name,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">age;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li>引用本类的构造函数</li></ol><h3 id="_20-抽象类-abstract-class-和接口-interface-有什么区别" tabindex="-1">20.抽象类(abstract class)和接口(interface)有什么区别？ <a class="header-anchor" href="#_20-抽象类-abstract-class-和接口-interface-有什么区别" aria-label="Permalink to &quot;20.抽象类(abstract class)和接口(interface)有什么区别？&quot;">​</a></h3><ol><li><p>接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现(Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</p></li><li><p>接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。</p></li><li><p>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。</p></li><li><p>接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</p></li><li><p>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</p></li></ol><blockquote><ol><li><p>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</p></li><li><p>jdk9 的接⼝被允许定义私有⽅法 。</p></li></ol></blockquote><p>总结⼀下 jdk7~jdk9 Java 中接⼝的变化：</p><ol><li><p>在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</p></li><li><p>jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。</p></li><li><p>jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</p></li></ol><h3 id="_21-成员变量与局部变量的区别有哪些" tabindex="-1">21.成员变量与局部变量的区别有哪些？ <a class="header-anchor" href="#_21-成员变量与局部变量的区别有哪些" aria-label="Permalink to &quot;21.成员变量与局部变量的区别有哪些？&quot;">​</a></h3><ol><li><p><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</p></li><li><p><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</p></li><li><p><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</p></li><li><p><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外:被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</p></li></ol><h3 id="_22-静态变量和实例变量的区别-静态方法、实例方法呢" tabindex="-1">22.静态变量和实例变量的区别？静态方法、实例方法呢？ <a class="header-anchor" href="#_22-静态变量和实例变量的区别-静态方法、实例方法呢" aria-label="Permalink to &quot;22.静态变量和实例变量的区别？静态方法、实例方法呢？&quot;">​</a></h3><blockquote><p>静态变量和实例变量的区别？</p></blockquote><p><strong>静态变量:</strong> 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p><p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><blockquote><p>静态⽅法和实例⽅法有何不同?</p></blockquote><p>类似地。</p><p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤&quot;<strong>类名.⽅法名</strong>&quot;的⽅式，也可以使⽤&quot;<strong>对象名.⽅法名</strong>&quot;的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p><p><strong>实例⽅法</strong>：依存于类的实例，需要使用&quot;<strong>对象名.⽅法名</strong>&quot;的⽅式调用；可以访问类的所有成员变量和方法。</p><h3 id="_24-final-关键字有什么作用" tabindex="-1">24.final 关键字有什么作用？ <a class="header-anchor" href="#_24-final-关键字有什么作用" aria-label="Permalink to &quot;24.final 关键字有什么作用？&quot;">​</a></h3><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p><ul><li><p>被 final 修饰的类不可以被继承</p></li><li><p>被 final 修饰的方法不可以被重写</p></li><li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p><p>例如：</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> sb </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(sb);  </span><span style="color:#7B7F8B;">//abcd</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(sb);  </span><span style="color:#6A737D;">//abcd</span></span></code></pre></div><p>一张图说明：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-13.png" alt="final修饰变量"></p><h3 id="_25-final、finally、finalize-的区别" tabindex="-1">25.final、finally、finalize 的区别？ <a class="header-anchor" href="#_25-final、finally、finalize-的区别" aria-label="Permalink to &quot;25.final、finally、finalize 的区别？&quot;">​</a></h3><ul><li><p>final 用于修饰变量、方法和类：final 修饰的类不可被继承；修饰的方法不可被重写；修饰的变量不可变。</p></li><li><p>finally 作为异常处理的一部分，它只能在 <code>try/catch</code> 语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），经常被用在需要释放资源的情况下，<code>System.exit (0)</code> 可以阻断 finally 执行。</p></li><li><p>finalize 是在 <code>java.lang.Object</code> 里定义的方法，也就是说每一个对象都有这么个方法，这个方法在 <code>gc</code> 启动，该对象被回收的时候被调用。</p><p>一个对象的 finalize 方法只会被调用一次，finalize 被调用不一定会立即回收该对象，所以有可能调用 finalize 后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用 finalize 了，进而产生问题，因此不推荐使用 finalize 方法。</p></li></ul><h3 id="_26-和-equals-的区别" tabindex="-1">26.==和 equals 的区别？ <a class="header-anchor" href="#_26-和-equals-的区别" aria-label="Permalink to &quot;26.==和 equals 的区别？&quot;">​</a></h3><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象(基本数据类型 <strong>==</strong> 比较的是值，引⽤数据类型 <strong>==</strong> 比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个“相等”一般也分两种情况：</p><ul><li><p>默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过“ <strong>==</strong> ”比较这两个对象，还是相当于比较内存地址。</p></li><li><p>自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals()方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</p></li></ul><p>举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Person</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> no;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> o) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">(o </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> Person)) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> person </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Person) o;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Objects.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(no, person.no) </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                Objects.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(name, person.name);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Objects.</span><span style="color:#62E884;">hash</span><span style="color:#F6F6F4;">(no, name);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String no;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> o) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(o </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Person)) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Person person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Person) o;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(no, person.no) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                Objects.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(name, person.name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Objects.</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(no, name);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_27-hashcode-与-equals" tabindex="-1">27.hashCode 与 equals? <a class="header-anchor" href="#_27-hashcode-与-equals" aria-label="Permalink to &quot;27.hashCode 与 equals?&quot;">​</a></h3><p>这个也是面试常问——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”</p><blockquote><p>什么是 HashCode？</p></blockquote><p>hashCode() 的作⽤是获取哈希码，也称为散列码；它实际上是返回⼀个 int 整数，定义在 Object 类中， 是一个本地⽅法，这个⽅法通常⽤来将对象的内存地址转换为整数之后返回。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">native</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">native</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">();</span></span></code></pre></div><p>哈希码主要在哈希表这类集合映射的时候用到，哈希表存储的是键值对(key-value)，它的特点是：能根据“键”快速的映射到对应的“值”。这其中就利⽤到了哈希码！</p><blockquote><p>为什么要有 hashCode？</p></blockquote><p>上面已经讲了，主要是在哈希表这种结构中用的到。</p><p>例如 HashMap 怎么把 key 映射到对应的 value 上呢？用的就是哈希取余法，也就是拿哈希码和存储元素的数组的长度取余，获取 key 对应的 value 所在的下标位置。</p><blockquote><p>为什么重写 quals 时必须重写 hashCode ⽅法？</p></blockquote><p>如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等，对两个对象分别调⽤ equals ⽅法都返回 true。反之，两个对象有相同的 hashcode 值，它们也不⼀定是相等的 。因此，<strong>equals</strong> ⽅法被覆盖过，则 <strong>hashCode</strong> ⽅法也必须被覆盖。</p><p>hashCode() 的默认⾏为是对堆上的对象产⽣独特值。如果没有重写 hashCode() ，则该 class 的两个对象⽆论如何都不会相等（即使这两个对象指向相同的数据）</p><blockquote><p>为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？</p></blockquote><p>因为可能会<strong>碰撞</strong>， hashCode() 所使⽤的散列算法也许刚好会让多个对象传回相同的散列值。越糟糕的散列算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode ）。</p><h3 id="_28-java-是值传递-还是引用传递" tabindex="-1">28.Java 是值传递，还是引用传递？ <a class="header-anchor" href="#_28-java-是值传递-还是引用传递" aria-label="Permalink to &quot;28.Java 是值传递，还是引用传递？&quot;">​</a></h3><p>Java 语言是<strong>值传递</strong>。Java 语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p><p>JVM 的内存分为堆和栈，其中栈中存储了基本数据类型和引用数据类型实例的地址，也就是对象地址。</p><p>而对象所占的空间是在堆中开辟的，所以传递的时候可以理解为把变量存储的对象地址给传递过去，因此引用类型也是值传递。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-14.png" alt="Java引用数据值传递示意图"></p><h3 id="_29-深拷贝和浅拷贝" tabindex="-1">29.深拷贝和浅拷贝? <a class="header-anchor" href="#_29-深拷贝和浅拷贝" aria-label="Permalink to &quot;29.深拷贝和浅拷贝?&quot;">​</a></h3><ul><li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li><li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li></ul><p>例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-15.png" alt="浅拷贝和深拷贝示意图"></p><p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p><blockquote><p>浅拷贝如何实现呢？</p></blockquote><p>Object 类提供的 clone()方法可以非常简单地实现对象的浅拷贝。</p><blockquote><p>深拷贝如何实现呢？</p></blockquote><ul><li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li><li>序列化：可以先将原对象序列化，再反序列化成拷贝对象。</li></ul><h3 id="_30-java-创建对象有哪几种方式" tabindex="-1">30.Java 创建对象有哪几种方式？ <a class="header-anchor" href="#_30-java-创建对象有哪几种方式" aria-label="Permalink to &quot;30.Java 创建对象有哪几种方式？&quot;">​</a></h3><p>Java 中有以下四种创建对象的方式:</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-16.png" alt="Java创建对象的四种方式"></p><ul><li>new 创建新对象</li><li>通过反射机制</li><li>采用 clone 机制</li><li>通过序列化机制</li></ul><p>前两者都需要显式地调用构造方法。对于 clone 机制,需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。</p><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h2><h3 id="_31-string-是-java-基本数据类型吗-可以被继承吗" tabindex="-1">31.String 是 Java 基本数据类型吗？可以被继承吗？ <a class="header-anchor" href="#_31-string-是-java-基本数据类型吗-可以被继承吗" aria-label="Permalink to &quot;31.String 是 Java 基本数据类型吗？可以被继承吗？&quot;">​</a></h3><blockquote><p>String 是 Java 基本数据类型吗？</p></blockquote><p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。</p><p>String 是一个比较特殊的引用数据类型。</p><blockquote><p>String 类可以继承吗？</p></blockquote><p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p><h3 id="_32-string-和-stringbuilder、stringbuffer-的区别" tabindex="-1">32.String 和 StringBuilder、StringBuffer 的区别？ <a class="header-anchor" href="#_32-string-和-stringbuilder、stringbuffer-的区别" aria-label="Permalink to &quot;32.String 和 StringBuilder、StringBuffer 的区别？&quot;">​</a></h3><ul><li>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。</li><li>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。</li><li>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</li></ul><h3 id="_33-string-str1-new-string-abc-和-string-str2-abc-和-区别" tabindex="-1">33.String str1 = new String(&quot;abc&quot;)和 String str2 = &quot;abc&quot; 和 区别？ <a class="header-anchor" href="#_33-string-str1-new-string-abc-和-string-str2-abc-和-区别" aria-label="Permalink to &quot;33.String str1 = new String(&quot;abc&quot;)和 String str2 = &quot;abc&quot; 和 区别？&quot;">​</a></h3><p>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-17.png" alt="堆与常量池中的String"></p><p>但是不同的是，String str1 = new String(&quot;abc&quot;) 还会通过 new String() 在堆里创建一个 &quot;abc&quot; 字符串对象实例。所以后者可以理解为被前者包含。</p><blockquote><p>String s = new String(&quot;abc&quot;)创建了几个对象？</p></blockquote><p>很明显，一个或两个。如果字符串常量池已经有“abc”，则是一个；否则，两个。</p><p>当字符创常量池没有 “abc”，此时会创建如下两个对象：</p><ul><li>一个是字符串字面量 &quot;abc&quot; 所对应的、字符串常量池中的实例</li><li>另一个是通过 new String() 创建并初始化的，内容与&quot;abc&quot;相同的实例，在堆中。</li></ul><h3 id="_34-string-不是不可变类吗-字符串拼接是如何实现的" tabindex="-1">34.String 不是不可变类吗？字符串拼接是如何实现的？ <a class="header-anchor" href="#_34-string-不是不可变类吗-字符串拼接是如何实现的" aria-label="Permalink to &quot;34.String 不是不可变类吗？字符串拼接是如何实现的？&quot;">​</a></h3><p>String 的确是不可变的，“<strong>+</strong>”的拼接操作，其实是会生成新的对象。</p><p>例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> ab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span></code></pre></div><p>在<strong>jdk1.8 之前</strong>，a 和 b 初始化时位于字符串常量池，ab 拼接后的对象位于堆中。经过拼接新生成了 String 对象。如果拼接多次，那么会生成多个中间对象。</p><p>内存如下：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-18.png" alt="jdk1.8之前的字符串拼接"></p><p>在<strong>Java8 时</strong>JDK 对“+”号拼接进行了优化，上面所写的拼接方式会被优化为基于 StringBuilder 的 append 方法进行处理。Java 会在编译期对“+”号进行处理。</p><p>下面是通过 javap -verbose 命令反编译字节码的结果，很显然可以看到 StringBuilder 的创建和 append 方法的调用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">stack</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, locals</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, args_size</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ldc           #</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;">// String hello</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> astore_1</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#BF9EEE;">3</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> ldc           #</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;">// String world!</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> astore_2</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#BF9EEE;">6</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;">           #4                  </span><span style="color:#7B7F8B;">// class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#F6F6F4;">     9</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> dup</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">10</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> invokespecial #</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">13</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> aload_1</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">14</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> invokevirtual #</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">17</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> aload_2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">18</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> invokevirtual #</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">21</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> invokevirtual #</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">24</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> astore_3</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">25</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">return</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stack</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, locals</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, args_size</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// String hello</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_1</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ldc           #</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// String world!</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_2</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">           #4                  </span><span style="color:#6A737D;">// class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#24292E;">     9</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> dup</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">10</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokespecial #</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">13</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">14</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> aload_2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">18</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">21</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> invokevirtual #</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">24</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> astore_3</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">25</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span></span></code></pre></div><p>也就是说其实上面的代码其实相当于：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> sb </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(a);</span></span>
<span class="line"><span style="color:#F6F6F4;">sb.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> ab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sb.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello &quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">StringBuilder sb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(a);</span></span>
<span class="line"><span style="color:#24292E;">sb.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">String ab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sb.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span></code></pre></div><p>此时，如果再笼统的回答：通过加号拼接字符串会创建多个 String 对象，因此性能比 StringBuilder 差，就是错误的了。因为本质上加号拼接的效果最终经过编译器处理之后和 StringBuilder 是一致的。</p><p>当然，循环里拼接还是建议用 StringBuilder，为什么，因为循环一次就会创建一个新的 StringBuilder 对象，大家可以自行实验。</p><h3 id="_35-intern-方法有什么作用" tabindex="-1">35.intern 方法有什么作用？ <a class="header-anchor" href="#_35-intern-方法有什么作用" aria-label="Permalink to &quot;35.intern 方法有什么作用？&quot;">​</a></h3><p>JDK 源码里已经对这个方法进行了说明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">p</span><span style="color:#F286C4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">When</span><span style="color:#F6F6F4;"> the intern method is invoked, </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> the pool already contains a</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> string equal to </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> {@</span><span style="color:#97E1F1;font-style:italic;">code</span><span style="color:#F6F6F4;"> String} object as determined by</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> the {@</span><span style="color:#97E1F1;font-style:italic;">link</span><span style="color:#F6F6F4;"> #</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(Object)} method, then the string from the pool is</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> returned. Otherwise, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> {@</span><span style="color:#97E1F1;font-style:italic;">code</span><span style="color:#F6F6F4;"> String} object is added to the</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> pool and a reference to </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;"> {@</span><span style="color:#97E1F1;font-style:italic;">code</span><span style="color:#F6F6F4;"> String} object is returned.</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">p</span><span style="color:#F286C4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> When the intern method is invoked, </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> the pool already contains a</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> string equal to </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> {@</span><span style="color:#D73A49;">code</span><span style="color:#24292E;"> String} object as determined by</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> the {@</span><span style="color:#D73A49;">link</span><span style="color:#24292E;"> #</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Object)} method, then the string from the pool is</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> returned. Otherwise, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> {@</span><span style="color:#D73A49;">code</span><span style="color:#24292E;"> String} object is added to the</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> pool and a reference to </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> {@</span><span style="color:#D73A49;">code</span><span style="color:#24292E;"> String} object is returned.</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">p</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>意思也很好懂：</p><ul><li>如果当前字符串内容存在于字符串常量池（即 equals()方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li><li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li></ul><h2 id="integer" tabindex="-1">Integer <a class="header-anchor" href="#integer" aria-label="Permalink to &quot;Integer&quot;">​</a></h2><h3 id="_36-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" tabindex="-1">36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗? <a class="header-anchor" href="#_36-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" aria-label="Permalink to &quot;36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；，相等吗?&quot;">​</a></h3><p>答案是 a 和 b 相等，c 和 d 不相等。</p><ul><li>对于基本数据类型==比较的值</li><li>对于引用数据类型==比较的是地址</li></ul><p>Integer a= 127 这种赋值，是用到了 Integer 自动装箱的机制。自动装箱的时候会去缓存池里取 Integer 对象，没有取到才会创建新的对象。</p><p>如果整型字面量的值在-128 到 127 之间，那么自动装箱时不会 new 新的 Integer 对象，而是直接引用缓存池中的 Integer 对象，超过范围 a1==b1 的结果是 false</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">127</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">127</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> b1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Integer</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">127</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(a </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> b); </span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(b</span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;">b1);  </span><span style="color:#7B7F8B;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> d);  </span><span style="color:#7B7F8B;">//false</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">        Integer a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Integer b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Integer b1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">127</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b); </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(b</span><span style="color:#D73A49;">==</span><span style="color:#24292E;">b1);  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Integer c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Integer d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> d);  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><blockquote><p>什么是 Integer 缓存？</p></blockquote><p>因为根据实践发现大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127，可以根据通过设置<code>JVM-XX:AutoBoxCacheMax=</code>来修改缓存的最大值，最小值改不了。</p><p>实现的原理是 int 在自动装箱的时候会调用 Integer.valueOf，进而用到了 IntegerCache。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-19.png" alt="Integer.valueOf"></p><p>很简单，就是判断下值是否在缓存范围之内，如果是的话去 IntegerCache 中取，不是的话就创建一个新的 Integer 对象。</p><p>IntegerCache 是一个静态内部类， 在静态块中会初始化好缓存值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">IntegerCache</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">     ……</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//创建Integer对象存储</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> k </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; k </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> cache.length; k</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                cache[k] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Integer</span><span style="color:#F6F6F4;">(j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">         ……</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntegerCache</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     ……</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//创建Integer对象存储</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> cache.length; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                cache[k] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Integer</span><span style="color:#24292E;">(j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         ……</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><h3 id="_37-string-怎么转成-integer-的-原理" tabindex="-1">37.String 怎么转成 Integer 的？原理？ <a class="header-anchor" href="#_37-string-怎么转成-integer-的-原理" aria-label="Permalink to &quot;37.String 怎么转成 Integer 的？原理？&quot;">​</a></h3><p>PS:这道题印象中在一些面经中出场过几次。</p><p>String 转成 Integer，主要有两个方法：</p><ul><li>Integer.parseInt(String s)</li><li>Integer.valueOf(String s)</li></ul><p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p><p>抛去一些边界之类的看看核心代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> radix)</span></span>
<span class="line"><span style="color:#F6F6F4;">                throws </span><span style="color:#97E1F1;font-style:italic;">NumberFormatException</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//是否是负数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> negative </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//char字符数组下标和长度</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        ……</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> digit;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//判断字符长度是否大于0，否则抛出异常</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (len </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            ……</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> len) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Accumulating negatively avoids surprises near MAX_VALUE</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//返回指定基数中字符表示的数值。（此处是十进制数值）</span></span>
<span class="line"><span style="color:#F6F6F4;">                digit </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Character.</span><span style="color:#62E884;">digit</span><span style="color:#F6F6F4;">(s.</span><span style="color:#62E884;">charAt</span><span style="color:#F6F6F4;">(i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">),radix);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//进制位乘以数值</span></span>
<span class="line"><span style="color:#F6F6F4;">                result </span><span style="color:#F286C4;">*=</span><span style="color:#F6F6F4;"> radix;</span></span>
<span class="line"><span style="color:#F6F6F4;">                result </span><span style="color:#F286C4;">-=</span><span style="color:#F6F6F4;"> digit;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//根据上面得到的是否负数，返回相应的值</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> negative </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;">result;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(String s, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> radix)</span></span>
<span class="line"><span style="color:#24292E;">                throws NumberFormatException</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//是否是负数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> negative </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//char字符数组下标和长度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        ……</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> digit;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//判断字符长度是否大于0，否则抛出异常</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ……</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Accumulating negatively avoids surprises near MAX_VALUE</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//返回指定基数中字符表示的数值。（此处是十进制数值）</span></span>
<span class="line"><span style="color:#24292E;">                digit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Character.</span><span style="color:#6F42C1;">digit</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">),radix);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//进制位乘以数值</span></span>
<span class="line"><span style="color:#24292E;">                result </span><span style="color:#D73A49;">*=</span><span style="color:#24292E;"> radix;</span></span>
<span class="line"><span style="color:#24292E;">                result </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> digit;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//根据上面得到的是否负数，返回相应的值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> negative </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-20.png" alt="parseInt示意图"></p><h2 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h2><h3 id="_38-object-类的常见方法" tabindex="-1">38.Object 类的常见方法? <a class="header-anchor" href="#_38-object-类的常见方法" aria-label="Permalink to &quot;38.Object 类的常见方法?&quot;">​</a></h3><p>Object 类是一个特殊的类，是所有类的父类，也就是说所有类都可以调用它的方法。它主要提供了以下 11 个方法，大概可以分为六类：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-21.png" alt="Object类的方法"></p><p><strong>对象比较</strong>：</p><ul><li>public native int hashCode() ：native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap。</li><li>public boolean equals(Object obj)：用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等。</li></ul><p><strong>对象拷贝</strong>：</p><ul><li>protected native Object clone() throws CloneNotSupportedException：naitive 方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常。</li></ul><p><strong>对象转字符串：</strong></p><ul><li>public String toString()：返回类的名字@实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</li></ul><p><strong>多线程调度：</strong></p><ul><li>public final native void notify()：native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</li><li>public final native void notifyAll()：native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</li><li>public final native void wait(long timeout) throws InterruptedException：native 方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间。</li><li>public final void wait(long timeout, int nanos) throws InterruptedException：多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒。</li><li>public final void wait() throws InterruptedException：跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</li></ul><p><strong>反射：</strong></p><ul><li>public final native Class&lt;?&gt; getClass()：native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</li></ul><p><strong>垃圾回收：</strong></p><ul><li>protected void finalize() throws Throwable ：通知垃圾收集器回收对象。</li></ul><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><h3 id="_39-java-中异常处理体系" tabindex="-1">39.Java 中异常处理体系? <a class="header-anchor" href="#_39-java-中异常处理体系" aria-label="Permalink to &quot;39.Java 中异常处理体系?&quot;">​</a></h3><p>Java 的异常体系是分为多层的。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-22.png" alt="Java异常体系"></p><p><code>Throwable</code>是 Java 语言中所有错误或异常的基类。 Throwable 又分为<code>Error</code>和<code>Exception</code>，其中 Error 是系统内部错误，比如虚拟机异常，是程序无法处理的。<code>Exception</code>是程序问题导致的异常，又分为两种：</p><ul><li>CheckedException 受检异常：编译器会强制检查并要求处理的异常。</li><li>RuntimeException 运行时异常：程序运行中出现异常，比如我们熟悉的空指针、数组下标越界等等</li></ul><h3 id="_40-异常的处理方式" tabindex="-1">40.异常的处理方式？ <a class="header-anchor" href="#_40-异常的处理方式" aria-label="Permalink to &quot;40.异常的处理方式？&quot;">​</a></h3><p>针对异常的处理主要有两种方式：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-23.png" alt="异常处理"></p><ul><li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li></ul><p>抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常。</p><p>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</p><ul><li><strong>try catch 捕获异常</strong></li></ul><p>在 catch 语句块中补货发生的异常，并进行处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//包含可能会出现异常的代码以及声明异常的方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//捕获异常并进行处理</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {                                                       }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//可选，必执行的代码</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//包含可能会出现异常的代码以及声明异常的方法</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//捕获异常并进行处理</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {                                                       }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//可选，必执行的代码</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span></code></pre></div><p>try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。</p><h3 id="_41-三道经典异常处理代码题" tabindex="-1">41.三道经典异常处理代码题 <a class="header-anchor" href="#_41-三道经典异常处理代码题" aria-label="Permalink to &quot;41.三道经典异常处理代码题&quot;">​</a></h3><blockquote><p>题目 1</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TryDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TryDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行结果：31。</p><p>try、catch。finally 的基础用法，在 return 前会先执行 finally 语句块，所以是先输出 finally 里的 3，再输出 return 的 1。</p><blockquote><p>题目 2</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TryDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TryDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行结果：3。</p><p>try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。</p><p>finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的。</p><blockquote><p>题目 3</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TryDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TryDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行结果：2。</p><p>大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p><p>但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p><h2 id="i-o" tabindex="-1">I/O <a class="header-anchor" href="#i-o" aria-label="Permalink to &quot;I/O&quot;">​</a></h2><h3 id="_42-java-中-io-流分为几种" tabindex="-1">42.Java 中 IO 流分为几种? <a class="header-anchor" href="#_42-java-中-io-流分为几种" aria-label="Permalink to &quot;42.Java 中 IO 流分为几种?&quot;">​</a></h3><p>流按照不同的特点，有很多种划分方式。</p><ul><li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li><li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li><li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li></ul><p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-24.jpeg" alt="IO-操作方式分类-图片来源参考[2]"></p><blockquote><p>IO 流用到了什么设计模式？</p></blockquote><p>其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p><p>InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-25.png" alt="Java IO流用到装饰器模式"></p><h3 id="_43-既然有了字节流-为什么还要有字符流" tabindex="-1">43.既然有了字节流,为什么还要有字符流? <a class="header-anchor" href="#_43-既然有了字节流-为什么还要有字符流" aria-label="Permalink to &quot;43.既然有了字节流,为什么还要有字符流?&quot;">​</a></h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p><p>所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h3 id="_44-bio、nio、aio" tabindex="-1">44.BIO、NIO、AIO？ <a class="header-anchor" href="#_44-bio、nio、aio" aria-label="Permalink to &quot;44.BIO、NIO、AIO？&quot;">​</a></h3><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-26.png" alt="BIO、NIO、AIO"></p><p><strong>BIO</strong>(blocking I/O) ： 就是传统的 IO，同步阻塞，服务器实现模式为一个连接一个线程，即<strong>客户端有连接请求时服务器端就需要启动一个线程进行处理</strong>，如果这个连接不做任何事情会造成不必要的线程开销，可以通过连接池机制改善(实现多个客户连接服务器)。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-27.png" alt="BIO、NIO、AIO"></p><p>BIO 方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4 以前的唯一选择，程序简单易理解。</p><p><strong>NIO</strong> ：全称 java non-blocking IO，是指 JDK 提供的新 API。从 JDK1.4 开始，Java 提供了一系列改进的输入/输出的新特性，被统称为 NIO(即 New IO)。</p><p>NIO 是<strong>同步非阻塞</strong>的，服务器端用一个线程处理多个连接，客户端发送的连接请求会注册到多路复用器上，多路复用器轮询到连接有 IO 请求就进行处理：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-28.png" alt="NIO线程"></p><p>NIO 的数据是面向<strong>缓冲区 Buffer</strong>的，必须从 Buffer 中读取或写入。</p><p>所以完整的 NIO 示意图：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-29.png" alt="NIO完整示意图"></p><p>可以看出，NIO 的运行机制：</p><ul><li>每个 Channel 对应一个 Buffer。</li><li>Selector 对应一个线程，一个线程对应多个 Channel。</li><li>Selector 会根据不同的事件，在各个通道上切换。</li><li>Buffer 是内存块，底层是数据。</li></ul><p><strong>AIO</strong>：JDK 7 引入了 Asynchronous I/O，是<strong>异步不阻塞</strong>的 IO。在进行 I/O 编程中，常用到两种模式：Reactor 和 Proactor。Java 的 NIO 就是 Reactor，当有事件触发时，服务器端得到通知，进行相应的处理，完成后才通知服务端程序启动线程去处理，一般适用于连接数较多且连接时间较长的应用。</p><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><h3 id="_45-什么是序列化-什么是反序列化" tabindex="-1">45.什么是序列化？什么是反序列化？ <a class="header-anchor" href="#_45-什么是序列化-什么是反序列化" aria-label="Permalink to &quot;45.什么是序列化？什么是反序列化？&quot;">​</a></h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p><p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-30.png" alt="序列化和反序列化"></p><p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p><blockquote><p>Serializable 接口有什么用？</p></blockquote><p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。</p><blockquote><p>serialVersionUID 又有什么用？</p></blockquote><p>serialVersionUID 就是起验证作用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> serialVersionUID </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> serialVersionUID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">;</span></span></code></pre></div><p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p><p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p><p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p><p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p><p>因为类的结构变了，所以 serialVersionUID 就不一致。</p><blockquote><p>Java 序列化不包含静态变量？</p></blockquote><p>序列化的时候是不包含静态变量的。</p><blockquote><p>如果有些变量不想序列化，怎么办？</p></blockquote><p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p><h3 id="_46-说说有几种序列化方式" tabindex="-1">46.说说有几种序列化方式？ <a class="header-anchor" href="#_46-说说有几种序列化方式" aria-label="Permalink to &quot;46.说说有几种序列化方式？&quot;">​</a></h3><p>Java 序列化方式有很多，常见的有三种：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-31.png" alt="Java常见序列化方式"></p><ul><li>Java 对象序列化 ：Java 原生序列化方法即通过 Java 原生流(InputStream 和 OutputStream 之间的转化)的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectInputStream</code>。</li><li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li><li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li></ul><h2 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h2><h3 id="_47-java-泛型了解么-什么是类型擦除-介绍一下常用的通配符" tabindex="-1">47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ <a class="header-anchor" href="#_47-java-泛型了解么-什么是类型擦除-介绍一下常用的通配符" aria-label="Permalink to &quot;47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？&quot;">​</a></h3><blockquote><p>什么是泛型？</p></blockquote><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//这里直接添加会报错</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> List&gt; clazz </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> add </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">add</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, Object.class);</span></span>
<span class="line"><span style="color:#7B7F8B;">//但是通过反射添加，是可以的</span></span>
<span class="line"><span style="color:#F6F6F4;">add.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">kl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//这里直接添加会报错</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">List</span><span style="color:#24292E;">&gt; clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Method add </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;add&quot;</span><span style="color:#24292E;">, Object.class);</span></span>
<span class="line"><span style="color:#6A737D;">//但是通过反射添加，是可以的</span></span>
<span class="line"><span style="color:#24292E;">add.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;kl&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(list);</span></span></code></pre></div><p>泛型一般有三种使用方式:<strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-32.png" alt="泛型类、泛型接口、泛型方法"></p><p><strong>1.泛型类</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span>
<span class="line"><span style="color:#7B7F8B;">//在实例化泛型类时，必须指定T的具体类型</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Generic</span><span style="color:#F6F6F4;">&lt;T&gt;{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> key;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Generic</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> key;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> key;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span></span>
<span class="line"><span style="color:#6A737D;">//在实例化泛型类时，必须指定T的具体类型</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Generic</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T key;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Generic</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> key;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如何实例化泛型类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Generic</span><span style="color:#F6F6F4;">&lt;Integer&gt; genericInteger </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Generic</span><span style="color:#F6F6F4;">&lt;Integer&gt;(</span><span style="color:#BF9EEE;">123456</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Generic&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; genericInteger </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Generic&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>2.泛型接口</strong> ：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Generator</span><span style="color:#F6F6F4;">&lt;T&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Generator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实现泛型接口，指定类型：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">GeneratorImpl</span><span style="color:#F6F6F4;">&lt;T&gt; </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Generator</span><span style="color:#F6F6F4;">&lt;String&gt;{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratorImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Generator</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>3.泛型方法</strong> ：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> E </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printArray</span><span style="color:#F6F6F4;">( </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;">[] inputArray )</span></span>
<span class="line"><span style="color:#F6F6F4;">   {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> ( </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> inputArray ){</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">( </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">%s </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, element );</span></span>
<span class="line"><span style="color:#F6F6F4;">         }</span></span>
<span class="line"><span style="color:#F6F6F4;">         System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> E </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printArray</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">E</span><span style="color:#24292E;">[] inputArray )</span></span>
<span class="line"><span style="color:#24292E;">   {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ( E element </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> inputArray ){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">( </span><span style="color:#032F62;">&quot;%s &quot;</span><span style="color:#24292E;">, element );</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建不同类型数组： Integer, Double 和 Character</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;">[] intArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] stringArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">World</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#62E884;">printArray</span><span style="color:#F6F6F4;">( intArray  );</span></span>
<span class="line"><span style="color:#62E884;">printArray</span><span style="color:#F6F6F4;">( stringArray  );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建不同类型数组： Integer, Double 和 Character</span></span>
<span class="line"><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">[] intArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] stringArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;World&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#6F42C1;">printArray</span><span style="color:#24292E;">( intArray  );</span></span>
<span class="line"><span style="color:#6F42C1;">printArray</span><span style="color:#24292E;">( stringArray  );</span></span></code></pre></div><blockquote><p>泛型常用的通配符有哪些？</p></blockquote><p><strong>常用的通配符为： T，E，K，V，？</strong></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><blockquote><p>什么是泛型擦除？</p></blockquote><p>所谓的泛型擦除，官方名叫“类型擦除”。</p><p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p><p>也就是说，在运行的时候是没有泛型的。</p><p>例如这段代码，往一群猫里放条狗：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;Cat&gt; cats </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;">&lt;Cat&gt;();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cats;  </span><span style="color:#7B7F8B;">// 注意我在这里把范型去掉了，但是list和cats是同一个链表！</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Dog</span><span style="color:#F6F6F4;">());  </span><span style="color:#7B7F8B;">// 完全没问题！</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LinkedList&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt; cats </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedList&lt;</span><span style="color:#D73A49;">Cat</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">LinkedList list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cats;  </span><span style="color:#6A737D;">// 注意我在这里把范型去掉了，但是list和cats是同一个链表！</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">());  </span><span style="color:#6A737D;">// 完全没问题！</span></span></code></pre></div><p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java<strong>运行</strong>环境）看来和下面这段没区别：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;"> cats </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">LinkedList</span><span style="color:#F6F6F4;">();  </span><span style="color:#7B7F8B;">// 注意：没有范型！</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedList</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cats;</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Dog</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LinkedList cats </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedList</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// 注意：没有范型！</span></span>
<span class="line"><span style="color:#24292E;">LinkedList list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cats;</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">());</span></span></code></pre></div><p>为什么要类型擦除呢？</p><p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p><h2 id="注解" tabindex="-1">注解 <a class="header-anchor" href="#注解" aria-label="Permalink to &quot;注解&quot;">​</a></h2><h3 id="_48-说一下你对注解的理解" tabindex="-1">48.说一下你对注解的理解？ <a class="header-anchor" href="#_48-说一下你对注解的理解" aria-label="Permalink to &quot;48.说一下你对注解的理解？&quot;">​</a></h3><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-33.png" alt="Java注解和帽子"></p><p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p><p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p><p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p><p>注解生命周期有三大类，分别是：</p><ul><li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li><li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li><li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li></ul><p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p><p>像常见的：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-34.png" alt="Override注解"></p><p>就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。</p><p>再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 required 。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-35.png" alt="Autowired注解"></p><h2 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-label="Permalink to &quot;反射&quot;">​</a></h2><h3 id="_49-什么是反射-应用-原理" tabindex="-1">49.什么是反射？应用？原理？ <a class="header-anchor" href="#_49-什么是反射-应用-原理" aria-label="Permalink to &quot;49.什么是反射？应用？原理？&quot;">​</a></h3><blockquote><p>什么是反射？</p></blockquote><p>我们通常都是利用<code>new</code>方式来创建对象实例，这可以说就是一种“正射”，这种方式在编译时候就确定了类型信息。</p><p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p><p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><p>反射最核心的四个类：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-36.png" alt="Java反射相关类"></p><blockquote><p>反射的应用场景？</p></blockquote><p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p><p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p><p>像 Spring 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p><p>就像为什么我们使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p><p>这些都是因为我们可以基于反射操作类，然后获取到类/属性/方法/方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类/属性/方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p><blockquote><p>反射的原理？</p></blockquote><p>我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码(.class)文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p><h2 id="jdk1-8-新特性" tabindex="-1">JDK1.8 新特性 <a class="header-anchor" href="#jdk1-8-新特性" aria-label="Permalink to &quot;JDK1.8 新特性&quot;">​</a></h2><p>JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p><h3 id="_50-jdk1-8-都有哪些新特性" tabindex="-1">50.JDK1.8 都有哪些新特性？ <a class="header-anchor" href="#_50-jdk1-8-都有哪些新特性" aria-label="Permalink to &quot;50.JDK1.8 都有哪些新特性？&quot;">​</a></h3><p>JDK1.8 有不少新特性，我们经常接触到的新特性如下：</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-37.png" alt="JDK1.8主要新特性"></p><ul><li><p>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p></li><li><p>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。</p></li><li><p>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。</p><p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p><p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p></li><li><p>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。</p></li><li><p>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。</p></li></ul><h3 id="_51-lambda-表达式了解多少" tabindex="-1">51.Lambda 表达式了解多少？ <a class="header-anchor" href="#_51-lambda-表达式了解多少" aria-label="Permalink to &quot;51.Lambda 表达式了解多少？&quot;">​</a></h3><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p><p>比如我们以前使用 Runnable 创建并运行线程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Thread is running before Java8!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Thread is running before Java8!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">( () </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Thread is running since Java8!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) ).</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">( () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Thread is running since Java8!&quot;</span><span style="color:#24292E;">) ).</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre></div><p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p><p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p><blockquote><p>Java8 有哪些内置函数式接口？</p></blockquote><p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。</p><p>除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。</p><h3 id="_52-optional-了解吗" tabindex="-1">52.Optional 了解吗？ <a class="header-anchor" href="#_52-optional-了解吗" aria-label="Permalink to &quot;52.Optional 了解吗？&quot;">​</a></h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p><p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optional </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bam</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">optional.</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">();           </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">optional.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// &quot;bam&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">optional.</span><span style="color:#62E884;">orElse</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fallback</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);    </span><span style="color:#7B7F8B;">// &quot;bam&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">optional.</span><span style="color:#62E884;">ifPresent</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s.</span><span style="color:#62E884;">charAt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)));     </span><span style="color:#7B7F8B;">// &quot;b&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bam&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">optional.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">();           </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">optional.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// &quot;bam&quot;</span></span>
<span class="line"><span style="color:#24292E;">optional.</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fallback&quot;</span><span style="color:#24292E;">);    </span><span style="color:#6A737D;">// &quot;bam&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">optional.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)));     </span><span style="color:#6A737D;">// &quot;b&quot;</span></span></code></pre></div><h3 id="_53-stream-流用过吗" tabindex="-1">53.Stream 流用过吗？ <a class="header-anchor" href="#_53-stream-流用过吗" aria-label="Permalink to &quot;53.Stream 流用过吗？&quot;">​</a></h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 <em>终端操作</em>。 终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p><p>Stream 流一般用于集合，我们对一个集合做几个常见操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; stringCollection </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ddd2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aaa2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bbb1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aaa1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bbb3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ccc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bbb2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">stringCollection.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ddd1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; stringCollection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ddd2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;aaa2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bbb1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;aaa1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bbb3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ccc&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bbb2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">stringCollection.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ddd1&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li><strong>Filter 过滤</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;aaa2&quot;, &quot;aaa1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stringCollection</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa2&quot;, &quot;aaa1&quot;</span></span></code></pre></div><ul><li><strong>Sorted 排序</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;aaa1&quot;, &quot;aaa2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stringCollection</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa1&quot;, &quot;aaa2&quot;</span></span></code></pre></div><ul><li><strong>Map 转换</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(String</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">toUpperCase)</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">((a, b) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> b.</span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(a))</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">stringCollection</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toUpperCase)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">((a, b) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(a))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span></span></code></pre></div><ul><li><strong>Match 匹配</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> anyStartsWithA </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">    stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">anyMatch</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(anyStartsWithA);      </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 验证 list 中 string 是否都是以 a 开头的</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> allStartsWithA </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">    stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">allMatch</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(allStartsWithA);      </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 验证 list 中 string 是否都不是以 z 开头的,</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> noneStartsWithZ </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">    stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">noneMatch</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">z</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(noneStartsWithZ);      </span><span style="color:#7B7F8B;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> anyStartsWithA </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">anyMatch</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(anyStartsWithA);      </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否都是以 a 开头的</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> allStartsWithA </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">allMatch</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(allStartsWithA);      </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 验证 list 中 string 是否都不是以 z 开头的,</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> noneStartsWithZ </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">noneMatch</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;z&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(noneStartsWithZ);      </span><span style="color:#6A737D;">// true</span></span></code></pre></div><ul><li><strong>Count 计数</strong></li></ul><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> startsWithB </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">    stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">((s) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">count</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(startsWithB);    </span><span style="color:#7B7F8B;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startsWithB </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((s) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(startsWithB);    </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><ul><li><strong>Reduce</strong></li></ul><p><code>Reduce</code> 中文翻译为：<em>减少、缩小</em>。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; reduced </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">    stringCollection</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">sorted</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((s1, s2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">#</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">reduced.</span><span style="color:#62E884;">ifPresent</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; reduced </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    stringCollection</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">sorted</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((s1, s2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;#&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">reduced.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span></span></code></pre></div><p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p><p><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-38.png" alt="Java Stream流"></p><hr><p><em>没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟</em>。</p>`,442),e=[o];function t(c,r,y,i,F,E){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{u as __pageData,g as default};
