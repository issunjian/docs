import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/ReentrantReadWriteLock-f714bdd6-917a-4d25-ac11-7e85b0ec1b14.edaf9965.png",C=JSON.parse('{"title":"深入理解Java并发读写锁ReentrantReadWriteLock","description":"深入理解Java并发读写锁ReentrantReadWriteLock","frontmatter":{"title":"深入理解Java并发读写锁ReentrantReadWriteLock","shortTitle":"读写锁ReentrantReadWriteLock","description":"深入理解Java并发读写锁ReentrantReadWriteLock","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,读写锁,ReentrantReadWriteLock"}]]},"headers":[],"relativePath":"backend/tobetter/thread/ReentrantReadWriteLock.md","filePath":"backend/tobetter/thread/ReentrantReadWriteLock.md"}'),o={name:"backend/tobetter/thread/ReentrantReadWriteLock.md"},e=l(`<h1 id="深入理解java并发读写锁reentrantreadwritelock" tabindex="-1">深入理解Java并发读写锁ReentrantReadWriteLock <a class="header-anchor" href="#深入理解java并发读写锁reentrantreadwritelock" aria-label="Permalink to &quot;深入理解Java并发读写锁ReentrantReadWriteLock&quot;">​</a></h1><p>在并发场景中用于解决线程安全的问题，我们几乎会高频率的使用到独占式锁，通常使用java提供的关键字synchronized或者concurrents包中实现了Lock接口的ReentrantLock。它们都是独占式获取锁，也就是在同一时刻只有一个线程能够获取锁。</p><p>而在一些业务场景中，大部分只是读数据，写数据很少，如果仅仅是读数据的话并不会影响数据正确性（出现脏读），而如果在这种业务场景下，依然使用独占锁的话，很显然这将是出现性能瓶颈的地方。针对这种读多写少的情况，java还提供了另外一个实现Lock接口的ReentrantReadWriteLock(读写锁)。</p><p><strong>读写锁允许同一时刻被多个读线程访问，但是在写线程访问时，所有的读线程和其他的写线程都会被阻塞</strong>。在分析WirteLock和ReadLock的互斥性时可以按照WriteLock与WriteLock之间，WriteLock与ReadLock之间以及ReadLock与ReadLock之间进行分析。</p><p>更多关于读写锁特性介绍大家可以看源码上的介绍（阅读源码时最好的一种学习方式，我也正在学习中，与大家共勉），这里做一个归纳总结：</p><ol><li><strong>公平性选择</strong>：支持非公平性（默认）和公平的锁获取方式，吞吐量还是非公平优于公平；</li><li><strong>重入性</strong>：支持重入，读锁获取后能再次获取，写锁获取之后能够再次获取写锁，同时也能够获取读锁；</li><li><strong>锁降级</strong>：遵循获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁</li></ol><p>要想能够彻底的理解读写锁必须能够理解这样几个问题：</p><ul><li><ol><li>读写锁是怎样实现分别记录读写状态的？</li></ol></li><li><ol start="2"><li>写锁是怎样获取和释放的？</li></ol></li><li>3.读锁是怎样获取和释放的？</li></ul><p>我们带着这样的三个问题，再去了解下读写锁。</p><h2 id="写锁详解" tabindex="-1">写锁详解 <a class="header-anchor" href="#写锁详解" aria-label="Permalink to &quot;写锁详解&quot;">​</a></h2><h3 id="写锁的获取" tabindex="-1">写锁的获取 <a class="header-anchor" href="#写锁的获取" aria-label="Permalink to &quot;写锁的获取&quot;">​</a></h3><p>同步组件的实现聚合了同步器（AQS），并通过重写重写同步器（AQS）中的方法实现同步组件的同步语义。因此，写锁的实现依然也是采用这种方式。在同一时刻写锁是不能被多个线程所获取，很显然写锁是独占式锁，而实现写锁的同步语义是通过重写AQS中的tryAcquire方法实现的。源码为:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tryAcquire</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> acquires) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">     * Walkthrough:</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 1. If read count nonzero or write count nonzero</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    and owner is a different thread, fail.</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 2. If count would saturate, fail. (This can only</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    happen if count is already nonzero.)</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 3. Otherwise, this thread is eligible for lock if</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    it is either a reentrant acquire or</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    queue policy allows it. If so, update state</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    and set owner.</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> current </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 1. 获取写锁当前的同步状态</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 2. 获取写锁获取的次数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> w </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">exclusiveCount</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (c </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 3.1 当读锁已被读线程获取或者当前线程不是已经获取写锁的线程的话</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 当前线程获取写锁失败</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (w </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> current </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getExclusiveOwnerThread</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (w </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">exclusiveCount</span><span style="color:#F6F6F4;">(acquires) </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> MAX_COUNT)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Maximum lock count exceeded</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Reentrant acquire</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 3.2 当前线程获取写锁，支持可重复加锁</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(c </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> acquires);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 3.3 写锁未被任何线程获取，当前线程可获取写锁</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">writerShouldBlock</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">!</span><span style="color:#62E884;">compareAndSetState</span><span style="color:#F6F6F4;">(c, c </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> acquires))</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setExclusiveOwnerThread</span><span style="color:#F6F6F4;">(current);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryAcquire</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> acquires) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">     * Walkthrough:</span></span>
<span class="line"><span style="color:#6A737D;">     * 1. If read count nonzero or write count nonzero</span></span>
<span class="line"><span style="color:#6A737D;">     *    and owner is a different thread, fail.</span></span>
<span class="line"><span style="color:#6A737D;">     * 2. If count would saturate, fail. (This can only</span></span>
<span class="line"><span style="color:#6A737D;">     *    happen if count is already nonzero.)</span></span>
<span class="line"><span style="color:#6A737D;">     * 3. Otherwise, this thread is eligible for lock if</span></span>
<span class="line"><span style="color:#6A737D;">     *    it is either a reentrant acquire or</span></span>
<span class="line"><span style="color:#6A737D;">     *    queue policy allows it. If so, update state</span></span>
<span class="line"><span style="color:#6A737D;">     *    and set owner.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    Thread current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 1. 获取写锁当前的同步状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 2. 获取写锁获取的次数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exclusiveCount</span><span style="color:#24292E;">(c);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (c </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 3.1 当读锁已被读线程获取或者当前线程不是已经获取写锁的线程的话</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 当前线程获取写锁失败</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (w </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> current </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExclusiveOwnerThread</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (w </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exclusiveCount</span><span style="color:#24292E;">(acquires) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> MAX_COUNT)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Maximum lock count exceeded&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Reentrant acquire</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 3.2 当前线程获取写锁，支持可重复加锁</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> acquires);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 3.3 写锁未被任何线程获取，当前线程可获取写锁</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">writerShouldBlock</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">compareAndSetState</span><span style="color:#24292E;">(c, c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> acquires))</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setExclusiveOwnerThread</span><span style="color:#24292E;">(current);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码的逻辑请看注释，这里有一个地方需要重点关注，exclusiveCount(c)方法，该方法源码为：</p><p><code>static int exclusiveCount(int c) { return c &amp; EXCLUSIVE_MASK; }</code></p><p>其中<strong>EXCLUSIVE_MASK</strong>为: <code>static final int EXCLUSIVE_MASK = (1 &lt;&lt; SHARED_SHIFT) - 1;</code> EXCLUSIVE_MASK 为1左移16位然后减1，即为0x0000FFFF。而exclusiveCount方法是将同步状态（state为int类型）与0x0000FFFF相与，即取同步状态的低16位。那么低16位代表什么呢？根据exclusiveCount方法的注释为独占式获取的次数即写锁被获取的次数，现在就可以得出来一个结论<strong>同步状态的低16位用来表示写锁的获取次数</strong>。同时还有一个方法值得我们注意：</p><p><code>static int sharedCount(int c) { return c &gt;&gt;&gt; SHARED_SHIFT; }</code></p><p>该方法是获取读锁被获取的次数，是将同步状态（int c）右移16次，即取同步状态的高16位，现在我们可以得出另外一个结论<strong>同步状态的高16位用来表示读锁被获取的次数</strong>。现在还记得我们开篇说的需要弄懂的第一个问题吗？读写锁是怎样实现分别记录读锁和写锁的状态的，现在这个问题的答案就已经被我们弄清楚了，其示意图如下图所示：</p><img src="`+p+`"><p>现在我们回过头来看写锁获取方法tryAcquire，其主要逻辑为：<strong>当读锁已经被读线程获取或者写锁已经被其他写线程获取，则写锁获取失败；否则，获取成功并支持重入，增加写状态。</strong></p><h3 id="写锁的释放" tabindex="-1">写锁的释放 <a class="header-anchor" href="#写锁的释放" aria-label="Permalink to &quot;写锁的释放&quot;">​</a></h3><p>写锁释放通过重写AQS的tryRelease方法，源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tryRelease</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> releases) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#62E884;">isHeldExclusively</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IllegalMonitorStateException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 同步状态减去写状态</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nextc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> releases;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//2. 当前写状态是否为0，为0则释放写锁</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> free </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">exclusiveCount</span><span style="color:#F6F6F4;">(nextc) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (free)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">setExclusiveOwnerThread</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//3. 不为0则更新同步状态</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(nextc);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> free;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryRelease</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> releases) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isHeldExclusively</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalMonitorStateException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 同步状态减去写状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nextc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> releases;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//2. 当前写状态是否为0，为0则释放写锁</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> free </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exclusiveCount</span><span style="color:#24292E;">(nextc) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (free)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setExclusiveOwnerThread</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//3. 不为0则更新同步状态</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(nextc);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> free;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>源码的实现逻辑请看注释，不难理解与ReentrantLock基本一致，这里需要注意的是，减少写状态<code> int nextc = getState() - releases;</code>只需要用<strong>当前同步状态直接减去写状态的原因正是我们刚才所说的写状态是由同步状态的低16位表示的</strong>。</p><h2 id="读锁详解" tabindex="-1">读锁详解 <a class="header-anchor" href="#读锁详解" aria-label="Permalink to &quot;读锁详解&quot;">​</a></h2><h3 id="读锁的获取" tabindex="-1">读锁的获取 <a class="header-anchor" href="#读锁的获取" aria-label="Permalink to &quot;读锁的获取&quot;">​</a></h3><p>看完了写锁，现在来看看读锁，读锁不是独占式锁，即同一时刻该锁可以被多个读线程获取也就是一种共享式锁。按照之前对AQS介绍，实现共享式同步组件的同步语义需要通过重写AQS的tryAcquireShared方法和tryReleaseShared方法。读锁的获取实现方法为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tryAcquireShared</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> unused) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">     * Walkthrough:</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 1. If write lock held by another thread, fail.</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 2. Otherwise, this thread is eligible for</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    lock wrt state, so ask if it should block</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    because of queue policy. If not, try</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    to grant by CASing state and updating count.</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    Note that step does not check for reentrant</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    acquires, which is postponed to full version</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    to avoid having to check hold count in</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    the more typical non-reentrant case.</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 3. If step 2 fails either because thread</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    apparently not eligible or CAS fails or count</span></span>
<span class="line"><span style="color:#7B7F8B;">     *    saturated, chain to version with full retry loop.</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> current </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 如果写锁已经被获取并且获取写锁的线程不是当前线程的话，当前</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 线程获取读锁失败返回-1</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">exclusiveCount</span><span style="color:#F6F6F4;">(c) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">getExclusiveOwnerThread</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> current)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> r </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sharedCount</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#62E884;">readerShouldBlock</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">        r </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> MAX_COUNT </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2. 当前线程获取读锁</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">compareAndSetState</span><span style="color:#F6F6F4;">(c, c </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> SHARED_UNIT)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//3. 下面的代码主要是新增的一些功能，比如getReadHoldCount()方法</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//返回当前获取读锁的次数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (r </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            firstReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> current;</span></span>
<span class="line"><span style="color:#F6F6F4;">            firstReaderHoldCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (firstReader </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> current) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            firstReaderHoldCount</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">HoldCounter</span><span style="color:#F6F6F4;"> rh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cachedHoldCounter;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (rh </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> rh.tid </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThreadId</span><span style="color:#F6F6F4;">(current))</span></span>
<span class="line"><span style="color:#F6F6F4;">                cachedHoldCounter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> rh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> readHolds.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (rh.count </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                readHolds.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(rh);</span></span>
<span class="line"><span style="color:#F6F6F4;">            rh.count</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//4. 处理在第二步中CAS操作失败的自旋已经实现重入性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fullTryAcquireShared</span><span style="color:#F6F6F4;">(current);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryAcquireShared</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> unused) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">     * Walkthrough:</span></span>
<span class="line"><span style="color:#6A737D;">     * 1. If write lock held by another thread, fail.</span></span>
<span class="line"><span style="color:#6A737D;">     * 2. Otherwise, this thread is eligible for</span></span>
<span class="line"><span style="color:#6A737D;">     *    lock wrt state, so ask if it should block</span></span>
<span class="line"><span style="color:#6A737D;">     *    because of queue policy. If not, try</span></span>
<span class="line"><span style="color:#6A737D;">     *    to grant by CASing state and updating count.</span></span>
<span class="line"><span style="color:#6A737D;">     *    Note that step does not check for reentrant</span></span>
<span class="line"><span style="color:#6A737D;">     *    acquires, which is postponed to full version</span></span>
<span class="line"><span style="color:#6A737D;">     *    to avoid having to check hold count in</span></span>
<span class="line"><span style="color:#6A737D;">     *    the more typical non-reentrant case.</span></span>
<span class="line"><span style="color:#6A737D;">     * 3. If step 2 fails either because thread</span></span>
<span class="line"><span style="color:#6A737D;">     *    apparently not eligible or CAS fails or count</span></span>
<span class="line"><span style="color:#6A737D;">     *    saturated, chain to version with full retry loop.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    Thread current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 如果写锁已经被获取并且获取写锁的线程不是当前线程的话，当前</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 线程获取读锁失败返回-1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">exclusiveCount</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getExclusiveOwnerThread</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> current)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sharedCount</span><span style="color:#24292E;">(c);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">readerShouldBlock</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        r </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAX_COUNT </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2. 当前线程获取读锁</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">compareAndSetState</span><span style="color:#24292E;">(c, c </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> SHARED_UNIT)) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//3. 下面的代码主要是新增的一些功能，比如getReadHoldCount()方法</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//返回当前获取读锁的次数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            firstReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> current;</span></span>
<span class="line"><span style="color:#24292E;">            firstReaderHoldCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (firstReader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> current) {</span></span>
<span class="line"><span style="color:#24292E;">            firstReaderHoldCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            HoldCounter rh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedHoldCounter;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rh </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> rh.tid </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThreadId</span><span style="color:#24292E;">(current))</span></span>
<span class="line"><span style="color:#24292E;">                cachedHoldCounter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readHolds.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rh.count </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                readHolds.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(rh);</span></span>
<span class="line"><span style="color:#24292E;">            rh.count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//4. 处理在第二步中CAS操作失败的自旋已经实现重入性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fullTryAcquireShared</span><span style="color:#24292E;">(current);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码的逻辑请看注释，需要注意的是 <strong>当写锁被其他线程获取后，读锁获取失败</strong>，否则获取成功利用CAS更新同步状态。</p><p>另外，当前同步状态需要加上SHARED_UNIT（<code>(1 &lt;&lt; SHARED_SHIFT)</code>即0x00010000）的原因这是我们在上面所说的同步状态的高16位用来表示读锁被获取的次数。如果CAS失败或者已经获取读锁的线程再次获取读锁时，是靠fullTryAcquireShared方法实现的，这段代码就不展开说了，有兴趣可以看看。</p><h3 id="读锁的释放" tabindex="-1">读锁的释放 <a class="header-anchor" href="#读锁的释放" aria-label="Permalink to &quot;读锁的释放&quot;">​</a></h3><p>读锁释放的实现主要通过方法tryReleaseShared，源码如下，主要逻辑请看注释：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tryReleaseShared</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> unused) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> current </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 前面还是为了实现getReadHoldCount等新功能</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (firstReader </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> current) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// assert firstReaderHoldCount &gt; 0;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (firstReaderHoldCount </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            firstReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">            firstReaderHoldCount</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">HoldCounter</span><span style="color:#F6F6F4;"> rh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cachedHoldCounter;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (rh </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> rh.tid </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThreadId</span><span style="color:#F6F6F4;">(current))</span></span>
<span class="line"><span style="color:#F6F6F4;">            rh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> readHolds.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> rh.count;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (count </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            readHolds.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (count </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">unmatchedUnlockException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">rh.count;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getState</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 读锁释放 将同步状态减去读状态即可</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nextc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> SHARED_UNIT;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">compareAndSetState</span><span style="color:#F6F6F4;">(c, nextc))</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// Releasing the read lock has no effect on readers,</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// but it may allow waiting writers to proceed if</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// both read and write locks are now free.</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> nextc </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryReleaseShared</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> unused) {</span></span>
<span class="line"><span style="color:#24292E;">    Thread current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 前面还是为了实现getReadHoldCount等新功能</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (firstReader </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> current) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// assert firstReaderHoldCount &gt; 0;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (firstReaderHoldCount </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            firstReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            firstReaderHoldCount</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        HoldCounter rh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cachedHoldCounter;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rh </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> rh.tid </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThreadId</span><span style="color:#24292E;">(current))</span></span>
<span class="line"><span style="color:#24292E;">            rh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readHolds.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rh.count;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (count </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            readHolds.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (count </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unmatchedUnlockException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">rh.count;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 读锁释放 将同步状态减去读状态即可</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nextc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> SHARED_UNIT;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">compareAndSetState</span><span style="color:#24292E;">(c, nextc))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Releasing the read lock has no effect on readers,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// but it may allow waiting writers to proceed if</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// both read and write locks are now free.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nextc </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="锁降级" tabindex="-1">锁降级 <a class="header-anchor" href="#锁降级" aria-label="Permalink to &quot;锁降级&quot;">​</a></h2><p>读写锁支持锁降级，<strong>遵循按照获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁</strong>，不支持锁升级，关于锁降级下面的示例代码摘自ReentrantWriteReadLock源码中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">processCachedData</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    rwl.</span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">lock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">cacheValid) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Must release read lock before acquiring write lock</span></span>
<span class="line"><span style="color:#F6F6F4;">        rwl.</span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        rwl.</span><span style="color:#62E884;">writeLock</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">lock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// Recheck state because another thread might have</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// acquired write lock and changed state before we did.</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">cacheValid) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ...</span></span>
<span class="line"><span style="color:#F6F6F4;">        cacheValid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// Downgrade by acquiring read lock before releasing write lock</span></span>
<span class="line"><span style="color:#F6F6F4;">      rwl.</span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">lock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      rwl.</span><span style="color:#62E884;">writeLock</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// Unlock write, still hold read</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    rwl.</span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processCachedData</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    rwl.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cacheValid) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Must release read lock before acquiring write lock</span></span>
<span class="line"><span style="color:#24292E;">        rwl.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        rwl.</span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Recheck state because another thread might have</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// acquired write lock and changed state before we did.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">cacheValid) {</span></span>
<span class="line"><span style="color:#24292E;">                data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...</span></span>
<span class="line"><span style="color:#24292E;">        cacheValid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// Downgrade by acquiring read lock before releasing write lock</span></span>
<span class="line"><span style="color:#24292E;">      rwl.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      rwl.</span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Unlock write, still hold read</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    rwl.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><blockquote><p>内容大部分来源以下三个开源仓库：</p><ul><li><a href="http://concurrent.redspider.group/" target="_blank" rel="noreferrer">深入浅出 Java 多线程</a></li><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a></li><li><a href="https://github.com/CoderLeixiaoshuai/java-eight-part" target="_blank" rel="noreferrer">Java八股文</a></li></ul></blockquote><hr>`,39),t=[e];function c(r,y,F,i,E,d){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{C as __pageData,h as default};
