import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const g=JSON.parse('{"title":"聊聊 Java String、StringBuilder、StringBuffer 三兄弟","description":"在本文中，我们将详细探讨 Java 中 String、StringBuilder 和 StringBuffer 的差异和使用场景。学习如何根据实际需求选择正确的字符串处理类，了解它们在性能、线程安全和内存开销方面的优缺点。本文还将解析它们的内部实现，帮助你更好地理解 Java 字符串处理的原理和最佳实践。","frontmatter":{"title":"聊聊 Java String、StringBuilder、StringBuffer 三兄弟","shortTitle":"StringBuilder和StringBuffer","category":["Java核心"],"tag":["数组&字符串"],"description":"在本文中，我们将详细探讨 Java 中 String、StringBuilder 和 StringBuffer 的差异和使用场景。学习如何根据实际需求选择正确的字符串处理类，了解它们在性能、线程安全和内存开销方面的优缺点。本文还将解析它们的内部实现，帮助你更好地理解 Java 字符串处理的原理和最佳实践。","head":[["meta",{"name":"keywords","content":"Java,String,StringBuilder,StringBuffer"}]]},"headers":[],"relativePath":"backend/tobetter/string/builder-buffer.md","filePath":"backend/tobetter/string/builder-buffer.md"}'),p={name:"backend/tobetter/string/builder-buffer.md"},o=l(`<h1 id="_4-8-string、stringbuilder、stringbuffer" tabindex="-1">4.8 String、StringBuilder、StringBuffer <a class="header-anchor" href="#_4-8-string、stringbuilder、stringbuffer" aria-label="Permalink to &quot;4.8 String、StringBuilder、StringBuffer&quot;">​</a></h1><p>“哥，<a href="https://tobebetterjavaer.com/string/intern.html" target="_blank" rel="noreferrer">上一篇深入理解 String.intern()</a> 讲到了 StringBuilder，这一节我们就来聊聊吧！”三妹很期待。</p><p>“好啊，它们之间的关系还真的是挺和谐的。”看着三妹好奇的样子，我感到学技术就应该是这个样子才对。</p><p>由于字符串是不可变的，所以当遇到<a href="https://tobebetterjavaer.com/string/join.html" target="_blank" rel="noreferrer">字符串拼接</a>（尤其是使用<code>+</code>号操作符）的时候，就需要考量性能的问题，你不能毫无顾虑地生产太多 String 对象，对珍贵的内存造成不必要的压力。</p><p>于是 Java 就设计了一个专门用来解决此问题的 StringBuffer 类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StringBuffer</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractStringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Serializable</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">CharSequence</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuffer</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StringBuffer</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(value, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, count);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他方法</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractStringBuilder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuffer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> StringBuffer </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, count);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>不过，由于 StringBuffer 操作字符串的方法加了 <a href="https://tobebetterjavaer.com/thread/synchronized-1.html" target="_blank" rel="noreferrer"><code>synchronized</code> 关键字</a>进行了同步，主要是考虑到多线程环境下的安全问题，所以执行效率会比较低。</p><p>于是 Java 就给 StringBuffer “生了个兄弟”，名叫 StringBuilder，说，“孩子，你别管线程安全了，你就在单线程环境下使用，这样效率会高得多，如果要在多线程环境下修改字符串，你到时候可以使用 <a href="https://tobebetterjavaer.com/thread/ThreadLocal.html" target="_blank" rel="noreferrer"><code>ThreadLocal</code></a> 来避免多线程冲突。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractStringBuilder</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">CharSequence</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Create a copy, don&#39;t share the array</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(value, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, count);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractStringBuilder</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">CharSequence</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> StringBuilder </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">str</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Create a copy, don&#39;t share the array</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, count);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>除了类名不同，方法没有加 synchronized，基本上完全一样。</p><p>实际开发中，StringBuilder 的使用频率也是远高于 StringBuffer，甚至可以这么说，StringBuilder 完全取代了 StringBuffer。</p><p><a href="https://tobebetterjavaer.com/overview/what-is-java.html" target="_blank" rel="noreferrer">之前我们也曾聊过</a>，Java 是一门解释型的编程语言，所以当编译器遇到 <code>+</code> 号这个操作符的时候，会将 <code>new String(&quot;二哥&quot;) + new String(&quot;三妹&quot;)</code> 这行代码编译为以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二哥</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">三妹</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二哥&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;三妹&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这个过程是我们看不见的，但这正是 Java 的“智能”之处，它可以在编译的时候偷偷地帮我们做很多优化，这样既可以提高我们的开发效率（<code>+</code> 号写起来比创建 StringBuilder 对象便捷得多），也不会影响 JVM 的执行效率。</p><p>当然了，如果我们使用 <a href="https://tobebetterjavaer.com/jvm/bytecode.html" target="_blank" rel="noreferrer">javap</a> 反编译 <code>new String(&quot;二哥&quot;) + new String(&quot;三妹&quot;)</code> 的字节码的时候，也是能看出 StringBuilder 的影子的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">0: new           #2                  // class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#f6f6f4;">3: dup</span></span>
<span class="line"><span style="color:#f6f6f4;">4: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#f6f6f4;">7: new           #4                  // class java/lang/String</span></span>
<span class="line"><span style="color:#f6f6f4;">10: dup</span></span>
<span class="line"><span style="color:#f6f6f4;">11: ldc           #5                  // String 二哥</span></span>
<span class="line"><span style="color:#f6f6f4;">13: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#f6f6f4;">16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#f6f6f4;">19: new           #4                  // class java/lang/String</span></span>
<span class="line"><span style="color:#f6f6f4;">22: dup</span></span>
<span class="line"><span style="color:#f6f6f4;">23: ldc           #8                  // String 三妹</span></span>
<span class="line"><span style="color:#f6f6f4;">25: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#f6f6f4;">28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#f6f6f4;">31: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#f6f6f4;">34: areturn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0: new           #2                  // class java/lang/StringBuilder</span></span>
<span class="line"><span style="color:#24292e;">3: dup</span></span>
<span class="line"><span style="color:#24292e;">4: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#24292e;">7: new           #4                  // class java/lang/String</span></span>
<span class="line"><span style="color:#24292e;">10: dup</span></span>
<span class="line"><span style="color:#24292e;">11: ldc           #5                  // String 二哥</span></span>
<span class="line"><span style="color:#24292e;">13: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#24292e;">16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#24292e;">19: new           #4                  // class java/lang/String</span></span>
<span class="line"><span style="color:#24292e;">22: dup</span></span>
<span class="line"><span style="color:#24292e;">23: ldc           #8                  // String 三妹</span></span>
<span class="line"><span style="color:#24292e;">25: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span>
<span class="line"><span style="color:#24292e;">28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span>
<span class="line"><span style="color:#24292e;">31: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span>
<span class="line"><span style="color:#24292e;">34: areturn</span></span></code></pre></div><p>可以看到 Java 编译器将字符串拼接操作（<code>+</code>）转换为了 StringBuilder 对象的 append 方法，然后再调用 StringBuilder 对象的 toString 方法返回拼接后的字符串。</p><p>来看一下 StringBuilder 的 toString 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(value, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, count);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, count);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>value 是一个 char 类型的数组：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * The value is used for character storage.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] value;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * The value is used for character storage.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] value;</span></span></code></pre></div><p>在 StringBuilder 对象创建时，会为 value 分配一定的内存空间（初始容量 16），用于存储字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Constructs a string builder with no characters in it and an</span></span>
<span class="line"><span style="color:#7B7F8B;"> * initial capacity of 16 characters.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Constructs a string builder with no characters in it and an</span></span>
<span class="line"><span style="color:#6A737D;"> * initial capacity of 16 characters.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>随着字符串的拼接，value 数组的长度会不断增加，因此在 StringBuilder 对象的实现中，value 数组的长度是可以<a href="https://tobebetterjavaer.com/collection/arraylist.html" target="_blank" rel="noreferrer">动态扩展的，就像ArrayList那样</a>。</p><p>继续来看 StringBuilder 的 toString 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(value, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, count);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(value, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, count);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>value 用于存储 StringBuilder 对象中包含的字符序列。count 是一个 int 类型的变量，表示字符序列的长度。toString() 方法会调用 <code>new String(value, 0, count)</code>，使用 value 数组中从 0 开始的前 count 个元素创建一个新的字符串对象，并将其返回。</p><p>再来看一下 append 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> StringBuilder </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实际上是调用了 AbstractStringBuilder 中的 append(String str) 方法。在 AbstractStringBuilder 中，append(String str) 方法会检查当前字符序列中的字符是否够用，如果不够用则会进行扩容，并将指定字符串追加到字符序列的末尾。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Appends the specified string to this character sequence.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * &lt;p&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * The characters of the {@code String} argument are appended, in order,</span></span>
<span class="line"><span style="color:#7B7F8B;"> * increasing the length of this sequence by the length of the argument.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * If {@code str} is {@code null}, then the four characters {@code &quot;null&quot;}</span></span>
<span class="line"><span style="color:#7B7F8B;"> * are appended.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * &lt;p&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to</span></span>
<span class="line"><span style="color:#7B7F8B;"> * execution of the {@code append} method. Then the character at index</span></span>
<span class="line"><span style="color:#7B7F8B;"> * &lt;i&gt;k&lt;/i&gt; in this character sequence is equal to the character at index</span></span>
<span class="line"><span style="color:#7B7F8B;"> * &lt;i&gt;k&lt;/i&gt; in the argument {@code str}, if &lt;i&gt;k&lt;/i&gt; is less than</span></span>
<span class="line"><span style="color:#7B7F8B;"> * &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index</span></span>
<span class="line"><span style="color:#7B7F8B;"> * &lt;i&gt;k-n&lt;/i&gt; in the argument {@code str}.</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;">   </span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#7B7F8B;">   a string.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;">  a reference to this object.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractStringBuilder</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (str </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">appendNull</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> str.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(count </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    str.</span><span style="color:#62E884;">getChars</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len, value, count);</span></span>
<span class="line"><span style="color:#F6F6F4;">    count </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Appends the specified string to this character sequence.</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;p&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * The characters of the {@code String} argument are appended, in order,</span></span>
<span class="line"><span style="color:#6A737D;"> * increasing the length of this sequence by the length of the argument.</span></span>
<span class="line"><span style="color:#6A737D;"> * If {@code str} is {@code null}, then the four characters {@code &quot;null&quot;}</span></span>
<span class="line"><span style="color:#6A737D;"> * are appended.</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;p&gt;</span></span>
<span class="line"><span style="color:#6A737D;"> * Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to</span></span>
<span class="line"><span style="color:#6A737D;"> * execution of the {@code append} method. Then the character at index</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;i&gt;k&lt;/i&gt; in this character sequence is equal to the character at index</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;i&gt;k&lt;/i&gt; in the argument {@code str}, if &lt;i&gt;k&lt;/i&gt; is less than</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index</span></span>
<span class="line"><span style="color:#6A737D;"> * &lt;i&gt;k-n&lt;/i&gt; in the argument {@code str}.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">   </span><span style="color:#E36209;">str</span><span style="color:#6A737D;">   a string.</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;">  a reference to this object.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AbstractStringBuilder </span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(String str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">appendNull</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(count </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> len);</span></span>
<span class="line"><span style="color:#24292E;">    str.</span><span style="color:#6F42C1;">getChars</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len, value, count);</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>append(String str)</code> 方法将指定字符串追加到当前字符序列中。如果指定字符串为 null，则追加字符串 &quot;null&quot;；否则会检查指定字符串的长度，然后根据当前字符序列中的字符数和指定字符串的长度来判断是否需要扩容。</p><p>如果需要扩容，则会调用 <code>ensureCapacityInternal(int minimumCapacity) </code>方法进行扩容。扩容之后，将指定字符串的字符拷贝到字符序列中。</p><p>来看一下 ensureCapacityInternal 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// overflow-conscious code</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (minimumCapacity </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> value.length </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">expandCapacity</span><span style="color:#F6F6F4;">(minimumCapacity);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">expandCapacity</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> newCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value.length </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (newCapacity </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> minimumCapacity </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        newCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> minimumCapacity;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (newCapacity </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (minimumCapacity </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// overflow</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutOfMemoryError</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        newCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(value, newCapacity);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// overflow-conscious code</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (minimumCapacity </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> value.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">expandCapacity</span><span style="color:#24292E;">(minimumCapacity);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expandCapacity</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minimumCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.length </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newCapacity </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> minimumCapacity </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        newCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> minimumCapacity;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newCapacity </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (minimumCapacity </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// overflow</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutOfMemoryError</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        newCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(value, newCapacity);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ensureCapacityInternal(int minimumCapacity)</code> 方法用于确保当前字符序列的容量至少等于指定的最小容量 minimumCapacity。如果当前容量小于指定的容量，就会为字符序列分配一个新的内部数组。新容量的计算方式如下：</p><ul><li>如果指定的最小容量大于当前容量，则新容量为两倍的旧容量加上 2；</li><li>如果指定的最小容量小于等于当前容量，则不会进行扩容，直接返回当前对象。</li></ul><p>在进行扩容之前，<code>ensureCapacityInternal(int minimumCapacity)</code> 方法会先检查当前字符序列的容量是否足够，如果不足就会调用 <code>expandCapacity(int minimumCapacity)</code> 方法进行扩容。<code>expandCapacity(int minimumCapacity)</code> 方法首先计算出新容量，然后使用 <code>Arrays.copyOf(char[] original, int newLength)</code> 方法将原字符数组扩容到新容量的大小。</p><p>关于扩容，后面在讲<a href="https://tobebetterjavaer.com/collection/arraylist.html" target="_blank" rel="noreferrer">ArrayList</a>的时候会再次说明，今天就先聊到这吧。</p><p>“我想，关于 String、StringBuilder、StringBuilder 之间的差别，你都搞清楚了吧？”我问。</p><p>“哥，你真棒！区别我是搞清楚了，你后面讲的源码扩容还没消化，我一会去加个餐，再细看一下。”三妹说。</p><p>“可以的，实际上，你现在只需要知道 StringBuilder 的用法就可以了。”喝了一口右手边的可口可乐（无糖）后，我感觉好爽快啊。</p><hr>`,43),e=[o];function t(c,r,i,y,F,d){return n(),a("div",null,e)}const E=s(p,[["render",t]]);export{g as __pageData,E as default};
