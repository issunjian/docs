import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/validator-9585b744-a942-425f-b78b-f92f22909c6c.7beefed9.png",o="/docs/assets/validator-5b9e4758-27ff-4773-a4b3-809b8dd6546c.0cabd250.png",e="/docs/assets/validator-2b0b00c2-fc10-40dc-bfc7-c615bd87f9c9.82554c23.png",t="/docs/assets/validator-eaf30b98-0a9a-403f-8f2b-a159edc492d6.ff06fd0d.png",c="/docs/assets/validator-bc9d8ec7-bba6-4306-aaae-b6c66068366a.ec04a8ea.png",r="/docs/assets/validator-1dd4607e-689a-4ddf-814a-d92ac6408fc3.c82d5346.png",y="/docs/assets/validator-8d673f46-6981-4150-b549-29335bf90cf5.8ac855e5.png",F="/docs/assets/validator-fbd06343-c1ae-4cf6-9b46-bd5c9860b396.7225b339.png",h=JSON.parse('{"title":"SpringBoot中处理校验逻辑的两种方式：Hibernate Validator+全局异常处理","description":"","frontmatter":{"category":["Java企业级开发"],"tag":["Spring Boot"],"title":"SpringBoot中处理校验逻辑的两种方式：Hibernate Validator+全局异常处理","shortTitle":"SpringBoot中如何处理校验逻辑"},"headers":[],"relativePath":"backend/tobetter/springboot/validator.md","filePath":"backend/tobetter/springboot/validator.md"}'),i={name:"backend/tobetter/springboot/validator.md"},E=l('<p>最近正在开发一个知识库学习网站编程喵🐱，需要对请求参数进行校验，比如说非空啊、长度限制啊等等，可选的解决方案有两种：</p><ul><li>一种是用 Hibernate Validator 来处理</li><li>一种是用全局异常来处理</li></ul><p>两种方式，我们一一来实践体验一下。</p><h3 id="一、hibernate-validator" tabindex="-1">一、Hibernate Validator <a class="header-anchor" href="#一、hibernate-validator" aria-label="Permalink to &quot;一、Hibernate Validator&quot;">​</a></h3><p>Spring Boot 已经内置了 Hibernate Validator 校验框架，这个可以通过 Spring Boot 官网查看和确认。</p><p>第一步，进入 Spring Boot 官网，点击 learn 这个面板，点击参考文档。</p><img src="'+p+'"><p>第二步，在参考文档页点击「依赖的版本」。</p><img src="'+o+'"><p>第三步，在依赖版本页就可以查看到所有的依赖了，包括版本号。</p><img src="'+e+`"><p>PS：如果发现没有起效，可能是依赖版本冲突了，手动把 Hibernate Validator 依赖添加到 pom.xml 文件就可以了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;6.0.17.Final&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;javax.validation&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;2.0.1.Final&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;6.0.17.Final&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;javax.validation&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;validation-api&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;2.0.1.Final&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>通过 Hibernate Validator 校验框架，我们可以直接在请求参数的字段上加入注解来完成校验。</p><p><strong>具体该怎么做呢</strong>？</p><p>第一步，在需要验证的字段上加上 Hibernate Validator 提供的校验注解。</p><p>比如说我现在有一个用户名和密码登录的请求参数 UsersLoginParam 类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Data</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ApiModel</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户登录</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">description</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户表</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UsersLoginParam</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Serializable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> serialVersionUID </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiModelProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录名</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">NotBlank</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">message</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录名不能为空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> userLogin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiModelProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">密码</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">NotBlank</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">message</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">密码不能为空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> userPass;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Data</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ApiModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户登录&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">description</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户表&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsersLoginParam</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> serialVersionUID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiModelProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;登录名&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">NotBlank</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">message</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;登录名不能为空&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userLogin;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiModelProperty</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;密码&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">NotBlank</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">message</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;密码不能为空&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String userPass;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>就可以通过 <code>@NotBlank</code> 注解来对用户名和密码进行判空校验。除了 <code>@NotBlank</code> 注解，Hibernate Validator 还提供了以下常用注解：</p><ul><li><code>@NotNull</code>：被注解的字段不能为 null；</li><li><code>@NotEmpty</code>：被注解的字段不能为空；</li><li><code>@Min</code>：被注解的字段必须大于等于其value值；</li><li><code>@Max</code>：被注解的字段必须小于等于其value值；</li><li><code>@Size</code>：被注解的字段必须在其min和max值之间；</li><li><code>@Pattern</code>：被注解的字段必须符合所定义的正则表达式；</li><li><code>@Email</code>：被注解的字段必须符合邮箱格式。</li></ul><p>第二步，在对应的请求接口（<code>UsersController.login()</code>）中添加 <code>@Validated</code> 注解，并注入一个 <code>BindingResult</code> 参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Api</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">tags</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/users</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UsersController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IUsersService</span><span style="color:#F6F6F4;"> usersService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiOperation</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录以后返回token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultObject</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">Validated</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UsersLoginParam</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">users</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">BindingResult</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> usersService.</span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(users.</span><span style="color:#62E884;">getUserLogin</span><span style="color:#F6F6F4;">(), users.</span><span style="color:#62E884;">getUserPass</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (token </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">validateFailed</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户名或密码错误</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; tokenMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        tokenMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        tokenMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tokenHead</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, tokenHead);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">success</span><span style="color:#F6F6F4;">(tokenMap);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Api</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tags</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsersController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IUsersService usersService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;登录以后返回token&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultObject </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Validated</span><span style="color:#24292E;"> UsersLoginParam </span><span style="color:#E36209;">users</span><span style="color:#24292E;">, BindingResult </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> usersService.</span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(users.</span><span style="color:#6F42C1;">getUserLogin</span><span style="color:#24292E;">(), users.</span><span style="color:#6F42C1;">getUserPass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">validateFailed</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户名或密码错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; tokenMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        tokenMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">, token);</span></span>
<span class="line"><span style="color:#24292E;">        tokenMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tokenHead&quot;</span><span style="color:#24292E;">, tokenHead);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(tokenMap);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步，为控制层（UsersController）创建一个切面，将通知注入到 BindingResult 对象中，然后再判断是否有校验错误，有错误的话返回校验提示信息，否则放行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Aspect</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Order</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">BindingResultAspect</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Pointcut</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">execution(public * com.codingmore.controller.*.*(..))</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BindingResult</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Around</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">BindingResult()</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doAround</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ProceedingJoinPoint</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">joinPoint</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">[] args </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> joinPoint.</span><span style="color:#62E884;">getArgs</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> arg </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (arg </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> BindingResult) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">BindingResult</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (BindingResult) arg;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (result.</span><span style="color:#62E884;">hasErrors</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">FieldError</span><span style="color:#F6F6F4;"> fieldError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> result.</span><span style="color:#62E884;">getFieldError</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(fieldError</span><span style="color:#F286C4;">!=</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">validateFailed</span><span style="color:#F6F6F4;">(fieldError.</span><span style="color:#62E884;">getDefaultMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">validateFailed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> joinPoint.</span><span style="color:#62E884;">proceed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Aspect</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingResultAspect</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Pointcut</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execution(public * com.codingmore.controller.*.*(..))&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BindingResult</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Around</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;BindingResult()&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">doAround</span><span style="color:#24292E;">(ProceedingJoinPoint </span><span style="color:#E36209;">joinPoint</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Throwable {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[] args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> joinPoint.</span><span style="color:#6F42C1;">getArgs</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Object arg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> args) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (arg </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> BindingResult) {</span></span>
<span class="line"><span style="color:#24292E;">                BindingResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (BindingResult) arg;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result.</span><span style="color:#6F42C1;">hasErrors</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    FieldError fieldError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getFieldError</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(fieldError</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">validateFailed</span><span style="color:#24292E;">(fieldError.</span><span style="color:#6F42C1;">getDefaultMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">validateFailed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> joinPoint.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里涉及到了 Spring AOP 的知识，我在前面的文章里讲解过了，戳这个链接可以直达：<a href="https://tobebetterjavaer.com/springboot/aop-log.html" target="_blank" rel="noreferrer">Spring AOP 扫盲</a></p><p>第四步，访问登录接口，用户名和密码都不传入的情况下，就会返回“用户名不能为空”的提示信息。</p><img src="`+t+'"><p>通过 debug 的形式，体验一下整个工作流程。</p><img src="'+c+`"><p>可以看得出，Hibernate Validator 带来的优势有这些：</p><ul><li>验证逻辑与业务逻辑进行了分离，降低了程序耦合度；</li><li>统一且规范的验证方式，无需再次编写重复的验证代码。</li></ul><p>不过，也带来一些弊端，比如说：</p><ul><li>需要在请求接口的方法中注入 BindingResult 对象，而这个对应在方法体中并没有用到</li><li>只能校验一些非常简单的逻辑，涉及到数据查询就无能为力了。</li></ul><h3 id="二、全局异常处理" tabindex="-1">二、全局异常处理 <a class="header-anchor" href="#二、全局异常处理" aria-label="Permalink to &quot;二、全局异常处理&quot;">​</a></h3><p>使用全局异常处理的优点就是比较灵活，可以处理比较复杂的逻辑校验，在校验失败的时候直接抛出异常，然后进行捕获处理就可以了。</p><p>第一步，新建一个自定义异常类 ApiException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ApiException</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RuntimeException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IErrorCode</span><span style="color:#F6F6F4;"> errorCode;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">IErrorCode</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">errorCode</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(errorCode.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.errorCode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> errorCode;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(message);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">cause</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(cause);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">cause</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(message, cause);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IErrorCode</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getErrorCode</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> errorCode;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IErrorCode errorCode;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;">(IErrorCode </span><span style="color:#E36209;">errorCode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(errorCode.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.errorCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errorCode;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">cause</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(cause);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">cause</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(message, cause);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> IErrorCode </span><span style="color:#6F42C1;">getErrorCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> errorCode;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步，新建一个断言处理类 Asserts，简化抛出 ApiException 的步骤。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Asserts</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fail</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiException</span><span style="color:#F6F6F4;">(message);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fail</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">IErrorCode</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">errorCode</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiException</span><span style="color:#F6F6F4;">(errorCode);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Asserts</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;">(message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(IErrorCode </span><span style="color:#E36209;">errorCode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiException</span><span style="color:#24292E;">(errorCode);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步，新建一全局异常处理类 GlobalExceptionHandler，对异常信息进行解析，并封装到统一的返回对象 ResultObject 中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ControllerAdvice</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">GlobalExceptionHandler</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ExceptionHandler</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ApiException.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultObject</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ApiException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e.</span><span style="color:#62E884;">getErrorCode</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">failed</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">getErrorCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">failed</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ControllerAdvice</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GlobalExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ApiException.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultObject </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(ApiException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.</span><span style="color:#6F42C1;">getErrorCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getErrorCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>全局异常处理类用到了两个注解，<code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code>。</p><p><code>@ControllerAdvice</code> 是一个特殊的 <code>@Component</code>（可以通过源码看得到），用于标识一个类，这个类中被以下三种注解标识的方法：<code>@ExceptionHandler</code>，<code>@InitBinder</code>，<code>@ModelAttribute</code>，将作用于所有<code>@Controller</code> 类的接口上。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Target</span><span style="color:#F6F6F4;">({ElementType.TYPE})</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Retention</span><span style="color:#F6F6F4;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Documented</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> @</span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ControllerAdvice</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">({ElementType.TYPE})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ControllerAdvice</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>@ExceptionHandler</code> 注解的作用就是标识统一异常处理，它可以指定要统一处理的异常类型，比如说我们自定义的 ApiException。</p><p>第四步，在需要校验的地方通过 Asserts 类抛出异常 ApiException。还拿用户登录这个接口来说明吧。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Api</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">tags</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/users</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UsersController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiOperation</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录以后返回token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultObject</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">Validated</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UsersLoginParam</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">users</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">BindingResult</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> usersService.</span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(users.</span><span style="color:#62E884;">getUserLogin</span><span style="color:#F6F6F4;">(), users.</span><span style="color:#62E884;">getUserPass</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; tokenMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        tokenMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        tokenMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tokenHead</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, tokenHead);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">success</span><span style="color:#F6F6F4;">(tokenMap);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Api</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tags</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsersController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;登录以后返回token&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultObject </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Validated</span><span style="color:#24292E;"> UsersLoginParam </span><span style="color:#E36209;">users</span><span style="color:#24292E;">, BindingResult </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> usersService.</span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(users.</span><span style="color:#6F42C1;">getUserLogin</span><span style="color:#24292E;">(), users.</span><span style="color:#6F42C1;">getUserPass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; tokenMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        tokenMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">, token);</span></span>
<span class="line"><span style="color:#24292E;">        tokenMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tokenHead&quot;</span><span style="color:#24292E;">, tokenHead);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(tokenMap);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该接口需要查询数据库验证密码是否正确，如果密码不正确就抛出校验信息“密码不正确”。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UsersServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServiceImpl</span><span style="color:#F6F6F4;">&lt;UsersMapper, Users&gt; </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IUsersService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">username</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">password</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//密码需要客户端加密后传递</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">UserDetails</span><span style="color:#F6F6F4;"> userDetails </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">loadUserByUsername</span><span style="color:#F6F6F4;">(username);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">passwordEncoder.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(password, userDetails.</span><span style="color:#62E884;">getPassword</span><span style="color:#F6F6F4;">())) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            Asserts.</span><span style="color:#62E884;">fail</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">密码不正确</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">         }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 其他代码省略</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> token;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsersServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UsersMapper</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Users</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IUsersService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">password</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//密码需要客户端加密后传递</span></span>
<span class="line"><span style="color:#24292E;">        UserDetails userDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadUserByUsername</span><span style="color:#24292E;">(username);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">passwordEncoder.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(password, userDetails.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            Asserts.</span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;密码不正确&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 其他代码省略</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> token;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步，通过 ApiPost 来测试一下接口，故意把密码输错。</p><img src="`+r+'"><p>也可以通过 debug 的形式，体验一下整个工作流程。</p><img src="'+y+'"><h3 id="三、总结" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;">​</a></h3><p>实际开发中把两者结合在一起用，就可以弥补彼此的短板了，简单校验用 Hibernate Validator，复杂一点的逻辑校验，比如说需要数据库查询用全局异常处理来实现。</p><p>为了把 Spring Boot 逻辑校验这块单独拉出来做一个 demo 的例子，我新建了一个 codingmore-validator 的项目，放在 codingmore-learning 项目下面了，想要参考的，直接戳下面的两个链接。</p><p>完整的编程喵整个项目的源码戳第一个，只想看逻辑校验的戳第二个。</p><blockquote><ul><li>编程喵🐱源码地址：<a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></li><li>codingmore-validator: <a href="https://github.com/itwanger/codingmore-learning/tree/main/codingmore-validator" target="_blank" rel="noreferrer">https://github.com/itwanger/codingmore-learning/tree/main/codingmore-validator</a></li></ul></blockquote><img src="'+F+'"><p>每个类，每个方法基本上都加了注释，可以很容易就看得懂。</p>',60),d=[E];function u(g,C,f,A,D,b){return n(),a("div",null,d)}const m=s(i,[["render",u]]);export{h as __pageData,m as default};
