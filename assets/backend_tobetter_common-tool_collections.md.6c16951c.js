import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/collections-01.32af75b8.png",o="/docs/assets/collections-02.e36824e1.png",t="/docs/assets/utils-20230330101919.0228ea05.png",e="/docs/assets/utils-20230330103825.69c7b7b3.png",D=JSON.parse('{"title":"Java Collections：专为集合框架而生的工具类","description":"本文详细介绍了Java中的Collections工具类，阐述了它在集合操作中的实际应用和优势。通过具体的代码示例，展示了如何使用Collections类处理集合的排序、查找、反转等常见问题。掌握Collections工具类的技巧，让您在Java编程中轻松应对各种集合操作，提高开发效率。","frontmatter":{"title":"Java Collections：专为集合框架而生的工具类","shortTitle":"Collections工具类","category":["Java核心"],"tag":["常用工具类"],"description":"本文详细介绍了Java中的Collections工具类，阐述了它在集合操作中的实际应用和优势。通过具体的代码示例，展示了如何使用Collections类处理集合的排序、查找、反转等常见问题。掌握Collections工具类的技巧，让您在Java编程中轻松应对各种集合操作，提高开发效率。","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java进阶之路,Java入门,教程,java,Collections,集合框架,java Collections"}]]},"headers":[],"relativePath":"backend/tobetter/common-tool/collections.md","filePath":"backend/tobetter/common-tool/collections.md"}'),c={name:"backend/tobetter/common-tool/collections.md"},r=l('<h1 id="_9-5-collections工具类" tabindex="-1">9.5 Collections工具类 <a class="header-anchor" href="#_9-5-collections工具类" aria-label="Permalink to &quot;9.5 Collections工具类&quot;">​</a></h1><p>Collections 是 JDK 提供的一个工具类，位于 java.util 包下，提供了一系列的静态方法，方便我们对集合进行各种骚操作，算是集合框架的一个大管家。</p><p>还记得我们前面讲过的 <a href="https://tobebetterjavaer.com/common-tool/arrays.html" target="_blank" rel="noreferrer">Arrays 工具类</a>吗？可以回去温习下。</p><p>Collections 的用法很简单，在 Intellij IDEA 中敲完 <code>Collections.</code> 之后就可以看到它提供的方法了，大致看一下方法名和参数就能知道这个方法是干嘛的。</p><img src="'+p+`"><p>为了节省大家的学习时间，我将这些方法做了一些分类，并列举了一些简单的例子。</p><h3 id="_01、排序操作" tabindex="-1">01、排序操作 <a class="header-anchor" href="#_01、排序操作" aria-label="Permalink to &quot;01、排序操作&quot;">​</a></h3><ul><li><code>reverse(List list)</code>：反转顺序</li><li><code>shuffle(List list)</code>：洗牌，将顺序打乱</li><li><code>sort(List list)</code>：自然升序</li><li><code>sort(List list, Comparator c)</code>：按照自定义的比较器排序</li><li><code>swap(List list, int i, int j)</code>：将 i 和 j 位置的元素交换位置</li></ul><p>来看例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王五</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王六</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">原始顺序：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 反转</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">reverse</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">反转后：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 洗牌</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">shuffle</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">洗牌后：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 自然升序</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">自然升序后：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 交换</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">swap</span><span style="color:#F6F6F4;">(list, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">交换后：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王五&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王六&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;原始顺序：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 反转</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">reverse</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;反转后：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 洗牌</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">shuffle</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;洗牌后：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 自然升序</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;自然升序后：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 交换</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(list, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;交换后：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list);</span></span></code></pre></div><p>输出后：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">原始顺序：[沉默王二, 沉默王三, 沉默王四, 沉默王五, 沉默王六]</span></span>
<span class="line"><span style="color:#f6f6f4;">反转后：[沉默王六, 沉默王五, 沉默王四, 沉默王三, 沉默王二]</span></span>
<span class="line"><span style="color:#f6f6f4;">洗牌后：[沉默王五, 沉默王二, 沉默王六, 沉默王三, 沉默王四]</span></span>
<span class="line"><span style="color:#f6f6f4;">自然升序后：[沉默王三, 沉默王二, 沉默王五, 沉默王六, 沉默王四]</span></span>
<span class="line"><span style="color:#f6f6f4;">交换后：[沉默王三, 沉默王二, 沉默王四, 沉默王六, 沉默王五]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">原始顺序：[沉默王二, 沉默王三, 沉默王四, 沉默王五, 沉默王六]</span></span>
<span class="line"><span style="color:#24292e;">反转后：[沉默王六, 沉默王五, 沉默王四, 沉默王三, 沉默王二]</span></span>
<span class="line"><span style="color:#24292e;">洗牌后：[沉默王五, 沉默王二, 沉默王六, 沉默王三, 沉默王四]</span></span>
<span class="line"><span style="color:#24292e;">自然升序后：[沉默王三, 沉默王二, 沉默王五, 沉默王六, 沉默王四]</span></span>
<span class="line"><span style="color:#24292e;">交换后：[沉默王三, 沉默王二, 沉默王四, 沉默王六, 沉默王五]</span></span></code></pre></div><h3 id="_02、查找操作" tabindex="-1">02、查找操作 <a class="header-anchor" href="#_02、查找操作" aria-label="Permalink to &quot;02、查找操作&quot;">​</a></h3><ul><li><code>binarySearch(List list, Object key)</code>：二分查找法，前提是 List 已经排序过了</li><li><code>max(Collection coll)</code>：返回最大元素</li><li><code>max(Collection coll, Comparator comp)</code>：根据自定义比较器，返回最大元素</li><li><code>min(Collection coll)</code>：返回最小元素</li><li><code>min(Collection coll, Comparator comp)</code>：根据自定义比较器，返回最小元素</li><li><code>fill(List list, Object obj)</code>：使用指定对象填充</li><li><code>frequency(Collection c, Object o)</code>：返回指定对象出现的次数</li></ul><p>来看例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">最大元素：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">(list));</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">最小元素：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">min</span><span style="color:#F6F6F4;">(list));</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">出现的次数：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">frequency</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 没有排序直接调用二分查找，结果是不确定的</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">排序前的二分查找结果：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(list);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 排序后，查找结果和预期一致</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">排序后的二分查找结果：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">(list, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王八</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">填充后的结果：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;最大元素：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(list));</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;最小元素：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">min</span><span style="color:#24292E;">(list));</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;出现的次数：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">frequency</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 没有排序直接调用二分查找，结果是不确定的</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;排序前的二分查找结果：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(list);</span></span>
<span class="line"><span style="color:#6A737D;">// 排序后，查找结果和预期一致</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;排序后的二分查找结果：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">(list, </span><span style="color:#032F62;">&quot;沉默王八&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;填充后的结果：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> list);</span></span></code></pre></div><p>输出后：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">原始顺序：[沉默王二, 沉默王三, 沉默王四, 沉默王五, 沉默王六]</span></span>
<span class="line"><span style="color:#f6f6f4;">最大元素：沉默王四</span></span>
<span class="line"><span style="color:#f6f6f4;">最小元素：沉默王三</span></span>
<span class="line"><span style="color:#f6f6f4;">出现的次数：1</span></span>
<span class="line"><span style="color:#f6f6f4;">排序前的二分查找结果：0</span></span>
<span class="line"><span style="color:#f6f6f4;">排序后的二分查找结果：1</span></span>
<span class="line"><span style="color:#f6f6f4;">填充后的结果：[沉默王八, 沉默王八, 沉默王八, 沉默王八, 沉默王八]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">原始顺序：[沉默王二, 沉默王三, 沉默王四, 沉默王五, 沉默王六]</span></span>
<span class="line"><span style="color:#24292e;">最大元素：沉默王四</span></span>
<span class="line"><span style="color:#24292e;">最小元素：沉默王三</span></span>
<span class="line"><span style="color:#24292e;">出现的次数：1</span></span>
<span class="line"><span style="color:#24292e;">排序前的二分查找结果：0</span></span>
<span class="line"><span style="color:#24292e;">排序后的二分查找结果：1</span></span>
<span class="line"><span style="color:#24292e;">填充后的结果：[沉默王八, 沉默王八, 沉默王八, 沉默王八, 沉默王八]</span></span></code></pre></div><h3 id="_03、同步控制" tabindex="-1">03、同步控制 <a class="header-anchor" href="#_03、同步控制" aria-label="Permalink to &quot;03、同步控制&quot;">​</a></h3><p><a href="https://tobebetterjavaer.com/collection/hashmap.html#_04%E3%80%81%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8" target="_blank" rel="noreferrer">HashMap 是线程不安全</a>的，这个我们前面讲到了。那其实 ArrayList 也是线程不安全的，没法在多线程环境下使用，那 Collections 工具类中提供了多个 synchronizedXxx 方法，这些方法会返回一个同步的对象，从而解决多线程中访问集合时的安全问题。</p><img src="`+o+`"><p>使用起来也非常的简单：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">SynchronizedList</span><span style="color:#F6F6F4;"> synchronizedList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">synchronizedList</span><span style="color:#F6F6F4;">(list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">SynchronizedList synchronizedList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">synchronizedList</span><span style="color:#24292E;">(list);</span></span></code></pre></div><p>看一眼 SynchronizedList 的源码就明白了，不过是在方法里面使用 <a href="https://tobebetterjavaer.com/thread/synchronized-1.html" target="_blank" rel="noreferrer">synchronized 关键字</a>加了一层锁而已。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SynchronizedList</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SynchronizedCollection</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> serialVersionUID </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">7754090372962971524L</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt; list;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">SynchronizedList</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt; </span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(list); </span><span style="color:#7B7F8B;">// 调用父类 SynchronizedCollection 的构造方法，传入 list</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list; </span><span style="color:#7B7F8B;">// 初始化成员变量 list</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 获取指定索引处的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (mutex) {</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(index);} </span><span style="color:#7B7F8B;">// 加锁，调用 list 的 get 方法获取元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 在指定索引处插入指定元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (mutex) {list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(index, element);} </span><span style="color:#7B7F8B;">// 加锁，调用 list 的 add 方法插入元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 移除指定索引处的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (mutex) {</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(index);} </span><span style="color:#7B7F8B;">// 加锁，调用 list 的 remove 方法移除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SynchronizedList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SynchronizedCollection</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> serialVersionUID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">7754090372962971524L</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; list;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">SynchronizedList</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(list); </span><span style="color:#6A737D;">// 调用父类 SynchronizedCollection 的构造方法，传入 list</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list; </span><span style="color:#6A737D;">// 初始化成员变量 list</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取指定索引处的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (mutex) {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(index);} </span><span style="color:#6A737D;">// 加锁，调用 list 的 get 方法获取元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 在指定索引处插入指定元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, E </span><span style="color:#E36209;">element</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (mutex) {list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(index, element);} </span><span style="color:#6A737D;">// 加锁，调用 list 的 add 方法插入元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移除指定索引处的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (mutex) {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(index);} </span><span style="color:#6A737D;">// 加锁，调用 list 的 remove 方法移除元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>那这样的话，其实效率和那些直接在方法上加 synchronized 关键字的 <a href="https://tobebetterjavaer.com/collection/gailan.html" target="_blank" rel="noreferrer">Vector、Hashtable</a> 差不多（JDK 1.0 时期就有了），而这些集合类基本上已经废弃了，几乎不怎么用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Vector</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractList</span><span style="color:#F6F6F4;">&lt;E&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;E&gt;, </span><span style="color:#97E1F1;font-style:italic;">RandomAccess</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Cloneable</span><span style="color:#F6F6F4;">, java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 获取指定索引处的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> elementCount) </span><span style="color:#7B7F8B;">// 如果索引超出了列表的大小，则抛出数组下标越界异常</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayIndexOutOfBoundsException</span><span style="color:#F6F6F4;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 返回指定索引处的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 移除指定索引处的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        modCount</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 修改计数器，标识列表已被修改</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (index </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> elementCount) </span><span style="color:#7B7F8B;">// 如果索引超出了列表的大小，则抛出数组下标越界异常</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayIndexOutOfBoundsException</span><span style="color:#F6F6F4;">(index);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> oldValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 获取指定索引处的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> numMoved </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> elementCount </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 计算需要移动的元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (numMoved </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果需要移动元素</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(elementData, index</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, elementData, index,</span></span>
<span class="line"><span style="color:#F6F6F4;">                             numMoved); </span><span style="color:#7B7F8B;">// 将数组中的元素向左移动一位</span></span>
<span class="line"><span style="color:#F6F6F4;">        elementData[</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">elementCount] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将最后一个元素设置为 null，等待垃圾回收</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldValue; </span><span style="color:#7B7F8B;">// 返回被移除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vector</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractList</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">E</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">RandomAccess</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Cloneable</span><span style="color:#24292E;">, java.io.</span><span style="color:#6F42C1;">Serializable</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取指定索引处的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> elementCount) </span><span style="color:#6A737D;">// 如果索引超出了列表的大小，则抛出数组下标越界异常</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayIndexOutOfBoundsException</span><span style="color:#24292E;">(index);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 返回指定索引处的元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 移除指定索引处的元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        modCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 修改计数器，标识列表已被修改</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (index </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> elementCount) </span><span style="color:#6A737D;">// 如果索引超出了列表的大小，则抛出数组下标越界异常</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayIndexOutOfBoundsException</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">        E oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 获取指定索引处的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numMoved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementCount </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 计算需要移动的元素个数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (numMoved </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果需要移动元素</span></span>
<span class="line"><span style="color:#24292E;">            System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, elementData, index,</span></span>
<span class="line"><span style="color:#24292E;">                             numMoved); </span><span style="color:#6A737D;">// 将数组中的元素向左移动一位</span></span>
<span class="line"><span style="color:#24292E;">        elementData[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">elementCount] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将最后一个元素设置为 null，等待垃圾回收</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue; </span><span style="color:#6A737D;">// 返回被移除的元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>正确的做法是使用并发包下的 <a href="https://tobebetterjavaer.com/thread/CopyOnWriteArrayList.html" target="_blank" rel="noreferrer">CopyOnWriteArrayList</a>、<a href="https://tobebetterjavaer.com/thread/ConcurrentHashMap.html" target="_blank" rel="noreferrer">ConcurrentHashMap</a>。这些我们放到并发编程时再讲。</p><h3 id="_04、不可变集合" tabindex="-1">04、不可变集合 <a class="header-anchor" href="#_04、不可变集合" aria-label="Permalink to &quot;04、不可变集合&quot;">​</a></h3><ul><li><code>emptyXxx()</code>：制造一个空的不可变集合</li><li><code>singletonXxx()</code>：制造一个只有一个元素的不可变集合</li><li><code>unmodifiableXxx()</code>：为指定集合制作一个不可变集合</li></ul><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> emptyList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">emptyList</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">emptyList.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">非空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(emptyList);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List emptyList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">emptyList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;非空&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(emptyList);</span></span></code></pre></div><p>这段代码在执行的时候就抛出错误了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span>
<span class="line"><span style="color:#f6f6f4;">	at java.util.AbstractList.add(AbstractList.java:148)</span></span>
<span class="line"><span style="color:#f6f6f4;">	at java.util.AbstractList.add(AbstractList.java:108)</span></span>
<span class="line"><span style="color:#f6f6f4;">	at com.itwanger.s64.Demo.main(Demo.java:61)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></span>
<span class="line"><span style="color:#24292e;">	at java.util.AbstractList.add(AbstractList.java:148)</span></span>
<span class="line"><span style="color:#24292e;">	at java.util.AbstractList.add(AbstractList.java:108)</span></span>
<span class="line"><span style="color:#24292e;">	at com.itwanger.s64.Demo.main(Demo.java:61)</span></span></code></pre></div><p>这是因为 <code>Collections.emptyList()</code> 会返回一个 Collections 的内部类 EmptyList，而 EmptyList 并没有重写父类 AbstractList 的 <code>add(int index, E element)</code> 方法，所以执行的时候就抛出了不支持该操作的 UnsupportedOperationException 了。</p><p>这是从分析 add 方法源码得出的原因。除此之外，emptyList 方法是 final 的，返回的 EMPTY_LIST 也是 final 的，种种迹象表明 emptyList 返回的就是不可变对象，没法进行增删改查。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">emptyList</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">) EMPTY_LIST;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;"> EMPTY_LIST </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">EmptyList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">emptyList</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">T</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) EMPTY_LIST;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> List EMPTY_LIST </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> EmptyList&lt;&gt;();</span></span></code></pre></div><h3 id="_05、其他" tabindex="-1">05、其他 <a class="header-anchor" href="#_05、其他" aria-label="Permalink to &quot;05、其他&quot;">​</a></h3><p>还有两个方法比较常用：</p><ul><li><code>addAll(Collection&lt;? super T&gt; c, T... elements)</code>，往集合中添加元素</li><li><code>disjoint(Collection&lt;?&gt; c1, Collection&lt;?&gt; c2)</code>，判断两个集合是否没有交集</li></ul><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; allList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(allList, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王九</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王十</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">addAll 后：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> allList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">是否没有交集：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (Collections.</span><span style="color:#62E884;">disjoint</span><span style="color:#F6F6F4;">(list, allList) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">是</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">否</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; allList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(allList, </span><span style="color:#032F62;">&quot;沉默王九&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;沉默王十&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;addAll 后：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> allList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是否没有交集：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (Collections.</span><span style="color:#6F42C1;">disjoint</span><span style="color:#24292E;">(list, allList) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;是&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;否&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><p>输出后：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">原始顺序：[沉默王二, 沉默王三, 沉默王四, 沉默王五, 沉默王六]</span></span>
<span class="line"><span style="color:#f6f6f4;">addAll 后：[沉默王九, 沉默王十, 沉默王二]</span></span>
<span class="line"><span style="color:#f6f6f4;">是否没有交集：否</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">原始顺序：[沉默王二, 沉默王三, 沉默王四, 沉默王五, 沉默王六]</span></span>
<span class="line"><span style="color:#24292e;">addAll 后：[沉默王九, 沉默王十, 沉默王二]</span></span>
<span class="line"><span style="color:#24292e;">是否没有交集：否</span></span></code></pre></div><h3 id="_06、collectionutils-spring-和-apache-都有提供的集合工具类" tabindex="-1">06、CollectionUtils：Spring 和 Apache 都有提供的集合工具类 <a class="header-anchor" href="#_06、collectionutils-spring-和-apache-都有提供的集合工具类" aria-label="Permalink to &quot;06、CollectionUtils：Spring 和 Apache 都有提供的集合工具类&quot;">​</a></h3><p>对集合操作，除了前面说的 JDK 原生 <code>Collections</code> 工具类，<code>CollectionUtils</code>工具类也很常用。</p><p>目前比较主流的是<code>Spring</code>的<code>org.springframework.util</code>包下的 CollectionUtils 工具类。</p><img src="`+t+'"><p>和<code>Apache</code>的<code>org.apache.commons.collections</code>包下的 CollectionUtils 工具类。</p><img src="'+e+`"><p>Maven 坐标如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;4.4&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;4.4&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>Apache 的方法比 Spring 的更多一些，我们就以 Apache 的为例，来介绍一下常用的方法。</p><h4 id="集合判空" tabindex="-1">集合判空 <a class="header-anchor" href="#集合判空" aria-label="Permalink to &quot;集合判空&quot;">​</a></h4><p>通过 CollectionUtils 工具类的<code>isEmpty</code>方法可以轻松判断集合是否为空，<code>isNotEmpty</code>方法判断集合不为空。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (CollectionUtils.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">(list)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">集合为空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (CollectionUtils.</span><span style="color:#62E884;">isNotEmpty</span><span style="color:#F6F6F4;">(list)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">集合不为空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(list)) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;集合为空&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (CollectionUtils.</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">(list)) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;集合不为空&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="对两个集合进行操作" tabindex="-1">对两个集合进行操作 <a class="header-anchor" href="#对两个集合进行操作" aria-label="Permalink to &quot;对两个集合进行操作&quot;">​</a></h4><p>有时候我们需要对已有的两个集合进行操作，比如取交集或者并集等。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Integer&gt; list2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">list2.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list2.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//获取并集</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Collection</span><span style="color:#F6F6F4;">&lt;Integer&gt; unionList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CollectionUtils.</span><span style="color:#62E884;">union</span><span style="color:#F6F6F4;">(list, list2);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(unionList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//获取交集</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Collection</span><span style="color:#F6F6F4;">&lt;Integer&gt; intersectionList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CollectionUtils.</span><span style="color:#62E884;">intersection</span><span style="color:#F6F6F4;">(list, list2);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(intersectionList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//获取交集的补集</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Collection</span><span style="color:#F6F6F4;">&lt;Integer&gt; disjunctionList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CollectionUtils.</span><span style="color:#62E884;">disjunction</span><span style="color:#F6F6F4;">(list, list2);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(disjunctionList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//获取差集</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Collection</span><span style="color:#F6F6F4;">&lt;Integer&gt; subtractList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CollectionUtils.</span><span style="color:#62E884;">subtract</span><span style="color:#F6F6F4;">(list, list2);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(subtractList);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">list2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list2.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//获取并集</span></span>
<span class="line"><span style="color:#24292E;">Collection&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; unionList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CollectionUtils.</span><span style="color:#6F42C1;">union</span><span style="color:#24292E;">(list, list2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(unionList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//获取交集</span></span>
<span class="line"><span style="color:#24292E;">Collection&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; intersectionList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CollectionUtils.</span><span style="color:#6F42C1;">intersection</span><span style="color:#24292E;">(list, list2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(intersectionList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//获取交集的补集</span></span>
<span class="line"><span style="color:#24292E;">Collection&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; disjunctionList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CollectionUtils.</span><span style="color:#6F42C1;">disjunction</span><span style="color:#24292E;">(list, list2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(disjunctionList);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//获取差集</span></span>
<span class="line"><span style="color:#24292E;">Collection&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; subtractList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CollectionUtils.</span><span style="color:#6F42C1;">subtract</span><span style="color:#24292E;">(list, list2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(subtractList);</span></span></code></pre></div><p>执行结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span></code></pre></div><p>说句实话，对两个集合的操作，在实际工作中用得挺多的，特别是很多批量的场景中。以前我们需要写一堆代码，但没想到有现成的轮子。</p><h3 id="_07、小结" tabindex="-1">07、小结 <a class="header-anchor" href="#_07、小结" aria-label="Permalink to &quot;07、小结&quot;">​</a></h3><p>整体上，Collections 工具类作为集合框架的大管家，提供了一些非常便利的方法供我们调用，也非常容易掌握，没什么难点，看看方法的注释就能大致明白干嘛的。</p><p>不过，工具就放在那里，用是一回事，为什么要这么用就是另外一回事了。能不能提高自己的编码水平，很大程度上取决于你到底有没有去钻一钻源码，看这些设计 JDK 的大师们是如何写代码的，学会一招半式，在工作当中还是能很快脱颖而出的。</p><p>恐怕 JDK 的设计者是这个世界上最好的老师了，文档写得不能再详细了，代码写得不能再优雅了，基本上都达到了性能上的极致。</p><p>可能有人会说，工具类没什么鸟用，不过是调用下方法而已，但这就大错特错了：如果要你来写，你能写出来 Collections 这样一个工具类吗？</p><p>这才是高手要思考的一个问题。</p><hr>`,69),y=[r];function F(i,E,d,u,C,g){return n(),a("div",null,y)}const m=s(c,[["render",F]]);export{D as __pageData,m as default};
