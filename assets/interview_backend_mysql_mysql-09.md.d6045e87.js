import{_ as a,o as s,c as e,V as o}from"./chunks/framework.c6d8cbec.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mysql/mysql-09.md","filePath":"interview/backend/mysql/mysql-09.md"}'),t={name:"interview/backend/mysql/mysql-09.md"},n=o('<h3 id="_1、mysql数据库cpu飙升的话-要怎么处理呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1mysql%E6%95%B0%E6%8D%AE%E5%BA%93cpu%E9%A3%99%E5%8D%87%E7%9A%84%E8%AF%9D%E8%A6%81%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%E5%91%A2" target="_blank" rel="noreferrer">1、MySQL数据库cpu飙升的话，要怎么处理呢？</a> <a class="header-anchor" href="#_1、mysql数据库cpu飙升的话-要怎么处理呢" aria-label="Permalink to &quot;[1、MySQL数据库cpu飙升的话，要怎么处理呢？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#1mysql数据库cpu飙升的话要怎么处理呢)&quot;">​</a></h3><p><strong>排查过程：</strong></p><p><strong>1、</strong> 使用top 命令观察，确定是MySQLd导致还是其他原因。</p><p><strong>2、</strong> 如果是MySQLd导致的，show processlist，查看session情况，确定是不是有消耗资源的sql在运行。</p><p><strong>3、</strong> 找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太大。</p><p><strong>处理：</strong></p><p><strong>1、</strong> kill 掉这些线程(同时观察 cpu 使用率是否下降)，</p><p><strong>2、</strong> 进行相应的调整(比如说加索引、改 sql、改内存参数)</p><p><strong>3、</strong> 重新跑这些 SQL。</p><p><strong>其他情况：</strong></p><p>也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等</p><h3 id="_2、说说对sql语句优化有哪些方法-选择几条" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E8%AF%B4%E8%AF%B4%E5%AF%B9sql%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95%E9%80%89%E6%8B%A9%E5%87%A0%E6%9D%A1" target="_blank" rel="noreferrer">2、说说对SQL语句优化有哪些方法？（选择几条）</a> <a class="header-anchor" href="#_2、说说对sql语句优化有哪些方法-选择几条" aria-label="Permalink to &quot;[2、说说对SQL语句优化有哪些方法？（选择几条）](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#2说说对sql语句优化有哪些方法选择几条)&quot;">​</a></h3><p><strong>1、</strong> Where子句中：where表之间的连接必须写在其他Where条件之前，那些可以过滤掉最大数量记录的条件必须写在Where子句的末尾.HAVING最后。</p><p><strong>2、</strong> 用EXISTS替代IN、用NOT EXISTS替代NOT IN。</p><p><strong>3、</strong> 避免在索引列上使用计算</p><p><strong>4、</strong> 避免在索引列上使用IS NULL和IS NOT NULL</p><p><strong>5、</strong> 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><p><strong>6、</strong> 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</p><p><strong>7、</strong> 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</p><h3 id="_3、innodb的事务与日志的实现方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3innodb%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%B8%8E%E6%97%A5%E5%BF%97%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">3、Innodb的事务与日志的实现方式</a> <a class="header-anchor" href="#_3、innodb的事务与日志的实现方式" aria-label="Permalink to &quot;[3、Innodb的事务与日志的实现方式](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#3innodb的事务与日志的实现方式)&quot;">​</a></h3><p><strong>有多少种日志</strong></p><p>innodb两种日志redo和undo。</p><p><strong>日志的存放形式</strong></p><p><strong>1、</strong> redo：在页修改的时候，先写到 redo log buffer 里面， 然后写到 redo log 的文件系统缓存里面(fwrite)，然后再同步到磁盘文件（ fsync）。</p><p><strong>2、</strong> Undo：在 MySQL5.5 之前， undo 只能存放在 ibdata文件里面， 5.6 之后，可以通过设置 innodb_undo_tablespaces 参数把 undo log 存放在 ibdata之外。</p><p><strong>事务是如何通过日志来实现的</strong></p><p><strong>1、</strong> 因为事务在修改页时，要先记 undo，在记 undo 之前要记 undo 的 redo， 然后修改数据页，再记数据页修改的 redo。 Redo（里面包括 undo 的修改） 一定要比数据页先持久化到磁盘。</p><p><strong>2、</strong> 当事务需要回滚时，因为有 undo，可以把数据页回滚到前镜像的 状态，崩溃恢复时，如果 redo log 中事务没有对应的 commit 记录，那么需要用 undo把该事务的修改回滚到事务开始之前。</p><p><strong>3、</strong> 如果有 commit 记录，就用 redo 前滚到该事务完成时并提交掉。</p><h3 id="_4、非聚簇索引一定会回表查询吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%90%97" target="_blank" rel="noreferrer">4、非聚簇索引一定会回表查询吗？</a> <a class="header-anchor" href="#_4、非聚簇索引一定会回表查询吗" aria-label="Permalink to &quot;[4、非聚簇索引一定会回表查询吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#4非聚簇索引一定会回表查询吗)&quot;">​</a></h3><p>不一定，如果查询语句的字段全部命中了索引，那么就不必再进行回表查询（哈哈，覆盖索引就是这么回事）。</p><p>举个简单的例子，假设我们在学生表的上建立了索引，那么当进行select age from student where age &lt; 20的查询时，在索引的叶子节点上，已经包含了age信息，不会再次进行回表查询。</p><h3 id="_5、hash索引和b-树所有有什么区别或者说优劣呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5hash%E7%B4%A2%E5%BC%95%E5%92%8Cb+%E6%A0%91%E6%89%80%E6%9C%89%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E6%88%96%E8%80%85%E8%AF%B4%E4%BC%98%E5%8A%A3%E5%91%A2" target="_blank" rel="noreferrer">5、Hash索引和B+树所有有什么区别或者说优劣呢?</a> <a class="header-anchor" href="#_5、hash索引和b-树所有有什么区别或者说优劣呢" aria-label="Permalink to &quot;[5、Hash索引和B+树所有有什么区别或者说优劣呢?](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#5hash索引和b+树所有有什么区别或者说优劣呢)&quot;">​</a></h3><p><strong>1、</strong> 首先要知道Hash索引和B+树索引的底层实现原理：</p><p><strong>2、</strong> hash索引底层就是hash表，进行查找时，调用一次hash函数就可以获取到相应的键值，之后进行回表查询获得实际数据。B+树底层实现是多路平衡查找树。对于每一次的查询都是从根节点出发，查找到叶子节点方可以获得所查键值，然后根据查询判断是否需要回表查询数据。</p><p><strong>那么可以看出他们有以下的不同：</strong></p><p><strong>1、</strong> hash索引进行等值查询更快(一般情况下)，但是却无法进行范围查询。</p><p><strong>2、</strong> 因为在hash索引中经过hash函数建立索引之后，索引的顺序与原顺序无法保持一致，不能支持范围查询。而B+树的的所有节点皆遵循(左节点小于父节点，右节点大于父节点，多叉树也类似)，天然支持范围。</p><p><strong>3、</strong> hash索引不支持使用索引进行排序，原理同上。</p><p><strong>4、</strong> hash索引不支持模糊查询以及多列索引的最左前缀匹配。原理也是因为hash函数的不可预测。AAAA和AAAAB的索引没有相关性。</p><p><strong>5、</strong> hash索引任何时候都避免不了回表查询数据，而B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。</p><p><strong>6、</strong> hash索引虽然在等值查询上较快，但是不稳定。性能不可预测，当某个键值存在大量重复的时候，发生hash碰撞，此时效率可能极差。而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。</p><p><strong>7、</strong> 因此，在大多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。而不需要使用hash索引。</p><h3 id="_6、select-for-update有什么含义-会锁表还是锁行还是其他。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6select-for-update%E6%9C%89%E4%BB%80%E4%B9%88%E5%90%AB%E4%B9%89%E4%BC%9A%E9%94%81%E8%A1%A8%E8%BF%98%E6%98%AF%E9%94%81%E8%A1%8C%E8%BF%98%E6%98%AF%E5%85%B6%E4%BB%96%E3%80%82" target="_blank" rel="noreferrer">6、select for update有什么含义，会锁表还是锁行还是其他。</a> <a class="header-anchor" href="#_6、select-for-update有什么含义-会锁表还是锁行还是其他。" aria-label="Permalink to &quot;[6、select for update有什么含义，会锁表还是锁行还是其他。](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#6select-for-update有什么含义会锁表还是锁行还是其他。)&quot;">​</a></h3><p><strong>select for update 含义</strong></p><p>select查询语句是不会加锁的，但是select for update除了有查询的作用外，还会加锁呢，而且它是悲观锁哦。至于加了是行锁还是表锁，这就要看是不是用了索引/主键啦。</p><p>没用索引/主键的话就是表锁，否则就是是行锁。</p><p><strong>select for update 加锁验证</strong></p><p>表结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//id 为主键，name为唯一索引</span></span>\n<span class="line"><span style="color:#f6f6f4;">CREATE TABLE `account` (</span></span>\n<span class="line"><span style="color:#f6f6f4;">  `id` int(11) NOT NULL AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#f6f6f4;">  `name` varchar(255) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#f6f6f4;">  `balance` int(11) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#f6f6f4;">  PRIMARY KEY (`id`),</span></span>\n<span class="line"><span style="color:#f6f6f4;">  KEY `idx_name` (`name`) USING BTREE</span></span>\n<span class="line"><span style="color:#f6f6f4;">) ENGINE=InnoDB AUTO_INCREMENT=1570068 DEFAULT CHARSET=utf8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//id 为主键，name为唯一索引</span></span>\n<span class="line"><span style="color:#24292e;">CREATE TABLE `account` (</span></span>\n<span class="line"><span style="color:#24292e;">  `id` int(11) NOT NULL AUTO_INCREMENT,</span></span>\n<span class="line"><span style="color:#24292e;">  `name` varchar(255) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#24292e;">  `balance` int(11) DEFAULT NULL,</span></span>\n<span class="line"><span style="color:#24292e;">  PRIMARY KEY (`id`),</span></span>\n<span class="line"><span style="color:#24292e;">  KEY `idx_name` (`name`) USING BTREE</span></span>\n<span class="line"><span style="color:#24292e;">) ENGINE=InnoDB AUTO_INCREMENT=1570068 DEFAULT CHARSET=utf8</span></span></code></pre></div><p>id为主键，select for update 1270070这条记录时，再开一个事务对该记录更新，发现更新阻塞啦，其实是加锁了。如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/23/1723f1df3f7cd93d?w=1338&amp;h=337&amp;f=png&amp;s=47172#alt=" alt=""></p><p>我们再开一个事务对另外一条记录1270071更新，发现更新成功，因此，如果查询条件用了索引/主键，<strong>会加行锁</strong>~</p><p><img src="https://user-gold-cdn.xitu.io/2020/5/23/1723f21ad2567560?w=1419&amp;h=315&amp;f=png&amp;s=54135#alt=" alt=""></p><p>我们继续一路向北吧，换普通字段balance吧，发现又阻塞了。因此，没用索引/主键的话，<strong>select for update加的就是表锁</strong></p><p><img src="https://user-gold-cdn.xitu.io/2020/5/23/1723f297aeeb95d5?w=1421&amp;h=384&amp;f=png&amp;s=56635#alt=" alt=""></p><h3 id="_7、你们数据库是否支持emoji表情存储-如果不支持-如何操作" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%BD%A0%E4%BB%AC%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81emoji%E8%A1%A8%E6%83%85%E5%AD%98%E5%82%A8%E5%A6%82%E6%9E%9C%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C" target="_blank" rel="noreferrer">7、你们数据库是否支持emoji表情存储，如果不支持，如何操作？</a> <a class="header-anchor" href="#_7、你们数据库是否支持emoji表情存储-如果不支持-如何操作" aria-label="Permalink to &quot;[7、你们数据库是否支持emoji表情存储，如果不支持，如何操作？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#7你们数据库是否支持emoji表情存储如果不支持如何操作)&quot;">​</a></h3><p>更换字符集utf8--&gt;utf8mb4</p><h3 id="_8、索引的数据结构-b树-hash" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84b%E6%A0%91hash" target="_blank" rel="noreferrer">8、索引的数据结构（b树，hash）</a> <a class="header-anchor" href="#_8、索引的数据结构-b树-hash" aria-label="Permalink to &quot;[8、索引的数据结构（b树，hash）](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#8索引的数据结构b树hash)&quot;">​</a></h3><p>索引的数据结构和具体存储引擎的实现有关，在MySQL中使用较多的索引有<strong>Hash索引</strong>，<strong>B+树索引</strong>等，而我们经常使用的InnoDB存储引擎的默认索引实现为：B+树索引。对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。</p><p><strong>B树索引</strong></p><p>MySQL通过存储引擎取数据，基本上90%的人用的就是InnoDB了，按照实现方式分，InnoDB的索引类型目前只有两种：BTREE（B树）索引和HASH索引。B树索引是MySQL数据库中使用最频繁的索引类型，基本所有存储引擎都支持BTree索引。通常我们说的索引不出意外指的就是（B树）索引（实际是用B+树实现的，因为在查看表索引时，MySQL一律打印BTREE，所以简称为B树索引）</p><p>![99_1.png][99_1.png]</p><p><strong>查询方式：</strong></p><p><strong>1、</strong> 主键索引区:PI(关联保存的时数据的地址)按主键查询,</p><p><strong>2、</strong> 普通索引区:si(关联的id的地址,然后再到达上面的地址)。所以按主键查询,速度最快</p><p><strong>B+tree性质：</strong></p><p><strong>1、</strong> n棵子tree的节点包含n个关键字，不用来保存数据而是保存数据的索引。</p><p><strong>2、</strong> 所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。</p><p><strong>3、</strong> 所有的非终端结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字。</p><p><strong>4、</strong> B+ 树中，数据对象的插入和删除仅在叶节点上进行。</p><p><strong>5、</strong> B+树有2个头指针，一个是树的根节点，一个是最小关键码的叶节点。</p><p><strong>哈希索引</strong></p><p>简要说下，类似于数据结构中简单实现的HASH表（散列表）一样，当我们在MySQL中用哈希索引时，主要就是通过Hash算法（常见的Hash算法有直接定址法、平方取中法、折叠法、除数取余法、随机数法），将数据库字段数据转换成定长的Hash值，与这条数据的行指针一并存入Hash表的对应位置；如果发生Hash碰撞（两个不同关键字的Hash值相同），则在对应Hash键下以链表形式存储。当然这只是简略模拟图。</p><p>![99_2.png][99_2.png]</p><h3 id="_9、最左匹配原则" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D%E5%8E%9F%E5%88%99" target="_blank" rel="noreferrer">9、最左匹配原则？</a> <a class="header-anchor" href="#_9、最左匹配原则" aria-label="Permalink to &quot;[9、最左匹配原则？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#9最左匹配原则)&quot;">​</a></h3><p>在创建联合索引时候，一般需要遵循最左匹配原则。即联合索引中的属性识别度最高的放在查询语句的最前面。</p><h3 id="_10、对于关系型数据库而言-索引是相当重要的概念-请回答有关索引的几个问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E5%AF%B9%E4%BA%8E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%80%8C%E8%A8%80%E7%B4%A2%E5%BC%95%E6%98%AF%E7%9B%B8%E5%BD%93%E9%87%8D%E8%A6%81%E7%9A%84%E6%A6%82%E5%BF%B5%E8%AF%B7%E5%9B%9E%E7%AD%94%E6%9C%89%E5%85%B3%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%9A" target="_blank" rel="noreferrer">10、对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：</a> <a class="header-anchor" href="#_10、对于关系型数据库而言-索引是相当重要的概念-请回答有关索引的几个问题" aria-label="Permalink to &quot;[10、对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新面试题，2021年面试题及答案汇总.md#10对于关系型数据库而言索引是相当重要的概念请回答有关索引的几个问题：)&quot;">​</a></h3><p>1.索引的目的是什么？</p><p>快速访问数据表中的特定信息，提高检索速度</p><p>创建唯一性索引，保证数据库表中每一行数据的唯一性。</p><p>加速表和表之间的连接</p><p>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><p>2.索引对数据库系统的负面影响是什么？</p><p>负面影响：</p><p>创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><p>3.为数据表建立索引的原则有哪些？</p><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。</p><p>在频繁使用的、需要排序的字段上建立索引</p><p>4.什么情况下不宜建立索引？</p><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。</p><p>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h3 id="_11、关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" tabindex="-1">11、关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？ <a class="header-anchor" href="#_11、关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" aria-label="Permalink to &quot;11、关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&quot;">​</a></h3><h3 id="_12、如何优化长难的查询语句" tabindex="-1">12、如何优化长难的查询语句 <a class="header-anchor" href="#_12、如何优化长难的查询语句" aria-label="Permalink to &quot;12、如何优化长难的查询语句&quot;">​</a></h3><h3 id="_13、联合索引是什么-为什么需要注意联合索引中的顺序" tabindex="-1">13、联合索引是什么？为什么需要注意联合索引中的顺序？ <a class="header-anchor" href="#_13、联合索引是什么-为什么需要注意联合索引中的顺序" aria-label="Permalink to &quot;13、联合索引是什么？为什么需要注意联合索引中的顺序？&quot;">​</a></h3><h3 id="_14、什么是通用sql函数" tabindex="-1">14、什么是通用SQL函数？ <a class="header-anchor" href="#_14、什么是通用sql函数" aria-label="Permalink to &quot;14、什么是通用SQL函数？&quot;">​</a></h3><h3 id="_15、谈谈mysql的explain" tabindex="-1">15、谈谈MySQL的Explain <a class="header-anchor" href="#_15、谈谈mysql的explain" aria-label="Permalink to &quot;15、谈谈MySQL的Explain&quot;">​</a></h3><h3 id="_16、mysql-遇到过死锁问题吗-你是如何解决的" tabindex="-1">16、MySQL 遇到过死锁问题吗，你是如何解决的？ <a class="header-anchor" href="#_16、mysql-遇到过死锁问题吗-你是如何解决的" aria-label="Permalink to &quot;16、MySQL 遇到过死锁问题吗，你是如何解决的？&quot;">​</a></h3><h3 id="_17、优化limit分页" tabindex="-1">17、优化LIMIT分页 <a class="header-anchor" href="#_17、优化limit分页" aria-label="Permalink to &quot;17、优化LIMIT分页&quot;">​</a></h3><h3 id="_18、union与union-all的区别" tabindex="-1">18、UNION与UNION ALL的区别？ <a class="header-anchor" href="#_18、union与union-all的区别" aria-label="Permalink to &quot;18、UNION与UNION ALL的区别？&quot;">​</a></h3><h3 id="_19、什么是游标" tabindex="-1">19、什么是游标？ <a class="header-anchor" href="#_19、什么是游标" aria-label="Permalink to &quot;19、什么是游标？&quot;">​</a></h3><h3 id="_20、什么是子查询" tabindex="-1">20、什么是子查询 <a class="header-anchor" href="#_20、什么是子查询" aria-label="Permalink to &quot;20、什么是子查询&quot;">​</a></h3><h3 id="_21、mysql-分页" tabindex="-1">21、MySQL 分页 <a class="header-anchor" href="#_21、mysql-分页" aria-label="Permalink to &quot;21、MySQL 分页&quot;">​</a></h3><h3 id="_22、limit-1000000-加载很慢的话-你是怎么解决的呢" tabindex="-1">22、limit 1000000 加载很慢的话，你是怎么解决的呢？ <a class="header-anchor" href="#_22、limit-1000000-加载很慢的话-你是怎么解决的呢" aria-label="Permalink to &quot;22、limit 1000000 加载很慢的话，你是怎么解决的呢？&quot;">​</a></h3><h3 id="_23、innodb的事务与日志的实现方式" tabindex="-1">23、Innodb的事务与日志的实现方式 <a class="header-anchor" href="#_23、innodb的事务与日志的实现方式" aria-label="Permalink to &quot;23、Innodb的事务与日志的实现方式&quot;">​</a></h3><h3 id="_24、索引是什么" tabindex="-1">24、索引是什么? <a class="header-anchor" href="#_24、索引是什么" aria-label="Permalink to &quot;24、索引是什么?&quot;">​</a></h3><h3 id="_25、sql的生命周期" tabindex="-1">25、SQL的生命周期？ <a class="header-anchor" href="#_25、sql的生命周期" aria-label="Permalink to &quot;25、SQL的生命周期？&quot;">​</a></h3><h3 id="_26、锁的优化策略" tabindex="-1">26、锁的优化策略 <a class="header-anchor" href="#_26、锁的优化策略" aria-label="Permalink to &quot;26、锁的优化策略&quot;">​</a></h3><h3 id="_27、读写分离常见方案" tabindex="-1">27、读写分离常见方案？ <a class="header-anchor" href="#_27、读写分离常见方案" aria-label="Permalink to &quot;27、读写分离常见方案？&quot;">​</a></h3><h3 id="_28、什么是sql" tabindex="-1">28、什么是SQL？ <a class="header-anchor" href="#_28、什么是sql" aria-label="Permalink to &quot;28、什么是SQL？&quot;">​</a></h3><h3 id="_29、mysql存储引擎myisam与innodb区别" tabindex="-1">29、MySQL存储引擎MyISAM与InnoDB区别 <a class="header-anchor" href="#_29、mysql存储引擎myisam与innodb区别" aria-label="Permalink to &quot;29、MySQL存储引擎MyISAM与InnoDB区别&quot;">​</a></h3><h3 id="_30、mysql的主从延迟-你怎么解决" tabindex="-1">30、MYSQL的主从延迟，你怎么解决？ <a class="header-anchor" href="#_30、mysql的主从延迟-你怎么解决" aria-label="Permalink to &quot;30、MYSQL的主从延迟，你怎么解决？&quot;">​</a></h3>',112),r=[n];function E(l,p,h,i,d,A){return s(),e("div",null,r)}const u=a(t,[["render",E]]);export{c as __pageData,u as default};
