import{_ as s,o as n,c as a,V as o}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"应用层","description":"","frontmatter":{},"headers":[],"relativePath":"java/理论基础/计算机网络/应用层.md","filePath":"java/理论基础/计算机网络/应用层.md"}'),l={name:"java/理论基础/计算机网络/应用层.md"},p=o(`<h1 id="应用层" tabindex="-1">应用层 <a class="header-anchor" href="#应用层" aria-label="Permalink to &quot;应用层&quot;">​</a></h1><hr><h2 id="应用层功能" tabindex="-1">应用层功能 <a class="header-anchor" href="#应用层功能" aria-label="Permalink to &quot;应用层功能&quot;">​</a></h2><p>在应用进程间传输报文，实现特定类型的数据交互，去执行特定的功能。</p><hr><h2 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to &quot;HTTP 协议&quot;">​</a></h2><p>（超文本传输协议）负责发布和接收 HTML 页面和其他 Web 资源，即 Web 通信。底层通信通过 TCP 协议实现，默认端口号 80 。</p><h3 id="资源定位" tabindex="-1">资源定位 <a class="header-anchor" href="#资源定位" aria-label="Permalink to &quot;资源定位&quot;">​</a></h3><p>HTTP 协议通过 <strong>URL</strong> 来访问资源。URL 即 WEB 内容访问标识符，是一种具体的 URI。不仅唯一标识资源，而且还提供了定位该资源的信息。</p><p>通用格式为：<code>协议://IP地址或域名:端口号/文件路径?参数</code> ，如 <a href="http://localhost:443/student?id=10&amp;name=mrjoker" target="_blank" rel="noreferrer">http://localhost:443/student?id=10&amp;name=mrjoker</a></p><h3 id="连接方式" tabindex="-1">连接方式 <a class="header-anchor" href="#连接方式" aria-label="Permalink to &quot;连接方式&quot;">​</a></h3><ul><li><strong>HTTP/1.0</strong></li></ul><p>默认使用短连接：访问页面时，客户端和服务器之间每次 HTTP 操作都会单独使用一次 TCP 连接，传输完毕后自动关闭。</p><p>客户端和服务器之间都会建立多个 HTTP 会话，开销较大。</p><ul><li><strong>HTTP/1.1</strong></li></ul><p>默认使用长连接：访问页面时，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，直到 HTML 页面调用的所有 web 资源传输完毕。</p><p>长连接会在 HTTP 响应头标注：<code>Connection:keep-alive</code></p><p>但 HTTP/1.1 是串行化处理所有 web 资源请求。一旦有请求无法正常加载，后续请求就会被阻塞。</p><ul><li><strong>HTTP/2</strong></li></ul><p>增加了多路复用功能：让所有数据流共用同一个连接。接收到客户端 HTTP 请求后，服务器会一次性把所需要的 web 资源打包发送。</p><ol><li>即使有请求无法正常加载，也不会影响处理其它 web 资源请求。</li><li>TCP 连接在刚开始发送数据时会限制连接的最大速度，集中发送能更有效地利用 TCP 连接。</li></ol><h3 id="请求类型" tabindex="-1">请求类型 <a class="header-anchor" href="#请求类型" aria-label="Permalink to &quot;请求类型&quot;">​</a></h3><p>HTTP 请求有以下四种常用类型：</p><ul><li><p><strong>GET</strong>：请求服务器数据，请求参数直接附在 URL 上（不够安全，仅适用于简单公开数据的请求和提交）</p></li><li><p><strong>POST</strong>：向服务器提交数据，数据以表单形式提交（内容长度无上限，且不会被浏览器记录）</p></li><li><p><strong>PUT</strong>：修改服务器数据（慎用）</p></li><li><p><strong>DELETE</strong>：删除服务器数据（慎用）</p></li></ul><p>除此之外 HTTP 协议在正式通信前还可能发出 <strong>OPTION</strong> 请求：先询问服务器当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错。</p><h3 id="主机识别" tabindex="-1">主机识别 <a class="header-anchor" href="#主机识别" aria-label="Permalink to &quot;主机识别&quot;">​</a></h3><p>HTTP 协议是无状态协议，本身不保存请求和响应之间的通信状态。</p><p>也就是说通信过后服务器将无法相互识别客户端，因此我们必须引入其他方式让服务器记录客户端的信息。</p><h4 id="session-cookie" tabindex="-1">Session &amp; Cookie <a class="header-anchor" href="#session-cookie" aria-label="Permalink to &quot;Session &amp; Cookie&quot;">​</a></h4><p>负责记录对方主机信息，在 HTTP 通信中相互识别。cookie 保存在客户端，session 保存在服务器端。</p><ol><li><p>客户端初次访问服务器时，服务端会自动创建 session 用来标识用户。然后在响应头 Set-Cookie 项向客户端返回 session ID。</p></li><li><p>客户端再次访问服务器时，会在请求头 Cookie 项向服务器发送 session ID，服务器根据 ID 查询 Session 就可以识别用户。</p></li></ol><p><em>用户和通信的详细信息通常记录在 session 中，cookie 中只保存 session ID ，以避免信息泄露。如果客户端 cookie 被禁用，就需要利用 URL 重写把 session ID 直接附加在 URL 路径上。</em></p><h4 id="token" tabindex="-1">Token <a class="header-anchor" href="#token" aria-label="Permalink to &quot;Token&quot;">​</a></h4><p>token 和 session ID 功能相同，都用来在 HTTP 通信中识别用户，过期刷新：</p><ul><li>session ID 由服务器随机生成，保存在服务器 session 中。再次访问时只需要直接比对，就可以确认客户端身份。</li><li>token 由服务器根据用户 ID 和时间戳经过特定算法生成，服务器不保存。再次访问时服务器需要重新计算并比对，才可以确认客户端身份。</li></ul><p><em>cookie 本身不安全，浏览器中 token 除放在 cookie 外，还可以放到 localStorage 中存储。浏览器发送请求时会自动携带 session ID，但发送 token 需要手动在代码中设置。由于浏览器加载 image 标签中的地址也会发送 session ID，因此使用 token 可以有效防止 CSRF 攻击。</em></p><p>localStorage和sessionStorage的区别; localStorage生命周期是永久，除非用户手动清除，否则这些信息将永远存在。 sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，数据也就被清空了。</p><hr><h2 id="https-协议" tabindex="-1">HTTPS 协议 <a class="header-anchor" href="#https-协议" aria-label="Permalink to &quot;HTTPS 协议&quot;">​</a></h2><p>由于 HTTP 协议使用明文在互联网传送数据，易被不法分子监听和截获。我们又引入了 HTTPS 协议取而代之，默认端口 443。</p><p>HTTPS 协议在应用层下方增加了 SSL 层，使用 TLS 协议来加密和解密数据包，这样在互联网上传送的数据将经过加密。</p><h3 id="加密方式" tabindex="-1">加密方式 <a class="header-anchor" href="#加密方式" aria-label="Permalink to &quot;加密方式&quot;">​</a></h3><ol><li><p>建立连接后的数据交互采用<strong>对称加密</strong>：加密密钥和解密密钥相同。</p></li><li><p>建立连接时协商密钥采用<strong>非对称加密</strong>：加密密钥和解密密钥不同，两个密钥互相能解密对方的加密内容。</p><p>服务器会公开一个非对称加密密钥（公钥），并保留一个非对称加密码密钥（私钥）。</p></li></ol><h3 id="证书认证" tabindex="-1">证书认证 <a class="header-anchor" href="#证书认证" aria-label="Permalink to &quot;证书认证&quot;">​</a></h3><p>服务器公钥由数字认证机构 CA 统一认证。CA 会用自己的私钥加密服务器公钥和相应信息，生成数字证书。在客户端向 CA 查询时将证书发送给客户端核对。</p><p>CA 根证书（包含公钥）存储在用户的浏览器中，访问网址时会自动比对服务器公钥。</p><ol><li>客户端向服务器发送信息：请求连接，说明自己支持的加密算法，并给出随机数 A。</li><li>服务器向客户端发送信息：同意连接请求，确认合适的加密算法，并给出数字证书和随机数 B。</li><li>客户端向 CA 核对数字证书，确认有效后得到服务器公钥。</li></ol><h3 id="建立连接" tabindex="-1">建立连接 <a class="header-anchor" href="#建立连接" aria-label="Permalink to &quot;建立连接&quot;">​</a></h3><ol start="4"><li>客户端向服务器发送公钥加密信息：给出随机数 C。</li><li>服务器通过私钥解密信息，对信息 Hash 得到数字签名；然后向客户端发送私钥加密信息：返回数字签名。</li><li>客户端通过公钥解密信息，核对数字签名，确认服务器收到随机数 C。</li></ol><p>之后双方就可以按照约定的对称加密方法，使用三个随机数生成的密钥进行数据交互。</p><hr><h2 id="http-通信" tabindex="-1">HTTP 通信 <a class="header-anchor" href="#http-通信" aria-label="Permalink to &quot;HTTP 通信&quot;">​</a></h2><p>Java 程序执行 HTTP 通信的类定义在 java.net 包内，使用时需进行导入。</p><p><strong>基本通信方式</strong>：创建连接对象 》设置连接参数和请求属性 》建立连接并发送请求 》读取响应内容 》关闭连接</p><h3 id="创建连接对象" tabindex="-1">创建连接对象 <a class="header-anchor" href="#创建连接对象" aria-label="Permalink to &quot;创建连接对象&quot;">​</a></h3><ul><li><p><strong>URL 类</strong>：标记定向资源所在位置，如果格式错误则抛出 <code>IOException</code>。</p></li><li><p><strong>URLConnection 类</strong>：读取和写入 URL 类定向的资源，在 HTTP 协议中常用 HttpURLConnection 子类。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">URL</span><span style="color:#F6F6F4;"> myUrl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URL</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://www.baidu.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">HttpURLConnection</span><span style="color:#F6F6F4;"> myCon </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (HttpURLConnection)myUrl.</span><span style="color:#62E884;">openConnetcion</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">URL myUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://www.baidu.com&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">HttpURLConnection myCon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpURLConnection)myUrl.</span><span style="color:#6F42C1;">openConnetcion</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="配置连接" tabindex="-1">配置连接 <a class="header-anchor" href="#配置连接" aria-label="Permalink to &quot;配置连接&quot;">​</a></h3><p><strong>设置请求参数</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 设置连接方法（默认使用GET）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setDoInput</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 允许进行字符流输入: myCon.getInputStream().read();</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setDoOutput</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);                </span><span style="color:#7B7F8B;">// 允许进行字符流输出: myCon.getOutputStream().write();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 设置最长建立连接时间，若超时则抛出 SocketTimeoutException</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);           </span><span style="color:#7B7F8B;">// 设置最长数据读取时间，若超时则抛出 SocketTimeoutException</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 设置连接方法（默认使用GET）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setDoInput</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 允许进行字符流输入: myCon.getInputStream().read();</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setDoOutput</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);                </span><span style="color:#6A737D;">// 允许进行字符流输出: myCon.getOutputStream().write();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 设置最长建立连接时间，若超时则抛出 SocketTimeoutException</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestMethod</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);           </span><span style="color:#6A737D;">// 设置最长数据读取时间，若超时则抛出 SocketTimeoutException</span></span></code></pre></div><p><strong>设置请求属性</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 设置版本</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">version</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.2.3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);            </span></span>
<span class="line"><span style="color:#7B7F8B;">// 设置浏览器类型（常用于爬虫伪装）</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user-agent</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Mozilla/5.0 (compatible;  Windows NT 5.1;SV1)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 设置发送文本类型</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-Type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">application/json;charset=utf-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置版本</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1.2.3&quot;</span><span style="color:#24292E;">);            </span></span>
<span class="line"><span style="color:#6A737D;">// 设置浏览器类型（常用于爬虫伪装）</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Mozilla/5.0 (compatible;  Windows NT 5.1;SV1)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置发送文本类型</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json;charset=utf-8&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="连接并发送请求" tabindex="-1">连接并发送请求 <a class="header-anchor" href="#连接并发送请求" aria-label="Permalink to &quot;连接并发送请求&quot;">​</a></h3><ul><li><strong>connect 方法</strong>：建立连接并发送请求.</li><li><strong>getOutputStream 方法</strong>：关闭输出流时自动建立连接并发送输出流请求.</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">OutputStreamWriter</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStreamWriter</span><span style="color:#F6F6F4;">(myCon.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(str);                  </span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">OutputStreamWriter out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStreamWriter</span><span style="color:#24292E;">(myCon.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(str);                  </span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="获取响应数据" tabindex="-1">获取响应数据 <a class="header-anchor" href="#获取响应数据" aria-label="Permalink to &quot;获取响应数据&quot;">​</a></h3><p><strong>获取响应头信息</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">getResponseCode</span><span style="color:#F6F6F4;">();        </span><span style="color:#7B7F8B;">// 获取响应码（200为连接成功，404为未找到）</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">getHeaderField</span><span style="color:#F6F6F4;">();         </span><span style="color:#7B7F8B;">// 获取响应头字段</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">();        </span><span style="color:#6A737D;">// 获取响应码（200为连接成功，404为未找到）</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">getHeaderField</span><span style="color:#24292E;">();         </span><span style="color:#6A737D;">// 获取响应头字段</span></span></code></pre></div><p><strong>获取响应内容</strong></p><ul><li><strong>getContent 方法</strong>：获取响应内容。</li><li><strong>getInputStream 方法</strong>：输入流获取响应内容，响应表明发送了错误则抛出 <code>IOException</code>。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">getContent</span><span style="color:#F6F6F4;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(myCon.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">in.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">getContent</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">BufferedReader in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(myCon.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">in.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="关闭连接" tabindex="-1">关闭连接 <a class="header-anchor" href="#关闭连接" aria-label="Permalink to &quot;关闭连接&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">disconnect</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">disconnect</span><span style="color:#24292E;">();</span></span></code></pre></div><hr><h3 id="http-通信用例" tabindex="-1">HTTP 通信用例 <a class="header-anchor" href="#http-通信用例" aria-label="Permalink to &quot;HTTP 通信用例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 网络爬虫</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WebCrawler</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getHttpJson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//配置URL</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">URL</span><span style="color:#F6F6F4;"> myUrl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URL</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://static-data.eol.cn/www/school/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/info.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//配置连接</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">HttpURLConnection</span><span style="color:#F6F6F4;"> myCon </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (HttpURLConnection) myUrl.</span><span style="color:#62E884;">openConnection</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user-agent</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">setConnectTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">setReadTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//建立连接</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//如果连接成功</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (myCon.</span><span style="color:#62E884;">getResponseCode</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的数据读取成功，数据内容：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//读取返回数据</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> myCon.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> cnt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">available</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[cnt];</span></span>
<span class="line"><span style="color:#F6F6F4;">                in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//输出返回数据</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的数据读取失败，代码：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> myCon.</span><span style="color:#62E884;">getResponseCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">MalformedURLException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">URL错误，无法查找到资源。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">SocketTimeoutException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的数据访问连接超时。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">发送的请求存在错误，资源拒绝访问。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 网络爬虫</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebCrawler</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHttpJson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//配置URL</span></span>
<span class="line"><span style="color:#24292E;">            URL myUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://static-data.eol.cn/www/school/&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/info.json&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//配置连接</span></span>
<span class="line"><span style="color:#24292E;">            HttpURLConnection myCon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpURLConnection) myUrl.</span><span style="color:#6F42C1;">openConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">setConnectTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">setReadTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//建立连接</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果连接成功</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (myCon.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的数据读取成功，数据内容：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//读取返回数据</span></span>
<span class="line"><span style="color:#24292E;">                InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myCon.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">available</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[cnt];</span></span>
<span class="line"><span style="color:#24292E;">                in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">                String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//输出返回数据</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">            }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的数据读取失败，代码：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> myCon.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (MalformedURLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;URL错误，无法查找到资源。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(SocketTimeoutException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的数据访问连接超时。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;发送的请求存在错误，资源拒绝访问。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,76),e=[p];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const C=s(l,[["render",t]]);export{d as __pageData,C as default};
