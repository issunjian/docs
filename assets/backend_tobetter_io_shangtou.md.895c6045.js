import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/shangtou-01.83d7f817.png",o="/docs/assets/shangtou-02.85760e59.png",e="/docs/assets/shangtou-03.0b7c99d5.png",t="/docs/assets/shangtou-04.74471346.png",h=JSON.parse('{"title":"深入了解 Java IO：各种流的分类与实际应用","description":"本文详细介绍了 Java IO 的各种分类，包括输入输出流、字节流与字符流等，同时探讨了它们在实际编程中的应用场景和使用方法。阅读本文，将帮助您更全面地了解 Java IO，从而在实际编程中充分利用 Java IO 的特性，提高开发效率。","frontmatter":{"title":"深入了解 Java IO：各种流的分类与实际应用","shortTitle":"IO 分类","category":["Java核心"],"tag":["Java IO"],"description":"本文详细介绍了 Java IO 的各种分类，包括输入输出流、字节流与字符流等，同时探讨了它们在实际编程中的应用场景和使用方法。阅读本文，将帮助您更全面地了解 Java IO，从而在实际编程中充分利用 Java IO 的特性，提高开发效率。","head":[["meta",{"name":"keywords","content":"Java,Java IO,io,输入输出流,字节流, 字符流"}]]},"headers":[],"relativePath":"backend/tobetter/io/shangtou.md","filePath":"backend/tobetter/io/shangtou.md"}'),c={name:"backend/tobetter/io/shangtou.md"},r=l('<h1 id="_7-1-io-分类" tabindex="-1">7.1 IO 分类 <a class="header-anchor" href="#_7-1-io-分类" aria-label="Permalink to &quot;7.1 IO 分类&quot;">​</a></h1><p>“老王，Java IO 也太上头了吧？”新兵蛋子小二向头顶很凉快的老王抱怨道，“你瞧，我就按照传输方式对 IO 进行了一个简单的分类，就能搞出来这么多的玩意！”</p><img src="'+p+'"><p>好久没搞过 IO 了，老王看到这幅思维导图也是吃了一惊。想想也是，他当初学习 Java IO 的时候头也大，乌央乌央的一片，全是类，估计是所有 Java 包里面类最多的，一会是 Input 一会是 Output，一会是 Reader 一会是 Writer，真不知道 Java 的设计者是怎么想的。</p><p>看着肺都快要气炸的小二，老王深深地吸了一口气，耐心地对小二说：“主要是 Java 的设计者考虑得比较多吧，所以 IO 给人一种很乱的感觉，我来给你梳理一下。”</p><h3 id="_00、初识-java-io" tabindex="-1">00、初识 Java IO <a class="header-anchor" href="#_00、初识-java-io" aria-label="Permalink to &quot;00、初识 Java IO&quot;">​</a></h3><p>IO，即in和out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。</p><p>Java 中是通过流处理IO 的，那么什么是流？</p><p>流（Stream），是一个抽象的概念，是指一连串的数据（字符或字节），是以先进先出的方式发送信息的通道。</p><p>当程序需要读取数据的时候，就会开启一个通向数据源的流，这个数据源可以是文件，内存，或是网络连接。类似的，当程序需要写入数据的时候，就会开启一个通向目的地的流。这时候你就可以想象数据好像在这其中“流”动一样。</p><p>一般来说关于流的特性有下面几点：</p><ul><li>先进先出：最先写入输出流的数据最先被输入流读取到。</li><li>顺序存取：可以一个接一个地往流中写入一串字节，读出时也将按写入顺序读取一串字节，不能随机访问中间的数据。（RandomAccessFile除外）</li><li>只读或只写：每个流只能是输入流或输出流的一种，不能同时具备两个功能，输入流只能进行读操作，对输出流只能进行写操作。在一个数据传输通道中，如果既要写入数据，又要读取数据，则要分别提供两个流。</li></ul><h3 id="_01、传输方式划分" tabindex="-1">01、传输方式划分 <a class="header-anchor" href="#_01、传输方式划分" aria-label="Permalink to &quot;01、传输方式划分&quot;">​</a></h3><p>就按照你的那副思维导图来说吧。</p><p>传输方式有两种，字节和字符，那首先得搞明白字节和字符有什么区别，对吧？</p><p>字节（byte）是计算机中用来表示存储容量的一个计量单位，通常情况下，一个字节有 8 位（bit）。</p><p>字符（char）可以是计算机中使用的字母、数字、和符号，比如说 A 1 $ 这些。</p><p>通常来说，一个字母或者一个字符占用一个字节，一个汉字占用两个字节。</p><img src="'+o+`"><p>具体还要看字符编码，比如说在 UTF-8 编码下，一个英文字母（不分大小写）为一个字节，一个中文汉字为三个字节；在 Unicode 编码中，一个英文字母为一个字节，一个中文汉字为两个字节。</p><blockquote><p>PS：关于字符编码，可以看前面的章节：<a href="https://tobebetterjavaer.com/basic-extra-meal/java-unicode.html" target="_blank" rel="noreferrer">锟斤拷</a></p></blockquote><p>明白了字节与字符的区别，再来看字节流和字符流就会轻松多了。</p><p>字节流用来处理二进制文件，比如说图片啊、MP3 啊、视频啊。</p><p>字符流用来处理文本文件，文本文件可以看作是一种特殊的二进制文件，只不过经过了编码，便于人们阅读。</p><p>换句话说就是，字节流可以处理一切文件，而字符流只能处理文本。</p><p>虽然 IO 类很多，但核心的就是 4 个抽象类：InputStream、OutputStream、Reader、Writer。</p><p>（<strong>抽象大法真好</strong>）</p><p>虽然 IO 类的方法也很多，但核心的也就 2 个：read 和 write。</p><p><strong>InputStream 类</strong></p><ul><li><code>int read()</code>：读取数据</li><li><code>int read(byte b[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字节，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字节</li><li><code>int available()</code>：返回可读的字节数</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>OutputStream 类</strong></p><ul><li><code>void write(int b)</code>： 写入一个字节，虽然参数是一个 int 类型，但只有低 8 位才会写入，高 24 位会舍弃（这块后面再讲）</li><li><code>void write(byte b[], int off, int len)</code>： 将数组 b 中的从 off 位置开始，长度为 len 的字节写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><p><strong>Reader 类</strong></p><ul><li><code>int read()</code>：读取单个字符</li><li><code>int read(char cbuf[], int off, int len)</code>：从第 off 位置开始读，读取 len 长度的字符，然后放入数组 b 中</li><li><code>long skip(long n)</code>：跳过指定个数的字符</li><li><code>int ready()</code>：是否可以读了</li><li><code>void close()</code>：关闭流，释放资源</li></ul><p><strong>Writer 类</strong></p><ul><li><code>void write(int c)</code>： 写入一个字符</li><li><code>void write( char cbuf[], int off, int len)</code>： 将数组 cbuf 中的从 off 位置开始，长度为 len 的字符写入</li><li><code>void flush()</code>： 强制刷新，将缓冲区的数据写入</li><li><code>void close()</code>：关闭流</li></ul><p>理解了上面这些方法，基本上 IO 的灵魂也就全部掌握了。</p><p>字节流和字符流的区别：</p><ul><li>字节流一般用来处理图像、视频、音频、PPT、Word等类型的文件。字符流一般用于处理纯文本类型的文件，如TXT文件等，但不能处理图像视频等非文本文件。用一句话说就是：字节流可以处理一切文件，而字符流只能处理纯文本文件。</li><li>字节流本身没有缓冲区，缓冲字节流相对于字节流，效率提升非常高。而字符流本身就带有缓冲区，缓冲字符流相对于字符流效率提升就不是那么大了。</li></ul><p>以写文件为例，我们查看字符流的源码，发现确实有利用到缓冲区：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 声明一个 char 类型的数组，用于写入输出流</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] writeBuffer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 定义 writeBuffer 数组的大小，必须 &gt;= 1</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> WRITE_BUFFER_SIZE </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 写入给定字符串中的一部分到输出流中</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> off, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len) throws IOException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 synchronized 关键字同步代码块，确保线程安全</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (lock) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> cbuf[];</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果 len &lt;= WRITE_BUFFER_SIZE，则使用 writeBuffer 数组进行写入</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (len </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> WRITE_BUFFER_SIZE) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 如果 writeBuffer 为 null，则创建一个大小为 WRITE_BUFFER_SIZE 的新 char 数组</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (writeBuffer </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                writeBuffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[WRITE_BUFFER_SIZE];</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            cbuf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> writeBuffer;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {    </span><span style="color:#7B7F8B;">// 如果 len &gt; WRITE_BUFFER_SIZE，则不永久分配非常大的缓冲区</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 创建一个大小为 len 的新 char 数组</span></span>
<span class="line"><span style="color:#F6F6F4;">            cbuf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[len];</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 将 str 中的一部分（从 off 开始，长度为 len）拷贝到 cbuf 数组中</span></span>
<span class="line"><span style="color:#F6F6F4;">        str.</span><span style="color:#62E884;">getChars</span><span style="color:#F6F6F4;">(off, (off </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> len), cbuf, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 将 cbuf 数组中的数据写入输出流中</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(cbuf, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 声明一个 char 类型的数组，用于写入输出流</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] writeBuffer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义 writeBuffer 数组的大小，必须 &gt;= 1</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> WRITE_BUFFER_SIZE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 写入给定字符串中的一部分到输出流中</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(String str, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> off, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 synchronized 关键字同步代码块，确保线程安全</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (lock) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> cbuf[];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果 len &lt;= WRITE_BUFFER_SIZE，则使用 writeBuffer 数组进行写入</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> WRITE_BUFFER_SIZE) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果 writeBuffer 为 null，则创建一个大小为 WRITE_BUFFER_SIZE 的新 char 数组</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (writeBuffer </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                writeBuffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[WRITE_BUFFER_SIZE];</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            cbuf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> writeBuffer;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {    </span><span style="color:#6A737D;">// 如果 len &gt; WRITE_BUFFER_SIZE，则不永久分配非常大的缓冲区</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建一个大小为 len 的新 char 数组</span></span>
<span class="line"><span style="color:#24292E;">            cbuf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[len];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将 str 中的一部分（从 off 开始，长度为 len）拷贝到 cbuf 数组中</span></span>
<span class="line"><span style="color:#24292E;">        str.</span><span style="color:#6F42C1;">getChars</span><span style="color:#24292E;">(off, (off </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> len), cbuf, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将 cbuf 数组中的数据写入输出流中</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(cbuf, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码是 Java IO 类库中的 OutputStreamWriter 类的 write 方法，可以看到缓冲区的大小是 1024 个 char。</p><p>我们再以文件的字符流和字节流来做一下对比，代码差别很小。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 字节流</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileInputStream</span><span style="color:#F6F6F4;"> fis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">input.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">FileOutputStream</span><span style="color:#F6F6F4;"> fos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fis.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        fos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 字符流</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">input.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 字节流</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileInputStream fis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     FileOutputStream fos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fis.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        fos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字符流</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileReader fr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">     FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_02、操作对象划分" tabindex="-1">02、操作对象划分 <a class="header-anchor" href="#_02、操作对象划分" aria-label="Permalink to &quot;02、操作对象划分&quot;">​</a></h3><p>小二，你细想一下，IO IO，不就是输入输出（Input/Output）嘛：</p><ul><li>Input：将外部的数据读入内存，比如说把文件从硬盘读取到内存，从网络读取数据到内存等等</li><li>Output：将内存中的数据写入到外部，比如说把数据从内存写入到文件，把数据从内存输出到网络等等。</li></ul><p>所有的程序，在执行的时候，都是在内存上进行的，一旦关机，内存中的数据就没了，那如果想要持久化，就需要把内存中的数据输出到外部，比如说文件。</p><p>文件操作算是 IO 中最典型的操作了，也是最频繁的操作。那其实你可以换个角度来思考，比如说按照 IO 的操作对象来思考，IO 就可以分类为：文件、数组、管道、基本数据类型、缓冲、打印、对象序列化/反序列化，以及转换等。</p><img src="`+e+`"><h4 id="_1-文件" tabindex="-1"><strong>1）文件</strong> <a class="header-anchor" href="#_1-文件" aria-label="Permalink to &quot;**1）文件**&quot;">​</a></h4><p>文件流也就是直接操作文件的流，可以细分为字节流（FileInputStream 和 FileOuputStream）和字符流（FileReader 和 FileWriter）。</p><p>FileInputStream 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 声明一个 int 类型的变量 b，用于存储读取到的字节</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个 FileInputStream 对象，用于读取文件 fis.txt 中的数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileInputStream</span><span style="color:#F6F6F4;"> fis1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fis.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 循环读取文件中的数据</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fis1.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 将读取到的字节转换为对应的 ASCII 字符，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">((</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)b);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 FileInputStream 对象，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">fis1.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 声明一个 int 类型的变量 b，用于存储读取到的字节</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 FileInputStream 对象，用于读取文件 fis.txt 中的数据</span></span>
<span class="line"><span style="color:#24292E;">FileInputStream fis1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fis.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 循环读取文件中的数据</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fis1.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将读取到的字节转换为对应的 ASCII 字符，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)b);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 FileInputStream 对象，释放资源</span></span>
<span class="line"><span style="color:#24292E;">fis1.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>FileOutputStream 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 FileOutputStream 对象，用于写入数据到文件 fos.txt 中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileOutputStream</span><span style="color:#F6F6F4;"> fos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fos.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向文件中写入数据，这里写入的是字符串 &quot;沉默王二&quot; 对应的字节数组</span></span>
<span class="line"><span style="color:#F6F6F4;">fos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 FileOutputStream 对象，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">fos.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 FileOutputStream 对象，用于写入数据到文件 fos.txt 中</span></span>
<span class="line"><span style="color:#24292E;">FileOutputStream fos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fos.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向文件中写入数据，这里写入的是字符串 &quot;沉默王二&quot; 对应的字节数组</span></span>
<span class="line"><span style="color:#24292E;">fos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 FileOutputStream 对象，释放资源</span></span>
<span class="line"><span style="color:#24292E;">fos.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>FileReader 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 声明一个 int 类型的变量 b，用于存储读取到的字符</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个 FileReader 对象，用于读取文件 read.txt 中的数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fileReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">read.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 循环读取文件中的数据</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fileReader.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 将读取到的字符强制转换为 char 类型，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">((</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)b);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 FileReader 对象，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">fileReader.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 声明一个 int 类型的变量 b，用于存储读取到的字符</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 FileReader 对象，用于读取文件 read.txt 中的数据</span></span>
<span class="line"><span style="color:#24292E;">FileReader fileReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;read.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 循环读取文件中的数据</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileReader.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将读取到的字符强制转换为 char 类型，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)b);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 FileReader 对象，释放资源</span></span>
<span class="line"><span style="color:#24292E;">fileReader.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>FileWriter 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 FileWriter 对象，用于写入数据到文件 fw.txt 中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fileWriter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fw.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将字符串 &quot;沉默王二&quot; 转换为字符数组</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] chars </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">toCharArray</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向文件中写入数据，这里写入的是 chars 数组中的所有字符</span></span>
<span class="line"><span style="color:#F6F6F4;">fileWriter.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(chars, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, chars.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 FileWriter 对象，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">fileWriter.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 FileWriter 对象，用于写入数据到文件 fw.txt 中</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fileWriter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fw.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将字符串 &quot;沉默王二&quot; 转换为字符数组</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] chars </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toCharArray</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向文件中写入数据，这里写入的是 chars 数组中的所有字符</span></span>
<span class="line"><span style="color:#24292E;">fileWriter.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(chars, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, chars.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 FileWriter 对象，释放资源</span></span>
<span class="line"><span style="color:#24292E;">fileWriter.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>文件流还可以用于创建、删除、重命名文件等操作。FileOutputStream 和 FileWriter 构造函数的第二个参数可以指定是否追加数据到文件末尾。</p><p>示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建文件</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> file </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (file.</span><span style="color:#62E884;">createNewFile</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件创建成功</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件已存在</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 删除文件</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (file.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件删除成功</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件删除失败</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 重命名文件</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> oldFile </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">old.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> newFile </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">new.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (oldFile.</span><span style="color:#62E884;">renameTo</span><span style="color:#F6F6F4;">(newFile)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件重命名成功</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件重命名失败</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建文件</span></span>
<span class="line"><span style="color:#24292E;">File file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (file.</span><span style="color:#6F42C1;">createNewFile</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件创建成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件已存在&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除文件</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (file.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件删除成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件删除失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重命名文件</span></span>
<span class="line"><span style="color:#24292E;">File oldFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;old.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">File newFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldFile.</span><span style="color:#6F42C1;">renameTo</span><span style="color:#24292E;">(newFile)) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件重命名成功&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件重命名失败&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当掌握了文件的输入输出，其他的自然也就掌握了，都大差不差。</p><h4 id="_2-数组-内存" tabindex="-1"><strong>2）数组（内存）</strong> <a class="header-anchor" href="#_2-数组-内存" aria-label="Permalink to &quot;**2）数组（内存）**&quot;">​</a></h4><p>通常来说，针对文件的读写操作，使用文件流配合缓冲流就够用了，但为了提升效率，频繁地读写文件并不是太好，那么就出现了数组流，有时候也称为内存流。</p><p>ByteArrayInputStream 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 ByteArrayInputStream 对象，用于从字节数组中读取数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> is </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ByteArrayInputStream</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(StandardCharsets.UTF_8)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 定义一个字节数组用于存储读取到的数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] flush </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 定义一个变量用于存储每次读取到的字节数</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 循环读取字节数组中的数据，并输出到控制台</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> (len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> is.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(flush))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 将读取到的字节转换为对应的字符串，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(flush, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭输入流，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">is.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 ByteArrayInputStream 对象，用于从字节数组中读取数据</span></span>
<span class="line"><span style="color:#24292E;">InputStream is </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteArrayInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义一个字节数组用于存储读取到的数据</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] flush </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义一个变量用于存储每次读取到的字节数</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 循环读取字节数组中的数据，并输出到控制台</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> is.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(flush))) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将读取到的字节转换为对应的字符串，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(flush, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭输入流，释放资源</span></span>
<span class="line"><span style="color:#24292E;">is.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>ByteArrayOutputStream 的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 ByteArrayOutputStream 对象，用于写入数据到内存缓冲区中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ByteArrayOutputStream</span><span style="color:#F6F6F4;"> bos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ByteArrayOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 定义一个字节数组用于存储要写入内存缓冲区中的数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] info </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 向内存缓冲区中写入数据，这里写入的是 info 数组中的所有字节</span></span>
<span class="line"><span style="color:#F6F6F4;">bos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(info, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, info.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将内存缓冲区中的数据转换为字节数组</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] dest </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bos.</span><span style="color:#62E884;">toByteArray</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 ByteArrayOutputStream 对象，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">bos.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 ByteArrayOutputStream 对象，用于写入数据到内存缓冲区中</span></span>
<span class="line"><span style="color:#24292E;">ByteArrayOutputStream bos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteArrayOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义一个字节数组用于存储要写入内存缓冲区中的数据</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] info </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向内存缓冲区中写入数据，这里写入的是 info 数组中的所有字节</span></span>
<span class="line"><span style="color:#24292E;">bos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(info, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, info.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将内存缓冲区中的数据转换为字节数组</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] dest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bos.</span><span style="color:#6F42C1;">toByteArray</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 ByteArrayOutputStream 对象，释放资源</span></span>
<span class="line"><span style="color:#24292E;">bos.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>数组流可以用于在内存中读写数据，比如将数据存储在字节数组中进行压缩、加密、序列化等操作。它的优点是不需要创建临时文件，可以提高程序的效率。但是，数组流也有缺点，它只能存储有限的数据量，如果存储的数据量过大，会导致内存溢出。</p><h4 id="_3-管道" tabindex="-1"><strong>3）管道</strong> <a class="header-anchor" href="#_3-管道" aria-label="Permalink to &quot;**3）管道**&quot;">​</a></h4><p>Java 中的管道和 Unix/Linux 中的管道不同，在 Unix/Linux 中，不同的进程之间可以通过管道来通信，但 Java 中，通信的双方必须在同一个进程中，也就是在同一个 JVM 中，管道为线程之间的通信提供了通信能力。</p><p>一个线程通过 PipedOutputStream 写入的数据可以被另外一个线程通过相关联的 PipedInputStream 读取出来。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 PipedOutputStream 对象和一个 PipedInputStream 对象</span></span>
<span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PipedOutputStream</span><span style="color:#F6F6F4;"> pipedOutputStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">PipedOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PipedInputStream</span><span style="color:#F6F6F4;"> pipedInputStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">PipedInputStream</span><span style="color:#F6F6F4;">(pipedOutputStream);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个线程，向 PipedOutputStream 中写入数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> thread1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 将字符串 &quot;沉默王二&quot; 转换为字节数组，并写入到 PipedOutputStream 中</span></span>
<span class="line"><span style="color:#F6F6F4;">            pipedOutputStream.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 关闭 PipedOutputStream，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">            pipedOutputStream.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个线程，从 PipedInputStream 中读取数据并输出到控制台</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> thread2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 定义一个字节数组用于存储读取到的数据</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] flush </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 定义一个变量用于存储每次读取到的字节数</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 循环读取字节数组中的数据，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> (len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pipedInputStream.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(flush))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 将读取到的字节转换为对应的字符串，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(flush, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len));</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 关闭 PipedInputStream，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">            pipedInputStream.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 启动线程1和线程2</span></span>
<span class="line"><span style="color:#F6F6F4;">thread1.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">thread2.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 PipedOutputStream 对象和一个 PipedInputStream 对象</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PipedOutputStream pipedOutputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PipedOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> PipedInputStream pipedInputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PipedInputStream</span><span style="color:#24292E;">(pipedOutputStream);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个线程，向 PipedOutputStream 中写入数据</span></span>
<span class="line"><span style="color:#24292E;">Thread thread1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将字符串 &quot;沉默王二&quot; 转换为字节数组，并写入到 PipedOutputStream 中</span></span>
<span class="line"><span style="color:#24292E;">            pipedOutputStream.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 关闭 PipedOutputStream，释放资源</span></span>
<span class="line"><span style="color:#24292E;">            pipedOutputStream.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个线程，从 PipedInputStream 中读取数据并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">Thread thread2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 定义一个字节数组用于存储读取到的数据</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] flush </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 定义一个变量用于存储每次读取到的字节数</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 循环读取字节数组中的数据，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pipedInputStream.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(flush))) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 将读取到的字节转换为对应的字符串，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(flush, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 关闭 PipedInputStream，释放资源</span></span>
<span class="line"><span style="color:#24292E;">            pipedInputStream.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 启动线程1和线程2</span></span>
<span class="line"><span style="color:#24292E;">thread1.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">thread2.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span></code></pre></div><p>使用管道流可以实现不同线程之间的数据传输，可以用于线程间的通信、数据的传递等。但是，管道流也有一些局限性，比如只能在同一个 JVM 中的线程之间使用，不能跨越不同的 JVM 进程。</p><h4 id="_4-基本数据类型" tabindex="-1"><strong>4）基本数据类型</strong> <a class="header-anchor" href="#_4-基本数据类型" aria-label="Permalink to &quot;**4）基本数据类型**&quot;">​</a></h4><p>基本数据类型输入输出流是一个字节流，该流不仅可以读写字节和字符，还可以读写基本数据类型。</p><p>DataInputStream 提供了一系列可以读基本数据类型的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 DataInputStream 对象，用于从文件中读取数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">DataInputStream</span><span style="color:#F6F6F4;"> dis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DataInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">das.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取一个字节，将其转换为 byte 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readByte</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取两个字节，将其转换为 short 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">short</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readShort</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取四个字节，将其转换为 int 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readInt</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取八个字节，将其转换为 long 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> l </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readLong</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取四个字节，将其转换为 float 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readFloat</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取八个字节，将其转换为 double 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readDouble</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取一个字节，将其转换为 boolean 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> bb </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readBoolean</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取两个字节，将其转换为 char 类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> ch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dis.</span><span style="color:#62E884;">readChar</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 DataInputStream，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">dis.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 DataInputStream 对象，用于从文件中读取数据</span></span>
<span class="line"><span style="color:#24292E;">DataInputStream dis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;das.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取一个字节，将其转换为 byte 类型</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readByte</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取两个字节，将其转换为 short 类型</span></span>
<span class="line"><span style="color:#D73A49;">short</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readShort</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取四个字节，将其转换为 int 类型</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readInt</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取八个字节，将其转换为 long 类型</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readLong</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取四个字节，将其转换为 float 类型</span></span>
<span class="line"><span style="color:#D73A49;">float</span><span style="color:#24292E;"> f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readFloat</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取八个字节，将其转换为 double 类型</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readDouble</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取一个字节，将其转换为 boolean 类型</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> bb </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readBoolean</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取两个字节，将其转换为 char 类型</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dis.</span><span style="color:#6F42C1;">readChar</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 DataInputStream，释放资源</span></span>
<span class="line"><span style="color:#24292E;">dis.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>DataOutputStream 提供了一系列可以写基本数据类型的方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 DataOutputStream 对象，用于将数据写入到文件中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">DataOutputStream</span><span style="color:#F6F6F4;"> das </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DataOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">das.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 byte 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeByte</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 short 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeShort</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 int 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 long 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeLong</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10000L</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 float 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeFloat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">12.34F</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 double 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeDouble</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">12.56</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 boolean 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeBoolean</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将一个 char 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">writeChar</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">A</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 DataOutputStream，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">das.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 DataOutputStream 对象，用于将数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">DataOutputStream das </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;das.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 byte 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeByte</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 short 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeShort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 int 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 long 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000L</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 float 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeFloat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12.34F</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 double 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeDouble</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">12.56</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 boolean 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeBoolean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将一个 char 类型的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">writeChar</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 DataOutputStream，释放资源</span></span>
<span class="line"><span style="color:#24292E;">das.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>除了 DataInputStream 和 DataOutputStream，Java IO 还提供了其他一些读写基本数据类型和字符串的流类，包括 ObjectInputStream 和 ObjectOutputStream（用于读写对象）。</p><p>示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ObjectOutputStream</span><span style="color:#F6F6F4;"> oos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ObjectOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">person.dat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        oos.</span><span style="color:#62E884;">writeObject</span><span style="color:#F6F6F4;">(p);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ObjectInputStream</span><span style="color:#F6F6F4;"> ois </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ObjectInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">person.dat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Person) ois.</span><span style="color:#62E884;">readObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(p);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">ClassNotFoundException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (ObjectOutputStream oos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;person.dat&quot;</span><span style="color:#24292E;">))) {</span></span>
<span class="line"><span style="color:#24292E;">        Person p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        oos.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (ObjectInputStream ois </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;person.dat&quot;</span><span style="color:#24292E;">))) {</span></span>
<span class="line"><span style="color:#24292E;">        Person p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Person) ois.</span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException | ClassNotFoundException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上代码创建了一个 Person 对象，将其写入文件中，然后从文件中读取该对象，并打印在控制台上。</p><h4 id="_5-缓冲" tabindex="-1"><strong>5）缓冲</strong> <a class="header-anchor" href="#_5-缓冲" aria-label="Permalink to &quot;**5）缓冲**&quot;">​</a></h4><p>CPU 很快，它比内存快 100 倍，比磁盘快百万倍。那也就意味着，程序和内存交互会很快，和硬盘交互相对就很慢，这样就会导致性能问题。</p><p>为了减少程序和硬盘的交互，提升程序的效率，就引入了缓冲流，也就是类名前缀带有 Buffer 的那些，比如说 BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter。</p><img src="`+t+`"><p>缓冲流在内存中设置了一个缓冲区，只有缓冲区存储了足够多的带操作的数据后，才会和内存或者硬盘进行交互。简单来说，就是一次多读/写点，少读/写几次，这样程序的性能就会提高。</p><p>以下是一个使用 BufferedInputStream 读取文件的示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 BufferedInputStream 对象，用于从文件中读取数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedInputStream</span><span style="color:#F6F6F4;"> bis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个字节数组，作为缓存区</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取文件中的数据，并将其存储到缓存区中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> bytesRead;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((bytesRead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bis.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 对缓存区中的数据进行处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 这里只是简单地将读取到的字节数组转换为字符串并打印出来</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, bytesRead));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 BufferedInputStream，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">bis.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 BufferedInputStream 对象，用于从文件中读取数据</span></span>
<span class="line"><span style="color:#24292E;">BufferedInputStream bis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个字节数组，作为缓存区</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取文件中的数据，并将其存储到缓存区中</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bis.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对缓存区中的数据进行处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里只是简单地将读取到的字节数组转换为字符串并打印出来</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bytesRead));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 BufferedInputStream，释放资源</span></span>
<span class="line"><span style="color:#24292E;">bis.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上述代码中，首先创建了一个 BufferedInputStream 对象，用于从文件中读取数据。然后创建了一个字节数组作为缓存区，每次读取数据时将数据存储到缓存区中。读取数据的过程是通过 while 循环实现的，每次读取数据后对缓存区中的数据进行处理。最后关闭 BufferedInputStream，释放资源。</p><p>以下是一个使用 BufferedOutputStream 写入文件的示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 BufferedOutputStream 对象，用于将数据写入到文件中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedOutputStream</span><span style="color:#F6F6F4;"> bos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个字节数组，作为缓存区</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将数据写入到文件中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二是个大傻子!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> data.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">bos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 刷新缓存区，将缓存区中的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">bos.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 BufferedOutputStream，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">bos.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 BufferedOutputStream 对象，用于将数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">BufferedOutputStream bos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个字节数组，作为缓存区</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二是个大傻子!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">bos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 刷新缓存区，将缓存区中的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">bos.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 BufferedOutputStream，释放资源</span></span>
<span class="line"><span style="color:#24292E;">bos.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上述代码中，首先创建了一个 BufferedOutputStream 对象，用于将数据写入到文件中。然后创建了一个字节数组作为缓存区，将数据写入到缓存区中。写入数据的过程是通过 write() 方法实现的，将字节数组作为参数传递给 write() 方法即可。</p><p>最后，通过 flush() 方法将缓存区中的数据写入到文件中。在写入数据时，由于使用了 BufferedOutputStream，数据会先被写入到缓存区中，只有在缓存区被填满或者调用了 flush() 方法时才会将缓存区中的数据写入到文件中。</p><p>以下是一个使用 BufferedReader 读取文件的示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 BufferedReader 对象，用于从文件中读取数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> br </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取文件中的数据，并将其存储到字符串中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> br.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 对读取到的数据进行处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 这里只是简单地将读取到的每一行字符串打印出来</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(line);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 BufferedReader，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">br.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 BufferedReader 对象，用于从文件中读取数据</span></span>
<span class="line"><span style="color:#24292E;">BufferedReader br </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取文件中的数据，并将其存储到字符串中</span></span>
<span class="line"><span style="color:#24292E;">String line;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> br.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 对读取到的数据进行处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里只是简单地将读取到的每一行字符串打印出来</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(line);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 BufferedReader，释放资源</span></span>
<span class="line"><span style="color:#24292E;">br.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上述代码中，首先创建了一个 BufferedReader 对象，用于从文件中读取数据。然后使用 readLine() 方法读取文件中的数据，每次读取一行数据并将其存储到一个字符串中。读取数据的过程是通过 while 循环实现的。</p><p>以下是一个使用 BufferedWriter 写入文件的示例代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 BufferedWriter 对象，用于将数据写入到文件中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将数据写入到文件中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二，真帅气</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 刷新缓存区，将缓存区中的数据写入到文件中</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 BufferedWriter，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 BufferedWriter 对象，用于将数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">BufferedWriter bw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二，真帅气&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 刷新缓存区，将缓存区中的数据写入到文件中</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 BufferedWriter，释放资源</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上述代码中，首先创建了一个 BufferedWriter 对象，用于将数据写入到文件中。然后使用 write() 方法将数据写入到缓存区中，写入数据的过程和使用 FileWriter 类似。需要注意的是，使用 BufferedWriter 写入数据时，数据会先被写入到缓存区中，只有在缓存区被填满或者调用了 flush() 方法时才会将缓存区中的数据写入到文件中。</p><p>最后，通过 flush() 方法将缓存区中的数据写入到文件中，并通过 close() 方法关闭 BufferedWriter，释放资源。</p><p>使用缓冲流可以提高读写效率，减少了频繁的读写磁盘或网络的次数，从而提高了程序的性能。但是，在使用缓冲流时需要注意缓冲区的大小和清空缓冲区的时机，以避免数据丢失或不完整的问题。</p><h4 id="_6-打印" tabindex="-1"><strong>6）打印</strong> <a class="header-anchor" href="#_6-打印" aria-label="Permalink to &quot;**6）打印**&quot;">​</a></h4><p>Java 的打印流是一组用于打印输出数据的类，包括 PrintStream 和 PrintWriter 两个类。</p><p>恐怕 Java 程序员一生当中最常用的就是打印流了：<code>System.out</code> 其实返回的就是一个 PrintStream 对象，可以用来打印各式各样的对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二是真的二！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二是真的二！&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>PrintStream 最终输出的是字节数据，而 PrintWriter 则是扩展了 Writer 接口，所以它的 <code>print()/println()</code> 方法最终输出的是字符数据。使用上几乎和 PrintStream 一模一样。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">StringWriter</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringWriter</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">PrintWriter</span><span style="color:#F6F6F4;"> pw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">PrintWriter</span><span style="color:#F6F6F4;">(buffer)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    pw.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(buffer.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StringWriter buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringWriter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (PrintWriter pw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PrintWriter</span><span style="color:#24292E;">(buffer)) {</span></span>
<span class="line"><span style="color:#24292E;">    pw.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(buffer.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span></code></pre></div><h4 id="_7-对象序列化-反序列化" tabindex="-1"><strong>7）对象序列化/反序列化</strong> <a class="header-anchor" href="#_7-对象序列化-反序列化" aria-label="Permalink to &quot;**7）对象序列化/反序列化**&quot;">​</a></h4><p>序列化本质上是将一个 Java 对象转成字节数组，然后可以将其保存到文件中，或者通过网络传输到远程。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ByteArrayOutputStream</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ByteArrayOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 try-with-resources 语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ObjectOutputStream</span><span style="color:#F6F6F4;"> output </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ObjectOutputStream</span><span style="color:#F6F6F4;">(buffer)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 writeUTF() 方法将字符串 &quot;沉默王二&quot; 写入到缓冲区中</span></span>
<span class="line"><span style="color:#F6F6F4;">    output.</span><span style="color:#62E884;">writeUTF</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 toByteArray() 方法将缓冲区中的数据转换成字节数组，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(buffer.</span><span style="color:#62E884;">toByteArray</span><span style="color:#F6F6F4;">()));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据</span></span>
<span class="line"><span style="color:#24292E;">ByteArrayOutputStream buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ByteArrayOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 try-with-resources 语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (ObjectOutputStream output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectOutputStream</span><span style="color:#24292E;">(buffer)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 writeUTF() 方法将字符串 &quot;沉默王二&quot; 写入到缓冲区中</span></span>
<span class="line"><span style="color:#24292E;">    output.</span><span style="color:#6F42C1;">writeUTF</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 toByteArray() 方法将缓冲区中的数据转换成字节数组，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(buffer.</span><span style="color:#6F42C1;">toByteArray</span><span style="color:#24292E;">()));</span></span></code></pre></div><p>与其对应的，有序列化，就有反序列化，也就是再将字节数组转成 Java 对象的过程。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ObjectInputStream</span><span style="color:#F6F6F4;"> input </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ObjectInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Person.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> input.</span><span style="color:#62E884;">readUTF</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (ObjectInputStream input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Person.txt&quot;</span><span style="color:#24292E;">)))) {</span></span>
<span class="line"><span style="color:#24292E;">    String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">readUTF</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码主要使用了 Java 的 ByteArrayOutputStream 和 ObjectOutputStream 类，将字符串 &quot;沉默王二&quot; 写入到一个字节数组缓冲区中，并将缓冲区中的数据转换成字节数组输出到控制台。</p><p>具体的执行过程如下：</p><ul><li>创建一个 ByteArrayOutputStream 对象 buffer，用于存储数据。</li><li>使用 <a href="https://tobebetterjavaer.com/exception/try-with-resources.html" target="_blank" rel="noreferrer">try-with-resources</a> 语句创建一个 ObjectOutputStream 对象 output，并将其与 buffer 关联。</li><li>使用 writeUTF() 方法将字符串 &quot;沉默王二&quot; 写入到缓冲区中。</li><li>当 try-with-resources 语句执行完毕时，会自动调用 output 的 close() 方法关闭输出流，释放资源。</li><li>使用 toByteArray() 方法将缓冲区中的数据转换成字节数组。</li><li>使用 Arrays.toString() 方法将字节数组转换成字符串，并输出到控制台。</li></ul><h4 id="_8-转换" tabindex="-1"><strong>8）转换</strong> <a class="header-anchor" href="#_8-转换" aria-label="Permalink to &quot;**8）转换**&quot;">​</a></h4><p>InputStreamReader 是从字节流到字符流的桥连接，它使用指定的字符集读取字节并将它们解码为字符。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 InputStreamReader 对象 isr，使用 FileInputStream 对象读取文件 demo.txt 的内容并将其转换为字符流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">InputStreamReader</span><span style="color:#F6F6F4;"> isr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">demo.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个字符数组 cha，用于存储读取的字符数据，其中 1024 表示数组的长度</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] cha </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 read() 方法读取 isr 中的数据，并将读取的字符数据存储到 cha 数组中，返回值 len 表示读取的字符数</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> isr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(cha);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将 cha 数组中从下标 0 开始、长度为 len 的部分转换成字符串，并输出到控制台</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(cha, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 InputStreamReader 对象 isr，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">isr.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 InputStreamReader 对象 isr，使用 FileInputStream 对象读取文件 demo.txt 的内容并将其转换为字符流</span></span>
<span class="line"><span style="color:#24292E;">InputStreamReader isr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;demo.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个字符数组 cha，用于存储读取的字符数据，其中 1024 表示数组的长度</span></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] cha </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 read() 方法读取 isr 中的数据，并将读取的字符数据存储到 cha 数组中，返回值 len 表示读取的字符数</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> isr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(cha);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 cha 数组中从下标 0 开始、长度为 len 的部分转换成字符串，并输出到控制台</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(cha, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 InputStreamReader 对象 isr，释放资源</span></span>
<span class="line"><span style="color:#24292E;">isr.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这段代码主要使用了 Java 的 InputStreamReader 和 FileInputStream 类，从文件 demo.txt 中读取数据并将其转换为字符流，然后将读取的字符数据存储到一个字符数组中，并输出转换成字符串后的结果到控制台。</p><p>OutputStreamWriter 将一个字符流的输出对象变为字节流的输出对象，是字符流通向字节流的桥梁。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个 File 对象 f，表示文件 test.txt</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个 OutputStreamWriter 对象 out，使用 FileOutputStream 对象将数据写入到文件 f 中，并将字节流转换成字符流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Writer</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStreamWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(f));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 write() 方法将字符串 &quot;沉默王二!!&quot; 写入到文件 f 中</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二!!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭 Writer 对象 out，释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个 File 对象 f，表示文件 test.txt</span></span>
<span class="line"><span style="color:#24292E;">File f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个 OutputStreamWriter 对象 out，使用 FileOutputStream 对象将数据写入到文件 f 中，并将字节流转换成字符流</span></span>
<span class="line"><span style="color:#24292E;">Writer out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStreamWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(f));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 write() 方法将字符串 &quot;沉默王二!!&quot; 写入到文件 f 中</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二!!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 关闭 Writer 对象 out，释放资源</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>使用转换流可以方便地在字节流和字符流之间进行转换。在进行文本文件读写时，通常使用字符流进行操作，而在进行网络传输或与设备进行通信时，通常使用字节流进行操作。</p><p>另外，在使用转换流时需要注意字符编码的问题。如果不指定字符编码，则使用默认的字符编码，可能会出现乱码问题。因此，建议在使用转换流时，始终指定正确的字符编码，以避免出现乱码问题。</p><p>“小二啊，你看，经过我的梳理，是不是感觉 IO 也没多少东西！针对不同的场景、不同的业务，选择对应的 IO 流就可以了，用法上就是读和写。”老王一口气讲完这些，长长的舒了一口气。</p><p>此时此刻的小二，还沉浸在老王的滔滔不绝中。不仅感觉老王的肺活量是真的大，还感慨老王不愧是工作了十多年的“老油条”，一下子就把自己感觉头大的 IO 给梳理得很清晰了。</p><hr>`,131),y=[r];function F(i,E,u,d,f,C){return n(),a("div",null,y)}const A=s(c,[["render",F]]);export{h as __pageData,A as default};
