import{_ as o,o as e,c as r,V as a}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/springcloud/springcloud-06.md","filePath":"interview/backend/springcloud/springcloud-06.md"}'),t={name:"interview/backend/springcloud/springcloud-06.md"},i=a('<h3 id="_1、什么是hystrix-它如何实现容错" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E4%BB%80%E4%B9%88%E6%98%AFhystrix%E5%AE%83%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AE%B9%E9%94%99" target="_blank" rel="noreferrer">1、什么是Hystrix？它如何实现容错？</a> <a class="header-anchor" href="#_1、什么是hystrix-它如何实现容错" aria-label="Permalink to &quot;[1、什么是Hystrix？它如何实现容错？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#1什么是hystrix它如何实现容错)&quot;">​</a></h3><p>Hystrix是一个延迟和容错库，旨在隔离远程系统，服务和第三方库的访问点，当出现故障是不可避免的故障时，停止级联故障并在复杂的分布式系统中实现弹性。</p><p>通常对于使用微服务架构开发的系统，涉及到许多微服务。这些微服务彼此协作。</p><p>思考以下微服务</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0814/02/img_2.png#alt=img%5C_2.png" alt=""></p><p>假设如果上图中的微服务9失败了，那么使用传统方法我们将传播一个异常。但这仍然会导致整个系统崩溃。</p><p>随着微服务数量的增加，这个问题变得更加复杂。微服务的数量可以高达1000.这是hystrix出现的地方 我们将使用Hystrix在这种情况下的Fallback方法功能。我们有两个服务employee-consumer使用由employee-consumer公开的服务。</p><p>简化图如下所示</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0814/02/img_3.png#alt=img%5C_3.png" alt=""></p><p>现在假设由于某种原因，employee-producer公开的服务会抛出异常。我们在这种情况下使用Hystrix定义了一个回退方法。这种后备方法应该具有与公开服务相同的返回类型。如果暴露服务中出现异常，则回退方法将返回一些值。</p><h3 id="_2、为什么我们需要微服务容器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8" target="_blank" rel="noreferrer">2、为什么我们需要微服务容器？</a> <a class="header-anchor" href="#_2、为什么我们需要微服务容器" aria-label="Permalink to &quot;[2、为什么我们需要微服务容器？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#2为什么我们需要微服务容器)&quot;">​</a></h3><p>要管理基于微服务的应用程序，容器是最简单的选择。它帮助用户单独部署和开发。您还可以使用Docker将微服务封装到容器的镜像中。没有任何额外的依赖或工作，微服务可以使用这些元素。</p><h3 id="_3、springcloud和dubbo有哪些区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3springcloud%E5%92%8Cdubbo%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、springcloud和dubbo有哪些区别</a> <a class="header-anchor" href="#_3、springcloud和dubbo有哪些区别" aria-label="Permalink to &quot;[3、springcloud和dubbo有哪些区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#3springcloud和dubbo有哪些区别)&quot;">​</a></h3><p><strong>1、</strong> Dubbo具有调度、发现、监控、治理等功能，支持相当丰富的服务治理能力。Dubbo架构下，注册中心对等集群，并会缓存服务列表已被数据库失效时继续提供发现功能，本身的服务发现结构有很强的可用性与健壮性，足够支持高访问量的网站。</p><p><strong>2、</strong> 虽然Dubbo 支持短连接大数据量的服务提供模式，但绝大多数情况下都是使用连接小数据量的模式提供服务使用的。所以，对于类似于电商等同步调用场景多并且能支撑搭建Dubbo 这套比较复杂环境的成本的产品而言，Dubbo 确实是一个可以考虑的选择。但如果产品业务中由于后台业务逻辑复杂、时间而导致异步逻辑比较多的话，可能Dubbo 并不合适。同时，对于人手不足的初创产品而言，这么重的架构维护起来也不是很方便。</p><p><strong>3、</strong> Spring Cloud由众多子项目组成，如Spring Cloud Config、Spring Cloud Netflix、Spring Cloud Consul 等，提供了搭建分布式系统及微服务常用的工具，如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性token、全局锁、选主、分布式会话和集群状态等，满足了构建微服务所需的所有解决方案。比如使用Spring Cloud Config 可以实现统一配置中心，对配置进行统一管理；使用Spring Cloud Netflix 可以实现Netflix 组件的功能 - 服务发现（Eureka）、智能路由（Zuul）、客户端负载均衡（Ribbon）。</p><p><strong>4、</strong> Dubbo 提供了各种 Filter，对于上述中“无”的要素，可以通过扩展 Filter 来完善。</p><p><strong>5、</strong> dubbo的开发难度较大，原因是dubbo的jar包依赖问题很多大型工程无法解决。</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/01/44/45_3.png#alt=45%5C_3.png" alt=""></p><h3 id="_4、springcloud-config-可以实现实时刷新吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4springcloud-config-%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%88%B7%E6%96%B0%E5%90%97" target="_blank" rel="noreferrer">4、SpringCloud Config 可以实现实时刷新吗？</a> <a class="header-anchor" href="#_4、springcloud-config-可以实现实时刷新吗" aria-label="Permalink to &quot;[4、SpringCloud Config 可以实现实时刷新吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#4springcloud-config-可以实现实时刷新吗)&quot;">​</a></h3><p>springcloud config实时刷新采用SpringCloud Bus消息总线。</p><h3 id="_5、zookeeper如何-保证cp" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5zookeeper%E5%A6%82%E4%BD%95-%E4%BF%9D%E8%AF%81cp" target="_blank" rel="noreferrer">5、Zookeeper如何 保证CP</a> <a class="header-anchor" href="#_5、zookeeper如何-保证cp" aria-label="Permalink to &quot;[5、Zookeeper如何 保证CP](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#5zookeeper如何-保证cp)&quot;">​</a></h3><p>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫的选举时间导致的注册期不可用是不能容忍的。</p><h3 id="_6、微服务之间如何独立通讯的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E7%8B%AC%E7%AB%8B%E9%80%9A%E8%AE%AF%E7%9A%84" target="_blank" rel="noreferrer">6、微服务之间如何独立通讯的?</a> <a class="header-anchor" href="#_6、微服务之间如何独立通讯的" aria-label="Permalink to &quot;[6、微服务之间如何独立通讯的?](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#6微服务之间如何独立通讯的)&quot;">​</a></h3><p>同步通信：dobbo通过 RPC 远程过程调用、springcloud通过 REST 接口json调用 等。</p><p>异步：消息队列，如：RabbitMq、ActiveM、Kafka 等。</p><h3 id="_7、什么是oauth" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%BB%80%E4%B9%88%E6%98%AFoauth" target="_blank" rel="noreferrer">7、什么是OAuth？</a> <a class="header-anchor" href="#_7、什么是oauth" aria-label="Permalink to &quot;[7、什么是OAuth？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#7什么是oauth)&quot;">​</a></h3><p>OAuth 代表开放授权协议。这允许通过在HTTP服务上启用客户端应用程序（例如第三方提供商Facebook，GitHub等）来访问资源所有者的资源。因此，您可以在不使用其凭据的情况下与另一个站点共享存储在一个站点上的资源。</p><h3 id="_8、eureka服务注册与发现原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">8、eureka服务注册与发现原理</a> <a class="header-anchor" href="#_8、eureka服务注册与发现原理" aria-label="Permalink to &quot;[8、eureka服务注册与发现原理](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#8eureka服务注册与发现原理)&quot;">​</a></h3><p><strong>1、</strong> 每30s发送心跳检测重新进行租约，如果客户端不能多次更新租约，它将在90s内从服务器注册中心移除。</p><p><strong>2、</strong> 注册信息和更新会被复制到其他Eureka 节点，来自任何区域的客户端可以查找到注册中心信息，每30s发生一次复制来定位他们的服务，并进行远程调用。</p><p><strong>3、</strong> 客户端还可以缓存一些服务实例信息，所以即使Eureka全挂掉，客户端也是可以定位到服务地址的。</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/01/44/45_4.png#alt=45%5C_4.png" alt=""></p><h3 id="_9、zuul与nginx有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9zuul%E4%B8%8Enginx%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、Zuul与Nginx有什么区别？</a> <a class="header-anchor" href="#_9、zuul与nginx有什么区别" aria-label="Permalink to &quot;[9、Zuul与Nginx有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#9zuul与nginx有什么区别)&quot;">​</a></h3><p>Zuul是java语言实现的，主要为java服务提供网关服务，尤其在微服务架构中可以更加灵活的对网关进行操作。Nginx是使用C语言实现，性能高于Zuul，但是实现自定义操作需要熟悉lua语言，对程序员要求较高，可以使用Nginx做Zuul集群。</p><h3 id="_10、什么是spring-cloud" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E4%BB%80%E4%B9%88%E6%98%AFspring-cloud" target="_blank" rel="noreferrer">10、什么是Spring Cloud？</a> <a class="header-anchor" href="#_10、什么是spring-cloud" aria-label="Permalink to &quot;[10、什么是Spring Cloud？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringCloud/SpringCloud最新面试题2021年，常见面试题及答案汇总.md#10什么是spring-cloud)&quot;">​</a></h3><p>在微服务中，SpringCloud是一个提供与外部系统集成的系统。它是一个敏捷的框架，可以短平快构建应用程序。与有限数量的数据处理相关联，它在微服务体系结构中起着非常重要的作用。 <strong>以下为 Spring Cloud 的核心特性</strong>：</p><p><strong>1、</strong> 版本化/分布式配置。</p><p><strong>2、</strong> 服务注册和发现。</p><p><strong>3、</strong> 服务和服务之间的调用。</p><p><strong>4、</strong> 路由。</p><p><strong>5、</strong> 断路器和负载平衡。</p><p><strong>6、</strong> 分布式消息传递。</p><h3 id="_11、使用中碰到的坑" tabindex="-1">11、使用中碰到的坑 <a class="header-anchor" href="#_11、使用中碰到的坑" aria-label="Permalink to &quot;11、使用中碰到的坑&quot;">​</a></h3><h3 id="_12、什么是微服务" tabindex="-1">12、什么是微服务 <a class="header-anchor" href="#_12、什么是微服务" aria-label="Permalink to &quot;12、什么是微服务&quot;">​</a></h3><h3 id="_13、spring-cloud-netflix-重点-这些组件用的最多" tabindex="-1">13、Spring Cloud Netflix(重点，这些组件用的最多) <a class="header-anchor" href="#_13、spring-cloud-netflix-重点-这些组件用的最多" aria-label="Permalink to &quot;13、Spring Cloud Netflix(重点，这些组件用的最多)&quot;">​</a></h3><h3 id="_14、什么是耦合和凝聚力" tabindex="-1">14、什么是耦合和凝聚力？ <a class="header-anchor" href="#_14、什么是耦合和凝聚力" aria-label="Permalink to &quot;14、什么是耦合和凝聚力？&quot;">​</a></h3><h3 id="_15、spring-cloud-consul" tabindex="-1">15、Spring Cloud Consul <a class="header-anchor" href="#_15、spring-cloud-consul" aria-label="Permalink to &quot;15、Spring Cloud Consul&quot;">​</a></h3><h3 id="_16、什么是spring-cloud-config" tabindex="-1">16、什么是Spring Cloud Config? <a class="header-anchor" href="#_16、什么是spring-cloud-config" aria-label="Permalink to &quot;16、什么是Spring Cloud Config?&quot;">​</a></h3><h3 id="_17、负载平衡的意义什么" tabindex="-1">17、负载平衡的意义什么？ <a class="header-anchor" href="#_17、负载平衡的意义什么" aria-label="Permalink to &quot;17、负载平衡的意义什么？&quot;">​</a></h3><h3 id="_18、spring-cloud-config" tabindex="-1">18、Spring Cloud Config <a class="header-anchor" href="#_18、spring-cloud-config" aria-label="Permalink to &quot;18、Spring Cloud Config&quot;">​</a></h3><h3 id="_19、springcloud-和-dubbo-有哪些区别" tabindex="-1">19、SpringCloud 和 Dubbo 有哪些区别? <a class="header-anchor" href="#_19、springcloud-和-dubbo-有哪些区别" aria-label="Permalink to &quot;19、SpringCloud 和 Dubbo 有哪些区别?&quot;">​</a></h3><h3 id="_20、架构师在微服务架构中的角色是什么" tabindex="-1">20、架构师在微服务架构中的角色是什么？ <a class="header-anchor" href="#_20、架构师在微服务架构中的角色是什么" aria-label="Permalink to &quot;20、架构师在微服务架构中的角色是什么？&quot;">​</a></h3><h3 id="_21、为什么要选择微服务架构" tabindex="-1">21、为什么要选择微服务架构？ <a class="header-anchor" href="#_21、为什么要选择微服务架构" aria-label="Permalink to &quot;21、为什么要选择微服务架构？&quot;">​</a></h3><h3 id="_22、熔断的原理-以及如何恢复" tabindex="-1">22、熔断的原理，以及如何恢复？ <a class="header-anchor" href="#_22、熔断的原理-以及如何恢复" aria-label="Permalink to &quot;22、熔断的原理，以及如何恢复？&quot;">​</a></h3><h3 id="_23、什么是semantic监控" tabindex="-1">23、什么是Semantic监控？ <a class="header-anchor" href="#_23、什么是semantic监控" aria-label="Permalink to &quot;23、什么是Semantic监控？&quot;">​</a></h3><h3 id="_24、springcloud由什么组成" tabindex="-1">24、SpringCloud由什么组成 <a class="header-anchor" href="#_24、springcloud由什么组成" aria-label="Permalink to &quot;24、SpringCloud由什么组成&quot;">​</a></h3><h3 id="_25、springcloud的优缺点" tabindex="-1">25、SpringCloud的优缺点 <a class="header-anchor" href="#_25、springcloud的优缺点" aria-label="Permalink to &quot;25、SpringCloud的优缺点&quot;">​</a></h3><h3 id="_26、什么是netflix-feign-它的优点是什么" tabindex="-1">26、什么是Netflix Feign？它的优点是什么？ <a class="header-anchor" href="#_26、什么是netflix-feign-它的优点是什么" aria-label="Permalink to &quot;26、什么是Netflix Feign？它的优点是什么？&quot;">​</a></h3><h3 id="_27、pact如何运作" tabindex="-1">27、PACT如何运作？ <a class="header-anchor" href="#_27、pact如何运作" aria-label="Permalink to &quot;27、PACT如何运作？&quot;">​</a></h3><h3 id="_28、服务注册和发现是什么意思-spring-cloud如何实现" tabindex="-1">28、服务注册和发现是什么意思？Spring Cloud如何实现？ <a class="header-anchor" href="#_28、服务注册和发现是什么意思-spring-cloud如何实现" aria-label="Permalink to &quot;28、服务注册和发现是什么意思？Spring Cloud如何实现？&quot;">​</a></h3><h3 id="_29、微服务限流-dubbo限流-dubbo提供了多个和请求相关的filter-activelimitfilter-executelimitfilter-tpslimiterfilter" tabindex="-1">29、微服务限流 dubbo限流：dubbo提供了多个和请求相关的filter：ActiveLimitFilter ExecuteLimitFilter TPSLimiterFilter <a class="header-anchor" href="#_29、微服务限流-dubbo限流-dubbo提供了多个和请求相关的filter-activelimitfilter-executelimitfilter-tpslimiterfilter" aria-label="Permalink to &quot;29、微服务限流 dubbo限流：dubbo提供了多个和请求相关的filter：ActiveLimitFilter ExecuteLimitFilter TPSLimiterFilter&quot;">​</a></h3><h3 id="_30、spring-cloud-stream" tabindex="-1">30、Spring Cloud Stream <a class="header-anchor" href="#_30、spring-cloud-stream" aria-label="Permalink to &quot;30、Spring Cloud Stream&quot;">​</a></h3>',63),n=[i];function u(l,s,d,E,p,g){return e(),r("div",null,n)}const b=o(t,[["render",u]]);export{h as __pageData,b as default};
