import{_ as e,o as s,c as a,V as t}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/brew-c6756a26-8767-4135-be4c-b31d42de2a89.4cc12549.png",c="/docs/assets/brew-726f97d9-4de2-4d23-9973-d1a39951a0f7.831dd36c.png",r="/docs/assets/brew-e7eaf096-7477-4ed0-814a-07ef8d62884f.a17cadc8.png",p="/docs/assets/brew-f0c3c481-f474-47b2-8b5e-17f8fc2b9a80.c36db8f3.png",n="/docs/assets/brew-7c539545-d26e-45e8-9f81-bb5b439342eb.a91c7bee.png",l="/docs/assets/brew-aebf4ced-58f4-4d31-892c-4a8382cf3677.8d973f49.png",d="/docs/assets/brew-6866eb09-75fb-4f19-9ff4-b80fd02816e9.62f1024b.png",i="/docs/assets/brew-33bcd6a1-d843-4a6c-a8ac-0d908095da79.183ab9aa.png",b="/docs/assets/brew-ac0e141f-301c-46f1-bd80-5375eb50dc4d.6ab778a2.png",m="/docs/assets/brew-c5403959-01fd-4610-b08c-4ca4e4cb0a66.4ca6eba3.png",g="/docs/assets/brew-d27ec07e-cf3c-4504-9174-60881d2710fb.5d34929a.png",h="/docs/assets/brew-566f4437-62de-49e5-89a7-7c666a2ad9c1.5156c56c.png",w="/docs/assets/brew-441127b1-f7ae-484e-801b-5b808f8e283c.a27e0e21.png",u="/docs/assets/brew-b4d7684b-2db8-4286-bf2e-389c2aed5968.aa8713ab.png",f="/docs/assets/brew-1034fcfd-22a7-4968-8b6f-fb2e67d22855.2679ca83.png",k="/docs/assets/brew-2e10e772-1944-474a-bbfa-b3ef3e0ec9d4.2200b0f2.png",v="/docs/assets/brew-b126c35d-edab-48a9-9543-831cfd0a51c6.27d78d25.png",_="/docs/assets/brew-a32accec-4044-480c-a8c8-3781bc5048b5.654745ea.png",H="/docs/assets/brew-cc01fad8-53e9-4474-8923-08e97ac7090a.e0e414e4.png",y="/docs/assets/brew-4819ca75-01e3-4dea-8859-7c9ddd570142.f20cc981.png",q="/docs/assets/brew-e934f3f3-c7de-4537-8c30-73c0e9fb41b4.116f2264.png",j="/docs/assets/brew-8fb73388-ffaf-4241-8584-03e7aa00578b.55395b41.png",J=JSON.parse('{"title":"Homebrew，GitHub 星标 32.5k+的 macOS 命令行软件管理神器，功能真心强大！","description":"Homebrew，GitHub 星标 32.5k+的 macOS 命令行软件管理神器，功能真心强大！","frontmatter":{"category":["Java企业级开发"],"tag":["辅助工具"],"title":"Homebrew，GitHub 星标 32.5k+的 macOS 命令行软件管理神器，功能真心强大！","shortTitle":"Homebrew：macOS软件管理器","description":"Homebrew，GitHub 星标 32.5k+的 macOS 命令行软件管理神器，功能真心强大！","head":[["meta",{"name":"keywords","content":"辅助工具,GitHub,macos Homebrew,Homebrew教程,Homebrew镜像,Homebrew国内安装"}]]},"headers":[],"relativePath":"backend/tobetter/gongju/brew.md","filePath":"backend/tobetter/gongju/brew.md"}'),C={name:"backend/tobetter/gongju/brew.md"},x=t('<h2 id="前言-废话" tabindex="-1">前言（废话） <a class="header-anchor" href="#前言-废话" aria-label="Permalink to &quot;前言（废话）&quot;">​</a></h2><p>本来打算在公司偷偷摸摸给星球的用户写一篇编程喵整合 MongoDB 的文章，结果在通过 brew 安装 MongoDB 的时候竟然报错了。原因很简单，公司这台 Mac 上的 homebrew 环境没有配置好。刚好 Java程序员进阶之路上缺少这样一篇内容。</p><img src="'+o+'"><p>所以我就想，不如趁机水一篇吧，啊，不不不，趁机给小伙伴们普及一下 Homebrew 吧！瞧我这该死的大公无私的心（手动狗头）。</p><p>不会吧？不会还有人用 macOS 没有安装/配置 Homebrew 吧？</p><h2 id="homebrew-能干什么" tabindex="-1">Homebrew 能干什么 <a class="header-anchor" href="#homebrew-能干什么" aria-label="Permalink to &quot;Homebrew 能干什么&quot;">​</a></h2><blockquote><p>Homebrew 的 Slogan ：The missing package manager for macOS (or Linux)</p></blockquote><p>Homebrew 这款命令行软件管理神器在 GitHub 上已经有 32.5k+ 的 star 了，功能也真心强大，几乎 macOS 上的软件包它都包了。Homebrew 本身没有问题，问题在于。。。。。不说了，你懂的。</p><img src="'+c+'"><p>Homebrew 除了是 macOS 的包管理器也可以装在 Linux 上成为 Linux 的包管理器，仅需要执行相应的命令，就能下载安装需要的软件包，省去了下载、解压、拖拽等繁琐的步骤。</p><p>用 Homebrew 官方的话来总结就是：安装 Apple（或 Linux 系统）没有预装但你需要的软件。比如说安装 MongoDB，只需要执行以下命令就可以安装，前提条件是环境一定要配置好。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">brew install mongodb</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">brew install mongodb</span></span></code></pre></div><p>简单一条命令，就可以实现包管理，还不用担心依赖/文件路径等问题。</p><p>Homebrew 主要由四个部分组成: brew、homebrew-core 、homebrew-cask、homebrew-bottles。</p><ul><li>brew：Homebrew 的源代码仓库</li><li>homebrew-core：Homebrew 的核心源</li><li>homebrew-cask：提供 macOS 应用和大型二进制文件的安装</li><li>homebrew-bottles：预编译二进制软件包</li></ul><p>再来了解一下 Homebrew 的接个核心概念，后续会经常用到。</p><ul><li>formula（e），安装包的描述文件，带 e 为复数</li><li>cellar，包安装好后所在的目录</li><li>bottle，预先编译好的包，不需要再下载源码编译，速度会快很多，官方库中的包大多数是通过 bottle 方式安装的</li><li>tap，下载源</li><li>cask（s），安装 macOS native 应用的扩展，可以理解为有图形化界面的应用，带 s 为复数</li><li>bundle，描述 Homebrew 依赖的扩展</li></ul><h2 id="安装配置-homebrew" tabindex="-1">安装配置 Homebrew <a class="header-anchor" href="#安装配置-homebrew" aria-label="Permalink to &quot;安装配置 Homebrew&quot;">​</a></h2><blockquote><p>世上无难事，只要找到 Homebrew 的正确安装方式。</p></blockquote><p>按理说，Homebrew 的安装方式非常简单，只需要执行官方的一句命令就可以完成安装了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span></code></pre></div><p>但国内开发者命苦就苦在，经常会因为网络的原因安装失败。原因我只能说这是 <code>https://raw.githubusercontent.com</code> 网站的锅，谁让它访问不稳定呢？</p><p>怎么办呢？</p><p>必须换一种高效且科学的安装方式，那就是使用镜像安装。 Gitee 上有开源作者提供了一键安装包，只需要执行以下命令就可以了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span></span></code></pre></div><p>安装脚本里提供了中科大、清华大学、北京外国语大学、腾讯、阿里巴巴等下载源。</p><img src="'+r+'"><p>但过来人告诉你，别选其他镜像源，就选中科大，速度杠杠的，40-50M/s，这速度比其他镜像源快多了，对比起来，其他就是蜗牛🐌。</p><img src="'+p+'"><p>这个安装脚本非常的智能，几乎可以一件帮我们搞定所有问题。</p><img src="'+n+'"><p>再次感谢 Gitee 上这位大牛，已经 3k star 了，我把地址贴出来：</p><blockquote><p><a href="https://gitee.com/cunkai/HomebrewCN" target="_blank" rel="noreferrer">https://gitee.com/cunkai/HomebrewCN</a></p></blockquote><img src="'+l+'"><p>brew 本体安装成功后，会提示我们配置国内镜像源。</p><img src="'+d+'"><p>nice，安装完成了。执行下面这几个命令体验下。</p><img src="'+i+'"><ul><li><code>brew ls</code> 查看本地命令；</li><li><code>brew search mongodb</code> 查找软件；</li><li><code>brew -v</code> 查看版本；</li><li><code>brew update</code> 更新版本；</li><li><code>brew install --cask firefox</code> 安装图形化界面软件</li><li><code>brew config</code> 查看配置。</li></ul><img src="'+b+'"><h2 id="brew-和-brew-cask-的区别" tabindex="-1">brew 和 brew cask 的区别 <a class="header-anchor" href="#brew-和-brew-cask-的区别" aria-label="Permalink to &quot;brew 和 brew cask 的区别&quot;">​</a></h2><p>这里顺带说一下 brew 和 brew cask 的区别，这也是一开始我使用 brew 时困惑的一个点。</p><p>以前的版本中，是可以直接 <code>brew cask list</code> 这样执行命令的，现在改成了 <code>brew list --cask</code>。</p><img src="'+m+'"><p>brew 是从下载源码开始，然后编译（不一定，有些有现成的 bottle）解压，通过 <code>./configure &amp;&amp; make install</code> 进行安装，同时会包含相关的依赖库。环境变量也是自动配置的。</p><img src="'+g+'"><p>brew cask 是下载解压已经编译好了的软件包（.dmg/.pkg），放在统一的目录中，省去了手动去下载、解压、拖拽等蛋疼步骤。</p><img src="'+h+'"><p>通过 <code>brew search google</code> 我们也可以看得出两者之间的区别。</p><img src="'+w+'"><ul><li>「Formulae」一般是那些命令行工具、开发库、字体、插件等不含 GUI 界面的软件。</li><li>「Cask」就会包含一些 GUI 图形化界面的软件，如 Google Chrome、FireFox 、Atom 等</li></ul><h2 id="使用-homebrew" tabindex="-1">使用 Homebrew <a class="header-anchor" href="#使用-homebrew" aria-label="Permalink to &quot;使用 Homebrew&quot;">​</a></h2><p>Homebrew安装配置完成后，我们来实操体验两把。</p><p>这里是 homebrew 常用命令的一个清单，可供参考。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>brew update</td><td>更新 Homebrew</td></tr><tr><td>brew search package</td><td>搜索软件包</td></tr><tr><td>brew install package</td><td>安装软件包</td></tr><tr><td>brew uninstall package</td><td>卸载软件包</td></tr><tr><td>brew upgrade</td><td>升级所有软件包</td></tr><tr><td>brew upgrade package</td><td>升级指定软件包</td></tr><tr><td>brew list</td><td>列出已安装的软件包列表</td></tr><tr><td>brew services command package</td><td>管理 brew 安装软件包</td></tr><tr><td>brew services list</td><td>列出 brew 管理运行的服务</td></tr><tr><td>brew info package</td><td>查看软件包信息</td></tr><tr><td>brew deps package</td><td>列出软件包的依赖关系</td></tr><tr><td>brew help</td><td>查看帮助</td></tr><tr><td>brew cleanup</td><td>清除过时软件包</td></tr><tr><td>brew link package</td><td>创建软件包符号链接</td></tr><tr><td>brew unlink package</td><td>取消软件包符号链接</td></tr><tr><td>brew doctor</td><td>检查系统是否存在问题</td></tr><tr><td>brew tap [user/repo]</td><td>将开源仓库添加到源</td></tr></tbody></table><h3 id="第一把-使用-homebrew-安装-jdk" tabindex="-1">第一把，使用 Homebrew 安装 JDK <a class="header-anchor" href="#第一把-使用-homebrew-安装-jdk" aria-label="Permalink to &quot;第一把，使用 Homebrew 安装 JDK&quot;">​</a></h3><p>作为一名 Java 后端程序员，JDK 是必须要安装的，对吧？</p><p>1）执行 <code>brew search jdk</code> 查找有哪些可供安装的 JDK</p><p>2）执行 <code>brew install openjdk@17</code> 安装 JDK。</p><img src="'+u+'"><p>3）但我们在 macOS 上安装了多个版本的 JDK 后，怎么管理它们呢？可以安装一下 jEnv，一个帮助我们管理 JAVA_HOME 的命令行工具，在 GitHub 上已经收获 4.3k 的 star。</p><blockquote><p>GitHub 地址：<a href="https://github.com/jenv/jenv" target="_blank" rel="noreferrer">https://github.com/jenv/jenv</a></p></blockquote><img src="'+f+'"><p>官方文档也非常的简洁大方：</p><blockquote><p><a href="https://www.jenv.be/" target="_blank" rel="noreferrer">https://www.jenv.be/</a></p></blockquote><img src="'+k+`"><p>安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">brew install jenv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">brew install jenv</span></span></code></pre></div><p>配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">echo &#39;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc</span></span>
<span class="line"><span style="color:#f6f6f4;">echo &#39;eval &quot;$(jenv init -)&quot;&#39; &gt;&gt; ~/.zshrc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">echo &#39;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc</span></span>
<span class="line"><span style="color:#24292e;">echo &#39;eval &quot;$(jenv init -)&quot;&#39; &gt;&gt; ~/.zshrc</span></span></code></pre></div><p>添加：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">jenv add /usr/local/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jenv add /usr/local/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home/</span></span></code></pre></div><img src="`+v+'"><p>JDK 的安装路径可以通过下图的位置查找。</p><img src="'+_+`"><p>管理：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">jenv versions</span></span>
<span class="line"><span style="color:#f6f6f4;">jenv global 17.0.3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jenv versions</span></span>
<span class="line"><span style="color:#24292e;">jenv global 17.0.3</span></span></code></pre></div><img src="`+H+'"><p>是不是贼方便？再也不用整这 <code>echo &#39;export PATH=&quot;/usr/local/opt/openjdk@17/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc</code> 玩意了！爽，实在是爽！</p><h3 id="第二把-使用-homebrew-安装-mongodb" tabindex="-1">第二把，使用 Homebrew 安装 MongoDB <a class="header-anchor" href="#第二把-使用-homebrew-安装-mongodb" aria-label="Permalink to &quot;第二把，使用 Homebrew 安装 MongoDB&quot;">​</a></h3><p>先看 MongoDB 的官方文档（当前 release 版本是 5.0，我这里就先用上一个稳定版 4.4）：</p><blockquote><p><a href="https://www.mongodb.com/docs/v4.4/tutorial/install-mongodb-on-os-x/" target="_blank" rel="noreferrer">https://www.mongodb.com/docs/v4.4/tutorial/install-mongodb-on-os-x/</a></p></blockquote><p>1）拉取 MongoDB 的源</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">brew tap mongodb/brew</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">brew tap mongodb/brew</span></span></code></pre></div><img src="'+y+'"><p>2）更新 brew</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">brew update</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">brew update</span></span></code></pre></div><p>3）安装 MongoDB</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">brew install mongodb-community@4.4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">brew install mongodb-community@4.4</span></span></code></pre></div><p>OK，安装成功。</p><img src="'+q+'"><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>通过 Homebrew 下载的软件基本上来自于官网，所以大可以放心。而且而且它尽可能地利用了系统自带的各种库，使得软件包的编译时间大大缩短，基本上不会造成冗余。</p><p>这里顺带给大家提一则小故事，教别人学算法的大佬可以拿走了：homebrew 的作者去面 Google，被考算法题: 反转二叉树，结果没通过被拒了，😆</p><img src="'+j+'"><p>好了好了，今天这篇文章就先水到这吧，我们下期见~</p>',96),S=[x];function D(P,O,A,$,G,T){return s(),a("div",null,S)}const B=e(C,[["render",D]]);export{J as __pageData,B as default};
