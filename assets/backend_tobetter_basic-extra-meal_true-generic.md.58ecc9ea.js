import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/true-generic-01.1e360e2a.png",o="/docs/assets/true-generic-02.3066ec25.png",t="/docs/assets/true-generic-03.5d8225d5.png",u=JSON.parse('{"title":"Java 泛型背后的秘密：为什么无法实现真正的泛型？","description":"Java 无法实现真正泛型的原因在于类型擦除，这种设计是为了兼容早期 Java 版本。本文详细探讨 Java 泛型的实现机制、类型擦除背后的原理，以及 Java 泛型在编程中的局限性。","frontmatter":{"title":"Java 泛型背后的秘密：为什么无法实现真正的泛型？","shortTitle":"Java为什么无法实现真正的泛型","category":["Java核心"],"tag":["Java重要知识点"],"description":"Java 无法实现真正泛型的原因在于类型擦除，这种设计是为了兼容早期 Java 版本。本文详细探讨 Java 泛型的实现机制、类型擦除背后的原理，以及 Java 泛型在编程中的局限性。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"Java, 泛型, 类型擦除"}]]},"headers":[],"relativePath":"backend/tobetter/basic-extra-meal/true-generic.md","filePath":"backend/tobetter/basic-extra-meal/true-generic.md"}'),e={name:"backend/tobetter/basic-extra-meal/true-generic.md"},c=l(`<h1 id="_12-7-java为什么无法实现真正的泛型" tabindex="-1">12.7 Java为什么无法实现真正的泛型 <a class="header-anchor" href="#_12-7-java为什么无法实现真正的泛型" aria-label="Permalink to &quot;12.7 Java为什么无法实现真正的泛型&quot;">​</a></h1><p>“二哥，为啥 Java 不能实现真正的泛型啊？”三妹开门见山地问。</p><p>简单来回顾一下<a href="https://tobebetterjavaer.com/basic-extra-meal/generic.html" target="_blank" rel="noreferrer">类型擦除</a>，看下面这段代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Cmower</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; </span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Arraylist&lt;String&gt; list</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Date&gt; </span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Arraylist&lt;Date&gt; list</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cmower</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Arraylist&lt;String&gt; list&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(ArrayList&lt;</span><span style="color:#D73A49;">Date</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Arraylist&lt;Date&gt; list&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“三妹，你是不是认为 <code>ArrayList&lt;String&gt; list</code> 和 <code>ArrayList&lt;Date&gt; list</code> 是两种不同的类型，因为 String 和 Date 是不同的类。”我问。</p><p>“嗯。”三妹点点头。</p><p>但由于类型擦除的原因，以上代码是不会编译通过的——编译器会提示一个错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&#39;method(ArrayList&lt;String&gt;)&#39; clashes with &#39;method(ArrayList&lt;Date&gt;)&#39;; both methods have same erasure</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&#39;method(ArrayList&lt;String&gt;)&#39; clashes with &#39;method(ArrayList&lt;Date&gt;)&#39;; both methods have same erasure</span></span></code></pre></div><p>也就是说，两个 <code>method()</code> 方法经过类型擦除后的方法签名是完全相同的，Java 是不允许这样做的。</p><p>也就是说，按照我们的假设：如果 Java 能够实现真正意义上的泛型，两个 <code>method()</code> 方法是可以同时存在的，就好像方法重载一样。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Cmower</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">list</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cmower</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">(Date </span><span style="color:#E36209;">list</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“为什么 Java 不能实现真正意义上的泛型呢？背后的原因是什么？快告诉我呀！”三妹着急了。</p><p>“保持耐心，好不好？”我安慰道。</p><p><strong>第一，兼容性</strong></p><p>Java 在 2004 年已经积累了较为丰富的生态，如果把现有的类修改为泛型类，需要让所有的用户重新修改源代码并且编译，这就会导致 Java 1.4 之前打下的江山可能会完全覆灭。</p><p>想象一下，你的代码原来运行的好好的，就因为 JDK 的升级，导致所有的源代码都无法编译通过并且无法运行，是不是会非常痛苦？</p><p>类型擦除就完美实现了兼容性，Java 1.5 之后的类可以使用泛型，而 Java 1.4 之前没有使用泛型的类也可以保留，并且不用做任何修改就能在新版本的 Java 虚拟机上运行。</p><p>老用户不受影响，新用户可以自由地选择使用泛型，可谓一举两得。</p><p><strong>第二，不是“实现不了”</strong>。Pizza，1996 年的实验语言，在 Java 的基础上扩展了泛型。</p><blockquote><p>Pizza 教程地址：<a href="http://pizzacompiler.sourceforge.net/doc/tutorial.html" target="_blank" rel="noreferrer">http://pizzacompiler.sourceforge.net/doc/tutorial.html</a></p></blockquote><p>“1996 年？”三妹表示很吃惊。</p><p>“嗯，你那会还没出生。”我说，“插一下 Java 的版本历史吧，你好有一个时间线上的观念。”</p><ul><li>1995年5月23日，Java语言诞生</li><li>1996年1月，JDK1.0 诞生</li><li>1997年2月18日，JDK1.1发布</li><li>1998年2月，JDK1.1被下载超过2,000,000次</li><li>2000年5月8日，JDK1.3发布</li><li>2000年5月29日，JDK1.4发布</li><li>2004年9月30日18:00 PM，J2SE1.5 发布</li></ul><p>也就是说，Pizza 在 JDK 1.0 的版本上就实现了“真正意义上的”泛型，我引过来两段例子，你一看就明白了。</p><p>首先是 StoreSomething，一个泛型类，标识符是大写字母 A 而不是我们熟悉的大写字母 T。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StoreSomething</span><span style="color:#F6F6F4;">&lt;A&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> something;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#62E884;">StoreSomething</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">something</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.something </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> something;</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">something</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.something </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> something;</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">A</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> something;</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreSomething</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">A</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">     A something;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6F42C1;">StoreSomething</span><span style="color:#24292E;">(A </span><span style="color:#E36209;">something</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.something </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> something;</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(A </span><span style="color:#E36209;">something</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.something </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> something;</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     A </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> something;</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个 A 呢，可以是任何合法的 Java 类型：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">StoreSomething</span><span style="color:#F6F6F4;">&lt;String&gt; a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StoreSomething</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">I&#39;m a string!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">StoreSomething</span><span style="color:#F6F6F4;">&lt;int&gt; b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StoreSomething</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">17</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">b.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StoreSomething&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreSomething</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I&#39;m a string!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">StoreSomething&lt;</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">&gt; b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreSomething</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">17</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">b.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><p>对吧？这就是我们想要的“真正意义上的泛型”，A 不仅仅可以是引用类型 String，还可以是基本数据类型。要知道，Java 的泛型不允许是基本数据类型，只能是包装器类型。</p><img src="`+p+`"><p>除此之外，Pizza 的泛型还可以直接使用 <code>new</code> 关键字进行声明，并且 Pizza 编译器会从构造方法的参数上推断出具体的对象类型，究竟是 String 还是 int。要知道，Java 的泛型因为类型擦除的原因，程序员是无法知道一个 ArrayList 究竟是 <code>ArrayList&lt;String&gt;</code> 还是 <code>ArrayList&lt;Integer&gt;</code> 的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Integer&gt; ints </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Integer&gt;();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; strs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ints.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(strs.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; ints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; strs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ints.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(strs.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">());</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">class java.util.ArrayList</span></span>
<span class="line"><span style="color:#f6f6f4;">class java.util.ArrayList</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">class java.util.ArrayList</span></span>
<span class="line"><span style="color:#24292e;">class java.util.ArrayList</span></span></code></pre></div><p>都是 ArrayList 而已。</p><p>“那 Pizza 这种“真正意义上的泛型”为什么没有被 Java 采纳呢？”三妹很关心这个问题。</p><p>事实上，Java 的核心开发组对 Pizza 的泛型设计非常感兴趣，并且与 Pizza 的设计者 Martin 和 Phil 取得了联系，新合作了一个项目 Generic Java，争取在 Java 中添加泛型支持，但不引入 Pizza 的其他功能，比如说函数式编程。</p><p><em>这里再补充一点维基百科上的资料，Martin Odersky 是一名德国计算机科学家，他和其他人一起设计了 Scala 编程语言，以及 Generic Java（还有之前的 Pizza），他实现的 Generic Java 编译器成为了 Java 编译器 javac 的基础。</em></p><p>站在马后炮的思维来看，Pizza 的泛型设计和函数式编程非常具有历史前瞻性。然而 Java 的核心开发组在当时似乎并不想把函数式编程引入到 Java 中。</p><p>以至于 Java 在 1.4 之前仍然是不支持泛型的。</p><p>“为什么 Java 1.5 的时候又突然支持泛型了呢？”三妹问。</p><p>“当然是到了不支持不行的时候了。”我说。</p><p>没有泛型之前，我们可以这样写代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;"> list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayList</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">list.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayList list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span></code></pre></div><p>不管是 String 类型，还是 Date 类型，都可以一股脑塞进 ArrayList 当中，这看起来似乎很方便，但取的时候就悲剧了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> list.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这样取行吗？不行。还得加上强制转换。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (String) list.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) list.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><p>但我们知道，这行代码在运行的时候必然会出错：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Exception in thread &quot;main&quot; java.lang.ClassCastException: java.util.Date cannot be cast to java.lang.String</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Exception in thread &quot;main&quot; java.lang.ClassCastException: java.util.Date cannot be cast to java.lang.String</span></span></code></pre></div><p>这就又回到“兼容性”的问题了。</p><p>Java 语言和其他编程语言不一样，有着沉重的历史包袱，1.5 之前已经有大量的程序部署在生产环境下了，这时候如果一刀切，原来没有使用泛型的代码直接扼杀了，后果不堪想象。</p><p>Java 一直以来都强调兼容性，我认为这也是 Java 之所以能被广泛使用的主要原因之一，开发者不必担心 Java 版本升级的问题，一个在 JDK 1.4 上可以跑的代码，放在 JDK 1.5 上仍然可以跑。</p><p>这里必须得说明一点，J2SE1.5 的发布，是 Java 语言发展史上的重要里程碑，为了表示该版本的重要性，J2SE1.5 也正式更名为 Java SE 5.0，往后去就是 Java SE 6.0，Java SE 7.0。。。。</p><p>但 Java 并不支持高版本 JDK 编译生成的字节码文件在低版本的 JRE（Java 运行时环境）上跑。</p><img src="`+o+`"><p>针对泛型，兼容性具体表现在什么地方呢？来看下面这段代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Integer&gt; ints </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Integer&gt;();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; strs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;"> list;</span></span>
<span class="line"><span style="color:#F6F6F4;">list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ints;</span></span>
<span class="line"><span style="color:#F6F6F4;">list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> strs;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; ints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; strs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">ArrayList list;</span></span>
<span class="line"><span style="color:#24292E;">list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ints;</span></span>
<span class="line"><span style="color:#24292E;">list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strs;</span></span></code></pre></div><p>“兼容性表现在上面这段代码必须得能够编译运行。怎么办呢？”我扭头看了一下旁边的三妹，继续说。</p><p>“只能搞类型擦除了！”我妹肯定地回答。</p><p>“是滴。”</p><p>编译前进行泛型检测，<code>ArrayList&lt;Integer&gt;</code> 只能放 Integer，<code>ArrayList&lt;String&gt;</code> 只能放 String，取的时候就不用担心类型强转出错了。</p><p>但编译后的字节码文件里，是没有泛型的，放的都是 Object。</p><p>Java 神奇就神奇在这，表面上万物皆对象，但为了性能上的考量，又存在 int、double 这种原始类型，但原始类型又没办法和 Object 兼容，于是我们就只能写 <code>ArrayList&lt;Integer&gt;</code> 这样很占用内存空间的代码。</p><p>这恐怕也是 Java 泛型被吐槽的原因之一了。</p><p>一个好消息是 Valhalla 项目正在努力解决这些因为泛型擦除带来的历史遗留问题。</p><img src="`+t+'"><p>Project Valhalla：正在进行当中的 OpenJDK 项目，计划给未来的 Java 添加改进的泛型支持。</p><blockquote><p>源码地址：<a href="http://openjdk.java.net/projects/valhalla/" target="_blank" rel="noreferrer">http://openjdk.java.net/projects/valhalla/</a></p></blockquote><p>让我们拭目以待吧！</p><p>“怎么样？三妹，这下全部都明白了吧！”我问。</p><p>“嗯嗯。二哥，你讲得可真棒👍”三妹夸奖得我有点小开心，嘿嘿。</p><hr>',73),r=[c];function y(i,F,E,g,d,v){return a(),n("div",null,r)}const C=s(e,[["render",y]]);export{u as __pageData,C as default};
