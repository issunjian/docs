import{_ as a,o as e,c as s,V as i}from"./chunks/framework.c6d8cbec.js";const t="/docs/images/cesium/640.png",r="/docs/images/cesium/641.png",o="/docs/images/cesium/642.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/graph/cesium/Cesium中常用的坐标.md","filePath":"frontend/graph/cesium/Cesium中常用的坐标.md"}'),n={name:"frontend/graph/cesium/Cesium中常用的坐标.md"},c=i('<h2 id="cesium中常用的坐标" tabindex="-1">Cesium中常用的坐标 <a class="header-anchor" href="#cesium中常用的坐标" aria-label="Permalink to &quot;Cesium中常用的坐标&quot;">​</a></h2><h3 id="_1-屏幕坐标-像素" tabindex="-1">1.屏幕坐标（像素****） <a class="header-anchor" href="#_1-屏幕坐标-像素" aria-label="Permalink to &quot;1.屏幕坐标（像素****）&quot;">​</a></h3><p>即二维笛卡尔平面坐标，我们通过鼠标点击直接获取的坐标就是屏幕坐标了，单位是像素值，也可以通过new Cesium.Cartesian2(x, y)创建。</p><p>笛卡尔空间直角坐标</p><p>笛卡尔空间直角坐标又称为世界坐标，Cesium中用Cartesian3变量表示，可通过new Cesium.Cartesian3(x, y, z)创建，主要是用来做空间位置的变化如平移、旋转和缩放等等，它的坐标原点在椭球的中心，如下图所示：</p><img src="'+t+'"><h3 id="_2-地理坐标-弧度" tabindex="-1">2.地理坐标（弧度） <a class="header-anchor" href="#_2-地理坐标-弧度" aria-label="Permalink to &quot;2.地理坐标（弧度）&quot;">​</a></h3><p>Cesium中的地理坐标单位默认是弧度制，用Cartographic变量表示，可通过new Cesium.Cartographic(longitude, latitude, height)创建，其中这里的参数是用弧度表示的经纬度，即经度和纬度。弧度即角度对应弧长是半径的倍数。</p><p><em>角度转弧度 π/180×角度</em></p><p><em>弧度变角度 180/π×弧度</em></p><img src="'+r+'"><h3 id="_3-经纬度坐标" tabindex="-1">3.经纬度坐标 <a class="header-anchor" href="#_3-经纬度坐标" aria-label="Permalink to &quot;3.经纬度坐标&quot;">​</a></h3><p>即测绘中的地理经纬度坐标，默认是WGS84坐标系，坐标原点在椭球的质心。</p><img src="'+o+'"><p>经度：参考椭球面上某点的大地子午面与本初子午面间的两面角，东正西负。</p><p>纬度 ：参考椭球面上某点的法线与赤道平面的夹角，北正南负。</p><p>Cesuim中没有具体的经纬度对象，要得到经纬度首先需要计算为弧度，再进行转换。Cesium提供了如下对应的转换方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// 经纬度转弧度``Cesium.Math.toRadians(degrees)``// 弧度转经纬度``Cesium.Math.toDegrees(radians)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 经纬度转弧度``Cesium.Math.toRadians(degrees)``// 弧度转经纬度``Cesium.Math.toDegrees(radians)</span></span></code></pre></div><h2 id="cesium中常用的坐标变换" tabindex="-1">Cesium中常用的坐标变换 <a class="header-anchor" href="#cesium中常用的坐标变换" aria-label="Permalink to &quot;Cesium中常用的坐标变换&quot;">​</a></h2><h3 id="_1-经纬度坐标转世界坐标" tabindex="-1">1.经纬度坐标转世界坐标 <a class="header-anchor" href="#_1-经纬度坐标转世界坐标" aria-label="Permalink to &quot;1.经纬度坐标转世界坐标&quot;">​</a></h3><p>Cesium提供了两种方式将经纬度坐标转成世界坐标。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">`// 方法1：直接转换` `// var cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat, height);``   ` `// 方法2：借助ellipsoid对象，先转换成弧度再转换` `var cartographic = Cesium.Cartographic.fromDegrees(lng, lat, height); //单位：度，度，米` `var cartesian3 = ellipsoid.cartographicToCartesian(cartographic);`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">`// 方法1：直接转换` `// var cartesian3 = Cesium.Cartesian3.fromDegrees(lng, lat, height);``   ` `// 方法2：借助ellipsoid对象，先转换成弧度再转换` `var cartographic = Cesium.Cartographic.fromDegrees(lng, lat, height); //单位：度，度，米` `var cartesian3 = ellipsoid.cartographicToCartesian(cartographic);`</span></span></code></pre></div><h3 id="_2-世界坐标转经纬度" tabindex="-1">2.世界坐标转经纬度 <a class="header-anchor" href="#_2-世界坐标转经纬度" aria-label="Permalink to &quot;2.世界坐标转经纬度&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">`// 3.笛卡尔空间直角坐标系转为地理坐标（弧度制）` `// var cartographic = Cesium.Cartographic.fromCartesian(cartesian3); // 方法1` `var cartographic = ellipsoid.cartesianToCartographic(cartesian3); // 方法2` `// 4.地理坐标（弧度制）转为经纬度坐标` `var lat = Cesium.Math.toDegrees(cartographic.latitude);` `var lng = Cesium.Math.toDegrees(cartographic.longitude);` `var height = cartographic.height;`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">`// 3.笛卡尔空间直角坐标系转为地理坐标（弧度制）` `// var cartographic = Cesium.Cartographic.fromCartesian(cartesian3); // 方法1` `var cartographic = ellipsoid.cartesianToCartographic(cartesian3); // 方法2` `// 4.地理坐标（弧度制）转为经纬度坐标` `var lat = Cesium.Math.toDegrees(cartographic.latitude);` `var lng = Cesium.Math.toDegrees(cartographic.longitude);` `var height = cartographic.height;`</span></span></code></pre></div><h3 id="_3-弧度和经纬度互转" tabindex="-1">3.弧度和经纬度互转 <a class="header-anchor" href="#_3-弧度和经纬度互转" aria-label="Permalink to &quot;3.弧度和经纬度互转&quot;">​</a></h3><p>经纬度转弧度：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Cesium.Math.toRadians(degrees)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cesium.Math.toRadians(degrees)</span></span></code></pre></div><p>弧度转经纬度：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Cesium.Math.toDegrees(radians)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Cesium.Math.toDegrees(radians)</span></span></code></pre></div><h3 id="_4-屏幕坐标和世界坐标互转" tabindex="-1">4.屏幕坐标和世界坐标互转 <a class="header-anchor" href="#_4-屏幕坐标和世界坐标互转" aria-label="Permalink to &quot;4.屏幕坐标和世界坐标互转&quot;">​</a></h3><p>屏幕转世界坐标：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// 2.二维屏幕坐标转为三维笛卡尔空间直角坐标（世界坐标）`      `var cartesian3 = scene.globe.pick(`        `viewer.camera.getPickRay(windowPostion),`        `scene`      `);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 2.二维屏幕坐标转为三维笛卡尔空间直角坐标（世界坐标）`      `var cartesian3 = scene.globe.pick(`        `viewer.camera.getPickRay(windowPostion),`        `scene`      `);</span></span></code></pre></div><p>注意这里屏幕坐标一定要在球上，否则生成出的cartesian对象是undefined。</p><p>世界坐标转屏幕坐标：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// 三维笛卡尔空间直角坐标（世界坐标）转为二维屏幕坐标` `// 结果是Cartesian2对象，取出X,Y即为屏幕坐标。` `windowPostion = Cesium.SceneTransforms.wgs84ToWindowCoordinates(`   `scene,`   `cartesian3` `);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 三维笛卡尔空间直角坐标（世界坐标）转为二维屏幕坐标` `// 结果是Cartesian2对象，取出X,Y即为屏幕坐标。` `windowPostion = Cesium.SceneTransforms.wgs84ToWindowCoordinates(`   `scene,`   `cartesian3` `);</span></span></code></pre></div><h2 id="坐标变换工具" tabindex="-1">坐标变换工具 <a class="header-anchor" href="#坐标变换工具" aria-label="Permalink to &quot;坐标变换工具&quot;">​</a></h2><p>只有转换到笛卡尔坐标系后才能运用计算机图形学中的仿射变换知识进行空间位置变换如平移旋转缩放。Cesium为我们提供了如下几种很有用的变换工具类：</p><ul><li><p>Cesium.Cartesian3（相当于Point3D）</p></li><li><p>Cesium.Matrix3（3x3矩阵，用于描述旋转变换）</p></li><li><p>Cesium.Matrix4（4x4矩阵，用于描述旋转加平移变换）</p></li><li><p>Cesium.Quaternion（四元数，用于描述围绕某个向量旋转一定角度的变换）</p></li><li><p>Cesium.Transforms(包含将位置转换为各种参考系的功能)</p></li></ul>',38),p=[c];function l(d,h,u,g,m,C){return e(),s("div",null,p)}const _=a(n,[["render",l]]);export{f as __pageData,_ as default};
