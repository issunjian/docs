import{_ as e,o as a,c as s,V as o}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端面试题及答案整理，2021年最新，汇总版.md","filePath":"interview/backend/前端/前端面试题及答案整理，2021年最新，汇总版.md"}'),t={name:"interview/backend/前端/前端面试题及答案整理，2021年最新，汇总版.md"},r=o(`<h3 id="_1、promise对象的用法-手写一个promise" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1promise%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%A8%E6%B3%95,%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AApromise" target="_blank" rel="noreferrer">1、promise对象的用法,手写一个promise</a> <a class="header-anchor" href="#_1、promise对象的用法-手写一个promise" aria-label="Permalink to &quot;[1、promise对象的用法,手写一个promise](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#1promise对象的用法,手写一个promise)&quot;">​</a></h3><p>promise是一个构造函数，下面是一个简单实例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">var promise = new Promise((resolve,reject) =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">    if (操作成功) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        resolve(value)</span></span>
<span class="line"><span style="color:#f6f6f4;">    } else {</span></span>
<span class="line"><span style="color:#f6f6f4;">        reject(error)</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">})</span></span>
<span class="line"><span style="color:#f6f6f4;">promise.then(function (value) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    // success</span></span>
<span class="line"><span style="color:#f6f6f4;">},function (value) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    // failure</span></span>
<span class="line"><span style="color:#f6f6f4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var promise = new Promise((resolve,reject) =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">    if (操作成功) {</span></span>
<span class="line"><span style="color:#24292e;">        resolve(value)</span></span>
<span class="line"><span style="color:#24292e;">    } else {</span></span>
<span class="line"><span style="color:#24292e;">        reject(error)</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">})</span></span>
<span class="line"><span style="color:#24292e;">promise.then(function (value) {</span></span>
<span class="line"><span style="color:#24292e;">    // success</span></span>
<span class="line"><span style="color:#24292e;">},function (value) {</span></span>
<span class="line"><span style="color:#24292e;">    // failure</span></span>
<span class="line"><span style="color:#24292e;">})</span></span></code></pre></div><h3 id="_2、浏览器是怎样解析css选择器的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E6%80%8E%E6%A0%B7%E8%A7%A3%E6%9E%90css%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84" target="_blank" rel="noreferrer">2、浏览器是怎样解析CSS选择器的？</a> <a class="header-anchor" href="#_2、浏览器是怎样解析css选择器的" aria-label="Permalink to &quot;[2、浏览器是怎样解析CSS选择器的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#2浏览器是怎样解析css选择器的)&quot;">​</a></h3><p><strong>1、</strong> CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。</p><p><strong>2、</strong> 而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。</p><h3 id="_3、js的几条基本规范" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3js%E7%9A%84%E5%87%A0%E6%9D%A1%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">3、JS的几条基本规范</a> <a class="header-anchor" href="#_3、js的几条基本规范" aria-label="Permalink to &quot;[3、JS的几条基本规范](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#3js的几条基本规范)&quot;">​</a></h3><p><strong>1、</strong> 不要在同一行声明多个变量</p><p><strong>2、</strong> 请使用===/！==来比较true/false或者数值</p><p><strong>3、</strong> 使用对象字面量替代new Array这种形式</p><p><strong>4、</strong> 不要使用全局变量</p><p><strong>5、</strong> Switch语句必须带有default分支</p><p><strong>6、</strong> 函数不应该有时候有返回值，有时候没有返回值</p><p><strong>7、</strong> For循环必须使用大括号</p><p><strong>8、</strong> IF语句必须使用大括号</p><p><strong>9、</strong> for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染</p><h3 id="_4、display-none与visibility-hidden的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4display:none%E4%B8%8Evisibility%EF%BC%9Ahidden%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">4、display:none与visibility：hidden的区别？</a> <a class="header-anchor" href="#_4、display-none与visibility-hidden的区别" aria-label="Permalink to &quot;[4、display:none与visibility：hidden的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#4display:none与visibility：hidden的区别)&quot;">​</a></h3><p>display：none 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p><p>visibility：hidden 隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p><h3 id="_5、谈一下你对网页标准和标准制定机构重要性的理解。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5%E8%B0%88%E4%B8%80%E4%B8%8B%E4%BD%A0%E5%AF%B9%E7%BD%91%E9%A1%B5%E6%A0%87%E5%87%86%E5%92%8C%E6%A0%87%E5%87%86%E5%88%B6%E5%AE%9A%E6%9C%BA%E6%9E%84%E9%87%8D%E8%A6%81%E6%80%A7%E7%9A%84%E7%90%86%E8%A7%A3%E3%80%82" target="_blank" rel="noreferrer">5、谈一下你对网页标准和标准制定机构重要性的理解。</a> <a class="header-anchor" href="#_5、谈一下你对网页标准和标准制定机构重要性的理解。" aria-label="Permalink to &quot;[5、谈一下你对网页标准和标准制定机构重要性的理解。](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#5谈一下你对网页标准和标准制定机构重要性的理解。)&quot;">​</a></h3><p><code>网页标准</code>和<code>标准制定机构</code>都是为了能让 <code>web</code> 发展的更‘健康’，开发者遵循统一的标准，降低开发难度，开发成本，<code>SEO</code>也会更好做，也不会因为滥用代码导致各种 <code>BUG</code>、安全问题，最终提高网站易用性。</p><h3 id="_6、异步加载js的方式有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BDjs%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">6、异步加载JS的方式有哪些？</a> <a class="header-anchor" href="#_6、异步加载js的方式有哪些" aria-label="Permalink to &quot;[6、异步加载JS的方式有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#6异步加载js的方式有哪些)&quot;">​</a></h3><p>defer，只支持<code>IE</code></p><p><code>async</code>：</p><p>创建<code>script</code>，插入到<code>DOM</code>中，加载完毕后<code>callBack</code></p><h3 id="_7、javascript有几种类型的值-你能画一下他们的内存图吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7javascript%E6%9C%89%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E4%BD%A0%E8%83%BD%E7%94%BB%E4%B8%80%E4%B8%8B%E4%BB%96%E4%BB%AC%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE%E5%90%97" target="_blank" rel="noreferrer">7、JavaScript有几种类型的值？，你能画一下他们的内存图吗？</a> <a class="header-anchor" href="#_7、javascript有几种类型的值-你能画一下他们的内存图吗" aria-label="Permalink to &quot;[7、JavaScript有几种类型的值？，你能画一下他们的内存图吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#7javascript有几种类型的值你能画一下他们的内存图吗)&quot;">​</a></h3><p><strong>1、</strong> 栈：原始数据类型（<code>Undefined</code>，<code>Null</code>，<code>Boolean</code>，<code>Numbe</code>r、<code>String</code>）</p><p><strong>2、</strong> 堆：引用数据类型（对象、数组和函数）</p><p><strong>3、</strong> 两种类型的区别是：存储位置不同；</p><p><strong>4、</strong> 原始数据类型直接存储在栈(<code>stack</code>)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</p><p><strong>5、</strong> 引用数据类型存储在堆(<code>heap</code>)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其</p><p><strong>6、</strong> 在栈中的地址，取得地址后从堆中获得实体</p><p>![33_1.png][33_1.png]</p><h3 id="_8、元素的alt和title有什么异同" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E5%85%83%E7%B4%A0%E7%9A%84alt%E5%92%8Ctitle%E6%9C%89%E4%BB%80%E4%B9%88%E5%BC%82%E5%90%8C" target="_blank" rel="noreferrer">8、元素的alt和title有什么异同</a> <a class="header-anchor" href="#_8、元素的alt和title有什么异同" aria-label="Permalink to &quot;[8、元素的alt和title有什么异同](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#8元素的alt和title有什么异同)&quot;">​</a></h3><p>在alt和title同时设置的时候，alt作为图片的替代文字出现，title是图片的解释文字。</p><h3 id="_9、object-seal-和-object-freeze-方法之间有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9objectseal-%E5%92%8C-objectfreeze-%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、Object.seal 和 Object.freeze 方法之间有什么区别？</a> <a class="header-anchor" href="#_9、object-seal-和-object-freeze-方法之间有什么区别" aria-label="Permalink to &quot;[9、Object.seal 和 Object.freeze 方法之间有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#9objectseal-和-objectfreeze-方法之间有什么区别)&quot;">​</a></h3><p><strong>Object.freeze()</strong></p><p><code>Object.freeze()</code> 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改<code>。freeze()</code> 返回和传入的参数相同的对象。</p><p><strong>Object.seal()</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Object.seal()方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Object.seal()方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</span></span></code></pre></div><p>方法的相同点：</p><p><strong>1、</strong> ES5新增。</p><p><strong>2、</strong> 对象不可能扩展，也就是不能再添加新的属性或者方法。</p><p><strong>3、</strong> 对象已有属性不允许被删除。</p><p><strong>4、</strong> 对象属性特性不可以重新配置。</p><p>方法不同点：</p><ul><li><code>Object.seal</code>方法生成的密封对象，如果属性是可写的，那么可以修改属性值。<code>* Object.freeze</code>方法生成的冻结对象，属性都是不可写的，也就是属性值无法更改。</li></ul><h3 id="_10、改变元素的外边距用什么属性-改变元素的内填充用什么属性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10%E6%94%B9%E5%8F%98%E5%85%83%E7%B4%A0%E7%9A%84%E5%A4%96%E8%BE%B9%E8%B7%9D%E7%94%A8%E4%BB%80%E4%B9%88%E5%B1%9E%E6%80%A7%E6%94%B9%E5%8F%98%E5%85%83%E7%B4%A0%E7%9A%84%E5%86%85%E5%A1%AB%E5%85%85%E7%94%A8%E4%BB%80%E4%B9%88%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">10、改变元素的外边距用什么属性？改变元素的内填充用什么属性？</a> <a class="header-anchor" href="#_10、改变元素的外边距用什么属性-改变元素的内填充用什么属性" aria-label="Permalink to &quot;[10、改变元素的外边距用什么属性？改变元素的内填充用什么属性？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理，2021年最新，汇总版.md#10改变元素的外边距用什么属性改变元素的内填充用什么属性)&quot;">​</a></h3><p>改变元素的外边距用 margin，改变元素的内填充用 padding。</p><h3 id="_11、每个html文件里开头都有个很重要的东西-doctype-知道这是干什么的吗" tabindex="-1">11、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？ <a class="header-anchor" href="#_11、每个html文件里开头都有个很重要的东西-doctype-知道这是干什么的吗" aria-label="Permalink to &quot;11、每个HTML文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？&quot;">​</a></h3><h3 id="_12、如果设计中使用了非标准的字体-你该如何去实现" tabindex="-1">12、如果设计中使用了非标准的字体，你该如何去实现？ <a class="header-anchor" href="#_12、如果设计中使用了非标准的字体-你该如何去实现" aria-label="Permalink to &quot;12、如果设计中使用了非标准的字体，你该如何去实现？&quot;">​</a></h3><h3 id="_13、http状态码及其含义" tabindex="-1">13、HTTP状态码及其含义 <a class="header-anchor" href="#_13、http状态码及其含义" aria-label="Permalink to &quot;13、HTTP状态码及其含义&quot;">​</a></h3><h3 id="_14、如何实现浏览器内多个标签页之间的通信" tabindex="-1">14、如何实现浏览器内多个标签页之间的通信? <a class="header-anchor" href="#_14、如何实现浏览器内多个标签页之间的通信" aria-label="Permalink to &quot;14、如何实现浏览器内多个标签页之间的通信?&quot;">​</a></h3><h3 id="_15、你如何对网站的文件和资源进行优化" tabindex="-1">15、你如何对网站的文件和资源进行优化？ <a class="header-anchor" href="#_15、你如何对网站的文件和资源进行优化" aria-label="Permalink to &quot;15、你如何对网站的文件和资源进行优化？&quot;">​</a></h3><h3 id="_16、什么是事件传播" tabindex="-1">16、什么是事件传播? <a class="header-anchor" href="#_16、什么是事件传播" aria-label="Permalink to &quot;16、什么是事件传播?&quot;">​</a></h3><h3 id="_17、为什么会出现浮动和什么时候需要清除浮动-清除浮动的方式" tabindex="-1">17、为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？ <a class="header-anchor" href="#_17、为什么会出现浮动和什么时候需要清除浮动-清除浮动的方式" aria-label="Permalink to &quot;17、为什么会出现浮动和什么时候需要清除浮动？清除浮动的方式？&quot;">​</a></h3><h3 id="_18、amd和cmd是什么-它们的区别有哪些" tabindex="-1">18、AMD和CMD是什么？它们的区别有哪些？ <a class="header-anchor" href="#_18、amd和cmd是什么-它们的区别有哪些" aria-label="Permalink to &quot;18、AMD和CMD是什么？它们的区别有哪些？&quot;">​</a></h3><h3 id="_19、什么是默认参数" tabindex="-1">19、什么是默认参数？ <a class="header-anchor" href="#_19、什么是默认参数" aria-label="Permalink to &quot;19、什么是默认参数？&quot;">​</a></h3><h3 id="_20、mouseover和mouseenter的区别" tabindex="-1">20、mouseover和mouseenter的区别 <a class="header-anchor" href="#_20、mouseover和mouseenter的区别" aria-label="Permalink to &quot;20、mouseover和mouseenter的区别&quot;">​</a></h3><h3 id="_21、html5-元素的分类" tabindex="-1">21、HTML5 元素的分类 <a class="header-anchor" href="#_21、html5-元素的分类" aria-label="Permalink to &quot;21、HTML5 元素的分类&quot;">​</a></h3><h3 id="_22、-img-的title和alt有什么区别" tabindex="-1">22、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别 <a class="header-anchor" href="#_22、-img-的title和alt有什么区别" aria-label="Permalink to &quot;22、\`&lt;img&gt;\`的\`title\`和\`alt\`有什么区别&quot;">​</a></h3><h3 id="_23、attribute-和-property-的区别是什么" tabindex="-1">23、attribute 和 property 的区别是什么？ <a class="header-anchor" href="#_23、attribute-和-property-的区别是什么" aria-label="Permalink to &quot;23、attribute 和 property 的区别是什么？&quot;">​</a></h3><h3 id="_24、websocket如何兼容低浏览器" tabindex="-1">24、webSocket如何兼容低浏览器 <a class="header-anchor" href="#_24、websocket如何兼容低浏览器" aria-label="Permalink to &quot;24、webSocket如何兼容低浏览器&quot;">​</a></h3><h3 id="_25、iframe有那些缺点" tabindex="-1">25、iframe有那些缺点？ <a class="header-anchor" href="#_25、iframe有那些缺点" aria-label="Permalink to &quot;25、iframe有那些缺点？&quot;">​</a></h3><h3 id="_26、什么是模板字符串" tabindex="-1">26、什么是模板字符串？ <a class="header-anchor" href="#_26、什么是模板字符串" aria-label="Permalink to &quot;26、什么是模板字符串？&quot;">​</a></h3><h3 id="_27、web开发中会话跟踪的方法有哪些" tabindex="-1">27、web开发中会话跟踪的方法有哪些 <a class="header-anchor" href="#_27、web开发中会话跟踪的方法有哪些" aria-label="Permalink to &quot;27、web开发中会话跟踪的方法有哪些&quot;">​</a></h3><h3 id="_28、常见的浏览器兼容问题" tabindex="-1">28、常见的浏览器兼容问题？ <a class="header-anchor" href="#_28、常见的浏览器兼容问题" aria-label="Permalink to &quot;28、常见的浏览器兼容问题？&quot;">​</a></h3><h3 id="_29、link-标签定义" tabindex="-1">29、link 标签定义 <a class="header-anchor" href="#_29、link-标签定义" aria-label="Permalink to &quot;29、link 标签定义&quot;">​</a></h3><h3 id="_30、简述下你理解的面向对象" tabindex="-1">30、简述下你理解的面向对象？ <a class="header-anchor" href="#_30、简述下你理解的面向对象" aria-label="Permalink to &quot;30、简述下你理解的面向对象？&quot;">​</a></h3>`,69),n=[r];function l(E,i,c,p,d,h){return a(),s("div",null,n)}const u=e(t,[["render",l]]);export{A as __pageData,u as default};
