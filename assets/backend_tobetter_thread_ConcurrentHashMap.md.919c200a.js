import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/ConcurrentHashMap-01.f93f2525.png",o="/docs/assets/ConcurrentHashMap-02.9c780c05.png",d=JSON.parse('{"title":"吊打Java并发面试官之ConcurrentHashMap","description":"吊打Java并发面试官之ConcurrentHashMap","frontmatter":{"title":"吊打Java并发面试官之ConcurrentHashMap","shortTitle":"ConcurrentHashMap","description":"吊打Java并发面试官之ConcurrentHashMap","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ConcurrentHashMap"}]]},"headers":[],"relativePath":"backend/tobetter/thread/ConcurrentHashMap.md","filePath":"backend/tobetter/thread/ConcurrentHashMap.md"}'),e={name:"backend/tobetter/thread/ConcurrentHashMap.md"},t=l(`<p>在使用HashMap时，在多线程情况下扩容会出现CPU接近100%的情况，因为hashmap并不是线程安全的，通常我们可以使用在java体系中古老的hashtable类，该类基本上所有的方法都采用synchronized进行线程安全的控制，可想而知，在高并发的情况下，每次只有一个线程能够获取对象监视器锁，这样的并发性能的确不令人满意。</p><p>另外一种方式通过Collections的<code>Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m)</code>将hashmap包装成一个线程安全的map。比如SynchronzedMap的put方法源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> value) {</span></span>
<span class="line"><span style="color:#F6F6F4;">	    </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (mutex) {</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> m.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(key, value);}</span></span>
<span class="line"><span style="color:#F6F6F4;">	}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> V </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(K key, V value) {</span></span>
<span class="line"><span style="color:#24292E;">	    </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (mutex) {</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> m.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(key, value);}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span></code></pre></div><p>实际上SynchronizedMap实现依然是采用synchronized独占式锁进行线程安全的并发控制的。同样，这种方案的性能也是令人不太满意的。针对这种境况，Doug Lea大师不遗余力的为我们创造了一些线程安全的并发容器，让每一个java开发人员倍感幸福。相对于hashmap来说，ConcurrentHashMap就是线程安全的map，其中<strong>利用了锁分段的思想提高了并发度</strong>。</p><p>ConcurrentHashMap在JDK1.6的版本网上资料很多，有兴趣的可以去看看。 JDK 1.6版本关键要素：</p><ol><li>segment继承了ReentrantLock充当锁的角色，为每一个segment提供了线程安全的保障；</li><li>segment维护了哈希散列表的若干个桶，每个桶由HashEntry构成的链表。</li></ol><p>而到了JDK 1.8的ConcurrentHashMap就有了很大的变化，光是代码量就足足增加了很多。1.8版本舍弃了segment，并且大量使用了synchronized，以及CAS无锁操作以保证ConcurrentHashMap操作的线程安全性。</p><p>至于为什么不用ReentrantLock而是Synchronzied呢？实际上，synchronzied做了很多的优化，包括偏向锁，轻量级锁，重量级锁，可以依次向上升级锁状态，但不能降级，因此，使用synchronized相较于ReentrantLock的性能会持平甚至在某些情况更优，具体的性能测试可以去网上查阅一些资料。另外，底层数据结构改变为采用数组+链表+红黑树的数据形式。</p><h2 id="关键属性及类" tabindex="-1">关键属性及类 <a class="header-anchor" href="#关键属性及类" aria-label="Permalink to &quot;关键属性及类&quot;">​</a></h2><p>在了解ConcurrentHashMap的具体方法实现前，我们需要系统的来看一下几个关键的地方。</p><h3 id="concurrenthashmap的关键属性" tabindex="-1"><strong>ConcurrentHashMap的关键属性</strong> <a class="header-anchor" href="#concurrenthashmap的关键属性" aria-label="Permalink to &quot;**ConcurrentHashMap的关键属性**&quot;">​</a></h3><ol><li><strong>table</strong><code>volatile Node&lt;K,V&gt;[] table</code>:</li></ol><p>装载Node的数组，作为ConcurrentHashMap的数据容器，采用懒加载的方式，直到第一次插入数据的时候才会进行初始化操作，数组的大小总是为2的幂次方。</p><ol start="2"><li><strong>nextTable</strong><code>volatile Node&lt;K,V&gt;[] nextTable;</code></li></ol><p>扩容时使用，平时为null，只有在扩容的时候才为非null</p><ol start="3"><li><strong>sizeCtl</strong><code>volatile int sizeCtl;</code></li></ol><p>该属性用来控制table数组的大小，根据是否初始化和是否正在扩容有几种情况：</p><ul><li><strong>当值为负数时：</strong> 如果为-1表示正在初始化，如果为-N则表示当前正有N-1个线程进行扩容操作；</li><li><strong>当值为正数时：</strong> 如果当前数组为null的话表示table在初始化过程中，sizeCtl表示为需要新建数组的长度；</li><li>若已经初始化了，表示当前数据容器（table数组）可用容量也可以理解成临界值（插入节点数超过了该临界值就需要扩容），具体指为数组的长度n 乘以 加载因子loadFactor；</li><li>当值为0时，即数组长度为默认初始值。</li></ul><ol start="4"><li><code>sun.misc.Unsafe U</code></li></ol><p>在ConcurrentHashMapde的实现中可以看到大量的U.compareAndSwapXXXX的方法去修改ConcurrentHashMap的一些属性。</p><p>这些方法实际上是利用了CAS算法保证了线程安全性，这是一种乐观策略，假设每一次操作都不会产生冲突，当且仅当冲突发生的时候再去尝试。</p><p>而CAS操作依赖于现代处理器指令集，通过底层<strong>CMPXCHG</strong>指令实现。CAS(V,O,N)核心思想为：<strong>若当前变量实际值V与期望的旧值O相同，则表明该变量没被其他线程进行修改，因此可以安全的将新值N赋值给变量；若当前变量实际值V与期望的旧值O不相同，则表明该变量已经被其他线程做了处理，此时将新值N赋给变量操作就是不安全的，在进行重试</strong>。</p><p>而在大量的同步组件和并发容器的实现中使用CAS是通过<code>sun.misc.Unsafe</code>类实现的，该类提供了一些可以直接操控内存和线程的底层操作，可以理解为java中的“指针”。该成员变量的获取是在静态代码块中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        U </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sun.misc.Unsafe.</span><span style="color:#62E884;">getUnsafe</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		.......</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        U </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sun.misc.Unsafe.</span><span style="color:#6F42C1;">getUnsafe</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		.......</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="concurrenthashmap中关键内部类" tabindex="-1"><strong>ConcurrentHashMap中关键内部类</strong> <a class="header-anchor" href="#concurrenthashmap中关键内部类" aria-label="Permalink to &quot;**ConcurrentHashMap中关键内部类**&quot;">​</a></h3><h4 id="_1-node" tabindex="-1">1. <strong>Node</strong> <a class="header-anchor" href="#_1-node" aria-label="Permalink to &quot;1. **Node**&quot;">​</a></h4><p>Node类实现了Map.Entry接口，主要存放key-value对，并且具有next域</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map.Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> hash;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> val;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; next;</span></span>
<span class="line"><span style="color:#F6F6F4;">		......</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map.Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> K key;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> V val;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; next;</span></span>
<span class="line"><span style="color:#24292E;">		......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外可以看出很多属性都是用volatile进行修饰的，也就是为了保证内存可见性。</p><h4 id="_2-treenode" tabindex="-1">2. <strong>TreeNode</strong> <a class="header-anchor" href="#_2-treenode" aria-label="Permalink to &quot;2. **TreeNode**&quot;">​</a></h4><p>树节点，继承于承载数据的Node类。而红黑树的操作是针对TreeBin类的，从该类的注释也可以看出，也就是TreeBin会将TreeNode进行再一次封装</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">**</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Nodes</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> use in </span><span style="color:#97E1F1;font-style:italic;">TreeBins</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*/</span></span>
<span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; parent;  </span><span style="color:#7B7F8B;">// red-black tree links</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; left;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; right;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; prev;    </span><span style="color:#7B7F8B;">// needed to unlink next upon deletion</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> red;</span></span>
<span class="line"><span style="color:#F6F6F4;">		......</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">**</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> Nodes </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> use in TreeBins</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">*/</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; parent;  </span><span style="color:#6A737D;">// red-black tree links</span></span>
<span class="line"><span style="color:#24292E;">        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; left;</span></span>
<span class="line"><span style="color:#24292E;">        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; right;</span></span>
<span class="line"><span style="color:#24292E;">        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; prev;    </span><span style="color:#6A737D;">// needed to unlink next upon deletion</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> red;</span></span>
<span class="line"><span style="color:#24292E;">		......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3-treebin" tabindex="-1">3. <strong>TreeBin</strong> <a class="header-anchor" href="#_3-treebin" aria-label="Permalink to &quot;3. **TreeBin**&quot;">​</a></h4><p>这个类并不负责包装用户的key、value信息，而是包装的很多TreeNode节点。实际的ConcurrentHashMap“数组”中，存放的是TreeBin对象，而不是TreeNode对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TreeBin</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; root;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; first;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> waiter;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> lockState;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// values for lockState</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> WRITER </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// set while holding write lock</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> WAITER </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// set when waiting for write lock</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> READER </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// increment value for setting read lock</span></span>
<span class="line"><span style="color:#F6F6F4;">		......</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeBin</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; root;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; first;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> Thread waiter;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lockState;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// values for lockState</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> WRITER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// set while holding write lock</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> WAITER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// set when waiting for write lock</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> READER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// increment value for setting read lock</span></span>
<span class="line"><span style="color:#24292E;">		......</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_4-forwardingnode" tabindex="-1">4. <strong>ForwardingNode</strong> <a class="header-anchor" href="#_4-forwardingnode" aria-label="Permalink to &quot;4. **ForwardingNode**&quot;">​</a></h4><p>在扩容时才会出现的特殊节点，其key,value,hash全部为null。并拥有nextTable指针引用新的table数组。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ForwardingNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] nextTable;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ForwardingNode</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] </span><span style="color:#FFB86C;font-style:italic;">tab</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(MOVED, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.nextTable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">   .....</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ForwardingNode</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] nextTable;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ForwardingNode</span><span style="color:#24292E;">(Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] </span><span style="color:#E36209;">tab</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(MOVED, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.nextTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">   .....</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="cas关键操作" tabindex="-1"><strong>CAS关键操作</strong> <a class="header-anchor" href="#cas关键操作" aria-label="Permalink to &quot;**CAS关键操作**&quot;">​</a></h2><p>在上面我们提及到在ConcurrentHashMap中会大量使用CAS修改它的属性和一些操作。因此，在理解ConcurrentHashMap的方法前我们需要了解下面几个常用的利用CAS算法来保障线程安全的操作。</p><h3 id="_1-tabat" tabindex="-1">1. <strong>tabAt</strong> <a class="header-anchor" href="#_1-tabat" aria-label="Permalink to &quot;1. **tabAt**&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tabAt</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[] tab, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">)U.</span><span style="color:#62E884;">getObjectVolatile</span><span style="color:#F6F6F4;">(tab, ((</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;">)i </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> ASHIFT) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> ABASE);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tabAt</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] tab, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">)U.</span><span style="color:#6F42C1;">getObjectVolatile</span><span style="color:#24292E;">(tab, ((</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)i </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> ASHIFT) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ABASE);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法用来获取table数组中索引为i的Node元素。</p><h3 id="_2-castabat" tabindex="-1">2. <strong>casTabAt</strong> <a class="header-anchor" href="#_2-castabat" aria-label="Permalink to &quot;2. **casTabAt**&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">casTabAt</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[] tab, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> c, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> v) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> U.</span><span style="color:#62E884;">compareAndSwapObject</span><span style="color:#F6F6F4;">(tab, ((</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;">)i </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> ASHIFT) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> ABASE, c, v);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">casTabAt</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] tab, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i,</span></span>
<span class="line"><span style="color:#24292E;">                                    Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> c, Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> v) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> U.</span><span style="color:#6F42C1;">compareAndSwapObject</span><span style="color:#24292E;">(tab, ((</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)i </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> ASHIFT) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ABASE, c, v);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>利用CAS操作设置table数组中索引为i的元素</p><h3 id="_3-settabat" tabindex="-1">3. <strong>setTabAt</strong> <a class="header-anchor" href="#_3-settabat" aria-label="Permalink to &quot;3. **setTabAt**&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[] tab, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> v) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    U.</span><span style="color:#62E884;">putObjectVolatile</span><span style="color:#F6F6F4;">(tab, ((</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;">)i </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> ASHIFT) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> ABASE, v);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] tab, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> v) {</span></span>
<span class="line"><span style="color:#24292E;">    U.</span><span style="color:#6F42C1;">putObjectVolatile</span><span style="color:#24292E;">(tab, ((</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)i </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> ASHIFT) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> ABASE, v);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法用来设置table数组中索引为i的元素</p><h2 id="重点方法讲解" tabindex="-1">重点方法讲解 <a class="header-anchor" href="#重点方法讲解" aria-label="Permalink to &quot;重点方法讲解&quot;">​</a></h2><p>在熟悉上面的这核心信息之后，我们接下来就来依次看看几个常用的方法是怎样实现的。</p><h3 id="实例构造器方法" tabindex="-1">实例构造器方法 <a class="header-anchor" href="#实例构造器方法" aria-label="Permalink to &quot;实例构造器方法&quot;">​</a></h3><p>在使用ConcurrentHashMap第一件事自然而然就是new 出来一个ConcurrentHashMap对象，一共提供了如下几个构造器方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 1. 构造一个空的map，即table数组还未初始化，初始化放在第一次插入数据时，默认大小为16</span></span>
<span class="line"><span style="color:#62E884;">ConcurrentHashMap</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2. 给定map的大小</span></span>
<span class="line"><span style="color:#62E884;">ConcurrentHashMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> initialCapacity) </span></span>
<span class="line"><span style="color:#7B7F8B;">// 3. 给定一个map</span></span>
<span class="line"><span style="color:#62E884;">ConcurrentHashMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F286C4;">&lt;?</span><span style="color:#F6F6F4;"> extends K, </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> extends V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> m)</span></span>
<span class="line"><span style="color:#7B7F8B;">// 4. 给定map的大小以及加载因子</span></span>
<span class="line"><span style="color:#62E884;">ConcurrentHashMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> initialCapacity, </span><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> loadFactor)</span></span>
<span class="line"><span style="color:#7B7F8B;">// 5. 给定map大小，加载因子以及并发度（预计同时操作数据的线程）</span></span>
<span class="line"><span style="color:#62E884;">ConcurrentHashMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> initialCapacity,</span><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> loadFactor, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> concurrencyLevel)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 构造一个空的map，即table数组还未初始化，初始化放在第一次插入数据时，默认大小为16</span></span>
<span class="line"><span style="color:#6F42C1;">ConcurrentHashMap</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 2. 给定map的大小</span></span>
<span class="line"><span style="color:#6F42C1;">ConcurrentHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> initialCapacity) </span></span>
<span class="line"><span style="color:#6A737D;">// 3. 给定一个map</span></span>
<span class="line"><span style="color:#6F42C1;">ConcurrentHashMap</span><span style="color:#24292E;">(Map</span><span style="color:#D73A49;">&lt;?</span><span style="color:#24292E;"> extends K, </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> extends V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> m)</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 给定map的大小以及加载因子</span></span>
<span class="line"><span style="color:#6F42C1;">ConcurrentHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> initialCapacity, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> loadFactor)</span></span>
<span class="line"><span style="color:#6A737D;">// 5. 给定map大小，加载因子以及并发度（预计同时操作数据的线程）</span></span>
<span class="line"><span style="color:#6F42C1;">ConcurrentHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> initialCapacity,</span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> loadFactor, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> concurrencyLevel)</span></span></code></pre></div><p>ConcurrentHashMap一共给我们提供了5中构造器方法，具体使用请看注释，我们来看看第2种构造器，传入指定大小时的情况，该构造器源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ConcurrentHashMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> initialCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 小于0直接抛异常</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (initialCapacity </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IllegalArgumentException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//2. 判断是否超过了允许的最大值，超过了话则取最大值，否则再对该值进一步处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> cap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ((initialCapacity </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> (MAXIMUM_CAPACITY </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) </span><span style="color:#F286C4;">?</span></span>
<span class="line"><span style="color:#F6F6F4;">               MAXIMUM_CAPACITY </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">               </span><span style="color:#62E884;">tableSizeFor</span><span style="color:#F6F6F4;">(initialCapacity </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (initialCapacity </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//3. 赋值给sizeCtl</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sizeCtl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cap;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConcurrentHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> initialCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 小于0直接抛异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (initialCapacity </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//2. 判断是否超过了允许的最大值，超过了话则取最大值，否则再对该值进一步处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((initialCapacity </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> (MAXIMUM_CAPACITY </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">               MAXIMUM_CAPACITY </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6F42C1;">tableSizeFor</span><span style="color:#24292E;">(initialCapacity </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (initialCapacity </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//3. 赋值给sizeCtl</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sizeCtl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cap;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码的逻辑请看注释，很容易理解，如果小于0就直接抛出异常，如果指定值大于了所允许的最大值的话就取最大值，否则，在对指定值做进一步处理。最后将cap赋值给sizeCtl,关于sizeCtl的说明请看上面的说明，<strong>当调用构造器方法之后，sizeCtl的大小应该就代表了ConcurrentHashMap的大小，即table数组长度</strong>。tableSizeFor做了哪些事情了？源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Returns a power of two table size for the given desired capacity.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * See Hackers Delight, sec 3.2</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tableSizeFor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    n </span><span style="color:#F286C4;">|=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    n </span><span style="color:#F286C4;">|=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    n </span><span style="color:#F286C4;">|=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    n </span><span style="color:#F286C4;">|=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    n </span><span style="color:#F286C4;">|=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> MAXIMUM_CAPACITY) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> MAXIMUM_CAPACITY </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Returns a power of two table size for the given desired capacity.</span></span>
<span class="line"><span style="color:#6A737D;"> * See Hackers Delight, sec 3.2</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tableSizeFor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">|=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> MAXIMUM_CAPACITY) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> MAXIMUM_CAPACITY </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>通过注释就很清楚了，该方法会将调用构造器方法时指定的大小转换成一个2的幂次方数，也就是说ConcurrentHashMap的大小一定是2的幂次方，比如，当指定大小为18时，为了满足2的幂次方特性，实际上concurrentHashMapd的大小为2的5次方（32）。</p><p>另外，需要注意的是，<strong>调用构造器方法的时候并未构造出table数组（可以理解为ConcurrentHashMap的数据容器），只是算出table数组的长度，当第一次向ConcurrentHashMap插入数据的时候才真正的完成初始化创建table数组的工作</strong>。</p><h3 id="inittable方法" tabindex="-1">initTable方法 <a class="header-anchor" href="#inittable方法" aria-label="Permalink to &quot;initTable方法&quot;">​</a></h3><p>直接上源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[] </span><span style="color:#62E884;">initTable</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] tab; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> sc;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> tab.length </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sizeCtl) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">// 1. 保证只有一个线程正在进行初始化操作</span></span>
<span class="line"><span style="color:#F6F6F4;">            Thread.</span><span style="color:#62E884;">yield</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// lost initialization race; just spin</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (U.</span><span style="color:#62E884;">compareAndSwapInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, SIZECTL, sc, </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> tab.length </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#7B7F8B;">// 2. 得出数组的大小</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (sc </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> DEFAULT_CAPACITY;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    @</span><span style="color:#97E1F1;font-style:italic;">SuppressWarnings</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">unchecked</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#7B7F8B;">// 3. 这里才真正的初始化数组</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] nt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[])</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">,</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt;[n];</span></span>
<span class="line"><span style="color:#F6F6F4;">                    table </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nt;</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#7B7F8B;">// 4. 计算数组中可用的大小：实际大小n*0.75（加载因子）</span></span>
<span class="line"><span style="color:#F6F6F4;">                    sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                sizeCtl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> tab;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">initTable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] tab; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sc;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> tab.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sizeCtl) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 1. 保证只有一个线程正在进行初始化操作</span></span>
<span class="line"><span style="color:#24292E;">            Thread.</span><span style="color:#6F42C1;">yield</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// lost initialization race; just spin</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (U.</span><span style="color:#6F42C1;">compareAndSwapInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, SIZECTL, sc, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> tab.length </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">// 2. 得出数组的大小</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (sc </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> sc </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> DEFAULT_CAPACITY;</span></span>
<span class="line"><span style="color:#24292E;">                    @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">// 3. 这里才真正的初始化数组</span></span>
<span class="line"><span style="color:#24292E;">                    Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] nt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[])</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[n];</span></span>
<span class="line"><span style="color:#24292E;">                    table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nt;</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">// 4. 计算数组中可用的大小：实际大小n*0.75（加载因子）</span></span>
<span class="line"><span style="color:#24292E;">                    sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                sizeCtl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tab;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码的逻辑请见注释，有可能存在一个情况是多个线程同时走到这个方法中，为了保证能够正确初始化，在第1步中会先通过if进行判断，若当前已经有一个线程正在初始化即sizeCtl值变为-1，这个时候其他线程在If判断为true从而调用Thread.yield()让出CPU时间片。</p><p>正在进行初始化的线程会调用U.compareAndSwapInt方法将sizeCtl改为-1即正在初始化的状态。</p><p>另外还需要注意的事情是，在第四步中会进一步计算数组中可用的大小即为数组实际大小n乘以加载因子0.75.可以看看这里乘以0.75是怎么算的，0.75为四分之三，这里<code>n - (n &gt;&gt;&gt; 2)</code>是不是刚好是<code>n-(1/4)n=(3/4)n</code>，挺有意思的吧:)。</p><p>如果选择是无参的构造器的话，这里在new Node数组的时候会使用默认大小为<code>DEFAULT_CAPACITY</code>（16），然后乘以加载因子0.75为12，也就是说数组的可用大小为12。</p><h3 id="put方法" tabindex="-1">put方法 <a class="header-anchor" href="#put方法" aria-label="Permalink to &quot;put方法&quot;">​</a></h3><p>使用ConcurrentHashMap最长用的也应该是put和get方法了吧，我们先来看看put方法是怎样实现的。调用put方法时实际具体实现是putVal方法，源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/** Implementation for put and putIfAbsent */</span></span>
<span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">putVal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> value, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> onlyIfAbsent) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NullPointerException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 计算key的hash值</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> hash </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">spread</span><span style="color:#F6F6F4;">(key.</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> binCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; f; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n, i, fh;</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2. 如果当前table还没有初始化先调用initTable方法将tab进行初始化</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (tab </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">initTable</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//3. tab中索引为i的位置的元素为null，则直接使用CAS将值插入即可</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tabAt</span><span style="color:#F6F6F4;">(tab, i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> hash)) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">casTabAt</span><span style="color:#F6F6F4;">(tab, i, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;(hash, key, value, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;                   </span><span style="color:#7B7F8B;">// no lock when adding to empty bin</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4. 当前正在扩容</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((fh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.hash) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> MOVED)</span></span>
<span class="line"><span style="color:#F6F6F4;">            tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helpTransfer</span><span style="color:#F6F6F4;">(tab, f);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> oldVal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (f) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">tabAt</span><span style="color:#F6F6F4;">(tab, i) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> f) {</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#7B7F8B;">//5. 当前为链表，在链表中插入新的键值对</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fh </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        binCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f;; </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">binCount) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> ek;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e.hash </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> hash </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                ((ek </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.key) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">                                 (ek </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> key.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(ek)))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                                oldVal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    e.val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            }</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; pred </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.next) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                                pred.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;(hash, key,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                          value, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#7B7F8B;">// 6.当前为红黑树，将新的键值对插入到红黑树中</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (f </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> TreeBin) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        binCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ((</span><span style="color:#97E1F1;font-style:italic;">TreeBin</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">)f).</span><span style="color:#62E884;">putTreeVal</span><span style="color:#F6F6F4;">(hash, key,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                                       value)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            oldVal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#F6F6F4;">                                p.val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">// 7.插入完键值对后再根据实际大小看是否需要转换成红黑树</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (binCount </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (binCount </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> TREEIFY_THRESHOLD)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#62E884;">treeifyBin</span><span style="color:#F6F6F4;">(tab, i);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (oldVal </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldVal;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//8.对当前容量大小进行检查，如果超过了临界值（实际大小*加载因子）就需要扩容 </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">addCount</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">, binCount);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/** Implementation for put and putIfAbsent */</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> V </span><span style="color:#6F42C1;">putVal</span><span style="color:#24292E;">(K key, V value, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> onlyIfAbsent) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 计算key的hash值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spread</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> binCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table;;) {</span></span>
<span class="line"><span style="color:#24292E;">        Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; f; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n, i, fh;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2. 如果当前table还没有初始化先调用initTable方法将tab进行初始化</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tab </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initTable</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//3. tab中索引为i的位置的元素为null，则直接使用CAS将值插入即可</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tabAt</span><span style="color:#24292E;">(tab, i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> hash)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">casTabAt</span><span style="color:#24292E;">(tab, i, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(hash, key, value, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;                   </span><span style="color:#6A737D;">// no lock when adding to empty bin</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4. 当前正在扩容</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.hash) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> MOVED)</span></span>
<span class="line"><span style="color:#24292E;">            tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helpTransfer</span><span style="color:#24292E;">(tab, f);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            V oldVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (f) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">tabAt</span><span style="color:#24292E;">(tab, i) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> f) {</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">//5. 当前为链表，在链表中插入新的键值对</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fh </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        binCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f;; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">binCount) {</span></span>
<span class="line"><span style="color:#24292E;">                            K ek;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.hash </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                                ((ek </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.key) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                                 (ek </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ek)))) {</span></span>
<span class="line"><span style="color:#24292E;">                                oldVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.val;</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#24292E;">                                    e.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                            }</span></span>
<span class="line"><span style="color:#24292E;">                            Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.next) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                                pred.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(hash, key,</span></span>
<span class="line"><span style="color:#24292E;">                                                          value, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                            }</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">// 6.当前为红黑树，将新的键值对插入到红黑树中</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TreeBin) {</span></span>
<span class="line"><span style="color:#24292E;">                        Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p;</span></span>
<span class="line"><span style="color:#24292E;">                        binCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((TreeBin</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">)f).</span><span style="color:#6F42C1;">putTreeVal</span><span style="color:#24292E;">(hash, key,</span></span>
<span class="line"><span style="color:#24292E;">                                                       value)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                            oldVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.val;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#24292E;">                                p.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// 7.插入完键值对后再根据实际大小看是否需要转换成红黑树</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (binCount </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (binCount </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> TREEIFY_THRESHOLD)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">treeifyBin</span><span style="color:#24292E;">(tab, i);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldVal </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldVal;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//8.对当前容量大小进行检查，如果超过了临界值（实际大小*加载因子）就需要扩容 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addCount</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">, binCount);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>put方法的代码量有点长，我们按照上面的分解的步骤一步步来看。</p><p><strong>从整体而言，为了解决线程安全的问题，ConcurrentHashMap使用了synchronzied和CAS的方式</strong>。</p><p>在之前了解过HashMap以及1.8版本之前的ConcurrenHashMap都应该知道ConcurrentHashMap结构图，为了方面下面的讲解这里先直接给出，如果对这有疑问的话，可以在网上随便搜搜即可。</p><img src="`+p+`"><p>如图（图片摘自网络），ConcurrentHashMap是一个哈希桶数组，如果不出现哈希冲突的时候，每个元素均匀的分布在哈希桶数组中。当出现哈希冲突的时候，是<strong>标准的链地址的解决方式</strong>，将hash值相同的节点构成链表的形式，称为“拉链法”，另外，在1.8版本中为了防止拉链过长，当链表的长度大于8的时候会将链表转换成红黑树。</p><p>table数组中的每个元素实际上是单链表的头结点或者红黑树的根节点。当插入键值对时首先应该定位到要插入的桶，即插入table数组的索引i处。那么，怎样计算得出索引i呢？当然是根据key的hashCode值。</p><h4 id="_1-spread-重哈希-以减小hash冲突" tabindex="-1">1. spread()重哈希，以减小Hash冲突 <a class="header-anchor" href="#_1-spread-重哈希-以减小hash冲突" aria-label="Permalink to &quot;1. spread()重哈希，以减小Hash冲突&quot;">​</a></h4><p>我们知道对于一个hash表来说，hash值分散的不够均匀的话会大大增加哈希冲突的概率，从而影响到hash表的性能。因此通过spread方法进行了一次重hash从而大大减小哈希冲突的可能性。spread方法为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">spread</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> h) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (h </span><span style="color:#F286C4;">^</span><span style="color:#F6F6F4;"> (h </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">)) </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> HASH_BITS;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spread</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> h) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (h </span><span style="color:#D73A49;">^</span><span style="color:#24292E;"> (h </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> HASH_BITS;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法主要是<strong>将key的hashCode的低16位于高16位进行异或运算</strong>，这样不仅能够使得hash值能够分散能够均匀减小hash冲突的概率，另外只用到了异或运算，在性能开销上也能兼顾，做到平衡的trade-off。</p><h4 id="_2-初始化table" tabindex="-1">2. 初始化table <a class="header-anchor" href="#_2-初始化table" aria-label="Permalink to &quot;2. 初始化table&quot;">​</a></h4><p>紧接着到第2步，会判断当前table数组是否初始化了，没有的话就调用initTable进行初始化，该方法在上面已经讲过了。</p><h4 id="_3-能否直接将新值插入到table数组中" tabindex="-1">3. 能否直接将新值插入到table数组中 <a class="header-anchor" href="#_3-能否直接将新值插入到table数组中" aria-label="Permalink to &quot;3. 能否直接将新值插入到table数组中&quot;">​</a></h4><p>从上面的结构示意图就可以看出存在这样一种情况，如果插入值待插入的位置刚好所在的table数组为null的话就可以直接将值插入即可。那么怎样根据hash确定在table中待插入的索引i呢？很显然可以通过hash值与数组的长度取模操作，从而确定新值插入到数组的哪个位置。而之前我们提过ConcurrentHashMap的大小总是2的幂次方，(n - 1) &amp; hash运算等价于对长度n取模，也就是hash%n，但是位运算比取模运算的效率要高很多，Doug lea大师在设计并发容器的时候也是将性能优化到了极致，令人钦佩。</p><p>确定好数组的索引i后，就可以可以tabAt()方法（该方法在上面已经说明了，有疑问可以回过头去看看）获取该位置上的元素，如果当前Node f为null的话，就可以直接用casTabAt方法将新值插入即可。</p><h4 id="_4-当前是否正在扩容" tabindex="-1">4.当前是否正在扩容 <a class="header-anchor" href="#_4-当前是否正在扩容" aria-label="Permalink to &quot;4.当前是否正在扩容&quot;">​</a></h4><p>如果当前节点不为null，且该节点为特殊节点（forwardingNode）的话，就说明当前concurrentHashMap正在进行扩容操作，关于扩容操作，下面会作为一个具体的方法进行讲解。</p><p>那么怎样确定当前的这个Node是不是特殊的节点了？是通过判断该节点的hash值是不是等于-1（MOVED）,代码为<code>(fh = f.hash) == MOVED</code>，对MOVED的解释在源码上也写的很清楚了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> MOVED     </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// hash for forwarding nodes</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> MOVED     </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// hash for forwarding nodes</span></span></code></pre></div><h4 id="_5-当table-i-为链表的头结点-在链表中插入新值" tabindex="-1">5. 当table[i]为链表的头结点，在链表中插入新值 <a class="header-anchor" href="#_5-当table-i-为链表的头结点-在链表中插入新值" aria-label="Permalink to &quot;5. 当table[i]为链表的头结点，在链表中插入新值&quot;">​</a></h4><p>在table[i]不为null并且不为forwardingNode时，并且当前Node f的hash值大于<code>0（fh &gt;= 0）</code>的话说明当前节点f为当前桶的所有的节点组成的链表的头结点。那么接下来，要想向ConcurrentHashMap插入新值的话就是向这个链表插入新值。通过synchronized (f)的方式进行加锁以实现线程安全性。往链表中插入节点的部分代码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fh </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    binCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f;; </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">binCount) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> ek;</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 找到hash值相同的key,覆盖旧值即可</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e.hash </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> hash </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">            ((ek </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.key) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">             (ek </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> key.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(ek)))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            oldVal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#F6F6F4;">                e.val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; pred </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.next) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//如果到链表末尾仍未找到，则直接将新值插入到链表末尾即可</span></span>
<span class="line"><span style="color:#F6F6F4;">            pred.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;(hash, key,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                      value, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fh </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    binCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f;; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">binCount) {</span></span>
<span class="line"><span style="color:#24292E;">        K ek;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 找到hash值相同的key,覆盖旧值即可</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.hash </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> hash </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            ((ek </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.key) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">             (ek </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ek)))) {</span></span>
<span class="line"><span style="color:#24292E;">            oldVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.val;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#24292E;">                e.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; pred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.next) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//如果到链表末尾仍未找到，则直接将新值插入到链表末尾即可</span></span>
<span class="line"><span style="color:#24292E;">            pred.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(hash, key,</span></span>
<span class="line"><span style="color:#24292E;">                                      value, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这部分代码很好理解，就是两种情况：1. 在链表中如果找到了与待插入的键值对的key相同的节点，就直接覆盖即可；2. 如果直到找到了链表的末尾都没有找到的话，就直接将待插入的键值对追加到链表的末尾即可</p><h4 id="_6-当table-i-为红黑树的根节点-在红黑树中插入新值" tabindex="-1">6.当table[i]为红黑树的根节点，在红黑树中插入新值 <a class="header-anchor" href="#_6-当table-i-为红黑树的根节点-在红黑树中插入新值" aria-label="Permalink to &quot;6.当table[i]为红黑树的根节点，在红黑树中插入新值&quot;">​</a></h4><p>按照之前的数组+链表的设计方案，这里存在一个问题，即使负载因子和Hash算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，甚至在极端情况下，查找一个节点会出现时间复杂度为O(n)的情况，则会严重影响ConcurrentHashMap的性能，于是，在JDK1.8版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高ConcurrentHashMap的性能，其中会用到红黑树的插入、删除、查找等算法。当table[i]为红黑树的树节点时的操作为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (f </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> TreeBin) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; p;</span></span>
<span class="line"><span style="color:#F6F6F4;">    binCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ((</span><span style="color:#97E1F1;font-style:italic;">TreeBin</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">)f).</span><span style="color:#62E884;">putTreeVal</span><span style="color:#F6F6F4;">(hash, key,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                   value)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        oldVal </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#F6F6F4;">            p.val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TreeBin) {</span></span>
<span class="line"><span style="color:#24292E;">    Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p;</span></span>
<span class="line"><span style="color:#24292E;">    binCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ((TreeBin</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">)f).</span><span style="color:#6F42C1;">putTreeVal</span><span style="color:#24292E;">(hash, key,</span></span>
<span class="line"><span style="color:#24292E;">                                   value)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        oldVal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.val;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">onlyIfAbsent)</span></span>
<span class="line"><span style="color:#24292E;">            p.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先在if中通过<code>f instanceof TreeBin</code>判断当前table[i]是否是树节点，这下也正好验证了我们在最上面介绍时说的TreeBin会对TreeNode做进一步封装，对红黑树进行操作的时候针对的是TreeBin而不是TreeNode。这段代码很简单，调用putTreeVal方法完成向红黑树插入新节点，同样的逻辑，<strong>如果在红黑树中存在于待插入键值对的Key相同（hash值相等并且equals方法判断为true）的节点的话，就覆盖旧值，否则就向红黑树追加新节点</strong>。</p><h4 id="_7-根据当前节点个数进行调整" tabindex="-1">7. 根据当前节点个数进行调整 <a class="header-anchor" href="#_7-根据当前节点个数进行调整" aria-label="Permalink to &quot;7. 根据当前节点个数进行调整&quot;">​</a></h4><p>当完成数据新节点插入之后，会进一步对当前链表大小进行调整，这部分代码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (binCount </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (binCount </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> TREEIFY_THRESHOLD)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">treeifyBin</span><span style="color:#F6F6F4;">(tab, i);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (oldVal </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldVal;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (binCount </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (binCount </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> TREEIFY_THRESHOLD)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">treeifyBin</span><span style="color:#24292E;">(tab, i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (oldVal </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldVal;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>很容易理解，如果当前链表节点个数大于等于8（TREEIFY_THRESHOLD）的时候，就会调用treeifyBin方法将tabel[i]（第i个散列桶）拉链转换成红黑树。</p><p>至此，关于Put方法的逻辑就基本说的差不多了，现在来做一些总结：</p><p>整体流程：</p><ol><li>首先对于每一个放入的值，首先利用spread方法对key的hashcode进行一次hash计算，由此来确定这个值在 table中的位置；</li><li>如果当前table数组还未初始化，先将table数组进行初始化操作；</li><li>如果这个位置是null的，那么使用CAS操作直接放入；</li><li>如果这个位置存在结点，说明发生了hash碰撞，首先判断这个节点的类型。如果该节点fh==MOVED(代表forwardingNode,数组正在进行扩容)的话，说明正在进行扩容；</li><li>如果是链表节点（fh&gt;0）,则得到的结点就是hash值相同的节点组成的链表的头节点。需要依次向后遍历确定这个新加入的值所在位置。如果遇到key相同的节点，则只需要覆盖该结点的value值即可。否则依次向后遍历，直到链表尾插入这个结点；</li><li>如果这个节点的类型是TreeBin的话，直接调用红黑树的插入方法进行插入新的节点；</li><li>插入完节点之后再次检查链表长度，如果长度大于8，就把这个链表转换成红黑树；</li><li>对当前容量大小进行检查，如果超过了临界值（实际大小*加载因子）就需要扩容。</li></ol><h3 id="get方法" tabindex="-1">get方法 <a class="header-anchor" href="#get方法" aria-label="Permalink to &quot;get方法&quot;">​</a></h3><p>看完了put方法再来看get方法就很容易了，用逆向思维去看就好，这样存的话我反过来这么取就好了。get方法源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> key) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] tab; </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; e, p; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n, eh; </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> ek;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">// 1. 重hash</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> h </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">spread</span><span style="color:#F6F6F4;">(key.</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length) </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">        (e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tabAt</span><span style="color:#F6F6F4;">(tab, (n </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> h)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2. table[i]桶节点的key与查找的key相同，则直接返回</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((eh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.hash) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> h) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((ek </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.key) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (ek </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> key.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(ek)))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> e.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 3. 当前节点hash小于0说明为树节点，在红黑树中查找即可</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (eh </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(h, key)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> p.val </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.next) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4. 从链表中查找，查找到则返回该节点的value，否则就返回null即可</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e.hash </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> h </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                ((ek </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.key) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (ek </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> key.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(ek))))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> e.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> V </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(Object key) {</span></span>
<span class="line"><span style="color:#24292E;">    Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] tab; Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; e, p; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n, eh; K ek;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 1. 重hash</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">spread</span><span style="color:#24292E;">(key.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        (e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tabAt</span><span style="color:#24292E;">(tab, (n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> h)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2. table[i]桶节点的key与查找的key相同，则直接返回</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((eh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.hash) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> h) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((ek </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.key) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (ek </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ek)))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e.val;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 3. 当前节点hash小于0说明为树节点，在红黑树中查找即可</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (eh </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(h, key)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> p.val </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.next) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4. 从链表中查找，查找到则返回该节点的value，否则就返回null即可</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.hash </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                ((ek </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.key) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (ek </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> key.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(ek))))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e.val;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码的逻辑请看注释，首先先看当前的hash桶数组节点即table[i]是否为查找的节点，若是则直接返回；若不是，则继续再看当前是不是树节点？通过看节点的hash值是否为小于0，如果小于0则为树节点。如果是树节点在红黑树中查找节点；如果不是树节点，那就只剩下为链表的形式的一种可能性了，就向后遍历查找节点，若查找到则返回节点的value即可，若没有找到就返回null。</p><h3 id="transfer方法" tabindex="-1">transfer方法 <a class="header-anchor" href="#transfer方法" aria-label="Permalink to &quot;transfer方法&quot;">​</a></h3><p>当ConcurrentHashMap容量不足的时候，需要对table进行扩容。这个方法的基本思想跟HashMap是很像的，但是由于它是支持并发扩容的，所以要复杂的多。原因是它支持多线程进行扩容操作，而并没有加锁。我想这样做的目的不仅仅是为了满足concurrent的要求，而是希望利用并发处理去减少扩容带来的时间影响。transfer方法源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">transfer</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[] tab, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[] nextTab) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length, stride;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((stride </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (NCPU </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> NCPU </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> n) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> MIN_TRANSFER_STRIDE)</span></span>
<span class="line"><span style="color:#F6F6F4;">        stride </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> MIN_TRANSFER_STRIDE; </span><span style="color:#7B7F8B;">// subdivide range</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 新建Node数组，容量为之前的两倍</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (nextTab </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {            </span><span style="color:#7B7F8B;">// initiating</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">SuppressWarnings</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">unchecked</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] nt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">[])</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">,</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt;[n </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">            nextTab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ex</span><span style="color:#F6F6F4;">) {      </span><span style="color:#7B7F8B;">// try to cope with OOME</span></span>
<span class="line"><span style="color:#F6F6F4;">            sizeCtl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        nextTable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nextTab;</span></span>
<span class="line"><span style="color:#F6F6F4;">        transferIndex </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> n;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nextn </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nextTab.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//2. 新建forwardingNode引用，在之后会用到</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ForwardingNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; fwd </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ForwardingNode</span><span style="color:#F6F6F4;">&lt;K,V&gt;(nextTab);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> finishing </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// to ensure sweep before committing nextTab</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, bound </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; f; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> fh;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3. 确定遍历中的索引i</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (advance) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nextIndex, nextBound;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">i </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> bound </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> finishing)</span></span>
<span class="line"><span style="color:#F6F6F4;">                advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((nextIndex </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> transferIndex) </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (U.compareAndSwapInt</span></span>
<span class="line"><span style="color:#F6F6F4;">                     (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, TRANSFERINDEX, nextIndex,</span></span>
<span class="line"><span style="color:#F6F6F4;">                      nextBound </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (nextIndex </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> stride </span><span style="color:#F286C4;">?</span></span>
<span class="line"><span style="color:#F6F6F4;">                                   nextIndex </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> stride </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                bound </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nextBound;</span></span>
<span class="line"><span style="color:#F6F6F4;">                i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nextIndex </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4.将原数组中的元素复制到新数组中去</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4.5 for循环退出，扩容结束修改sizeCtl属性</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> nextn) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> sc;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (finishing) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                nextTable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                table </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nextTab;</span></span>
<span class="line"><span style="color:#F6F6F4;">                sizeCtl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (U.</span><span style="color:#62E884;">compareAndSwapInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, SIZECTL, sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sizeCtl, sc </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((sc </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">resizeStamp</span><span style="color:#F6F6F4;">(n) </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> RESIZE_STAMP_SHIFT)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                finishing </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> n; </span><span style="color:#7B7F8B;">// recheck before commit</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4.1 当前数组中第i个元素为null，用CAS设置成特殊节点forwardingNode(可以理解成占位符)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tabAt</span><span style="color:#F6F6F4;">(tab, i)) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">casTabAt</span><span style="color:#F6F6F4;">(tab, i, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, fwd);</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4.2 如果遍历到ForwardingNode节点  说明这个点已经被处理过了 直接跳过  这里是控制并发扩容的核心</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((fh </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.hash) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> MOVED)</span></span>
<span class="line"><span style="color:#F6F6F4;">            advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// already processed</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (f) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">tabAt</span><span style="color:#F6F6F4;">(tab, i) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> f) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; ln, hn;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fh </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">						</span><span style="color:#7B7F8B;">//4.3 处理当前节点为链表的头结点的情况，根据最高位为1还是为0(最高位指数组长度位)，将原链表拆分为两个链表，分别放到新数组的i位置和i+n位置。这里还通过巧妙的处理措施，使得原链表中的一部分能直接平移到新链表(即lastRun及其后面跟着的一串节点)，剩下部分才需要通过new方式克隆移动到新链表中（采用头插法）。</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> runBit </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fh </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> n;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; lastRun </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f.next; p </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.hash </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> n;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (b </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> runBit) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                                runBit </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                lastRun </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (runBit </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            ln </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lastRun;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            hn </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            hn </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lastRun;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            ln </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> f; p </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> lastRun; p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> ph </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.hash; </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> pk </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.key; </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> pv </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((ph </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> n) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                                ln </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;(ph, pk, pv, ln); </span><span style="color:#7B7F8B;">//可以看到是逆序插入新节点的（头插）</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">                                hn </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;(ph, pk, pv, hn);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;">//在nextTable的i位置上插入一个链表</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(nextTab, i, ln);</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;">//在nextTable的i+n的位置上插入另一个链表</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(nextTab, i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> n, hn);</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;">//在table的i位置上插入forwardNode节点  表示已经处理过该节点</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(tab, i, fwd);</span></span>
<span class="line"><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;">//设置advance为true 返回到上面的while循环中 就可以执行i--操作</span></span>
<span class="line"><span style="color:#F6F6F4;">                         advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">					</span><span style="color:#7B7F8B;">//4.4 处理当前节点是TreeBin时的情况，操作和上面的类似</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (f </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> TreeBin) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">TreeBin</span><span style="color:#F6F6F4;">&lt;K,V&gt; t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">TreeBin</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">)f;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; lo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, loTail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; hi </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, hiTail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> lc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, hc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> t.first; e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> h </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.hash;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt; p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TreeNode</span><span style="color:#F6F6F4;">&lt;K,V&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                (h, e.key, e.val, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((h </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> n) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((p.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> loTail) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    lo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    loTail.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                loTail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">lc;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            }</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((p.prev </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> hiTail) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    hi </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    hiTail.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                hiTail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">hc;</span></span>
<span class="line"><span style="color:#F6F6F4;">                            }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        }</span></span>
<span class="line"><span style="color:#F6F6F4;">                        ln </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (lc </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> UNTREEIFY_THRESHOLD) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">untreeify</span><span style="color:#F6F6F4;">(lo) </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            (hc </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TreeBin</span><span style="color:#F6F6F4;">&lt;K,V&gt;(lo) </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        hn </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (hc </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> UNTREEIFY_THRESHOLD) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">untreeify</span><span style="color:#F6F6F4;">(hi) </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            (lc </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TreeBin</span><span style="color:#F6F6F4;">&lt;K,V&gt;(hi) </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> t;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(nextTab, i, ln);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(nextTab, i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> n, hn);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#62E884;">setTabAt</span><span style="color:#F6F6F4;">(tab, i, fwd);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        advance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transfer</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] tab, Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[] nextTab) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length, stride;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((stride </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (NCPU </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> NCPU </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> n) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MIN_TRANSFER_STRIDE)</span></span>
<span class="line"><span style="color:#24292E;">        stride </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MIN_TRANSFER_STRIDE; </span><span style="color:#6A737D;">// subdivide range</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 新建Node数组，容量为之前的两倍</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (nextTab </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {            </span><span style="color:#6A737D;">// initiating</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] nt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[])</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[n </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">            nextTab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nt;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {      </span><span style="color:#6A737D;">// try to cope with OOME</span></span>
<span class="line"><span style="color:#24292E;">            sizeCtl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Integer.MAX_VALUE;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        nextTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextTab;</span></span>
<span class="line"><span style="color:#24292E;">        transferIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nextn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextTab.length;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//2. 新建forwardingNode引用，在之后会用到</span></span>
<span class="line"><span style="color:#24292E;">    ForwardingNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; fwd </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ForwardingNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(nextTab);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> finishing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// to ensure sweep before committing nextTab</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;;) {</span></span>
<span class="line"><span style="color:#24292E;">        Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; f; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> fh;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3. 确定遍历中的索引i</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (advance) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nextIndex, nextBound;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> bound </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> finishing)</span></span>
<span class="line"><span style="color:#24292E;">                advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((nextIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transferIndex) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (U.compareAndSwapInt</span></span>
<span class="line"><span style="color:#24292E;">                     (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, TRANSFERINDEX, nextIndex,</span></span>
<span class="line"><span style="color:#24292E;">                      nextBound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (nextIndex </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> stride </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">                                   nextIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> stride </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">))) {</span></span>
<span class="line"><span style="color:#24292E;">                bound </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextBound;</span></span>
<span class="line"><span style="color:#24292E;">                i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4.将原数组中的元素复制到新数组中去</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4.5 for循环退出，扩容结束修改sizeCtl属性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> nextn) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sc;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (finishing) {</span></span>
<span class="line"><span style="color:#24292E;">                nextTable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextTab;</span></span>
<span class="line"><span style="color:#24292E;">                sizeCtl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (U.</span><span style="color:#6F42C1;">compareAndSwapInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, SIZECTL, sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sizeCtl, sc </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((sc </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resizeStamp</span><span style="color:#24292E;">(n) </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> RESIZE_STAMP_SHIFT)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                finishing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n; </span><span style="color:#6A737D;">// recheck before commit</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4.1 当前数组中第i个元素为null，用CAS设置成特殊节点forwardingNode(可以理解成占位符)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tabAt</span><span style="color:#24292E;">(tab, i)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">casTabAt</span><span style="color:#24292E;">(tab, i, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, fwd);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4.2 如果遍历到ForwardingNode节点  说明这个点已经被处理过了 直接跳过  这里是控制并发扩容的核心</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((fh </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.hash) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> MOVED)</span></span>
<span class="line"><span style="color:#24292E;">            advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// already processed</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (f) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">tabAt</span><span style="color:#24292E;">(tab, i) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> f) {</span></span>
<span class="line"><span style="color:#24292E;">                    Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; ln, hn;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fh </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">						</span><span style="color:#6A737D;">//4.3 处理当前节点为链表的头结点的情况，根据最高位为1还是为0(最高位指数组长度位)，将原链表拆分为两个链表，分别放到新数组的i位置和i+n位置。这里还通过巧妙的处理措施，使得原链表中的一部分能直接平移到新链表(即lastRun及其后面跟着的一串节点)，剩下部分才需要通过new方式克隆移动到新链表中（采用头插法）。</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> runBit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fh </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">                        Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; lastRun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f.next; p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.hash </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> n;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> runBit) {</span></span>
<span class="line"><span style="color:#24292E;">                                runBit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">                                lastRun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                            }</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (runBit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                            ln </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastRun;</span></span>
<span class="line"><span style="color:#24292E;">                            hn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                            hn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastRun;</span></span>
<span class="line"><span style="color:#24292E;">                            ln </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> f; p </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> lastRun; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ph </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.hash; K pk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.key; V pv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.val;</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((ph </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> n) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                                ln </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(ph, pk, pv, ln); </span><span style="color:#6A737D;">//可以看到是逆序插入新节点的（头插）</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                                hn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(ph, pk, pv, hn);</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                       </span><span style="color:#6A737D;">//在nextTable的i位置上插入一个链表</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(nextTab, i, ln);</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6A737D;">//在nextTable的i+n的位置上插入另一个链表</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(nextTab, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n, hn);</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6A737D;">//在table的i位置上插入forwardNode节点  表示已经处理过该节点</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(tab, i, fwd);</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#6A737D;">//设置advance为true 返回到上面的while循环中 就可以执行i--操作</span></span>
<span class="line"><span style="color:#24292E;">                         advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#6A737D;">//4.4 处理当前节点是TreeBin时的情况，操作和上面的类似</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (f </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> TreeBin) {</span></span>
<span class="line"><span style="color:#24292E;">                        TreeBin&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (TreeBin</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">)f;</span></span>
<span class="line"><span style="color:#24292E;">                        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; lo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, loTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; hi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, hiTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> lc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, hc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t.first; e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.next) {</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.hash;</span></span>
<span class="line"><span style="color:#24292E;">                            TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeNode&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                                (h, e.key, e.val, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((h </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> n) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loTail) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                                    lo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                                    loTail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                                loTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">lc;</span></span>
<span class="line"><span style="color:#24292E;">                            }</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p.prev </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hiTail) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                                    hi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                                    hiTail.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                                hiTail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">hc;</span></span>
<span class="line"><span style="color:#24292E;">                            }</span></span>
<span class="line"><span style="color:#24292E;">                        }</span></span>
<span class="line"><span style="color:#24292E;">                        ln </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (lc </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> UNTREEIFY_THRESHOLD) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">untreeify</span><span style="color:#24292E;">(lo) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                            (hc </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeBin&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(lo) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">                        hn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (hc </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> UNTREEIFY_THRESHOLD) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">untreeify</span><span style="color:#24292E;">(hi) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                            (lc </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> TreeBin&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;(hi) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(nextTab, i, ln);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(nextTab, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n, hn);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">setTabAt</span><span style="color:#24292E;">(tab, i, fwd);</span></span>
<span class="line"><span style="color:#24292E;">                        advance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码逻辑请看注释,整个扩容操作分为<strong>两个部分</strong>：</p><p><strong>第一部分</strong>是构建一个nextTable,它的容量是原来的两倍，这个操作是单线程完成的。新建table数组的代码为:<code>Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n &lt;&lt; 1]</code>,在原容量大小的基础上右移一位。</p><p><strong>第二个部分</strong>就是将原来table中的元素复制到nextTable中，主要是遍历复制的过程。 根据运算得到当前遍历的数组的位置i，然后利用tabAt方法获得i位置的元素再进行判断：</p><ol><li>如果这个位置为空，就在原table中的i位置放入forwardNode节点，这个也是触发并发扩容的关键点；</li><li>如果这个位置是Node节点（fh&gt;=0），如果它是一个链表的头节点，就把这个链表分裂成两个链表，把它们分别放在nextTable的i和i+n的位置上</li><li>如果这个位置是TreeBin节点（fh&lt;0），也做一个反序处理，并且判断是否需要untreefi，把处理的结果分别放在nextTable的i和i+n的位置上</li><li>遍历过所有的节点以后就完成了复制工作，这时让nextTable作为新的table，并且更新sizeCtl为新容量的0.75倍 ，完成扩容。设置为新容量的0.75倍代码为 <code>sizeCtl = (n &lt;&lt; 1) - (n &gt;&gt;&gt; 1)</code>，仔细体会下是不是很巧妙，n&lt;&lt;1相当于n右移一位表示n的两倍即2n,n&gt;&gt;&gt;1左右一位相当于n除以2即0.5n,然后两者相减为2n-0.5n=1.5n,是不是刚好等于新容量的0.75倍即2n*0.75=1.5n。最后用一个示意图来进行总结（图片摘自网络）：</li></ol><img src="`+o+`"><h3 id="与size相关的一些方法" tabindex="-1">与size相关的一些方法 <a class="header-anchor" href="#与size相关的一些方法" aria-label="Permalink to &quot;与size相关的一些方法&quot;">​</a></h3><p>对于ConcurrentHashMap来说，这个table里到底装了多少东西其实是个不确定的数量，因为<strong>不可能在调用size()方法的时候像GC的“stop the world”一样让其他线程都停下来让你去统计，因此只能说这个数量是个估计值。对于这个估计值</strong>，ConcurrentHashMap也是大费周章才计算出来的。</p><p>为了统计元素个数，ConcurrentHashMap定义了一些变量和一个内部类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * A padded cell for distributing counts.  Adapted from LongAdder</span></span>
<span class="line"><span style="color:#7B7F8B;"> * and Striped64.  See their internal docs for explanation.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">sun</span><span style="color:#F6F6F4;">.misc.Contended </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">CounterCell</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">CounterCell</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) { value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x; }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/******************************************/</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 实际上保存的是hashmap中的元素个数  利用CAS锁进行更新</span></span>
<span class="line"><span style="color:#7B7F8B;"> 但它并不用返回当前hashmap的元素个数 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> baseCount;</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> cellsBusy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Table of counter cells. When non-null, size is a power of 2.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CounterCell</span><span style="color:#F6F6F4;">[] counterCells;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * A padded cell for distributing counts.  Adapted from LongAdder</span></span>
<span class="line"><span style="color:#6A737D;"> * and Striped64.  See their internal docs for explanation.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">sun</span><span style="color:#24292E;">.misc.Contended </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CounterCell</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">CounterCell</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/******************************************/</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 实际上保存的是hashmap中的元素个数  利用CAS锁进行更新</span></span>
<span class="line"><span style="color:#6A737D;"> 但它并不用返回当前hashmap的元素个数 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> baseCount;</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cellsBusy;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Table of counter cells. When non-null, size is a power of 2.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">CounterCell</span><span style="color:#24292E;">[] counterCells;</span></span></code></pre></div><h4 id="mappingcount与size方法" tabindex="-1"><strong>mappingCount与size方法</strong> <a class="header-anchor" href="#mappingcount与size方法" aria-label="Permalink to &quot;**mappingCount与size方法**&quot;">​</a></h4><p><strong>mappingCount</strong>与<strong>size</strong>方法的类似 从给出的注释来看，应该使用mappingCount代替size方法 两个方法都没有直接返回basecount 而是统计一次这个值，而这个值其实也是一个大概的数值，因此可能在统计的时候有其他线程正在执行插入或删除操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sumCount</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ((n </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">            (n </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;">)Integer.MAX_VALUE) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> Integer.MAX_VALUE </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">            (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">)n);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;"> /**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Returns the number of mappings. This method should be used</span></span>
<span class="line"><span style="color:#7B7F8B;"> * instead of {@link #size} because a ConcurrentHashMap may</span></span>
<span class="line"><span style="color:#7B7F8B;"> * contain more mappings than can be represented as an int. The</span></span>
<span class="line"><span style="color:#7B7F8B;"> * value returned is an estimate; the actual count may differ if</span></span>
<span class="line"><span style="color:#7B7F8B;"> * there are concurrent insertions or removals.</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> the number of mappings</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@since</span><span style="color:#7B7F8B;"> 1.8</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mappingCount</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sumCount</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> n; </span><span style="color:#7B7F8B;">// ignore transient negative values</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sumCount</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">CounterCell</span><span style="color:#F6F6F4;">[] as </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> counterCells; </span><span style="color:#97E1F1;font-style:italic;">CounterCell</span><span style="color:#F6F6F4;"> a;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> baseCount;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (as </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> as.length; </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">i) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> as[i]) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                sum </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> a.value;</span><span style="color:#7B7F8B;">//所有counter的值求和</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> sum;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sumCount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ((n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            (n </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)Integer.MAX_VALUE) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Integer.MAX_VALUE </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)n);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;"> /**</span></span>
<span class="line"><span style="color:#6A737D;"> * Returns the number of mappings. This method should be used</span></span>
<span class="line"><span style="color:#6A737D;"> * instead of {@link #size} because a ConcurrentHashMap may</span></span>
<span class="line"><span style="color:#6A737D;"> * contain more mappings than can be represented as an int. The</span></span>
<span class="line"><span style="color:#6A737D;"> * value returned is an estimate; the actual count may differ if</span></span>
<span class="line"><span style="color:#6A737D;"> * there are concurrent insertions or removals.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> the number of mappings</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@since</span><span style="color:#6A737D;"> 1.8</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mappingCount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sumCount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> n; </span><span style="color:#6A737D;">// ignore transient negative values</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sumCount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">CounterCell</span><span style="color:#24292E;">[] as </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> counterCells; CounterCell a;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baseCount;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (as </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> as.length; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> as[i]) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> a.value;</span><span style="color:#6A737D;">//所有counter的值求和</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sum;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="addcount方法" tabindex="-1"><strong>addCount方法</strong> <a class="header-anchor" href="#addcount方法" aria-label="Permalink to &quot;**addCount方法**&quot;">​</a></h4><p>在put方法结尾处调用了addCount方法，把当前ConcurrentHashMap的元素个数+1这个方法一共做了两件事,更新baseCount的值，检测是否进行扩容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addCount</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> x, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> check) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">CounterCell</span><span style="color:#F6F6F4;">[] as; </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> b, s;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//利用CAS方法更新baseCount的值 </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((as </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> counterCells) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">U.</span><span style="color:#62E884;">compareAndSwapLong</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, BASECOUNT, b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> baseCount, s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">CounterCell</span><span style="color:#F6F6F4;"> a; </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> v; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> m;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> uncontended </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (as </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> as.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">            (a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> as[ThreadLocalRandom.</span><span style="color:#62E884;">getProbe</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> m]) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">(uncontended </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">              U.</span><span style="color:#62E884;">compareAndSwapLong</span><span style="color:#F6F6F4;">(a, CELLVALUE, v </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.value, v </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> x))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">fullAddCount</span><span style="color:#F6F6F4;">(x, uncontended);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (check </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sumCount</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//如果check值大于等于0 则需要检验是否需要进行扩容操作</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (check </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] tab, nt; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n, sc;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (s </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;">)(sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sizeCtl) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">               (n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> MAXIMUM_CAPACITY) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">resizeStamp</span><span style="color:#F6F6F4;">(n);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (sc </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((sc </span><span style="color:#F286C4;">&gt;&gt;&gt;</span><span style="color:#F6F6F4;"> RESIZE_STAMP_SHIFT) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">                    sc </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> MAX_RESIZERS </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (nt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nextTable) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">                    transferIndex </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                 </span><span style="color:#7B7F8B;">//如果已经有其他线程在执行扩容操作</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (U.</span><span style="color:#62E884;">compareAndSwapInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, SIZECTL, sc, sc </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#62E884;">transfer</span><span style="color:#F6F6F4;">(tab, nt);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//当前线程是唯一的或是第一个发起扩容的线程  此时nextTable=null</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (U.</span><span style="color:#62E884;">compareAndSwapInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, SIZECTL, sc,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                         (rs </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> RESIZE_STAMP_SHIFT) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">transfer</span><span style="color:#F6F6F4;">(tab, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sumCount</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCount</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> x, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> check) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">CounterCell</span><span style="color:#24292E;">[] as; </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> b, s;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//利用CAS方法更新baseCount的值 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((as </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> counterCells) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">U.</span><span style="color:#6F42C1;">compareAndSwapLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, BASECOUNT, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> baseCount, s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x)) {</span></span>
<span class="line"><span style="color:#24292E;">        CounterCell a; </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> v; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> uncontended </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (as </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> as.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">            (a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> as[ThreadLocalRandom.</span><span style="color:#6F42C1;">getProbe</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> m]) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">(uncontended </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">              U.</span><span style="color:#6F42C1;">compareAndSwapLong</span><span style="color:#24292E;">(a, CELLVALUE, v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.value, v </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x))) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">fullAddCount</span><span style="color:#24292E;">(x, uncontended);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (check </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sumCount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//如果check值大于等于0 则需要检验是否需要进行扩容操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (check </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] tab, nt; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n, sc;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">long</span><span style="color:#24292E;">)(sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sizeCtl) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">               (n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> MAXIMUM_CAPACITY) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resizeStamp</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sc </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((sc </span><span style="color:#D73A49;">&gt;&gt;&gt;</span><span style="color:#24292E;"> RESIZE_STAMP_SHIFT) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> sc </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                    sc </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> MAX_RESIZERS </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (nt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nextTable) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                    transferIndex </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#6A737D;">//如果已经有其他线程在执行扩容操作</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (U.</span><span style="color:#6F42C1;">compareAndSwapInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, SIZECTL, sc, sc </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">transfer</span><span style="color:#24292E;">(tab, nt);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//当前线程是唯一的或是第一个发起扩容的线程  此时nextTable=null</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (U.</span><span style="color:#6F42C1;">compareAndSwapInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, SIZECTL, sc,</span></span>
<span class="line"><span style="color:#24292E;">                                         (rs </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> RESIZE_STAMP_SHIFT) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">transfer</span><span style="color:#24292E;">(tab, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sumCount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>JDK6,7中的ConcurrentHashmap主要使用Segment来实现减小锁粒度，分割成若干个Segment，在put的时候需要锁住Segment，get时候不加锁，使用volatile来保证可见性，当要统计全局时（比如size），首先会尝试多次计算modcount来确定，这几次尝试中，是否有其他线程进行了修改操作，如果没有，则直接返回size。如果有，则需要依次锁住所有的Segment来计算。</p><p>1.8之前put定位节点时要先定位到具体的segment，然后再在segment中定位到具体的桶。而在1.8的时候摒弃了segment臃肿的设计，直接针对的是Node[] tale数组中的每一个桶，进一步减小了锁粒度。并且防止拉链过长导致性能下降，当链表长度大于8的时候采用红黑树的设计。</p><p>主要设计上的变化有以下几点:</p><ol><li>不采用segment而采用node，锁住node来实现减小锁粒度。</li><li>设计了MOVED状态 当resize的中过程中 线程2还在put数据，线程2会帮助resize。</li><li>使用3个CAS操作来确保node的一些操作的原子性，这种方式代替了锁。</li><li>sizeCtl的不同值来代表不同含义，起到了控制的作用。</li><li>采用synchronized而不是ReentrantLock</li></ol><p>更多关于1.7版本与1.8版本的ConcurrentHashMap的实现对比，可以参考<a href="http://www.jianshu.com/p/e694f1e868ec" target="_blank" rel="noreferrer">这篇文章</a>。</p><hr><blockquote><p>内容大部分来源以下三个开源仓库：</p><ul><li><a href="http://concurrent.redspider.group/" target="_blank" rel="noreferrer">深入浅出 Java 多线程</a></li><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a></li><li><a href="https://github.com/CoderLeixiaoshuai/java-eight-part" target="_blank" rel="noreferrer">Java八股文</a></li></ul></blockquote><hr>`,135),c=[t];function r(y,F,i,E,C,A){return n(),a("div",null,c)}const h=s(e,[["render",r]]);export{d as __pageData,h as default};
