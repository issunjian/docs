import{_ as s,o as a,c as n,V as p}from"./chunks/framework.c6d8cbec.js";const l="/docs/assets/git.62c94bc4.png",h=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/工具/git.md","filePath":"java/其它/工具/git.md"}'),o={name:"java/其它/工具/git.md"},e=p('<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><hr><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>Git 是用来对代码进行版本管理和多人协作的代码仓库。</p><blockquote><p>Git 不区分文件名大小写，这在重命名文件时（仅更新文件名大小写）可能会造成隐患。</p></blockquote><h3 id="存储区域" tabindex="-1">存储区域 <a class="header-anchor" href="#存储区域" aria-label="Permalink to &quot;存储区域&quot;">​</a></h3><p><img src="'+l+`" alt="git"></p><ul><li><p><strong>Workspace 工作区</strong></p><p>当前开发者正在进行编写的代码版本。</p></li><li><p><strong>Index 暂存区</strong></p><p>【目录树结构】记录要进行版本管理的文件名、文件状态信息以及指向文件的索引。</p><p>通过使用时间戳、文件长度等状态信息，可以快速判断工作区文件是否被修改。</p></li><li><p><strong>Repository 仓库区</strong></p><p>【日志结构】记录所有版本提交的历史更改，保存在 Git 对象库（.git/objects）中。</p><p>通过读取仓库区，可以将工作区代码回退到任意版本。</p></li><li><p><strong>Remote 远程仓库</strong></p><p>【日志结构】将本地仓库保存在远程服务器中，如 Github/Gitlab/Gitee 等知名第三方代码托管网站。</p><p>通过同步远程仓库，可以便捷地进行远程开发和多人协作。</p></li></ul><hr><h2 id="初始配置" tabindex="-1">初始配置 <a class="header-anchor" href="#初始配置" aria-label="Permalink to &quot;初始配置&quot;">​</a></h2><h3 id="安装本地仓库" tabindex="-1">安装本地仓库 <a class="header-anchor" href="#安装本地仓库" aria-label="Permalink to &quot;安装本地仓库&quot;">​</a></h3><p>点击下方链接下载 Git ，即可通过 Git Bash 工具使用 Git 命令。</p><blockquote><p>下载地址：<a href="https://git-scm.com/" target="_blank" rel="noreferrer">https://git-scm.com/</a></p></blockquote><p><em>如果想要直接在控制台使用 git 命令，还需要配置环境变量：在 Path 中添加 Git/cmd 文件夹路径。</em></p><h3 id="链接远程仓库" tabindex="-1">链接远程仓库 <a class="header-anchor" href="#链接远程仓库" aria-label="Permalink to &quot;链接远程仓库&quot;">​</a></h3><p>如果想通过远程仓库托管代码，还需要将本地 Git 链接到第三方的远程仓库中，如 Github/Gitlab/Gitee 等知名第三方代码托管网站。</p><blockquote><p>Github 官方网址：<a href="https://github.com/" target="_blank" rel="noreferrer">https://github.com/</a></p></blockquote><p>本地 Git 尝试对远程仓库修改时必须持有密钥，否则远程仓库将拒绝访问。</p><p>通过 Git Bash 命令生成本地密钥，然后添加到 Github 账号 SSH and GPG keys 选项中即可。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">ssh-keygen</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-t</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">rsa</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-b</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4096</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-C</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">email@example.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;"># 生成密钥</span></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">clip</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">~/.ssh/id_rsa.pub</span><span style="color:#F6F6F4;">                                </span><span style="color:#7B7F8B;"># 将密钥复制到剪切板</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ssh-keygen</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rsa</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-b</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4096</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-C</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;email@example.com&quot;</span><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 生成密钥</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clip</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.ssh/id_rsa.pub</span><span style="color:#24292E;">                                </span><span style="color:#6A737D;"># 将密钥复制到剪切板</span></span></code></pre></div><hr><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><h3 id="本地创建" tabindex="-1">本地创建 <a class="header-anchor" href="#本地创建" aria-label="Permalink to &quot;本地创建&quot;">​</a></h3><p>如果要使用 Git 管理目录内的文件，需要将目录创建为 Git 代码仓库。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">init</span><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;"># 在现有目录创建 git </span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">init</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">myProject</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 创建子目录并为子目录创建 git</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;">                             </span><span style="color:#6A737D;"># 在现有目录创建 git </span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">myProject</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 创建子目录并为子目录创建 git</span></span></code></pre></div><p>为已创建的本地仓库链接远程仓库，每个远程仓库链接都有独立的标识。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">remote</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">add</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">git@github.com:account/project.git</span><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;"># 绑定远程仓库，命名为 origin</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">remote</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">rm</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin</span><span style="color:#F6F6F4;">                                          </span><span style="color:#7B7F8B;"># 移除远程仓库 origin</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">remote</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-v</span><span style="color:#F6F6F4;">                                                 </span><span style="color:#7B7F8B;"># 查看绑定的远程仓库</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git@github.com:account/project.git</span><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 绑定远程仓库，命名为 origin</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remote</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;">                                          </span><span style="color:#6A737D;"># 移除远程仓库 origin</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">remote</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;">                                                 </span><span style="color:#6A737D;"># 查看绑定的远程仓库</span></span></code></pre></div><h3 id="远程克隆" tabindex="-1">远程克隆 <a class="header-anchor" href="#远程克隆" aria-label="Permalink to &quot;远程克隆&quot;">​</a></h3><p>远程仓库中的项目拥有唯一的标识 SSH: 如 <code>git@github.com:account/project.git</code> 。用户可以直接拷贝到本地。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">clone</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">git@github.com:account/project.git</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;"># 拷贝项目到本地，并自动链接远程仓库</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">git@github.com:account/project.git</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 拷贝项目到本地，并自动链接远程仓库</span></span></code></pre></div><hr><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><h3 id="暂存文件-add" tabindex="-1">暂存文件 add <a class="header-anchor" href="#暂存文件-add" aria-label="Permalink to &quot;暂存文件 add&quot;">​</a></h3><p>需要进行版本管理的代码文件应首先放入暂存区。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">add</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">README.md</span><span style="color:#F6F6F4;">                          </span><span style="color:#7B7F8B;"># 将指定文件放入暂存区</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">add</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">.</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 将全部文件放入暂存区</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">diff</span><span style="color:#F6F6F4;">                                   </span><span style="color:#7B7F8B;"># 查看工作区更新（相对于暂存区）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">diff</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 查看工作区更新（相对于 master 分支）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">status</span><span style="color:#F6F6F4;">                                 </span><span style="color:#7B7F8B;"># 查看文件是否被暂存或提交</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">checkout</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">.</span><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;"># 放弃工作区修改（但不会删除新建文件）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">reset</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">HEAD</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">.</span><span style="color:#F6F6F4;">                           </span><span style="color:#7B7F8B;"># 放弃暂存区修改（但不会改变工作区）</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README.md</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 将指定文件放入暂存区</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;"> </span><span style="color:#24292E;"> </span><span style="color:#032F62;"> </span><span style="color:#24292E;"> </span><span style="color:#032F62;"> </span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 将全部文件放入暂存区</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;">                                   </span><span style="color:#6A737D;"># 查看工作区更新（相对于暂存区）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 查看工作区更新（相对于 master 分支）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span><span style="color:#24292E;">                                 </span><span style="color:#6A737D;"># 查看文件是否被暂存或提交</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                             </span><span style="color:#6A737D;"># 放弃工作区修改（但不会删除新建文件）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">HEAD</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                           </span><span style="color:#6A737D;"># 放弃暂存区修改（但不会改变工作区）</span></span></code></pre></div><p>在执行 add 操作时，开发者往往想要忽略一些特定的文件或目录。</p><p>我们可以通过在项目根目录下创建 <code>.gitignore</code> 文件记录忽略项的方式来实现，Git 在执行 add 操作时会自动跳过这些文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># .gitignore 文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">.a                         # 忽略所有 .a 结尾的文件</span></span>
<span class="line"><span style="color:#F286C4;">!</span><span style="color:#62E884;">lib.a   </span><span style="color:#F6F6F4;">                  </span><span style="color:#E7EE98;"> #</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">但</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lib.a</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">除外</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">/TODO    </span><span style="color:#F6F6F4;">        </span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;"># 忽略项目根目录下的 TODO 文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">node_modules</span><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;"># 忽略指定文件夹</span></span>
<span class="line"><span style="color:#62E884;">.project</span></span>
<span class="line"><span style="color:#62E884;">.vscode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">build/   </span><span style="color:#F6F6F4;">                  </span><span style="color:#E7EE98;"> #</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">忽略</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">build/</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">目录下的所有文件</span></span>
<span class="line"><span style="color:#62E884;">doc/*.txt </span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;"># 忽略 doc/ 目录下的 txt 文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># .gitignore 文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">.a                         # 忽略所有 .a 结尾的文件</span></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">lib.a   </span><span style="color:#24292E;">                  </span><span style="color:#032F62;"> #</span><span style="color:#24292E;"> </span><span style="color:#032F62;">但</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lib.a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">除外</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">/TODO    </span><span style="color:#24292E;">        </span><span style="color:#032F62;"> </span><span style="color:#24292E;">          </span><span style="color:#6A737D;"># 忽略项目根目录下的 TODO 文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">node_modules</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 忽略指定文件夹</span></span>
<span class="line"><span style="color:#6F42C1;">.project</span></span>
<span class="line"><span style="color:#6F42C1;">.vscode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">build/   </span><span style="color:#24292E;">                  </span><span style="color:#032F62;"> #</span><span style="color:#24292E;"> </span><span style="color:#032F62;">忽略</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build/</span><span style="color:#24292E;"> </span><span style="color:#032F62;">目录下的所有文件</span></span>
<span class="line"><span style="color:#6F42C1;">doc/*.txt </span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 忽略 doc/ 目录下的 txt 文件</span></span></code></pre></div><p>尽管已更新了 <code>.gitignore</code> 文件，但暂存区仍可能保有历史文件的缓存数据。已提交过的文件如果想取消版本管理，要首先清除缓存。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">rm</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-r</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--cached</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">.idea</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 从暂存区删除文件夹</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">rm</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-r</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--cached</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">.</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 从暂存区删除全部文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cached</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.idea</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 从暂存区删除文件夹</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--cached</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 从暂存区删除全部文件</span></span></code></pre></div><h3 id="提交版本-commit" tabindex="-1">提交版本 commit <a class="header-anchor" href="#提交版本-commit" aria-label="Permalink to &quot;提交版本 commit&quot;">​</a></h3><p>通过执行 commit 操作，将暂存区中托管的文件数据存储到本地仓库保存。</p><p>commit 操作执行完毕后，暂存区数据会被清空。每次 commit 操作前都应执行 add 操作。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">commit</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-m </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Your commit</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;"># 提交文件，放入 git 仓库保存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">diff</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--staged</span><span style="color:#F6F6F4;">                          </span><span style="color:#7B7F8B;"># 查看当前分支暂存区更新（相对于提交版本）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">status</span><span style="color:#F6F6F4;">                                 </span><span style="color:#7B7F8B;"># 查看文件是否被暂存或提交</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m </span><span style="color:#032F62;">&quot;Your commit&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;"> </span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 提交文件，放入 git 仓库保存</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">diff</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--staged</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 查看当前分支暂存区更新（相对于提交版本）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span><span style="color:#24292E;">                                 </span><span style="color:#6A737D;"># 查看文件是否被暂存或提交</span></span></code></pre></div><p>执行 commit 操作后（版本号 A）并尝试 push 到远程仓库，如果远程仓库已经被更新就会遭到拒绝。此时必须通过 pull 获取更新到本地然后合并（版本号 B）才能 push 代码，但是会提交两个版本更新。</p><p>此时可以改用 stash 操作对本地更改进行缓存，但不会产生新的提交对象（无论是否 add 默认情况下都会被缓存）。再执行 pull 操作时会直接读取远程仓库的版本，然后通过 stash pop 操作读取缓存并合并（版本号 B）。之后再进行 commit 和 push 操作，就只会提交一个版本更新。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;">                                  </span><span style="color:#7B7F8B;"># 将更改放入堆栈缓存</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">save</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">save message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;"># 将更改放入堆栈缓存并命名</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">apply</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 应用堆栈缓存中的更改但不清除</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">pop</span><span style="color:#F6F6F4;">                              </span><span style="color:#7B7F8B;"># 读取堆栈缓存中的更改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;"># 查看堆栈缓存</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">show</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">save message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;"># 查看指定堆栈缓存</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">stash</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">clear</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 清空堆栈缓存</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;">                                  </span><span style="color:#6A737D;"># 将更改放入堆栈缓存</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">save</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;save message&quot;</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 将更改放入堆栈缓存并命名</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 应用堆栈缓存中的更改但不清除</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pop</span><span style="color:#24292E;">                              </span><span style="color:#6A737D;"># 读取堆栈缓存中的更改</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">                             </span><span style="color:#6A737D;"># 查看堆栈缓存</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">show</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;save message&quot;</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 查看指定堆栈缓存</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clear</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 清空堆栈缓存</span></span></code></pre></div><h3 id="管理分支-branch" tabindex="-1">管理分支 branch <a class="header-anchor" href="#管理分支-branch" aria-label="Permalink to &quot;管理分支 branch&quot;">​</a></h3><p>在创建仓库的时候，会默认创建主分支 master。HEAD 则始终指向当前分支。</p><p>在开发功能、修复 BUG 时，我们通常都会创建分支来进行操作，直到完成开发后再合并到主分支上。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">branch</span><span style="color:#F6F6F4;">                                 </span><span style="color:#7B7F8B;"># 列出本地分支（HEAD 指向当前分支）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">branch</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-r</span><span style="color:#F6F6F4;">                              </span><span style="color:#7B7F8B;"># 列出远程分支 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">branch</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 创建 test 分支（但不切换）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">checkout</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span><span style="color:#F6F6F4;">                          </span><span style="color:#7B7F8B;"># 切换到 test 分支</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">checkout</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-b</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 创建并切换到 test 分支</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 当前分支未被修改时，merge 和 rebase 无区别</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">merge</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;"># test 分支合并到当前分支（将两个分支合并，新建一个 commit）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">merge</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin/master</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># origin/master 合并到当前分支   </span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">rebase</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master</span><span style="color:#F6F6F4;">                          </span><span style="color:#7B7F8B;"># master 分支合并到当前分支（当前分支重新执行另一个分支的全部 commit）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">branch</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-D</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test</span><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;"># 删除分支</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;">                                 </span><span style="color:#6A737D;"># 列出本地分支（HEAD 指向当前分支）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-r</span><span style="color:#24292E;">                              </span><span style="color:#6A737D;"># 列出远程分支 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 创建 test 分支（但不切换）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 切换到 test 分支</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-b</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 创建并切换到 test 分支</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 当前分支未被修改时，merge 和 rebase 无区别</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;">                             </span><span style="color:#6A737D;"># test 分支合并到当前分支（将两个分支合并，新建一个 commit）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin/master</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># origin/master 合并到当前分支   </span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># master 分支合并到当前分支（当前分支重新执行另一个分支的全部 commit）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">branch</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># 删除分支</span></span></code></pre></div><p>当合并分支或者导入远程仓库分支时，常常会出现同一个文件被多个分支修改的情况。这个时候工作区文件会同时记录多个版本的代码，需要开发者通过编辑器解决冲突。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">status</span><span style="color:#F6F6F4;">                                                        </span><span style="color:#7B7F8B;"># 查看工作区和缓存区差异</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">log</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-p</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master..origin/master</span><span style="color:#F6F6F4;">                                  </span><span style="color:#7B7F8B;"># 查看两分支提交版本之间差异</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">log</span><span style="color:#F6F6F4;">                                                           </span><span style="color:#7B7F8B;"># 查看提交历史（会显示 commit ID）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">log</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">README.txt</span><span style="color:#F6F6F4;">                                                </span><span style="color:#7B7F8B;"># 查看指定文件提交历史（会显示 commit ID）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">reset</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--hard</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">f687a6de307a598d375bc1b6433dfe667c551f87</span><span style="color:#F6F6F4;">         </span><span style="color:#7B7F8B;"># 版本回退（根据 commit ID）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">reset</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">f687a6de307a598d375bc1b6433dfe667c551f87</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">README.txt</span><span style="color:#F6F6F4;">     </span><span style="color:#7B7F8B;"># 对指定文件版本回退（根据 commit ID）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span><span style="color:#24292E;">                                                        </span><span style="color:#6A737D;"># 查看工作区和缓存区差异</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master..origin/master</span><span style="color:#24292E;">                                  </span><span style="color:#6A737D;"># 查看两分支提交版本之间差异</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;">                                                           </span><span style="color:#6A737D;"># 查看提交历史（会显示 commit ID）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README.txt</span><span style="color:#24292E;">                                                </span><span style="color:#6A737D;"># 查看指定文件提交历史（会显示 commit ID）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hard</span><span style="color:#24292E;"> </span><span style="color:#032F62;">f687a6de307a598d375bc1b6433dfe667c551f87</span><span style="color:#24292E;">         </span><span style="color:#6A737D;"># 版本回退（根据 commit ID）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">f687a6de307a598d375bc1b6433dfe667c551f87</span><span style="color:#24292E;"> </span><span style="color:#032F62;">README.txt</span><span style="color:#24292E;">     </span><span style="color:#6A737D;"># 对指定文件版本回退（根据 commit ID）</span></span></code></pre></div><h3 id="远程同步-push-pull" tabindex="-1">远程同步 push / pull <a class="header-anchor" href="#远程同步-push-pull" aria-label="Permalink to &quot;远程同步 push / pull&quot;">​</a></h3><p>本地仓库和远程仓库链接后，且本地 Git 绑定的 GitHub 账户具备对远程仓库的操作权限，用户就可以通过以下指令同步远程代码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">push</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-u</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;">                                   </span><span style="color:#7B7F8B;"># master 分支上传到远程仓库 origin（上传新分支会在远程仓库也创建新分支）</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">push</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-f</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master</span><span style="color:#F6F6F4;">                                     </span><span style="color:#7B7F8B;"># master 分支强制上传到远程仓库 origin（适用于版本回退后远程同步）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">pull</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master</span><span style="color:#F6F6F4;">                                        </span><span style="color:#7B7F8B;"># 从远端仓库 origin 获取代码并自动合并到主分支</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">status</span><span style="color:#F6F6F4;">                                                    </span><span style="color:#7B7F8B;"># 导入后工作区更新，查看和之前版本的差异</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">fetch</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master</span><span style="color:#F6F6F4;">                                       </span><span style="color:#7B7F8B;"># 从远端仓库 origin 获取 origin/master 分支</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">log</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-p</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">master..origin/master</span><span style="color:#F6F6F4;">                              </span><span style="color:#7B7F8B;"># 查看分支差异</span></span>
<span class="line"><span style="color:#62E884;">git</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">merge</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">origin/master</span><span style="color:#F6F6F4;">                                       </span><span style="color:#7B7F8B;"># 合并分支</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;"> </span><span style="color:#032F62;"> </span><span style="color:#24292E;">                                   </span><span style="color:#6A737D;"># master 分支上传到远程仓库 origin（上传新分支会在远程仓库也创建新分支）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;">                                     </span><span style="color:#6A737D;"># master 分支强制上传到远程仓库 origin（适用于版本回退后远程同步）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;">                                        </span><span style="color:#6A737D;"># 从远端仓库 origin 获取代码并自动合并到主分支</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span><span style="color:#24292E;">                                                    </span><span style="color:#6A737D;"># 导入后工作区更新，查看和之前版本的差异</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fetch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span><span style="color:#24292E;">                                       </span><span style="color:#6A737D;"># 从远端仓库 origin 获取 origin/master 分支</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master..origin/master</span><span style="color:#24292E;">                              </span><span style="color:#6A737D;"># 查看分支差异</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin/master</span><span style="color:#24292E;">                                       </span><span style="color:#6A737D;"># 合并分支</span></span></code></pre></div><h3 id="合作开发-fork" tabindex="-1">合作开发 fork <a class="header-anchor" href="#合作开发-fork" aria-label="Permalink to &quot;合作开发 fork&quot;">​</a></h3><p>Github 等远程仓库支持多人对同一项目进行协同开发，主要有以下两种形式。</p><ul><li><p><strong>collaborators 模式</strong></p><p>适用于小组合作开发。</p><ol><li><p>仓库所有者进入仓库设置，在 Collaborators 选项添加合作者。</p></li><li><p>合作者有权限对直接对指定的远程仓库进行修改。</p></li></ol></li><li><p><strong>fork 模式</strong></p><p>适用于开源或大型项目。</p><ol><li><p>开发者选择 Fork 原仓库，复制得到自己持有的镜像仓库。</p></li><li><p>开发者对镜像仓库进行修改后，可以发送 Pull Request 询问原仓库拥有者是否想要该修改。</p></li><li><p>原仓库拥有者同意后，镜像仓库的修改会合并到原仓库中。</p></li></ol></li></ul><blockquote><p>协助开发者可以在本地仓库同时链接两个远程仓库：如 origin 自己持有的镜像仓库 &amp; upstream 原始仓库。本地仓库从 upstream 获取代码，更新后上传到 origin 并发送 Pull Request 请求。</p></blockquote>`,60),t=[e];function c(r,y,F,i,E,d){return a(),n("div",null,t)}const u=s(o,[["render",c]]);export{h as __pageData,u as default};
