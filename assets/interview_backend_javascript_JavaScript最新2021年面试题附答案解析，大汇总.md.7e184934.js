import{_ as a,o as s,c as e,V as o}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/javascript/JavaScript最新2021年面试题附答案解析，大汇总.md","filePath":"interview/backend/javascript/JavaScript最新2021年面试题附答案解析，大汇总.md"}'),r={name:"interview/backend/javascript/JavaScript最新2021年面试题附答案解析，大汇总.md"},t=o(`<h3 id="_1、javascript提供了哪几种-异步模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1javascript%E6%8F%90%E4%BE%9B%E4%BA%86%E5%93%AA%E5%87%A0%E7%A7%8D%E2%80%9C%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">1、JavaScript提供了哪几种“异步模式”？</a> <a class="header-anchor" href="#_1、javascript提供了哪几种-异步模式" aria-label="Permalink to &quot;[1、JavaScript提供了哪几种“异步模式”？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#1javascript提供了哪几种“异步模式)&quot;">​</a></h3><p><strong>1、</strong> 回调函数（callbacks）</p><p><strong>2、</strong> 事件监听</p><p><strong>3、</strong> Promise对象</p><h3 id="_2、sessionstorage和localstroage与cookie之间有什么关联-cookie最大存放多少字节" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2sessionstorage%E5%92%8Clocalstroage%E4%B8%8Ecookie%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E8%81%94,-cookie%E6%9C%80%E5%A4%A7%E5%AD%98%E6%94%BE%E5%A4%9A%E5%B0%91%E5%AD%97%E8%8A%82" target="_blank" rel="noreferrer">2、sessionStorage和localstroage与cookie之间有什么关联, cookie最大存放多少字节</a> <a class="header-anchor" href="#_2、sessionstorage和localstroage与cookie之间有什么关联-cookie最大存放多少字节" aria-label="Permalink to &quot;[2、sessionStorage和localstroage与cookie之间有什么关联, cookie最大存放多少字节](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#2sessionstorage和localstroage与cookie之间有什么关联,-cookie最大存放多少字节)&quot;">​</a></h3><p><strong>三者共同点：</strong></p><p>都是保存在浏览器端，且同源的。</p><p>区别:</p><p><strong>1、</strong> cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p><p><strong>2、</strong> 存储大小限制也不同，cookie数据不能超过4k，sessionStorage和localStorage 但比cookie大得多，可以达到5M</p><p><strong>3、</strong> 数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</p><p><strong>4、</strong> 作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面(即数据不共享)；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的( 即数据共享 )。</p><h3 id="_3、new操作符具体干了什么呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%85%B7%E4%BD%93%E5%B9%B2%E4%BA%86%E4%BB%80%E4%B9%88%E5%91%A2" target="_blank" rel="noreferrer">3、new操作符具体干了什么呢?</a> <a class="header-anchor" href="#_3、new操作符具体干了什么呢" aria-label="Permalink to &quot;[3、new操作符具体干了什么呢?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#3new操作符具体干了什么呢)&quot;">​</a></h3><p><strong>1、</strong> 创建一个空对象，并且 <code>this</code> 变量引用该对象，同时还继承了该函数的原型</p><p><strong>2、</strong> 属性和方法被加入到 <code>this</code> 引用的对象中</p><p><strong>3、</strong> 新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回 <code>this</code></p><h3 id="_4、sass和less有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4sass%E5%92%8Cless%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">4、sass和less有什么区别?</a> <a class="header-anchor" href="#_4、sass和less有什么区别" aria-label="Permalink to &quot;[4、sass和less有什么区别?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#4sass和less有什么区别)&quot;">​</a></h3><p><strong>1、</strong> 编译环境不一样 Sass的安装需要Ruby环境，是在服务端处理的，而Less是需要引入less.js来处理Less代码输出css到浏览器，也可以在开发环节使用Less，然后编译成css文件，直接放到项目中。</p><p><strong>2、</strong> 变量符不一相，less是@，而scss是$,而且它们的作用域也不一样，less是块级作用域</p><p><strong>3、</strong> 输出设置，Less没有输出设置，sass提供4种输出选项，nested,compact,compressed和expanded nested：嵌套缩进的css代码(默认) expanded：展开的多行css代码 compact：简洁格式的css代码 compressed：压缩后的css代码</p><p><strong>4、</strong> sass支持条件语句，可以使用if{}else{},for{}循环等等，而less不行</p><p><strong>5、</strong> 引用外部css文件，sass引用外部文件必须以_开头，文件名如果以下划线_形状，sass会认为该文件是一个引用文件，不会将其编译为css文件。less引用外部文件和css中的@import没什么差异。</p><p><strong>6、</strong> sass和less的工具库不同。sass有工具库Compass, 简单说，sass和Compass的关系有点像Javascript和jQuery的关系,Compass是sass的工具库。在它的基础上，封装了一系列有用的模块和模板，补充强化了sass的功能。less有UI组件库Bootstrap,Bootstrap是web前端开发中一个比较有名的前端UI组件库，Bootstrap的样式文件部分源码就是采用less语法编写。</p><p>总结：不管是sass，还是less，都可以视为一种基于CSS之上的高级语言，其目的是使得CSS开发更灵活和更强大，sass的功能比less强大,基本可以说是一种真正的编程语言了，less则相对清晰明了,易于上手,对编译环境要求比较宽松。考虑到编译sass要安装Ruby,而Ruby官网在国内访问不了,个人在实际开发中更倾向于选择less。</p><h3 id="_5、谈谈this对象的理解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E8%B0%88%E8%B0%88this%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3" target="_blank" rel="noreferrer">5、谈谈This对象的理解</a> <a class="header-anchor" href="#_5、谈谈this对象的理解" aria-label="Permalink to &quot;[5、谈谈This对象的理解](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#5谈谈this对象的理解)&quot;">​</a></h3><p><strong>1、</strong> <code>this</code>总是指向函数的直接调用者（而非间接调用者）</p><p><strong>2、</strong> 如果有<code>new</code>关键字，<code>this</code>指向<code>new</code>出来的那个对象</p><p><strong>3、</strong> 在事件中，<code>this</code>指向触发这个事件的对象，特殊的是，<code>IE</code>中的<code>attachEvent</code>中的<code>this</code>总是指向全局对象<code>Window</code></p><h3 id="_6、new-关键字有什么作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6new-%E5%85%B3%E9%94%AE%E5%AD%97%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">6、new 关键字有什么作用？</a> <a class="header-anchor" href="#_6、new-关键字有什么作用" aria-label="Permalink to &quot;[6、new 关键字有什么作用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#6new-关键字有什么作用)&quot;">​</a></h3><p><code>new</code>关键字与构造函数一起使用以创建对象:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function Employee(name, position, yearHired) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  this.name = name;</span></span>
<span class="line"><span style="color:#f6f6f4;">  this.position = position;</span></span>
<span class="line"><span style="color:#f6f6f4;">  this.yearHired = yearHired;</span></span>
<span class="line"><span style="color:#f6f6f4;">};</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">const emp = new Employee(&quot;Marko Polo&quot;, &quot;Software Developer&quot;, 2017);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function Employee(name, position, yearHired) {</span></span>
<span class="line"><span style="color:#24292e;">  this.name = name;</span></span>
<span class="line"><span style="color:#24292e;">  this.position = position;</span></span>
<span class="line"><span style="color:#24292e;">  this.yearHired = yearHired;</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const emp = new Employee(&quot;Marko Polo&quot;, &quot;Software Developer&quot;, 2017);</span></span></code></pre></div><p><code>new</code>关键字做了<code>4</code>件事:</p><p><strong>1、</strong> 创建空对象 <code>{}</code></p><p><strong>2、</strong> 将空对象分配给 <code>this</code> 值</p><p><strong>3、</strong> 将空对象的<code>__proto__</code>指向构造函数的<code>prototype</code></p><p><strong>4、</strong> 如果没有使用显式<code>return</code>语句，则返回<code>this</code></p><p>看下面事例：</p><p><code>function Person() { this.name = &#39;kyle&#39; }</code></p><p>根据上面描述的，<code>new Person()</code>做了：</p><p><strong>1、</strong> 创建一个空对象：<code>var obj = {}</code></p><p><strong>2、</strong> 将空对象分配给 <code>this</code> 值：this = obj</p><p><strong>3、</strong> 将空对象的<code>__proto__</code>指向构造函数的<code>prototype</code>:<code>this.__proto__ = Person().prototype</code></p><p><strong>4、</strong> 返回<code>this</code>:<code>return this</code></p><h3 id="_7、数组的排序方法-sort-排序-汉字排序" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95sort%E6%8E%92%E5%BA%8F%E6%B1%89%E5%AD%97%E6%8E%92%E5%BA%8F" target="_blank" rel="noreferrer">7、数组的排序方法（sort）？排序？汉字排序？</a> <a class="header-anchor" href="#_7、数组的排序方法-sort-排序-汉字排序" aria-label="Permalink to &quot;[7、数组的排序方法（sort）？排序？汉字排序？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#7数组的排序方法sort排序汉字排序)&quot;">​</a></h3><p>数组的排序方法：reverse()和sort()。reverse()方法会对反转数组项的顺序。</p><p>Eg:var values = [0, 1, 5, 10, 15]; values.sort();//0,1,10,15,5</p><p>var values = [1, 2, 3, 4, 5]; values.reverse();//5,4,3,2,1</p><p>js中的排序（详情参考： <a href="http://link.zhihu.com/?target=http%3A//www.tuicool.com/articles/IjInMbU" target="_blank" rel="noreferrer">http://www.tuicool.com/articles/IjInMbU</a>）</p><p>利用sort排序, 冒泡排序, 快速排序, 插入排序, 希尔排序, 选择排序</p><p>归并排序</p><p>localeCompare() 方法用于字符串编码的排序</p><p>localeCompare 方法：返回一个值，指出在当前的区域设置中两个字符串是否相同。</p><h3 id="_8、git-和-svn的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8git-%E5%92%8C-svn%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">8、git 和 svn的区别?</a> <a class="header-anchor" href="#_8、git-和-svn的区别" aria-label="Permalink to &quot;[8、git 和 svn的区别?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#8git-和-svn的区别)&quot;">​</a></h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="_9、如何改变this指针的指向" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98this%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E5%90%91" target="_blank" rel="noreferrer">9、如何改变this指针的指向？</a> <a class="header-anchor" href="#_9、如何改变this指针的指向" aria-label="Permalink to &quot;[9、如何改变this指针的指向？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#9如何改变this指针的指向)&quot;">​</a></h3><p>可以使用<code>apply</code>、<code>call</code>、<code>bind</code>方法改变<code>this</code>指向(并不会改变函数的作用域)。比较如下：</p><p><strong>1、</strong> 三者第一个参数都是<code>this</code>要指向的对象，也就是想指定的上下文，上下文就是指调用函数的那个对象(没有就指向全局window)；</p><p><strong>2、</strong> <code>bind</code>和<code>call</code>的第二个参数都是数组，<code>apply</code>接收多个参数并用逗号隔开；</p><p><strong>3、</strong> <code>apply</code>和<code>call</code>只对原函数做改动，<code>bind</code>会返回新的函数(要生效还得再调用一次)。</p><h3 id="_10、如何合并两个数组-数组删除一个元素" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E5%A6%82%E4%BD%95%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0" target="_blank" rel="noreferrer">10、如何合并两个数组？数组删除一个元素?</a> <a class="header-anchor" href="#_10、如何合并两个数组-数组删除一个元素" aria-label="Permalink to &quot;[10、如何合并两个数组？数组删除一个元素?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题附答案解析，大汇总.md#10如何合并两个数组数组删除一个元素)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//三种方法。</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">（1）var arr1=[1,2,3];</span></span>
<span class="line"><span style="color:#f6f6f4;">        var arr2=[4,5,6];</span></span>
<span class="line"><span style="color:#f6f6f4;">        arr1 = arr1.concat(arr2);</span></span>
<span class="line"><span style="color:#f6f6f4;">        console.log(arr1); </span></span>
<span class="line"><span style="color:#f6f6f4;">        </span></span>
<span class="line"><span style="color:#f6f6f4;">（2）var arr1=[1,2,3];</span></span>
<span class="line"><span style="color:#f6f6f4;">        var arr2=[4,5,6];</span></span>
<span class="line"><span style="color:#f6f6f4;">        Array.prototype.push.apply(arr1,arr2);</span></span>
<span class="line"><span style="color:#f6f6f4;">        console.log(arr1);</span></span>
<span class="line"><span style="color:#f6f6f4;">        </span></span>
<span class="line"><span style="color:#f6f6f4;">（3）var arr1=[1,2,3];</span></span>
<span class="line"><span style="color:#f6f6f4;">    var arr2=[4,5,6];</span></span>
<span class="line"><span style="color:#f6f6f4;">    for (var i=0; i &lt; arr2.length; i++) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    arr1.push( arr2[i] );</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">    console.log(arr1);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//三种方法。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">（1）var arr1=[1,2,3];</span></span>
<span class="line"><span style="color:#24292e;">        var arr2=[4,5,6];</span></span>
<span class="line"><span style="color:#24292e;">        arr1 = arr1.concat(arr2);</span></span>
<span class="line"><span style="color:#24292e;">        console.log(arr1); </span></span>
<span class="line"><span style="color:#24292e;">        </span></span>
<span class="line"><span style="color:#24292e;">（2）var arr1=[1,2,3];</span></span>
<span class="line"><span style="color:#24292e;">        var arr2=[4,5,6];</span></span>
<span class="line"><span style="color:#24292e;">        Array.prototype.push.apply(arr1,arr2);</span></span>
<span class="line"><span style="color:#24292e;">        console.log(arr1);</span></span>
<span class="line"><span style="color:#24292e;">        </span></span>
<span class="line"><span style="color:#24292e;">（3）var arr1=[1,2,3];</span></span>
<span class="line"><span style="color:#24292e;">    var arr2=[4,5,6];</span></span>
<span class="line"><span style="color:#24292e;">    for (var i=0; i &lt; arr2.length; i++) {</span></span>
<span class="line"><span style="color:#24292e;">    arr1.push( arr2[i] );</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    console.log(arr1);</span></span></code></pre></div><h3 id="_11、如何创建一个没有-prototype-原型-的对象" tabindex="-1">11、如何创建一个没有 prototype(原型)的对象？ <a class="header-anchor" href="#_11、如何创建一个没有-prototype-原型-的对象" aria-label="Permalink to &quot;11、如何创建一个没有 prototype(原型)的对象？&quot;">​</a></h3><h3 id="_12、展开-spread-运算符和-剩余-rest-运算符有什么区别" tabindex="-1">12、展开(spread )运算符和 剩余(Rest) 运算符有什么区别？ <a class="header-anchor" href="#_12、展开-spread-运算符和-剩余-rest-运算符有什么区别" aria-label="Permalink to &quot;12、展开(spread )运算符和 剩余(Rest) 运算符有什么区别？&quot;">​</a></h3><h3 id="_13、如何在-js-中创建对象" tabindex="-1">13、如何在 JS 中创建对象？ <a class="header-anchor" href="#_13、如何在-js-中创建对象" aria-label="Permalink to &quot;13、如何在 JS 中创建对象？&quot;">​</a></h3><h3 id="_14、什么是默认参数" tabindex="-1">14、什么是默认参数？ <a class="header-anchor" href="#_14、什么是默认参数" aria-label="Permalink to &quot;14、什么是默认参数？&quot;">​</a></h3><h3 id="_15、jq中如何将一个jq对象转化为dom对象" tabindex="-1">15、Jq中如何将一个jq对象转化为dom对象？ <a class="header-anchor" href="#_15、jq中如何将一个jq对象转化为dom对象" aria-label="Permalink to &quot;15、Jq中如何将一个jq对象转化为dom对象？&quot;">​</a></h3><h3 id="_16、什么是预编译语音-预编译处理器" tabindex="-1">16、什么是预编译语音|预编译处理器? <a class="header-anchor" href="#_16、什么是预编译语音-预编译处理器" aria-label="Permalink to &quot;16、什么是预编译语音|预编译处理器?&quot;">​</a></h3><h3 id="_17、说说你对promise的了解" tabindex="-1">17、说说你对promise的了解 <a class="header-anchor" href="#_17、说说你对promise的了解" aria-label="Permalink to &quot;17、说说你对promise的了解&quot;">​</a></h3><h3 id="_18、var-let和const的区别是什么" tabindex="-1">18、<code>var</code>,<code>let</code>和<code>const</code>的区别是什么？ <a class="header-anchor" href="#_18、var-let和const的区别是什么" aria-label="Permalink to &quot;18、\`var\`,\`let\`和\`const\`的区别是什么？&quot;">​</a></h3><h3 id="_19、手动实现array-prototype-filter方法" tabindex="-1">19、手动实现<code>Array.prototype.filter</code>方法 <a class="header-anchor" href="#_19、手动实现array-prototype-filter方法" aria-label="Permalink to &quot;19、手动实现\`Array.prototype.filter\`方法&quot;">​</a></h3><h3 id="_20、什么是闭包-堆栈溢出有什么区别-内存泄漏-那些操作会造成内存泄漏-怎么样防止内存泄漏" tabindex="-1">20、什么是闭包? 堆栈溢出有什么区别？ 内存泄漏? 那些操作会造成内存泄漏？怎么样防止内存泄漏？ <a class="header-anchor" href="#_20、什么是闭包-堆栈溢出有什么区别-内存泄漏-那些操作会造成内存泄漏-怎么样防止内存泄漏" aria-label="Permalink to &quot;20、什么是闭包? 堆栈溢出有什么区别？ 内存泄漏? 那些操作会造成内存泄漏？怎么样防止内存泄漏？&quot;">​</a></h3><h3 id="_21、什么是闭包" tabindex="-1">21、什么是闭包？ <a class="header-anchor" href="#_21、什么是闭包" aria-label="Permalink to &quot;21、什么是闭包？&quot;">​</a></h3><h3 id="_22、什么是-event-target" tabindex="-1">22、什么是 event.target ？ <a class="header-anchor" href="#_22、什么是-event-target" aria-label="Permalink to &quot;22、什么是 event.target ？&quot;">​</a></h3><h3 id="_23、26-移动端上什么是点击穿透" tabindex="-1">23、26.移动端上什么是点击穿透? <a class="header-anchor" href="#_23、26-移动端上什么是点击穿透" aria-label="Permalink to &quot;23、26.移动端上什么是点击穿透?&quot;">​</a></h3><h3 id="_24、es6或ecmascript-2015有哪些新特性" tabindex="-1">24、ES6或ECMAScript 2015有哪些新特性？ <a class="header-anchor" href="#_24、es6或ecmascript-2015有哪些新特性" aria-label="Permalink to &quot;24、ES6或ECMAScript 2015有哪些新特性？&quot;">​</a></h3><h3 id="_25、请解释什么是事件代理" tabindex="-1">25、请解释什么是事件代理 <a class="header-anchor" href="#_25、请解释什么是事件代理" aria-label="Permalink to &quot;25、请解释什么是事件代理&quot;">​</a></h3><h3 id="_26、slice-splice" tabindex="-1">26、slice() splice()? <a class="header-anchor" href="#_26、slice-splice" aria-label="Permalink to &quot;26、slice() splice()?&quot;">​</a></h3><h3 id="_27、什么是跨域-怎么解决跨域问题" tabindex="-1">27、什么是跨域？怎么解决跨域问题？ <a class="header-anchor" href="#_27、什么是跨域-怎么解决跨域问题" aria-label="Permalink to &quot;27、什么是跨域？怎么解决跨域问题？&quot;">​</a></h3><h3 id="_28、用过哪些设计模式" tabindex="-1">28、用过哪些设计模式？ <a class="header-anchor" href="#_28、用过哪些设计模式" aria-label="Permalink to &quot;28、用过哪些设计模式？&quot;">​</a></h3><h3 id="_29、-运算符能做什么" tabindex="-1">29、!! 运算符能做什么？ <a class="header-anchor" href="#_29、-运算符能做什么" aria-label="Permalink to &quot;29、!! 运算符能做什么？&quot;">​</a></h3><h3 id="_30、除了jsonp-还有什么跨域方式" tabindex="-1">30、除了jsonp 还有什么跨域方式### <a class="header-anchor" href="#_30、除了jsonp-还有什么跨域方式" aria-label="Permalink to &quot;30、除了jsonp 还有什么跨域方式###&quot;">​</a></h3>`,82),n=[t];function p(l,c,i,d,E,h){return s(),e("div",null,n)}const A=a(r,[["render",p]]);export{B as __pageData,A as default};
