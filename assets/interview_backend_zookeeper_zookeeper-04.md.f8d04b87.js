import{_ as e,o,c as r,V as a}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/zookeeper/zookeeper-04.md","filePath":"interview/backend/zookeeper/zookeeper-04.md"}'),t={name:"interview/backend/zookeeper/zookeeper-04.md"},s=a(`<h3 id="_1、zookeeper-下-server工作状态" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1zookeeper-%E4%B8%8B-server%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81" target="_blank" rel="noreferrer">1、Zookeeper 下 Server工作状态</a> <a class="header-anchor" href="#_1、zookeeper-下-server工作状态" aria-label="Permalink to &quot;[1、Zookeeper 下 Server工作状态](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#1zookeeper-下-server工作状态)&quot;">​</a></h3><p>每个Server在工作过程中有三种状态：</p><p>LOOKING：当前Server不知道leader是谁，正在搜寻</p><p>LEADING：当前Server即为选举出来的leader</p><p>FOLLOWING：leader已经选举出来，当前Server与之同步</p><h3 id="_2、zookeeper定义了几种权限" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2zookeeper%E5%AE%9A%E4%B9%89%E4%BA%86%E5%87%A0%E7%A7%8D%E6%9D%83%E9%99%90" target="_blank" rel="noreferrer">2、ZooKeeper定义了几种权限？</a> <a class="header-anchor" href="#_2、zookeeper定义了几种权限" aria-label="Permalink to &quot;[2、ZooKeeper定义了几种权限？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#2zookeeper定义了几种权限)&quot;">​</a></h3><p><strong>1、</strong> CREATE</p><p><strong>2、</strong> READ</p><p><strong>3、</strong> WRITE</p><p><strong>4、</strong> DELETE</p><p><strong>5、</strong> ADMIN</p><h3 id="_3、zookeeper用推-拉模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3zookeeper%E7%94%A8%E6%8E%A8/%E6%8B%89%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">3、ZooKeeper用推/拉模式？</a> <a class="header-anchor" href="#_3、zookeeper用推-拉模式" aria-label="Permalink to &quot;[3、ZooKeeper用推/拉模式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#3zookeeper用推/拉模式)&quot;">​</a></h3><p>推拉结合</p><h3 id="_4、客户端如何获取配置信息" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF" target="_blank" rel="noreferrer">4、客户端如何获取配置信息？</a> <a class="header-anchor" href="#_4、客户端如何获取配置信息" aria-label="Permalink to &quot;[4、客户端如何获取配置信息？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#4客户端如何获取配置信息)&quot;">​</a></h3><p>启动时主动到服务端拉取信息，同时，在制定节点注册Watcher监听。一旦有配置变化，服务端就会实时通知订阅它的所有客户端。</p><h3 id="_5、会话管理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86" target="_blank" rel="noreferrer">5、会话管理</a> <a class="header-anchor" href="#_5、会话管理" aria-label="Permalink to &quot;[5、会话管理](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#5会话管理)&quot;">​</a></h3><p>分桶策略：将类似的会话放在同一区块中进行管理，以便于 Zookeeper 对会话进行不同区块的隔离处理以及同一区块的统一处理。</p><p>分配原则：每个会话的“下次超时时间点”（ExpirationTime）</p><p><strong>计算公式：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">ExpirationTime\\_ = currentTime + sessionTimeout</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">ExpirationTime = (ExpirationTime\\_ / ExpirationInrerval + 1) \\*</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">ExpirationInterval , ExpirationInterval 是指 Zookeeper 会话超时检查时间间隔，默认 tickTime</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ExpirationTime\\_ = currentTime + sessionTimeout</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">ExpirationTime = (ExpirationTime\\_ / ExpirationInrerval + 1) \\*</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">ExpirationInterval , ExpirationInterval 是指 Zookeeper 会话超时检查时间间隔，默认 tickTime</span></span></code></pre></div><h3 id="_6、四种类型的数据节点-znode" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E8%8A%82%E7%82%B9-znode" target="_blank" rel="noreferrer">6、四种类型的数据节点 Znode</a> <a class="header-anchor" href="#_6、四种类型的数据节点-znode" aria-label="Permalink to &quot;[6、四种类型的数据节点 Znode](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#6四种类型的数据节点-znode)&quot;">​</a></h3><p><strong>1、</strong> PERSISTENT-持久节点 除非手动删除，否则节点一直存在于 Zookeeper 上</p><p><strong>2、</strong> EPHEMERAL-临时节点 临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。</p><p><strong>3、</strong> PERSISTENT_SEQUENTIAL-持久顺序节点 基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p><p><strong>4、</strong> EPHEMERAL_SEQUENTIAL-临时顺序节点 基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p><h3 id="_7、zookeeper是如何保证事务的顺序一致性的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7zookeeper%E6%98%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84" target="_blank" rel="noreferrer">7、zookeeper是如何保证事务的顺序一致性的？</a> <a class="header-anchor" href="#_7、zookeeper是如何保证事务的顺序一致性的" aria-label="Permalink to &quot;[7、zookeeper是如何保证事务的顺序一致性的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#7zookeeper是如何保证事务的顺序一致性的)&quot;">​</a></h3><p>zookeeper采用了递增的事务Id来标识，所有的proposal（提议）都在被提出的时候加上了zxid，zxid实际上是一个64位的数字，高32位是epoch（时期; 纪元; 世; 新时代）用来标识leader是否发生改变，如果有新的leader产生出来，epoch会自增，低32位用来递增计数。当新产生proposal的时候，会依据数据库的两阶段过程，首先会向其他的server发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。</p><h3 id="_8、发现" tabindex="-1">8、发现? <a class="header-anchor" href="#_8、发现" aria-label="Permalink to &quot;8、发现?&quot;">​</a></h3><p>Follower把自己最后的接受事务的Proposal值(CEPOCH(F.p)发送给Leader。</p><p>当收到过半Follower的消息后，Leader生成NEWEPOCH(e&#39;)给这些过半的Follower。</p><p>tips: e&#39; = Max((CEPOCH(F.p)) + 1</p><p>Follower收到消息后，如果自己值小于e&#39;,则同步e&#39;的值，同时向Leader发Ack消息。</p><h3 id="_9、客户端注册watcher实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B3%A8%E5%86%8Cwatcher%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">9、客户端注册Watcher实现</a> <a class="header-anchor" href="#_9、客户端注册watcher实现" aria-label="Permalink to &quot;[9、客户端注册Watcher实现](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#9客户端注册watcher实现)&quot;">​</a></h3><p><strong>1、</strong> 调用getData()/getChildren()/exist()三个API，传入Watcher对象</p><p><strong>2、</strong> 标记请求request，封装Watcher到WatchRegistration</p><p><strong>3、</strong> 封装成Packet对象，发服务端发送request</p><p><strong>4、</strong> 收到服务端响应后，将Watcher注册到ZKWatcherManager中进行管理</p><p><strong>5、</strong> 请求返回，完成注册。</p><h3 id="_10、zookeeper文件系统" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10zookeeper%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noreferrer">10、Zookeeper文件系统</a> <a class="header-anchor" href="#_10、zookeeper文件系统" aria-label="Permalink to &quot;[10、Zookeeper文件系统](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新面试题2021年，常见面试题及答案汇总.md#10zookeeper文件系统)&quot;">​</a></h3><p>Zookeeper提供一个多层级的节点命名空间（节点称为znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。Zookeeper为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得Zookeeper不能用于存放大量的数据，每个节点的存放数据上限为1M。</p><h3 id="_11、zookeeper有哪几种几种部署模式" tabindex="-1">11、Zookeeper有哪几种几种部署模式？ <a class="header-anchor" href="#_11、zookeeper有哪几种几种部署模式" aria-label="Permalink to &quot;11、Zookeeper有哪几种几种部署模式？&quot;">​</a></h3><h3 id="_12、zookeeper做了什么" tabindex="-1">12、Zookeeper做了什么？ <a class="header-anchor" href="#_12、zookeeper做了什么" aria-label="Permalink to &quot;12、Zookeeper做了什么？&quot;">​</a></h3><h3 id="_13、chubby-是什么-和-zookeeper-比你怎么看" tabindex="-1">13、chubby 是什么，和 zookeeper 比你怎么看？ <a class="header-anchor" href="#_13、chubby-是什么-和-zookeeper-比你怎么看" aria-label="Permalink to &quot;13、chubby 是什么，和 zookeeper 比你怎么看？&quot;">​</a></h3><h3 id="_14、权限控制" tabindex="-1">14、权限控制? <a class="header-anchor" href="#_14、权限控制" aria-label="Permalink to &quot;14、权限控制?&quot;">​</a></h3><h3 id="_15、zookeeper工作原理" tabindex="-1">15、Zookeeper工作原理 <a class="header-anchor" href="#_15、zookeeper工作原理" aria-label="Permalink to &quot;15、Zookeeper工作原理&quot;">​</a></h3><h3 id="_16、说一下-zookeeper-的通知机制" tabindex="-1">16、说一下 Zookeeper 的通知机制？ <a class="header-anchor" href="#_16、说一下-zookeeper-的通知机制" aria-label="Permalink to &quot;16、说一下 Zookeeper 的通知机制？&quot;">​</a></h3><h3 id="_17、zab的两种基本模式" tabindex="-1">17、ZAB的两种基本模式？ <a class="header-anchor" href="#_17、zab的两种基本模式" aria-label="Permalink to &quot;17、ZAB的两种基本模式？&quot;">​</a></h3><h3 id="_18、分布式集群中为什么会有master" tabindex="-1">18、分布式集群中为什么会有Master？ <a class="header-anchor" href="#_18、分布式集群中为什么会有master" aria-label="Permalink to &quot;18、分布式集群中为什么会有Master？&quot;">​</a></h3><h3 id="_19、四种类型的znode" tabindex="-1">19、四种类型的znode <a class="header-anchor" href="#_19、四种类型的znode" aria-label="Permalink to &quot;19、四种类型的znode&quot;">​</a></h3><h3 id="_20、zookeeper-下-server-工作状态" tabindex="-1">20、Zookeeper 下 Server 工作状态 <a class="header-anchor" href="#_20、zookeeper-下-server-工作状态" aria-label="Permalink to &quot;20、Zookeeper 下 Server 工作状态&quot;">​</a></h3><h3 id="_21、zookeeper的典型应用场景" tabindex="-1">21、Zookeeper的典型应用场景 <a class="header-anchor" href="#_21、zookeeper的典型应用场景" aria-label="Permalink to &quot;21、Zookeeper的典型应用场景&quot;">​</a></h3><h3 id="_22、zookeeper-watcher-机制-数据变更通知" tabindex="-1">22、Zookeeper Watcher 机制 -- 数据变更通知 <a class="header-anchor" href="#_22、zookeeper-watcher-机制-数据变更通知" aria-label="Permalink to &quot;22、Zookeeper Watcher 机制 -- 数据变更通知&quot;">​</a></h3><h3 id="_23、会话管理" tabindex="-1">23、会话管理 <a class="header-anchor" href="#_23、会话管理" aria-label="Permalink to &quot;23、会话管理&quot;">​</a></h3><h3 id="_24、集群角色" tabindex="-1">24、集群角色？ <a class="header-anchor" href="#_24、集群角色" aria-label="Permalink to &quot;24、集群角色？&quot;">​</a></h3><h3 id="_25、zookeeper-和-dubbo-的关系" tabindex="-1">25、Zookeeper 和 Dubbo 的关系？ <a class="header-anchor" href="#_25、zookeeper-和-dubbo-的关系" aria-label="Permalink to &quot;25、Zookeeper 和 Dubbo 的关系？&quot;">​</a></h3><h3 id="_26、zookeeper是如何保证事务的顺序一致性的" tabindex="-1">26、zookeeper是如何保证事务的顺序一致性的？ <a class="header-anchor" href="#_26、zookeeper是如何保证事务的顺序一致性的" aria-label="Permalink to &quot;26、zookeeper是如何保证事务的顺序一致性的？&quot;">​</a></h3><h3 id="_27、zab三个阶段" tabindex="-1">27、ZAB三个阶段？ <a class="header-anchor" href="#_27、zab三个阶段" aria-label="Permalink to &quot;27、ZAB三个阶段？&quot;">​</a></h3><h3 id="_28、zookeeper-下-server工作状态" tabindex="-1">28、Zookeeper 下 Server工作状态 <a class="header-anchor" href="#_28、zookeeper-下-server工作状态" aria-label="Permalink to &quot;28、Zookeeper 下 Server工作状态&quot;">​</a></h3><h3 id="_29、获取指定节点信息" tabindex="-1">29、获取指定节点信息？ <a class="header-anchor" href="#_29、获取指定节点信息" aria-label="Permalink to &quot;29、获取指定节点信息？&quot;">​</a></h3><h3 id="_30、分布式通知和协调" tabindex="-1">30、分布式通知和协调 <a class="header-anchor" href="#_30、分布式通知和协调" aria-label="Permalink to &quot;30、分布式通知和协调&quot;">​</a></h3>`,60),p=[s];function n(E,l,i,h,c,d){return o(),r("div",null,p)}const B=e(t,[["render",n]]);export{A as __pageData,B as default};
