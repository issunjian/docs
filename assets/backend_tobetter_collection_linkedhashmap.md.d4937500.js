import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"Java LinkedHashMap详解：从源码分析到实践应用","description":"本文详细解析了 Java LinkedHashMap 的实现原理、功能特点以及源码，为您提供了 LinkedHashMap 的实际应用示例和性能优化建议。阅读本文，将帮助您更深入地理解 LinkedHashMap，从而在实际编程中充分发挥其优势。","frontmatter":{"title":"Java LinkedHashMap详解：从源码分析到实践应用","shortTitle":"LinkedHashMap详解（附源码）","category":["Java核心"],"tag":["集合框架（容器）"],"description":"本文详细解析了 Java LinkedHashMap 的实现原理、功能特点以及源码，为您提供了 LinkedHashMap 的实际应用示例和性能优化建议。阅读本文，将帮助您更深入地理解 LinkedHashMap，从而在实际编程中充分发挥其优势。","head":[["meta",{"name":"keywords","content":"Java,LinkedHashMap,java LinkedHashMap, 源码分析, 实现原理"}]]},"headers":[],"relativePath":"backend/tobetter/collection/linkedhashmap.md","filePath":"backend/tobetter/collection/linkedhashmap.md"}'),p={name:"backend/tobetter/collection/linkedhashmap.md"},o=l(`<h1 id="_6-10-linkedhashmap详解-附源码" tabindex="-1">6.10 LinkedHashMap详解（附源码） <a class="header-anchor" href="#_6-10-linkedhashmap详解-附源码" aria-label="Permalink to &quot;6.10 LinkedHashMap详解（附源码）&quot;">​</a></h1><blockquote><p>这篇继续换个文风来写，给大家一点新鲜的空气。</p></blockquote><p>俗话说了，“金无足赤人无完人”，HashMap 也不例外，有一种需求它就满足不了，假如我们需要一个按照插入顺序来排列的键值对集合，那 HashMap 就无能为力了。那该怎么办呢？必须得上今天这篇文章的主角：LinkedHashMap。</p><p>同学们好啊，还记得 <a href="https://tobebetterjavaer.com/collection/hashmap.html" target="_blank" rel="noreferrer">HashMap</a> 那篇吗？我自己感觉写得非常棒啊，既通俗易懂，又深入源码，真的是分析得透透彻彻、清清楚楚、明明白白的。（一不小心又甩了三个成语，有文化吧？）HashMap 哪哪都好，真的，只要你想用键值对，第一时间就应该想到它。</p><p>为了提高查找效率，HashMap 在插入的时候对键做了一次哈希算法，这就导致插入的元素是无序的。</p><p>对这一点还不太明白的同学，可以再回到 <a href="https://tobebetterjavaer.com/collection/hashmap.html" target="_blank" rel="noreferrer">HashMap</a> 那一篇，看看 hash 方法，再看看我对 <code>put()</code> 方法的讲解，就能明白了，我们这里再来回顾一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">putVal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> hash, </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> value, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> onlyIfAbsent,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">               </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> evict) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt;[] tab; </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; p; </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n, i;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ①、数组 table 为 null 时，调用 resize 方法创建默认大小的数组</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">resize</span><span style="color:#F6F6F4;">()).length;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ②、计算下标，如果该位置上没有值，则填充</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab[i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (n </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> hash]) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        tab[i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newNode</span><span style="color:#F6F6F4;">(hash, key, value, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> V </span><span style="color:#6F42C1;">putVal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash, K key, V value, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> onlyIfAbsent,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> evict) {</span></span>
<span class="line"><span style="color:#24292E;">    HashMap.Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;[] tab; HashMap.Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p; </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n, i;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ①、数组 table 为 null 时，调用 resize 方法创建默认大小的数组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">()).length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ②、计算下标，如果该位置上没有值，则填充</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab[i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> hash]) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        tab[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newNode</span><span style="color:#24292E;">(hash, key, value, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中这个公式 <code>i = (n - 1) &amp; hash</code> 计算后的值就是键位在数组（桶）中的索引（下标/位置），但这它并不是按照 0、1、2、3、4、5 这样有序的下标将键值对插入到数组当中的，而是有一定的随机性。</p><p>比如说默认大小为 16 的 HashMap，如果 put 了 4 个键值对，可能下标是 0、4、9、11，那这样的话，在遍历 HashMap 的时候，就不一定能按照插入顺序来了。</p><p>看下面的例子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建 HashMap 对象，键类型为 String，值类型为 String</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 put() 方法向 HashMap 中添加数据</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chenmo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wanger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chenqingyang</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">陈清扬</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 遍历 HashMap，输出所有键值对</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;String, String&gt; entry </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">entrySet</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Key: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, Value: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> value);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 HashMap 对象，键类型为 String，值类型为 String</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 put() 方法向 HashMap 中添加数据</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chenmo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wanger&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chenqingyang&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;陈清扬&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 遍历 HashMap，输出所有键值对</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Key: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, Value: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来看输出结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Key: chenmo, Value: 沉默</span></span>
<span class="line"><span style="color:#f6f6f4;">Key: chenqingyang, Value: 陈清扬</span></span>
<span class="line"><span style="color:#f6f6f4;">Key: wanger, Value: 王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Key: chenmo, Value: 沉默</span></span>
<span class="line"><span style="color:#24292e;">Key: chenqingyang, Value: 陈清扬</span></span>
<span class="line"><span style="color:#24292e;">Key: wanger, Value: 王二</span></span></code></pre></div><p>对比一下输出结果就可以看得出来，put 的时候是 沉默、王二、陈清扬的顺序，但遍历的时候就没有按照这个顺序来：沉默、陈清扬、王二，因为 HashMap 是无序的。</p><p>那怎么保证键值对的插入顺序呢？</p><p>LinkedHashMap 就是为这个需求应运而生的。LinkedHashMap 继承了 HashMap，所以 HashMap 有的关于键值对的功能，它也有了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;K,V&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;K,V&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;K,V&gt;{}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedHashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt;{}</span></span></code></pre></div><p>在此基础上，LinkedHashMap 内部追加了双向链表，来维护元素的插入顺序。注意下面代码中的 before 和 after，它俩就是用来维护当前元素的前一个元素和后一个元素的顺序的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap.Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; before, after;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Entry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">hash</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(hash, key, value, next);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap.Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; before, after;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hash</span><span style="color:#24292E;">, K </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, V </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(hash, key, value, next);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>关于双向链表，同学们可以回头看一遍我写的 <a href="https://tobebetterjavaer.com/collection/linkedlist.html" target="_blank" rel="noreferrer">LinkedList</a> 那篇文章，会对理解本篇的 LinkedHashMap 有很大的帮助。</p><p>用 LinkedHashMap 替换 HashMap，再来对比一下输出结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建 LinkedHashMap 对象，键类型为 String，值类型为 String</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用 put() 方法向 LinkedHashMap 中添加数据</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chenmo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wanger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chenqingyang</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">陈清扬</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 遍历 LinkedHashMap，输出所有键值对</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;String, String&gt; entry </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">entrySet</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> entry.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Key: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, Value: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> value);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 LinkedHashMap 对象，键类型为 String，值类型为 String</span></span>
<span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 put() 方法向 LinkedHashMap 中添加数据</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chenmo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wanger&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;chenqingyang&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;陈清扬&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 遍历 LinkedHashMap，输出所有键值对</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Map.Entry&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; entry </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">entrySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Key: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;, Value: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来看输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Key: chenmo, Value: 沉默</span></span>
<span class="line"><span style="color:#f6f6f4;">Key: wanger, Value: 王二</span></span>
<span class="line"><span style="color:#f6f6f4;">Key: chenqingyang, Value: 陈清扬</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Key: chenmo, Value: 沉默</span></span>
<span class="line"><span style="color:#24292e;">Key: wanger, Value: 王二</span></span>
<span class="line"><span style="color:#24292e;">Key: chenqingyang, Value: 陈清扬</span></span></code></pre></div><p>看，LinkedHashMap 是不是保持了插入顺序？这就对了。</p><h3 id="_01、插入顺序" tabindex="-1">01、插入顺序 <a class="header-anchor" href="#_01、插入顺序" aria-label="Permalink to &quot;01、插入顺序&quot;">​</a></h3><p>在 <a href="https://tobebetterjavaer.com/collection/hashmap.html" target="_blank" rel="noreferrer">HashMap</a> 那篇文章里，我有讲解到一点，不知道同学们记不记得，就是 null 会插入到 HashMap 的第一位。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; hashMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">hashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">hashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">hashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">hashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">hashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> hashMap.</span><span style="color:#62E884;">keySet</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(key </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> : </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> hashMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(key));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; hashMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">hashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">hashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> hashMap.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> hashMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出的结果是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">null : null</span></span>
<span class="line"><span style="color:#f6f6f4;">默 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">沉 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">王 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">二 : 沉默王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">null : null</span></span>
<span class="line"><span style="color:#24292e;">默 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">沉 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">王 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">二 : 沉默王二</span></span></code></pre></div><p>虽然 null 最后一位 put 进去的，但在遍历输出的时候，跑到了第一位。</p><p>那再来对比看一下 LinkedHashMap。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; linkedHashMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> linkedHashMap.</span><span style="color:#62E884;">keySet</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(key </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> : </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> linkedHashMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(key));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; linkedHashMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String key </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> linkedHashMap.</span><span style="color:#6F42C1;">keySet</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(key </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; : &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> linkedHashMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">沉 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">默 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">王 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">二 : 沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">null : null</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">沉 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">默 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">王 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">二 : 沉默王二</span></span>
<span class="line"><span style="color:#24292e;">null : null</span></span></code></pre></div><p>null 在最后一位插入，在最后一位输出。</p><p>输出结果可以再次证明，<strong>HashMap 是无序的，LinkedHashMap 是可以维持插入顺序的</strong>。</p><p>那 LinkedHashMap 是如何做到这一点呢？我相信同学们和我一样，非常希望知道原因。</p><p>要想搞清楚，就需要深入研究一下 LinkedHashMap 的源码。LinkedHashMap 并未重写 HashMap 的 <code>put()</code> 方法，而是重写了 <code>put()</code> 方法需要调用的内部方法 <code>newNode()</code>。</p><p>这是 HashMap 的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newNode</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> hash, </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> value, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;&gt;(hash, key, value, next);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash, K key, V value, Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> next) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Node&lt;&gt;(hash, key, value, next);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这是 LinkedHashMap 的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">HashMap.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newNode</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> hash, </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> value, HashMap.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; p </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;&gt;(hash, key, value, e);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">linkNodeLast</span><span style="color:#F6F6F4;">(p);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> p;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HashMap.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> hash, K key, V value, HashMap.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> e) {</span></span>
<span class="line"><span style="color:#24292E;">    LinkedHashMap.Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap.Entry&lt;&gt;(hash, key, value, e);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">linkNodeLast</span><span style="color:#24292E;">(p);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> p;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>前面曾提到 LinkedHashMap.Entry 继承了 HashMap.Node，并且追加了两个字段 before 和 after，用来维持键值对的关系。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap.Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; before, after;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Entry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">hash</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">V</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F6F6F4;">&lt;K,V&gt; </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(hash, key, value, next);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap.Node</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; before, after;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hash</span><span style="color:#24292E;">, K </span><span style="color:#E36209;">key</span><span style="color:#24292E;">, V </span><span style="color:#E36209;">value</span><span style="color:#24292E;">, Node&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(hash, key, value, next);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 LinkedHashMap 中，链表中的节点顺序是按照插入顺序维护的。当使用 put() 方法向 LinkedHashMap 中添加键值对时，会将新节点插入到链表的尾部，并更新 before 和 after 属性，以保证链表的顺序关系——由 <code>linkNodeLast()</code> 方法来完成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 将指定节点插入到链表的尾部</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">p</span><span style="color:#7B7F8B;"> 要插入的节点</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">linkNodeLast</span><span style="color:#F6F6F4;">(LinkedHashMap.Entry</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> p) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tail; </span><span style="color:#7B7F8B;">// 获取链表的尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    tail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p; </span><span style="color:#7B7F8B;">// 将 p 设为尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (last </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p; </span><span style="color:#7B7F8B;">// 如果链表为空，则将 p 设为头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        p.before </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last; </span><span style="color:#7B7F8B;">// 将 p 的前驱节点设为链表的尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        last.after </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p; </span><span style="color:#7B7F8B;">// 将链表的尾节点的后继节点设为 p</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将指定节点插入到链表的尾部</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">p</span><span style="color:#6A737D;"> 要插入的节点</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">linkNodeLast</span><span style="color:#24292E;">(LinkedHashMap.Entry</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> p) {</span></span>
<span class="line"><span style="color:#24292E;">    LinkedHashMap.Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tail; </span><span style="color:#6A737D;">// 获取链表的尾节点</span></span>
<span class="line"><span style="color:#24292E;">    tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span><span style="color:#6A737D;">// 将 p 设为尾节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (last </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span><span style="color:#6A737D;">// 如果链表为空，则将 p 设为头节点</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        p.before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last; </span><span style="color:#6A737D;">// 将 p 的前驱节点设为链表的尾节点</span></span>
<span class="line"><span style="color:#24292E;">        last.after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span><span style="color:#6A737D;">// 将链表的尾节点的后继节点设为 p</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>看到了吧，LinkedHashMap 在添加第一个元素的时候，会把 head 赋值为第一个元素，等到第二个元素添加进来的时候，会把第二个元素的 before 赋值为第一个元素，第一个元素的 afer 赋值为第二个元素。</p><p>这就保证了键值对是按照插入顺序排列的，明白了吧？</p><h3 id="_02、访问顺序" tabindex="-1">02、访问顺序 <a class="header-anchor" href="#_02、访问顺序" aria-label="Permalink to &quot;02、访问顺序&quot;">​</a></h3><p>LinkedHashMap 不仅能够维持插入顺序，还能够维持访问顺序。访问包括调用 <code>get()</code> 方法、<code>remove()</code> 方法和 <code>put()</code> 方法。</p><p>要维护访问顺序，需要我们在声明 LinkedHashMap 的时候指定三个参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;String, String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">.75f</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">LinkedHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">.75f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span></code></pre></div><p>第一个参数和第二个参数，看过 <a href="https://tobebetterjavaer.com/collection/hashmap.html" target="_blank" rel="noreferrer">HashMap</a> 的同学们应该很熟悉了，指的是初始容量和负载因子。</p><p>第三个参数如果为 true 的话，就表示 LinkedHashMap 要维护访问顺序；否则，维护插入顺序。默认是 false。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; linkedHashMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">.75f</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(linkedHashMap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(linkedHashMap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">linkedHashMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(linkedHashMap);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; linkedHashMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">.75f</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(linkedHashMap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(linkedHashMap);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">linkedHashMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(linkedHashMap);</span></span></code></pre></div><p>输出的结果如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">{沉=沉默王二, 默=沉默王二, 王=沉默王二, 二=沉默王二}</span></span>
<span class="line"><span style="color:#f6f6f4;">{沉=沉默王二, 王=沉默王二, 二=沉默王二, 默=沉默王二}</span></span>
<span class="line"><span style="color:#f6f6f4;">{沉=沉默王二, 二=沉默王二, 默=沉默王二, 王=沉默王二}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{沉=沉默王二, 默=沉默王二, 王=沉默王二, 二=沉默王二}</span></span>
<span class="line"><span style="color:#24292e;">{沉=沉默王二, 王=沉默王二, 二=沉默王二, 默=沉默王二}</span></span>
<span class="line"><span style="color:#24292e;">{沉=沉默王二, 二=沉默王二, 默=沉默王二, 王=沉默王二}</span></span></code></pre></div><p>当我们使用 <code>get()</code> 方法访问键位“默”的元素后，输出结果中，<code>默=沉默王二</code> 在最后；当我们访问键位“王”的元素后，输出结果中，<code>王=沉默王二</code> 在最后，<code>默=沉默王二</code> 在倒数第二位。</p><p>也就是说，最不经常访问的放在头部，这就有意思了。有意思在哪呢？</p><p>我们可以使用 LinkedHashMap 来实现 LRU 缓存，LRU 是 Least Recently Used 的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 自定义的 MyLinkedHashMap 类，继承了 Java 中内置的 LinkedHashMap&lt;K, V&gt; 类。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 用于实现一个具有固定大小的缓存，当缓存达到最大容量时，会自动移除最早加入的元素，以腾出空间给新的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">&lt;K&gt;</span><span style="color:#7B7F8B;"> 键的类型</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">&lt;V&gt;</span><span style="color:#7B7F8B;"> 值的类型</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyLinkedHashMap</span><span style="color:#F6F6F4;">&lt;K, V&gt; </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">&lt;K, V&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> MAX_ENTRIES </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 表示 MyLinkedHashMap 中最多存储的键值对数量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 构造方法，使用 super() 调用了父类的构造函数，并传递了三个参数：initialCapacity、loadFactor 和 accessOrder。</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">initialCapacity</span><span style="color:#7B7F8B;"> 初始容量</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">loadFactor</span><span style="color:#7B7F8B;">      负载因子</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">accessOrder</span><span style="color:#7B7F8B;">     访问顺序</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyLinkedHashMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">initialCapacity</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">float</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">loadFactor</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">accessOrder</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(initialCapacity, loadFactor, accessOrder);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 重写父类的 removeEldestEntry() 方法，用于指示是否应该移除最早加入的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 如果返回 true，那么将删除最早加入的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">eldest</span><span style="color:#7B7F8B;"> 最早加入的元素</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 如果当前 MyLinkedHashMap 中元素的数量大于 MAX_ENTRIES，返回 true，否则返回 false。</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">removeEldestEntry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">eldest</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> MAX_ENTRIES;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义的 MyLinkedHashMap 类，继承了 Java 中内置的 LinkedHashMap&lt;K, V&gt; 类。</span></span>
<span class="line"><span style="color:#6A737D;"> * 用于实现一个具有固定大小的缓存，当缓存达到最大容量时，会自动移除最早加入的元素，以腾出空间给新的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;K&gt;</span><span style="color:#6A737D;"> 键的类型</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">&lt;V&gt;</span><span style="color:#6A737D;"> 值的类型</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLinkedHashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LinkedHashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> MAX_ENTRIES </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 表示 MyLinkedHashMap 中最多存储的键值对数量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 构造方法，使用 super() 调用了父类的构造函数，并传递了三个参数：initialCapacity、loadFactor 和 accessOrder。</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">initialCapacity</span><span style="color:#6A737D;"> 初始容量</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">loadFactor</span><span style="color:#6A737D;">      负载因子</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">accessOrder</span><span style="color:#6A737D;">     访问顺序</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyLinkedHashMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">initialCapacity</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">float</span><span style="color:#24292E;"> </span><span style="color:#E36209;">loadFactor</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#E36209;">accessOrder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(initialCapacity, loadFactor, accessOrder);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 重写父类的 removeEldestEntry() 方法，用于指示是否应该移除最早加入的元素。</span></span>
<span class="line"><span style="color:#6A737D;">     * 如果返回 true，那么将删除最早加入的元素。</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">eldest</span><span style="color:#6A737D;"> 最早加入的元素</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 如果当前 MyLinkedHashMap 中元素的数量大于 MAX_ENTRIES，返回 true，否则返回 false。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeEldestEntry</span><span style="color:#24292E;">(Map.Entry </span><span style="color:#E36209;">eldest</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> MAX_ENTRIES;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MyLinkedHashMap 是一个自定义类，它继承了 LinkedHashMap，并且重写了 <code>removeEldestEntry()</code> 方法——使 Map 最多可容纳 5 个元素，超出后就淘汰。</p><p>我们来测试一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">MyLinkedHashMap</span><span style="color:#F6F6F4;">&lt;String,String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyLinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">0.75f</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有颜值的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有颜值的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有才华的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有才华的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">MyLinkedHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MyLinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.75f</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一枚有趣的程序员&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;一枚有趣的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一枚有颜值的程序员&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;一枚有颜值的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一枚有才华的程序员&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;一枚有才华的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span></code></pre></div><p>输出结果如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">{沉=沉默王二, 默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员}</span></span>
<span class="line"><span style="color:#f6f6f4;">{默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员}</span></span>
<span class="line"><span style="color:#f6f6f4;">{王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员, 一枚有才华的程序员=一枚有才华的程序员}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{沉=沉默王二, 默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员}</span></span>
<span class="line"><span style="color:#24292e;">{默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员}</span></span>
<span class="line"><span style="color:#24292e;">{王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员, 一枚有才华的程序员=一枚有才华的程序员}</span></span></code></pre></div><p><code>沉=沉默王二</code> 和 <code>默=沉默王二</code> 依次被淘汰出局。</p><p>假如在 put “一枚有才华的程序员”之前 get 了键位为“默”的元素：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">MyLinkedHashMap</span><span style="color:#F6F6F4;">&lt;String,String&gt; map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MyLinkedHashMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">0.75f</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有颜值的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有颜值的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有才华的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有才华的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(map);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">MyLinkedHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> MyLinkedHashMap&lt;&gt;(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0.75f</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一枚有趣的程序员&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;一枚有趣的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一枚有颜值的程序员&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;一枚有颜值的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;一枚有才华的程序员&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;一枚有才华的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(map);</span></span></code></pre></div><p>那输出结果就变了，对吧？</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">{沉=沉默王二, 默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员}</span></span>
<span class="line"><span style="color:#f6f6f4;">{默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员}</span></span>
<span class="line"><span style="color:#f6f6f4;">{二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员, 默=沉默王二, 一枚有才华的程序员=一枚有才华的程序员}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{沉=沉默王二, 默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员}</span></span>
<span class="line"><span style="color:#24292e;">{默=沉默王二, 王=沉默王二, 二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员}</span></span>
<span class="line"><span style="color:#24292e;">{二=沉默王二, 一枚有趣的程序员=一枚有趣的程序员, 一枚有颜值的程序员=一枚有颜值的程序员, 默=沉默王二, 一枚有才华的程序员=一枚有才华的程序员}</span></span></code></pre></div><p><code>沉=沉默王二</code> 和 <code>王=沉默王二</code> 被淘汰出局了。</p><p>那 LinkedHashMap 是如何来维持访问顺序呢？同学们感兴趣的话，可以研究一下下面这三个方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterNodeAccess</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> p) { }</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterNodeInsertion</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> evict) { }</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterNodeRemoval</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> p) { }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterNodeAccess</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> p) { }</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterNodeInsertion</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> evict) { }</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterNodeRemoval</span><span style="color:#24292E;">(Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> p) { }</span></span></code></pre></div><p><code>afterNodeAccess()</code> 会在调用 <code>get()</code> 方法的时候被调用，<code>afterNodeInsertion()</code> 会在调用 <code>put()</code> 方法的时候被调用，<code>afterNodeRemoval()</code> 会在调用 <code>remove()</code> 方法的时候被调用。</p><p>我来以 <code>afterNodeAccess()</code> 为例来讲解一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在访问节点后，将节点移动到链表的尾部</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要移动的节点</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterNodeAccess</span><span style="color:#F6F6F4;">(HashMap.Node</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> e) { </span><span style="color:#7B7F8B;">// move node to last</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; last;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (accessOrder </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tail) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> e) { </span><span style="color:#7B7F8B;">// 如果按访问顺序排序，并且访问的节点不是尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (LinkedHashMap.Entry</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">K,V</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">)e, b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.before, a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.after;</span></span>
<span class="line"><span style="color:#F6F6F4;">        p.after </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将要移动的节点的后继节点设为 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (b </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a; </span><span style="color:#7B7F8B;">// 如果要移动的节点没有前驱节点，则将要移动的节点设为头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">            b.after </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a; </span><span style="color:#7B7F8B;">// 将要移动的节点的前驱节点的后继节点设为要移动的节点的后继节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (a </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            a.before </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// 如果要移动的节点有后继节点，则将要移动的节点的后继节点的前驱节点设为要移动的节点的前驱节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">            last </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// 如果要移动的节点没有后继节点，则将要移动的节点的前驱节点设为尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (last </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p; </span><span style="color:#7B7F8B;">// 如果尾节点为空，则将要移动的节点设为头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            p.before </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> last; </span><span style="color:#7B7F8B;">// 将要移动的节点的前驱节点设为尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">            last.after </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p; </span><span style="color:#7B7F8B;">// 将尾节点的后继节点设为要移动的节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        tail </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p; </span><span style="color:#7B7F8B;">// 将要移动的节点设为尾节点</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">modCount; </span><span style="color:#7B7F8B;">// 修改计数器</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在访问节点后，将节点移动到链表的尾部</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要移动的节点</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterNodeAccess</span><span style="color:#24292E;">(HashMap.Node</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> e) { </span><span style="color:#6A737D;">// move node to last</span></span>
<span class="line"><span style="color:#24292E;">    LinkedHashMap.Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; last;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (accessOrder </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tail) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> e) { </span><span style="color:#6A737D;">// 如果按访问顺序排序，并且访问的节点不是尾节点</span></span>
<span class="line"><span style="color:#24292E;">        LinkedHashMap.Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (LinkedHashMap.Entry</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">K,V</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">)e, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.before, a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.after;</span></span>
<span class="line"><span style="color:#24292E;">        p.after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将要移动的节点的后继节点设为 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (b </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a; </span><span style="color:#6A737D;">// 如果要移动的节点没有前驱节点，则将要移动的节点设为头节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            b.after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a; </span><span style="color:#6A737D;">// 将要移动的节点的前驱节点的后继节点设为要移动的节点的后继节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (a </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            a.before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">// 如果要移动的节点有后继节点，则将要移动的节点的后继节点的前驱节点设为要移动的节点的前驱节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">            last </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">// 如果要移动的节点没有后继节点，则将要移动的节点的前驱节点设为尾节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (last </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span><span style="color:#6A737D;">// 如果尾节点为空，则将要移动的节点设为头节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            p.before </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> last; </span><span style="color:#6A737D;">// 将要移动的节点的前驱节点设为尾节点</span></span>
<span class="line"><span style="color:#24292E;">            last.after </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span><span style="color:#6A737D;">// 将尾节点的后继节点设为要移动的节点</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        tail </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p; </span><span style="color:#6A737D;">// 将要移动的节点设为尾节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">modCount; </span><span style="color:#6A737D;">// 修改计数器</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>哪个元素被 get 就把哪个元素放在最后。了解了吧？</p><p>那同学们可能还想知道，为什么 LinkedHashMap 能实现 LRU 缓存，把最不经常访问的那个元素淘汰？</p><p>在插入元素的时候，需要调用 <code>put()</code> 方法，该方法最后会调用 <code>afterNodeInsertion()</code> 方法，这个方法被 LinkedHashMap 重写了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在插入节点后，如果需要，可能会删除最早加入的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">evict</span><span style="color:#7B7F8B;"> 是否需要删除最早加入的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterNodeInsertion</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> evict) { </span><span style="color:#7B7F8B;">// possibly remove eldest</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">LinkedHashMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">&lt;K,V&gt; first;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (evict </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">removeEldestEntry</span><span style="color:#F6F6F4;">(first)) { </span><span style="color:#7B7F8B;">// 如果需要删除最早加入的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">K</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> first.key; </span><span style="color:#7B7F8B;">// 获取要删除元素的键</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">removeNode</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">hash</span><span style="color:#F6F6F4;">(key), key, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 调用 removeNode() 方法删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在插入节点后，如果需要，可能会删除最早加入的元素</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">evict</span><span style="color:#6A737D;"> 是否需要删除最早加入的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterNodeInsertion</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> evict) { </span><span style="color:#6A737D;">// possibly remove eldest</span></span>
<span class="line"><span style="color:#24292E;">    LinkedHashMap.Entry&lt;</span><span style="color:#D73A49;">K</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; first;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (evict </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeEldestEntry</span><span style="color:#24292E;">(first)) { </span><span style="color:#6A737D;">// 如果需要删除最早加入的元素</span></span>
<span class="line"><span style="color:#24292E;">        K key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> first.key; </span><span style="color:#6A737D;">// 获取要删除元素的键</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">removeNode</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hash</span><span style="color:#24292E;">(key), key, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 调用 removeNode() 方法删除元素</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>removeEldestEntry()</code> 方法会判断第一个元素是否超出了可容纳的最大范围，如果超出，那就会调用 <code>removeNode()</code> 方法对最不经常访问的那个元素进行删除。</p><h3 id="_03、小结" tabindex="-1">03、小结 <a class="header-anchor" href="#_03、小结" aria-label="Permalink to &quot;03、小结&quot;">​</a></h3><p>由于 LinkedHashMap 要维护双向链表，所以 LinkedHashMap 在插入、删除操作的时候，花费的时间要比 HashMap 多一些。</p><p>这也是没办法的事，对吧，欲戴皇冠必承其重嘛。既然想要维护元素的顺序，总要付出点代价才行。</p><p>简单总结一下吧。</p><p>首先，我们知道 HashMap 是一种常用的哈希表数据结构，它可以快速地进行键值对的查找和插入操作。但是，HashMap 本身并不保证键值对的顺序，如果我们需要按照插入顺序或访问顺序来遍历键值对，就需要使用 LinkedHashMap 了。</p><p>LinkedHashMap 继承自 HashMap，它在 HashMap 的基础上，增加了一个双向链表来维护键值对的顺序。这个链表可以按照插入顺序或访问顺序排序，它的头节点表示最早插入或访问的元素，尾节点表示最晚插入或访问的元素。这个链表的作用就是让 LinkedHashMap 可以保持键值对的顺序，并且可以按照顺序遍历键值对。</p><p>LinkedHashMap 还提供了两个构造方法来指定排序方式，分别是按照插入顺序排序和按照访问顺序排序。在按照访问顺序排序的情况下，每次访问一个键值对，都会将该键值对移到链表的尾部，以保证最近访问的元素在最后面。如果需要删除最早加入的元素，可以通过重写 removeEldestEntry() 方法来实现。</p><p>总之，LinkedHashMap 通过维护一个双向链表来保持键值对的顺序，可以按照插入顺序或访问顺序来遍历键值对。如果你需要按照顺序来遍历键值对，那么 LinkedHashMap 就是你的不二选择了！</p><hr>`,92),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
