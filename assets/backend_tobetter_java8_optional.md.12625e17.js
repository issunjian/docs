import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/optional-2.3dbbe760.jpg",g=JSON.parse('{"title":"Java 8 Optional最佳指南：解决空指针问题的优雅之选","description":"本文详细介绍了Java 8引入的Optional类，阐述了Optional的设计初衷和用法。通过实际的代码示例，展示了如何使用Optional来优雅地解决空指针问题，避免程序中的NullPointerException。掌握Optional的使用方法，让您的Java代码更加健壮和可靠。","frontmatter":{"title":"Java 8 Optional最佳指南：解决空指针问题的优雅之选","shortTitle":"Optional最佳指南","category":["Java核心"],"tag":["Java新特性"],"description":"本文详细介绍了Java 8引入的Optional类，阐述了Optional的设计初衷和用法。通过实际的代码示例，展示了如何使用Optional来优雅地解决空指针问题，避免程序中的NullPointerException。掌握Optional的使用方法，让您的Java代码更加健壮和可靠。","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java进阶之路,Java入门,教程,java8,Optional,java Optional,空指针异常, NullPointerException"}]]},"headers":[],"relativePath":"backend/tobetter/java8/optional.md","filePath":"backend/tobetter/java8/optional.md"}'),o={name:"backend/tobetter/java8/optional.md"},t=l(`<h1 id="_10-2-optional最佳指南" tabindex="-1">10.2 Optional最佳指南 <a class="header-anchor" href="#_10-2-optional最佳指南" aria-label="Permalink to &quot;10.2 Optional最佳指南&quot;">​</a></h1><p>想学习，永远都不晚，尤其是针对 Java 8 里面的好东西，Optional 就是其中之一，该类提供了一种用于表示可选值而非空引用的类级别解决方案。作为一名 Java 程序员，我真的是烦透了 <a href="https://tobebetterjavaer.com/exception/npe.html" target="_blank" rel="noreferrer">NullPointerException（NPE）</a>，尽管和它熟得就像一位老朋友，知道它也是迫不得已——程序正在使用一个对象却发现这个对象的值为 null，于是 Java 虚拟机就怒发冲冠地把它抛了出来当做替罪羊。</p><p>当然了，我们程序员是富有责任心的，不会坐视不管，于是就有了大量的 null 值检查。尽管有时候这种检查完全没有必要，但我们已经习惯了例行公事。终于，Java 8 看不下去了，就引入了 Optional，以便我们编写的代码不再那么刻薄呆板。</p><p>&lt;img src=&quot;./images/guava-20230329172935.png)</p><h3 id="_01、没有-optional-会有什么问题" tabindex="-1">01、没有 Optional 会有什么问题 <a class="header-anchor" href="#_01、没有-optional-会有什么问题" aria-label="Permalink to &quot;01、没有 Optional 会有什么问题&quot;">​</a></h3><p>我们来模拟一个实际的应用场景。小王第一天上班，领导老马就给他安排了一个任务，要他从数据库中根据会员 ID 拉取一个会员的姓名，然后将姓名打印到控制台。虽然是新来的，但这个任务难不倒小王，于是他花了 10 分钟写下了这段代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WithoutOptionalDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Member</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Member</span><span style="color:#F6F6F4;"> mem </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMemberByIdFromDB</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (mem </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(mem.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Member</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMemberByIdFromDB</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 当前 ID 的会员不存在</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WithoutOptionalDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Member</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Member mem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMemberByIdFromDB</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mem </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(mem.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Member </span><span style="color:#6F42C1;">getMemberByIdFromDB</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 当前 ID 的会员不存在</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由于当前 ID 的会员不存在，所以 <code>getMemberByIdFromDB()</code> 方法返回了 null 来作为没有获取到该会员的结果，那就意味着在打印会员姓名的时候要先对 mem 判空，否则就会抛出 NPE 异常，不信？让小王把 <code>if (mem != null)</code> 去掉试试，控制台立马打印错误堆栈给你颜色看看。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span>
<span class="line"><span style="color:#f6f6f4;">	at com.cmower.dzone.optional.WithoutOptionalDemo.main(WithoutOptionalDemo.java:24)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Exception in thread &quot;main&quot; java.lang.NullPointerException</span></span>
<span class="line"><span style="color:#24292e;">	at com.cmower.dzone.optional.WithoutOptionalDemo.main(WithoutOptionalDemo.java:24)</span></span></code></pre></div><h3 id="_02、optional-是如何解决这个问题的" tabindex="-1">02、Optional 是如何解决这个问题的 <a class="header-anchor" href="#_02、optional-是如何解决这个问题的" aria-label="Permalink to &quot;02、Optional 是如何解决这个问题的&quot;">​</a></h3><p>小王把代码提交后，就兴高采烈地去找老马要新的任务了。本着虚心学习的态度，小王请求老马看一下自己的代码，于是老王就告诉他应该尝试一下 Optional，可以避免没有必要的 null 值检查。现在，让我们来看看小王是如何通过 Optional 来解决上述问题的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OptionalDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;Member&gt; optional </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMemberByIdFromDB</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        optional.</span><span style="color:#62E884;">ifPresent</span><span style="color:#F6F6F4;">(mem </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">会员姓名是：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> mem.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;Member&gt; </span><span style="color:#62E884;">getMemberByIdFromDB</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> hasName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (hasName) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Member</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">empty</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Member</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// getter / setter</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionalDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">Member</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMemberByIdFromDB</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        optional.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(mem </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;会员姓名是：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> mem.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">Member</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getMemberByIdFromDB</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> hasName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hasName) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Member</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Member</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// getter / setter</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>getMemberByIdFromDB()</code> 方法返回了 <code>Optional&lt;Member&gt;</code> 作为结果，这样就表明 Member 可能存在，也可能不存在，这时候就可以在 Optional 的 <code>ifPresent()</code> 方法中使用 Lambda 表达式来直接打印结果。</p><p>Optional 之所以可以解决 NPE 的问题，是因为它明确的告诉我们，不需要对它进行判空。它就好像十字路口的路标，明确地告诉你该往哪走。</p><h3 id="_03、创建-optional-对象" tabindex="-1">03、创建 Optional 对象 <a class="header-anchor" href="#_03、创建-optional-对象" aria-label="Permalink to &quot;03、创建 Optional 对象&quot;">​</a></h3><p>1）可以使用静态方法 <code>empty()</code> 创建一个空的 Optional 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; empty </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">empty</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(empty); </span><span style="color:#7B7F8B;">// 输出：Optional.empty</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; empty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(empty); </span><span style="color:#6A737D;">// 输出：Optional.empty</span></span></code></pre></div><p>2）可以使用静态方法 <code>of()</code> 创建一个非空的 Optional 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(opt); </span><span style="color:#7B7F8B;">// 输出：Optional[沉默王二]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(opt); </span><span style="color:#6A737D;">// 输出：Optional[沉默王二]</span></span></code></pre></div><p>当然了，传递给 <code>of()</code> 方法的参数必须是非空的，也就是说不能为 null，否则仍然会抛出 NullPointerException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optnull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(name);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optnull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(name);</span></span></code></pre></div><p>3）可以使用静态方法 <code>ofNullable()</code> 创建一个即可空又可非空的 Optional 对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optOrNull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(optOrNull); </span><span style="color:#7B7F8B;">// 输出：Optional.empty</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optOrNull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optOrNull); </span><span style="color:#6A737D;">// 输出：Optional.empty</span></span></code></pre></div><p><code>ofNullable()</code> 方法内部有一个三元表达式，如果为参数为 null，则返回私有常量 EMPTY；否则使用 new 关键字创建了一个新的 Optional 对象——不会再抛出 NPE 异常了。</p><h3 id="_04、判断值是否存在" tabindex="-1">04、判断值是否存在 <a class="header-anchor" href="#_04、判断值是否存在" aria-label="Permalink to &quot;04、判断值是否存在&quot;">​</a></h3><p>可以通过方法 <code>isPresent()</code> 判断一个 Optional 对象是否存在，如果存在，该方法返回 true，否则返回 false——取代了 <code>obj != null</code> 的判断。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(opt.</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 输出：true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optOrNull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(optOrNull.</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 输出：false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(opt.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出：true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optOrNull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optOrNull.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出：false</span></span></code></pre></div><p>Java 11 后还可以通过方法 <code>isEmpty()</code> 判断与 <code>isPresent()</code> 相反的结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(opt.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 输出：false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optOrNull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(optOrNull.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 输出：true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(opt.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出：false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optOrNull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optOrNull.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 输出：true</span></span></code></pre></div><h3 id="_05、非空表达式" tabindex="-1">05、非空表达式 <a class="header-anchor" href="#_05、非空表达式" aria-label="Permalink to &quot;05、非空表达式&quot;">​</a></h3><p>Optional 类有一个非常现代化的方法——<code>ifPresent()</code>，允许我们使用函数式编程的方式执行一些代码，因此，我把它称为非空表达式。如果没有该方法的话，我们通常需要先通过 <code>isPresent()</code> 方法对 Optional 对象进行判空后再执行相应的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optOrNull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (optOrNull.</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(optOrNull.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optOrNull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (optOrNull.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optOrNull.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了 <code>ifPresent()</code> 之后，情况就完全不同了，可以直接将 Lambda 表达式传递给该方法，代码更加简洁，更加直观。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">opt.</span><span style="color:#62E884;">ifPresent</span><span style="color:#F6F6F4;">(str </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">()));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">opt.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()));</span></span></code></pre></div><p>Java 9 后还可以通过方法 <code>ifPresentOrElse(action, emptyAction)</code> 执行两种结果，非空时执行 action，空时执行 emptyAction。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">opt.</span><span style="color:#62E884;">ifPresentOrElse</span><span style="color:#F6F6F4;">(str </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">()), () </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">为空</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">opt.</span><span style="color:#6F42C1;">ifPresentOrElse</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">()), () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;为空&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><h3 id="_06、设置-获取-默认值" tabindex="-1">06、设置（获取）默认值 <a class="header-anchor" href="#_06、设置-获取-默认值" aria-label="Permalink to &quot;06、设置（获取）默认值&quot;">​</a></h3><p>有时候，我们在创建（获取） Optional 对象的时候，需要一个默认值，<code>orElse()</code> 和 <code>orElseGet()</code> 方法就派上用场了。</p><p><code>orElse()</code> 方法用于返回包裹在 Optional 对象中的值，如果该值不为 null，则返回；否则返回默认值。该方法的参数类型和值的类型一致。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> nullName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(nullName).</span><span style="color:#62E884;">orElse</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(name); </span><span style="color:#7B7F8B;">// 输出：沉默王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String nullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(nullName).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name); </span><span style="color:#6A737D;">// 输出：沉默王二</span></span></code></pre></div><p><code>orElseGet()</code> 方法与 <code>orElse()</code> 方法类似，但参数类型不同。如果 Optional 对象中的值为 null，则执行参数中的函数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> nullName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(nullName).</span><span style="color:#62E884;">orElseGet</span><span style="color:#F6F6F4;">(()</span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(name); </span><span style="color:#7B7F8B;">// 输出：沉默王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String nullName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(nullName).</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(name); </span><span style="color:#6A737D;">// 输出：沉默王二</span></span></code></pre></div><p>从输出结果以及代码的形式上来看，这两个方法极其相似，这不免引起我们的怀疑，Java 类库的设计者有必要这样做吗？</p><p>假设现在有这样一个获取默认值的方法，很传统的方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getDefaultValue</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getDefaultValue</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getDefaultValue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getDefaultValue&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后，通过 <code>orElse()</code> 方法和 <code>orElseGet()</code> 方法分别调用 <code>getDefaultValue()</code> 方法返回默认值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orElse</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(name).</span><span style="color:#62E884;">orElse</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">getDefaultValue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orElseGet</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(name).</span><span style="color:#62E884;">orElseGet</span><span style="color:#F6F6F4;">(OrElseOptionalDemo</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">getDefaultValue);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">    String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orElse&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String name2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getDefaultValue</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orElseGet&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String name3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(OrElseOptionalDemo</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getDefaultValue);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>注：<code>类名 :: 方法名</code>是 Java 8 引入的语法，方法名后面是没有 <code>()</code> 的，表明该方法并不一定会被调用。</p><p>输出结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">orElse</span></span>
<span class="line"><span style="color:#F6F6F4;">getDefaultValue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">orElseGet</span></span>
<span class="line"><span style="color:#F6F6F4;">getDefaultValue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">orElse</span></span>
<span class="line"><span style="color:#24292E;">getDefaultValue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">orElseGet</span></span>
<span class="line"><span style="color:#24292E;">getDefaultValue</span></span></code></pre></div><p>输出结果是相似的，没什么太大的不同，这是在 Optional 对象的值为 null 的情况下。假如 Optional 对象的值不为 null 呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orElse</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(name).</span><span style="color:#62E884;">orElse</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">getDefaultValue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">orElseGet</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(name).</span><span style="color:#62E884;">orElseGet</span><span style="color:#F6F6F4;">(OrElseOptionalDemo</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">getDefaultValue);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">    String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orElse&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String name2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getDefaultValue</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;orElseGet&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String name3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name).</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(OrElseOptionalDemo</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getDefaultValue);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>输出结果如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">orElse</span></span>
<span class="line"><span style="color:#F6F6F4;">getDefaultValue</span></span>
<span class="line"><span style="color:#F6F6F4;">orElseGet</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">orElse</span></span>
<span class="line"><span style="color:#24292E;">getDefaultValue</span></span>
<span class="line"><span style="color:#24292E;">orElseGet</span></span></code></pre></div><p>咦，<code>orElseGet()</code> 没有去调用 <code>getDefaultValue()</code>。哪个方法的性能更佳，你明白了吧？</p><h3 id="_07、获取值" tabindex="-1">07、获取值 <a class="header-anchor" href="#_07、获取值" aria-label="Permalink to &quot;07、获取值&quot;">​</a></h3><p>直观从语义上来看，<code>get()</code> 方法才是最正宗的获取 Optional 对象值的方法，但很遗憾，该方法是有缺陷的，因为假如 Optional 对象的值为 null，该方法会抛出 NoSuchElementException 异常。这完全与我们使用 Optional 类的初衷相悖。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">GetOptionalDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; optOrNull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(optOrNull.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetOptionalDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optOrNull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optOrNull.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段程序在运行时会抛出异常：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Exception in thread &quot;main&quot; java.util.NoSuchElementException: No value present</span></span>
<span class="line"><span style="color:#f6f6f4;">	at java.base/java.util.Optional.get(Optional.java:141)</span></span>
<span class="line"><span style="color:#f6f6f4;">	at com.cmower.dzone.optional.GetOptionalDemo.main(GetOptionalDemo.java:9)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Exception in thread &quot;main&quot; java.util.NoSuchElementException: No value present</span></span>
<span class="line"><span style="color:#24292e;">	at java.base/java.util.Optional.get(Optional.java:141)</span></span>
<span class="line"><span style="color:#24292e;">	at com.cmower.dzone.optional.GetOptionalDemo.main(GetOptionalDemo.java:9)</span></span></code></pre></div><p>尽管抛出的异常是 NoSuchElementException 而不是 NPE，但在我们看来，显然是在“五十步笑百步”。建议 <code>orElseGet()</code> 方法获取 Optional 对象的值。</p><h3 id="_08、过滤值" tabindex="-1">08、过滤值 <a class="header-anchor" href="#_08、过滤值" aria-label="Permalink to &quot;08、过滤值&quot;">​</a></h3><p>小王通过 Optional 类对之前的代码进行了升级，完成后又兴高采烈地跑去找老马要任务了。老马觉得这小伙子不错，头脑灵活，又干活积极，很值得培养，就又交给了小王一个新的任务：用户注册时对密码的长度进行检查。</p><p>小王拿到任务后，乐开了花，因为他刚要学习 Optional 类的 <code>filter()</code> 方法，这就派上了用场。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FilterOptionalDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">12345</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(password);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(opt.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(pwd </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> pwd.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FilterOptionalDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(password);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(opt.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(pwd </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>filter()</code> 方法的参数类型为 Predicate（Java 8 新增的一个函数式接口），也就是说可以将一个 Lambda 表达式传递给该方法作为条件，如果表达式的结果为 false，则返回一个 EMPTY 的 Optional 对象，否则返回过滤后的 Optional 对象。</p><p>在上例中，由于 password 的长度为 5 ，所以程序输出的结果为 false。假设密码的长度要求在 6 到 10 位之间，那么还可以再追加一个条件。来看小王增加难度后的代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Predicate</span><span style="color:#F6F6F4;">&lt;String&gt; len6 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pwd </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> pwd.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Predicate</span><span style="color:#F6F6F4;">&lt;String&gt; len10 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pwd </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> pwd.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1234567</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(password);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> opt.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(len6.</span><span style="color:#62E884;">and</span><span style="color:#F6F6F4;">(len10)).</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(result);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Predicate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; len6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pwd </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Predicate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; len10 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pwd </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1234567&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(password);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opt.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(len6.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(len10)).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span></code></pre></div><p>这次程序输出的结果为 true，因为密码变成了 7 位，在 6 到 10 位之间。想象一下，假如小王使用 if-else 来完成这个任务，代码该有多冗长。</p><h3 id="_09、转换值" tabindex="-1">09、转换值 <a class="header-anchor" href="#_09、转换值" aria-label="Permalink to &quot;09、转换值&quot;">​</a></h3><p>小王检查完了密码的长度，仍然觉得不够尽兴，觉得要对密码的强度也进行检查，比如说密码不能是“password”，这样的密码太弱了。于是他又开始研究起了 <code>map()</code> 方法，该方法可以按照一定的规则将原有 Optional 对象转换为一个新的 Optional 对象，原有的 Optional 对象不会更改。</p><p>先来看小王写的一个简单的例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OptionalMapDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt; nameOptional </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(name);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;Integer&gt; intOpt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> nameOptional</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(String</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">length);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">( intOpt.</span><span style="color:#62E884;">orElse</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionalMapDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nameOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(name);</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; intOpt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nameOptional</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">length);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">( intOpt.</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在上面这个例子中，<code>map()</code> 方法的参数 <code>String::length</code>，意味着要 将原有的字符串类型的 Optional 按照字符串长度重新生成一个新的 Optional 对象，类型为 Integer。</p><p>搞清楚了 <code>map()</code> 方法的基本用法后，小王决定把 <code>map()</code> 方法与 <code>filter()</code> 方法结合起来用，前者用于将密码转化为小写，后者用于判断长度以及是否是“password”。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OptionalMapFilterDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Optional</span><span style="color:#F6F6F4;">&lt;String&gt;  opt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Optional.</span><span style="color:#62E884;">ofNullable</span><span style="color:#F6F6F4;">(password);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Predicate</span><span style="color:#F6F6F4;">&lt;String&gt; len6 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pwd </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> pwd.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Predicate</span><span style="color:#F6F6F4;">&lt;String&gt; len10 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pwd </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> pwd.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Predicate</span><span style="color:#F6F6F4;">&lt;String&gt; eq </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pwd </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> pwd.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> opt.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(String</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">toLowerCase).</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(len6.</span><span style="color:#62E884;">and</span><span style="color:#F6F6F4;">(len10 ).</span><span style="color:#62E884;">and</span><span style="color:#F6F6F4;">(eq)).</span><span style="color:#62E884;">isPresent</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(result);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OptionalMapFilterDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;  opt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(password);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Predicate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; len6 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pwd </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Predicate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; len10 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pwd </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Predicate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; eq </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pwd </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> pwd.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opt.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">toLowerCase).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(len6.</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(len10 ).</span><span style="color:#6F42C1;">and</span><span style="color:#24292E;">(eq)).</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><img src="`+p+'"><p>好了，我亲爱的读者朋友，以上就是本文的全部内容了——可以说是史上最佳 Optional 指南了，能看到这里的都是最优秀的程序员，二哥必须要伸出大拇指为你点个赞。</p><hr>',79),e=[t];function c(r,y,F,i,E,d){return a(),n("div",null,e)}const m=s(o,[["render",c]]);export{g as __pageData,m as default};
