import{_ as a,o as e,c as r,V as o}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-17.md","filePath":"interview/backend/java/java-17.md"}'),t={name:"interview/backend/java/java-17.md"},s=o('<h3 id="_1、parallel-old-收集器-多线程标记整理算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1parallel-old-%E6%94%B6%E9%9B%86%E5%99%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">1、Parallel Old 收集器（多线程标记整理算法）</a> <a class="header-anchor" href="#_1、parallel-old-收集器-多线程标记整理算法" aria-label="Permalink to &quot;[1、Parallel Old 收集器（多线程标记整理算法）](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#1parallel-old-收集器多线程标记整理算法)&quot;">​</a></h3><p>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在 JDK1.6才开始提供。</p><p>在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量， Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器， 如果系统对吞吐量要求比较高，可以优先考虑新生代Parallel Scavenge和年老代 Parallel Old 收集器的搭配策略。</p><h3 id="_2、对象分配内存是否线程安全" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%98%AF%E5%90%A6%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8" target="_blank" rel="noreferrer">2、对象分配内存是否线程安全？</a> <a class="header-anchor" href="#_2、对象分配内存是否线程安全" aria-label="Permalink to &quot;[2、对象分配内存是否线程安全？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#2对象分配内存是否线程安全)&quot;">​</a></h3><p>对象创建十分频繁，即使修改一个指针的位置在并发下也不是线程安全的，可能正给对象 A 分配内存，指针还没来得及修改，对象 B 又使用了指针来分配内存。</p><p>解决方法：① CAS 加失败重试保证更新原子性。② 把内存分配按线程划分在不同空间，即每个线程在 Java 堆中预先分配一小块内存，叫做本地线程分配缓冲 TLAB，哪个线程要分配内存就在对应的 TLAB 分配，TLAB 用完了再进行同步。</p><h3 id="_3、当一个线程进入某个对象的一个synchronized的实例方法后-其它线程是否可进入此对象的其它方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E5%BD%93%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E8%BF%9B%E5%85%A5%E6%9F%90%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%B8%AAsynchronized%E7%9A%84%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E5%90%8E%E5%85%B6%E5%AE%83%E7%BA%BF%E7%A8%8B%E6%98%AF%E5%90%A6%E5%8F%AF%E8%BF%9B%E5%85%A5%E6%AD%A4%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">3、当一个线程进入某个对象的一个synchronized的实例方法后，其它线程是否可进入此对象的其它方法？</a> <a class="header-anchor" href="#_3、当一个线程进入某个对象的一个synchronized的实例方法后-其它线程是否可进入此对象的其它方法" aria-label="Permalink to &quot;[3、当一个线程进入某个对象的一个synchronized的实例方法后，其它线程是否可进入此对象的其它方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#3当一个线程进入某个对象的一个synchronized的实例方法后其它线程是否可进入此对象的其它方法)&quot;">​</a></h3><p>如果其他方法没有synchronized的话，其他线程是可以进入的。</p><p>所以要开放一个线程安全的对象时，得保证每个方法都是线程安全的。</p><h3 id="_4、serial-与-parallel-gc-之间的不同之处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4serial-%E4%B8%8E-parallel-gc-%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84" target="_blank" rel="noreferrer">4、Serial 与 Parallel GC 之间的不同之处？</a> <a class="header-anchor" href="#_4、serial-与-parallel-gc-之间的不同之处" aria-label="Permalink to &quot;[4、Serial 与 Parallel GC 之间的不同之处？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#4serial-与-parallel-gc-之间的不同之处)&quot;">​</a></h3><p>Serial 与 Parallel 在 GC 执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认的复制收集器，执行 GC 的时候只有一个线程，而parallel 收集器使用多个 GC 线程来执行。</p><h3 id="_5、为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E6%B3%95-wait,-notify%E5%92%8C-notifyall%E8%A2%AB%E5%AE%9A%E4%B9%89%E5%9C%A8-object-%E7%B1%BB%E9%87%8C" target="_blank" rel="noreferrer">5、为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？</a> <a class="header-anchor" href="#_5、为什么线程通信的方法-wait-notify-和-notifyall-被定义在-object-类里" aria-label="Permalink to &quot;[5、为什么线程通信的方法 wait(), notify()和 notifyAll()被定义在 Object 类里？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#5为什么线程通信的方法-wait,-notify和-notifyall被定义在-object-类里)&quot;">​</a></h3><p>因为Java所有类的都继承了Object，Java想让任何对象都可以作为锁，并且 wait()，notify()等方法用于等待对象的锁或者唤醒线程，在 Java 的线程中并没有可供任何对象使用的锁，所以任意对象调用方法一定定义在Object类中。</p><p>有的人会说，既然是线程放弃对象锁，那也可以把wait()定义在Thread类里面啊，新定义的线程继承于Thread类，也不需要重新定义wait()方法的实现。然而，这样做有一个非常大的问题，一个线程完全可以持有很多锁，你一个线程放弃锁的时候，到底要放弃哪个锁？当然了，这种设计并不是不能实现，只是管理起来更加复杂。</p><h3 id="_6、redux异步中间件之间的优劣" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6redux%E5%BC%82%E6%AD%A5%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%98%E5%8A%A3" target="_blank" rel="noreferrer">6、redux异步中间件之间的优劣?</a> <a class="header-anchor" href="#_6、redux异步中间件之间的优劣" aria-label="Permalink to &quot;[6、redux异步中间件之间的优劣?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#6redux异步中间件之间的优劣)&quot;">​</a></h3><p><strong>redux-thunk优点:</strong></p><p><strong>1、</strong> 体积小: redux-thunk的实现方式很简单,只有不到20行代码</p><p><strong>2、</strong> 使用简单: redux-thunk没有引入像redux-saga或者redux-observable额外的范式,上手简单</p><p><strong>redux-thunk缺陷:</strong></p><p><strong>1、</strong> 样板代码过多: 与redux本身一样,通常一个请求需要大量的代码,而且很多都是重复性质的</p><p><strong>2、</strong> 耦合严重: 异步操作与redux的action偶合在一起,不方便管理</p><p><strong>3、</strong> 功能孱弱: 有一些实际开发中常用的功能需要自己进行封装</p><p><strong>redux-saga优点:</strong></p><p><strong>1、</strong> 异步解耦: 异步操作被被转移到单独 saga.js 中，不再是掺杂在 action.js 或 component.js 中</p><p><strong>2、</strong> action摆脱thunk function: dispatch 的参数依然是一个纯粹的 action (FSA)，而不是充满 “黑魔法” thunk function</p><p><strong>3、</strong> 异常处理: 受益于 generator function 的 saga 实现，代码异常/请求失败 都可以直接通过 try/catch 语法直接捕获处理</p><p><strong>4、</strong> 功能强大: redux-saga提供了大量的Saga 辅助函数和Effect 创建器供开发者使用,开发者无须封装或者简单封装即可使用</p><p><strong>5、</strong> 灵活: redux-saga可以将多个Saga可以串行/并行组合起来,形成一个非常实用的异步flow</p><p><strong>6、</strong> 易测试，提供了各种case的测试方案，包括mock task，分支覆盖等等</p><p><strong>redux-saga缺陷:</strong></p><p><strong>1、</strong> 额外的学习成本: redux-saga不仅在使用难以理解的 generator function,而且有数十个API,学习成本远超redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与redux-observable不同,redux-observable虽然也有额外学习成本但是背后是rxjs和一整套思想</p><p><strong>2、</strong> 体积庞大: 体积略大,代码近2000行，min版25KB左右</p><p><strong>3、</strong> 功能过剩: 实际上并发控制等功能很难用到,但是我们依然需要引入这些代码</p><p><strong>4、</strong> ts支持不友好: yield无法返回TS类型</p><p><strong>redux-observable优点:</strong></p><p><strong>1、</strong> 功能最强: 由于背靠rxjs这个强大的响应式编程的库,借助rxjs的操作符,你可以几乎做任何你能想到的异步处理</p><p><strong>2、</strong> 背靠rxjs: 由于有rxjs的加持,如果你已经学习了rxjs,redux-observable的学习成本并不高,而且随着rxjs的升级redux-observable也会变得更强大</p><p><strong>redux-observable缺陷:</strong></p><p><strong>1、</strong> 学习成本奇高: 如果你不会rxjs,则需要额外学习两个复杂的库</p><p><strong>2、</strong> 社区一般: redux-observable的下载量只有redux-saga的1/5,社区也不够活跃,在复杂异步流中间件这个层面redux-saga仍处于领导地位</p><p>关于redux-saga与redux-observable的详细比较可见<a href="https://hackmd.io/@2qVnJRlJRHCk20dvVxsySA/H1xLHUQ8e?type=view#side-by-side-**comparison**" target="_blank" rel="noreferrer">此链接</a></p><p>最近在备战面试的过程中，整理一下面试题。大多数题目都是自己手敲的，网上也有很多这样的总结。自己感觉总是很乱，所以花了很久把自己觉得重要的东西总结了一下。</p><h3 id="_7、类加载为什么要使用双亲委派模式-有没有什么场景是打破了这个模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%BC%8F%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E6%98%AF%E6%89%93%E7%A0%B4%E4%BA%86%E8%BF%99%E4%B8%AA%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">7、类加载为什么要使用双亲委派模式，有没有什么场景是打破了这个模式？</a> <a class="header-anchor" href="#_7、类加载为什么要使用双亲委派模式-有没有什么场景是打破了这个模式" aria-label="Permalink to &quot;[7、类加载为什么要使用双亲委派模式，有没有什么场景是打破了这个模式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#7类加载为什么要使用双亲委派模式有没有什么场景是打破了这个模式)&quot;">​</a></h3><p><strong>双亲委托模型的重要用途是为了解决类载入过程中的安全性问题。</strong></p><p><strong>1、</strong> 假设有一个开发者自己编写了一个名为<code>java.lang.Object</code>的类，想借此欺骗JVM。现在他要使用自定义<code>ClassLoader</code>来加载自己编写的<code>java.lang.Object</code>类。</p><p><strong>2、</strong> 然而幸运的是，双亲委托模型不会让他成功。因为JVM会优先在<code>Bootstrap ClassLoader</code>的路径下找到<code>java.lang.Object</code>类，并载入它</p><p>Java的类加载是否一定遵循双亲委托模型？</p><p><strong>1、</strong> 在实际开发中，我们可以通过自定义ClassLoader，并重写父类的loadClass方法，来打破这一机制。</p><p><strong>2、</strong> SPI就是打破了双亲委托机制的(SPI：服务提供发现)。</p><h3 id="_8、hibernate中session的load和get方法的区别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8hibernate%E4%B8%ADsession%E7%9A%84load%E5%92%8Cget%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、Hibernate中Session的load和get方法的区别是什么？</a> <a class="header-anchor" href="#_8、hibernate中session的load和get方法的区别是什么" aria-label="Permalink to &quot;[8、Hibernate中Session的load和get方法的区别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#8hibernate中session的load和get方法的区别是什么)&quot;">​</a></h3><p>如果没有找到符合条件的记录，get方法返回null，load方法抛出异常。</p><p>get方法直接返回实体类对象，load方法返回实体类对象的代理。</p><p>在Hibernate 3之前，get方法只在一级缓存中进行数据查找，如果没有找到对应的数据则越过二级缓存，直接发出SQL语句完成数据读取；load方法则可以从二级缓存中获取数据；从Hibernate 3开始，get方法不再是对二级缓存只写不读，它也是可以访问二级缓存的。</p><h3 id="_9、说一下堆内存中对象的分配的基本策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%A0%86%E5%86%85%E5%AD%98%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%86%E9%85%8D%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">9、说一下堆内存中对象的分配的基本策略</a> <a class="header-anchor" href="#_9、说一下堆内存中对象的分配的基本策略" aria-label="Permalink to &quot;[9、说一下堆内存中对象的分配的基本策略](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#9说一下堆内存中对象的分配的基本策略)&quot;">​</a></h3><p>eden区、s0区、s1区都属于新生代，tentired 区属于老年代。大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(Eden区-&gt;Survivor 区后对象的初始年龄变为1)，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold 来设置。另外，大对象和长期存活的对象会直接进入老年代。</p><h3 id="_10、java-中如何将字符串转换为整数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10java-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B4%E6%95%B0" target="_blank" rel="noreferrer">10、Java 中如何将字符串转换为整数？</a> <a class="header-anchor" href="#_10、java-中如何将字符串转换为整数" aria-label="Permalink to &quot;[10、Java 中如何将字符串转换为整数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题大汇总，附答案.md#10java-中如何将字符串转换为整数)&quot;">​</a></h3><p>String s=&quot;123&quot;;</p><p>int i;</p><p>第一种方法：i=Integer.parseInt(s);</p><p>第二种方法：i=Integer.valueOf(s).intValue();</p><h3 id="_11、tcp协议的特点" tabindex="-1">11、Tcp协议的特点 <a class="header-anchor" href="#_11、tcp协议的特点" aria-label="Permalink to &quot;11、Tcp协议的特点&quot;">​</a></h3><h3 id="_12、如何在两个线程间共享数据" tabindex="-1">12、如何在两个线程间共享数据？ <a class="header-anchor" href="#_12、如何在两个线程间共享数据" aria-label="Permalink to &quot;12、如何在两个线程间共享数据？&quot;">​</a></h3><h3 id="_13、java中有没有指针" tabindex="-1">13、java中有没有指针？ <a class="header-anchor" href="#_13、java中有没有指针" aria-label="Permalink to &quot;13、java中有没有指针？&quot;">​</a></h3><h3 id="_14、什么是多线程" tabindex="-1">14、什么是多线程 <a class="header-anchor" href="#_14、什么是多线程" aria-label="Permalink to &quot;14、什么是多线程&quot;">​</a></h3><h3 id="_15、a-hashcode-有什么用-与-a-equals-b-有什么关系" tabindex="-1">15、a.hashCode() 有什么用？与 a.equals(b) 有什么关系？ <a class="header-anchor" href="#_15、a-hashcode-有什么用-与-a-equals-b-有什么关系" aria-label="Permalink to &quot;15、a.hashCode() 有什么用？与 a.equals(b) 有什么关系？&quot;">​</a></h3><h3 id="_16、堆和栈的区别" tabindex="-1">16、堆和栈的区别 <a class="header-anchor" href="#_16、堆和栈的区别" aria-label="Permalink to &quot;16、堆和栈的区别&quot;">​</a></h3><h3 id="_17、jdbc能否处理blob和clob" tabindex="-1">17、JDBC能否处理Blob和Clob？ <a class="header-anchor" href="#_17、jdbc能否处理blob和clob" aria-label="Permalink to &quot;17、JDBC能否处理Blob和Clob？&quot;">​</a></h3><h3 id="_18、什么是线程调度器-thread-scheduler-和时间分片-time-slicing" tabindex="-1">18、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？ <a class="header-anchor" href="#_18、什么是线程调度器-thread-scheduler-和时间分片-time-slicing" aria-label="Permalink to &quot;18、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？&quot;">​</a></h3><h3 id="_19、简述一下面向对象的-六原则一法则-。" tabindex="-1">19、简述一下面向对象的”六原则一法则”。 <a class="header-anchor" href="#_19、简述一下面向对象的-六原则一法则-。" aria-label="Permalink to &quot;19、简述一下面向对象的”六原则一法则”。&quot;">​</a></h3><h3 id="_20、minorgc-majorgc、fullgc都什么时候发生" tabindex="-1">20、MinorGC，MajorGC、FullGC都什么时候发生？ <a class="header-anchor" href="#_20、minorgc-majorgc、fullgc都什么时候发生" aria-label="Permalink to &quot;20、MinorGC，MajorGC、FullGC都什么时候发生？&quot;">​</a></h3><h3 id="_21、jvm-运行时内存" tabindex="-1">21、JVM 运行时内存 <a class="header-anchor" href="#_21、jvm-运行时内存" aria-label="Permalink to &quot;21、JVM 运行时内存&quot;">​</a></h3><h3 id="_22、如何自定义一个异常" tabindex="-1">22、如何自定义一个异常 <a class="header-anchor" href="#_22、如何自定义一个异常" aria-label="Permalink to &quot;22、如何自定义一个异常&quot;">​</a></h3><h3 id="_23、synchronized、volatile、cas比较" tabindex="-1">23、synchronized、volatile、CAS比较 <a class="header-anchor" href="#_23、synchronized、volatile、cas比较" aria-label="Permalink to &quot;23、synchronized、volatile、CAS比较&quot;">​</a></h3><h3 id="_24、jvm有哪些内存区域-jvm的内存布局是什么" tabindex="-1">24、JVM有哪些内存区域？(JVM的内存布局是什么？) <a class="header-anchor" href="#_24、jvm有哪些内存区域-jvm的内存布局是什么" aria-label="Permalink to &quot;24、JVM有哪些内存区域？(JVM的内存布局是什么？)&quot;">​</a></h3><h3 id="_25、强引用、软引用、弱引用、虚引用是什么" tabindex="-1">25、强引用、软引用、弱引用、虚引用是什么？ <a class="header-anchor" href="#_25、强引用、软引用、弱引用、虚引用是什么" aria-label="Permalink to &quot;25、强引用、软引用、弱引用、虚引用是什么？&quot;">​</a></h3><h3 id="_26、java-中垃圾收集的方法有哪些" tabindex="-1">26、Java 中垃圾收集的方法有哪些 <a class="header-anchor" href="#_26、java-中垃圾收集的方法有哪些" aria-label="Permalink to &quot;26、Java 中垃圾收集的方法有哪些&quot;">​</a></h3><h3 id="_27、cms都有哪些问题" tabindex="-1">27、CMS都有哪些问题？ <a class="header-anchor" href="#_27、cms都有哪些问题" aria-label="Permalink to &quot;27、CMS都有哪些问题？&quot;">​</a></h3><h3 id="_28、redux中如何进行异步操作" tabindex="-1">28、redux中如何进行异步操作? <a class="header-anchor" href="#_28、redux中如何进行异步操作" aria-label="Permalink to &quot;28、redux中如何进行异步操作?&quot;">​</a></h3><h3 id="_29、什么是多线程的上下文切换" tabindex="-1">29、什么是多线程的上下文切换 <a class="header-anchor" href="#_29、什么是多线程的上下文切换" aria-label="Permalink to &quot;29、什么是多线程的上下文切换&quot;">​</a></h3><h3 id="_30、为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法" tabindex="-1">30、为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？ <a class="header-anchor" href="#_30、为什么我们调用-start-方法时会执行-run-方法-为什么我们不能直接调用-run-方法" aria-label="Permalink to &quot;30、为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？&quot;">​</a></h3><h3 id="_31、谈谈你知道的垃圾回收算法" tabindex="-1">31、谈谈你知道的垃圾回收算法 <a class="header-anchor" href="#_31、谈谈你知道的垃圾回收算法" aria-label="Permalink to &quot;31、谈谈你知道的垃圾回收算法&quot;">​</a></h3><h3 id="_32、重载与重写" tabindex="-1">32、重载与重写 <a class="header-anchor" href="#_32、重载与重写" aria-label="Permalink to &quot;32、重载与重写&quot;">​</a></h3><h3 id="_33、java-线程数过多会造成什么异常" tabindex="-1">33、Java 线程数过多会造成什么异常？ <a class="header-anchor" href="#_33、java-线程数过多会造成什么异常" aria-label="Permalink to &quot;33、Java 线程数过多会造成什么异常？&quot;">​</a></h3><h3 id="_34、java-中-操作符是线程安全的吗" tabindex="-1">34、Java 中 ++ 操作符是线程安全的吗？ <a class="header-anchor" href="#_34、java-中-操作符是线程安全的吗" aria-label="Permalink to &quot;34、Java 中 ++ 操作符是线程安全的吗？&quot;">​</a></h3><h3 id="_35、三种代理的区别" tabindex="-1">35、三种代理的区别 <a class="header-anchor" href="#_35、三种代理的区别" aria-label="Permalink to &quot;35、三种代理的区别&quot;">​</a></h3><h3 id="_36、在不使用-stringbuffer-的前提下-怎么反转一个字符串" tabindex="-1">36、在不使用 StringBuffer 的前提下，怎么反转一个字符串？ <a class="header-anchor" href="#_36、在不使用-stringbuffer-的前提下-怎么反转一个字符串" aria-label="Permalink to &quot;36、在不使用 StringBuffer 的前提下，怎么反转一个字符串？&quot;">​</a></h3><h3 id="_37、什么叫线程安全-servlet-是线程安全吗" tabindex="-1">37、什么叫线程安全？servlet 是线程安全吗? <a class="header-anchor" href="#_37、什么叫线程安全-servlet-是线程安全吗" aria-label="Permalink to &quot;37、什么叫线程安全？servlet 是线程安全吗?&quot;">​</a></h3><h3 id="_38、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" tabindex="-1">38、short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？ <a class="header-anchor" href="#_38、short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗" aria-label="Permalink to &quot;38、short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？&quot;">​</a></h3><h3 id="_39、如果你提交任务时-线程池队列已满-这时会发生什么" tabindex="-1">39、如果你提交任务时，线程池队列已满，这时会发生什么 <a class="header-anchor" href="#_39、如果你提交任务时-线程池队列已满-这时会发生什么" aria-label="Permalink to &quot;39、如果你提交任务时，线程池队列已满，这时会发生什么&quot;">​</a></h3><h3 id="_40、什么情况下会发生栈溢出" tabindex="-1">40、什么情况下会发生栈溢出？ <a class="header-anchor" href="#_40、什么情况下会发生栈溢出" aria-label="Permalink to &quot;40、什么情况下会发生栈溢出？&quot;">​</a></h3><h3 id="_41、死锁与活锁的区别-死锁与饥饿的区别" tabindex="-1">41、死锁与活锁的区别，死锁与饥饿的区别？ <a class="header-anchor" href="#_41、死锁与活锁的区别-死锁与饥饿的区别" aria-label="Permalink to &quot;41、死锁与活锁的区别，死锁与饥饿的区别？&quot;">​</a></h3>',91),l=[s];function n(E,i,h,d,B,c){return e(),r("div",null,l)}const b=a(t,[["render",n]]);export{A as __pageData,b as default};
