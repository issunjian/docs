import{_ as a,o as s,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/依赖关系.3a81f2dc.png",l="/docs/assets/依赖注入.47984c26.png",p="/docs/assets/bean.4c879f04.png",C=JSON.parse('{"title":"Spring IOC","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/spring/SpringIOC.md","filePath":"java/javaee/spring/SpringIOC.md"}'),t={name:"java/javaee/spring/SpringIOC.md"},c=e('<h1 id="spring-ioc" tabindex="-1">Spring IOC <a class="header-anchor" href="#spring-ioc" aria-label="Permalink to &quot;Spring IOC&quot;">​</a></h1><p><a href="https://www.jianshu.com/p/ad05cfe7868e" target="_blank" rel="noreferrer">https://www.jianshu.com/p/ad05cfe7868e</a></p><hr><h2 id="ioc-原理" tabindex="-1">IOC 原理 <a class="header-anchor" href="#ioc-原理" aria-label="Permalink to &quot;IOC 原理&quot;">​</a></h2><h3 id="代码耦合" tabindex="-1">代码耦合 <a class="header-anchor" href="#代码耦合" aria-label="Permalink to &quot;代码耦合&quot;">​</a></h3><p>实际开发中，我们如果在对象 A 内部去创建、修改或者注销另一个对象 B，这会导致对象之间非常复杂的依赖关系，不利于代码的维护更新。</p><p>比如我们直接在上层类内调用了底层类的构造方法，一旦底层类的构造方法发生改变，就必须修改所有上层类的代码。</p><p><img src="'+o+'" alt=""></p><h3 id="依赖注入" tabindex="-1">依赖注入 <a class="header-anchor" href="#依赖注入" aria-label="Permalink to &quot;依赖注入&quot;">​</a></h3><p>( Dependency Injection ) 我们用依赖注入的方式来降低耦合度。所谓依赖注入，就是把底层对象作为参数传入上层对象。避免底层类被修改后上层类代码也要随之改动。我们一般通过构造方法或者 setter 方法注入底层对象。</p><ol><li><p>设值注入：依赖的对象通过 setter 方法传入的，对象已经实例化，发生属性填充和依赖注入的时候。</p></li><li><p>构造注入：依赖的对象是通过构造器传入，发生在实例化 Bean 的时候。</p></li></ol><p><em>主要采用设值注入，性能更好更易读。但对于依赖关系无需变化的 Bean 采用构造注入。所有的依赖关系全部在构造器内设定。</em></p><p><img src="'+l+`" alt=""></p><p>优势：使用依赖注入后，即使底层类发生变化，上层类代码也不必改动，大大降低了代码的耦合度。</p><p>劣势：但这也导致了我们在初始化对象的过程中要书写复杂的代码。</p><h3 id="控制反转" tabindex="-1">控制反转 <a class="header-anchor" href="#控制反转" aria-label="Permalink to &quot;控制反转&quot;">​</a></h3><p>( Inversion of Control ) 控制反转，将对象的管理权交给 IOC 容器。</p><p>Spring 框架内会定义一个 IOC 容器类，通过其来统一管理对象的生命周期：创建、资源存取、注销；并自动维护对象间的依赖关系。用户只需要配置 XML 文件或者添加注解标明类之间的映射关系，初始化过程中的代码将由 IOC 容器自动完成。</p><p>IOC 容器底层通过工厂模式和 Java 反射机制来实现：</p><ol><li>IOC 容器根据 XML 配置文件或者注解读取 Bean 中保存的对象信息。</li><li>IOC 容器充当工厂类，利用 Java 反射机制读取需要生成哪些对象，来自动生成相应的对象。</li></ol><hr><h2 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h2><h3 id="ioc-容器" tabindex="-1">IOC 容器 <a class="header-anchor" href="#ioc-容器" aria-label="Permalink to &quot;IOC 容器&quot;">​</a></h3><p>在 Spring 框架中已经定义了 ApplicationContext 和 BeanFactory 作为 IOC 容器类。其中 ApplicationContext是 BeanFactory 的子类，提供了事件发布、国际化信息支持等其他高级特性。</p><p>我们可以通过 IOC 容器类的 setBean 方法创建 Bean ，也可以通过 getBean 方法把 Bean 实例化并使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testUser</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 加载配置文件，创建 IOC 容器对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ApplicationContext</span><span style="color:#F6F6F4;"> context </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathXmlApplicationContext</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">spring.xml</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// IOC 容器根据 Bean 创建对象实例</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> newUser </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Person) context.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 调用对象方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(newUser.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUser</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 加载配置文件，创建 IOC 容器对象</span></span>
<span class="line"><span style="color:#24292E;">    ApplicationContext context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathXmlApplicationContext</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;spring.xml&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// IOC 容器根据 Bean 创建对象实例</span></span>
<span class="line"><span style="color:#24292E;">    Person newUser </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Person) context.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;person&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用对象方法</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(newUser.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="java-bean" tabindex="-1">Java Bean <a class="header-anchor" href="#java-bean" aria-label="Permalink to &quot;Java Bean&quot;">​</a></h3><p>Java Bean 就是程序中被管理的对象在 IOC 容器中的代理，记录了对象信息。</p><p>Bean 包含以下参数：Bean 名称(name) 、所代理的类(class) 、以及作用域(scope)。</p><h4 id="bean-的作用域" tabindex="-1">Bean 的作用域 <a class="header-anchor" href="#bean-的作用域" aria-label="Permalink to &quot;Bean 的作用域&quot;">​</a></h4><ul><li><strong>singleton 单例模式</strong>（默认）： 在整个 IoC 容器中，Bean 只有一个对象实例。</li><li><strong>prototype 原型模式</strong>： 每次调用 Ioc 容器的 getBean 方法，都将产生一个新的对象实例。</li><li><strong>request</strong>： 对于每次 HTTP 请求，Bean 都将产生一个新的对象实例。</li><li><strong>session</strong>： 对于每个 HTTP Session，Bean 都将产生一个新的对象实例。</li><li><strong>global session</strong>： 对于每个全局的 HTTP Session，Bean 都将产生一个新的对象实例。</li></ul><h4 id="bean-的生命周期" tabindex="-1">Bean 的生命周期 <a class="header-anchor" href="#bean-的生命周期" aria-label="Permalink to &quot;Bean 的生命周期&quot;">​</a></h4><p>Spring 对 Bean 方法进行了抽象和封装，开发者只需要进行配置和调用简单接口，具体实现都交付给 Spring 工厂来管理。</p><p>在调用 getBean 方法时，Spring 的工作流大致可分为以下两步：</p><ol><li>解析：读 xml 配置，扫描类文件，从配置或者注解中获取 Bean 的定义信息，注册一些扩展功能。</li><li>加载：通过解析完的定义信息获取 Bean 实例。</li></ol><p><img src="`+p+`" alt=""></p><p>获取 BeanName，对传入的 name 进行解析，转化为可以从 Map 中获取到 BeanDefinition 的 bean name。 合并 Bean 定义，对父类的定义进行合并和覆盖，如果父类还有父类，会进行递归合并，以获取完整的 Bean 定义信息。 实例化，使用构造或者工厂方法创建 Bean 实例。 属性填充，寻找并且注入依赖，依赖的 Bean 还会递归调用 getBean 方法获取。 初始化，调用自定义的初始化方法。 获取最终的 Bean，如果是 FactoryBean 需要调用 getObject 方法，如果需要类型转换调用 TypeConverter 进行转化。</p><h4 id="循环依赖" tabindex="-1">循环依赖 <a class="header-anchor" href="#循环依赖" aria-label="Permalink to &quot;循环依赖&quot;">​</a></h4><p>三个类 A、B、C，然后 A 关联 B，B 关联 C，C 又关联 A，这就形成了一个循环依赖。如果是方法调用是不算循环依赖的，循环依赖必须要持有引用。</p><ol><li>构造器循环依赖。依赖的对象是通过构造器传入的，发生在实例化 Bean 的时候。</li></ol><p>无法解决</p><ol start="2"><li>设值循环依赖。依赖的对象是通过 setter 方法传入的，对象已经实例化，发生属性填充和依赖注入的时候。</li></ol><p>Spring 框架只支持单例下的设值循环依赖。原型模式检测到循环依赖会直接抛出 BeanCurrentlyInCreationException 异常。</p><p><a href="https://www.jianshu.com/p/9ea61d204559" target="_blank" rel="noreferrer">https://www.jianshu.com/p/9ea61d204559</a></p><hr><h2 id="ioc-注解详解" tabindex="-1">IOC 注解详解 <a class="header-anchor" href="#ioc-注解详解" aria-label="Permalink to &quot;IOC 注解详解&quot;">​</a></h2><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>为类添加 <code>@Configuration</code> 注解，表示该类为配置类。起到类似 XML 文件的作用，配置 IOC 容器用来管理 Bean。</p><h4 id="组件扫描" tabindex="-1">组件扫描 <a class="header-anchor" href="#组件扫描" aria-label="Permalink to &quot;组件扫描&quot;">​</a></h4><p>为配置类添加 <code>@ComponentScan</code> 注解，启用组件扫描。配置类将根据注解向 IOC 容器添加 Bean，默认扫描本类中的 @Bean 方法。</p><p>可以指定需要扫描的包，这会扫描包内的所有组件。如 <code>@ComponentScan(value=&quot;com.company.project&quot;)</code>。</p><h3 id="注册-setbean" tabindex="-1">注册 (setBean) <a class="header-anchor" href="#注册-setbean" aria-label="Permalink to &quot;注册 (setBean)&quot;">​</a></h3><ul><li><strong>为类添加 <code>@Component</code> 注解</strong></li></ul><p>表示该类型被注册为 Bean 。Bean 的名称默认为类名的首字母小写，作用域默认为单例模式。</p><ol><li><p>可以为注册的 Bean 指定名称，等同于 <code>@Component(&quot;car&quot;)</code> 。</p></li><li><p>可以为注册的 Bean 指定作用域，如 <code>@Component(&quot;prototype&quot;)</code> 。</p></li></ol><p>在 Spring MVC 中，我们可以把 <code>@Component</code> 细化为：</p><ul><li><code>@Controller</code> 注解：表示展示层的 Bean</li><li><code>@Service</code> 注解：表示业务层的 Bean</li><li><code>@Repository</code> 注解：表示数据访问层的 Bean</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Scope</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">prototype</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Car</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Vehicle</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">AutoWired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FrameWork</span><span style="color:#F6F6F4;"> frameWork;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Scope</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;prototype&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vehicle</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">AutoWired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> FrameWork frameWork;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>为方法添加 <code>@Bean</code> 注解</strong></li></ul><p>方法返回类型将被注册为 Bean。Bean 的名称默认为方法名，作用域默认为单例模式。</p><ul><li><p>可以为注册的 Bean 指定名称，等同于 <code>@Bean(name = &quot;myFoo&quot;)</code> 。</p></li><li><p>主要用在 @Configuration 注解的类里，也可以用在 @Component 注解的类里。</p></li></ul><h3 id="装配-getbean" tabindex="-1">装配 (getBean) <a class="header-anchor" href="#装配-getbean" aria-label="Permalink to &quot;装配 (getBean)&quot;">​</a></h3><ul><li><strong>为对象添加 <code>@Autowired</code> 注解</strong></li></ul><p>表示自动装配。在使用对象时 Spring 将<strong>根据类型</strong>自动查找 Bean 去创建对象，无法找到 Bean 则抛出异常。</p><ol><li><p>如果想要在无法找到 Bean 时返回 null 值，则将注解改为 <code>@Autowired(required=false)</code> 。</p></li><li><p>如果自动装配对象的类型是接口，而配置的实现类 Bean 有多个。则必须用 <code>@Qualifier</code> 注解来指定 Bean 的名称。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Qualifier</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">car</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Vehicle</span><span style="color:#F6F6F4;"> vehicle;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;car&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Vehicle vehicle;</span></span></code></pre></div><ul><li><strong>为对象添加 <code>@Resource</code> 注解</strong></li></ul><p>表示自动装配。默认按对象名称去查找 Bean，找不到再按类型去查找 Bean。</p><ol><li><p>注解可以指定按名称或者类型去查找 Bean，如 <code>@Resource(name=&quot;car&quot;)</code> 或者 <code>@Resource(type=Car.class)</code>。</p></li><li><p>也可以同时按名称和类型查找 Bean，任何一个不匹配都将报错。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Resource</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">car</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Vehicle</span><span style="color:#F6F6F4;"> vehicle;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Resource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;car&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Vehicle vehicle;</span></span></code></pre></div><blockquote><p>@Autowired 是 Spring 的注解，@Resource 是 J2EE 的注解。</p></blockquote>`,71),r=[c];function i(y,F,d,h,u,E){return s(),n("div",null,r)}const B=a(t,[["render",i]]);export{C as __pageData,B as default};
