import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"LeetCode 24. 两两交换链表中的节点","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/linked-list/24.两两交换链表中的节点.md","filePath":"algorithm/linked-list/24.两两交换链表中的节点.md"}'),p={name:"algorithm/linked-list/24.两两交换链表中的节点.md"},o=l(`<h1 id="leetcode-24-两两交换链表中的节点" tabindex="-1">LeetCode 24. 两两交换链表中的节点 <a class="header-anchor" href="#leetcode-24-两两交换链表中的节点" aria-label="Permalink to &quot;LeetCode 24. 两两交换链表中的节点&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">给定 </span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">3</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, 你应该返回 </span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">4</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">3.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">给定 </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, 你应该返回 </span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">3.</span></span></code></pre></div><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p><strong>非递归解法</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">head</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">swapPairs</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">head</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (head </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> head.next </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> head;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> hummyHead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ListNode</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 虚拟节点</span></span>
<span class="line"><span style="color:#F6F6F4;">  hummyHead.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> hummyHead;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> node1, node2; </span><span style="color:#7B7F8B;">// 当前要交换的两个节点</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((node1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (node2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next.next)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 进行交换操作</span></span>
<span class="line"><span style="color:#F6F6F4;">    node1.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node2.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">    node2.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node1;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 将链表串起来</span></span>
<span class="line"><span style="color:#F6F6F4;">    p.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node2;</span></span>
<span class="line"><span style="color:#F6F6F4;">    p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node1;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> hummyHead.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">head</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swapPairs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> head.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> hummyHead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 虚拟节点</span></span>
<span class="line"><span style="color:#24292E;">  hummyHead.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hummyHead;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> node1, node2; </span><span style="color:#6A737D;">// 当前要交换的两个节点</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((node1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (node2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next.next)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 进行交换操作</span></span>
<span class="line"><span style="color:#24292E;">    node1.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node2.next;</span></span>
<span class="line"><span style="color:#24292E;">    node2.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将链表串起来</span></span>
<span class="line"><span style="color:#24292E;">    p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node2;</span></span>
<span class="line"><span style="color:#24292E;">    p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node1;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hummyHead.next;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><strong>递归解法</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">head</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">swapPairs</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">head</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">head </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">head.next) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> head;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> node1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head,</span></span>
<span class="line"><span style="color:#F6F6F4;">    node2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">  node1.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">swapPairs</span><span style="color:#F6F6F4;">(node2.next);</span></span>
<span class="line"><span style="color:#F6F6F4;">  node2.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node1;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> node2;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">head</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swapPairs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">head </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">head.next) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> node1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head,</span></span>
<span class="line"><span style="color:#24292E;">    node2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head.next;</span></span>
<span class="line"><span style="color:#24292E;">  node1.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swapPairs</span><span style="color:#24292E;">(node2.next);</span></span>
<span class="line"><span style="color:#24292E;">  node2.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node1;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> node2;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">学如逆水行舟，不进则退</span></span></code></pre></div>`,13),e=[o];function t(c,r,y,F,i,d){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{h as __pageData,C as default};
