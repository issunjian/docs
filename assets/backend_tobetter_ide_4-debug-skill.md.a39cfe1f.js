import{_ as s,o as a,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const l="/docs/assets/4-debug-skill-e69c965f-f7e5-4e91-a92d-a43a1d0aced4.ddce2e90.jpg",p="/docs/assets/4-debug-skill-c4c511af-b00d-458b-a4a1-97d1fe1e84b8.36942792.jpg",o="/docs/assets/4-debug-skill-4c35cab7-83d2-45b4-8a27-ebeceb41ce08.fe931129.jpg",t="/docs/assets/4-debug-skill-b81dc459-5a9c-4e0e-b24e-350943299eda.b227687d.jpg",c="/docs/assets/4-debug-skill-edbc1de2-4dd6-49a3-9a6a-5948d19aabee.db554d67.jpg",r="/docs/assets/4-debug-skill-92ad72da-4bf1-4bc4-b21d-78c33114dc96.02285b9f.jpg",m=JSON.parse('{"title":"分享 4 个阅读源码必备的 IDEA 调试技巧","description":"几个我日常工作以及阅读源码必备的 IntelliJ IDEA 高级调试技巧，分分钟要起飞的节奏。","frontmatter":{"title":"分享 4 个阅读源码必备的 IDEA 调试技巧","shortTitle":"4个阅读源码必备的IDEA调试技巧","category":["开发/构建工具"],"tag":["IDEA"],"description":"几个我日常工作以及阅读源码必备的 IntelliJ IDEA 高级调试技巧，分分钟要起飞的节奏。","head":[["meta",{"name":"keywords","content":"Intellij IDEA,IDEA,Intellij IDEA 调试技巧,IDEA 调试技巧"}]]},"headers":[],"relativePath":"backend/tobetter/ide/4-debug-skill.md","filePath":"backend/tobetter/ide/4-debug-skill.md"}'),i={name:"backend/tobetter/ide/4-debug-skill.md"},d=e(`<p>大家好，我是二哥！今天给大家带来几个我日常工作以及阅读源码必备的 IntelliJ IDEA 高级调试技巧，分分钟要起飞的节奏。</p><h2 id="断点处添加-log" tabindex="-1">断点处添加 log <a class="header-anchor" href="#断点处添加-log" aria-label="Permalink to &quot;断点处添加 log&quot;">​</a></h2><p>很多程序员在调试代码时都喜欢 <code>print</code> 一些内容，这样看起来更直观，print 完之后又很容易忘记删除掉这些没用的内容，最终将代码提交到 <code>remote</code>，code review 时又不得不删减这些内容重新提交，不但增加不必要的工作量，还让 <code>log tree</code> 的一些节点没有任何价值</p><p>IntelliJ IDEA 提供 <code>Evaluate and Log at Breakpoints</code> 功能恰巧可以帮助我们解决这个问题, 来看下面代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] args) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">ThreadLocalRandom</span><span style="color:#F6F6F4;"> random </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ThreadLocalRandom.</span><span style="color:#62E884;">current</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">isInterested</span><span style="color:#F6F6F4;">(random.</span><span style="color:#62E884;">nextInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">))) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    count</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">   }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Found %d interested values%n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, count);</span></span>
<span class="line"><span style="color:#F6F6F4;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isInterested</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">  ThreadLocalRandom random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ThreadLocalRandom.</span><span style="color:#6F42C1;">current</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isInterested</span><span style="color:#24292E;">(random.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))) {</span></span>
<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found %d interested values%n&quot;</span><span style="color:#24292E;">, count);</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isInterested</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>假如我们想在第 15 行查看每次调用，随即出来的 i 的值到底是多少，我们没必要在这个地方添加任何 log，在正常加断点的地方使用快捷键 <code>Shift + 鼠标左键</code>，就会弹出下面的内容</p><img src="`+l+`"><p>勾选上 <code>Evaluate and log</code>, 并自定义你想查看的 log/变量，比如这里的 <code>&quot;interested&quot; + i</code>, 这样以 Debug 模式运行程序（正常模式运行，不会打印这些 log）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">interested 7</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 5</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 1</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 2</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 0</span></span>
<span class="line"><span style="color:#f6f6f4;">Found 2 interested values</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">interested 7</span></span>
<span class="line"><span style="color:#24292e;">interested 5</span></span>
<span class="line"><span style="color:#24292e;">interested 1</span></span>
<span class="line"><span style="color:#24292e;">interested 2</span></span>
<span class="line"><span style="color:#24292e;">interested 0</span></span>
<span class="line"><span style="color:#24292e;">Found 2 interested values</span></span></code></pre></div><p>如果你在多处添加了这种断点，简单的看 log 可能偶尔还是不够直观，可以勾选上面图片绿色框线的 <code>&quot;Breakpoint hit&quot; message</code> :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 6</span></span>
<span class="line"><span style="color:#f6f6f4;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 0</span></span>
<span class="line"><span style="color:#f6f6f4;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 9</span></span>
<span class="line"><span style="color:#f6f6f4;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 8</span></span>
<span class="line"><span style="color:#f6f6f4;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#f6f6f4;">interested 1</span></span>
<span class="line"><span style="color:#f6f6f4;">Found 3 interested values</span></span>
<span class="line"><span style="color:#f6f6f4;">Disconnected from the target VM, address: &#39;127.0.0.1:0&#39;, transport: &#39;socket&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Process finished with exit code</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#24292e;">interested 6</span></span>
<span class="line"><span style="color:#24292e;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#24292e;">interested 0</span></span>
<span class="line"><span style="color:#24292e;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#24292e;">interested 9</span></span>
<span class="line"><span style="color:#24292e;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#24292e;">interested 8</span></span>
<span class="line"><span style="color:#24292e;">Breakpoint reached at top.dayarch.TestDebug.isInterested(TestDebug.java:49)</span></span>
<span class="line"><span style="color:#24292e;">interested 1</span></span>
<span class="line"><span style="color:#24292e;">Found 3 interested values</span></span>
<span class="line"><span style="color:#24292e;">Disconnected from the target VM, address: &#39;127.0.0.1:0&#39;, transport: &#39;socket&#39;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Process finished with exit code</span></span></code></pre></div><p>如果你想要更详细的信息，那就勾选上 <code>Stack trace</code> (大家自己查看运行结果吧)，有了这个功能，上面说的一些问题都不复存在了</p><h2 id="字段断点" tabindex="-1">字段断点 <a class="header-anchor" href="#字段断点" aria-label="Permalink to &quot;字段断点&quot;">​</a></h2><p>如果你阅读源码，你一定会有个困扰，类中的某个字段的值到底是在哪里改变的，你要一点点追踪调用栈，逐步排查，稍不留神，就可能有遗漏</p><blockquote><p>我们可以在 IntelliJ IDEA 中为某个字段添加断点，当字段值有修改时，自动跳到相应方法位置</p></blockquote><p>使用起来很简单：</p><ol><li>在字段定义处鼠标左键添加断点（会出现「眼睛」的图标）</li><li>在「眼睛」图标上鼠标右键</li><li>在弹框中勾选上<code>Field access</code> 和<code>Field modification</code> 两个选项</li></ol><p>如果修改字段值的方法比较多，也可以在 <code>Condition</code> 的地方定义断点进入条件, 有了这个功能的加成，相信你阅读源码会顺畅许多</p><h2 id="异常断点" tabindex="-1">异常断点 <a class="header-anchor" href="#异常断点" aria-label="Permalink to &quot;异常断点&quot;">​</a></h2><p>除了阅读源码，一定是遇到了异常我们才开始调试代码，代码在抛出异常之后会自动停止，但是我们希望：</p><blockquote><p>代码停在抛出异常之前，方便我们查看当时的变量信息</p></blockquote><p>这时我们就用到了 <code>Exception Breakpoints</code>, 当抛出异常时，在 catch 的地方打上断点，可以通过下图的几个位置获取栈顶异常类型，比如这里的 <code>NumberFormatException</code></p><img src="`+p+'"><p>知道异常类型后，就可以按照如下步骤添加异常断点了：</p><img src="'+o+'"><p>然后在弹框中选择 NumberFormatException</p><p>重新以 Debug 模式运行程序：</p><p>程序「一路绿灯式」定位到抛出异常的位置，同时指出当时的变量信息，三个字：稳，准，狠，还有谁？</p><h2 id="方法断点" tabindex="-1">方法断点 <a class="header-anchor" href="#方法断点" aria-label="Permalink to &quot;方法断点&quot;">​</a></h2><p>当阅读源码时，比如 Spring，一个接口的方法可能被多个子类实现，当运行时，需要查看调用栈逐步定位实现类，IDEA 同样支持在接口方法上添加断点（快捷键 <code>cmd+F8</code>/<code>ctrl+F8</code>）：</p><ol><li>鼠标左键在方法处点击断点（♦️形状）</li><li>断点上鼠标右键</li></ol><p>勾选上绿色框线上的内容，同样可以自定义跳转条件 Condition</p><img src="'+t+'"><p>当以 Debug 模式运行程序的时候，会自动进入实现类的方法（注意断点形状）：</p><img src="'+c+'"><p>看到这你应该想到常见的 Runnable 接口中的 run 方法了，同样是有作用的，大家可以自行去尝试了</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>相信有以上四种调试技巧的加成，无论是工作debug 还是私下阅读源码，都可以轻松驾驭了。最后，来看看 IDEA 支持的各种断点调试类型，如果你只知道红色小圆点，那咱在留言区好好说说吧</p><img src="'+r+'"><hr><blockquote><p>作者：tan日拱一兵，转载链接：<a href="https://mp.weixin.qq.com/s/KG0yzb_9XhhTSzjHr4DkIQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/KG0yzb_9XhhTSzjHr4DkIQ</a></p></blockquote><hr>',42),y=[d];function F(u,E,f,h,b,g){return a(),n("div",null,y)}const k=s(i,[["render",F]]);export{m as __pageData,k as default};
