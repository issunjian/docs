import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/kafka.4bc59a85.jpeg",p="/docs/assets/group.b3a568ca.jpeg",f=JSON.parse('{"title":"消息系统之 Kafka","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/分布式/消息队列.md","filePath":"java/其它/分布式/消息队列.md"}'),e={name:"java/其它/分布式/消息队列.md"},t=l('<h1 id="消息系统之-kafka" tabindex="-1">消息系统之 Kafka <a class="header-anchor" href="#消息系统之-kafka" aria-label="Permalink to &quot;消息系统之 Kafka&quot;">​</a></h1><hr><h2 id="什么是消息系统" tabindex="-1">什么是消息系统 <a class="header-anchor" href="#什么是消息系统" aria-label="Permalink to &quot;什么是消息系统&quot;">​</a></h2><p>消息系统是专用的中间件，负责将数据从一个应用传递到另外一个应用。使应用只需关注于数据，无需关注数据在两个或多个应用间是如何传递的。</p><p>消息系统一般基于可靠的消息队列来实现，使用点对点模式或发布订阅模式。数据实时在消息系统中传递，被看作流。</p><hr><h2 id="为什么使用消息系统" tabindex="-1">为什么使用消息系统 <a class="header-anchor" href="#为什么使用消息系统" aria-label="Permalink to &quot;为什么使用消息系统&quot;">​</a></h2><p>使用消息系统具有以下优势：</p><ol><li><strong>解耦</strong>：发送方和接收方统一使用消息系统提供的接口进行通信，易修改易扩展。</li><li><strong>持久化</strong>：传递过程中消息存储到本地磁盘，防止处理数据失败导致数据丢失。</li><li><strong>均衡负载</strong>：分布式系统能根据负载灵活调整机器数量，能够处理高吞吐量和流量突增的情况。</li></ol><p>除此之外，消息系统还可以保障：</p><ol start="4"><li><strong>保障有序</strong>：数据处理的顺序不被打乱。</li><li><strong>传递加速</strong>：通过缓冲层控制和优化数据流经过系统的速度。</li><li><strong>延时处理</strong>：提供了异步处理机制，允许用户把消息放入队列，但并不立即处理它。</li></ol><hr><h2 id="什么是-kafka" tabindex="-1">什么是 Kafka <a class="header-anchor" href="#什么是-kafka" aria-label="Permalink to &quot;什么是 Kafka&quot;">​</a></h2><p>Kafka 作为当前最常用的消息系统之一，一般用于日志收集的离线系统。采用发布订阅模式，由通过高性能 TCP 网络协议进行通信的服务器和客户端组成。</p><p>Kafka 使用 scala 开发，由 LinkedIn 开源，目前已捐献给 Apache 基金会。</p><blockquote><p>Kafka 官网 <a href="http://Kafka.apache.org/" target="_blank" rel="noreferrer">http://Kafka.apache.org/</a></p></blockquote><hr><h2 id="kafka-的优劣势" tabindex="-1">Kafka 的优劣势 <a class="header-anchor" href="#kafka-的优劣势" aria-label="Permalink to &quot;Kafka 的优劣势&quot;">​</a></h2><p><strong>优势</strong></p><ol><li>快速持久化，可以在O(1)的系统开销下进行消息持久化；</li><li>IO 吞吐量高，使用 partition 把队列流量均匀分散在多台机器上，单台服务器可以达到 10W/s 的吞吐速率。</li></ol><p><strong>劣势</strong></p><ol><li>不进行消息重复性检查，可能导致消费重复数据或者异常情况下的数据丢失。</li><li>实时性方面也存在少量延迟。</li></ol><hr><h2 id="生产者-消费者模式" tabindex="-1">生产者/消费者模式 <a class="header-anchor" href="#生产者-消费者模式" aria-label="Permalink to &quot;生产者/消费者模式&quot;">​</a></h2><p>Kafka 是一个分布式系统，由服务器和客户端组成，之间通过高性能 TCP 网络协议进行通信。</p><ol><li><p>服务器以 <code>Cluster</code> 为单位向外提供服务，由多个 <code>Broker</code> 组成。Broker 作为 Kafka 的服务节点，接收外部生产的数据，在本地磁盘对数据进行备份，并提供数据给指定的接收者。</p></li><li><p>客户端分为以下两种类型：</p><ul><li><code>Producer</code>: 数据生产者，向 Kafka 集群生产数据。</li><li><code>Consumer</code>：数据消费者，读取 Kafka 集群生产者生产的消息。</li></ul></li><li><p>组件之间通过 <code>Zookeeper</code> 进行协调。ZooKeeper 会保存 Broker 和 Consumer 的元数据信息，并进行数据变更的监控。并负责选举出 Cluster 内的 Controller （其中一个 Broker），管理 Zookeeper 上的元数据信息。</p></li></ol><hr><h2 id="数据分片模型" tabindex="-1">数据分片模型 <a class="header-anchor" href="#数据分片模型" aria-label="Permalink to &quot;数据分片模型&quot;">​</a></h2><p>Kafka 消息按照 <code>Topic</code> 进行数据的组织和隔离，Producer/Consumer 会向指定的 Topic 收发数据。</p><p>在服务器端，Topic 则按 <code>Patition</code> 进行分区，同一个 Topic 的 Partition 会散落在多个 Broker 上，存储为一个阻塞队列，从而达到了数据分布式存储的目的。Producer 可以指定发送的 Partition 以保证消息有序到达。</p><p><img src="'+o+'" alt="Kafka"></p><p>每个 <code>Consumer Group</code> 都会消费一个 Topic 全量的数据，彼此之间互不干扰。同一个 Consumer Group 下的 Consumer 只能消费到其中一部分 Partition ，通过多个 Consumer 可以达到并行消费的目的。Partition 数量推荐设为 Consumer 数量的整数倍，便于均分。</p><p><img src="'+p+`" alt="group"></p><hr><h2 id="多副本模型" tabindex="-1">多副本模型 <a class="header-anchor" href="#多副本模型" aria-label="Permalink to &quot;多副本模型&quot;">​</a></h2><p>为了提高可用性，避免 Broker 损坏导致的 Partition 不可用或者丢失问题，Kafka 会对每个 Partition 提供多个副本（默认为 3 个），其中有且仅有一个作为 <code>Leader</code>，负责数据的读写。其他副本 <code>Follower</code> 将存放在不同的 Broker 上，通过接收 Leader 广播将数据同步到本地。</p><p>每个 Leader Partition 维护一个独立的 <code>ISR</code> 列表，记录当前同步的 Follower 集合：</p><ol><li>如果 Follower 不能及时同步（延迟时间高或延迟条数超过阈值）就会被暂时踢出 ISR 。</li><li>如果 Leader 不可用将从 ISR 中选出一个 Follower 担任 Leader 。</li></ol><hr><h2 id="消息定位" tabindex="-1">消息定位 <a class="header-anchor" href="#消息定位" aria-label="Permalink to &quot;消息定位&quot;">​</a></h2><h3 id="定位方式" tabindex="-1">定位方式 <a class="header-anchor" href="#定位方式" aria-label="Permalink to &quot;定位方式&quot;">​</a></h3><p>kafka 用 <code>Offset</code> 表示 Message 在 Partition 中的偏移量，通过 Offset 可以唯一确定 Partition 中的一条 Message 。</p><ol><li><strong>生产者 Offset (current position)</strong></li></ol><p>每个 Partition 只有一个，表示当前消息生产到的位置。</p><ol start="2"><li><strong>消费者 Offset (committed offset)</strong></li></ol><p>每个 Partition 可以有多个，取决于消费的 ConsumeGroup 数量。消费者 Offset 会记录到 Kafka 自带 Topic(__consumer_offsets) 内，表示当前消费到的位置。</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Group</td><td>消费者组</td></tr><tr><td>Topic</td><td>topic 名称</td></tr><tr><td>Pid</td><td>partition ID</td></tr><tr><td>Offset</td><td>消费者在对应分区上已消费消息数</td></tr><tr><td>logSize</td><td>已经写到该分区的消息数</td></tr><tr><td>Lag</td><td>还有多少消息未读取（Lag = logSize - Offset）</td></tr><tr><td>Owner</td><td>分区所属 broker</td></tr></tbody></table><hr><h2 id="搭建-broker" tabindex="-1">搭建 Broker <a class="header-anchor" href="#搭建-broker" aria-label="Permalink to &quot;搭建 Broker&quot;">​</a></h2><p>在服务器搭建 Broker ，需要通过指令来完成。本文所有的操作都是在MacOS系统上使用。如果是在Linux操作系统下进行实验，使用的命令是相同的；如果是在windows操作系统下进行实验，则需要使用对应的bin/windows目录下的bat文件。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># 最大offset</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-run-class.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">kafka.tools.GetOffsetShell</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--broker-list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:9092</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--time</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 最小offset</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-run-class.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">kafka.tools.GetOffsetShell</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--broker-list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:9092</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--time</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># offset</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-run-class.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">kafka.tools.GetOffsetShell</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--broker-list</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:9092</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 最大offset</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-run-class.sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kafka.tools.GetOffsetShell</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--broker-list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:9092</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--time</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 最小offset</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-run-class.sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kafka.tools.GetOffsetShell</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--broker-list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:9092</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--time</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># offset</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-run-class.sh</span><span style="color:#24292E;"> </span><span style="color:#032F62;">kafka.tools.GetOffsetShell</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--broker-list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:9092</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># 列出当前 kafka 所有的 topic</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-topics.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 创建 topic</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-topics.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--create</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--replication-factor</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--partitions</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">bin/kafka-topics.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--create</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--replication-factor</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--partitions</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--config</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">cleanup.policy=compact</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">bin/kafka-topics.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--create</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--partitions</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">--replication-factor</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--config</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">max.message.bytes=</span><span style="color:#BF9EEE;">64000</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--config</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">flush.messages=</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 查看某 topic 具体情况</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-topics.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--describe</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 修改 topic （分区数、特殊配置如compact属性、数据保留时间等）</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-topics.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--alter</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--partitions</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">--config</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">cleanup.policy=compact</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--topic</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 修改 topic （也可以用这种）</span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-configs.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--alter</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--entity-name</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--entity-type</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">topics</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--add-config</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">cleanup.policy=compact</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#62E884;">bin/kafka-configs.sh</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--alter</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--zookeeper</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">localhost:2181</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--entity-name</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">test_topic</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--entity-type</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">topics</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--delete-config</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">cleanup.policy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 列出当前 kafka 所有的 topic</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 创建 topic</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--replication-factor</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--partitions</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--replication-factor</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--partitions</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cleanup.policy=compact</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--partitions</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">--replication-factor</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">max.message.bytes=</span><span style="color:#005CC5;">64000</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flush.messages=</span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查看某 topic 具体情况</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--describe</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改 topic （分区数、特殊配置如compact属性、数据保留时间等）</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--alter</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--partitions</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">--config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cleanup.policy=compact</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 修改 topic （也可以用这种）</span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-configs.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--alter</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entity-name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entity-type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">topics</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--add-config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cleanup.policy=compact</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">bin/kafka-configs.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--alter</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entity-name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entity-type</span><span style="color:#24292E;"> </span><span style="color:#032F62;">topics</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--delete-config</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cleanup.policy</span></span></code></pre></div><hr><h2 id="java-生产信息" tabindex="-1">JAVA 生产信息 <a class="header-anchor" href="#java-生产信息" aria-label="Permalink to &quot;JAVA 生产信息&quot;">​</a></h2><h3 id="导入依赖" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖" aria-label="Permalink to &quot;导入依赖&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- 导入 0.10.2 版本 Kafka --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.apache.Kafka&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;Kafka-clients&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;0.10.2.0&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 导入 0.10.2 版本 Kafka --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.Kafka&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;Kafka-clients&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.10.2.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="配置生产者" tabindex="-1">配置生产者 <a class="header-anchor" href="#配置生产者" aria-label="Permalink to &quot;配置生产者&quot;">​</a></h3><p>在创建 Producer 对象前，必须配置以下属性：</p><table><thead><tr><th>属性</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>bootstrap.servers</code></td><td>Kafka broker 地址</td><td>如果有多个地址用逗号分割</td></tr><tr><td><code>key.serializer</code></td><td>key 的序列化类</td><td>必须实现 Kafka 的 Serializer 接口</td></tr><tr><td><code>value.serializer</code></td><td>value 的序列化类</td><td>必须实现 Kafka 的 Serializer 接口</td></tr></tbody></table><p>开发者还可以选择配置如下属性：</p><table><thead><tr><th>属性</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>request.required.acks</code></td><td>指定消息系统何时向生产者返回 ACK ： <code>0</code> 不需要、 <code>1</code> 主服务器收到后、 <code>-1</code> 所有服务器收到后。</td><td>选择不接收 ACK 时生产者能以最大速度发送消息，但如果 broker 没有收到消息，生产者将无感知。</td></tr><tr><td><code>producer.type</code></td><td>同步发送消息 <code>sync</code> 或异步发送消息 <code>async</code> 。</td><td>异步发送消息会被服务器暂存在一个阻塞队列中，被消费者拉取时再由线程取出并组装。</td></tr></tbody></table><p>通过读取配置，即可生成 Producer 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> KafkaProps </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">KafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bootstrap.servers</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">broker1:port1, broker2:port2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">KafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key.serializer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.apache.Kafka.common.StringSerializer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">KafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">value.serializer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.apache.Kafka.common.StringSerializer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">producer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KafkaProducer</span><span style="color:#F6F6F4;">&lt;String, String&gt;(KafkaProps);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Properties KafkaProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">KafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bootstrap.servers&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;broker1:port1, broker2:port2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">KafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key.serializer&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;org.apache.Kafka.common.StringSerializer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">KafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;value.serializer&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;org.apache.Kafka.common.StringSerializer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KafkaProducer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(KafkaProps);</span></span></code></pre></div><h3 id="构造消息" tabindex="-1">构造消息 <a class="header-anchor" href="#构造消息" aria-label="Permalink to &quot;构造消息&quot;">​</a></h3><p>实例化 ProducerRecord 类得到消息对象。</p><p>创建时必须指定消息所属 Topic 和消息值 Value 。消息发往哪个 Partition 通常由负载均衡机制随机选择。若指定了 Partition 则发送到指定的 Partition，如果没有指定 Partition 但指定了 Key，则由 hasy(key) 决定。</p><p>由于 Kafka 只能保证 Partition 内消息的有序性，如果需要保证消息有序到达，Producer 必须指定消息到达的 Partition ，这些消息最终只能被 ConsumeGroup 内的一个 Consumer 消费。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 三种构造方法</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;String, String&gt; record </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;&gt;(topic, value);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;String, String&gt; record </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;&gt;(topic, key, value);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;String, String&gt; record </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;&gt;(topic, partition, key, value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 发送给消息系统</span></span>
<span class="line"><span style="color:#F6F6F4;">producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(record);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 三种构造方法</span></span>
<span class="line"><span style="color:#24292E;">ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;&gt;(topic, value);</span></span>
<span class="line"><span style="color:#24292E;">ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;&gt;(topic, key, value);</span></span>
<span class="line"><span style="color:#24292E;">ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;&gt;(topic, partition, key, value);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 发送给消息系统</span></span>
<span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(record);</span></span></code></pre></div><h3 id="接收-ack" tabindex="-1">接收 ACK <a class="header-anchor" href="#接收-ack" aria-label="Permalink to &quot;接收 ACK&quot;">​</a></h3><p>发送消息后，生产者有两种方式接收消息系统返回的 ACK :</p><ol><li>通过返回的 Future 判断已经发送成功，get 方法会阻塞线程。实现同步等待。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;"> future </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(record); </span></span>
<span class="line"><span style="color:#F6F6F4;">    future.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">TimeoutException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Future future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(record); </span></span>
<span class="line"><span style="color:#24292E;">    future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (TimeoutException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>发送消息时传递一个回调对象，实现 Kafka 的 Callback 接口，通过回调判断是否发送成功。实现异步等待。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(record, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ProducerCallback</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ProducerCallback</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Callback</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onCompletion</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">RecordMetadata</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">recordMetadata</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)  e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(record, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProducerCallback</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ProducerCallback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Callback</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onCompletion</span><span style="color:#24292E;">(RecordMetadata </span><span style="color:#E36209;">recordMetadata</span><span style="color:#24292E;">, Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)  e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="生产示例" tabindex="-1">生产示例 <a class="header-anchor" href="#生产示例" aria-label="Permalink to &quot;生产示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.util.Properties;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.producer.KafkaProducer;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.producer.ProducerConfig;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.producer.ProducerRecord;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.common.serialization.StringSerializer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Producer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> topic </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">192.168.23.76:9092,192.168.23.77:9092</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);          </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);       </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);    </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">request.required.acks</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                        </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">producer.type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">async</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">KafkaProducer</span><span style="color:#F6F6F4;">&lt;String, String&gt; KafkaProducer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KafkaProducer</span><span style="color:#F6F6F4;">&lt;&gt;(p);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello,</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;String, String&gt; record </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">&lt;String, String&gt;(topic, msg);   </span></span>
<span class="line"><span style="color:#F6F6F4;">                KafkaProducer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(record);                                  </span></span>
<span class="line"><span style="color:#F6F6F4;">                Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">500</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            KafkaProducer.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Properties;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.producer.KafkaProducer;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.producer.ProducerConfig;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.producer.ProducerRecord;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.common.serialization.StringSerializer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Producer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String topic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Properties p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, </span><span style="color:#032F62;">&quot;192.168.23.76:9092,192.168.23.77:9092&quot;</span><span style="color:#24292E;">);          </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);       </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);    </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request.required.acks&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-1&quot;</span><span style="color:#24292E;">);                        </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;producer.type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;async&quot;</span><span style="color:#24292E;">);         </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        KafkaProducer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; KafkaProducer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KafkaProducer&lt;&gt;(p);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello,&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">                ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(topic, msg);   </span></span>
<span class="line"><span style="color:#24292E;">                KafkaProducer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(record);                                  </span></span>
<span class="line"><span style="color:#24292E;">                Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">500</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            KafkaProducer.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="java-消费消息" tabindex="-1">JAVA 消费消息 <a class="header-anchor" href="#java-消费消息" aria-label="Permalink to &quot;JAVA 消费消息&quot;">​</a></h2><h3 id="导入依赖-1" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖-1" aria-label="Permalink to &quot;导入依赖&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- 导入 0.10.2 版本 Kafka --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.apache.Kafka&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;Kafka-clients&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;0.10.2.0&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 导入 0.10.2 版本 Kafka --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.Kafka&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;Kafka-clients&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;0.10.2.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="配置消费者" tabindex="-1">配置消费者 <a class="header-anchor" href="#配置消费者" aria-label="Permalink to &quot;配置消费者&quot;">​</a></h3><p>在创建 Consumer 对象前，必须配置以下属性：</p><table><thead><tr><th>属性</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>bootstrap.servers</code></td><td>Kafka broker 地址</td><td>如果有多个地址用逗号分割</td></tr><tr><td><code>group.id</code></td><td>所属消费组</td><td></td></tr><tr><td><code>key.deserializer</code></td><td>key 的反序列化类</td><td>必须实现 Kafka 的 Serializer 接口</td></tr><tr><td><code>value.deserializer</code></td><td>value 的反序列化类</td><td>必须实现 Kafka 的 Serializer 接口</td></tr></tbody></table><p>开发者还可以选择配置如下属性：</p><table><thead><tr><th>属性</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><code>fetch.max.bytes</code></td><td>consumer 端一次拉取数据的最大字节数</td><td></td></tr><tr><td><code>fetch.min.bytes</code></td><td>consumer 端一次拉取数据的最大字节数，默认为 1B。</td><td></td></tr><tr><td><code>max.poll.records</code></td><td>consumer 端一次拉取数据的最大条数，默认为 500。</td><td></td></tr><tr><td><code>fetch.max.wait.ms</code></td><td>服务器最大等待时间，默认为 500ms。超过时间后返回所有可用数据。</td><td></td></tr></tbody></table><p>通过读取配置，即可生成 Consumer 对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> kafkaProps </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">kafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">192.168.23.76:9092</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                           </span></span>
<span class="line"><span style="color:#F6F6F4;">kafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);                 </span></span>
<span class="line"><span style="color:#F6F6F4;">kafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);                     </span></span>
<span class="line"><span style="color:#F6F6F4;">kafkaProps.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">duanjt_test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                           </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">KafkaConsumer</span><span style="color:#F6F6F4;">&lt;String, String&gt; KafkaConsumer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KafkaConsumer</span><span style="color:#F6F6F4;">&lt;String, String&gt;(kafkaProps);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Properties kafkaProps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">kafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, </span><span style="color:#032F62;">&quot;192.168.23.76:9092&quot;</span><span style="color:#24292E;">);                           </span></span>
<span class="line"><span style="color:#24292E;">kafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);                 </span></span>
<span class="line"><span style="color:#24292E;">kafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);                     </span></span>
<span class="line"><span style="color:#24292E;">kafkaProps.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#032F62;">&quot;duanjt_test&quot;</span><span style="color:#24292E;">);                                           </span></span>
<span class="line"><span style="color:#24292E;">KafkaConsumer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; KafkaConsumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KafkaConsumer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(kafkaProps);</span></span></code></pre></div><h3 id="订阅消息" tabindex="-1">订阅消息 <a class="header-anchor" href="#订阅消息" aria-label="Permalink to &quot;订阅消息&quot;">​</a></h3><p>消费者可以通过以下两种方式订阅 Topic：</p><ol><li>subscribe 方法：动态调整组内各个消费者与分区的关系，实现负载均衡。</li><li>assign 方法：订阅确定的主题和分区。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 订阅</span></span>
<span class="line"><span style="color:#F6F6F4;">consumer.</span><span style="color:#62E884;">subscribe</span><span style="color:#F6F6F4;">(Collections.</span><span style="color:#62E884;">singletonList</span><span style="color:#F6F6F4;">(Producer.topic));</span></span>
<span class="line"><span style="color:#F6F6F4;">consumer.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">(Collections.</span><span style="color:#62E884;">singletonList</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TopicPartition</span><span style="color:#F6F6F4;">(partitionInfo.</span><span style="color:#62E884;">topic</span><span style="color:#F6F6F4;">(), partitionInfo.</span><span style="color:#62E884;">partition</span><span style="color:#F6F6F4;">())));</span></span>
<span class="line"><span style="color:#7B7F8B;">// 解除订阅</span></span>
<span class="line"><span style="color:#F6F6F4;">consumer.</span><span style="color:#62E884;">unsubscribe</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 订阅</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(Producer.topic));</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TopicPartition</span><span style="color:#24292E;">(partitionInfo.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), partitionInfo.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">())));</span></span>
<span class="line"><span style="color:#6A737D;">// 解除订阅</span></span>
<span class="line"><span style="color:#24292E;">consumer.</span><span style="color:#6F42C1;">unsubscribe</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="拉取消息" tabindex="-1">拉取消息 <a class="header-anchor" href="#拉取消息" aria-label="Permalink to &quot;拉取消息&quot;">​</a></h3><p>Kafka Consumer 采用主动拉取消息系统数据 poll 的方式进行消费，可以对服务器的数据进行延迟处理。以防止消息系统向 Consumer 推送数据过多，导致 Consumer 积压而不堪重负的情况。为避免在服务器无数据的时候一直轮询， Kafka 在 poll 方法有参数允许消费者请求在长轮询中阻塞，等待数据到达。</p><p>获取到消息组 ConsumerRecords 后，内部包含多个 ConsumerRecord 对象，记录消息的 topic/partition/offset/key/value 信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 每隔 1s 拉取一次数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ConsumerRecords</span><span style="color:#F6F6F4;">&lt;String, String&gt; records </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> KafkaConsumer.</span><span style="color:#62E884;">poll</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 打印数据</span></span>
<span class="line"><span style="color:#F6F6F4;">records.</span><span style="color:#62E884;">foreach</span><span style="color:#F6F6F4;">(record </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(String.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic:%s,offset:%d,消息:%s</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, record.</span><span style="color:#62E884;">topic</span><span style="color:#F6F6F4;">(), record.</span><span style="color:#62E884;">offset</span><span style="color:#F6F6F4;">(), record.</span><span style="color:#62E884;">value</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 每隔 1s 拉取一次数据</span></span>
<span class="line"><span style="color:#24292E;">ConsumerRecords&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; records </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> KafkaConsumer.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 打印数据</span></span>
<span class="line"><span style="color:#24292E;">records.</span><span style="color:#6F42C1;">foreach</span><span style="color:#24292E;">(record </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic:%s,offset:%d,消息:%s&quot;</span><span style="color:#24292E;">, record.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">offset</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="提交-offset" tabindex="-1">提交 Offset <a class="header-anchor" href="#提交-offset" aria-label="Permalink to &quot;提交 Offset&quot;">​</a></h3><p>对于消费者而言，异步模式下 committed offset 是落后于 current position 的。如果 consumer 挂掉，那么下一次消费数据又只会从 committed offset 的位置拉取数据，就会导致数据被重复消费。</p><p>消费者 offset 更新有以下两种方式：</p><ol><li><strong>自动提交 at-most-once</strong></li></ol><p>设置 enable.auto.commit=true（默认），更新的频率根据参数 auto.commit.interval.ms 来定，定时系统会根据当时 Consumer 收到的消息数量自动更新 offset 。</p><p>这可能导致两个问题：</p><ol><li><p>Consumer 程序崩溃，而 Offset 尚未更新。会重复消费部分数据。</p></li><li><p>Consumer 程序崩溃，但 Offset 已被更新。已收到但未消费的数据永久丢失。</p></li><li><p><strong>手动提交 at-least-once</strong></p></li></ol><p>设置 enable.auto.commit=false，Consumer 收到消息并消费后，再调用方法 consumer.commitSync() 手动更新 offset 。</p><p>如果消费失败，则 offset 也不会更新，此条消息会被重复消费。</p><h3 id="消费示例" tabindex="-1">消费示例 <a class="header-anchor" href="#消费示例" aria-label="Permalink to &quot;消费示例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.util.Collections;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.util.Properties;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.consumer.ConsumerConfig;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.consumer.ConsumerRecord;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.consumer.ConsumerRecords;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.clients.consumer.KafkaConsumer;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.apache.Kafka.common.serialization.StringDeserializer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Consumer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Properties</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">192.168.23.76:9092</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                           </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);                 </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringDeserializer.class);                     </span></span>
<span class="line"><span style="color:#F6F6F4;">        p.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">duanjt_test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                           </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">KafkaConsumer</span><span style="color:#F6F6F4;">&lt;String, String&gt; KafkaConsumer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KafkaConsumer</span><span style="color:#F6F6F4;">&lt;String, String&gt;(p);</span></span>
<span class="line"><span style="color:#F6F6F4;">        KafkaConsumer.</span><span style="color:#62E884;">subscribe</span><span style="color:#F6F6F4;">(Collections.</span><span style="color:#62E884;">singletonList</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ConsumerRecords</span><span style="color:#F6F6F4;">&lt;String, String&gt; records </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> KafkaConsumer.</span><span style="color:#62E884;">poll</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            records.</span><span style="color:#62E884;">foreach</span><span style="color:#F6F6F4;">(record </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(String.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic:%s,offset:%d,消息:%s</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, record.</span><span style="color:#62E884;">topic</span><span style="color:#F6F6F4;">(), record.</span><span style="color:#62E884;">offset</span><span style="color:#F6F6F4;">(), record.</span><span style="color:#62E884;">value</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"><span style="color:#F6F6F4;">            });</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Collections;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Properties;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.consumer.ConsumerConfig;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.consumer.ConsumerRecord;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.consumer.ConsumerRecords;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.clients.consumer.KafkaConsumer;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.apache.Kafka.common.serialization.StringDeserializer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Consumer</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Properties p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, </span><span style="color:#032F62;">&quot;192.168.23.76:9092&quot;</span><span style="color:#24292E;">);                           </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);                 </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringDeserializer.class);                     </span></span>
<span class="line"><span style="color:#24292E;">        p.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ConsumerConfig.GROUP_ID_CONFIG, </span><span style="color:#032F62;">&quot;duanjt_test&quot;</span><span style="color:#24292E;">);                                           </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        KafkaConsumer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; KafkaConsumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> KafkaConsumer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(p);</span></span>
<span class="line"><span style="color:#24292E;">        KafkaConsumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ConsumerRecords&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; records </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> KafkaConsumer.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            records.</span><span style="color:#6F42C1;">foreach</span><span style="color:#24292E;">(record </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic:%s,offset:%d,消息:%s&quot;</span><span style="color:#24292E;">, record.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">offset</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><p>美团技术博客：<a href="https://blog.csdn.net/lizhitao/article/details/39499283" target="_blank" rel="noreferrer">https://blog.csdn.net/lizhitao/article/details/39499283</a></p><p>常用指令一：<a href="https://www.cnblogs.com/itwild/p/12287850.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/itwild/p/12287850.html</a></p><p>常用指令二：<a href="https://blog.csdn.net/camel84/article/details/81879118" target="_blank" rel="noreferrer">https://blog.csdn.net/camel84/article/details/81879118</a></p>`,110),r=[t];function c(y,F,i,E,d,u){return a(),n("div",null,r)}const g=s(e,[["render",c]]);export{f as __pageData,g as default};
