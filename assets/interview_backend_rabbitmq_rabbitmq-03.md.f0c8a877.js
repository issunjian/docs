import{_ as e,o as a,c as t,V as r}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/rabbitmq/rabbitmq-03.md","filePath":"interview/backend/rabbitmq/rabbitmq-03.md"}'),o={name:"interview/backend/rabbitmq/rabbitmq-03.md"},b=r('<h3 id="_1、rabbitmq-routing路由模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1rabbitmq-routing%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">1、RabbitMQ routing路由模式</a> <a class="header-anchor" href="#_1、rabbitmq-routing路由模式" aria-label="Permalink to &quot;[1、RabbitMQ routing路由模式](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#1rabbitmq-routing路由模式)&quot;">​</a></h3><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/030/5/35_7.png#alt=35%5C_7.png" alt=""></p><p><strong>1、</strong> 消息生产者将消息发送给交换机按照路由判断,路由是字符串(info) 当前产生的消息携带路由字符(对象的方法),交换机根据路由的key,只能匹配上路由key对应的消息队列,对应的消费者才能消费消息;</p><p><strong>2、</strong> 根据业务功能定义路由字符串</p><p><strong>3、</strong> 从系统的代码逻辑中获取对应的功能字符串,将消息任务扔到对应的队列中。</p><p><strong>4、</strong> 业务场景:error 通知;EXCEPTION;错误通知的功能;传统意义的错误通知;客户通知;利用key路由,可以将程序中的错误封装成消息传入到消息队列中,开发者可以自定义消费者,实时接收错误;</p><h3 id="_2、消息怎么路由" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E6%B6%88%E6%81%AF%E6%80%8E%E4%B9%88%E8%B7%AF%E7%94%B1" target="_blank" rel="noreferrer">2、消息怎么路由？</a> <a class="header-anchor" href="#_2、消息怎么路由" aria-label="Permalink to &quot;[2、消息怎么路由？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#2消息怎么路由)&quot;">​</a></h3><p>消息提供方-&gt;路由-&gt;一至多个队列消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定。通过队列路由键，可以把队列绑定到交换器上。消息到达交换器后，RabbitMQ 会将消息的路由键与队列的路由键进行匹配（针对不同的交换器有不同的路由规则）；</p><p>常用的交换器主要分为一下三种：</p><p><strong>1、</strong> fanout：如果交换器收到消息，将会广播到所有绑定的队列上</p><p><strong>2、</strong> direct：如果路由键完全匹配，消息就被投递到相应的队列</p><p><strong>3、</strong> topic：可以使来自不同源头的消息能够到达同一个队列。 使用 topic 交换器时，可以使用通配符</p><h3 id="_3、rabbitmq-publish-subscribe发布订阅-共享资源" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3rabbitmq-publish/subscribe%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90" target="_blank" rel="noreferrer">3、RabbitMQ publish/subscribe发布订阅(共享资源)</a> <a class="header-anchor" href="#_3、rabbitmq-publish-subscribe发布订阅-共享资源" aria-label="Permalink to &quot;[3、RabbitMQ publish/subscribe发布订阅(共享资源)](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#3rabbitmq-publish/subscribe发布订阅共享资源)&quot;">​</a></h3><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/030/5/35_6.png#alt=35%5C_6.png" alt=""></p><p><strong>1、</strong> 每个消费者监听自己的队列；</p><p><strong>2、</strong> 生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息。</p><h3 id="_4、能够在地理上分开的不同数据中心使用-rabbitmq-cluster-么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4%E8%83%BD%E5%A4%9F%E5%9C%A8%E5%9C%B0%E7%90%86%E4%B8%8A%E5%88%86%E5%BC%80%E7%9A%84%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83%E4%BD%BF%E7%94%A8-rabbitmq-cluster-%E4%B9%88" target="_blank" rel="noreferrer">4、能够在地理上分开的不同数据中心使用 RabbitMQ cluster 么？</a> <a class="header-anchor" href="#_4、能够在地理上分开的不同数据中心使用-rabbitmq-cluster-么" aria-label="Permalink to &quot;[4、能够在地理上分开的不同数据中心使用 RabbitMQ cluster 么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#4能够在地理上分开的不同数据中心使用-rabbitmq-cluster-么)&quot;">​</a></h3><p>不能。第一，你无法控制所创建的 queue 实际分布在 cluster 里的哪个 node 上（一般使用 HAProxy + cluster 模型时都是这样），这可能会导致各种跨地域访问时的常见问题；第二，Erlang 的 OTP 通信框架对延迟的容忍度有限，这可能会触发各种超时，导致业务疲于处理；第三，在广域网上的连接失效问题将导致经典的“脑裂”问题，而RabbitMQ 目前无法处理（该问题主要是说 Mnesia）。</p><h3 id="_5、rabbitmq有那些基本概念" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5rabbitmq%E6%9C%89%E9%82%A3%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" target="_blank" rel="noreferrer">5、RabbitMQ有那些基本概念？</a> <a class="header-anchor" href="#_5、rabbitmq有那些基本概念" aria-label="Permalink to &quot;[5、RabbitMQ有那些基本概念？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#5rabbitmq有那些基本概念)&quot;">​</a></h3><p><strong>1、</strong> Broker：简单来说就是消息队列服务器实体</p><p><strong>2、</strong> Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列</p><p><strong>3、</strong> Queue：消息队列载体，每个消息都会被投入到一个或多个队列</p><p><strong>4、</strong> Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来</p><p><strong>5、</strong> Routing Key：路由关键字，exchange根据这个关键字进行消息投递</p><p><strong>6、</strong> VHost：vhost 可以理解为虚拟 broker ，即 mini-RabbitMQ server。其内部均含有独立的 queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。</p><p><strong>7、</strong> Producer：消息生产者，就是投递消息的程序</p><p><strong>8、</strong> Consumer：消息消费者，就是接受消息的程序</p><p><strong>9、</strong> Channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务</p><p>由<code>Exchange</code>、<code>Queue</code>、<code>RoutingKey</code>三个才能决定一个从Exchange到Queue的唯一的线路。</p><h3 id="_6、什么情况下会出现-blackholed-问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0-blackholed-%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">6、什么情况下会出现 blackholed 问题？</a> <a class="header-anchor" href="#_6、什么情况下会出现-blackholed-问题" aria-label="Permalink to &quot;[6、什么情况下会出现 blackholed 问题？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#6什么情况下会出现-blackholed-问题)&quot;">​</a></h3><p>blackholed 问题是指，向 exchange 投递了 message ，而由于各种原因导致该message 丢失，但发送者却不知道。可导致 blackholed 的情况：1.向未绑定 queue 的exchange 发送 message；2.exchange 以 binding_key key_A 绑定了 queue queue_A，但向该 exchange 发送 message 使用的 routing_key 却是 key_B。</p><h3 id="_7、什么是消费者consumer" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7%E4%BB%80%E4%B9%88%E6%98%AF%E6%B6%88%E8%B4%B9%E8%80%85consumer" target="_blank" rel="noreferrer">7、什么是消费者Consumer?</a> <a class="header-anchor" href="#_7、什么是消费者consumer" aria-label="Permalink to &quot;[7、什么是消费者Consumer?](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#7什么是消费者consumer)&quot;">​</a></h3><p>消费消息，也就是接收消息的一方。</p><p>消费者连接到RabbitMQ服务器，并订阅到队列上。消费消息时只消费消息体，丢弃标签。</p><h3 id="_8、消息如何分发" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8%E6%B6%88%E6%81%AF%E5%A6%82%E4%BD%95%E5%88%86%E5%8F%91" target="_blank" rel="noreferrer">8、消息如何分发？</a> <a class="header-anchor" href="#_8、消息如何分发" aria-label="Permalink to &quot;[8、消息如何分发？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#8消息如何分发)&quot;">​</a></h3><p><strong>1、</strong> 若该队列至少有一个消费者订阅，消息将以循环（round-robin）的方式发送给消费者。每条消息只会分发给一个订阅的消费者（前提是消费者能够正常处理消息并进行确认）。</p><p><strong>2、</strong> 通过路由可实现多消费的功能</p><h3 id="_9、basic-reject-的用法是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9basicreject-%E7%9A%84%E7%94%A8%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、Basic.Reject 的用法是什么？</a> <a class="header-anchor" href="#_9、basic-reject-的用法是什么" aria-label="Permalink to &quot;[9、Basic.Reject 的用法是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#9basicreject-的用法是什么)&quot;">​</a></h3><p>该信令可用于 consumer 对收到的 message 进行 reject 。若在该信令中设置</p><p>requeue=true，则当 RabbitMQ server 收到该拒绝信令后，会将该 message 重新发送到下一个处于 consume 状态的 consumer 处（理论上仍可能将该消息发送给当前consumer）。若设置 requeue=false ，则 RabbitMQ server 在收到拒绝信令后，将直接将该message 从 queue 中移除。</p><p>另外一种移除 queue 中 message 的小技巧是，consumer 回复 Basic.Ack 但不对获取到的message 做任何处理。而 Basic.Nack 是对 Basic.Reject 的扩展，以支持一次拒绝多条 message 的能力。</p><h3 id="_10、什么是binding绑定" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E4%BB%80%E4%B9%88%E6%98%AFbinding%E7%BB%91%E5%AE%9A" target="_blank" rel="noreferrer">10、什么是Binding绑定？</a> <a class="header-anchor" href="#_10、什么是binding绑定" aria-label="Permalink to &quot;[10、什么是Binding绑定？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题附答案解析，大汇总.md#10什么是binding绑定)&quot;">​</a></h3><p>通过绑定将交换器和队列关联起来，一般会指定一个BindingKey,这样RabbitMq就知道如何正确路由消息到队列了。</p><h3 id="_11、amqp协议3层" tabindex="-1">11、AMQP协议3层？ <a class="header-anchor" href="#_11、amqp协议3层" aria-label="Permalink to &quot;11、AMQP协议3层？&quot;">​</a></h3><h3 id="_12、消息队列有什么缺点" tabindex="-1">12、消息队列有什么缺点 <a class="header-anchor" href="#_12、消息队列有什么缺点" aria-label="Permalink to &quot;12、消息队列有什么缺点&quot;">​</a></h3><h3 id="_13、ram-node-和-disk-node-的区别" tabindex="-1">13、RAM node 和 disk node 的区别？ <a class="header-anchor" href="#_13、ram-node-和-disk-node-的区别" aria-label="Permalink to &quot;13、RAM node 和 disk node 的区别？&quot;">​</a></h3><h3 id="_14、如何确保消息接收方消费了消息" tabindex="-1">14、如何确保消息接收方消费了消息? <a class="header-anchor" href="#_14、如何确保消息接收方消费了消息" aria-label="Permalink to &quot;14、如何确保消息接收方消费了消息?&quot;">​</a></h3><h3 id="_15、broker服务节点" tabindex="-1">15、Broker服务节点？ <a class="header-anchor" href="#_15、broker服务节点" aria-label="Permalink to &quot;15、Broker服务节点？&quot;">​</a></h3><h3 id="_16、什么是queue队列" tabindex="-1">16、什么是Queue队列？ <a class="header-anchor" href="#_16、什么是queue队列" aria-label="Permalink to &quot;16、什么是Queue队列？&quot;">​</a></h3><h3 id="_17、vhost" tabindex="-1">17、vhost? <a class="header-anchor" href="#_17、vhost" aria-label="Permalink to &quot;17、vhost?&quot;">​</a></h3><h3 id="_18、rabbitmq-中的-broker-是指什么-cluster-又是指什么" tabindex="-1">18、RabbitMQ 中的 broker 是指什么？cluster 又是指什么？ <a class="header-anchor" href="#_18、rabbitmq-中的-broker-是指什么-cluster-又是指什么" aria-label="Permalink to &quot;18、RabbitMQ 中的 broker 是指什么？cluster 又是指什么？&quot;">​</a></h3><h3 id="_19、导致的死信的几种原因" tabindex="-1">19、导致的死信的几种原因？ <a class="header-anchor" href="#_19、导致的死信的几种原因" aria-label="Permalink to &quot;19、导致的死信的几种原因？&quot;">​</a></h3><h3 id="_20、消息如何分发" tabindex="-1">20、消息如何分发？ <a class="header-anchor" href="#_20、消息如何分发" aria-label="Permalink to &quot;20、消息如何分发？&quot;">​</a></h3><h3 id="_21、生产者消息运转" tabindex="-1">21、生产者消息运转？ <a class="header-anchor" href="#_21、生产者消息运转" aria-label="Permalink to &quot;21、生产者消息运转？&quot;">​</a></h3><h3 id="_22、exchange交换器" tabindex="-1">22、Exchange交换器？ <a class="header-anchor" href="#_22、exchange交换器" aria-label="Permalink to &quot;22、Exchange交换器？&quot;">​</a></h3><h3 id="_23、消息基于什么传输" tabindex="-1">23、消息基于什么传输？ <a class="header-anchor" href="#_23、消息基于什么传输" aria-label="Permalink to &quot;23、消息基于什么传输？&quot;">​</a></h3><h3 id="_24、消息在什么时候会变成死信" tabindex="-1">24、消息在什么时候会变成死信? <a class="header-anchor" href="#_24、消息在什么时候会变成死信" aria-label="Permalink to &quot;24、消息在什么时候会变成死信?&quot;">​</a></h3><h3 id="_25、-dead-letter-queue-的用途" tabindex="-1">25、“dead letter”queue 的用途？ <a class="header-anchor" href="#_25、-dead-letter-queue-的用途" aria-label="Permalink to &quot;25、“dead letter”queue 的用途？&quot;">​</a></h3><h3 id="_26、rabbitmq特点" tabindex="-1">26、RabbitMQ特点? <a class="header-anchor" href="#_26、rabbitmq特点" aria-label="Permalink to &quot;26、RabbitMQ特点?&quot;">​</a></h3><h3 id="_27、rabbitmq是什么" tabindex="-1">27、RabbitMQ是什么？ <a class="header-anchor" href="#_27、rabbitmq是什么" aria-label="Permalink to &quot;27、RabbitMQ是什么？&quot;">​</a></h3><h3 id="_28、如何解决rabbitmq丢数据的问题" tabindex="-1">28、如何解决RabbitMQ丢数据的问题? <a class="header-anchor" href="#_28、如何解决rabbitmq丢数据的问题" aria-label="Permalink to &quot;28、如何解决RabbitMQ丢数据的问题?&quot;">​</a></h3>',61),s=[b];function i(n,E,u,h,l,c){return a(),t("div",null,s)}const B=e(o,[["render",i]]);export{m as __pageData,B as default};
