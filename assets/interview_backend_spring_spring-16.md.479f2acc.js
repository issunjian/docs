import{_ as o,o as r,c as e,V as a}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/spring/spring-16.md","filePath":"interview/backend/spring/spring-16.md"}'),t={name:"interview/backend/spring/spring-16.md"},n=a('<h3 id="_1、为什么我们不建议在实际的应用程序中使用-spring-data-rest" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#1%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E4%B8%8D%E5%BB%BA%E8%AE%AE%E5%9C%A8%E5%AE%9E%E9%99%85%E7%9A%84%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E4%BD%BF%E7%94%A8-spring-data-rest" target="_blank" rel="noreferrer">1、为什么我们不建议在实际的应用程序中使用 Spring Data Rest?</a> <a class="header-anchor" href="#_1、为什么我们不建议在实际的应用程序中使用-spring-data-rest" aria-label="Permalink to &quot;[1、为什么我们不建议在实际的应用程序中使用 Spring Data Rest?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#1为什么我们不建议在实际的应用程序中使用-spring-data-rest)&quot;">​</a></h3><p>我们认为 Spring Data Rest 很适合快速原型制造！在大型应用程序中使用需要谨慎。</p><p>通过 Spring Data REST 你可以把你的数据实体作为 RESTful 服务直接。</p><p>当你设计 RESTful 服务器的时候，最佳实践表明，你的接口应该考虑到两件重要的事情：</p><p>你的模型范围。</p><p>你的客户。</p><p>通过 With Spring Data REST，你不需要再考虑这两个方面，只需要作为 TEST 服务实体。</p><p>这就是为什么我们建议使用 Spring Data Rest 在快速原型构造上面，或者作为项目的初始解决方法。对于完整演变项目来说，这并不是一个好的注意。</p><h3 id="_2、ribbon是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#2ribbon%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">2、Ribbon是什么？</a> <a class="header-anchor" href="#_2、ribbon是什么" aria-label="Permalink to &quot;[2、Ribbon是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#2ribbon是什么)&quot;">​</a></h3><p><strong>1、</strong> Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法</p><p><strong>2、</strong> Ribbon客户端组件提供一系列完善的配置项，如连接超时，重试等。简单的说，就是在配置文件中列出后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随即连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。（有点类似Nginx）</p><h3 id="_3、如何禁用特定的自动配置类" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#3%E5%A6%82%E4%BD%95%E7%A6%81%E7%94%A8%E7%89%B9%E5%AE%9A%E7%9A%84%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB" target="_blank" rel="noreferrer">3、如何禁用特定的自动配置类？</a> <a class="header-anchor" href="#_3、如何禁用特定的自动配置类" aria-label="Permalink to &quot;[3、如何禁用特定的自动配置类？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#3如何禁用特定的自动配置类)&quot;">​</a></h3><p>若发现任何不愿使用的特定自动配置类，可以使用@EnableAutoConfiguration的排除属性。</p><p>//By using &quot;exclude&quot;</p><p>@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})</p><p>另一方面，如果类别不在类路径上，则可以使用excludeName类注解，并且指定完全限定名。</p><p>//By using &quot;excludeName&quot;</p><p>@EnableAutoConfiguration(excludeName={Foo.class})</p><p>此外，SpringBoot还具有控制排除自动配置类列表的功能，可以通过使用spring.autoconfigure.exclude property来实现。可以将其添加到 propertie应用程序中，并且可以添加逗号分隔的多个类。</p><p>//By using property file</p><p>spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</p><h3 id="_4、自动装配有哪些方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#4%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">4、自动装配有哪些方式？</a> <a class="header-anchor" href="#_4、自动装配有哪些方式" aria-label="Permalink to &quot;[4、自动装配有哪些方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#4自动装配有哪些方式)&quot;">​</a></h3><p>Spring 容器能够自动装配 bean。也就是说，可以通过检查 BeanFactory 的内容让 Spring 自动解析 bean 的协作者。</p><p>自动装配的不同模式：</p><p><strong>1、</strong> 这是默认设置，表示没有自动装配。应使用显式 bean 引用进行装配。byName</p><p><strong>2、</strong> 它根据 bean 的名称注入对象依赖项。它匹配并装配其属性与 XML 文件中由相同名称定义的 bean。byType</p><p><strong>3、</strong> 它根据类型注入对象依赖项。如果属性的类型与 XML 文件中的一个 bean 名称匹配，则匹配并装配属性。构造函数</p><p><strong>4、</strong> 它通过调用类的构造函数来注入依赖项。它有大量的参数。autodetect</p><p><strong>5、</strong> 首先容器尝试通过构造函数使用 autowire 装配，如果不能，则尝试通过 byType 自动装配。</p><h3 id="_5、spring-支持集中-bean-scope" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#5spring-%E6%94%AF%E6%8C%81%E9%9B%86%E4%B8%AD-bean-scope" target="_blank" rel="noreferrer">5、spring 支持集中 bean scope？</a> <a class="header-anchor" href="#_5、spring-支持集中-bean-scope" aria-label="Permalink to &quot;[5、spring 支持集中 bean scope？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#5spring-支持集中-bean-scope)&quot;">​</a></h3><p><strong>Spring bean 支持 5 种 scope：</strong></p><p><strong>1、</strong> Singleton - 每个 Spring IoC 容器仅有一个单实例。</p><p><strong>2、</strong> Prototype - 每次请求都会产生一个新的实例。</p><p><strong>3、</strong> Request - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。</p><p><strong>4、</strong> Session - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前 HTTP session 内有效。</p><p><strong>5、</strong> Global-session - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于 portlet 的 web 应用中才有意义。 Portlet 规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。 在 global session 作用域中定义的 bean 被限定于全局 portlet Session 的生命周期范围内。 如果你在 web 中使用 global session 作用域来标识 bean，那么 web 会自动当成 session 类型来使用。</p><p><strong>6、</strong> 仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。</p><h3 id="_6、springboot-的核心注解是哪个-它主要由哪几个注解组成的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#6springboot-%E7%9A%84%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3%E6%98%AF%E5%93%AA%E4%B8%AA%E5%AE%83%E4%B8%BB%E8%A6%81%E7%94%B1%E5%93%AA%E5%87%A0%E4%B8%AA%E6%B3%A8%E8%A7%A3%E7%BB%84%E6%88%90%E7%9A%84" target="_blank" rel="noreferrer">6、SpringBoot 的核心注解是哪个？它主要由哪几个注解组成的？</a> <a class="header-anchor" href="#_6、springboot-的核心注解是哪个-它主要由哪几个注解组成的" aria-label="Permalink to &quot;[6、SpringBoot 的核心注解是哪个？它主要由哪几个注解组成的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#6springboot-的核心注解是哪个它主要由哪几个注解组成的)&quot;">​</a></h3><p>启动类上面的注解是@SpringBootApplication，它也是 SpringBoot 的核心注解，主要组合包含了以下 3 个注解：</p><p>@SpringBootConfiguration：组合了 <a href="/docs/Configuration.html">@Configuration </a> 注解，实现配置文件的功能。</p><p>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项， 例如：<code>java 如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration、class })。</code></p><p>@ComponentScan：Spring组件扫描。</p><h3 id="_7、什么是-spring-framework" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#7%E4%BB%80%E4%B9%88%E6%98%AF-spring-framework" target="_blank" rel="noreferrer">7、什么是 Spring Framework？</a> <a class="header-anchor" href="#_7、什么是-spring-framework" aria-label="Permalink to &quot;[7、什么是 Spring Framework？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#7什么是-spring-framework)&quot;">​</a></h3><p><strong>1、</strong> Spring 是一个开源应用框架，旨在降低应用程序开发的复杂度。</p><p><strong>2、</strong> 它是轻量级、松散耦合的。</p><p><strong>3、</strong> 它具有分层体系结构，允许用户选择组件，同时还为 J2EE 应用程序开发提供了一个有凝聚力的框架。</p><p><strong>4、</strong> 它可以集成其他框架，如 Structs、Hibernate、EJB 等，所以又称为框架的框架。</p><h3 id="_8、如何不通过任何配置来选择-hibernate-作为-jpa-的默认实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#8%E5%A6%82%E4%BD%95%E4%B8%8D%E9%80%9A%E8%BF%87%E4%BB%BB%E4%BD%95%E9%85%8D%E7%BD%AE%E6%9D%A5%E9%80%89%E6%8B%A9-hibernate-%E4%BD%9C%E4%B8%BA-jpa-%E7%9A%84%E9%BB%98%E8%AE%A4%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">8、如何不通过任何配置来选择 Hibernate 作为 JPA 的默认实现？</a> <a class="header-anchor" href="#_8、如何不通过任何配置来选择-hibernate-作为-jpa-的默认实现" aria-label="Permalink to &quot;[8、如何不通过任何配置来选择 Hibernate 作为 JPA 的默认实现？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#8如何不通过任何配置来选择-hibernate-作为-jpa-的默认实现)&quot;">​</a></h3><p>因为 SpringBoot 是自动配置的。</p><p><strong>下面是我们添加的依赖项:</strong></p><p>spring-boot-stater-data-jpa 对于 Hibernate 和 JPA 有过渡依赖性。</p><p>当 SpringBoot 在类路径中检测到 Hibernate 中，将会自动配置它为默认的 JPA 实现。</p><h3 id="_9、spring由哪些模块组成" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#9spring%E7%94%B1%E5%93%AA%E4%BA%9B%E6%A8%A1%E5%9D%97%E7%BB%84%E6%88%90" target="_blank" rel="noreferrer">9、Spring由哪些模块组成?</a> <a class="header-anchor" href="#_9、spring由哪些模块组成" aria-label="Permalink to &quot;[9、Spring由哪些模块组成?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#9spring由哪些模块组成)&quot;">​</a></h3><p><strong>以下是Spring 框架的基本模块：</strong></p><p><strong>1、</strong> Core module</p><p><strong>2、</strong> Bean module</p><p><strong>3、</strong> Context module</p><p><strong>4、</strong> Expression Language module</p><p><strong>5、</strong> JDBC module</p><p><strong>6、</strong> ORM module</p><p><strong>7、</strong> OXM module</p><p><strong>8、</strong> Java Messaging Service(JMS) module</p><p><strong>9、</strong> Transaction module</p><p><strong>10、</strong> Web module</p><p><strong>11、</strong> Web-Servlet module</p><p><strong>12、</strong> Web-Struts module</p><p><strong>13、</strong> Web-Portlet module</p><h3 id="_10、什么是双因素身份验证" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#10%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81" target="_blank" rel="noreferrer">10、什么是双因素身份验证？</a> <a class="header-anchor" href="#_10、什么是双因素身份验证" aria-label="Permalink to &quot;[10、什么是双因素身份验证？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新基础面试题及答案整理.md#10什么是双因素身份验证)&quot;">​</a></h3><p>双因素身份验证为帐户登录过程启用第二级身份验证。</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0816/01/img_14.png#alt=img%5C_14.png" alt=""></p><p>图11： 双因素认证的表示 – 微服务访谈问题</p><p>因此，假设用户必须只输入用户名和密码，那么这被认为是单因素身份验证。</p><h3 id="_11、springboot-可以兼容老-spring-项目吗-如何做" tabindex="-1">11、SpringBoot 可以兼容老 Spring 项目吗，如何做？ <a class="header-anchor" href="#_11、springboot-可以兼容老-spring-项目吗-如何做" aria-label="Permalink to &quot;11、SpringBoot 可以兼容老 Spring 项目吗，如何做？&quot;">​</a></h3><h3 id="_12、什么是dispatcherservlet" tabindex="-1">12、什么是DispatcherServlet <a class="header-anchor" href="#_12、什么是dispatcherservlet" aria-label="Permalink to &quot;12、什么是DispatcherServlet&quot;">​</a></h3><h3 id="_13、springboot如何配置log4j" tabindex="-1">13、SpringBoot如何配置log4j？ <a class="header-anchor" href="#_13、springboot如何配置log4j" aria-label="Permalink to &quot;13、SpringBoot如何配置log4j？&quot;">​</a></h3><h3 id="_14、spring-支持哪些-orm-框架" tabindex="-1">14、spring 支持哪些 ORM 框架 <a class="header-anchor" href="#_14、spring-支持哪些-orm-框架" aria-label="Permalink to &quot;14、spring 支持哪些 ORM 框架&quot;">​</a></h3><h3 id="_15、spring-cloud-task" tabindex="-1">15、Spring Cloud Task <a class="header-anchor" href="#_15、spring-cloud-task" aria-label="Permalink to &quot;15、Spring Cloud Task&quot;">​</a></h3><h3 id="_16、什么是-spring-的内部-bean" tabindex="-1">16、什么是 spring 的内部 bean？ <a class="header-anchor" href="#_16、什么是-spring-的内部-bean" aria-label="Permalink to &quot;16、什么是 spring 的内部 bean？&quot;">​</a></h3><h3 id="_17、什么是-aop-连接点" tabindex="-1">17、什么是 AOP 连接点 <a class="header-anchor" href="#_17、什么是-aop-连接点" aria-label="Permalink to &quot;17、什么是 AOP 连接点&quot;">​</a></h3><h3 id="_18、mock或stub有什么区别" tabindex="-1">18、Mock或Stub有什么区别？ <a class="header-anchor" href="#_18、mock或stub有什么区别" aria-label="Permalink to &quot;18、Mock或Stub有什么区别？&quot;">​</a></h3><h3 id="_19、什么是feigin-它的优点是什么" tabindex="-1">19、什么是feigin？它的优点是什么？ <a class="header-anchor" href="#_19、什么是feigin-它的优点是什么" aria-label="Permalink to &quot;19、什么是feigin？它的优点是什么？&quot;">​</a></h3><h3 id="_20、解释基于注解的切面实现" tabindex="-1">20、解释基于注解的切面实现 <a class="header-anchor" href="#_20、解释基于注解的切面实现" aria-label="Permalink to &quot;20、解释基于注解的切面实现&quot;">​</a></h3><h3 id="_21、你如何理解-springboot-配置加载顺序" tabindex="-1">21、你如何理解 SpringBoot 配置加载顺序？ <a class="header-anchor" href="#_21、你如何理解-springboot-配置加载顺序" aria-label="Permalink to &quot;21、你如何理解 SpringBoot 配置加载顺序？&quot;">​</a></h3><h3 id="_22、springboot-打成的-jar-和普通的-jar-有什么区别" tabindex="-1">22、SpringBoot 打成的 jar 和普通的 jar 有什么区别 ? <a class="header-anchor" href="#_22、springboot-打成的-jar-和普通的-jar-有什么区别" aria-label="Permalink to &quot;22、SpringBoot 打成的 jar 和普通的 jar 有什么区别 ?&quot;">​</a></h3><h3 id="_23、spring-cloud-zookeeper" tabindex="-1">23、Spring Cloud Zookeeper <a class="header-anchor" href="#_23、spring-cloud-zookeeper" aria-label="Permalink to &quot;23、Spring Cloud Zookeeper&quot;">​</a></h3><h3 id="_24、什么是织入。什么是织入应用的不同点" tabindex="-1">24、什么是织入。什么是织入应用的不同点？ <a class="header-anchor" href="#_24、什么是织入。什么是织入应用的不同点" aria-label="Permalink to &quot;24、什么是织入。什么是织入应用的不同点？&quot;">​</a></h3><h3 id="_25、如何覆盖springboot项目的默认属性" tabindex="-1">25、如何覆盖SpringBoot项目的默认属性？ <a class="header-anchor" href="#_25、如何覆盖springboot项目的默认属性" aria-label="Permalink to &quot;25、如何覆盖SpringBoot项目的默认属性？&quot;">​</a></h3><h3 id="_26、我们如何监视所有springboot微服务" tabindex="-1">26、我们如何监视所有SpringBoot微服务？ <a class="header-anchor" href="#_26、我们如何监视所有springboot微服务" aria-label="Permalink to &quot;26、我们如何监视所有SpringBoot微服务？&quot;">​</a></h3><h3 id="_27、什么是springboot" tabindex="-1">27、什么是SpringBoot？ <a class="header-anchor" href="#_27、什么是springboot" aria-label="Permalink to &quot;27、什么是SpringBoot？&quot;">​</a></h3><h3 id="_28、服务雪崩效应产生的原因" tabindex="-1">28、服务雪崩效应产生的原因 <a class="header-anchor" href="#_28、服务雪崩效应产生的原因" aria-label="Permalink to &quot;28、服务雪崩效应产生的原因&quot;">​</a></h3><h3 id="_29、使用spring通过什么方式访问hibernate" tabindex="-1">29、使用Spring通过什么方式访问Hibernate? <a class="header-anchor" href="#_29、使用spring通过什么方式访问hibernate" aria-label="Permalink to &quot;29、使用Spring通过什么方式访问Hibernate?&quot;">​</a></h3><h3 id="_30、如何使用springboot实现分页和排序" tabindex="-1">30、如何使用SpringBoot实现分页和排序？ <a class="header-anchor" href="#_30、如何使用springboot实现分页和排序" aria-label="Permalink to &quot;30、如何使用SpringBoot实现分页和排序？&quot;">​</a></h3><h3 id="_31、springboot-2-x-有什么新特性-与-1-x-有什么区别" tabindex="-1">31、SpringBoot 2.X 有什么新特性？与 1.X 有什么区别？ <a class="header-anchor" href="#_31、springboot-2-x-有什么新特性-与-1-x-有什么区别" aria-label="Permalink to &quot;31、SpringBoot 2.X 有什么新特性？与 1.X 有什么区别？&quot;">​</a></h3>',93),i=[n];function s(p,g,E,l,b,u){return r(),e("div",null,i)}const A=o(t,[["render",s]]);export{d as __pageData,A as default};
