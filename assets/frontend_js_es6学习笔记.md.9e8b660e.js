import{_ as e,H as t,o as c,c as r,C as s,J as l,E as p,V as a,a as o}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/es6学习笔记.md","filePath":"frontend/js/es6学习笔记.md"}'),y={name:"frontend/js/es6学习笔记.md"},F=a(`<h2 id="字符串扩展" tabindex="-1">字符串扩展 <a class="header-anchor" href="#字符串扩展" aria-label="Permalink to &quot;字符串扩展&quot;">​</a></h2><h3 id="_1-unicode-表示法" tabindex="-1">1. Unicode 表示法 <a class="header-anchor" href="#_1-unicode-表示法" aria-label="Permalink to &quot;1. Unicode 表示法&quot;">​</a></h3><p>允许采用<code>\\uxxxx</code>形式表示一个字符</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\u0061</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// &quot;a&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u0061</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// &quot;a&quot;</span></span></code></pre></div><p>但是，这种表示法只限于码点在<code>\\u0000</code>~<code>\\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\uD842\\uDFB7</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\u20BB</span><span style="color:#E7EE98;">7</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 超出范围</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot; 7&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\uD842\\uDFB7</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u20BB</span><span style="color:#032F62;">7&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 超出范围</span></span>
<span class="line"><span style="color:#6A737D;">// &quot; 7&quot;</span></span></code></pre></div><p>为解决上面的超出范围， ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\u{20BB7}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;𠮷&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\u{20BB7}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;𠮷&quot;</span></span></code></pre></div><h3 id="_2-字符串的-for-of-循环" tabindex="-1">2.字符串的 for...of 循环 <a class="header-anchor" href="#_2-字符串的-for-of-循环" aria-label="Permalink to &quot;2.字符串的 for...of 循环&quot;">​</a></h3><p>ES6 为字符串添加了遍历器接口，所以可以使用<code>for of</code>， 这个遍历器最大的优点是可以识别大于<code>0xFFFF</code>的码点 。</p><h3 id="_3-模板字符串" tabindex="-1">3. 模板字符串 <a class="header-anchor" href="#_3-模板字符串" aria-label="Permalink to &quot;3. 模板字符串&quot;">​</a></h3><p><code>\${变量}</code>，这个语法里面可以进行运算</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">x</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> + </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> = </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">x</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">+</span><span style="color:#E7EE98;"> </span><span style="color:#F6F6F4;">y</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// &quot;1 + 2 = 3&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">x</span><span style="color:#032F62;">} + \${</span><span style="color:#24292E;">y</span><span style="color:#032F62;">} = \${</span><span style="color:#24292E;">x</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#24292E;">y</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// &quot;1 + 2 = 3&quot;</span></span></code></pre></div><p>模板字符串甚至还能嵌套。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tmpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">addrs</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#E7EE98;">  &lt;table&gt;</span></span>
<span class="line"><span style="color:#E7EE98;">  </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">addrs</span></span>
<span class="line"><span style="color:#E7EE98;">    </span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#E7EE98;">      (</span><span style="color:#FFB86C;font-style:italic;">addr</span><span style="color:#E7EE98;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#E7EE98;"> </span><span style="color:#E7EE98;">\`</span></span>
<span class="line"><span style="color:#E7EE98;">    &lt;tr&gt;&lt;td&gt;</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">addr.first</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#E7EE98;">    &lt;tr&gt;&lt;td&gt;</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">addr.last</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#E7EE98;">  \`</span></span>
<span class="line"><span style="color:#E7EE98;">    </span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#E7EE98;">    </span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">}</span></span>
<span class="line"><span style="color:#E7EE98;">  &lt;/table&gt;</span></span>
<span class="line"><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tmpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">addrs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  &lt;table&gt;</span></span>
<span class="line"><span style="color:#032F62;">  \${</span><span style="color:#24292E;">addrs</span></span>
<span class="line"><span style="color:#032F62;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#032F62;">(</span></span>
<span class="line"><span style="color:#032F62;">      (</span><span style="color:#005CC5;">addr</span><span style="color:#032F62;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#24292E;">addr</span><span style="color:#032F62;">.</span><span style="color:#24292E;">first</span><span style="color:#032F62;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#032F62;">    &lt;tr&gt;&lt;td&gt;\${</span><span style="color:#24292E;">addr</span><span style="color:#032F62;">.</span><span style="color:#24292E;">last</span><span style="color:#032F62;">}&lt;/td&gt;&lt;/tr&gt;</span></span>
<span class="line"><span style="color:#032F62;">  \`</span></span>
<span class="line"><span style="color:#032F62;">    )</span></span>
<span class="line"><span style="color:#032F62;">    .</span><span style="color:#6F42C1;">join</span><span style="color:#032F62;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">  &lt;/table&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="_4-标签模板" tabindex="-1">4. 标签模板 <a class="header-anchor" href="#_4-标签模板" aria-label="Permalink to &quot;4. 标签模板&quot;">​</a></h3><p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">alert</span><span style="color:#E7EE98;">\`123\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 等同于</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#032F62;">\`123\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 等同于</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_5-方法扩展" tabindex="-1">5. 方法扩展 <a class="header-anchor" href="#_5-方法扩展" aria-label="Permalink to &quot;5. 方法扩展&quot;">​</a></h3><h4 id="_5-1-string-raw" tabindex="-1">5.1 String.raw <a class="header-anchor" href="#_5-1-string-raw" aria-label="Permalink to &quot;5.1 String.raw&quot;">​</a></h4><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">String.</span><span style="color:#62E884;">raw</span><span style="color:#E7EE98;">\`Hi</span><span style="color:#F286C4;">\\n\${</span><span style="color:#BF9EEE;">2</span><span style="color:#E7EE98;"> </span><span style="color:#F286C4;">+</span><span style="color:#E7EE98;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">!\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 实际返回 &quot;Hi\\\\n5!&quot;，显示的是转义后的结果 &quot;Hi\\n5!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String.</span><span style="color:#6F42C1;">raw</span><span style="color:#032F62;">\`Hi</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\${</span><span style="color:#005CC5;">2</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">+</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">}!\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 实际返回 &quot;Hi\\\\n5!&quot;，显示的是转义后的结果 &quot;Hi\\n5!&quot;</span></span></code></pre></div><h4 id="_5-2-实例方法-includes-startswith-endswith" tabindex="-1">5.2 实例方法：includes(), startsWith(), endsWith() <a class="header-anchor" href="#_5-2-实例方法-includes-startswith-endswith" aria-label="Permalink to &quot;5.2 实例方法：includes(), startsWith(), endsWith()&quot;">​</a></h4><ul><li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li><li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`hello world\`</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">h</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">o</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str.</span><span style="color:#62E884;">endsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">m</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`hello world\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;h&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;o&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;m&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello world!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">s.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">s.</span><span style="color:#62E884;">endsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">s.</span><span style="color:#62E884;">endsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">lo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">s.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lo&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">s.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p><h4 id="_5-3-repeat-num" tabindex="-1">5.3 repeat(num) <a class="header-anchor" href="#_5-3-repeat-num" aria-label="Permalink to &quot;5.3 repeat(num)&quot;">​</a></h4><blockquote><p>返回一个新字符串，表示将原字符串重复<code>n</code>次。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">x</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;hellohello&quot;</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;x&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;xxx&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;hellohello&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>参数如果是小数，会被取整。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2.9</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;nana&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2.9</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;nana&quot;</span></span></code></pre></div><p>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">Infinity</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// RangeError</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// RangeError</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError</span></span>
<span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// RangeError</span></span></code></pre></div><p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于<code>-0</code>，<code>repeat</code>视同为 0。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">0.9</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">0.9</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>参数<code>NaN</code>等同于 0。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;&quot;</span></span></code></pre></div><p>如果<code>repeat</code>的参数是字符串，则会先转换成数字。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">na</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">repeat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// &quot;nanana&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;na&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">repeat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &quot;nanana&quot;</span></span></code></pre></div><h4 id="_5-4-padstart-padend" tabindex="-1">5.4 padStart(),padEnd() <a class="header-anchor" href="#_5-4-padstart-padend" aria-label="Permalink to &quot;5.4 padStart(),padEnd()&quot;">​</a></h4><blockquote><p>padStart() 头部补全</p><p>padEnd() 尾部补全</p><p>两个参数： 第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">总共长度是5，在x的前面补指定的字符串</span></span>
<span class="line"><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">x</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">padStart</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ab</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;ababx&#39;</span></span>
<span class="line"><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">x</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">padStart</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ab</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;abax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">x</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">padEnd</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ab</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;xabab&#39;</span></span>
<span class="line"><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">x</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">padEnd</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ab</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// &#39;xaba&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">总共长度是5，在x的前面补指定的字符串</span></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;ababx&#39;</span></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;abax&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;xabab&#39;</span></span>
<span class="line"><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">padEnd</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;ab&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;xaba&#39;</span></span></code></pre></div><p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p><p><strong>如果省去第二个参数，默认使用空格补全</strong></p><h4 id="_5-5-trimstart-trimend" tabindex="-1">5.5 trimStart()，trimEnd() <a class="header-anchor" href="#_5-5-trimstart-trimend" aria-label="Permalink to &quot;5.5 trimStart()，trimEnd()&quot;">​</a></h4><blockquote><p>和 trim 一样，这两个方法一个是去除头部空格、一个是尾部</p><p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p></blockquote><h2 id="变量的解构赋值" tabindex="-1">变量的解构赋值 <a class="header-anchor" href="#变量的解构赋值" aria-label="Permalink to &quot;变量的解构赋值&quot;">​</a></h2><h3 id="数组解构-根据索引位置赋值。" tabindex="-1">数组解构：根据<strong>索引位置</strong>赋值。 <a class="header-anchor" href="#数组解构-根据索引位置赋值。" aria-label="Permalink to &quot;数组解构：根据**索引位置**赋值。&quot;">​</a></h3><p><strong>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</strong></p><p>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值，<strong>可以解构数组的属性</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 数组解构</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [foo] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(foo); </span><span style="color:#7B7F8B;">// 输出：a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 对象解构</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { foo } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { fo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(foo); </span><span style="color:#7B7F8B;">// 输出：aa</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 数组解构</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [foo] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// 输出：a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对象解构</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { foo } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { fo: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, foo: </span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// 输出：aa</span></span></code></pre></div><p>数组解构应该对应数组，对象同理</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [foo] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(foo); </span><span style="color:#7B7F8B;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。所以没有报错，而是返回undefined</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { foo } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">foo:12</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(foo); </span><span style="color:#7B7F8B;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 这时是根据数组的索引值解构的，foo是一个变量名</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { </span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> foo } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">12</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(foo); </span><span style="color:#7B7F8B;">// 12</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [foo] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。所以没有报错，而是返回undefined</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { foo } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;foo:12&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这时是根据数组的索引值解构的，foo是一个变量名</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">: foo } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;12&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;aa&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// 12</span></span></code></pre></div><p>可以指定默认值,注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，<strong>只有当一个数组成员严格等于</strong><code>undefined</code>，默认值才会生效。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [x, y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">]; </span><span style="color:#7B7F8B;">// x=&#39;a&#39;, y=&#39;b&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [x, y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// x=&#39;a&#39;, y=&#39;b&#39;</span></span></code></pre></div><h3 id="对象解构-根据键名赋值。" tabindex="-1">对象解构：根据<strong>键名</strong>赋值。 <a class="header-anchor" href="#对象解构-根据键名赋值。" aria-label="Permalink to &quot;对象解构：根据**键名**赋值。&quot;">​</a></h3><p>对象的解构赋值，可以很方便地将现有对象的<strong>方法</strong>，赋值到某个变量</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { log } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> console; </span><span style="color:#7B7F8B;">// 解构赋值得到console.log()方法</span></span>
<span class="line"><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 调用方法，控制台输出123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { log } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> console; </span><span style="color:#6A737D;">// 解构赋值得到console.log()方法</span></span>
<span class="line"><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 调用方法，控制台输出123</span></span></code></pre></div><p><strong>嵌套</strong></p><blockquote><p>注意每层的结构要对应</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  p</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    { y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">World</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">  ]</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { p</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [x, { y }] } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj;   </span><span style="color:#7B7F8B;">// 这个时候的p是键名，只是匹配模式</span></span>
<span class="line"><span style="color:#F6F6F4;">相当于[x,{ y } ] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, { y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">World</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }]</span></span>
<span class="line"><span style="color:#F6F6F4;">x </span><span style="color:#7B7F8B;">// &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">y </span><span style="color:#7B7F8B;">// &quot;World&quot;</span></span>
<span class="line"><span style="color:#F286C4;">----------------------------------------------------</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> node </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  loc</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    start</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      line</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      column</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { loc, loc</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { start }, loc</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { start</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { line }} } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> node;</span></span>
<span class="line"><span style="color:#F6F6F4;">line </span><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#F6F6F4;">loc  </span><span style="color:#7B7F8B;">// Object {start: Object}</span></span>
<span class="line"><span style="color:#F6F6F4;">start </span><span style="color:#7B7F8B;">// Object {line: 1, column: 5}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  p: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    { y: </span><span style="color:#032F62;">&#39;World&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">p</span><span style="color:#24292E;">: [x, { y }] } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj;   </span><span style="color:#6A737D;">// 这个时候的p是键名，只是匹配模式</span></span>
<span class="line"><span style="color:#24292E;">相当于[x,{ y } ] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">, { y: </span><span style="color:#032F62;">&#39;World&#39;</span><span style="color:#24292E;"> }]</span></span>
<span class="line"><span style="color:#24292E;">x </span><span style="color:#6A737D;">// &quot;Hello&quot;</span></span>
<span class="line"><span style="color:#24292E;">y </span><span style="color:#6A737D;">// &quot;World&quot;</span></span>
<span class="line"><span style="color:#D73A49;">----------------------------------------------------</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">node</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  loc: {</span></span>
<span class="line"><span style="color:#24292E;">    start: {</span></span>
<span class="line"><span style="color:#24292E;">      line: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      column: </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { loc, </span><span style="color:#E36209;">loc</span><span style="color:#24292E;">: { start }, </span><span style="color:#E36209;">loc</span><span style="color:#24292E;">: { </span><span style="color:#E36209;">start</span><span style="color:#24292E;">: { line }} } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> node;</span></span>
<span class="line"><span style="color:#24292E;">line </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">loc  </span><span style="color:#6A737D;">// Object {start: Object}</span></span>
<span class="line"><span style="color:#24292E;">start </span><span style="color:#6A737D;">// Object {line: 1, column: 5}</span></span></code></pre></div><p><strong>对象的结构赋值可以获取继承的属性</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {};</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 通过setPrototypeOf方法将obj2设置为obj1的原型对象</span></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">setPrototypeOf</span><span style="color:#F6F6F4;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#7B7F8B;">// obj1继承了 obj2的属性</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> { foo } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj1;</span></span>
<span class="line"><span style="color:#F6F6F4;">foo; </span><span style="color:#7B7F8B;">// &quot;bar&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { foo: </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过setPrototypeOf方法将obj2设置为obj1的原型对象</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">setPrototypeOf</span><span style="color:#24292E;">(obj1, obj2);</span></span>
<span class="line"><span style="color:#6A737D;">// obj1继承了 obj2的属性</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj1;</span></span>
<span class="line"><span style="color:#24292E;">foo; </span><span style="color:#6A737D;">// &quot;bar&quot;</span></span></code></pre></div><h3 id="字符串解构" tabindex="-1"><strong>字符串解构</strong> <a class="header-anchor" href="#字符串解构" aria-label="Permalink to &quot;**字符串解构**&quot;">​</a></h3><p>字符串也可以解构赋值。这时因为此时，字符串被转换成了一个类似数组的对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> [a, b, c, d, e] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">a; </span><span style="color:#7B7F8B;">// &quot;h&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">b; </span><span style="color:#7B7F8B;">// &quot;e&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">c; </span><span style="color:#7B7F8B;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">d; </span><span style="color:#7B7F8B;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">e; </span><span style="color:#7B7F8B;">// &quot;o&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 类似数组的对象有length属性</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { length</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> len } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">len; </span><span style="color:#7B7F8B;">// 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">a</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">b</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">c</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">d</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">e</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a; </span><span style="color:#6A737D;">// &quot;h&quot;</span></span>
<span class="line"><span style="color:#24292E;">b; </span><span style="color:#6A737D;">// &quot;e&quot;</span></span>
<span class="line"><span style="color:#24292E;">c; </span><span style="color:#6A737D;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#24292E;">d; </span><span style="color:#6A737D;">// &quot;l&quot;</span></span>
<span class="line"><span style="color:#24292E;">e; </span><span style="color:#6A737D;">// &quot;o&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 类似数组的对象有length属性</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">length</span><span style="color:#24292E;">: len } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">len; </span><span style="color:#6A737D;">// 5</span></span></code></pre></div><h3 id="数值和布尔值的解构" tabindex="-1">数值和布尔值的解构 <a class="header-anchor" href="#数值和布尔值的解构" aria-label="Permalink to &quot;数值和布尔值的解构&quot;">​</a></h3><blockquote><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。即转换为 Number 对象，和 Boolean 对象</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { toString</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> s } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">s </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Number</span><span style="color:#F6F6F4;">.prototype.toString; </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> { toString</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> s } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">s </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Boolean</span><span style="color:#F6F6F4;">.prototype.toString; </span><span style="color:#7B7F8B;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">toString</span><span style="color:#24292E;">: s } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Number</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString; </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">toString</span><span style="color:#24292E;">: s } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Boolean</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString; </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>可以解构对应的对象属性、方法</p><h3 id="函数参数解构" tabindex="-1">函数参数解构 <a class="header-anchor" href="#函数参数解构" aria-label="Permalink to &quot;函数参数解构&quot;">​</a></h3><blockquote><p>在实参传递给形参的时候就会被解构</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">([</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;">]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> y;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">([</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p>当然也可以设置默认值，<strong>但注意是给参数的值(也就是变量 x,y)</strong> 设置默认值</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {}) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> [x, y];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">({ x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;"> }); </span><span style="color:#7B7F8B;">// [3, 8]</span></span>
<span class="line"><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">({ x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> }); </span><span style="color:#7B7F8B;">// [3, 0]</span></span>
<span class="line"><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">({}); </span><span style="color:#7B7F8B;">// [0, 0]</span></span>
<span class="line"><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// [0, 0]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({ </span><span style="color:#E36209;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [x, y];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, y: </span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// [3, 8]</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({ x: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> }); </span><span style="color:#6A737D;">// [3, 0]</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">({}); </span><span style="color:#6A737D;">// [0, 0]</span></span>
<span class="line"><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [0, 0]</span></span></code></pre></div><p>在声明语句中不可使用<code>()</code>括号</p><p>赋值语句的非模式部分，可以使用圆括号。</p><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><blockquote><p>类似于数组，但成员都是唯一的，没有重复</p></blockquote><p><strong>属性</strong>：</p><p><code>Set.prototype.constructor</code>：构造函数，默认就是<code>Set</code>函数。</p><p><code>Set.prototype.size</code>：返回<code>Set</code>实例的成员总数。</p><p><strong>方法</strong></p><ul><li><code>Set.prototype.add(value)</code>：添加某个值，返回 Set 结构本身。</li><li><code>Set.prototype.delete(value)</code>：删除某个值，返回一个布尔值，表示删除是否成功。</li><li><code>Set.prototype.has(value)</code>：返回一个布尔值，表示该值是否为<code>Set</code>的成员。</li><li><code>Set.prototype.clear()</code>：清除所有成员，没有返回值。</li></ul><p><code>Set</code>函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">set] </span><span style="color:#7B7F8B;">// [1,2,3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">set] </span><span style="color:#6A737D;">// [1,2,3]</span></span></code></pre></div><p>或者使用 add()方法添加成员，通常配合循环遍历使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(x));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> s) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2 3 5 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> s) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 2 3 5 4</span></span></code></pre></div><p>向 Set 加入值得时候不会进行类型转换，如：5 和 &#39;5&#39; 是不同的值。Set 内部判断两个值是否不同，使用的算法叫做“Same-value-zero equality”，它类似于精确相等运算符（<code>===</code>），主要的区别是向 Set 加入值时认为<code>NaN</code>等于自身，而精确相等运算符认为<code>NaN</code>不等于自身。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(set); </span><span style="color:#7B7F8B;">// [5,&quot;5&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">NaN</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(set); </span><span style="color:#7B7F8B;">// [NaN]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set); </span><span style="color:#6A737D;">// [5,&quot;5&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">NaN</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set); </span><span style="color:#6A737D;">// [NaN]</span></span></code></pre></div><p>对象和数组总是不相等的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">([{ a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> }, { a</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> }, [</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]]);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(set.size); </span><span style="color:#7B7F8B;">// 4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([{ a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }, { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> }, [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]]);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(set.size); </span><span style="color:#6A737D;">// 4</span></span></code></pre></div><p><code>Array.from</code>方法可以将 Set 结构转为数组。</p><p><strong>总结几种数组去重方法</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(arr)]; </span><span style="color:#7B7F8B;">// [1,2]</span></span>
<span class="line"><span style="color:#7B7F8B;">// -------------------</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  set.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">set]; </span><span style="color:#7B7F8B;">// [1,2]</span></span>
<span class="line"><span style="color:#7B7F8B;">// -------------------------</span></span>
<span class="line"><span style="color:#7B7F8B;">// 3</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(arr);</span></span>
<span class="line"><span style="color:#F6F6F4;">set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">from</span><span style="color:#F6F6F4;">(set);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 这个是上面的简写版</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">from</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(arr)); </span><span style="color:#7B7F8B;">// [1,2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//4</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(arr);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [a, b] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> set;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [a, b];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr2); </span><span style="color:#7B7F8B;">// [1,2]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr)]; </span><span style="color:#6A737D;">// [1,2]</span></span>
<span class="line"><span style="color:#6A737D;">// -------------------</span></span>
<span class="line"><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  set.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">set]; </span><span style="color:#6A737D;">// [1,2]</span></span>
<span class="line"><span style="color:#6A737D;">// -------------------------</span></span>
<span class="line"><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#24292E;">set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(set);</span></span>
<span class="line"><span style="color:#6A737D;">// 这个是上面的简写版</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr)); </span><span style="color:#6A737D;">// [1,2]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//4</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [a, b] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> set;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [a, b];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr2); </span><span style="color:#6A737D;">// [1,2]</span></span></code></pre></div><p><strong>keys()，values()，entries()</strong></p><p>这三个方法返回的都是遍历器对象。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys</code>方法和<code>values</code>方法的行为完全一致</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> set </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">red</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">green</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">blue</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#7B7F8B;">// keys() 和 values() 返回的结果是一样的</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> set.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 默认生成的遍历器是values()，所以这里也可以省略</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(item);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// red</span></span>
<span class="line"><span style="color:#7B7F8B;">// green</span></span>
<span class="line"><span style="color:#7B7F8B;">// blue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> set.</span><span style="color:#62E884;">entries</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(item);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// [&quot;red&quot;, &quot;red&quot;]</span></span>
<span class="line"><span style="color:#7B7F8B;">// [&quot;green&quot;, &quot;green&quot;]</span></span>
<span class="line"><span style="color:#7B7F8B;">// [&quot;blue&quot;, &quot;blue&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> set </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;red&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;green&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;blue&quot;</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// keys() 和 values() 返回的结果是一样的</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> set.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 默认生成的遍历器是values()，所以这里也可以省略</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// red</span></span>
<span class="line"><span style="color:#6A737D;">// green</span></span>
<span class="line"><span style="color:#6A737D;">// blue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> set.</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;red&quot;, &quot;red&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;green&quot;, &quot;green&quot;]</span></span>
<span class="line"><span style="color:#6A737D;">// [&quot;blue&quot;, &quot;blue&quot;]</span></span></code></pre></div><h2 id="weakset" tabindex="-1">WeakSet <a class="header-anchor" href="#weakset" aria-label="Permalink to &quot;WeakSet&quot;">​</a></h2><blockquote><p>主要是更好的进行<code>js</code>的垃圾回收</p></blockquote><p><code>Set</code>是强类型引用，因此并不会进行垃圾回收。而<code>WeakSet</code>是弱类型引用，WeakSet 里面的引用，都不计入垃圾回收机制</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// weakSet</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> weakSet </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WeakSet</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">weakSet.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(b)</span></span>
<span class="line"><span style="color:#F6F6F4;">b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// b被回收了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// weakSet</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">weakSet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeakSet</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { name: </span><span style="color:#032F62;">&#39;gauhar&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">weakSet.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(b)</span></span>
<span class="line"><span style="color:#24292E;">b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// b被回收了</span></span></code></pre></div><p>与<code>Set</code>的区别</p><ul><li>与<code>Set</code>相比，<code>WeakSet</code> 只能是<strong>对象的集合</strong>，而不能是任何类型的任意值。</li><li><code>WeakSet</code>持弱引用：集合中对象的引用为弱引用。 如果没有其他的对<code>WeakSet</code>中对象的引用，那么这些对象会被当成垃圾回收掉。 这也意味着<code>WeakSet</code>中没有存储当前对象的列表。 正因为这样，<code>WeakSet</code> 是不可枚举的。</li></ul><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用<strong>字符串</strong>当作键。这给它的使用带来了很大的限制。</p><p>Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，<strong>各种类型的值（包括对象）都可以当作键。</strong></p><h3 id="对象去重" tabindex="-1">对象去重 <a class="header-anchor" href="#对象去重" aria-label="Permalink to &quot;对象去重&quot;">​</a></h3><blockquote><p>利用对象中的唯一标识(id)作为键名。当键名一样时，后面的数据会覆盖前面的数据，达到去重的目的</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> designData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  {</span></span>
<span class="line"><span style="color:#F6F6F4;">    id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">🍇</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  {</span></span>
<span class="line"><span style="color:#F6F6F4;">    id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">🌰</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  {</span></span>
<span class="line"><span style="color:#F6F6F4;">    id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">🐂</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Map</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> designData.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">(temp);</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(item.id, item)); </span><span style="color:#7B7F8B;">// payment_id唯一标识作为键名，去重</span></span>
<span class="line"><span style="color:#F6F6F4;">designData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">map.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">()];</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(designData);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> designData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;🍇&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    id: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;🌰&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    id: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;🐂&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> designData.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(temp);</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(item.id, item)); </span><span style="color:#6A737D;">// payment_id唯一标识作为键名，去重</span></span>
<span class="line"><span style="color:#24292E;">designData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">map.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(designData);</span></span></code></pre></div><h2 id="promise-对象" tabindex="-1">Promise 对象 <a class="header-anchor" href="#promise-对象" aria-label="Permalink to &quot;Promise 对象&quot;">​</a></h2><h3 id="_1-3-个状态" tabindex="-1">1. 3 个状态 <a class="header-anchor" href="#_1-3-个状态" aria-label="Permalink to &quot;1. 3 个状态&quot;">​</a></h3><ol><li>pending：进行中</li><li>fulfilled：已成功</li><li>rejected：已失败</li></ol><p><strong>实例</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> promise </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ... some code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#7B7F8B;">/* 异步操作成功 */</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(value);</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">reject</span><span style="color:#F6F6F4;">(error);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">promise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ... some code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6A737D;">/* 异步操作成功 */</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><code>then</code>可以接受两个回调函数作为参数，第一个为<code>resolved</code>，第二个为<code>rejected</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">promise.</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F6F6F4;">) {},</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">error</span><span style="color:#F6F6F4;">) {}</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_2-promise-新建之后会立即执行" tabindex="-1">2. promise 新建之后会立即执行 <a class="header-anchor" href="#_2-promise-新建之后会立即执行" aria-label="Permalink to &quot;2. promise 新建之后会立即执行&quot;">​</a></h3>`,120),E=a(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> promise </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">promise</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">done</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">promise.</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(res); </span><span style="color:#7B7F8B;">// 异步  将在当前脚本所有同步任务执行完才会执行</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hi</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 主线程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// promise</span></span>
<span class="line"><span style="color:#7B7F8B;">// Hi</span></span>
<span class="line"><span style="color:#7B7F8B;">// done</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;promise&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;done&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">promise.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res); </span><span style="color:#6A737D;">// 异步  将在当前脚本所有同步任务执行完才会执行</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 主线程</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// promise</span></span>
<span class="line"><span style="color:#6A737D;">// Hi</span></span>
<span class="line"><span style="color:#6A737D;">// done</span></span></code></pre></div><h3 id="_3-promise-all" tabindex="-1">3.promise.all() <a class="header-anchor" href="#_3-promise-all" aria-label="Permalink to &quot;3.promise.all()&quot;">​</a></h3><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">all</span><span style="color:#F6F6F4;">([p1, p2, p3]);</span></span>
<span class="line"><span style="color:#F6F6F4;">p.</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">catch</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(err)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">p</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([p1, p2, p3]);</span></span>
<span class="line"><span style="color:#24292E;">p.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，<code>res</code>返回的是一个数组。若<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时<code>err</code>是第一个被<code>reject</code>的实例的返回值（错误信息）</p><p>如果作为参数的 Promise 实例，自己定义了<code>catch</code>方法，那么它一旦被<code>rejected</code>，并不会触发<code>Promise.all()</code>的<code>catch</code>方法。<strong>所以参数 Promise 实例最好不要定义<code>catch</code></strong></p><h2 id="class-类" tabindex="-1">class 类 <a class="header-anchor" href="#class-类" aria-label="Permalink to &quot;class 类&quot;">​</a></h2><h3 id="es5-实现类的方法" tabindex="-1">es5 实现类的方法 <a class="header-anchor" href="#es5-实现类的方法" aria-label="Permalink to &quot;es5 实现类的方法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">firstName</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">lastName</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.firstName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> firstName;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.lastName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lastName;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">name</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.firstName </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.lastName);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chan</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">name</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// gauhar chan</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#E36209;">firstName</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstName;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastName;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastName);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gauhar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;chan&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// gauhar chan</span></span></code></pre></div><h3 id="es6" tabindex="-1">es6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;es6&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Person</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">firstName</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">lastName</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.firstName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> firstName;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.lastName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lastName;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">name</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.firstName </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.lastName);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chan1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">name</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// gauhar chan1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">firstName</span><span style="color:#24292E;">, </span><span style="color:#E36209;">lastName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstName;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lastName;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstName </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.lastName);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gauhar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;chan1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// gauhar chan1</span></span></code></pre></div><p><strong>类的数据类型就是函数，类本身就指向构造函数。</strong></p><h3 id="修改-增加类的属性和方法" tabindex="-1">修改，增加类的属性和方法 <a class="header-anchor" href="#修改-增加类的属性和方法" aria-label="Permalink to &quot;修改，增加类的属性和方法&quot;">​</a></h3><blockquote><p>由于类的方法都定义在<code>prototype</code>对象上面，所以类的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">.prototype.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> person1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chan1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(person1.age); </span><span style="color:#7B7F8B;">// 12</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">.prototype.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1234</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(person1.age); </span><span style="color:#7B7F8B;">// 1234</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">sayHi</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">chan1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">sayHi</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Point</span><span style="color:#F6F6F4;">.prototype, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {},</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">toValue</span><span style="color:#F6F6F4;">() {},</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> person1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gauhar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;chan1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(person1.age); </span><span style="color:#6A737D;">// 12</span></span>
<span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1234</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(person1.age); </span><span style="color:#6A737D;">// 1234</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">Person</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">sayHi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;gauhar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;chan1&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">sayHi</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Point</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">toValue</span><span style="color:#24292E;">() {},</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>类的内部所有定义的方法，都是不可枚举的</strong></p><p>与 ES5 一样，类的所有实例共享一个原型对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> p1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Point</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> p2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Point</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">p1.__proto__ </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> p2.__proto__;</span></span>
<span class="line"><span style="color:#7B7F8B;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> p2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p1.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> p2.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//true</span></span></code></pre></div>`,18),i=s("p",null,"注意修改原型，“类”的原始定义，影响到所有实例",-1),d=a(`<h3 id="class-表达式" tabindex="-1">class 表达式 <a class="header-anchor" href="#class-表达式" aria-label="Permalink to &quot;class 表达式&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> MyClass </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Me</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">constructor</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Me.name; </span><span style="color:#7B7F8B;">// Me 类的名字</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> my </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyClass</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MyClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Me</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Me.name; </span><span style="color:#6A737D;">// Me 类的名字</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> my </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyClass</span><span style="color:#24292E;">();</span></span></code></pre></div><p><strong>这个类的名字是<code>Me</code>，但是<code>Me</code>只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用<code>MyClass</code>引用。</strong></p><h2 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h2><h3 id="export" tabindex="-1">export <a class="header-anchor" href="#export" aria-label="Permalink to &quot;export&quot;">​</a></h3><blockquote><p>输出多个</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fun</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> { str, fun };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 引入</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { str, fun } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./index.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gauhar&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> { str, fun };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 引入</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { str, fun } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="export-default" tabindex="-1">export default <a class="header-anchor" href="#export-default" aria-label="Permalink to &quot;export default&quot;">​</a></h3><blockquote><p>输出一个</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> str;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 引入  不一定是str，可以是任意的名字</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./index.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;gauhar&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> str;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 引入  不一定是str，可以是任意的名字</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="编程风格" tabindex="-1">编程风格 <a class="header-anchor" href="#编程风格" aria-label="Permalink to &quot;编程风格&quot;">​</a></h2><h3 id="对象动态属性名" tabindex="-1">对象动态属性名 <a class="header-anchor" href="#对象动态属性名" aria-label="Permalink to &quot;对象动态属性名&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">()]</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">number</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(obj);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">()]: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(obj);</span></span></code></pre></div><h3 id="初始化对象" tabindex="-1">初始化对象 <a class="header-anchor" href="#初始化对象" aria-label="Permalink to &quot;初始化对象&quot;">​</a></h3><blockquote><p>最好把对象静态化</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> };</span></span>
<span class="line"><span style="color:#F6F6F4;">a.x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { x: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">a.x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span></code></pre></div>`,16);function u(C,h,g,D,q,b){const n=t("font");return c(),r("div",null,[F,s("blockquote",null,[l(n,{color:"red"},{default:p(()=>[o("**无法中途取消**")]),_:1})]),E,s("blockquote",null,[l(n,{color:"red"},{default:p(()=>[o("`__proto__` 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 **`Object.getPrototypeOf`** 方法来获取实例对象的原型，然后再来为原型添加方法/属性。")]),_:1}),i]),d])}const B=e(y,[["render",u]]);export{A as __pageData,B as default};
