import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/image-2023-03-22-21-04-56.a6ff3e7f.png",o="/docs/assets/1668262460269.f404808d.png",e="/docs/assets/1668262589242.4d598091.png",t="/docs/assets/1668262831222.e70962fe.png",c="/docs/assets/1668263019076.40d6883c.png",r="/docs/assets/1668263179793.e77b0616.png",y="/docs/assets/1668263481919.fb21654d.png",F="/docs/assets/1668263759999.3f26c6bb.png",i="/docs/assets/image-2023-03-26-14-47-39.f4418dfc.png",E="/docs/assets/1668264280209.f39d9eaa.png",g="/docs/assets/1668264499362.caf26040.png",u="/docs/assets/1668265337659.dadd50d4.png",C="/docs/assets/1668267533206.1003e6cd.png",D="/docs/assets/1668267760295.db678d97.png",d="/docs/assets/1668267891624.df2f73fa.png",A="/docs/assets/1668268046104.cc9d9df7.png",k="/docs/assets/1668268144938.47e3f429.png",B="/docs/assets/1668268174867.19201a35.png",S="/docs/assets/1668268230804.9dc7f784.png",m="/docs/assets/1668270124031.c82275e2.png",b="/docs/assets/image-2023-03-26-15-40-43.8aa01cef.png",h="/docs/assets/image-2023-03-26-15-41-35.911600f5.png",f="/docs/assets/1668315156739.91e495be.png",O=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/javase/13-网络编程.md","filePath":"backend/javase/13-网络编程.md"}'),v={name:"backend/javase/13-网络编程.md"},q=l('<h2 id="网络编程" tabindex="-1">网络编程 <a class="header-anchor" href="#网络编程" aria-label="Permalink to &quot;网络编程&quot;">​</a></h2><ul><li>网络编程 <ul><li>网络编程三要素 🍐 ❤️</li><li>UDP通讯 🚀 🍐</li><li>TCP通讯 🍐 ✏️完成案例即可</li><li>TCP和UDP的区别 🍐 ❤️</li></ul></li></ul><p>前置知识</p><ol><li>完成过字节流复制文件的案例</li><li>理解字节流复制文件的传输过程</li><li>理解文件是由字节组成的</li><li>曾经有过发送图片给朋友，却因为网络问题，失败的经历(如图👉) <img src="'+p+'"></li></ol><h2 id="一、网络编程概述-🚩" tabindex="-1">一、网络编程概述 🚩 <a class="header-anchor" href="#一、网络编程概述-🚩" aria-label="Permalink to &quot;一、网络编程概述 🚩&quot;">​</a></h2><p>网络编程:编写的应用程序可以与网络上其他设备中的应用程序进行数据交互</p><p><strong>网络编程的作用：</strong></p><ol><li>如我们经常用的微信收发消息就需要用到网络通信的技术</li><li>如我们打开浏览器可以浏览各种网络、视频等也需要用到网络编程的技术</li></ol><p><strong>Java提供的网络编程的解决方案:</strong></p><ol><li>在java.net包下提供了诸多类，实现网络编程</li></ol><p><strong>网络通信的基本架构：</strong></p><ol><li>CS架构（Client 客户端/Server服务端）</li><li>BS架构（Brower 浏览器/Server服务端）</li></ol><ul><li><strong>CS架构的特点：</strong> CS架构需要用户在自己的电脑或者手机上安装客户端软件，然后由客户端软件通过网络连接服务器程序，由服务器把数据发给客户端，客户端就可以在页面上看到各种数据了。</li></ul><img src="'+o+'"><ul><li><p><strong>BS架构的特点：</strong> BS架构不需要开发客户端软件，用户只需要通过浏览器输入网址就可以直接从服务器获取数据，并由服务器将数据返回给浏览器，用户在页面上就可以看到各种数据了。</p><img src="'+e+'"></li></ul><blockquote><p>不管是CS、还是BS都是需要用到网络编程的相关技术</p></blockquote><h2 id="二、网络编程三要素-🚩-🍐-❤️" tabindex="-1">二、网络编程三要素 🚩 🍐 ❤️ <a class="header-anchor" href="#二、网络编程三要素-🚩-🍐-❤️" aria-label="Permalink to &quot;二、网络编程三要素 🚩 🍐 ❤️&quot;">​</a></h2><p>网络编程三要素：IP地址、端口号、通信协议</p><img src="'+t+`"><p>如下图所示：假设现在要从一台电脑中的微信上，发一句“你愁啥？”到其他电脑的微信上，流程如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.先通过ip地址找到对方的电脑</span></span>
<span class="line"><span style="color:#F6F6F4;">2.再通过端口号找到对方的电脑上的应用程序</span></span>
<span class="line"><span style="color:#F6F6F4;">3.按照双方约定好的规则发送、接收数据</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.先通过ip地址找到对方的电脑</span></span>
<span class="line"><span style="color:#24292E;">2.再通过端口号找到对方的电脑上的应用程序</span></span>
<span class="line"><span style="color:#24292E;">3.按照双方约定好的规则发送、接收数据</span></span></code></pre></div><img src="`+c+'"><h3 id="_1️⃣-2-1-ip地址" tabindex="-1">1️⃣ 2.1 IP地址 <a class="header-anchor" href="#_1️⃣-2-1-ip地址" aria-label="Permalink to &quot;1️⃣ 2.1 IP地址&quot;">​</a></h3><p>IP（Ineternet Protocol）全称互联网协议地址，是分配给网络设备的唯一表示。</p><blockquote><p>IP地址分为：IPV4地址、IPV6地址</p></blockquote><p>IPV4地址由32个比特位（4个字节）组成，如果下图所示，但是由于采用二进制太不容易阅读了，于是就将每8位看成一组，把每一组用<strong>十进制</strong>表示（叫做<strong>点分十进制表示法</strong>）。所以就有了我们经常看到的IP地址形式，如：192.168.1.66</p><img src="'+r+'"><p>如果想查看本机的IP地址，可以在命令行窗口(win+R cmd)，输入<code>ipconfig</code>命令查看，如下图所示</p><img src="'+y+'"><p>经过不断的发展，现在越来越多的设备需要联网，IPV4地址已经不够用了(255 * 255 * 255 * 255=约42亿)</p><p>IPV6采用128位二进制数据来表示（16个字节），号称可以为<strong>地球上的每一粒沙子编一个IP地址</strong>，</p><p>IPV6比较长，为了方便阅读，每16位编成一组，每组采用十六进制数据表示，然后用<strong>冒号</strong>隔开（<strong>称为冒分十六进制表示法</strong>），如下图所示</p><img src="'+F+'"><p>现在的网络设备，一般IPV4和IPV6地址都是支持的。 <img src="'+i+'"></p><p>域名</p><p>域名是一个IP地址上的<strong>面具</strong> 。一个域名的目的是<strong>便于记忆和沟通</strong>的一组服务器的地址</p><blockquote><p>如：百度的域名：<a href="https://www.baidu.com/" target="_blank" rel="noreferrer">https://www.baidu.com/open in new window</a> 对应的ip地址是：14.119.104.189</p></blockquote><p><strong>域名如何找到匹配IP？</strong></p><p>域名和IP其实是一一对应的，由<strong>运营商来管理域名和IP的对应关系</strong>。我们在浏览器上敲一个域名时，首先由运营商的域名解析服务，把域名转换为ip地址，再通过IP地址去访问对应的服务器设备。</p><img src="'+E+`"><blockquote><p><strong>本地回送地址</strong>：<code>127.0.0.1</code>，方便测试使用(因为电脑没插网线或者没连接Wifi的时候没有分配ip地址)</p></blockquote><p>点击查看常见的几个关于控制台命令</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ipconfig</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> 查看本机的ip地址</span></span>
<span class="line"><span style="color:#F6F6F4;">ping 域名</span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;">ip  检测当前电脑与指定的ip是否连通</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ipconfig</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 查看本机的ip地址</span></span>
<span class="line"><span style="color:#24292E;">ping 域名</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">ip  检测当前电脑与指定的ip是否连通</span></span></code></pre></div><p>ping命令出现以下的提示，说明网络是通过的</p><img src="`+g+'"><p>使用Java代码获得本机的IP地址</p><p><strong>Java中也有一个类用来表IP地址，这个类是InetAddress类</strong><img src="'+u+`"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">InetAddressTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、获取本机IP地址对象的</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">InetAddress</span><span style="color:#F6F6F4;"> ip1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ip1.</span><span style="color:#62E884;">getHostName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ip1.</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、获取指定IP或者域名的IP地址对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">InetAddress</span><span style="color:#F6F6F4;"> ip2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> InetAddress.</span><span style="color:#62E884;">getByName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">www.baidu.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ip2.</span><span style="color:#62E884;">getHostName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ip2.</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// ping www.baidu.com</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ip2.</span><span style="color:#62E884;">isReachable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">6000</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetAddressTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、获取本机IP地址对象的</span></span>
<span class="line"><span style="color:#24292E;">        InetAddress ip1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ip1.</span><span style="color:#6F42C1;">getHostName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ip1.</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、获取指定IP或者域名的IP地址对象。</span></span>
<span class="line"><span style="color:#24292E;">        InetAddress ip2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> InetAddress.</span><span style="color:#6F42C1;">getByName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;www.baidu.com&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ip2.</span><span style="color:#6F42C1;">getHostName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ip2.</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ping www.baidu.com</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ip2.</span><span style="color:#6F42C1;">isReachable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6000</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>作业</p><p>🚩</p><ol><li>使用win+R 输入cmd 打开控制台，输入ipconfig 查看本机的ip地址</li><li>或者打开网络适配器，查看网络详情，查看本机地址。或者打开飞秋查看你同学的网络地址</li><li>在Java类中使用InetAddress的api 获得本机地址(方法：getHostAddress)</li></ol><h3 id="_2️⃣-2-2-端口号" tabindex="-1">2️⃣ 2.2 端口号 <a class="header-anchor" href="#_2️⃣-2-2-端口号" aria-label="Permalink to &quot;2️⃣ 2.2 端口号&quot;">​</a></h3><p>端口号</p><p>指的是计算机设备上运行的<strong>应用程序的标识</strong>，被规定为一个<strong>16位的二进制数据</strong>，范围（<strong>0~65535</strong>）</p><p>端口号分类:了解</p><ul><li>周知端口：0~1023，被预先定义的知名应用程序占用（如：HTTP占用80，FTP占用21）</li><li>注册端口：1024~49151，分配给用户经常或者某些应用程序</li><li>动态端口：49152~65536，之所以称为动态端口，是因为它一般不固定分配给某进程，而是动态分配的。</li></ul><p><strong>常见的端口：</strong> 开发常见 👈</p><ol><li>80端口 是http协议的端口</li><li>443端口 是https协议的端口</li><li>3306端口 是mysql数据库的端口</li><li>22端口 是文件上传的端口</li></ol><p>注意:同一个计算机设备中，不能出现两个应用程序，用同一个端口号 <img src="`+C+'"></p><h3 id="_3️⃣-2-4-协议" tabindex="-1">3️⃣ 2.4 协议 <a class="header-anchor" href="#_3️⃣-2-4-协议" aria-label="Permalink to &quot;3️⃣ 2.4 协议&quot;">​</a></h3><p>协议</p><p>网络上通信的设备，事先规定的<strong>连接规则</strong>，以及<strong>传输数据的规则</strong>被称为网络通信协议。</p><p><strong>作用：</strong></p><img src="'+D+'"><p>**协议的种类：**了解传输层协议</p><blockquote><p>只要按照OSI网络参考模型制造的设备，就可以在国际互联网上互联互通</p></blockquote><img src="'+d+'"><ul><li><strong>UDP协议特点</strong></li></ul><img src="'+A+'"><ul><li><strong>TPC协议特点</strong></li></ul><img src="'+k+'"><p>三次握手如下图所示 <strong>：目的是确认通信双方，手法消息都是正常没问题的</strong></p><img src="'+B+'"><p>四次挥手如下图所示：<strong>目的是确保双方数据的收发已经完成，没有数据丢失</strong></p><img src="'+S+`"><h2 id="三、udp通信代码-案例-🚩" tabindex="-1">三、UDP通信代码（案例） 🚩 <a class="header-anchor" href="#三、udp通信代码-案例-🚩" aria-label="Permalink to &quot;三、UDP通信代码（案例） 🚩&quot;">​</a></h2><p>学习基于UDP协议通信的程序</p><p>UDP入门案例前置知识：</p><ol><li>了解 UDP是面向无连接的、不需要确认双方是否存在，是不可靠的协议</li><li>Java提供了一个类叫<code>DatagramSocket</code>来完成基于UDP协议的收发数据</li><li>使用<code>DatagramSocket</code>收发数据时，数据要以数据包的形式体现，一个数据包限制在<strong>64KB以内</strong>大小有限制</li><li><strong>有发送端和接收端2个程序</strong></li></ol><h3 id="_1️⃣-3-1-入门程序-✏️" tabindex="-1">1️⃣ 3.1 入门程序 ✏️ <a class="header-anchor" href="#_1️⃣-3-1-入门程序-✏️" aria-label="Permalink to &quot;1️⃣ 3.1 入门程序 ✏️&quot;">​</a></h3><p>需求：客户端程序发一个字符串数据给服务端，服务端程序接收数据并打印。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Client</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//        创建数据报套接字并将其绑定到本机地址上的任何可用端口</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建客户端对象（发韭菜出去的人）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramSocket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramSocket</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#7B7F8B;">/* public DatagramPacket(byte buf[], int length,</span></span>
<span class="line"><span style="color:#7B7F8B;">             InetAddress address, int port)</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数一：封装要发出去的数据。</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数二：发送出去的数据大小（字节个数）</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数三：服务端的IP地址（找到服务端主机）</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数四：服务端程序的端口。</span></span>
<span class="line"><span style="color:#7B7F8B;">             */</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] bytes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">发送端：我是老王，你在吗</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramPacket</span><span style="color:#F6F6F4;"> packet </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramPacket</span><span style="color:#F6F6F4;">(bytes, bytes.length</span></span>
<span class="line"><span style="color:#F6F6F4;">                , InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">(),  </span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、开始正式发送这个数据包的数据出去了</span></span>
<span class="line"><span style="color:#F6F6F4;">        socket.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(packet);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">客户端数据发送完毕~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 释放资源！</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//        创建数据报套接字并将其绑定到本机地址上的任何可用端口</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建客户端对象（发韭菜出去的人）</span></span>
<span class="line"><span style="color:#24292E;">        DatagramSocket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramSocket</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">/* public DatagramPacket(byte buf[], int length,</span></span>
<span class="line"><span style="color:#6A737D;">             InetAddress address, int port)</span></span>
<span class="line"><span style="color:#6A737D;">               参数一：封装要发出去的数据。</span></span>
<span class="line"><span style="color:#6A737D;">               参数二：发送出去的数据大小（字节个数）</span></span>
<span class="line"><span style="color:#6A737D;">               参数三：服务端的IP地址（找到服务端主机）</span></span>
<span class="line"><span style="color:#6A737D;">               参数四：服务端程序的端口。</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;发送端：我是老王，你在吗&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        DatagramPacket packet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramPacket</span><span style="color:#24292E;">(bytes, bytes.length</span></span>
<span class="line"><span style="color:#24292E;">                , InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">(),  </span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、开始正式发送这个数据包的数据出去了</span></span>
<span class="line"><span style="color:#24292E;">        socket.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(packet);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;客户端数据发送完毕~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 释放资源！</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----服务端启动----</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramSocket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">64</span><span style="color:#F6F6F4;">]; </span><span style="color:#7B7F8B;">// 64KB.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramPacket</span><span style="color:#F6F6F4;"> packet </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramPacket</span><span style="color:#F6F6F4;">(buffer, buffer.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、开始正式使用数据包来接收客户端发来的数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        socket.</span><span style="color:#62E884;">receive</span><span style="color:#F6F6F4;">(packet);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、从字节数组中，把接收到的数据直接打印出来</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 接收多少就倒出多少</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取本次数据包接收了多少数据。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> packet.</span><span style="color:#62E884;">getLength</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> , len);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(rs);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;----服务端启动----&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span></span>
<span class="line"><span style="color:#24292E;">        DatagramSocket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 64KB.</span></span>
<span class="line"><span style="color:#24292E;">        DatagramPacket packet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramPacket</span><span style="color:#24292E;">(buffer, buffer.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、开始正式使用数据包来接收客户端发来的数据</span></span>
<span class="line"><span style="color:#24292E;">        socket.</span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(packet);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、从字节数组中，把接收到的数据直接打印出来</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 接收多少就倒出多少</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取本次数据包接收了多少数据。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> packet.</span><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        String rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> , len);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(rs);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2️⃣-3-2-进阶程序-✏️-增加一个while循环" tabindex="-1">2️⃣ 3.2 进阶程序 ✏️ 增加一个while循环 <a class="header-anchor" href="#_2️⃣-3-2-进阶程序-✏️-增加一个while循环" aria-label="Permalink to &quot;2️⃣ 3.2 进阶程序 ✏️ 增加一个while循环&quot;">​</a></h3><p>需求：实现客户端不断的发数据，而服务端能不断的接收数据，客户端发送exit时客户端程序退出。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：完成UDP通信快速入门：实现客户端反复的发。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Client</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">//        创建数据报套接字并将其绑定到本机地址上的任何可用端口</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建客户端对象（发韭菜出去的人）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramSocket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramSocket</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#7B7F8B;">/* public DatagramPacket(byte buf[], int length,</span></span>
<span class="line"><span style="color:#7B7F8B;">             InetAddress address, int port)</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数一：封装要发出去的数据。</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数二：发送出去的数据大小（字节个数）</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数三：服务端的IP地址（找到服务端主机）</span></span>
<span class="line"><span style="color:#7B7F8B;">               参数四：服务端程序的端口。</span></span>
<span class="line"><span style="color:#7B7F8B;">             */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> scanner </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> scanner.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 一旦发现用户输入的exit命令，就退出客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exit</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(msg)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">欢迎下次光临！退出成功！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 跳出死循环</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">DatagramPacket</span><span style="color:#F6F6F4;"> packet </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramPacket</span><span style="color:#F6F6F4;">(msg.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(), msg.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">().length</span></span>
<span class="line"><span style="color:#F6F6F4;">                    , InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">(),  </span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3、开始正式发送这个数据包的数据出去了</span></span>
<span class="line"><span style="color:#F6F6F4;">            socket.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(packet);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：完成UDP通信快速入门：实现客户端反复的发。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#6A737D;">//        创建数据报套接字并将其绑定到本机地址上的任何可用端口</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建客户端对象（发韭菜出去的人）</span></span>
<span class="line"><span style="color:#24292E;">        DatagramSocket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramSocket</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">/* public DatagramPacket(byte buf[], int length,</span></span>
<span class="line"><span style="color:#6A737D;">             InetAddress address, int port)</span></span>
<span class="line"><span style="color:#6A737D;">               参数一：封装要发出去的数据。</span></span>
<span class="line"><span style="color:#6A737D;">               参数二：发送出去的数据大小（字节个数）</span></span>
<span class="line"><span style="color:#6A737D;">               参数三：服务端的IP地址（找到服务端主机）</span></span>
<span class="line"><span style="color:#6A737D;">               参数四：服务端程序的端口。</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">         Scanner scanner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">             String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> scanner.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 一旦发现用户输入的exit命令，就退出客户端</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exit&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(msg)){</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;欢迎下次光临！退出成功！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 跳出死循环</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            DatagramPacket packet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramPacket</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(), msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">().length</span></span>
<span class="line"><span style="color:#24292E;">                    , InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">(),  </span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3、开始正式发送这个数据包的数据出去了</span></span>
<span class="line"><span style="color:#24292E;">            socket.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(packet);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-服务端开发：实现1发1收。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  1、创建ServerSocket的对象，同时为服务端注册端口。 ServerSocket(port);</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  3、从socket通信管道中得到一个字节输入流。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  4、使用一个数组接收到传过来的数据，然后通过转成字符串</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  5、关流和释放资源</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">----服务端启动----</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramSocket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">64</span><span style="color:#F6F6F4;">]; </span><span style="color:#7B7F8B;">// 64KB.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DatagramPacket</span><span style="color:#F6F6F4;"> packet </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DatagramPacket</span><span style="color:#F6F6F4;">(buffer, buffer.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3、开始正式使用数据包来接收客户端发来的数据</span></span>
<span class="line"><span style="color:#F6F6F4;">            socket.</span><span style="color:#62E884;">receive</span><span style="color:#F6F6F4;">(packet);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 4、从字节数组中，把接收到的数据直接打印出来</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 接收多少就倒出多少</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 获取本次数据包接收了多少数据。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> packet.</span><span style="color:#62E884;">getLength</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> , len);</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(packet.</span><span style="color:#62E884;">getAddress</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">rs);</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--------------------------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-服务端开发：实现1发1收。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> *  1、创建ServerSocket的对象，同时为服务端注册端口。 ServerSocket(port);</span></span>
<span class="line"><span style="color:#6A737D;"> *  2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#6A737D;"> *  3、从socket通信管道中得到一个字节输入流。</span></span>
<span class="line"><span style="color:#6A737D;"> *  4、使用一个数组接收到传过来的数据，然后通过转成字符串</span></span>
<span class="line"><span style="color:#6A737D;"> *  5、关流和释放资源</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;----服务端启动----&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span></span>
<span class="line"><span style="color:#24292E;">        DatagramSocket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">]; </span><span style="color:#6A737D;">// 64KB.</span></span>
<span class="line"><span style="color:#24292E;">        DatagramPacket packet </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DatagramPacket</span><span style="color:#24292E;">(buffer, buffer.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3、开始正式使用数据包来接收客户端发来的数据</span></span>
<span class="line"><span style="color:#24292E;">            socket.</span><span style="color:#6F42C1;">receive</span><span style="color:#24292E;">(packet);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 4、从字节数组中，把接收到的数据直接打印出来</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 接收多少就倒出多少</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取本次数据包接收了多少数据。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> packet.</span><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            String rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> , len);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(packet.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">rs);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--------------------------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>作业</p><p>🚩 1. 参考下列提示，完成UDP入门案例（1发1接）</p><ul><li><strong>发送端</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：完成UDP通信快速入门：实现1发1收。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 1. 创建客户端对象（发韭菜出去的人） DatagramSocket</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 2. 创建数据包对象封装要发出去的数据（创建一个韭菜盘子） DatagramPacket</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 3. 开始正式发送这个数据包的数据出去了 send</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 4. 释放资源！ close</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Client</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 书写代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：完成UDP通信快速入门：实现1发1收。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * 1. 创建客户端对象（发韭菜出去的人） DatagramSocket</span></span>
<span class="line"><span style="color:#6A737D;"> * 2. 创建数据包对象封装要发出去的数据（创建一个韭菜盘子） DatagramPacket</span></span>
<span class="line"><span style="color:#6A737D;"> * 3. 开始正式发送这个数据包的数据出去了 send</span></span>
<span class="line"><span style="color:#6A737D;"> * 4. 释放资源！ close</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 书写代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>接收端</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：完成UDP通信快速入门-服务端开发</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 1.  创建一个服务端对象（创建一个接韭菜的人） 注册端口   DatagramSocket</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 2. 创建一个数据包对象，用于接收数据的（创建一个韭菜盘子） DatagramPacket(数组，数组长度)</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 3. 开始正式使用数据包来接收客户端发来的数据 receive(包裹)</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 4. 从包裹中获得数据，并且解析成String(byte数组，0，包裹的长度)</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 5. 释放资源</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 书写代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：完成UDP通信快速入门-服务端开发</span></span>
<span class="line"><span style="color:#6A737D;"> * 1.  创建一个服务端对象（创建一个接韭菜的人） 注册端口   DatagramSocket</span></span>
<span class="line"><span style="color:#6A737D;"> * 2. 创建一个数据包对象，用于接收数据的（创建一个韭菜盘子） DatagramPacket(数组，数组长度)</span></span>
<span class="line"><span style="color:#6A737D;"> * 3. 开始正式使用数据包来接收客户端发来的数据 receive(包裹)</span></span>
<span class="line"><span style="color:#6A737D;"> * 4. 从包裹中获得数据，并且解析成String(byte数组，0，包裹的长度)</span></span>
<span class="line"><span style="color:#6A737D;"> * 5. 释放资源</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 书写代码</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="四、tcp通信代码-案例-🚩-✏️" tabindex="-1">四、TCP通信代码（案例） 🚩 ✏️ <a class="header-anchor" href="#四、tcp通信代码-案例-🚩-✏️" aria-label="Permalink to &quot;四、TCP通信代码（案例） 🚩 ✏️&quot;">​</a></h2><p>学习TCP通信的代码完成网络通讯</p><p><strong>前置知识:</strong></p><ol><li>socket协议是面向连接、通讯可靠的协议</li><li>socket协议需要三次握手建立连接，断开需要4次</li></ol><p><strong>Socket完成TCP通信的流程：</strong></p><ol><li><strong>当创建Socket对象时</strong>，就会在客户端和服务端<strong>创建</strong>一个数据<strong>通信的管道</strong>，在客户端和服务端<strong>两边都会有</strong>一个Socket<strong>对象</strong>来<strong>访问</strong>这个通信<strong>管道</strong>。</li><li>现在假设客户端要发送一个<code>在一起</code>给服务端，客户端这边先需要通过Socket对象获取到一个<strong>字节输出流</strong>，通过<strong>字节输出流</strong>写数据到服务端</li><li>服务端这边通过Socket对象可以<strong>获取字节输入流</strong>，通过字节输入流就可以读取客户端写过来的数据，并对数据进行处理。</li><li>服务端处理完数据之后，假设需要把<code>没感觉</code>发给客户端端，那么服务端这边再通过Socket获取到一个<strong>字节输出流</strong>，<strong>将数据写给客户端</strong></li><li>客户端这边再获取输入流，通过字节输入流来读取服务端写过来的数据。</li></ol><img src="`+m+'"><blockquote><p>注意：写代码之前一定要理解上图，不然输入和输出流，容易晕！</p></blockquote><h3 id="_1️⃣-4-1-tcp入门程序-说一句话" tabindex="-1">1️⃣ 4.1 TCP入门程序 说一句话 <a class="header-anchor" href="#_1️⃣-4-1-tcp入门程序-说一句话" aria-label="Permalink to &quot;1️⃣ 4.1 TCP入门程序 说一句话&quot;">​</a></h3><img src="'+b+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-客户端开发：实现1发1收。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Client</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建Socket对象，并同时请求与服务端程序的连接。(ip和端口是服务端的)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Socket</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> os </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、开始写数据出去了</span></span>
<span class="line"><span style="color:#F6F6F4;">        os.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">在一起，好吗？</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        os.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 释放连接资源</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-客户端开发：实现1发1收。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建Socket对象，并同时请求与服务端程序的连接。(ip和端口是服务端的)</span></span>
<span class="line"><span style="color:#24292E;">        Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Socket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span>
<span class="line"><span style="color:#24292E;">        OutputStream os </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、开始写数据出去了</span></span>
<span class="line"><span style="color:#24292E;">        os.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;在一起，好吗？&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        os.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 释放连接资源</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><img src="`+h+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-服务端开发：实现1发1收。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----服务端启动成功-------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> serverSocket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> serverSocket.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、从socket通信管道中得到一个字节输入流。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> is </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//        4创建一个byte数组接收数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[]  buffer</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 5、使用数据输入流读取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#7B7F8B;">//        获得数据长度</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> msglen </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> is.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> msg</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, msglen);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getRemoteSocketAddress</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">msg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---------------------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        is.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-服务端开发：实现1发1收。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-----服务端启动成功-------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span>
<span class="line"><span style="color:#24292E;">        ServerSocket serverSocket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#24292E;">        Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverSocket.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、从socket通信管道中得到一个字节输入流。</span></span>
<span class="line"><span style="color:#24292E;">        InputStream is </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//        4创建一个byte数组接收数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]  buffer</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 5、使用数据输入流读取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#6A737D;">//        获得数据长度</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> msglen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> is.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">         String msg</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, msglen);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getRemoteSocketAddress</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">msg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;---------------------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        is.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2️⃣-4-2-tcp入门程序-说多句话" tabindex="-1">2️⃣ 4.2 TCP入门程序 说多句话 <a class="header-anchor" href="#_2️⃣-4-2-tcp入门程序-说多句话" aria-label="Permalink to &quot;2️⃣ 4.2 TCP入门程序 说多句话&quot;">​</a></h3><p>实现客户端可以反复的发消息出去，实现服务端反复接收消息</p><ol><li>反复发，反复接收消息，说明要用到循环----&gt; <strong>死循环</strong></li><li><strong>死循环</strong>说明程序无法停止，输入exit出发break 跳出循环，结束程序</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-客户端开发：实现客户端可以反复的发消息出去</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Client</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建Socket对象，并同时请求与服务端程序的连接。(ip和端口是服务端的)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Socket</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> os </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">请说：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 一旦用户输入了exit，就退出客户端程序</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exit</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(msg)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">欢迎您下次光临！退出成功！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                os.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 4、开始写数据出去了</span></span>
<span class="line"><span style="color:#F6F6F4;">            os.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(msg.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            os.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-客户端开发：实现客户端可以反复的发消息出去</span></span>
<span class="line"><span style="color:#6A737D;"> */</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建Socket对象，并同时请求与服务端程序的连接。(ip和端口是服务端的)</span></span>
<span class="line"><span style="color:#24292E;">        Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Socket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span>
<span class="line"><span style="color:#24292E;">        OutputStream os </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请说：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextLine</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 一旦用户输入了exit，就退出客户端程序</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exit&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(msg)){</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;欢迎您下次光临！退出成功！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                os.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 4、开始写数据出去了</span></span>
<span class="line"><span style="color:#24292E;">            os.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            os.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-服务端开发：实现服务端反复发消息</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">       System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----服务端启动成功-------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> serverSocket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> serverSocket.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、从socket通信管道中得到一个字节输入流。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> is </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//        4创建一个byte数组接收数据</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[]  buffer</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 5、使用输入流读取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> msglen </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> is.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> msg</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, msglen);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getRemoteSocketAddress</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">msg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">---------------------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getRemoteSocketAddress</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">离线了！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                is.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-服务端开发：实现服务端反复发消息</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">       System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-----服务端启动成功-------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span>
<span class="line"><span style="color:#24292E;">        ServerSocket serverSocket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#24292E;">        Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverSocket.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、从socket通信管道中得到一个字节输入流。</span></span>
<span class="line"><span style="color:#24292E;">        InputStream is </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//        4创建一个byte数组接收数据</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]  buffer</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 5、使用输入流读取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> msglen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> is.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                String msg</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, msglen);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getRemoteSocketAddress</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">msg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;---------------------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getRemoteSocketAddress</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;离线了！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                is.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3️⃣-4-3-tcp入门程序-线程池优化-🍐-✏️" tabindex="-1">3️⃣ 4.3 TCP入门程序 线程池优化 🍐 ✏️ <a class="header-anchor" href="#_3️⃣-4-3-tcp入门程序-线程池优化-🍐-✏️" aria-label="Permalink to &quot;3️⃣ 4.3 TCP入门程序 线程池优化 🍐 ✏️&quot;">​</a></h3><p>为了让服务端能够支持多个客户端通信，就需要用到多线程技术。具体的实现思路如下图所示：每当有一个客户端连接服务端，在服务端这边就为Socket开启一条线程取执行读取数据的操作，来多少个客户端，就有多少条线程。按照这样的设计，服务端就可以支持多个客户端连接了。</p><img src="`+f+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-客户端开发：实现客户端可以反复的发消息出去</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  1. 和上述案例一样</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Client</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建Socket对象，并同时请求与服务端程序的连接。(ip和端口是服务端的)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Socket</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> os </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">请说：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 一旦用户输入了exit，就退出客户端程序</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exit</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(msg)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">欢迎您下次光临！退出成功！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                os.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 4、开始写数据出去了</span></span>
<span class="line"><span style="color:#F6F6F4;">            os.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(msg.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            os.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-客户端开发：实现客户端可以反复的发消息出去</span></span>
<span class="line"><span style="color:#6A737D;"> *  1. 和上述案例一样</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建Socket对象，并同时请求与服务端程序的连接。(ip和端口是服务端的)</span></span>
<span class="line"><span style="color:#24292E;">        Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Socket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span>
<span class="line"><span style="color:#24292E;">        OutputStream os </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请说：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextLine</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 一旦用户输入了exit，就退出客户端程序</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exit&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(msg)){</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;欢迎您下次光临！退出成功！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                os.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 4、开始写数据出去了</span></span>
<span class="line"><span style="color:#24292E;">            os.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            os.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  目标：完成TCP通信快速入门-服务端开发：要求实现与多个客户端同时通信。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  1. 在死循环内，使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#7B7F8B;"> *  2. 使用线程池处理多个人的消息（发送端不变）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----服务端启动成功-------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> serverSocket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">22222</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> executorService </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> serverSocket.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">有人上线了：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getRemoteSocketAddress</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span></span>
<span class="line"><span style="color:#F6F6F4;">            executorService.</span><span style="color:#62E884;">submit</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerReaderRunnable</span><span style="color:#F6F6F4;">(socket));</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *  目标：完成TCP通信快速入门-服务端开发：要求实现与多个客户端同时通信。</span></span>
<span class="line"><span style="color:#6A737D;"> *  1. 在死循环内，使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#6A737D;"> *  2. 使用线程池处理多个人的消息（发送端不变）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-----服务端启动成功-------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span>
<span class="line"><span style="color:#24292E;">        ServerSocket serverSocket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">22222</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">         ExecutorService executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span>
<span class="line"><span style="color:#24292E;">            Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverSocket.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;有人上线了：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getRemoteSocketAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span></span>
<span class="line"><span style="color:#24292E;">            executorService.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerReaderRunnable</span><span style="color:#24292E;">(socket));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 读取消息的执行程序</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ServerReaderRunnable</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerReaderRunnable</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">socket</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> is </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] bytes</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 使用数据输入流读取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> is.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(bytes); </span><span style="color:#7B7F8B;">//传过来的数据长度</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(bytes, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">线程负责：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">socket.</span><span style="color:#62E884;">getRemoteSocketAddress</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">s);</span><span style="color:#7B7F8B;">//打印一下</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bbq：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 读取消息的执行程序</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerReaderRunnable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Socket socket;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerReaderRunnable</span><span style="color:#24292E;">(Socket </span><span style="color:#E36209;">socket</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            InputStream is </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 使用数据输入流读取客户端发送过来的消息</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> is.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(bytes); </span><span style="color:#6A737D;">//传过来的数据长度</span></span>
<span class="line"><span style="color:#24292E;">                    String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(bytes, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;线程负责：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">socket.</span><span style="color:#6F42C1;">getRemoteSocketAddress</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;：&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">s);</span><span style="color:#6A737D;">//打印一下</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bbq：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,117),w=[q];function P(_,x,I,T,j,R){return n(),a("div",null,w)}const U=s(v,[["render",P]]);export{O as __pageData,U as default};
