import{_ as a,o as e,c as o,V as E}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-07.md","filePath":"interview/backend/并发编程/并发编程-07.md"}'),r={name:"interview/backend/并发编程/并发编程-07.md"},t=E(`<h3 id="_1、方法区溢出的原因" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1%E6%96%B9%E6%B3%95%E5%8C%BA%E6%BA%A2%E5%87%BA%E7%9A%84%E5%8E%9F%E5%9B%A0" target="_blank" rel="noreferrer">1、方法区溢出的原因？</a> <a class="header-anchor" href="#_1、方法区溢出的原因" aria-label="Permalink to &quot;[1、方法区溢出的原因？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#1方法区溢出的原因)&quot;">​</a></h3><p>方法区主要存放类型信息，如类名、访问修饰符、常量池、字段描述、方法描述等。只要不断在运行时产生大量类，方法区就会溢出。例如使用 JDK 反射或 CGLib 直接操作字节码在运行时生成大量的类。很多框架如 Spring、Hibernate 等对类增强时都会使用 CGLib 这类字节码技术，增强的类越多就需要越大的方法区保证动态生成的新类型可以载入内存，也就更容易导致方法区溢出。</p><p>JDK8 使用元空间取代永久代，HotSpot 提供了一些参数作为元空间防御措施，例如 <code>-XX:MetaspaceSize</code> 指定元空间初始大小，达到该值会触发 GC 进行类型卸载，同时收集器会对该值进行调整，如果释放大量空间就适当降低该值，如果释放很少空间就适当提高。</p><h3 id="_2、对象都是优先分配在年轻代上的吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E5%AF%B9%E8%B1%A1%E9%83%BD%E6%98%AF%E4%BC%98%E5%85%88%E5%88%86%E9%85%8D%E5%9C%A8%E5%B9%B4%E8%BD%BB%E4%BB%A3%E4%B8%8A%E7%9A%84%E5%90%97" target="_blank" rel="noreferrer">2、对象都是优先分配在年轻代上的吗？</a> <a class="header-anchor" href="#_2、对象都是优先分配在年轻代上的吗" aria-label="Permalink to &quot;[2、对象都是优先分配在年轻代上的吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#2对象都是优先分配在年轻代上的吗)&quot;">​</a></h3><p>不是。当新生代内存不够时，老年代分配担保。而大对象则是直接在老年代分配。</p><h3 id="_3、为什么-thread-类的-sleep-和-yield-方法是静态的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3%E4%B8%BA%E4%BB%80%E4%B9%88-thread-%E7%B1%BB%E7%9A%84-sleep%E5%92%8C-yield-%E6%96%B9%E6%B3%95%E6%98%AF%E9%9D%99%E6%80%81%E7%9A%84" target="_blank" rel="noreferrer">3、为什么 Thread 类的 sleep()和 yield ()方法是静态的？</a> <a class="header-anchor" href="#_3、为什么-thread-类的-sleep-和-yield-方法是静态的" aria-label="Permalink to &quot;[3、为什么 Thread 类的 sleep()和 yield ()方法是静态的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#3为什么-thread-类的-sleep和-yield-方法是静态的)&quot;">​</a></h3><p>Thread 类的 sleep()和 yield()方法将在当前正在执行的线程上运行。所以在其他处于等待状态的线程上调用这些方法是没有意义的。这就是为什么这些方法是静态的。它们可以在当前正在执行的线程中工作，并避免程序员错误的认为可以在其他非运行线程调用这些方法。</p><h3 id="_4、什么是多线程中的上下文切换" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2" target="_blank" rel="noreferrer">4、什么是多线程中的上下文切换？</a> <a class="header-anchor" href="#_4、什么是多线程中的上下文切换" aria-label="Permalink to &quot;[4、什么是多线程中的上下文切换？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#4什么是多线程中的上下文切换)&quot;">​</a></h3><p>多线程会共同使用一组计算机上的CPU，而线程数大于给程序分配的CPU数量时，为了让各个线程都有执行的机会，就需要轮转使用CPU。不同的线程切换使用CPU发生的切换数据等就是上下文切换。</p><h3 id="_5、jvm-中一次完整的-gc-流程-从-ygc-到-fgc-是怎样的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5jvm-%E4%B8%AD%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84-gc-%E6%B5%81%E7%A8%8B%E4%BB%8E-ygc-%E5%88%B0-fgc%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84" target="_blank" rel="noreferrer">5、JVM 中一次完整的 GC 流程（从 ygc 到 fgc）是怎样的</a> <a class="header-anchor" href="#_5、jvm-中一次完整的-gc-流程-从-ygc-到-fgc-是怎样的" aria-label="Permalink to &quot;[5、JVM 中一次完整的 GC 流程（从 ygc 到 fgc）是怎样的](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#5jvm-中一次完整的-gc-流程从-ygc-到-fgc是怎样的)&quot;">​</a></h3><p>这题不是很明白意思(水平有限...如果知道这题的意思可在评论区留言呀~~)</p><p>因为按我的理解：执行fgc是不会执行ygc的呀~~</p><p><strong>YGC和FGC是什么</strong></p><p><strong>1、</strong> YGC ：对新生代堆进行gc。频率比较高，因为大部分对象的存活寿命较短，在新生代里被回收。性能耗费较小。</p><p><strong>2、</strong> FGC ：全堆范围的gc。默认堆空间使用到达80%(可调整)的时候会触发fgc。以我们生产环境为例，一般比较少会触发fgc，有时10天或一周左右会有一次。</p><p><strong>什么时候执行YGC和FGC</strong></p><p><strong>1、</strong> a.eden空间不足,执行 young gc</p><p><strong>2、</strong> b.old空间不足，perm空间不足，调用方法<code>System.gc()</code> ，ygc时的悲观策略, dump live的内存信息时(jmap –dump:live)，都会执行full gc</p><h3 id="_6、minor-gc与full-gc分别在什么时候发生" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6minor-gc%E4%B8%8Efull-gc%E5%88%86%E5%88%AB%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%91%E7%94%9F" target="_blank" rel="noreferrer">6、Minor GC与Full GC分别在什么时候发生？</a> <a class="header-anchor" href="#_6、minor-gc与full-gc分别在什么时候发生" aria-label="Permalink to &quot;[6、Minor GC与Full GC分别在什么时候发生？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#6minor-gc与full-gc分别在什么时候发生)&quot;">​</a></h3><p>新生代内存不够用时候发生MGC也叫YGC，JVM内存不够的时候发生FGC</p><h3 id="_7、什么是重排序" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E6%8E%92%E5%BA%8F" target="_blank" rel="noreferrer">7、什么是重排序</a> <a class="header-anchor" href="#_7、什么是重排序" aria-label="Permalink to &quot;[7、什么是重排序](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#7什么是重排序)&quot;">​</a></h3><p>程序执行的顺序按照代码的先后顺序执行。</p><p>一般来说处理器为了提高程序运行效率，可能会对输入代码进行优化，进行重新排序（重排序），它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">int a = 5;//语句1</span></span>
<span class="line"><span style="color:#f6f6f4;">int r = 3;//语句2</span></span>
<span class="line"><span style="color:#f6f6f4;">a = a + 2;//语句3</span></span>
<span class="line"><span style="color:#f6f6f4;">r = a*a;  //语句4</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">int a = 5;//语句1</span></span>
<span class="line"><span style="color:#24292e;">int r = 3;//语句2</span></span>
<span class="line"><span style="color:#24292e;">a = a + 2;//语句3</span></span>
<span class="line"><span style="color:#24292e;">r = a*a;  //语句4</span></span></code></pre></div><p>则因为重排序，他还可能执行顺序为（这里标注的是语句的执行顺序） 2-1-3-4，1-3-2-4 但绝不可能 2-1-4-3，因为这打破了依赖关系。</p><p>显然重排序对单线程运行是不会有任何问题，但是多线程就不一定了，所以我们在多线程编程时就得考虑这个问题了。</p><h3 id="_8、线程的调度策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">8、线程的调度策略</a> <a class="header-anchor" href="#_8、线程的调度策略" aria-label="Permalink to &quot;[8、线程的调度策略](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#8线程的调度策略)&quot;">​</a></h3><p><strong>线程调度器选择优先级最高的线程运行，但是，如果发生以下情况，就会终止线程的运行：</strong></p><p><strong>1、</strong> 线程体中调用了yield方法让出了对cpu的占用权利</p><p><strong>2、</strong> 线程体中调用了sleep方法使线程进入睡眠状态</p><p><strong>3、</strong> 线程由于IO操作受到阻塞</p><p><strong>4、</strong> 另外一个更高优先级线程出现</p><p>5）在支持时间片的系统中，该线程的时间片用完</p><h3 id="_9、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9jvm-%E9%80%89%E9%A1%B9--xx:+usecompressedoops-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">9、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用</a> <a class="header-anchor" href="#_9、jvm-选项-xx-usecompressedoops-有什么作用-为什么要使用" aria-label="Permalink to &quot;[9、JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#9jvm-选项--xx:+usecompressedoops-有什么作用为什么要使用)&quot;">​</a></h3><p>当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM主要动机在于可以指定最大堆大小，通过压缩OOP 可以节省一定的内存。通过-XX:+UseCompressedOops 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。</p><h3 id="_10、invokedynamic指令是干什么的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10invokedynamic%E6%8C%87%E4%BB%A4%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84" target="_blank" rel="noreferrer">10、invokedynamic指令是干什么的？</a> <a class="header-anchor" href="#_10、invokedynamic指令是干什么的" aria-label="Permalink to &quot;[10、invokedynamic指令是干什么的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程面试题及答案整理，2021年最新，汇总版.md#10invokedynamic指令是干什么的)&quot;">​</a></h3><p>属于比较高级的题目。没看过虚拟机的一般是不知道的。所以如果你不太熟悉，不要气馁，加油！（小拳拳锤你胸口）。</p><p><code>invokedynamic</code>是<code>Java7</code>之后新加入的字节码指令，使用它可以实现一些动态类型语言的功能。我们使用的Lambda表达式，在字节码上就是invokedynamic指令实现的。它的功能有点类似反射，但它是使用方法句柄实现的，执行效率更高。</p><h3 id="_11、对象的内存布局了解吗" tabindex="-1">11、对象的内存布局了解吗？ <a class="header-anchor" href="#_11、对象的内存布局了解吗" aria-label="Permalink to &quot;11、对象的内存布局了解吗？&quot;">​</a></h3><h3 id="_12、java死锁以及如何避免" tabindex="-1">12、Java死锁以及如何避免？ <a class="header-anchor" href="#_12、java死锁以及如何避免" aria-label="Permalink to &quot;12、Java死锁以及如何避免？&quot;">​</a></h3><h3 id="_13、cms都有哪些问题" tabindex="-1">13、CMS都有哪些问题？ <a class="header-anchor" href="#_13、cms都有哪些问题" aria-label="Permalink to &quot;13、CMS都有哪些问题？&quot;">​</a></h3><h3 id="_14、什么是线程组-为什么在java中不推荐使用" tabindex="-1">14、什么是线程组，为什么在Java中不推荐使用？ <a class="header-anchor" href="#_14、什么是线程组-为什么在java中不推荐使用" aria-label="Permalink to &quot;14、什么是线程组，为什么在Java中不推荐使用？&quot;">​</a></h3><h3 id="_15、java-虚拟机栈的作用" tabindex="-1">15、Java 虚拟机栈的作用？ <a class="header-anchor" href="#_15、java-虚拟机栈的作用" aria-label="Permalink to &quot;15、Java 虚拟机栈的作用？&quot;">​</a></h3><h3 id="_16、final不可变对象-它对写并发应用有什么帮助" tabindex="-1">16、final不可变对象，它对写并发应用有什么帮助？ <a class="header-anchor" href="#_16、final不可变对象-它对写并发应用有什么帮助" aria-label="Permalink to &quot;16、final不可变对象，它对写并发应用有什么帮助？&quot;">​</a></h3><h3 id="_17、minor-gc和full-gc-有什么不同呢" tabindex="-1">17、Minor Gc和Full GC 有什么不同呢？ <a class="header-anchor" href="#_17、minor-gc和full-gc-有什么不同呢" aria-label="Permalink to &quot;17、Minor Gc和Full GC 有什么不同呢？&quot;">​</a></h3><h3 id="_18、类加载为什么要使用双亲委派模式-有没有什么场景是打破了这个模式" tabindex="-1">18、类加载为什么要使用双亲委派模式，有没有什么场景是打破了这个模式？ <a class="header-anchor" href="#_18、类加载为什么要使用双亲委派模式-有没有什么场景是打破了这个模式" aria-label="Permalink to &quot;18、类加载为什么要使用双亲委派模式，有没有什么场景是打破了这个模式？&quot;">​</a></h3><h3 id="_19、说一下堆内存中对象的分配的基本策略" tabindex="-1">19、说一下堆内存中对象的分配的基本策略 <a class="header-anchor" href="#_19、说一下堆内存中对象的分配的基本策略" aria-label="Permalink to &quot;19、说一下堆内存中对象的分配的基本策略&quot;">​</a></h3><h3 id="_20、什么是threadpoolexecutor" tabindex="-1">20、什么是ThreadPoolExecutor？ <a class="header-anchor" href="#_20、什么是threadpoolexecutor" aria-label="Permalink to &quot;20、什么是ThreadPoolExecutor？&quot;">​</a></h3><h3 id="_21、老年代与标记复制算法" tabindex="-1">21、老年代与标记复制算法 <a class="header-anchor" href="#_21、老年代与标记复制算法" aria-label="Permalink to &quot;21、老年代与标记复制算法&quot;">​</a></h3><h3 id="_22、如何判断一个类是无用的类" tabindex="-1">22、如何判断一个类是无用的类? <a class="header-anchor" href="#_22、如何判断一个类是无用的类" aria-label="Permalink to &quot;22、如何判断一个类是无用的类?&quot;">​</a></h3><h3 id="_23、谈谈对-oom-的认识" tabindex="-1">23、谈谈对 OOM 的认识 <a class="header-anchor" href="#_23、谈谈对-oom-的认识" aria-label="Permalink to &quot;23、谈谈对 OOM 的认识&quot;">​</a></h3><h3 id="_24、强引用、软引用、弱引用、虚引用是什么" tabindex="-1">24、强引用、软引用、弱引用、虚引用是什么？ <a class="header-anchor" href="#_24、强引用、软引用、弱引用、虚引用是什么" aria-label="Permalink to &quot;24、强引用、软引用、弱引用、虚引用是什么？&quot;">​</a></h3><h3 id="_25、标记整理算法-mark-compact" tabindex="-1">25、标记整理算法(Mark-Compact) <a class="header-anchor" href="#_25、标记整理算法-mark-compact" aria-label="Permalink to &quot;25、标记整理算法(Mark-Compact)&quot;">​</a></h3><h3 id="_26、死锁与活锁的区别-死锁与饥饿的区别" tabindex="-1">26、死锁与活锁的区别，死锁与饥饿的区别？ <a class="header-anchor" href="#_26、死锁与活锁的区别-死锁与饥饿的区别" aria-label="Permalink to &quot;26、死锁与活锁的区别，死锁与饥饿的区别？&quot;">​</a></h3><h3 id="_27、代码示例" tabindex="-1">27、代码示例 <a class="header-anchor" href="#_27、代码示例" aria-label="Permalink to &quot;27、代码示例&quot;">​</a></h3><h3 id="_28、对象的访问方式有哪些" tabindex="-1">28、对象的访问方式有哪些？ <a class="header-anchor" href="#_28、对象的访问方式有哪些" aria-label="Permalink to &quot;28、对象的访问方式有哪些？&quot;">​</a></h3><h3 id="_29、创建线程的有哪些方式" tabindex="-1">29、创建线程的有哪些方式？ <a class="header-anchor" href="#_29、创建线程的有哪些方式" aria-label="Permalink to &quot;29、创建线程的有哪些方式？&quot;">​</a></h3><h3 id="_30、什么是多线程" tabindex="-1">30、什么是多线程 <a class="header-anchor" href="#_30、什么是多线程" aria-label="Permalink to &quot;30、什么是多线程&quot;">​</a></h3><h3 id="_31、类加载器" tabindex="-1">31、类加载器 <a class="header-anchor" href="#_31、类加载器" aria-label="Permalink to &quot;31、类加载器&quot;">​</a></h3>`,59),s=[t];function B(n,l,i,c,d,h){return e(),o("div",null,s)}const m=a(r,[["render",B]]);export{u as __pageData,m as default};
