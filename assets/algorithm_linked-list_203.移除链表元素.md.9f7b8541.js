import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"LeetCode 203. 移除链表元素","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/linked-list/203.移除链表元素.md","filePath":"algorithm/linked-list/203.移除链表元素.md"}'),p={name:"algorithm/linked-list/203.移除链表元素.md"},o=l(`<h1 id="leetcode-203-移除链表元素" tabindex="-1">LeetCode 203. 移除链表元素 <a class="header-anchor" href="#leetcode-203-移除链表元素" aria-label="Permalink to &quot;LeetCode 203. 移除链表元素&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>删除链表中等于给定值 val 的所有节点。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">输入: </span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">6</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">3</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">4</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">5</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">, val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span></span>
<span class="line"><span style="color:#F6F6F4;">输出: </span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">3</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">4</span><span style="color:#F286C4;">-&gt;</span><span style="color:#BF9EEE;">5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">输入</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">6</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#6F42C1;">输出</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">3</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">-&gt;</span><span style="color:#005CC5;">5</span></span></code></pre></div><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p>创建一个新链表，遇到相同值的情况，将当前节点的 next 指向下一个节点的 next，否则继续遍历。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">removeElements</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">head</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> dummyHead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ListNode</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 哑结点</span></span>
<span class="line"><span style="color:#F6F6F4;">  dummyHead.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dummyHead;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (p.next) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (p.next.val </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> val) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      p.next </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      p </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> p.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> dummyHead.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeElements</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">head</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dummyHead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 哑结点</span></span>
<span class="line"><span style="color:#24292E;">  dummyHead.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dummyHead;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (p.next) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p.next.val </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">      p.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next.next;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p.next;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dummyHead.next;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">学如逆水行舟，不进则退</span></span></code></pre></div>`,9),e=[o];function t(c,r,y,F,i,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{C as __pageData,h as default};
