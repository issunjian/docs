import{_ as a,o as e,c as s,V as o}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端面试题及答案整理汇总，2021年最新版.md","filePath":"interview/backend/前端/前端面试题及答案整理汇总，2021年最新版.md"}'),t={name:"interview/backend/前端/前端面试题及答案整理汇总，2021年最新版.md"},n=o(`<h3 id="_1、使用-css-预处理器吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#1%E4%BD%BF%E7%94%A8-css-%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E5%90%97" target="_blank" rel="noreferrer">1、使用 CSS 预处理器吗？</a> <a class="header-anchor" href="#_1、使用-css-预处理器吗" aria-label="Permalink to &quot;[1、使用 CSS 预处理器吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#1使用-css-预处理器吗)&quot;">​</a></h3><p>Less sass</p><h3 id="_2、offsetwidth-offsetheight-clientwidth-clientheight与scrollwidth-scrollheight的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#2offsetwidth/offsetheight,clientwidth/clientheight%E4%B8%8Escrollwidth/scrollheight%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</a> <a class="header-anchor" href="#_2、offsetwidth-offsetheight-clientwidth-clientheight与scrollwidth-scrollheight的区别" aria-label="Permalink to &quot;[2、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#2offsetwidth/offsetheight,clientwidth/clientheight与scrollwidth/scrollheight的区别)&quot;">​</a></h3><p><strong>1、</strong> <code>offsetWidth/offsetHeight</code>返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</p><p><strong>2、</strong> <code>clientWidth/clientHeight</code>返回值只包含<strong>content + padding</strong>，如果有滚动条，也<strong>不包含滚动条</strong></p><p><strong>3、</strong> <code>scrollWidth/scrollHeight</code>返回值包含<strong>content + padding + 溢出内容的尺寸</strong></p><h3 id="_3、原型和原型链" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#3%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE" target="_blank" rel="noreferrer">3、原型和原型链</a> <a class="header-anchor" href="#_3、原型和原型链" aria-label="Permalink to &quot;[3、原型和原型链](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#3原型和原型链)&quot;">​</a></h3><p><strong>原型和原型链的概念</strong></p><p>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去</p><p><strong>原型和原型链的关系</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">instance.constructor.prototype = instance.__proto__</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">instance.constructor.prototype = instance.__proto__</span></span></code></pre></div><p><strong>原型和原型链的特点</strong></p><p>JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</p><p>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的</p><p>就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象</p><h3 id="_4、闭包" tabindex="-1">4、闭包 <a class="header-anchor" href="#_4、闭包" aria-label="Permalink to &quot;4、闭包&quot;">​</a></h3><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p><p><strong>闭包的特性：</strong></p><p><strong>1、</strong> 函数内再嵌套函数</p><p><strong>2、</strong> 内部函数可以引用外层的参数和变量</p><p><strong>3、</strong> 参数和变量不会被垃圾回收机制回收</p><p><strong>说说你对闭包的理解</strong></p><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p><h3 id="_5、c3新特性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#5c3%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A" target="_blank" rel="noreferrer">5、C3新特性：</a> <a class="header-anchor" href="#_5、c3新特性" aria-label="Permalink to &quot;[5、C3新特性：](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#5c3新特性：)&quot;">​</a></h3><p><strong>1、</strong> 复杂的选择器</p><p><strong>2、</strong> 弹性布局</p><p><strong>3、</strong> 动画</p><h3 id="_6、什么是高阶函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#6%E4%BB%80%E4%B9%88%E6%98%AF%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">6、什么是高阶函数？</a> <a class="header-anchor" href="#_6、什么是高阶函数" aria-label="Permalink to &quot;[6、什么是高阶函数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#6什么是高阶函数)&quot;">​</a></h3><p><strong>高阶函数只是将函数作为参数或返回值的函数。</strong></p><p><code>function higherOrderFunction(param,callback){ return callback(param); }</code></p><h3 id="_7、上下margin重合的问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#7%E4%B8%8A%E4%B8%8Bmargin%E9%87%8D%E5%90%88%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">7、上下margin重合的问题</a> <a class="header-anchor" href="#_7、上下margin重合的问题" aria-label="Permalink to &quot;[7、上下margin重合的问题](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#7上下margin重合的问题)&quot;">​</a></h3><p>在重合元素外包裹一层容器，并触发该容器生成一个BFC。</p><p>例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;div class=&quot;text&quot;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;!--下面是css代码--&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;"> .aside {</span></span>
<span class="line"><span style="color:#f6f6f4;">            margin-bottom: 100px;</span></span>
<span class="line"><span style="color:#f6f6f4;">            width: 100px;</span></span>
<span class="line"><span style="color:#f6f6f4;">            height: 150px;</span></span>
<span class="line"><span style="color:#f6f6f4;">            background: #f66;</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">        .main {</span></span>
<span class="line"><span style="color:#f6f6f4;">            margin-top: 100px;</span></span>
<span class="line"><span style="color:#f6f6f4;">            height: 200px;</span></span>
<span class="line"><span style="color:#f6f6f4;">            background: #fcc;</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">         .text{</span></span>
<span class="line"><span style="color:#f6f6f4;">            /*盒子main的外面包一个div，通过改变此div的属性使两个盒子分属于两个不同的BFC，以此来阻止margin重叠*/</span></span>
<span class="line"><span style="color:#f6f6f4;">            overflow: hidden;  //此时已经触发了BFC属性。</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;div class=&quot;text&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;!--下面是css代码--&gt;</span></span>
<span class="line"><span style="color:#24292e;"> .aside {</span></span>
<span class="line"><span style="color:#24292e;">            margin-bottom: 100px;</span></span>
<span class="line"><span style="color:#24292e;">            width: 100px;</span></span>
<span class="line"><span style="color:#24292e;">            height: 150px;</span></span>
<span class="line"><span style="color:#24292e;">            background: #f66;</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">        .main {</span></span>
<span class="line"><span style="color:#24292e;">            margin-top: 100px;</span></span>
<span class="line"><span style="color:#24292e;">            height: 200px;</span></span>
<span class="line"><span style="color:#24292e;">            background: #fcc;</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">         .text{</span></span>
<span class="line"><span style="color:#24292e;">            /*盒子main的外面包一个div，通过改变此div的属性使两个盒子分属于两个不同的BFC，以此来阻止margin重叠*/</span></span>
<span class="line"><span style="color:#24292e;">            overflow: hidden;  //此时已经触发了BFC属性。</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span></code></pre></div><h3 id="_8、实现不使用-border-画出-1-px-高的线-在不同浏览器的标准模式与怪异模式下都能保持一致的效果。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#8%E5%AE%9E%E7%8E%B0%E4%B8%8D%E4%BD%BF%E7%94%A8-border-%E7%94%BB%E5%87%BA-1-px-%E9%AB%98%E7%9A%84%E7%BA%BF%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%A0%87%E5%87%86%E6%A8%A1%E5%BC%8F%E4%B8%8E%E6%80%AA%E5%BC%82%E6%A8%A1%E5%BC%8F%E4%B8%8B%E9%83%BD%E8%83%BD%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E7%9A%84%E6%95%88%E6%9E%9C%E3%80%82" target="_blank" rel="noreferrer">8、实现不使用 border 画出 1 px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</a> <a class="header-anchor" href="#_8、实现不使用-border-画出-1-px-高的线-在不同浏览器的标准模式与怪异模式下都能保持一致的效果。" aria-label="Permalink to &quot;[8、实现不使用 border 画出 1 px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#8实现不使用-border-画出-1-px-高的线在不同浏览器的标准模式与怪异模式下都能保持一致的效果。)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">html</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">html</span></span>
<span class="line"><span style="color:#24292e;">&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;</span></span></code></pre></div><h3 id="_9、如何创建块级格式化上下文-block-formatting-context-bfc有什么用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#9%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E5%9D%97%E7%BA%A7%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87block-formatting-context,bfc%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8" target="_blank" rel="noreferrer">9、如何创建块级格式化上下文(block formatting context),BFC有什么用</a> <a class="header-anchor" href="#_9、如何创建块级格式化上下文-block-formatting-context-bfc有什么用" aria-label="Permalink to &quot;[9、如何创建块级格式化上下文(block formatting context),BFC有什么用](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#9如何创建块级格式化上下文block-formatting-context,bfc有什么用)&quot;">​</a></h3><p><strong>创建规则：</strong></p><p><strong>1、</strong> 根元素</p><p><strong>2、</strong> 浮动元素（<code>float</code>不是<code>none</code>）</p><p><strong>3、</strong> 绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</p><p><strong>4、</strong> <code>display</code>取值为<code>inline-block</code>,<code>table-cell</code>, <code>table-caption</code>,<code>flex</code>, <code>inline-flex</code>之一的元素</p><p><strong>5、</strong> <code>overflow</code>不是<code>visible</code>的元素</p><p><strong>作用：</strong></p><p><strong>1、</strong> 可以包含浮动元素</p><p><strong>2、</strong> 不被浮动元素覆盖</p><p><strong>3、</strong> 阻止父子元素的<code>margin</code>折叠</p><h3 id="_10、异步编程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#10%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B" target="_blank" rel="noreferrer">10、异步编程？</a> <a class="header-anchor" href="#_10、异步编程" aria-label="Permalink to &quot;[10、异步编程？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题及答案整理汇总，2021年最新版.md#10异步编程)&quot;">​</a></h3><p><strong>方法1：</strong></p><p><strong>1、</strong> 回调函数，优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p><p><strong>方法2：</strong></p><p><strong>1、</strong> 时间监听，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以“去耦合”（Decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p><p><strong>方法3：</strong></p><p>发布/订阅，性质与“事件监听”类似，但是明显优于后者。</p><p><strong>方法4：</strong></p><p><strong>1、</strong> Promises对象，是CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。</p><p><strong>2、</strong> 简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。</p><h3 id="_11、作用域和执行上下文的区别是什么" tabindex="-1">11、作用域和执行上下文的区别是什么？ <a class="header-anchor" href="#_11、作用域和执行上下文的区别是什么" aria-label="Permalink to &quot;11、作用域和执行上下文的区别是什么？&quot;">​</a></h3><h3 id="_12、ajax-是什么" tabindex="-1">12、ajax 是什么? <a class="header-anchor" href="#_12、ajax-是什么" aria-label="Permalink to &quot;12、ajax 是什么?&quot;">​</a></h3><h3 id="_13、在jq中-mouseover-mouseenter-mouseout-mouseleave-和-hover有什么关联" tabindex="-1">13、在jq中 mouseover mouseenter mouseout mouseleave 和 hover有什么关联? <a class="header-anchor" href="#_13、在jq中-mouseover-mouseenter-mouseout-mouseleave-和-hover有什么关联" aria-label="Permalink to &quot;13、在jq中 mouseover mouseenter mouseout mouseleave 和 hover有什么关联?&quot;">​</a></h3><h3 id="_14、set、map的区别" tabindex="-1">14、Set、Map的区别 <a class="header-anchor" href="#_14、set、map的区别" aria-label="Permalink to &quot;14、Set、Map的区别&quot;">​</a></h3><h3 id="_15、get和post的区别" tabindex="-1">15、get和post的区别 <a class="header-anchor" href="#_15、get和post的区别" aria-label="Permalink to &quot;15、get和post的区别&quot;">​</a></h3><h3 id="_16、组件之间的传值通信" tabindex="-1">16、组件之间的传值通信 <a class="header-anchor" href="#_16、组件之间的传值通信" aria-label="Permalink to &quot;16、组件之间的传值通信&quot;">​</a></h3><h3 id="_17、一个页面上有大量的图片-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验。" tabindex="-1">17、一个页面上有大量的图片，加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。 <a class="header-anchor" href="#_17、一个页面上有大量的图片-加载很慢-你有哪些方法优化这些图片的加载-给用户更好的体验。" aria-label="Permalink to &quot;17、一个页面上有大量的图片，加载很慢，你有哪些方法优化这些图片的加载，给用户更好的体验。&quot;">​</a></h3><h3 id="_18、in-运算符和-object-hasownproperty-方法有什么区别" tabindex="-1">18、<code>in</code> 运算符和 <code>Object.hasOwnProperty</code> 方法有什么区别？ <a class="header-anchor" href="#_18、in-运算符和-object-hasownproperty-方法有什么区别" aria-label="Permalink to &quot;18、\`in\` 运算符和 \`Object.hasOwnProperty\` 方法有什么区别？&quot;">​</a></h3><h3 id="_19、ajax的优点和缺点" tabindex="-1">19、ajax的优点和缺点 <a class="header-anchor" href="#_19、ajax的优点和缺点" aria-label="Permalink to &quot;19、ajax的优点和缺点&quot;">​</a></h3><h3 id="_20、如何在页面上实现一个圆形的可点击区域" tabindex="-1">20、如何在页面上实现一个圆形的可点击区域？ <a class="header-anchor" href="#_20、如何在页面上实现一个圆形的可点击区域" aria-label="Permalink to &quot;20、如何在页面上实现一个圆形的可点击区域？&quot;">​</a></h3><h3 id="_21、什么是哈希表" tabindex="-1">21、什么是哈希表？ <a class="header-anchor" href="#_21、什么是哈希表" aria-label="Permalink to &quot;21、什么是哈希表？&quot;">​</a></h3><h3 id="_22、var、let、const之间的区别" tabindex="-1">22、var、let、const之间的区别 <a class="header-anchor" href="#_22、var、let、const之间的区别" aria-label="Permalink to &quot;22、var、let、const之间的区别&quot;">​</a></h3><h3 id="_23、var-let和const的区别是什么" tabindex="-1">23、<code>var</code>,<code>let</code>和<code>const</code>的区别是什么？ <a class="header-anchor" href="#_23、var-let和const的区别是什么" aria-label="Permalink to &quot;23、\`var\`,\`let\`和\`const\`的区别是什么？&quot;">​</a></h3><h3 id="_24、对this对象的理解" tabindex="-1">24、对This对象的理解 <a class="header-anchor" href="#_24、对this对象的理解" aria-label="Permalink to &quot;24、对This对象的理解&quot;">​</a></h3><h3 id="_25、谈谈你对es6的理解" tabindex="-1">25、谈谈你对ES6的理解 <a class="header-anchor" href="#_25、谈谈你对es6的理解" aria-label="Permalink to &quot;25、谈谈你对ES6的理解&quot;">​</a></h3><h3 id="_26、什么是预编译语音-预编译处理器" tabindex="-1">26、什么是预编译语音|预编译处理器? <a class="header-anchor" href="#_26、什么是预编译语音-预编译处理器" aria-label="Permalink to &quot;26、什么是预编译语音|预编译处理器?&quot;">​</a></h3><h3 id="_27、什么是set对象-它是如何工作的" tabindex="-1">27、什么是<code>Set</code>对象，它是如何工作的？ <a class="header-anchor" href="#_27、什么是set对象-它是如何工作的" aria-label="Permalink to &quot;27、什么是\`Set\`对象，它是如何工作的？&quot;">​</a></h3><h3 id="_28、web标准以及w3c标准是什么" tabindex="-1">28、WEB标准以及W3C标准是什么? <a class="header-anchor" href="#_28、web标准以及w3c标准是什么" aria-label="Permalink to &quot;28、WEB标准以及W3C标准是什么?&quot;">​</a></h3><h3 id="_29、如何判断值是否为数组" tabindex="-1">29、如何判断值是否为数组？ <a class="header-anchor" href="#_29、如何判断值是否为数组" aria-label="Permalink to &quot;29、如何判断值是否为数组？&quot;">​</a></h3><h3 id="_30、-1-2-3-map-parseint-答案是多少" tabindex="-1">30、[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？ <a class="header-anchor" href="#_30、-1-2-3-map-parseint-答案是多少" aria-label="Permalink to &quot;30、[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？&quot;">​</a></h3>`,77),r=[n];function l(c,p,i,d,h,E){return e(),s("div",null,r)}const B=a(t,[["render",l]]);export{u as __pageData,B as default};
