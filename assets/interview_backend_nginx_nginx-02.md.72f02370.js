import{_ as n,o as e,c as a,V as r}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/nginx/nginx-02.md","filePath":"interview/backend/nginx/nginx-02.md"}'),s={name:"interview/backend/nginx/nginx-02.md"},t=r(`<h3 id="_1、nginx-是如何实现高并发的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1nginx-%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84" target="_blank" rel="noreferrer">1、Nginx 是如何实现高并发的？</a> <a class="header-anchor" href="#_1、nginx-是如何实现高并发的" aria-label="Permalink to &quot;[1、Nginx 是如何实现高并发的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#1nginx-是如何实现高并发的)&quot;">​</a></h3><p>如果一个 server 采用一个进程(或者线程)负责一个request的方式，那么进程数就是并发数。那么显而易见的，就是会有很多进程在等待中。等什么？最多的应该是等待网络传输。其缺点胖友应该也感觉到了，此处不述。</p><p><strong>思考下，Java 的 NIO 和 BIO 的对比哟。</strong></p><p>而 Nginx 的异步非阻塞工作方式正是利用了这点等待的时间。在需要等待的时候，这些进程就空闲出来待命了。因此表现为少数几个进程就解决了大量的并发问题。</p><p>Nginx是如何利用的呢，简单来说：同样的 4 个进程，如果采用一个进程负责一个 request 的方式，那么，同时进来 4 个 request 之后，每个进程就负责其中一个，直至会话关闭。期间，如果有第 5 个request进来了。就无法及时反应了，因为 4 个进程都没干完活呢，因此，一般有个调度进程，每当新进来了一个 request ，就新开个进程来处理。</p><p><strong>回想下，BIO 是不是存在酱紫的问题？嘻嘻。</strong></p><p>Nginx 不这样，每进来一个 request ，会有一个 worker 进程去处理。但不是全程的处理，处理到什么程度呢？处理到可能发生阻塞的地方，比如向上游（后端）服务器转发 request ，并等待请求返回。那么，这个处理的 worker 不会这么傻等着，他会在发送完请求后，注册一个事件：“如果 upstream 返回了，告诉我一声，我再接着干”。于是他就休息去了。此时，如果再有 request 进来，他就可以很快再按这种方式处理。而一旦上游服务器返回了，就会触发这个事件，worker 才会来接手，这个 request 才会接着往下走。</p><p><strong>这就是为什么说，Nginx 基于事件模型。</strong></p><p>由于 web server 的工作性质决定了每个 request 的大部份生命都是在网络传输中，实际上花费在 server 机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即：</p><p><strong>webserver 刚好属于网络 IO 密集型应用，不算是计算密集型。</strong></p><p>而正如叔度所说的</p><p><strong>异步，非阻塞，使用 epoll ，和大量细节处的优化</strong></p><p>也正是 Nginx 之所以然的技术基石。</p><h3 id="_2、请解释-nginx-如何处理-http-请求。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E8%AF%B7%E8%A7%A3%E9%87%8A-nginx-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86-http-%E8%AF%B7%E6%B1%82%E3%80%82" target="_blank" rel="noreferrer">2、请解释 Nginx 如何处理 HTTP 请求。</a> <a class="header-anchor" href="#_2、请解释-nginx-如何处理-http-请求。" aria-label="Permalink to &quot;[2、请解释 Nginx 如何处理 HTTP 请求。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#2请解释-nginx-如何处理-http-请求。)&quot;">​</a></h3><p>Nginx 使用反应器模式。主事件循环等待操作系统发出准备事件的信号，这样数据就可以从套接字读取，在该实例中读取到缓冲区并进行处理。单个线程可以提供数万个并发连接。</p><h3 id="_3、为什么要做动、静分离" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%81%9A%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB" target="_blank" rel="noreferrer">3、为什么要做动、静分离？</a> <a class="header-anchor" href="#_3、为什么要做动、静分离" aria-label="Permalink to &quot;[3、为什么要做动、静分离？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#3为什么要做动静分离)&quot;">​</a></h3><p>在我们的软件开发中，有些请求是需要后台处理的（如：.jsp,.do等等），有些请求是不需要经过后台处理的（如：css、html、jpg、js等等），这些不需要经过后台处理的文件称为静态文件，否则动态文件。因此我们后台处理忽略静态文件，但是如果直接忽略静态文件的话，后台的请求次数就明显增多了。在我们对资源的响应速度有要求的时候，应该使用这种动静分离的策略去解决动、静分离将网站静态资源（HTML，JavaScript，CSS等）与后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问。这里将静态资源放到nginx中，动态资源转发到<a href="https://www.wkcto.com/courses/tomcat.html" target="_blank" rel="noreferrer">tomcat</a>服务器中,毕竟Tomcat的优势是处理动态请求。</p><h3 id="_4、nginx是如何实现高并发的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4nginx%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E5%B9%B6%E5%8F%91%E7%9A%84" target="_blank" rel="noreferrer">4、nginx是如何实现高并发的？</a> <a class="header-anchor" href="#_4、nginx是如何实现高并发的" aria-label="Permalink to &quot;[4、nginx是如何实现高并发的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#4nginx是如何实现高并发的)&quot;">​</a></h3><p>一个主进程，多个工作进程，每个工作进程可以处理多个请求，每进来一个request，会有一个worker进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发request，并等待请求返回。那么，这个处理的worker继续处理其他请求，而一旦上游服务器返回了，就会触发这个事件，worker才会来接手，这个request才会接着往下走。由于web server的工作性质决定了每个request的大部份生命都是在网络传输中，实际上花费在server机器上的时间片不多。这是几个进程就解决高并发的秘密所在。即@skoo所说的webserver刚好属于网络io密集型应用，不算是计算密集型。</p><h3 id="_5、nginx静态资源" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5nginx%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90" target="_blank" rel="noreferrer">5、Nginx静态资源?</a> <a class="header-anchor" href="#_5、nginx静态资源" aria-label="Permalink to &quot;[5、Nginx静态资源?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#5nginx静态资源)&quot;">​</a></h3><p>静态资源访问，就是存放在nginx的html页面，我们可以自己编写</p><h3 id="_6、nginx配置高可用性怎么配置" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6nginx%E9%85%8D%E7%BD%AE%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E6%80%8E%E4%B9%88%E9%85%8D%E7%BD%AE" target="_blank" rel="noreferrer">6、Nginx配置高可用性怎么配置？</a> <a class="header-anchor" href="#_6、nginx配置高可用性怎么配置" aria-label="Permalink to &quot;[6、Nginx配置高可用性怎么配置？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#6nginx配置高可用性怎么配置)&quot;">​</a></h3><p>当上游服务器(真实访问服务器)，一旦出现故障或者是没有及时相应的话，应该直接轮训到下一台服务器，保证服务器的高可用</p><p>Nginx配置代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">server {</span></span>
<span class="line"><span style="color:#f6f6f4;">    listen 80;</span></span>
<span class="line"><span style="color:#f6f6f4;">    server_name www.lijie.com;cc  nginx发送给上游服务器(真实访问的服务器)超时时间</span></span>
<span class="line"><span style="color:#f6f6f4;">        proxy_send_timeout 1s;###</span></span>
<span class="line"><span style="color:#f6f6f4;">        nginx接受上游服务器(真实访问的服务器)超时时间</span></span>
<span class="line"><span style="color:#f6f6f4;">        proxy_read_timeout 1s;</span></span>
<span class="line"><span style="color:#f6f6f4;">        index index.html index.htm;</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">server {</span></span>
<span class="line"><span style="color:#24292e;">    listen 80;</span></span>
<span class="line"><span style="color:#24292e;">    server_name www.lijie.com;cc  nginx发送给上游服务器(真实访问的服务器)超时时间</span></span>
<span class="line"><span style="color:#24292e;">        proxy_send_timeout 1s;###</span></span>
<span class="line"><span style="color:#24292e;">        nginx接受上游服务器(真实访问的服务器)超时时间</span></span>
<span class="line"><span style="color:#24292e;">        proxy_read_timeout 1s;</span></span>
<span class="line"><span style="color:#24292e;">        index index.html index.htm;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_7、502错误可能原因" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7502%E9%94%99%E8%AF%AF%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0" target="_blank" rel="noreferrer">7、502错误可能原因</a> <a class="header-anchor" href="#_7、502错误可能原因" aria-label="Permalink to &quot;[7、502错误可能原因](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#7502错误可能原因)&quot;">​</a></h3><p><strong>1、</strong> FastCGI进程是否已经启动</p><p><strong>2、</strong> FastCGI worker进程数是否不够</p><p><strong>3、</strong> FastCGI执行时间过长</p><p><strong>1、</strong> fastcgi_connect_timeout 300;</p><p><strong>2、</strong> fastcgi_send_timeout 300;</p><p><strong>3、</strong> fastcgi_read_timeout 300;</p><p><strong>FastCGI Buffer不够</strong></p><p><strong>1、</strong> nginx和apache一样，有前端缓冲限制，可以调整缓冲参数</p><p><strong>2、</strong> fastcgi_buffer_size 32k;</p><p><strong>3、</strong> fastcgi_buffers 8 32k;</p><p><strong>Proxy Buffer不够</strong></p><p><strong>1、</strong> 如果你用了Proxying，调整</p><p><strong>2、</strong> proxy_buffer_size 16k;</p><p><strong>3、</strong> proxy_buffers 4 16k;</p><p><strong>php脚本执行时间过长</strong></p><p>将php-fpm.conf的0s的0s改成一个时间</p><h3 id="_8、在-nginx-中-解释如何在-url-中保留双斜线" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E5%9C%A8-nginx-%E4%B8%AD%E8%A7%A3%E9%87%8A%E5%A6%82%E4%BD%95%E5%9C%A8-url-%E4%B8%AD%E4%BF%9D%E7%95%99%E5%8F%8C%E6%96%9C%E7%BA%BF" target="_blank" rel="noreferrer">8、在 Nginx 中，解释如何在 URL 中保留双斜线?</a> <a class="header-anchor" href="#_8、在-nginx-中-解释如何在-url-中保留双斜线" aria-label="Permalink to &quot;[8、在 Nginx 中，解释如何在 URL 中保留双斜线?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#8在-nginx-中解释如何在-url-中保留双斜线)&quot;">​</a></h3><p>要在 URL 中保留双斜线，就必须使用 merge_slashes_off;</p><p>语法:merge_slashes [on/off]</p><p>默认值: merge_slashes on</p><p>环境: http，server</p><h3 id="_9、nginx服务器上的master和worker进程分别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84master%E5%92%8Cworker%E8%BF%9B%E7%A8%8B%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、Nginx服务器上的Master和Worker进程分别是什么?</a> <a class="header-anchor" href="#_9、nginx服务器上的master和worker进程分别是什么" aria-label="Permalink to &quot;[9、Nginx服务器上的Master和Worker进程分别是什么?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#9nginx服务器上的master和worker进程分别是什么)&quot;">​</a></h3><p>Master进程：读取及评估配置和维持 ；Worker进程：处理请求。</p><h3 id="_10、nginx的优缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10nginx%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">10、Nginx的优缺点？</a> <a class="header-anchor" href="#_10、nginx的优缺点" aria-label="Permalink to &quot;[10、Nginx的优缺点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题大汇总，附答案.md#10nginx的优缺点)&quot;">​</a></h3><p><strong>优点：</strong></p><p><strong>1、</strong> 占内存小，可实现高并发连接，处理响应快</p><p><strong>2、</strong> 可实现http服务器、虚拟主机、方向代理、负载均衡</p><p><strong>3、</strong> Nginx配置简单</p><p><strong>4、</strong> 可以不暴露正式的服务器IP地址</p><p><strong>缺点：</strong></p><p>动态处理差，nginx处理静态文件好,耗费内存少，但是处理动态页面则很鸡肋，现在一般前端用nginx作为反向代理抗住压力，</p><h3 id="_11、nginx和apache的区别" tabindex="-1">11、nginx和apache的区别？ <a class="header-anchor" href="#_11、nginx和apache的区别" aria-label="Permalink to &quot;11、nginx和apache的区别？&quot;">​</a></h3><h3 id="_12、令牌桶算法" tabindex="-1">12、令牌桶算法# <a class="header-anchor" href="#_12、令牌桶算法" aria-label="Permalink to &quot;12、令牌桶算法#&quot;">​</a></h3><h3 id="_13、为什么-nginx-不使用多线程" tabindex="-1">13、为什么 Nginx 不使用多线程？ <a class="header-anchor" href="#_13、为什么-nginx-不使用多线程" aria-label="Permalink to &quot;13、为什么 Nginx 不使用多线程？&quot;">​</a></h3><h3 id="_14、为什么要用nginx" tabindex="-1">14、为什么要用Nginx？ <a class="header-anchor" href="#_14、为什么要用nginx" aria-label="Permalink to &quot;14、为什么要用Nginx？&quot;">​</a></h3><h3 id="_15、基于端口的虚拟主机" tabindex="-1">15、基于端口的虚拟主机 <a class="header-anchor" href="#_15、基于端口的虚拟主机" aria-label="Permalink to &quot;15、基于端口的虚拟主机&quot;">​</a></h3><h3 id="_16、什么是动态资源、静态资源分离" tabindex="-1">16、什么是动态资源、静态资源分离？ <a class="header-anchor" href="#_16、什么是动态资源、静态资源分离" aria-label="Permalink to &quot;16、什么是动态资源、静态资源分离？&quot;">​</a></h3><h3 id="_17、请解释-nginx-服务器上的-master-和-worker-进程分别是什么" tabindex="-1">17、请解释 Nginx 服务器上的 Master 和 Worker 进程分别是什么? <a class="header-anchor" href="#_17、请解释-nginx-服务器上的-master-和-worker-进程分别是什么" aria-label="Permalink to &quot;17、请解释 Nginx 服务器上的 Master 和 Worker 进程分别是什么?&quot;">​</a></h3><h3 id="_18、ngx-http-upstream-module的作用是什么" tabindex="-1">18、ngx_http_upstream_module的作用是什么? <a class="header-anchor" href="#_18、ngx-http-upstream-module的作用是什么" aria-label="Permalink to &quot;18、ngx_http_upstream_module的作用是什么?&quot;">​</a></h3><h3 id="_19、在nginx中-如何使用未定义的服务器名称来阻止处理请求" tabindex="-1">19、在Nginx中，如何使用未定义的服务器名称来阻止处理请求? <a class="header-anchor" href="#_19、在nginx中-如何使用未定义的服务器名称来阻止处理请求" aria-label="Permalink to &quot;19、在Nginx中，如何使用未定义的服务器名称来阻止处理请求?&quot;">​</a></h3><h3 id="_20、使用-反向代理服务器-的优点是什么" tabindex="-1">20、使用“反向代理服务器”的优点是什么？ <a class="header-anchor" href="#_20、使用-反向代理服务器-的优点是什么" aria-label="Permalink to &quot;20、使用“反向代理服务器”的优点是什么？&quot;">​</a></h3><h3 id="_21、在nginx中如何在url中保留双斜线" tabindex="-1">21、在Nginx中如何在URL中保留双斜线? <a class="header-anchor" href="#_21、在nginx中如何在url中保留双斜线" aria-label="Permalink to &quot;21、在Nginx中如何在URL中保留双斜线?&quot;">​</a></h3><h3 id="_22、nginx-常用命令" tabindex="-1">22、Nginx 常用命令？ <a class="header-anchor" href="#_22、nginx-常用命令" aria-label="Permalink to &quot;22、Nginx 常用命令？&quot;">​</a></h3><h3 id="_23、用-nginx-服务器解释-s-的目的是什么" tabindex="-1">23、用 Nginx 服务器解释-s 的目的是什么? <a class="header-anchor" href="#_23、用-nginx-服务器解释-s-的目的是什么" aria-label="Permalink to &quot;23、用 Nginx 服务器解释-s 的目的是什么?&quot;">​</a></h3><h3 id="_24、url-hash-第三方插件" tabindex="-1">24、url_hash(第三方插件) <a class="header-anchor" href="#_24、url-hash-第三方插件" aria-label="Permalink to &quot;24、url_hash(第三方插件)&quot;">​</a></h3><h3 id="_25、请解释什么是c10k问题" tabindex="-1">25、请解释什么是<code>C10K</code>问题? <a class="header-anchor" href="#_25、请解释什么是c10k问题" aria-label="Permalink to &quot;25、请解释什么是\`C10K\`问题?&quot;">​</a></h3><h3 id="_26、为什么nginx性能这么高" tabindex="-1">26、为什么Nginx性能这么高？ <a class="header-anchor" href="#_26、为什么nginx性能这么高" aria-label="Permalink to &quot;26、为什么Nginx性能这么高？&quot;">​</a></h3><h3 id="_27、nginx是否支持将请求压缩到上游" tabindex="-1">27、Nginx是否支持将请求压缩到上游? <a class="header-anchor" href="#_27、nginx是否支持将请求压缩到上游" aria-label="Permalink to &quot;27、Nginx是否支持将请求压缩到上游?&quot;">​</a></h3><h3 id="_28、权重-weight" tabindex="-1">28、权重 weight <a class="header-anchor" href="#_28、权重-weight" aria-label="Permalink to &quot;28、权重 weight&quot;">​</a></h3><h3 id="_29、nginx-有哪些负载均衡策略" tabindex="-1">29、Nginx 有哪些负载均衡策略？ <a class="header-anchor" href="#_29、nginx-有哪些负载均衡策略" aria-label="Permalink to &quot;29、Nginx 有哪些负载均衡策略？&quot;">​</a></h3><h3 id="_30、如何通过不同于80的端口开启nginx" tabindex="-1">30、如何通过不同于80的端口开启Nginx? <a class="header-anchor" href="#_30、如何通过不同于80的端口开启nginx" aria-label="Permalink to &quot;30、如何通过不同于80的端口开启Nginx?&quot;">​</a></h3>`,77),o=[t];function i(l,g,p,h,E,x){return e(),a("div",null,o)}const u=n(s,[["render",i]]);export{d as __pageData,u as default};
