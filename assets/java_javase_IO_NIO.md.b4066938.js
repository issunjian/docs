import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"NIO","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/IO/NIO.md","filePath":"java/javase/IO/NIO.md"}'),p={name:"java/javase/IO/NIO.md"},o=l(`<h1 id="nio" tabindex="-1">NIO <a class="header-anchor" href="#nio" aria-label="Permalink to &quot;NIO&quot;">​</a></h1><hr><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="io-模型" tabindex="-1">IO 模型 <a class="header-anchor" href="#io-模型" aria-label="Permalink to &quot;IO 模型&quot;">​</a></h3><ul><li><strong>BIO 同步阻塞</strong></li></ul><p>在服务器和客户端通信的过程中，服务器线程会一直等待请求结果返回，无法处理其他请求。</p><ul><li><strong>NIO 同步非阻塞</strong></li></ul><p>在服务器和客户端通信的过程中，服务器线程可以先处理其他请求，定时检查结果是否返回。</p><ul><li><strong>AIO 异步非阻塞</strong></li></ul><p>在服务器和客户端通信的过程中，服务器线程可以先处理其他请求，客户端会主动通知服务器返回了结果。</p><h3 id="nio-模式" tabindex="-1">NIO 模式 <a class="header-anchor" href="#nio-模式" aria-label="Permalink to &quot;NIO 模式&quot;">​</a></h3><p>BIO 通信通常使用线程池机制实现伪异步：每建立一个连接就创建一个线程，在执行读写操作时该线程将被阻塞，直到数据流读写完成。在高并发情况下会有大量线程被创建并阻塞、CPU 将频繁切换线程，非常消耗计算机资源。</p><p>因此 JDK 1.4 引入了 NIO 模型，相关类存储在 java.nio 文件夹内，使用时需要进行导入。NIO 模型中，在执行读写操作时数据会先存入缓冲区，该线程可以先处理其他连接，一定时间后再对缓冲区读取或写出。</p><ul><li><p><strong>Buffer</strong>：【缓冲区】暂存将要写入或者要读出的数据。</p></li><li><p><strong>Channel</strong>：【全双工通道】对缓冲区数据读写，在通道内部支持同时读写。</p></li><li><p><strong>Selector</strong>：【选择器】用于单线程同时管理多个通道，选择器会对多个客户进行轮询，使一个线程可以同时处理多个请求。</p></li></ul><p>JDK 1.7 引入了 AIO 模型，相关类存储在 java.aio 文件夹内。但在 Linux 底层 AIO 实现本质仍为轮询，所以 AIO 相比于 NIO 的性能提升非常有限。目前主流的 IO 模式仍为 NIO 。</p><h3 id="netty" tabindex="-1">Netty <a class="header-anchor" href="#netty" aria-label="Permalink to &quot;Netty&quot;">​</a></h3><p>Java 提供的 NIO 编程非常复杂，开发工作量和难度巨大。且可能会产生空轮询，导致 CPU 占用率 100% 。</p><p>于是我们引入了 Netty 开源框架封装 NIO 通信，是目前主流的使用方式。用于开发高性能高并发的 IO 程序。</p><hr><h2 id="netty-1" tabindex="-1">Netty <a class="header-anchor" href="#netty-1" aria-label="Permalink to &quot;Netty&quot;">​</a></h2><h3 id="netty-框架" tabindex="-1">Netty 框架 <a class="header-anchor" href="#netty-框架" aria-label="Permalink to &quot;Netty 框架&quot;">​</a></h3><p>但 NIO 编程复杂自行实现 bug 极多，目前主流的 NIO 通信使用 Netty 开源框架。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">NettyOioServer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">server</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">port</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ByteBuf</span><span style="color:#F6F6F4;"> buf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Unpooled.</span><span style="color:#62E884;">unreleasableBuffer</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">                Unpooled.</span><span style="color:#62E884;">copiedBuffer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hi!</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, Charset.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">EventLoopGroup</span><span style="color:#F6F6F4;"> group </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OioEventLoopGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ServerBootstrap</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerBootstrap</span><span style="color:#F6F6F4;">();        </span><span style="color:#7B7F8B;">// 负责连接的池</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            b.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">(group)                                    </span><span style="color:#7B7F8B;">//2</span></span>
<span class="line"><span style="color:#F6F6F4;">             .</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">(OioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">             .</span><span style="color:#62E884;">localAddress</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InetSocketAddress</span><span style="color:#F6F6F4;">(port))</span></span>
<span class="line"><span style="color:#F6F6F4;">             .</span><span style="color:#62E884;">childHandler</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ChannelInitializer</span><span style="color:#F6F6F4;">&lt;SocketChannel&gt;() {    </span><span style="color:#7B7F8B;">// 初始化</span></span>
<span class="line"><span style="color:#F6F6F4;">                 @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">                 </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> initChannel(</span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">ch</span><span style="color:#62E884;">) </span></span>
<span class="line"><span style="color:#62E884;">                     </span><span style="color:#F286C4;">throws</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                     </span><span style="color:#F6F6F4;">ch</span><span style="color:#62E884;">.pipeline().addLast(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> ChannelInboundHandlerAdapter</span><span style="color:#F6F6F4;">()</span><span style="color:#62E884;"> {            </span><span style="color:#7B7F8B;">//4</span></span>
<span class="line"><span style="color:#62E884;">                         @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#62E884;">                         </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> channelActive(</span><span style="color:#97E1F1;font-style:italic;">ChannelHandlerContext</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#62E884;">) </span><span style="color:#F286C4;">throws</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                             </span><span style="color:#F6F6F4;">ctx</span><span style="color:#62E884;">.writeAndFlush(</span><span style="color:#F6F6F4;">buf</span><span style="color:#62E884;">.duplicate()).addListener(</span><span style="color:#F6F6F4;">ChannelFutureListener</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">CLOSE</span><span style="color:#62E884;">);</span><span style="color:#7B7F8B;">//5</span></span>
<span class="line"><span style="color:#62E884;">                         }</span></span>
<span class="line"><span style="color:#62E884;">                     });</span></span>
<span class="line"><span style="color:#62E884;">                 }</span></span>
<span class="line"><span style="color:#F6F6F4;">             });</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ChannelFuture</span><span style="color:#F6F6F4;"> f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> b.</span><span style="color:#62E884;">bind</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();  </span><span style="color:#7B7F8B;">//6</span></span>
<span class="line"><span style="color:#F6F6F4;">            f.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">closeFuture</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            group.</span><span style="color:#62E884;">shutdownGracefully</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();        </span><span style="color:#7B7F8B;">//7</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NettyOioServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">server</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">port</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ByteBuf buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Unpooled.</span><span style="color:#6F42C1;">unreleasableBuffer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                Unpooled.</span><span style="color:#6F42C1;">copiedBuffer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hi!</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, Charset.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">        EventLoopGroup group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OioEventLoopGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ServerBootstrap b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerBootstrap</span><span style="color:#24292E;">();        </span><span style="color:#6A737D;">// 负责连接的池</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            b.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(group)                                    </span><span style="color:#6A737D;">//2</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">(OioServerSocketChannel.class)</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">localAddress</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(port))</span></span>
<span class="line"><span style="color:#24292E;">             .</span><span style="color:#6F42C1;">childHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ChannelInitializer&lt;</span><span style="color:#D73A49;">SocketChannel</span><span style="color:#24292E;">&gt;() {    </span><span style="color:#6A737D;">// 初始化</span></span>
<span class="line"><span style="color:#24292E;">                 @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initChannel</span><span style="color:#24292E;">(SocketChannel </span><span style="color:#E36209;">ch</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">                     </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                     ch.</span><span style="color:#6F42C1;">pipeline</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">addLast</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ChannelInboundHandlerAdapter</span><span style="color:#24292E;">() {            </span><span style="color:#6A737D;">//4</span></span>
<span class="line"><span style="color:#24292E;">                         @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                         </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">channelActive</span><span style="color:#24292E;">(ChannelHandlerContext </span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                             ctx.</span><span style="color:#6F42C1;">writeAndFlush</span><span style="color:#24292E;">(buf.</span><span style="color:#6F42C1;">duplicate</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">addListener</span><span style="color:#24292E;">(ChannelFutureListener.CLOSE);</span><span style="color:#6A737D;">//5</span></span>
<span class="line"><span style="color:#24292E;">                         }</span></span>
<span class="line"><span style="color:#24292E;">                     });</span></span>
<span class="line"><span style="color:#24292E;">                 }</span></span>
<span class="line"><span style="color:#24292E;">             });</span></span>
<span class="line"><span style="color:#24292E;">            ChannelFuture f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">//6</span></span>
<span class="line"><span style="color:#24292E;">            f.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">closeFuture</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            group.</span><span style="color:#6F42C1;">shutdownGracefully</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();        </span><span style="color:#6A737D;">//7</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,23),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
