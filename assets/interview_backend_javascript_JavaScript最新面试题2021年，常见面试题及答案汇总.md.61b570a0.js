import{_ as a,o as e,c as s,V as n}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/javascript/JavaScript最新面试题2021年，常见面试题及答案汇总.md","filePath":"interview/backend/javascript/JavaScript最新面试题2021年，常见面试题及答案汇总.md"}'),o={name:"interview/backend/javascript/JavaScript最新面试题2021年，常见面试题及答案汇总.md"},t=n(`<h3 id="_1、node的应用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1node%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">1、Node的应用场景</a> <a class="header-anchor" href="#_1、node的应用场景" aria-label="Permalink to &quot;[1、Node的应用场景](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#1node的应用场景)&quot;">​</a></h3><p><strong>特点：</strong></p><p><strong>1、</strong> 它是一个<code>Javascript</code>运行环境</p><p><strong>2、</strong> 依赖于<code>Chrome V8</code>引擎进行代码解释</p><p><strong>3、</strong> 事件驱动</p><p><strong>4、</strong> 非阻塞<code>I/O</code></p><p><strong>5、</strong> 单进程，单线程</p><p><strong>优点：</strong></p><p><strong>1、</strong> 高并发（最重要的优点）</p><p><strong>缺点：</strong></p><p><strong>1、</strong> 只支持单<code>核CPU</code>，不能充分利用<code>CPU</code></p><p><strong>2、</strong> 可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</p><h3 id="_2、异步编程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B" target="_blank" rel="noreferrer">2、异步编程？</a> <a class="header-anchor" href="#_2、异步编程" aria-label="Permalink to &quot;[2、异步编程？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#2异步编程)&quot;">​</a></h3><p><strong>方法1：</strong></p><p><strong>1、</strong> 回调函数，优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p><p><strong>方法2：</strong></p><p><strong>1、</strong> 时间监听，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以“去耦合”（Decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p><p><strong>方法3：</strong></p><p>发布/订阅，性质与“事件监听”类似，但是明显优于后者。</p><p><strong>方法4：</strong></p><p><strong>1、</strong> Promises对象，是CommonJS工作组提出的一种规范，目的是为异步编程提供统一接口。</p><p><strong>2、</strong> 简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。</p><h3 id="_3、event-preventdefault-和-event-stoppropagation-方法之间有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3eventpreventdefault-%E5%92%8C-eventstoppropagation%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、event.preventDefault() 和 event.stopPropagation()方法之间有什么区别？</a> <a class="header-anchor" href="#_3、event-preventdefault-和-event-stoppropagation-方法之间有什么区别" aria-label="Permalink to &quot;[3、event.preventDefault() 和 event.stopPropagation()方法之间有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#3eventpreventdefault-和-eventstoppropagation方法之间有什么区别)&quot;">​</a></h3><p><code>event.preventDefault()</code> 方法可防止元素的默认行为。如果在表单元素中使用，它将阻止其提交。如果在锚元素中使用，它将阻止其导航。如果在上下文菜单中使用，它将阻止其显示或显示。<code>event.stopPropagation()</code>方法用于阻止捕获和冒泡阶段中当前事件的进一步传播。</p><h3 id="_4、作用域和执行上下文的区别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">4、作用域和执行上下文的区别是什么？</a> <a class="header-anchor" href="#_4、作用域和执行上下文的区别是什么" aria-label="Permalink to &quot;[4、作用域和执行上下文的区别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#4作用域和执行上下文的区别是什么)&quot;">​</a></h3><p><strong>1、</strong> 函数的执行上下文只在函数被调用时生成，而其作用域在创建时已经生成；</p><p><strong>2、</strong> 函数的作用域会包含若干个执行上下文(有可能是零个，当函数未被调用时)。</p><h3 id="_5、ajax原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5ajax%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">5、Ajax原理</a> <a class="header-anchor" href="#_5、ajax原理" aria-label="Permalink to &quot;[5、Ajax原理](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#5ajax原理)&quot;">​</a></h3><p><strong>1、</strong> <code>Ajax</code>的原理简单来说是在用户和服务器之间加了—个中间层(<code>AJAX</code>引擎)，通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>javascrip</code>t来操作<code>DOM</code>而更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据</p><p><strong>2、</strong> <code>Ajax</code>的过程只涉及<code>JavaScript</code>、<code>XMLHttpRequest</code>和<code>DOM</code>。<code>XMLHttpRequest</code>是<code>aja</code>x的核心机制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// 1、创建连接</span></span>
<span class="line"><span style="color:#f6f6f4;">    var xhr = null;</span></span>
<span class="line"><span style="color:#f6f6f4;">    xhr = new XMLHttpRequest()</span></span>
<span class="line"><span style="color:#f6f6f4;">    // 2、连接服务器</span></span>
<span class="line"><span style="color:#f6f6f4;">    xhr.open(&#39;get&#39;, url, true)</span></span>
<span class="line"><span style="color:#f6f6f4;">    // 3、发送请求</span></span>
<span class="line"><span style="color:#f6f6f4;">    xhr.send(null);</span></span>
<span class="line"><span style="color:#f6f6f4;">    // 4、接受请求</span></span>
<span class="line"><span style="color:#f6f6f4;">    xhr.onreadystatechange = function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">        if(xhr.readyState == 4){</span></span>
<span class="line"><span style="color:#f6f6f4;">            if(xhr.status == 200){</span></span>
<span class="line"><span style="color:#f6f6f4;">                success(xhr.responseText);</span></span>
<span class="line"><span style="color:#f6f6f4;">            } else { // fail</span></span>
<span class="line"><span style="color:#f6f6f4;">                fail &amp;&amp; fail(xhr.status);</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 1、创建连接</span></span>
<span class="line"><span style="color:#24292e;">    var xhr = null;</span></span>
<span class="line"><span style="color:#24292e;">    xhr = new XMLHttpRequest()</span></span>
<span class="line"><span style="color:#24292e;">    // 2、连接服务器</span></span>
<span class="line"><span style="color:#24292e;">    xhr.open(&#39;get&#39;, url, true)</span></span>
<span class="line"><span style="color:#24292e;">    // 3、发送请求</span></span>
<span class="line"><span style="color:#24292e;">    xhr.send(null);</span></span>
<span class="line"><span style="color:#24292e;">    // 4、接受请求</span></span>
<span class="line"><span style="color:#24292e;">    xhr.onreadystatechange = function(){</span></span>
<span class="line"><span style="color:#24292e;">        if(xhr.readyState == 4){</span></span>
<span class="line"><span style="color:#24292e;">            if(xhr.status == 200){</span></span>
<span class="line"><span style="color:#24292e;">                success(xhr.responseText);</span></span>
<span class="line"><span style="color:#24292e;">            } else { // fail</span></span>
<span class="line"><span style="color:#24292e;">                fail &amp;&amp; fail(xhr.status);</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span></code></pre></div><h3 id="_6、-1-2-3-map-parseint-答案是多少" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%5B%221%22,-%222%22,-%223%22%5Dmapparseint-%E7%AD%94%E6%A1%88%E6%98%AF%E5%A4%9A%E5%B0%91" target="_blank" rel="noreferrer">6、[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？</a> <a class="header-anchor" href="#_6、-1-2-3-map-parseint-答案是多少" aria-label="Permalink to &quot;[6、[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案是多少？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#6[&quot;1&quot;,-&quot;2&quot;,-&quot;3&quot;]mapparseint-答案是多少)&quot;">​</a></h3><p><code>[1, NaN, NaN]</code>因为 <code>parseInt</code> 需要两个参数 <code>(val, radix)</code>，其中<code>radix</code> 表示解析时用的基数。</p><p><code>map</code>传了 <code>3</code>个<code>(element, index, array)</code>，对应的 <code>radix</code> 不合法导致解析失败。</p><h3 id="_7、25-jq如何判断元素显示隐藏" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#725jq%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F" target="_blank" rel="noreferrer">7、25.Jq如何判断元素显示隐藏？</a> <a class="header-anchor" href="#_7、25-jq如何判断元素显示隐藏" aria-label="Permalink to &quot;[7、25.Jq如何判断元素显示隐藏？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#725jq如何判断元素显示隐藏)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//第一种：使用CSS属性 </span></span>
<span class="line"><span style="color:#f6f6f4;">var display =$(&#39;#id&#39;).css(&#39;display&#39;); </span></span>
<span class="line"><span style="color:#f6f6f4;">if(display == &#39;none&#39;){    alert(&quot;我是隐藏的！&quot;); }</span></span>
<span class="line"><span style="color:#f6f6f4;">//第二种：使用jquery内置选择器 </span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;div id=&quot;test&quot;&lt;p&gt;仅仅是测试所用&lt;/p&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">if($(&quot;#test&quot;).is(&quot;:hidden&quot;)){        $(&quot;#test&quot;).show();    //如果元素为隐藏,则将它显现 }else{       $(&quot;#test&quot;).hide();     //如果元素为显现,则将其隐藏 }</span></span>
<span class="line"><span style="color:#f6f6f4;">//第三种：jQuery判断元素是否显示 是否隐藏</span></span>
<span class="line"><span style="color:#f6f6f4;">var node=$(&#39;#id&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">if(node.is(&#39;:hidden&#39;)){　　//如果node是隐藏的则显示node元素，否则隐藏</span></span>
<span class="line"><span style="color:#f6f6f4;">　　node.show();　</span></span>
<span class="line"><span style="color:#f6f6f4;">}else{</span></span>
<span class="line"><span style="color:#f6f6f4;">　　node.hide();</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//第一种：使用CSS属性 </span></span>
<span class="line"><span style="color:#24292e;">var display =$(&#39;#id&#39;).css(&#39;display&#39;); </span></span>
<span class="line"><span style="color:#24292e;">if(display == &#39;none&#39;){    alert(&quot;我是隐藏的！&quot;); }</span></span>
<span class="line"><span style="color:#24292e;">//第二种：使用jquery内置选择器 </span></span>
<span class="line"><span style="color:#24292e;">&lt;div id=&quot;test&quot;&lt;p&gt;仅仅是测试所用&lt;/p&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">if($(&quot;#test&quot;).is(&quot;:hidden&quot;)){        $(&quot;#test&quot;).show();    //如果元素为隐藏,则将它显现 }else{       $(&quot;#test&quot;).hide();     //如果元素为显现,则将其隐藏 }</span></span>
<span class="line"><span style="color:#24292e;">//第三种：jQuery判断元素是否显示 是否隐藏</span></span>
<span class="line"><span style="color:#24292e;">var node=$(&#39;#id&#39;);</span></span>
<span class="line"><span style="color:#24292e;">if(node.is(&#39;:hidden&#39;)){　　//如果node是隐藏的则显示node元素，否则隐藏</span></span>
<span class="line"><span style="color:#24292e;">　　node.show();　</span></span>
<span class="line"><span style="color:#24292e;">}else{</span></span>
<span class="line"><span style="color:#24292e;">　　node.hide();</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_8、同步异步" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5" target="_blank" rel="noreferrer">8、同步异步?</a> <a class="header-anchor" href="#_8、同步异步" aria-label="Permalink to &quot;[8、同步异步?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#8同步异步)&quot;">​</a></h3><p><strong>1、</strong> 进程同步：就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事</p><p><strong>2、</strong> 异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p><h3 id="_9、你对数据校验是怎么样处理的-jquery-validate" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E4%BD%A0%E5%AF%B9%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E6%98%AF%E6%80%8E%E4%B9%88%E6%A0%B7%E5%A4%84%E7%90%86%E7%9A%84jqueryvalidate" target="_blank" rel="noreferrer">9、你对数据校验是怎么样处理的？jquery.validate？</a> <a class="header-anchor" href="#_9、你对数据校验是怎么样处理的-jquery-validate" aria-label="Permalink to &quot;[9、你对数据校验是怎么样处理的？jquery.validate？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#9你对数据校验是怎么样处理的jqueryvalidate)&quot;">​</a></h3><p>通俗的说，就是为保证数据的完整性，用一种指定的算法对原始数据计算出的一个校验值。接收方用同样的算法计算一次校验值，如果和随数据提供的校验值一样，就说明数据是完整的。</p><p>用正则表达式来处理;</p><p>jquery.validate：为表单验证插件</p><h3 id="_10、自执行函数-用于什么场景-好处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E7%94%A8%E4%BA%8E%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF%E5%A5%BD%E5%A4%84" target="_blank" rel="noreferrer">10、自执行函数?用于什么场景？好处?</a> <a class="header-anchor" href="#_10、自执行函数-用于什么场景-好处" aria-label="Permalink to &quot;[10、自执行函数?用于什么场景？好处?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题2021年，常见面试题及答案汇总.md#10自执行函数用于什么场景好处)&quot;">​</a></h3><p><strong>自执行函数:</strong></p><p><strong>1、</strong> 声明一个匿名函数</p><p><strong>2、</strong> 马上调用这个匿名函数。</p><p>作用：创建一个独立的作用域。</p><p><strong>好处：</strong></p><p>防止变量弥散到全局，以免各种js库冲突。隔离作用域避免污染，或者截断作用域链，避免闭包造成引用变量无法释放。利用立即执行特性，返回需要的业务函数或对象，避免每次通过条件判断来处理</p><p>场景：一般用于框架、插件等场景</p><h3 id="_11、异步加载js的方式有哪些" tabindex="-1">11、异步加载JS的方式有哪些？ <a class="header-anchor" href="#_11、异步加载js的方式有哪些" aria-label="Permalink to &quot;11、异步加载JS的方式有哪些？&quot;">​</a></h3><h3 id="_12、如何确保ajax或连接不走缓存路径" tabindex="-1">12、如何确保ajax或连接不走缓存路径 <a class="header-anchor" href="#_12、如何确保ajax或连接不走缓存路径" aria-label="Permalink to &quot;12、如何确保ajax或连接不走缓存路径&quot;">​</a></h3><h3 id="_13、什么是原型、原型链" tabindex="-1">13、什么是原型、原型链？ <a class="header-anchor" href="#_13、什么是原型、原型链" aria-label="Permalink to &quot;13、什么是原型、原型链？&quot;">​</a></h3><h3 id="_14、什么是提升" tabindex="-1">14、什么是提升？ <a class="header-anchor" href="#_14、什么是提升" aria-label="Permalink to &quot;14、什么是提升？&quot;">​</a></h3><h3 id="_15、jq中get和eq有什么区别" tabindex="-1">15、Jq中get和eq有什么区别？ <a class="header-anchor" href="#_15、jq中get和eq有什么区别" aria-label="Permalink to &quot;15、Jq中get和eq有什么区别？&quot;">​</a></h3><h3 id="_16、为什么typeof-null-返回-object-如何检查一个值是否为-null" tabindex="-1">16、为什么typeof null 返回 object？如何检查一个值是否为 null？ <a class="header-anchor" href="#_16、为什么typeof-null-返回-object-如何检查一个值是否为-null" aria-label="Permalink to &quot;16、为什么typeof null 返回 object？如何检查一个值是否为 null？&quot;">​</a></h3><h3 id="_17、节点类型-判断当前节点类型" tabindex="-1">17、节点类型?判断当前节点类型? <a class="header-anchor" href="#_17、节点类型-判断当前节点类型" aria-label="Permalink to &quot;17、节点类型?判断当前节点类型?&quot;">​</a></h3><h3 id="_18、this指向的各种情况都有什么" tabindex="-1">18、this指向的各种情况都有什么？ <a class="header-anchor" href="#_18、this指向的各种情况都有什么" aria-label="Permalink to &quot;18、this指向的各种情况都有什么？&quot;">​</a></h3><h3 id="_19、有哪些方法可以处理-js-中的异步代码" tabindex="-1">19、有哪些方法可以处理 JS 中的异步代码？ <a class="header-anchor" href="#_19、有哪些方法可以处理-js-中的异步代码" aria-label="Permalink to &quot;19、有哪些方法可以处理 JS 中的异步代码？&quot;">​</a></h3><h3 id="_20、什么是闭包" tabindex="-1">20、什么是闭包？ <a class="header-anchor" href="#_20、什么是闭包" aria-label="Permalink to &quot;20、什么是闭包？&quot;">​</a></h3><h3 id="_21、怎么理解宏任务-微任务" tabindex="-1">21、怎么理解宏任务，微任务？？？ <a class="header-anchor" href="#_21、怎么理解宏任务-微任务" aria-label="Permalink to &quot;21、怎么理解宏任务，微任务？？？&quot;">​</a></h3><h3 id="_22、html和xhtml有什么区别" tabindex="-1">22、html和xhtml有什么区别? <a class="header-anchor" href="#_22、html和xhtml有什么区别" aria-label="Permalink to &quot;22、html和xhtml有什么区别?&quot;">​</a></h3><h3 id="_23、eventloop事件循环是什么" tabindex="-1">23、EventLoop事件循环是什么？ <a class="header-anchor" href="#_23、eventloop事件循环是什么" aria-label="Permalink to &quot;23、EventLoop事件循环是什么？&quot;">​</a></h3><h3 id="_24、使用-或一元加运算符是将字符串转换为数字的最快方法吗" tabindex="-1">24、使用 + 或一元加运算符是将字符串转换为数字的最快方法吗？ <a class="header-anchor" href="#_24、使用-或一元加运算符是将字符串转换为数字的最快方法吗" aria-label="Permalink to &quot;24、使用 + 或一元加运算符是将字符串转换为数字的最快方法吗？&quot;">​</a></h3><h3 id="_25、function-prototype-apply-和-function-prototype-call-之间有什么区别" tabindex="-1">25、Function.prototype.apply 和 Function.prototype.call 之间有什么区别？ <a class="header-anchor" href="#_25、function-prototype-apply-和-function-prototype-call-之间有什么区别" aria-label="Permalink to &quot;25、Function.prototype.apply 和 Function.prototype.call 之间有什么区别？&quot;">​</a></h3><h3 id="_26、arguments-的对象是什么" tabindex="-1">26、arguments 的对象是什么？ <a class="header-anchor" href="#_26、arguments-的对象是什么" aria-label="Permalink to &quot;26、arguments 的对象是什么？&quot;">​</a></h3><h3 id="_27、function-prototype-bind-的用途是什么" tabindex="-1">27、Function.prototype.bind 的用途是什么？ <a class="header-anchor" href="#_27、function-prototype-bind-的用途是什么" aria-label="Permalink to &quot;27、Function.prototype.bind 的用途是什么？&quot;">​</a></h3><h3 id="_28、谈谈你对es6的理解" tabindex="-1">28、谈谈你对ES6的理解 <a class="header-anchor" href="#_28、谈谈你对es6的理解" aria-label="Permalink to &quot;28、谈谈你对ES6的理解&quot;">​</a></h3><h3 id="_29、require-import之间的区别" tabindex="-1">29、<code>require</code>/<code>import</code>之间的区别？ <a class="header-anchor" href="#_29、require-import之间的区别" aria-label="Permalink to &quot;29、\`require\`/\`import\`之间的区别？&quot;">​</a></h3>`,70),r=[t];function p(l,c,i,d,E,u){return e(),s("div",null,r)}const A=a(o,[["render",p]]);export{f as __pageData,A as default};
