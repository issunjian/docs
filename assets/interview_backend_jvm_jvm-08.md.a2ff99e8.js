import{_ as a,o as e,c as o,V as r}from"./chunks/framework.c6d8cbec.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/jvm/jvm-08.md","filePath":"interview/backend/jvm/jvm-08.md"}'),t={name:"interview/backend/jvm/jvm-08.md"},n=r('<h3 id="_1、如何开启和查看-gc-日志" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%92%8C%E6%9F%A5%E7%9C%8B-gc-%E6%97%A5%E5%BF%97" target="_blank" rel="noreferrer">1、如何开启和查看 GC 日志？</a> <a class="header-anchor" href="#_1、如何开启和查看-gc-日志" aria-label="Permalink to &quot;[1、如何开启和查看 GC 日志？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#1如何开启和查看-gc-日志)&quot;">​</a></h3><p><strong>常见的 GC 日志开启参数包括：</strong></p><p><strong>1、</strong> -Xloggc:filename，指定日志文件路径</p><p><strong>2、</strong> -XX:+PrintGC，打印 GC 基本信息</p><p><strong>3、</strong> -XX:+PrintGCDetails，打印 GC 详细信息</p><p><strong>4、</strong> -XX:+PrintGCTimeStamps，打印 GC 时间戳</p><p><strong>5、</strong> -XX:+PrintGCDateStamps，打印 GC 日期与时间</p><p><strong>6、</strong> -XX:+PrintHeapAtGC，打印 GC 前后的堆、方法区、元空间可用容量变化</p><p><strong>7、</strong> -XX:+PrintTenuringDistribution，打印熬过收集后剩余对象的年龄分布信息，有助于 MaxTenuringThreshold 参数调优设置</p><p><strong>8、</strong> -XX:+PrintAdaptiveSizePolicy，打印收集器自动设置堆空间各分代区域大小、收集目标等自动调节的相关信息</p><p><strong>9、</strong> -XX:+PrintGCApplicationConcurrentTime，打印 GC 过程中用户线程并发时间</p><p><strong>10、</strong> -XX:+PrintGCApplicationStoppedTime，打印 GC 过程中用户线程停顿时间</p><p><strong>11、</strong> -XX:+HeapDumpOnOutOfMemoryError，堆 oom 时自动 dump</p><p><strong>12、</strong> -XX:HeapDumpPath，堆 oom 时 dump 文件路径</p><p>Java 9 JVM 日志模块进行了重构，参数格式发生变化，这个需要知道。</p><p>GC 日志输出的格式，会随着上面的参数不同而发生变化。关注各个分代的内存使用情况、垃圾回收次数、垃圾回收的原因、垃圾回收占用的时间、吞吐量、用户线程停顿时间。</p><p>借助工具可视化工具可以更方便的分析，在线工具 GCeasy；离线版可以使用 GCViewer。</p><p>如果现场环境不允许，可以使用 JDK 自带的 jstat 工具监控观察 GC 情况。</p><h3 id="_2、parallel-scavenge-收集器-多线程复制算法、高效" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2parallel-scavenge-%E6%94%B6%E9%9B%86%E5%99%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95%E9%AB%98%E6%95%88" target="_blank" rel="noreferrer">2、Parallel Scavenge 收集器（多线程复制算法、高效）</a> <a class="header-anchor" href="#_2、parallel-scavenge-收集器-多线程复制算法、高效" aria-label="Permalink to &quot;[2、Parallel Scavenge 收集器（多线程复制算法、高效）](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#2parallel-scavenge-收集器多线程复制算法高效)&quot;">​</a></h3><p>Parallel Scavenge 收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器， 它重点关注的是程序达到一个可控制的吞吐量（Thoughput， CPU 用于运行用户代码的时间/CPU 总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)），高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个重要区别。</p><h3 id="_3、说下有哪些类加载器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E8%AF%B4%E4%B8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8" target="_blank" rel="noreferrer">3、说下有哪些类加载器？</a> <a class="header-anchor" href="#_3、说下有哪些类加载器" aria-label="Permalink to &quot;[3、说下有哪些类加载器？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#3说下有哪些类加载器)&quot;">​</a></h3><p>Bootstrap ClassLoader（启动类加载器） Extention ClassLoader（扩展类加载器） App ClassLoader（应用类加载器）</p><h3 id="_4、你做过-jvm-调优-说说如何查看-jvm-参数默认值" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E4%BD%A0%E5%81%9A%E8%BF%87-jvm-%E8%B0%83%E4%BC%98%E8%AF%B4%E8%AF%B4%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B-jvm-%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC" target="_blank" rel="noreferrer">4、你做过 JVM 调优，说说如何查看 JVM 参数默认值？</a> <a class="header-anchor" href="#_4、你做过-jvm-调优-说说如何查看-jvm-参数默认值" aria-label="Permalink to &quot;[4、你做过 JVM 调优，说说如何查看 JVM 参数默认值？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#4你做过-jvm-调优说说如何查看-jvm-参数默认值)&quot;">​</a></h3><p><strong>1、</strong> jps -v 可以查看 jvm 进程显示指定的参数</p><p><strong>2、</strong> 使用 -XX:+PrintFlagsFinal 可以看到 JVM 所有参数的值</p><p><strong>3、</strong> jinfo 可以实时查看和调整虚拟机各项参数</p><h3 id="_5、什么是双亲委派机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">5、什么是双亲委派机制？</a> <a class="header-anchor" href="#_5、什么是双亲委派机制" aria-label="Permalink to &quot;[5、什么是双亲委派机制？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#5什么是双亲委派机制)&quot;">​</a></h3><p>双亲委派机制的意思是除了顶层的启动类加载器以外，其余的类加载器，在加载之前，都会委派给它的父加载器进行加载。这样一层层向上传递，直到祖先们都无法胜任，它才会真正的加载。</p><h3 id="_6、内存溢出和内存泄漏的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%92%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、内存溢出和内存泄漏的区别？</a> <a class="header-anchor" href="#_6、内存溢出和内存泄漏的区别" aria-label="Permalink to &quot;[6、内存溢出和内存泄漏的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#6内存溢出和内存泄漏的区别)&quot;">​</a></h3><p>内存溢出 OutOfMemory，指程序在申请内存时，没有足够的内存空间供其使用。</p><p>内存泄露 Memory Leak，指程序在申请内存后，无法释放已申请的内存空间，内存泄漏最终将导致内存溢出。</p><h3 id="_7、强引用、软引用、弱引用、虚引用是什么-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E5%BC%BA%E5%BC%95%E7%94%A8%E8%BD%AF%E5%BC%95%E7%94%A8%E5%BC%B1%E5%BC%95%E7%94%A8%E8%99%9A%E5%BC%95%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">7、强引用、软引用、弱引用、虚引用是什么，有什么区别？</a> <a class="header-anchor" href="#_7、强引用、软引用、弱引用、虚引用是什么-有什么区别" aria-label="Permalink to &quot;[7、强引用、软引用、弱引用、虚引用是什么，有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#7强引用软引用弱引用虚引用是什么有什么区别)&quot;">​</a></h3><p><strong>1、</strong> 强引用，就是普通的对象引用关系，如 String s = new String(&quot;ConstXiong&quot;)</p><p><strong>2、</strong> 软引用，用于维护一些可有可无的对象。只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。SoftReference 实现</p><p><strong>3、</strong> 弱引用，相比软引用来说，要更加无用一些，它拥有更短的生命周期，当 JVM 进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。WeakReference 实现</p><p><strong>4、</strong> 虚引用是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来跟踪对象被垃圾回收的活动。PhantomReference 实现</p><h3 id="_8、垃圾回收的优点和原理。说说2种回收机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E5%8E%9F%E7%90%86%E3%80%82%E8%AF%B4%E8%AF%B42%E7%A7%8D%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">8、垃圾回收的优点和原理。说说2种回收机制</a> <a class="header-anchor" href="#_8、垃圾回收的优点和原理。说说2种回收机制" aria-label="Permalink to &quot;[8、垃圾回收的优点和原理。说说2种回收机制](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#8垃圾回收的优点和原理。说说2种回收机制)&quot;">​</a></h3><p>Java 语言中一个显著的特点就是引入了垃圾回收机制，使 C++ 程序员最头疼的内存管理的问题迎刃而解，它使得 Java 程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，Java 中的对象不再有“作用域”的概念，只有对象的引用才有&quot;作用域&quot;。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。</p><p><strong>回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。</strong></p><h3 id="_9、说一下垃圾分代收集的过程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E8%AF%B4%E4%B8%80%E4%B8%8B%E5%9E%83%E5%9C%BE%E5%88%86%E4%BB%A3%E6%94%B6%E9%9B%86%E7%9A%84%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">9、说一下垃圾分代收集的过程</a> <a class="header-anchor" href="#_9、说一下垃圾分代收集的过程" aria-label="Permalink to &quot;[9、说一下垃圾分代收集的过程](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#9说一下垃圾分代收集的过程)&quot;">​</a></h3><p>分为新生代和老年代，新生代默认占总空间的 1/3，老年代默认占 2/3。</p><p>新生代使用复制算法，有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1。</p><p>当新生代中的 Eden 区内存不足时，就会触发 Minor GC，过程如下：</p><p><strong>1、</strong> 在 Eden 区执行了第一次 GC 之后，存活的对象会被移动到其中一个 Survivor 分区；</p><p><strong>2、</strong> Eden 区再次 GC，这时会采用复制算法，将 Eden 和 from 区一起清理，存活的对象会被复制到 to 区；</p><p><strong>3、</strong> 移动一次，对象年龄加 1，对象年龄大于一定阀值会直接移动到老年代</p><p><strong>4、</strong> Survivor 区相同年龄所有对象大小的总和 (Survivor 区内存大小 * 这个目标使用率)时，大于或等于该年龄的对象直接进入老年代。其中这个使用率通过 -XX:TargetSurvivorRatio 指定，默认为 50%</p><p><strong>5、</strong> Survivor 区内存不足会发生担保分配</p><p><strong>6、</strong> 超过指定大小的对象可以直接进入老年代</p><p>Major GC，指的是老年代的垃圾清理，但并未找到明确说明何时在进行Major GC</p><p>FullGC，整个堆的垃圾收集，触发条件：</p><p><strong>1、</strong> 每次晋升到老年代的对象平均大小&gt;老年代剩余空间</p><p><strong>2、</strong> MinorGC后存活的对象超过了老年代剩余空间</p><p><strong>3、</strong> 元空间不足</p><p><strong>4、</strong> System.gc() 可能会引起</p><p><strong>5、</strong> CMS GC异常，promotion failed:MinorGC时，survivor空间放不下，对象只能放入老年代，而老年代也放不下造成；concurrent mode failure:GC时，同时有对象要放入老年代，而老年代空间不足造成</p><p><strong>6、</strong> 堆内存分配很大的对象</p><h3 id="_10、jvm-运行时内存" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10jvm-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98" target="_blank" rel="noreferrer">10、JVM 运行时内存</a> <a class="header-anchor" href="#_10、jvm-运行时内存" aria-label="Permalink to &quot;[10、JVM 运行时内存](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题及答案附答案汇总.md#10jvm-运行时内存)&quot;">​</a></h3><p>Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、 From Survivor 区和 To Survivor 区)和老年代。</p><p><strong>新生代</strong></p><p>是用来存放新生的对象。一般占据堆的 1/3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC 进行垃圾回收。新生代又分为 Eden区、 ServivorFrom、 ServivorTo 三个区。</p><p><strong>Eden 区</strong></p><p>Java 新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当 Eden 区内存不够的时候就会触发 MinorGC，对新生代区进行一次垃圾回收。</p><p><strong>ServivorFrom</strong></p><p>上一次 GC 的幸存者，作为这一次 GC 的被扫描者。</p><p><strong>ServivorTo</strong></p><p>保留了一次 MinorGC 过程中的幸存者。</p><p><strong>MinorGC 的过程（复制-&gt;清空-&gt;互换）</strong></p><p>MinorGC 采用复制算法。</p><p><strong>eden、 servicorFrom 复制到 ServicorTo，年龄+1</strong></p><p>首先，把 Eden 和 ServivorFrom 区域中存活的对象复制到 ServicorTo 区域（如果有对象的年龄以及达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果 ServicorTo 不够位置了就放到老年区）；</p><p><strong>清空 eden、 servicorFrom</strong></p><p>然后，清空 Eden 和 ServicorFrom 中的对象；</p><p><strong>ServicorTo 和 ServicorFrom 互换</strong></p><p>最后， ServicorTo 和 ServicorFrom 互换，原 ServicorTo 成为下一次 GC 时的 ServicorFrom区。</p><h3 id="_11、说说-jvm-如何执行-class-中的字节码。" tabindex="-1">11、说说 JVM 如何执行 class 中的字节码。 <a class="header-anchor" href="#_11、说说-jvm-如何执行-class-中的字节码。" aria-label="Permalink to &quot;11、说说 JVM 如何执行 class 中的字节码。&quot;">​</a></h3><h3 id="_12、运行时栈帧包含哪些结构" tabindex="-1">12、运行时栈帧包含哪些结构？ <a class="header-anchor" href="#_12、运行时栈帧包含哪些结构" aria-label="Permalink to &quot;12、运行时栈帧包含哪些结构？&quot;">​</a></h3><h3 id="_13、调优工具" tabindex="-1">13、调优工具 <a class="header-anchor" href="#_13、调优工具" aria-label="Permalink to &quot;13、调优工具&quot;">​</a></h3><h3 id="_14、你了解过哪些垃圾收集器" tabindex="-1">14、你了解过哪些垃圾收集器？ <a class="header-anchor" href="#_14、你了解过哪些垃圾收集器" aria-label="Permalink to &quot;14、你了解过哪些垃圾收集器？&quot;">​</a></h3><h3 id="_15、jvm-出现-fullgc-很频繁-怎么去线上排查问题" tabindex="-1">15、JVM 出现 fullGC 很频繁，怎么去线上排查问题 <a class="header-anchor" href="#_15、jvm-出现-fullgc-很频繁-怎么去线上排查问题" aria-label="Permalink to &quot;15、JVM 出现 fullGC 很频繁，怎么去线上排查问题&quot;">​</a></h3><h3 id="_16、你有哪些手段来排查-oom-的问题" tabindex="-1">16、你有哪些手段来排查 OOM 的问题？ <a class="header-anchor" href="#_16、你有哪些手段来排查-oom-的问题" aria-label="Permalink to &quot;16、你有哪些手段来排查 OOM 的问题？&quot;">​</a></h3><h3 id="_17、32、volatile关键字的原理是什么-干什么用的" tabindex="-1">17、32、volatile关键字的原理是什么？干什么用的？ <a class="header-anchor" href="#_17、32、volatile关键字的原理是什么-干什么用的" aria-label="Permalink to &quot;17、32、volatile关键字的原理是什么？干什么用的？&quot;">​</a></h3><h3 id="_18、创建对象的过程是什么" tabindex="-1">18、创建对象的过程是什么？ <a class="header-anchor" href="#_18、创建对象的过程是什么" aria-label="Permalink to &quot;18、创建对象的过程是什么？&quot;">​</a></h3><h3 id="_19、怎么打破双亲委派模型" tabindex="-1">19、怎么打破双亲委派模型？ <a class="header-anchor" href="#_19、怎么打破双亲委派模型" aria-label="Permalink to &quot;19、怎么打破双亲委派模型？&quot;">​</a></h3><h3 id="_20、jvm-的内存模型以及分区情况和作用" tabindex="-1">20、JVM 的内存模型以及分区情况和作用 <a class="header-anchor" href="#_20、jvm-的内存模型以及分区情况和作用" aria-label="Permalink to &quot;20、JVM 的内存模型以及分区情况和作用&quot;">​</a></h3><h3 id="_21、什么是java虚拟机-为什么java被称作是-平台无关的编程语言" tabindex="-1">21、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？ <a class="header-anchor" href="#_21、什么是java虚拟机-为什么java被称作是-平台无关的编程语言" aria-label="Permalink to &quot;21、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&quot;">​</a></h3><h3 id="_22、什么是happen-before原则" tabindex="-1">22、什么是happen-before原则？ <a class="header-anchor" href="#_22、什么是happen-before原则" aria-label="Permalink to &quot;22、什么是happen-before原则？&quot;">​</a></h3><h3 id="_23、什么情况会造成元空间溢出" tabindex="-1">23、什么情况会造成元空间溢出？ <a class="header-anchor" href="#_23、什么情况会造成元空间溢出" aria-label="Permalink to &quot;23、什么情况会造成元空间溢出？&quot;">​</a></h3><h3 id="_24、谈谈对-oom-的认识" tabindex="-1">24、谈谈对 OOM 的认识 <a class="header-anchor" href="#_24、谈谈对-oom-的认识" aria-label="Permalink to &quot;24、谈谈对 OOM 的认识&quot;">​</a></h3><h3 id="_25、请你谈谈对oom的认识" tabindex="-1">25、请你谈谈对OOM的认识 <a class="header-anchor" href="#_25、请你谈谈对oom的认识" aria-label="Permalink to &quot;25、请你谈谈对OOM的认识&quot;">​</a></h3><h3 id="_26、生产上如何配置垃圾收集器的" tabindex="-1">26、生产上如何配置垃圾收集器的？ <a class="header-anchor" href="#_26、生产上如何配置垃圾收集器的" aria-label="Permalink to &quot;26、生产上如何配置垃圾收集器的？&quot;">​</a></h3><h3 id="_27、java-的引用有哪些类型" tabindex="-1">27、Java 的引用有哪些类型？ <a class="header-anchor" href="#_27、java-的引用有哪些类型" aria-label="Permalink to &quot;27、Java 的引用有哪些类型？&quot;">​</a></h3><h3 id="_28、什么情况下会发生栈溢出" tabindex="-1">28、什么情况下会发生栈溢出？ <a class="header-anchor" href="#_28、什么情况下会发生栈溢出" aria-label="Permalink to &quot;28、什么情况下会发生栈溢出？&quot;">​</a></h3><h3 id="_29、对象分配规则" tabindex="-1">29、对象分配规则 <a class="header-anchor" href="#_29、对象分配规则" aria-label="Permalink to &quot;29、对象分配规则&quot;">​</a></h3><h3 id="_30、如何判断一个对象是否存活" tabindex="-1">30、如何判断一个对象是否存活 <a class="header-anchor" href="#_30、如何判断一个对象是否存活" aria-label="Permalink to &quot;30、如何判断一个对象是否存活&quot;">​</a></h3>',95),s=[n];function E(i,l,m,h,p,d){return e(),o("div",null,s)}const u=a(t,[["render",E]]);export{c as __pageData,u as default};
