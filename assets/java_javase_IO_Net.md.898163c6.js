import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"Java Net","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/IO/Net.md","filePath":"java/javase/IO/Net.md"}'),p={name:"java/javase/IO/Net.md"},o=l(`<h1 id="java-net" tabindex="-1">Java Net <a class="header-anchor" href="#java-net" aria-label="Permalink to &quot;Java Net&quot;">​</a></h1><p>java.net 文件夹内提供了 Java 程序中网络通信使用的类，使用时需要进行导入。</p><hr><h2 id="http通信" tabindex="-1">HTTP通信 <a class="header-anchor" href="#http通信" aria-label="Permalink to &quot;HTTP通信&quot;">​</a></h2><h3 id="url-类" tabindex="-1">URL 类 <a class="header-anchor" href="#url-类" aria-label="Permalink to &quot;URL 类&quot;">​</a></h3><ul><li><p><strong>URL 类</strong>：用于定向资源所在位置，资源由 URLConnection 类读取。</p></li><li><p><strong>URLConnection 类</strong>：用于读取和写入 URL 类定向的资源，在 HTTP 通信中常用 HttpURLConnection 子类。</p></li></ul><p>在 HTTP 通信中通常需要执行以下五个过程。</p><ol><li>创建连接对象。</li><li>设置连接参数和请求属性。</li><li>建立连接，输出流发送请求。</li><li>输入流读取返回内容。</li><li>关闭连接。</li></ol><h3 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to &quot;执行过程&quot;">​</a></h3><h4 id="创建连接" tabindex="-1">创建连接 <a class="header-anchor" href="#创建连接" aria-label="Permalink to &quot;创建连接&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建 URL 对象，如果 url 格式错误则抛出 IOException</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">URL</span><span style="color:#F6F6F4;"> myUrl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URL</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://www.baidu.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                   </span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建 URLConnection 对象，读取 URL 资源</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">HttpURLConnection</span><span style="color:#F6F6F4;"> myCon </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (HttpURLConnection)myUrl.</span><span style="color:#62E884;">openConnetcion</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建 URL 对象，如果 url 格式错误则抛出 IOException</span></span>
<span class="line"><span style="color:#24292E;">URL myUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://www.baidu.com&quot;</span><span style="color:#24292E;">);                   </span></span>
<span class="line"><span style="color:#6A737D;">// 创建 URLConnection 对象，读取 URL 资源</span></span>
<span class="line"><span style="color:#24292E;">HttpURLConnection myCon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpURLConnection)myUrl.</span><span style="color:#6F42C1;">openConnetcion</span><span style="color:#24292E;">();</span></span></code></pre></div><h4 id="配置连接" tabindex="-1">配置连接 <a class="header-anchor" href="#配置连接" aria-label="Permalink to &quot;配置连接&quot;">​</a></h4><p><strong>设置连接参数</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 设置连接方法，默认使用 GET</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setDoInput</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);                       </span><span style="color:#7B7F8B;">// （默认）允许进行字符流输入，执行 read 操作</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setDoOutput</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);                      </span><span style="color:#7B7F8B;">// （默认）允许进行字符流输出，执行 write 操作</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setUseCaches</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);                    </span><span style="color:#7B7F8B;">// 设置是否使用缓存</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setConnectTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 设置最长建立连接时间，超时抛出 SocketTimeoutException</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setReadTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 设置最长数据读取时间，超时抛出 SocketTimeoutException</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 设置连接方法，默认使用 GET</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setDoInput</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);                       </span><span style="color:#6A737D;">// （默认）允许进行字符流输入，执行 read 操作</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setDoOutput</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);                      </span><span style="color:#6A737D;">// （默认）允许进行字符流输出，执行 write 操作</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setUseCaches</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);                    </span><span style="color:#6A737D;">// 设置是否使用缓存</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setConnectTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 设置最长建立连接时间，超时抛出 SocketTimeoutException</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setReadTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 设置最长数据读取时间，超时抛出 SocketTimeoutException</span></span></code></pre></div><p><strong>设置请求属性</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 设置版本</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">version</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.2.3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span></span>
<span class="line"><span style="color:#7B7F8B;">// 设置浏览器类型（用于爬虫伪装）</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user-agent</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Mozilla/5.0 (compatible;  Windows NT 5.1;SV1)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 设置发送文本类型</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-Type</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">application/json;charset=utf-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置版本</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;version&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;1.2.3&quot;</span><span style="color:#24292E;">);         </span></span>
<span class="line"><span style="color:#6A737D;">// 设置浏览器类型（用于爬虫伪装）</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Mozilla/5.0 (compatible;  Windows NT 5.1;SV1)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 设置发送文本类型</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json;charset=utf-8&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="连接-发送请求" tabindex="-1">连接 &amp; 发送请求 <a class="header-anchor" href="#连接-发送请求" aria-label="Permalink to &quot;连接 &amp; 发送请求&quot;">​</a></h4><p>连接和发送请求有两种方式：</p><ol><li>调用 connect 方法，直接建立连接并发送请求。</li><li>调用 getOutputStream 方法，在输出流中写入数据，在关闭输出流时自动建立连接并发送输出流请求。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">OutputStreamWriter</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStreamWriter</span><span style="color:#F6F6F4;">(myCon.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(str);            </span><span style="color:#7B7F8B;">// 写入数据      </span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();               </span><span style="color:#7B7F8B;">// 建立连接并发送请求</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">OutputStreamWriter out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStreamWriter</span><span style="color:#24292E;">(myCon.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(str);            </span><span style="color:#6A737D;">// 写入数据      </span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();               </span><span style="color:#6A737D;">// 建立连接并发送请求</span></span></code></pre></div><h4 id="获取响应数据" tabindex="-1">获取响应数据 <a class="header-anchor" href="#获取响应数据" aria-label="Permalink to &quot;获取响应数据&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> code </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> myCon.</span><span style="color:#62E884;">getResponseCode</span><span style="color:#F6F6F4;">();            </span><span style="color:#7B7F8B;">// 获取响应码</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> myCon.</span><span style="color:#62E884;">getHeaderField</span><span style="color:#F6F6F4;">();          </span><span style="color:#7B7F8B;">// 获取响应头字段</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myCon.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">();            </span><span style="color:#6A737D;">// 获取响应码</span></span>
<span class="line"><span style="color:#24292E;">String head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myCon.</span><span style="color:#6F42C1;">getHeaderField</span><span style="color:#24292E;">();          </span><span style="color:#6A737D;">// 获取响应头字段</span></span></code></pre></div><p>获取响应体数据有两种方式：</p><ol><li>调用 getContent 方法，直接获取响应内容。</li><li>调用 getInputStream 方法，通过输入流获取响应内容。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(myCon.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">in.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭连接</span></span>
<span class="line"><span style="color:#F6F6F4;">myCon.</span><span style="color:#62E884;">disconnect</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BufferedReader in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(myCon.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">in.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 关闭连接</span></span>
<span class="line"><span style="color:#24292E;">myCon.</span><span style="color:#6F42C1;">disconnect</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="使用范例" tabindex="-1">使用范例 <a class="header-anchor" href="#使用范例" aria-label="Permalink to &quot;使用范例&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//示例：网络爬虫</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WebCrawler</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getHttpJson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//配置URL</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">URL</span><span style="color:#F6F6F4;"> myUrl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URL</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://static-data.eol.cn/www/school/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/info.json</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//配置连接</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">HttpURLConnection</span><span style="color:#F6F6F4;"> myCon </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (HttpURLConnection) myUrl.</span><span style="color:#62E884;">openConnection</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">setRequestProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user-agent</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">setConnectTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">setReadTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//建立连接</span></span>
<span class="line"><span style="color:#F6F6F4;">            myCon.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//如果连接成功</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (myCon.</span><span style="color:#62E884;">getResponseCode</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的数据读取成功，数据内容：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//读取返回数据</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> myCon.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> cnt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">available</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[cnt];</span></span>
<span class="line"><span style="color:#F6F6F4;">                in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//输出返回数据</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的数据读取失败，代码：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> myCon.</span><span style="color:#62E884;">getResponseCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">MalformedURLException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">URL错误，无法查找到资源。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">SocketTimeoutException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">的数据访问连接超时。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">发送的请求存在错误，资源拒绝访问。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//示例：网络爬虫</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebCrawler</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getHttpJson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//配置URL</span></span>
<span class="line"><span style="color:#24292E;">            URL myUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;https://static-data.eol.cn/www/school/&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/info.json&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//配置连接</span></span>
<span class="line"><span style="color:#24292E;">            HttpURLConnection myCon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (HttpURLConnection) myUrl.</span><span style="color:#6F42C1;">openConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">setRequestProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user-agent&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">setConnectTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">setReadTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//建立连接</span></span>
<span class="line"><span style="color:#24292E;">            myCon.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//如果连接成功</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (myCon.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的数据读取成功，数据内容：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//读取返回数据</span></span>
<span class="line"><span style="color:#24292E;">                InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> myCon.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> cnt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">available</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[cnt];</span></span>
<span class="line"><span style="color:#24292E;">                in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">                String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//输出返回数据</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">            }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的数据读取失败，代码：&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> myCon.</span><span style="color:#6F42C1;">getResponseCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (MalformedURLException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;URL错误，无法查找到资源。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(SocketTimeoutException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;的数据访问连接超时。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;发送的请求存在错误，资源拒绝访问。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="tcp通信" tabindex="-1">TCP通信 <a class="header-anchor" href="#tcp通信" aria-label="Permalink to &quot;TCP通信&quot;">​</a></h2><h3 id="socket-类" tabindex="-1">Socket 类 <a class="header-anchor" href="#socket-类" aria-label="Permalink to &quot;Socket 类&quot;">​</a></h3><ul><li><strong>Socket 类</strong>：通过套接字指向对方通信位置，用于建立 TCP 连接。</li><li><strong>ServerSocket 类</strong>：在服务器建立，绑定自身的端口号用于监听是否有用户请求。</li></ul><p><strong>服务器端</strong></p><ol><li>创建 ServerSocket 对象，绑定监听端口监听客户端请求。</li><li>接收到客户端请求后，创建 Socket 与该客户建立专线连接。</li><li>双方通过输入输出流进行对话。</li><li>关闭流和套接字，继续等待新的连接。</li></ol><p><strong>客户端</strong></p><ol><li>创建 Socket 对象，指明需要连接的服务器地址和端口号。</li><li>连接建立后，通过输出流向服务器发送请求信息。</li><li>双方通过输入输出流进行对话。</li><li>关闭流和套接字。</li></ol><h3 id="执行过程-1" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程-1" aria-label="Permalink to &quot;执行过程&quot;">​</a></h3><h4 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 客户端</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Socket</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">55533</span><span style="color:#F6F6F4;">);     </span><span style="color:#7B7F8B;">// 创建 Socket 对象指向服务器</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 服务器</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> server </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">55533</span><span style="color:#F6F6F4;">);      </span><span style="color:#7B7F8B;">// 创建 ServerSocket 对象监听接口</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> server.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();                </span><span style="color:#7B7F8B;">// 阻塞进程，直到接收到客户端请求返回 Socket 对象</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 客户端</span></span>
<span class="line"><span style="color:#24292E;">Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Socket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55533</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// 创建 Socket 对象指向服务器</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 服务器</span></span>
<span class="line"><span style="color:#24292E;">ServerSocket server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">55533</span><span style="color:#24292E;">);      </span><span style="color:#6A737D;">// 创建 ServerSocket 对象监听接口</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();                </span><span style="color:#6A737D;">// 阻塞进程，直到接收到客户端请求返回 Socket 对象</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="进行对话" tabindex="-1">进行对话 <a class="header-anchor" href="#进行对话" aria-label="Permalink to &quot;进行对话&quot;">​</a></h4><p>输出流负责输出信息，在另一端输入流将得到输入。失败则抛出 IOException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//打开输出流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">//输出信息（字节流）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(message.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">end</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">//关闭输出流</span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//打开输出流</span></span>
<span class="line"><span style="color:#24292E;">OutputStream out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//输出信息（字节流）</span></span>
<span class="line"><span style="color:#24292E;">String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(message.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">//关闭输出流</span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>输入流负责输入信息，得到另一端输出流信息。失败则抛出 IOException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//打开输入流（转化为字节流被缓冲流读取）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(),</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#7B7F8B;">//输入信息(接收到end字符则结束)</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">end</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(str)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  message.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(str);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">get message: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> message);</span></span>
<span class="line"><span style="color:#7B7F8B;">//关闭输入流</span></span>
<span class="line"><span style="color:#F6F6F4;">in.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//socket.shutdownOutput();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//打开输入流（转化为字节流被缓冲流读取）</span></span>
<span class="line"><span style="color:#24292E;">BufferedReader in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(),</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//输入信息(接收到end字符则结束)</span></span>
<span class="line"><span style="color:#24292E;">StringBuilder message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(str)) {</span></span>
<span class="line"><span style="color:#24292E;">  message.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get message: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message);</span></span>
<span class="line"><span style="color:#6A737D;">//关闭输入流</span></span>
<span class="line"><span style="color:#24292E;">in.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//socket.shutdownOutput();</span></span></code></pre></div><h3 id="使用范例-1" tabindex="-1">使用范例 <a class="header-anchor" href="#使用范例-1" aria-label="Permalink to &quot;使用范例&quot;">​</a></h3><ul><li><strong>客户端</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SocketClient</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">[]) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//与本地服务器端建立连接</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> host </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> port </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">55533</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Socket</span><span style="color:#F6F6F4;">(host, port);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//控制台输入并向服务器端输出</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> bufferedReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(System.in, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));      </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bufferedWriter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStreamWriter</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">()));         </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (str </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">end</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bufferedReader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      bufferedWriter.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(str </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">      bufferedWriter.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//关闭连接</span></span>
<span class="line"><span style="color:#F6F6F4;">    outputStream.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SocketClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">args</span><span style="color:#24292E;">[]) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//与本地服务器端建立连接</span></span>
<span class="line"><span style="color:#24292E;">    String host </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">55533</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Socket</span><span style="color:#24292E;">(host, port);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//控制台输入并向服务器端输出</span></span>
<span class="line"><span style="color:#24292E;">    BufferedReader bufferedReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(System.in, </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">));      </span></span>
<span class="line"><span style="color:#24292E;">    BufferedWriter bufferedWriter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStreamWriter</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">()));         </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (str </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bufferedReader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      bufferedWriter.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      bufferedWriter.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//关闭连接</span></span>
<span class="line"><span style="color:#24292E;">    outputStream.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>服务器端</strong></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SocketServer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 监听指定的端口</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> port </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">55533</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> server </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(port);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//循环等待请求</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//建立连接</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> server.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//从socket中获取输入流并读取</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> bufferedReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str;，</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bufferedReader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">get message from client:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> str);</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//关闭连接</span></span>
<span class="line"><span style="color:#F6F6F4;">      inputStream.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SocketServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 监听指定的端口</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">55533</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    ServerSocket server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(port);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//循环等待请求</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//建立连接</span></span>
<span class="line"><span style="color:#24292E;">      Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//从socket中获取输入流并读取</span></span>
<span class="line"><span style="color:#24292E;">      BufferedReader bufferedReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">      String str;，</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bufferedReader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get message from client:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//关闭连接</span></span>
<span class="line"><span style="color:#24292E;">      inputStream.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h4><p>服务器端可以通过多线程实现伪异步，每接受一个 Socket 请求，就创建一个线程来处理它。防止程序被一个请求阻塞。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//服务器端（线程池管理）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SocketServer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 监听指定的端口</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> port </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">55533</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> server </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(port);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//创建一个线程池</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> executorService </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//循环等待请求</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//建立连接</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> serverSocket.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//分配线程</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> runnable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> bufferedReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//从socket中获取输入流并读取</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    bufferedReader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bufferedReader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">get message from client:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> str);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            };</span></span>
<span class="line"><span style="color:#F6F6F4;">            executorService.</span><span style="color:#62E884;">submit</span><span style="color:#F6F6F4;">(runnable);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//服务器端（线程池管理）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SocketServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 监听指定的端口</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> port </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">55533</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ServerSocket server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(port);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建一个线程池</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//循环等待请求</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//建立连接</span></span>
<span class="line"><span style="color:#24292E;">            Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverSocket.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//分配线程</span></span>
<span class="line"><span style="color:#24292E;">            Runnable runnable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                BufferedReader bufferedReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//从socket中获取输入流并读取</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    bufferedReader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                    String str;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bufferedReader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;get message from client:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            };</span></span>
<span class="line"><span style="color:#24292E;">            executorService.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(runnable);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="流输入输出" tabindex="-1">流输入输出 <a class="header-anchor" href="#流输入输出" aria-label="Permalink to &quot;流输入输出&quot;">​</a></h4><p>在实际应用中，我们通过是采用数据长度+类型+数据的方式来告知一次流输入完成，方便进行后续操作。</p><p><a href="https://blog.csdn.net/qq_33865313/article/details/79363640" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_33865313/article/details/79363640</a></p><p><a href="https://www.cnblogs.com/huanzi-qch/p/9889521.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/huanzi-qch/p/9889521.html</a></p><h3 id="websocket-类" tabindex="-1">WebSocket 类 <a class="header-anchor" href="#websocket-类" aria-label="Permalink to &quot;WebSocket 类&quot;">​</a></h3><p>Socket 消息推送机制中，用的都是 Ajax 轮询。在特定的时间间隔由客户端自动发出请求，将服务器的消息主动拉回来（服务器启动一个线程去监听与此客户端的通信），这种方式是非常消耗资源的，因为它本质还是 http 请求，而且显得非常笨拙：服务端不能主动向客户端推送数据。</p><p><code>import javax.websocket.*;</code></p><p>WebSocket 在浏览器和服务器完成一个握手的动作，在建立连接之后，服务器可以主动传送数据给客户端，客户端也可以随时向服务器发送数据。多客户端、涉及有界面的聊天建议使用websocket（嵌入到了浏览器的内核中）。</p><p><a href="https://www.cnblogs.com/interdrp/p/7903736.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/interdrp/p/7903736.html</a></p><p><strong>Spring框架</strong></p><p>服务端：</p><p>1、添加Jar包依赖：</p><p>2、创建一个WebSocket服务端类，并添加@ServerEndpoint(value = &quot;/websocket&quot;)注解 表示将 WebSocket 服务端运行在 ws://[Server 端 IP 或域名]:[Server 端口]/项目名/websocket 的访问端点</p><p>3、实现onOpen、onClose、onMessage、onError等方法</p><p>客户端</p><p>1、添加Jar包依赖：</p><p>2、创建WebSocket客户端类并继承WebSocketClient</p><p>3、实现构造器，重写onOpen、onClose、onMessage、onError等方法</p><p><strong>Maven依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;javax.websocket&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;javax.websocket-api&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;1.1&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">scope</span><span style="color:#F6F6F4;">&gt;provided&lt;/</span><span style="color:#F286C4;">scope</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;javax&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;javaee-api&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;7.0&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">scope</span><span style="color:#F6F6F4;">&gt;provided&lt;/</span><span style="color:#F286C4;">scope</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;javax.websocket&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;javax.websocket-api&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;provided&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;javax&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;javaee-api&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;7.0&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;provided&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>服务器定义WebSocket类</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ServerEndpoint</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/websocket/{username}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)  </span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WebSocket</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> onlineCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, WebSocket&gt; clients </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ConcurrentHashMap</span><span style="color:#F6F6F4;">&lt;String, WebSocket&gt;();  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Session</span><span style="color:#F6F6F4;"> session;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username;  </span></span>
<span class="line"><span style="color:#F6F6F4;">      </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">OnOpen</span><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onOpen</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">PathParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">username</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Session</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">session</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> username;  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.session </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> session;  </span></span>
<span class="line"><span style="color:#F6F6F4;">          </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">addOnlineCount</span><span style="color:#F6F6F4;">();  </span></span>
<span class="line"><span style="color:#F6F6F4;">        clients.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(username, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">已连接</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">OnClose</span><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onClose</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        clients.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(username);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">subOnlineCount</span><span style="color:#F6F6F4;">();  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">OnMessage</span><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onMessage</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">JSONObject</span><span style="color:#F6F6F4;"> jsonTo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> JSONObject.</span><span style="color:#62E884;">fromObject</span><span style="color:#F6F6F4;">(message);  </span></span>
<span class="line"><span style="color:#F6F6F4;">          </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">jsonTo.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">To</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">All</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)){  </span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">sendMessageTo</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">给一个人</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, jsonTo.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">To</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());  </span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">{  </span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">sendMessageAll</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">给所有人</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        }  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">OnError</span><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onError</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Session</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">session</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">error</span><span style="color:#F6F6F4;">) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        error.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sendMessageTo</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">To</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// session.getBasicRemote().sendText(message);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//session.getAsyncRemote().sendText(message);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">WebSocket</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> clients.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">()) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (item.username.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(To) )  </span></span>
<span class="line"><span style="color:#F6F6F4;">                item.session.</span><span style="color:#62E884;">getAsyncRemote</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sendText</span><span style="color:#F6F6F4;">(message);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        }  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">      </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sendMessageAll</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">message</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">WebSocket</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> clients.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">()) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">            item.session.</span><span style="color:#62E884;">getAsyncRemote</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">sendText</span><span style="color:#F6F6F4;">(message);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        }  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">          </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getOnlineCount</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> onlineCount;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addOnlineCount</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        WebSocket.onlineCount</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">subOnlineCount</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        WebSocket.onlineCount</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, WebSocket&gt; </span><span style="color:#62E884;">getClients</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> clients;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    }  </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ServerEndpoint</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/websocket/{username}&quot;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSocket</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> onlineCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">WebSocket</span><span style="color:#24292E;">&gt; clients </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ConcurrentHashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">WebSocket</span><span style="color:#24292E;">&gt;();  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Session session;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String username;  </span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">OnOpen</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onOpen</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">) String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, Session </span><span style="color:#E36209;">session</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> username;  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> session;  </span></span>
<span class="line"><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addOnlineCount</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">        clients.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(username, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;已连接&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">OnClose</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClose</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {  </span></span>
<span class="line"><span style="color:#24292E;">        clients.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(username);  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">subOnlineCount</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">OnMessage</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onMessage</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">        JSONObject jsonTo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSONObject.</span><span style="color:#6F42C1;">fromObject</span><span style="color:#24292E;">(message);  </span></span>
<span class="line"><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">jsonTo.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;To&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;All&quot;</span><span style="color:#24292E;">)){  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">sendMessageTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;给一个人&quot;</span><span style="color:#24292E;">, jsonTo.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;To&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());  </span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">sendMessageAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;给所有人&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">OnError</span><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onError</span><span style="color:#24292E;">(Session </span><span style="color:#E36209;">session</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">error</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">        error.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendMessageTo</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">To</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// session.getBasicRemote().sendText(message);  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//session.getAsyncRemote().sendText(message);  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (WebSocket item </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> clients.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {  </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item.username.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(To) )  </span></span>
<span class="line"><span style="color:#24292E;">                item.session.</span><span style="color:#6F42C1;">getAsyncRemote</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sendText</span><span style="color:#24292E;">(message);  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">      </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendMessageAll</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (WebSocket item </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> clients.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">()) {  </span></span>
<span class="line"><span style="color:#24292E;">            item.session.</span><span style="color:#6F42C1;">getAsyncRemote</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">sendText</span><span style="color:#24292E;">(message);  </span></span>
<span class="line"><span style="color:#24292E;">        }  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOnlineCount</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> onlineCount;  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addOnlineCount</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">        WebSocket.onlineCount</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">subOnlineCount</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">        WebSocket.onlineCount</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">WebSocket</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getClients</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> clients;  </span></span>
<span class="line"><span style="color:#24292E;">    }  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>客户端在JavaScript中调用即可</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> websocket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;  </span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> localStorage.</span><span style="color:#62E884;">getItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//判断当前浏览器是否支持WebSocket  </span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">WebSocket</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> window) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    websocket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WebSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ws://</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> document.location.host </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/WebChat/websocket/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> _img);  </span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">当前浏览器 Not support websocket</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)  </span></span>
<span class="line"><span style="color:#F6F6F4;">}  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//连接发生错误的回调方法  </span></span>
<span class="line"><span style="color:#F6F6F4;">websocket.</span><span style="color:#62E884;">onerror</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setMessageInnerHTML</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">WebSocket连接发生错误</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">};  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//连接成功建立的回调方法  </span></span>
<span class="line"><span style="color:#F6F6F4;">websocket.</span><span style="color:#62E884;">onopen</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setMessageInnerHTML</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">WebSocket连接成功</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">}  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//接收到消息的回调方法  </span></span>
<span class="line"><span style="color:#F6F6F4;">websocket.</span><span style="color:#62E884;">onmessage</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">event</span><span style="color:#F6F6F4;">) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setMessageInnerHTML</span><span style="color:#F6F6F4;">(event.data);  </span></span>
<span class="line"><span style="color:#F6F6F4;">}  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//连接关闭的回调方法  </span></span>
<span class="line"><span style="color:#F6F6F4;">websocket.</span><span style="color:#62E884;">onclose</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setMessageInnerHTML</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">WebSocket连接关闭</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">}  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。  </span></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">onbeforeunload</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">closeWebSocket</span><span style="color:#F6F6F4;">();  </span></span>
<span class="line"><span style="color:#F6F6F4;">}  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#7B7F8B;">//关闭WebSocket连接  </span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">closeWebSocket</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    websocket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();  </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> websocket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;  </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//判断当前浏览器是否支持WebSocket  </span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;WebSocket&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> window) {  </span></span>
<span class="line"><span style="color:#24292E;">    websocket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSocket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ws://&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> document.location.host </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/WebChat/websocket/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> _img);  </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;当前浏览器 Not support websocket&#39;</span><span style="color:#24292E;">)  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//连接发生错误的回调方法  </span></span>
<span class="line"><span style="color:#24292E;">websocket.</span><span style="color:#6F42C1;">onerror</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setMessageInnerHTML</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;WebSocket连接发生错误&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">};  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//连接成功建立的回调方法  </span></span>
<span class="line"><span style="color:#24292E;">websocket.</span><span style="color:#6F42C1;">onopen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setMessageInnerHTML</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;WebSocket连接成功&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//接收到消息的回调方法  </span></span>
<span class="line"><span style="color:#24292E;">websocket.</span><span style="color:#6F42C1;">onmessage</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setMessageInnerHTML</span><span style="color:#24292E;">(event.data);  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//连接关闭的回调方法  </span></span>
<span class="line"><span style="color:#24292E;">websocket.</span><span style="color:#6F42C1;">onclose</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setMessageInnerHTML</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;WebSocket连接关闭&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。  </span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">onbeforeunload</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">closeWebSocket</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#6A737D;">//关闭WebSocket连接  </span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">closeWebSocket</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">    websocket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>发送消息只需要使用websocket.send(&quot;发送消息&quot;)，就可以触发服务端的onMessage()方法，当连接时，触发服务器端onOpen()方法，此时也可以调用发送消息的方法去发送消息。关闭websocket时，触发服务器端onclose()方法，此时也可以发送消息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">WebSocket</span><span style="color:#F6F6F4;"> ws </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WebSocket</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">JSONObject</span><span style="color:#F6F6F4;"> jo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">JSONObject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">jo.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">这是后台返回的消息！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">jo.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">To</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,invIO.</span><span style="color:#62E884;">getIoEmployeeUid</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">ws.</span><span style="color:#62E884;">onMessage</span><span style="color:#F6F6F4;">(jo.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">WebSocket ws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSocket</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">JSONObject jo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JSONObject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">jo.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;这是后台返回的消息！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">jo.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;To&quot;</span><span style="color:#24292E;">,invIO.</span><span style="color:#6F42C1;">getIoEmployeeUid</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">ws.</span><span style="color:#6F42C1;">onMessage</span><span style="color:#24292E;">(jo.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">　　</span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">arg0</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">　　　　</span><span style="color:#97E1F1;font-style:italic;">MyWebSocketClient</span><span style="color:#F6F6F4;"> myClient </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyWebSocketClient</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">此处为websocket服务端URI</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">　　　　</span><span style="color:#7B7F8B;">// 往websocket服务端发送数据</span></span>
<span class="line"><span style="color:#F6F6F4;">　　　　myClient.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">此为要发送的数据内容</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">　　}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyTest</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">　　</span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">arg0</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">　　　　MyWebSocketClient myClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyWebSocketClient</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;此处为websocket服务端URI&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">　　　　</span><span style="color:#6A737D;">// 往websocket服务端发送数据</span></span>
<span class="line"><span style="color:#24292E;">　　　　myClient.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;此为要发送的数据内容&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">　　}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,78),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
