import{_ as a,o as s,c as e,V as n}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/rabbitmq/rabbitmq-04.md","filePath":"interview/backend/rabbitmq/rabbitmq-04.md"}'),t={name:"interview/backend/rabbitmq/rabbitmq-04.md"},o=n(`<h3 id="_1、死信队列和延迟队列的使用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97%E5%92%8C%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">1、死信队列和延迟队列的使用?</a> <a class="header-anchor" href="#_1、死信队列和延迟队列的使用" aria-label="Permalink to &quot;[1、死信队列和延迟队列的使用?](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#1死信队列和延迟队列的使用)&quot;">​</a></h3><p><strong>1、</strong> 死信消息：消息被拒绝（Basic.Reject或Basic.Nack）并且设置 requeue 参数的值为 false 消息过期了 队列达到最大的长度</p><p><strong>2、</strong> 过期消息：在 rabbitmq 中存在2种方可设置消息的过期时间，第一种通过对队列进行设置，这种设置后，该队列中所有的消息都存在相同的过期时间，第二种通过对消息本身进行设置，那么每条消息的过期时间都不一样。如果同时使用这2种方法，那么以过期时间小的那个数值为准。当消息达到过期时间还没有被消费，那么那个消息就成为了一个 死信 消息。</p><p><strong>3、</strong> 队列设置：在队列申明的时候使用 x-message-ttl 参数，单位为 毫秒</p><p><strong>4、</strong> 单个消息设置：是设置消息属性的 expiration 参数的值，单位为 毫秒</p><p><strong>5、</strong> 延时队列：在rabbitmq中不存在延时队列，但是我们可以通过设置消息的过期时间和死信队列来模拟出延时队列。消费者监听死信交换器绑定的队列，而不要监听消息发送的队列。</p><p>场景演示：需求：用户在系统中创建一个订单，如果超过时间用户没有进行支付，那么自动取消订单。</p><p><strong>分析：</strong></p><p><strong>1、</strong> 上面这个情况，我们就适合使用延时队列来实现，那么延时队列如何创建</p><p><strong>2、</strong> 延时队列可以由 过期消息+死信队列 来时间</p><p><strong>3、</strong> 过期消息通过队列中设置 x-message-ttl 参数实现</p><p><strong>4、</strong> 死信队列通过在队列申明时，给队列设置 x-dead-letter-exchange 参数，然后另外申明一个队列绑定x-dead-letter-exchange对应的交换器。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">ConnectionFactory factory = new ConnectionFactory(); </span></span>
<span class="line"><span style="color:#f6f6f4;">factory.setHost(&quot;127.0.0.1&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">factory.setPort(AMQP.PROTOCOL.PORT); </span></span>
<span class="line"><span style="color:#f6f6f4;">factory.setUsername(&quot;guest&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">factory.setPassword(&quot;guest&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">Connection connection = factory.newConnection(); </span></span>
<span class="line"><span style="color:#f6f6f4;">Channel channel = connection.createChannel();</span></span>
<span class="line"><span style="color:#f6f6f4;">// </span></span>
<span class="line"><span style="color:#f6f6f4;">// 声明一个接收被删除的消息的交换机和队列 </span></span>
<span class="line"><span style="color:#f6f6f4;">String EXCHANGE_DEAD_NAME = &quot;exchange.dead&quot;; </span></span>
<span class="line"><span style="color:#f6f6f4;">String QUEUE_DEAD_NAME = &quot;queue_dead&quot;; </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.exchangeDeclare(EXCHANGE_DEAD_NAME, BuiltinExchangeType.DIRECT); </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.queueDeclare(QUEUE_DEAD_NAME, false, false, false, null); </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.queueBind(QUEUE_DEAD_NAME, EXCHANGE_DEAD_NAME, &quot;routingkey.dead&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">// </span></span>
<span class="line"><span style="color:#f6f6f4;">String EXCHANGE_NAME = &quot;exchange.fanout&quot;; </span></span>
<span class="line"><span style="color:#f6f6f4;">String QUEUE_NAME = &quot;queue_name&quot;; </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT); </span></span>
<span class="line"><span style="color:#f6f6f4;">Map&lt;String, Object&gt; arguments = new HashMap&lt;String, Object&gt;(); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 统一设置队列中的所有消息的过期时间 </span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-message-ttl&quot;, 30000); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 设置超过多少毫秒没有消费者来访问队列，就删除队列的时间 </span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-expires&quot;, 20000); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 设置队列的最新的N条消息，如果超过N条，前面的消息将从队列中移除掉 </span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-max-length&quot;, 4); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 设置队列的内容的最大空间，超过该阈值就删除之前的消息</span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-max-length-bytes&quot;, 1024); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 将删除的消息推送到指定的交换机，一般x-dead-letter-exchange和x-dead-letter-routing-key需要同时设置</span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-dead-letter-exchange&quot;, &quot;exchange.dead&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 将删除的消息推送到指定的交换机对应的路由键 </span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;routingkey.dead&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">// 设置消息的优先级，优先级大的优先被消费 </span></span>
<span class="line"><span style="color:#f6f6f4;">arguments.put(&quot;x-max-priority&quot;, 10); </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.queueDeclare(QUEUE_NAME, false, false, false, arguments); </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;">String message = &quot;Hello RabbitMQ: &quot;; </span></span>
<span class="line"><span style="color:#f6f6f4;">// </span></span>
<span class="line"><span style="color:#f6f6f4;">for(int i = 1; i &lt;= 5; i++) { </span></span>
<span class="line"><span style="color:#f6f6f4;"> // expiration: 设置单条消息的过期时间 </span></span>
<span class="line"><span style="color:#f6f6f4;"> AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties().builder().priority(i).expiration( i * 1000 + &quot;&quot;); </span></span>
<span class="line"><span style="color:#f6f6f4;"> channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, properties.build(), (message + i).getBytes(&quot;UTF-8&quot;)); </span></span>
<span class="line"><span style="color:#f6f6f4;">} </span></span>
<span class="line"><span style="color:#f6f6f4;">channel.close(); </span></span>
<span class="line"><span style="color:#f6f6f4;">connection.close();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ConnectionFactory factory = new ConnectionFactory(); </span></span>
<span class="line"><span style="color:#24292e;">factory.setHost(&quot;127.0.0.1&quot;); </span></span>
<span class="line"><span style="color:#24292e;">factory.setPort(AMQP.PROTOCOL.PORT); </span></span>
<span class="line"><span style="color:#24292e;">factory.setUsername(&quot;guest&quot;); </span></span>
<span class="line"><span style="color:#24292e;">factory.setPassword(&quot;guest&quot;); </span></span>
<span class="line"><span style="color:#24292e;">Connection connection = factory.newConnection(); </span></span>
<span class="line"><span style="color:#24292e;">Channel channel = connection.createChannel();</span></span>
<span class="line"><span style="color:#24292e;">// </span></span>
<span class="line"><span style="color:#24292e;">// 声明一个接收被删除的消息的交换机和队列 </span></span>
<span class="line"><span style="color:#24292e;">String EXCHANGE_DEAD_NAME = &quot;exchange.dead&quot;; </span></span>
<span class="line"><span style="color:#24292e;">String QUEUE_DEAD_NAME = &quot;queue_dead&quot;; </span></span>
<span class="line"><span style="color:#24292e;">channel.exchangeDeclare(EXCHANGE_DEAD_NAME, BuiltinExchangeType.DIRECT); </span></span>
<span class="line"><span style="color:#24292e;">channel.queueDeclare(QUEUE_DEAD_NAME, false, false, false, null); </span></span>
<span class="line"><span style="color:#24292e;">channel.queueBind(QUEUE_DEAD_NAME, EXCHANGE_DEAD_NAME, &quot;routingkey.dead&quot;); </span></span>
<span class="line"><span style="color:#24292e;">// </span></span>
<span class="line"><span style="color:#24292e;">String EXCHANGE_NAME = &quot;exchange.fanout&quot;; </span></span>
<span class="line"><span style="color:#24292e;">String QUEUE_NAME = &quot;queue_name&quot;; </span></span>
<span class="line"><span style="color:#24292e;">channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT); </span></span>
<span class="line"><span style="color:#24292e;">Map&lt;String, Object&gt; arguments = new HashMap&lt;String, Object&gt;(); </span></span>
<span class="line"><span style="color:#24292e;">// 统一设置队列中的所有消息的过期时间 </span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-message-ttl&quot;, 30000); </span></span>
<span class="line"><span style="color:#24292e;">// 设置超过多少毫秒没有消费者来访问队列，就删除队列的时间 </span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-expires&quot;, 20000); </span></span>
<span class="line"><span style="color:#24292e;">// 设置队列的最新的N条消息，如果超过N条，前面的消息将从队列中移除掉 </span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-max-length&quot;, 4); </span></span>
<span class="line"><span style="color:#24292e;">// 设置队列的内容的最大空间，超过该阈值就删除之前的消息</span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-max-length-bytes&quot;, 1024); </span></span>
<span class="line"><span style="color:#24292e;">// 将删除的消息推送到指定的交换机，一般x-dead-letter-exchange和x-dead-letter-routing-key需要同时设置</span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-dead-letter-exchange&quot;, &quot;exchange.dead&quot;); </span></span>
<span class="line"><span style="color:#24292e;">// 将删除的消息推送到指定的交换机对应的路由键 </span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-dead-letter-routing-key&quot;, &quot;routingkey.dead&quot;); </span></span>
<span class="line"><span style="color:#24292e;">// 设置消息的优先级，优先级大的优先被消费 </span></span>
<span class="line"><span style="color:#24292e;">arguments.put(&quot;x-max-priority&quot;, 10); </span></span>
<span class="line"><span style="color:#24292e;">channel.queueDeclare(QUEUE_NAME, false, false, false, arguments); </span></span>
<span class="line"><span style="color:#24292e;">channel.queueBind(QUEUE_NAME, EXCHANGE_NAME, &quot;&quot;); </span></span>
<span class="line"><span style="color:#24292e;">String message = &quot;Hello RabbitMQ: &quot;; </span></span>
<span class="line"><span style="color:#24292e;">// </span></span>
<span class="line"><span style="color:#24292e;">for(int i = 1; i &lt;= 5; i++) { </span></span>
<span class="line"><span style="color:#24292e;"> // expiration: 设置单条消息的过期时间 </span></span>
<span class="line"><span style="color:#24292e;"> AMQP.BasicProperties.Builder properties = new AMQP.BasicProperties().builder().priority(i).expiration( i * 1000 + &quot;&quot;); </span></span>
<span class="line"><span style="color:#24292e;"> channel.basicPublish(EXCHANGE_NAME, &quot;&quot;, properties.build(), (message + i).getBytes(&quot;UTF-8&quot;)); </span></span>
<span class="line"><span style="color:#24292e;">} </span></span>
<span class="line"><span style="color:#24292e;">channel.close(); </span></span>
<span class="line"><span style="color:#24292e;">connection.close();</span></span></code></pre></div><h3 id="_2、rabbitmq的集群模式有几种" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2rabbitmq%E7%9A%84%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E6%9C%89%E5%87%A0%E7%A7%8D" target="_blank" rel="noreferrer">2、RabbitMQ的集群模式有几种？</a> <a class="header-anchor" href="#_2、rabbitmq的集群模式有几种" aria-label="Permalink to &quot;[2、RabbitMQ的集群模式有几种？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#2rabbitmq的集群模式有几种)&quot;">​</a></h3><p>RabbitMQ 是比较有代表性的，因为是基于主从（非分布式）做高可用性的，我们就以 RabbitMQ 为例子讲解第一种 MQ 的高可用性怎么实现。RabbitMQ 有三种模式：<code>单机模式</code>、<code>普通集群模式</code>、<code>镜像集群模式</code>。</p><p><strong>1、</strong> 单机模式，就是 Demo 级别的，一般就是你本地启动了玩玩儿的?，没人生产用单机模式</p><p><strong>2、</strong> 普通模式：以两个节点（rabbit01，rabbit02）为例来进行说明，对于Queue来说，消息实体只存在于其中一个节点rabbit01（或者rabbit02），rabbit01和rabbit02两个节点仅有相同的元数据，即队列结构。当消息进入rabbit01节点的Queue后，consumer从rabbit02节点消费时，RabbitMQ会临时在rabbit01，rabbit02间进行消息传输，把A中的消息实体取出并经过B发送给consumer，所以consumer应尽量连接每一个节点，从中取消息。即对于同一个逻辑队列，要在多个节点建立物理Queue。否则无论consumer连rabbit01或rabbit02，出口总在rabbit01，会产生瓶颈。当rabbit01节点故障后，rabbit02节点无法取到rabbit01节点中还未消费的消息实体。如果做了消息持久化，那么等到rabbit01节点恢复，然后才可被消费。如果没有消息持久化，就会产生消息丢失的现象。</p><p><strong>3、</strong> 镜像模式：把需要的队列做成镜像队列，存在与多个节点属于RabibitMQ的HA方案，该模式解决了普通模式中的问题，其实质和普通模式不同之处在于，消息体会主动在镜像节点间同步，而不是在客户端取数据时临时拉取，该模式带来的副作用也很明显，除了降低系统性能外，如果镜像队列数量过多，加之大量的消息进入，集群内部的网络带宽将会被这种同步通讯大大消耗掉，所以在对可靠性要求比较高的场合中适用</p><h3 id="_3、无法被路由的消息去了哪里" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E6%97%A0%E6%B3%95%E8%A2%AB%E8%B7%AF%E7%94%B1%E7%9A%84%E6%B6%88%E6%81%AF%E5%8E%BB%E4%BA%86%E5%93%AA%E9%87%8C" target="_blank" rel="noreferrer">3、无法被路由的消息去了哪里?</a> <a class="header-anchor" href="#_3、无法被路由的消息去了哪里" aria-label="Permalink to &quot;[3、无法被路由的消息去了哪里?](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#3无法被路由的消息去了哪里)&quot;">​</a></h3><p>mandatory：true 返回消息给生产者。</p><p>mandatory：false 直接丢弃。</p><h3 id="_4、向不存在的-exchange-发-publish-消息会发生什么-向不存在的-queue-执行consume-动作会发生什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E5%90%91%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-exchange-%E5%8F%91-publish-%E6%B6%88%E6%81%AF%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%E5%90%91%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84-queue-%E6%89%A7%E8%A1%8Cconsume-%E5%8A%A8%E4%BD%9C%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">4、向不存在的 exchange 发 publish 消息会发生什么？向不存在的 queue 执行consume 动作会发生什么？</a> <a class="header-anchor" href="#_4、向不存在的-exchange-发-publish-消息会发生什么-向不存在的-queue-执行consume-动作会发生什么" aria-label="Permalink to &quot;[4、向不存在的 exchange 发 publish 消息会发生什么？向不存在的 queue 执行consume 动作会发生什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#4向不存在的-exchange-发-publish-消息会发生什么向不存在的-queue-执行consume-动作会发生什么)&quot;">​</a></h3><p>都会收到 Channel.Close 信令告之不存在（内含原因 404 NOT_FOUND）。</p><h3 id="_5、消息如何保证幂等性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E6%B6%88%E6%81%AF%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%B9%82%E7%AD%89%E6%80%A7" target="_blank" rel="noreferrer">5、消息如何保证幂等性？</a> <a class="header-anchor" href="#_5、消息如何保证幂等性" aria-label="Permalink to &quot;[5、消息如何保证幂等性？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#5消息如何保证幂等性)&quot;">​</a></h3><p>生产者方面：可以对每条消息生成一个msgID，以控制消息重复投递</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()</span></span>
<span class="line"><span style="color:#f6f6f4;">porperties.messageId(String.valueOF(UUID.randomUUID()))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()</span></span>
<span class="line"><span style="color:#24292e;">porperties.messageId(String.valueOF(UUID.randomUUID()))</span></span></code></pre></div><p>消费者方面：消息体中必须携带一个业务ID，如银行流水号，消费者可以根据业务ID去重，避免重复消费</p><h3 id="_6、生产者消息如何运转" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E6%81%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%BD%AC" target="_blank" rel="noreferrer">6、生产者消息如何运转？</a> <a class="header-anchor" href="#_6、生产者消息如何运转" aria-label="Permalink to &quot;[6、生产者消息如何运转？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#6生产者消息如何运转)&quot;">​</a></h3><p><strong>1、</strong> Producer先连接到Broker,建立连接Connection,开启一个信道(Channel)。</p><p><strong>2、</strong> Producer声明一个交换器并设置好相关属性。</p><p><strong>3、</strong> Producer声明一个队列并设置好相关属性。</p><p><strong>4、</strong> Producer通过路由键将交换器和队列绑定起来。</p><p><strong>5、</strong> Producer发送消息到Broker,其中包含路由键、交换器等信息。</p><p><strong>6、</strong> 相应的交换器根据接收到的路由键查找匹配的队列。</p><p><strong>7、</strong> 如果找到，将消息存入对应的队列，如果没有找到，会根据生产者的配置丢弃或者退回给生产者。</p><p><strong>8、</strong> 关闭信道。</p><p><strong>9、</strong> 管理连接。</p><h3 id="_7、优先级队列" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97" target="_blank" rel="noreferrer">7、优先级队列？</a> <a class="header-anchor" href="#_7、优先级队列" aria-label="Permalink to &quot;[7、优先级队列？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#7优先级队列)&quot;">​</a></h3><p>优先级高的队列会先被消费。</p><p>可以通过x-max-priority参数来实现。</p><p>当消费速度大于生产速度且Broker没有堆积的情况下，优先级显得没有意义。</p><h3 id="_8、消费者某些原因无法处理当前接受的消息如何来拒绝" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E6%B6%88%E8%B4%B9%E8%80%85%E6%9F%90%E4%BA%9B%E5%8E%9F%E5%9B%A0%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E5%BD%93%E5%89%8D%E6%8E%A5%E5%8F%97%E7%9A%84%E6%B6%88%E6%81%AF%E5%A6%82%E4%BD%95%E6%9D%A5%E6%8B%92%E7%BB%9D" target="_blank" rel="noreferrer">8、消费者某些原因无法处理当前接受的消息如何来拒绝？</a> <a class="header-anchor" href="#_8、消费者某些原因无法处理当前接受的消息如何来拒绝" aria-label="Permalink to &quot;[8、消费者某些原因无法处理当前接受的消息如何来拒绝？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#8消费者某些原因无法处理当前接受的消息如何来拒绝)&quot;">​</a></h3><p>channel.basicNack</p><p>channel.basicReject</p><h3 id="_9、消息基于什么传输" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E6%B6%88%E6%81%AF%E5%9F%BA%E4%BA%8E%E4%BB%80%E4%B9%88%E4%BC%A0%E8%BE%93" target="_blank" rel="noreferrer">9、消息基于什么传输?</a> <a class="header-anchor" href="#_9、消息基于什么传输" aria-label="Permalink to &quot;[9、消息基于什么传输?](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#9消息基于什么传输)&quot;">​</a></h3><p>由于TCP连接的创建和销毁开销较大，且并发数受系统资源限制，会造成性能瓶颈。RabbitMQ使用信道的方式来传输数据。信道是建立在真实的TCP连接内的虚拟连接，且每条TCP连接上的信道数量没有限制。</p><h3 id="_10、rabbitmq的集群" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10rabbitmq%E7%9A%84%E9%9B%86%E7%BE%A4" target="_blank" rel="noreferrer">10、rabbitmq的集群</a> <a class="header-anchor" href="#_10、rabbitmq的集群" aria-label="Permalink to &quot;[10、rabbitmq的集群](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新面试题，2021年面试题及答案汇总.md#10rabbitmq的集群)&quot;">​</a></h3><p><strong>镜像集群模式</strong></p><p>你创建的queue，无论元数据还是queue里的消息都会存在于多个实例上，然后每次你写消息到queue的时候，都会自动把消息到多个实例的queue里进行消息同步。</p><p>好处在于，你任何一个机器宕机了，没事儿，别的机器都可以用。坏处在于，第一，这个性能开销也太大了吧，消息同步所有机器，导致网络带宽压力和消耗很重！第二，这么玩儿，就没有扩展性可言了，如果某个queue负载很重，你加机器，新增的机器也包含了这个queue的所有数据，并没有办法线性扩展你的queue</p><h3 id="_11、rabbitmq事务机制" tabindex="-1">11、RabbitMQ事务机制？ <a class="header-anchor" href="#_11、rabbitmq事务机制" aria-label="Permalink to &quot;11、RabbitMQ事务机制？&quot;">​</a></h3><h3 id="_12、routingkey路由键" tabindex="-1">12、RoutingKey路由键？ <a class="header-anchor" href="#_12、routingkey路由键" aria-label="Permalink to &quot;12、RoutingKey路由键？&quot;">​</a></h3><h3 id="_13、如何确保消息正确地发送至rabbitmq" tabindex="-1">13、如何确保消息正确地发送至RabbitMQ? <a class="header-anchor" href="#_13、如何确保消息正确地发送至rabbitmq" aria-label="Permalink to &quot;13、如何确保消息正确地发送至RabbitMQ?&quot;">​</a></h3><h3 id="_14、rabbitmq中消息可能有的几种状态" tabindex="-1">14、RabbitMQ中消息可能有的几种状态? <a class="header-anchor" href="#_14、rabbitmq中消息可能有的几种状态" aria-label="Permalink to &quot;14、RabbitMQ中消息可能有的几种状态?&quot;">​</a></h3><h3 id="_15、发送确认机制" tabindex="-1">15、发送确认机制？ <a class="header-anchor" href="#_15、发送确认机制" aria-label="Permalink to &quot;15、发送确认机制？&quot;">​</a></h3><h3 id="_16、什么是rabbitmq" tabindex="-1">16、什么是RabbitMQ？ <a class="header-anchor" href="#_16、什么是rabbitmq" aria-label="Permalink to &quot;16、什么是RabbitMQ？&quot;">​</a></h3><h3 id="_17、queue队列" tabindex="-1">17、Queue队列？ <a class="header-anchor" href="#_17、queue队列" aria-label="Permalink to &quot;17、Queue队列？&quot;">​</a></h3><h3 id="_18、rabbitmq中消息可能有的几种状态" tabindex="-1">18、RabbitMQ中消息可能有的几种状态? <a class="header-anchor" href="#_18、rabbitmq中消息可能有的几种状态" aria-label="Permalink to &quot;18、RabbitMQ中消息可能有的几种状态?&quot;">​</a></h3><h3 id="_19、rabbitmq的工作模式有几种" tabindex="-1">19、RabbitMQ的工作模式有几种？ <a class="header-anchor" href="#_19、rabbitmq的工作模式有几种" aria-label="Permalink to &quot;19、RabbitMQ的工作模式有几种？&quot;">​</a></h3><h3 id="_20、队列结构" tabindex="-1">20、队列结构？ <a class="header-anchor" href="#_20、队列结构" aria-label="Permalink to &quot;20、队列结构？&quot;">​</a></h3><h3 id="_21、消费者consumer" tabindex="-1">21、消费者Consumer? <a class="header-anchor" href="#_21、消费者consumer" aria-label="Permalink to &quot;21、消费者Consumer?&quot;">​</a></h3><h3 id="_22、什么是元数据-元数据分为哪些类型-包括哪些内容-与-cluster-相关的元数据有哪些-元数据是如何保存的-元数据在-cluster-中是如何分布的" tabindex="-1">22、什么是元数据？元数据分为哪些类型？包括哪些内容？与 cluster 相关的元数据有哪些？元数据是如何保存的？元数据在 cluster 中是如何分布的？ <a class="header-anchor" href="#_22、什么是元数据-元数据分为哪些类型-包括哪些内容-与-cluster-相关的元数据有哪些-元数据是如何保存的-元数据在-cluster-中是如何分布的" aria-label="Permalink to &quot;22、什么是元数据？元数据分为哪些类型？包括哪些内容？与 cluster 相关的元数据有哪些？元数据是如何保存的？元数据在 cluster 中是如何分布的？&quot;">​</a></h3><h3 id="_23、vhost-是什么-起什么作用" tabindex="-1">23、vhost 是什么? 起什么作用? <a class="header-anchor" href="#_23、vhost-是什么-起什么作用" aria-label="Permalink to &quot;23、vhost 是什么? 起什么作用?&quot;">​</a></h3><h3 id="_24、你们公司生产环境用的是什么消息中间件" tabindex="-1">24、你们公司生产环境用的是什么消息中间件？ <a class="header-anchor" href="#_24、你们公司生产环境用的是什么消息中间件" aria-label="Permalink to &quot;24、你们公司生产环境用的是什么消息中间件？&quot;">​</a></h3><h3 id="_25、什么是broker服务节点" tabindex="-1">25、什么是Broker服务节点？ <a class="header-anchor" href="#_25、什么是broker服务节点" aria-label="Permalink to &quot;25、什么是Broker服务节点？&quot;">​</a></h3><h3 id="_26、什么情况下-producer-不主动创建-queue-是安全的" tabindex="-1">26、什么情况下 producer 不主动创建 queue 是安全的？ <a class="header-anchor" href="#_26、什么情况下-producer-不主动创建-queue-是安全的" aria-label="Permalink to &quot;26、什么情况下 producer 不主动创建 queue 是安全的？&quot;">​</a></h3><h3 id="_27、mq-有哪些常见问题-如何解决这些问题" tabindex="-1">27、MQ 有哪些常见问题？如何解决这些问题？ <a class="header-anchor" href="#_27、mq-有哪些常见问题-如何解决这些问题" aria-label="Permalink to &quot;27、MQ 有哪些常见问题？如何解决这些问题？&quot;">​</a></h3>`,67),l=[o];function r(p,i,c,u,E,b){return s(),e("div",null,l)}const f=a(t,[["render",r]]);export{d as __pageData,f as default};
