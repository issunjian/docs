import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/buffer-20230321154534.6926a567.png",o="/docs/assets/buffer-20230321162808.f6570ed2.png",b=JSON.parse('{"title":"Java 缓冲流：Java IO 的读写效率有了质的飞升","description":"本文详细介绍了字符流在 Java IO 操作中的重要作用，特别关注 Reader 和 Writer 类及其子类的功能与用途。同时，文章还提供了字符流的实际应用示例和常用方法。阅读本文，将帮助您更深入地了解字符流以及 Reader 和 Writer 在 Java 编程中的关键地位，提高文本操作效率。","frontmatter":{"title":"Java 缓冲流：Java IO 的读写效率有了质的飞升","shortTitle":"缓冲流","category":["Java核心"],"tag":["Java IO"],"description":"本文详细介绍了字符流在 Java IO 操作中的重要作用，特别关注 Reader 和 Writer 类及其子类的功能与用途。同时，文章还提供了字符流的实际应用示例和常用方法。阅读本文，将帮助您更深入地了解字符流以及 Reader 和 Writer 在 Java 编程中的关键地位，提高文本操作效率。","head":[["meta",{"name":"keywords","content":"Java,IO,缓冲流,Buffered,BufferedInputStream,BufferedOutputStream,BufferedReader,BufferedWriter,java 缓冲流,java buffer"}]]},"headers":[],"relativePath":"backend/tobetter/io/buffer.md","filePath":"backend/tobetter/io/buffer.md"}'),e={name:"backend/tobetter/io/buffer.md"},t=l(`<h1 id="_7-5-缓冲流" tabindex="-1">7.5 缓冲流 <a class="header-anchor" href="#_7-5-缓冲流" aria-label="Permalink to &quot;7.5 缓冲流&quot;">​</a></h1><p>Java 的缓冲流是对字节流和字符流的一种封装，通过在内存中开辟缓冲区来提高 I/O 操作的效率。Java 通过 BufferedInputStream 和 BufferedOutputStream 来实现字节流的缓冲，通过 BufferedReader 和 BufferedWriter 来实现字符流的缓冲。</p><p>缓冲流的工作原理是将数据先写入缓冲区中，当缓冲区满时再一次性写入文件或输出流，或者当缓冲区为空时一次性从文件或输入流中读取一定量的数据。这样可以减少系统的 I/O 操作次数，提高系统的 I/O 效率，从而提高程序的运行效率。</p><h3 id="_01、字节缓冲流" tabindex="-1">01、字节缓冲流 <a class="header-anchor" href="#_01、字节缓冲流" aria-label="Permalink to &quot;01、字节缓冲流&quot;">​</a></h3><p>BufferedInputStream 和 BufferedOutputStream 属于字节缓冲流，强化了字节流 InputStream 和 OutputStream，关于字节流，我们前面已经详细地讲过了，可以<a href="https://tobebetterjavaer.com/io/stream.html" target="_blank" rel="noreferrer">戳这个链接</a>去温习。</p><h4 id="_1-构造方法" tabindex="-1">1）构造方法 <a class="header-anchor" href="#_1-构造方法" aria-label="Permalink to &quot;1）构造方法&quot;">​</a></h4><ul><li><code>BufferedInputStream(InputStream in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>InputStream</strong>。</li><li><code>BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>OutputStream</strong>。</li></ul><p>代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建字节缓冲输入流，先声明字节流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileInputStream</span><span style="color:#F6F6F4;"> fps </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(b.txt);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedInputStream</span><span style="color:#F6F6F4;"> bis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(fps)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建字节缓冲输入流（一步到位）</span></span>
<span class="line"><span style="color:#F6F6F4;">BufferedInputStream bis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建字节缓冲输出流（一步到位）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedOutputStream</span><span style="color:#F6F6F4;"> bos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建字节缓冲输入流，先声明字节流</span></span>
<span class="line"><span style="color:#24292E;">FileInputStream fps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(b.txt);</span></span>
<span class="line"><span style="color:#24292E;">BufferedInputStream bis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(fps)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建字节缓冲输入流（一步到位）</span></span>
<span class="line"><span style="color:#24292E;">BufferedInputStream bis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建字节缓冲输出流（一步到位）</span></span>
<span class="line"><span style="color:#24292E;">BufferedOutputStream bos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><h4 id="_2-缓冲流的高效" tabindex="-1">2）缓冲流的高效 <a class="header-anchor" href="#_2-缓冲流的高效" aria-label="Permalink to &quot;2）缓冲流的高效&quot;">​</a></h4><p>我们通过复制一个 370M+ 的大文件，来测试缓冲流的效率。为了做对比，我们先用基本流来实现一下，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 记录开始时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建流对象</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileInputStream</span><span style="color:#F6F6F4;"> fis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">py.mp4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span><span style="color:#7B7F8B;">//exe文件够大</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FileOutputStream</span><span style="color:#F6F6F4;"> fos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">copyPy.mp4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读写数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fis.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        fos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 记录结束时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> end </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">普通流复制时间:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">(end </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> start)</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 毫秒</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 记录开始时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建流对象</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileInputStream fis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;py.mp4&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//exe文件够大</span></span>
<span class="line"><span style="color:#24292E;">        FileOutputStream fos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;copyPy.mp4&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读写数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fis.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        fos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 记录结束时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;普通流复制时间:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">(end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; 毫秒&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>不好意思，我本机比较菜，10 分钟还在复制中。切换到缓冲流试一下，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 记录开始时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建流对象</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">BufferedInputStream</span><span style="color:#F6F6F4;"> bis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">py.mp4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedOutputStream</span><span style="color:#F6F6F4;"> bos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">copyPy.mp4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读写数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bis.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        bos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 记录结束时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> end </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">缓冲流复制时间:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">(end </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> start)</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 毫秒</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 记录开始时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建流对象</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (BufferedInputStream bis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;py.mp4&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        BufferedOutputStream bos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;copyPy.mp4&quot;</span><span style="color:#24292E;">));){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读写数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bis.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        bos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(b);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 记录结束时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;缓冲流复制时间:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">(end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; 毫秒&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>只需要 8016 毫秒，如何更快呢？</p><p>可以换数组的方式来读写，这个我们前面也有讲到，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 记录开始时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建流对象</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">BufferedInputStream</span><span style="color:#F6F6F4;"> bis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">py.mp4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedOutputStream</span><span style="color:#F6F6F4;"> bos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">copyPy.mp4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 读写数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] bytes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">8</span><span style="color:#F286C4;">*</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bis.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(bytes)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        bos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(bytes, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> , len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 记录结束时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> end </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">缓冲流使用数组复制时间:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">(end </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> start)</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 毫秒</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 记录开始时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 创建流对象</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (BufferedInputStream bis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;py.mp4&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        BufferedOutputStream bos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;copyPy.mp4&quot;</span><span style="color:#24292E;">));){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读写数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">8</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bis.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(bytes)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        bos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(bytes, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> , len);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 记录结束时间</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;缓冲流使用数组复制时间:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">(end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start)</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot; 毫秒&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这下就更快了，只需要 521 毫秒。</p><h4 id="_3-为什么字节缓冲流会这么快" tabindex="-1">3）为什么字节缓冲流会这么快？ <a class="header-anchor" href="#_3-为什么字节缓冲流会这么快" aria-label="Permalink to &quot;3）为什么字节缓冲流会这么快？&quot;">​</a></h4><p>传统的 Java IO 是阻塞模式的，它的工作状态就是“读/写，等待，读/写，等待。。。。。。”</p><p>字节缓冲流解决的就是这个问题：<strong>一次多读点多写点，减少读写的频率，用空间换时间</strong>。</p><ul><li>减少系统调用次数：在使用字节缓冲流时，数据不是立即写入磁盘或输出流，而是先写入缓冲区，当缓冲区满时再一次性写入磁盘或输出流。这样可以减少系统调用的次数，从而提高 I/O 操作的效率。</li><li>减少磁盘读写次数：在使用字节缓冲流时，当需要读取数据时，缓冲流会先从缓冲区中读取数据，如果缓冲区中没有足够的数据，则会一次性从磁盘或输入流中读取一定量的数据。同样地，当需要写入数据时，缓冲流会先将数据写入缓冲区，如果缓冲区满了，则会一次性将缓冲区中的数据写入磁盘或输出流。这样可以减少磁盘读写的次数，从而提高 I/O 操作的效率。</li><li>提高数据传输效率：在使用字节缓冲流时，由于数据是以块的形式进行传输，因此可以减少数据传输的次数，从而提高数据传输的效率。</li></ul><p>我们来看 BufferedInputStream 的 read 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">() throws IOException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (pos </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> count) {     </span><span style="color:#7B7F8B;">// 如果当前位置已经到达缓冲区末尾</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">fill</span><span style="color:#F6F6F4;">();             </span><span style="color:#7B7F8B;">// 填充缓冲区</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (pos </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> count)   </span><span style="color:#7B7F8B;">// 如果填充后仍然到达缓冲区末尾，说明已经读取完毕</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;      </span><span style="color:#7B7F8B;">// 返回 -1 表示已经读取完毕</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getBufIfOpen</span><span style="color:#F6F6F4;">()[pos</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0xff</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回当前位置的字节，并将位置加 1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">() throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pos </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> count) {     </span><span style="color:#6A737D;">// 如果当前位置已经到达缓冲区末尾</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">();             </span><span style="color:#6A737D;">// 填充缓冲区</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (pos </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> count)   </span><span style="color:#6A737D;">// 如果填充后仍然到达缓冲区末尾，说明已经读取完毕</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;      </span><span style="color:#6A737D;">// 返回 -1 表示已经读取完毕</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBufIfOpen</span><span style="color:#24292E;">()[pos</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xff</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回当前位置的字节，并将位置加 1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段代码主要有两部分：</p><ul><li><code>fill()</code>：该方法会将缓冲 buf 填满。</li><li><code>getBufIfOpen()[pos++] &amp; 0xff</code>：返回当前读取位置 pos 处的字节（<code>getBufIfOpen()</code>返回的是 buffer 数组，是 byte 类型），并将其与 0xff 进行位与运算。这里的目的是将读取到的字节 b 当做无符号的字节处理，因为 Java 的 byte 类型是有符号的，而将 b 与 0xff 进行位与运算，就可以将其转换为无符号的字节，其范围为 0 到 255。</li></ul><blockquote><p>byte &amp; 0xFF 我们一会再细讲。</p></blockquote><p>再来看 FileInputStream 的 read 方法：</p><img src="`+p+`"><p>在这段代码中，<code>read0()</code> 方法是一个<a href="https://tobebetterjavaer.com/oo/native-method.html" target="_blank" rel="noreferrer">本地方法</a>，它的实现是由底层操作系统提供的，并不是 Java 语言实现的。在不同的操作系统上，<code>read0()</code> 方法的实现可能会有所不同，但是它们的功能都是相同的，都是用于<strong>读取一个字节</strong>。</p><p>再来看一下 BufferedOutputStream 的 <code>write(byte b[], int off, int len)</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;"> b[], </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> off, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len) throws IOException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (len </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> buf.length) {    </span><span style="color:#7B7F8B;">// 如果写入的字节数大于等于缓冲区长度</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">/* 如果请求的长度超过了输出缓冲区的大小，</span></span>
<span class="line"><span style="color:#7B7F8B;">           先刷新缓冲区，然后直接将数据写入。</span></span>
<span class="line"><span style="color:#7B7F8B;">           这样可以避免缓冲流级联时的问题。*/</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">flushBuffer</span><span style="color:#F6F6F4;">();          </span><span style="color:#7B7F8B;">// 先刷新缓冲区</span></span>
<span class="line"><span style="color:#F6F6F4;">        out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(b, off, len); </span><span style="color:#7B7F8B;">// 直接将数据写入输出流</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (len </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> buf.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> count) { </span><span style="color:#7B7F8B;">// 如果写入的字节数大于空余空间</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">flushBuffer</span><span style="color:#F6F6F4;">();              </span><span style="color:#7B7F8B;">// 先刷新缓冲区</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(b, off, buf, count, len); </span><span style="color:#7B7F8B;">// 将数据拷贝到缓冲区中</span></span>
<span class="line"><span style="color:#F6F6F4;">    count </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> len;                             </span><span style="color:#7B7F8B;">// 更新计数器</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b[], </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> off, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len) throws IOException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> buf.length) {    </span><span style="color:#6A737D;">// 如果写入的字节数大于等于缓冲区长度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* 如果请求的长度超过了输出缓冲区的大小，</span></span>
<span class="line"><span style="color:#6A737D;">           先刷新缓冲区，然后直接将数据写入。</span></span>
<span class="line"><span style="color:#6A737D;">           这样可以避免缓冲流级联时的问题。*/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">flushBuffer</span><span style="color:#24292E;">();          </span><span style="color:#6A737D;">// 先刷新缓冲区</span></span>
<span class="line"><span style="color:#24292E;">        out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(b, off, len); </span><span style="color:#6A737D;">// 直接将数据写入输出流</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (len </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> buf.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> count) { </span><span style="color:#6A737D;">// 如果写入的字节数大于空余空间</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">flushBuffer</span><span style="color:#24292E;">();              </span><span style="color:#6A737D;">// 先刷新缓冲区</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(b, off, buf, count, len); </span><span style="color:#6A737D;">// 将数据拷贝到缓冲区中</span></span>
<span class="line"><span style="color:#24292E;">    count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> len;                             </span><span style="color:#6A737D;">// 更新计数器</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先，该方法会检查写入的字节数是否大于等于缓冲区长度，如果是，则先将缓冲区中的数据刷新到磁盘中，然后直接将数据写入输出流。这样做是为了避免缓冲流级联时的问题，即缓冲区的大小不足以容纳写入的数据时，可能会引发级联刷新，导致效率降低。</p><blockquote><p>级联问题（Cascade Problem）是指在一组缓冲流（Buffered Stream）中，由于缓冲区的大小不足以容纳要写入的数据，导致数据被分割成多个部分，并分别写入到不同的缓冲区中，最终需要逐个刷新缓冲区，从而导致性能下降的问题。</p></blockquote><p>其次，如果写入的字节数小于缓冲区长度，则检查缓冲区中剩余的空间是否足够容纳要写入的字节数，如果不够，则先将缓冲区中的数据刷新到磁盘中。然后，使用 <code>System.arraycopy()</code> 方法将要写入的数据拷贝到缓冲区中，并更新计数器 count。</p><p>最后，如果写入的字节数小于缓冲区长度且缓冲区中还有剩余空间，则直接将要写入的数据拷贝到缓冲区中，并更新计数器 count。</p><p>也就是说，只有当 buf 写满了，才会 flush，将数据刷到磁盘，默认一次刷 8192 个字节。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> out) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">(out, </span><span style="color:#BF9EEE;">8192</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(OutputStream out) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(out, </span><span style="color:#005CC5;">8192</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果 buf 没有写满，会继续写 buf。</p><p>对比一下 FileOutputStream 的 write 方法，同样是本地方法，一次只能写入一个字节。</p><img src="`+o+`"><p>当把 BufferedOutputStream 和 BufferedInputStream 配合起来使用后，就减少了大量的读写次数，尤其是 <code>byte[] bytes = new byte[8*1024]</code>，就相当于缓冲区的空间有 8 个 1024 字节，那读写效率就会大大提高。</p><h4 id="_4-byte-0xff" tabindex="-1">4）<code>byte &amp; 0xFF</code> <a class="header-anchor" href="#_4-byte-0xff" aria-label="Permalink to &quot;4）\`byte &amp; 0xFF\`&quot;">​</a></h4><p>byte 类型通常被用于存储二进制数据，例如读取和写入文件、网络传输等场景。在这些场景下，byte 类型的变量可以用来存储数据流中的每个字节，从而进行读取和写入操作。</p><p>byte 类型是有符号的，即其取值范围为 -128 到 127。如果我们希望得到的是一个无符号的 byte 值，就需要使用 <code>byte &amp; 0xFF</code> 来进行转换。</p><p>这是因为 0xFF 是一个无符号的整数，它的二进制表示为 11111111。当一个 byte 类型的值与 0xFF 进行位与运算时，会将 byte 类型的值转换为一个无符号的整数，其范围为 0 到 255。</p><p>0xff 是一个十六进制的数，相当于二进制的 11111111，&amp; 运算符的意思是：如果两个操作数的对应位为 1，则输出 1，否则为 0；由于 0xff 有 8 个 1，单个 byte 转成 int 其实就是将 byte 和 int 类型的 255 进行(&amp;)与运算。</p><p>例如，如果我们有一个 byte 类型的变量 b，其值为 -1，那么 b &amp; 0xFF 的结果就是 255。这样就可以将一个有符号的 byte 类型的值转换为一个无符号的整数。</p><p>&amp; 运算是一种二进制数据的计算方式, 两个操作位都为1，结果才为1，否则结果为0. 在上面的 <code>getBufIfOpen()[pos++] &amp; 0xff</code> 计算过程中, byte 有 8bit, OXFF 是16进制的255, 表示的是 int 类型, int 有 32bit.</p><p>如果 <code>getBufIfOpen()[pos++]</code> 为 -118, 那么其原码表示为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">00000000 00000000 00000000 10001010</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">00000000 00000000 00000000 10001010</span></span></code></pre></div><p>反码为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">11111111 11111111 11111111 11110101</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">11111111 11111111 11111111 11110101</span></span></code></pre></div><p>补码为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">11111111 11111111 11111111 11110110</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">11111111 11111111 11111111 11110110</span></span></code></pre></div><p>0XFF 表示16进制的数据255, 原码, 反码, 补码都是一样的, 其二进制数据为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">00000000 00000000 00000000 11111111</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">00000000 00000000 00000000 11111111</span></span></code></pre></div><p>0XFF 和 -118 进行&amp;运算后结果为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">00000000 00000000 00000000 11110110</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">00000000 00000000 00000000 11110110</span></span></code></pre></div><p>还原为原码后为</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">00000000 00000000 00000000 10001010</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">00000000 00000000 00000000 10001010</span></span></code></pre></div><p>其表示的 int 值为 138，可见将 byte 类型的 -118 与 0XFF 进行与运算后值由 -118 变成了 int 类型的 138，其中低8位和byte的-118完全一致。</p><p>顺带聊一下 原码、反码和补码。</p><p>①、原码</p><p>原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如如果是8位二进制:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[+1]原 = 0000 0001</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">[-1]原 = 1000 0001</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[+1]原 = 0000 0001</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[-1]原 = 1000 0001</span></span></code></pre></div><p>第一位是符号位。因为第一位是符号位，所以8位二进制数的取值范围就是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[1111 1111 , 0111 1111]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[1111 1111 , 0111 1111]</span></span></code></pre></div><p>即</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[-127 , 127]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[-127 , 127]</span></span></code></pre></div><p>②、反码</p><p>反码的表示方法是：</p><ul><li>正数的反码是其本身</li><li>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</li></ul><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[+1] = [00000001]原 = [00000001]反</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">[-1] = [10000001]原 = [11111110]反</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[+1] = [00000001]原 = [00000001]反</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[-1] = [10000001]原 = [11111110]反</span></span></code></pre></div><p>可见如果一个反码表示的是负数，人脑无法直观的看出来它的数值。通常要将其转换成原码再计算。</p><p>③、补码</p><p>补码的表示方法是：</p><ul><li>正数的补码就是其本身</li><li>负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。(即在反码的基础上+1)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[+1] = [00000001]原 = [00000001]反 = [00000001]补</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">[-1] = [10000001]原 = [11111110]反 = [11111111]补</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[+1] = [00000001]原 = [00000001]反 = [00000001]补</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">[-1] = [10000001]原 = [11111110]反 = [11111111]补</span></span></code></pre></div><p>对于负数，补码表示方式也是人脑无法直观看出其数值的。通常也需要转换成原码在计算其数值。</p><p>从上面可以看到：</p><ul><li>对于正数：原码，反码，补码都是一样的</li><li>对于负数：原码，反码，补码都是不一样的</li></ul><h3 id="_02、字符缓冲流" tabindex="-1">02、字符缓冲流 <a class="header-anchor" href="#_02、字符缓冲流" aria-label="Permalink to &quot;02、字符缓冲流&quot;">​</a></h3><p>BufferedReader 类继承自 Reader 类，提供了一些便捷的方法，例如 <code>readLine()</code> 方法可以一次读取一行数据，而不是一个字符一个字符地读取。</p><p>BufferedWriter 类继承自 Writer 类，提供了一些便捷的方法，例如 <code>newLine()</code> 方法可以写入一个系统特定的行分隔符。</p><h4 id="_1-构造方法-1" tabindex="-1">1）构造方法 <a class="header-anchor" href="#_1-构造方法-1" aria-label="Permalink to &quot;1）构造方法&quot;">​</a></h4><ul><li><code>BufferedReader(Reader in)</code> ：创建一个新的缓冲输入流，注意参数类型为<strong>Reader</strong>。</li><li><code>BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流，注意参数类型为<strong>Writer</strong>。</li></ul><p>代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建字符缓冲输入流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> br </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#7B7F8B;">// 创建字符缓冲输出流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建字符缓冲输入流</span></span>
<span class="line"><span style="color:#24292E;">BufferedReader br </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 创建字符缓冲输出流</span></span>
<span class="line"><span style="color:#24292E;">BufferedWriter bw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">));</span></span></code></pre></div><h4 id="_2-字符缓冲流特有方法" tabindex="-1">2）字符缓冲流特有方法 <a class="header-anchor" href="#_2-字符缓冲流特有方法" aria-label="Permalink to &quot;2）字符缓冲流特有方法&quot;">​</a></h4><p>字符缓冲流的基本方法与<a href="https://tobebetterjavaer.com/io/reader-writer.html" target="_blank" rel="noreferrer">普通字符流</a>调用方式一致，这里不再赘述，我们来看字符缓冲流<strong>特有</strong>的方法。</p><ul><li>BufferedReader：<code>String readLine()</code>: <strong>读一行数据</strong>，读取到最后返回 null</li><li>BufferedWriter：<code>newLine()</code>: <strong>换行</strong>，由系统定义换行符。</li></ul><p>来看 <code>readLine()</code>方法的代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> br </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#7B7F8B;">// 定义字符串,保存读取的一行文字</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line  </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 循环读取,读取到最后返回null</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> br.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">())</span><span style="color:#F286C4;">!=</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(line);</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">br.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建流对象</span></span>
<span class="line"><span style="color:#24292E;">BufferedReader br </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 定义字符串,保存读取的一行文字</span></span>
<span class="line"><span style="color:#24292E;">String line  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 循环读取,读取到最后返回null</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> br.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(line);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">br.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>再来看 <code>newLine()</code> 方法的代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BfferedWriter</span><span style="color:#F6F6F4;"> bw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#7B7F8B;">// 写出数据</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 写出换行</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建流对象</span></span>
<span class="line"><span style="color:#24292E;">BfferedWriter bw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">// 写出数据</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 写出换行</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;默&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;王&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="_03、字符缓冲流练习" tabindex="-1">03、字符缓冲流练习 <a class="header-anchor" href="#_03、字符缓冲流练习" aria-label="Permalink to &quot;03、字符缓冲流练习&quot;">​</a></h3><p>来欣赏一下我写的这篇诗：</p><blockquote><p>6.岑夫子，丹丘生，将进酒，杯莫停。</p><p>1.君不见黄河之水天上来，奔流到海不复回。</p><p>8.钟鼓馔玉不足贵，但愿长醉不愿醒。</p><p>3.人生得意须尽欢，莫使金樽空对月。</p><p>5.烹羊宰牛且为乐，会须一饮三百杯。</p><p>2.君不见高堂明镜悲白发，朝如青丝暮成雪。</p><p>7.与君歌一曲，请君为我倾耳听。</p><p>4.天生我材必有用，千金散尽还复来。</p></blockquote><p>欣赏完了没？</p><p>估计你也看出来了，这是李白写的《将进酒》，不是我王二写的。😝</p><p>不过，顺序是乱的，还好，我都编了号。那如何才能按照正确的顺序来呢？</p><p>来看代码实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建map集合,保存文本数据,键为序号,值为文字</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, String&gt; lineMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建流对象  源</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> br </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/test.log</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#7B7F8B;">//目标</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/test1.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 读取数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> br.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">())</span><span style="color:#F286C4;">!=</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 解析文本</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (line.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">continue</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] split </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> line.</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(Pattern.</span><span style="color:#62E884;">quote</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 保存到集合</span></span>
<span class="line"><span style="color:#F6F6F4;">    lineMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(split[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">], split[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">br.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 遍历map集合</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> lineMap.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">(); i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">valueOf</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 获取map中文本</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lineMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(key);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 写出拼接文本</span></span>
<span class="line"><span style="color:#F6F6F4;">    bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(key</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">value);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 写出换行</span></span>
<span class="line"><span style="color:#F6F6F4;">    bw.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 释放资源</span></span>
<span class="line"><span style="color:#F6F6F4;">bw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建map集合,保存文本数据,键为序号,值为文字</span></span>
<span class="line"><span style="color:#24292E;">HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lineMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建流对象  源</span></span>
<span class="line"><span style="color:#24292E;">BufferedReader br </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/test.log&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//目标</span></span>
<span class="line"><span style="color:#24292E;">BufferedWriter bw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/test1.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取数据</span></span>
<span class="line"><span style="color:#24292E;">String line;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> br.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 解析文本</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (line.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] split </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> line.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(Pattern.</span><span style="color:#6F42C1;">quote</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 保存到集合</span></span>
<span class="line"><span style="color:#24292E;">    lineMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(split[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], split[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">br.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 遍历map集合</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> lineMap.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取map中文本</span></span>
<span class="line"><span style="color:#24292E;">    String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lineMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写出拼接文本</span></span>
<span class="line"><span style="color:#24292E;">    bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(key</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写出换行</span></span>
<span class="line"><span style="color:#24292E;">    bw.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 释放资源</span></span>
<span class="line"><span style="color:#24292E;">bw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>这里面用到的知识都是我们前面学过的，比如说 <a href="https://tobebetterjavaer.com/collection/hashmap.html" target="_blank" rel="noreferrer">HashMap</a>，<a href="https://tobebetterjavaer.com/string/split.html" target="_blank" rel="noreferrer">字符串分割</a>，包括刚刚学习的字符缓冲流。</p><p>来看输出结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">1.君不见黄河之水天上来，奔流到海不复回。</span></span>
<span class="line"><span style="color:#f6f6f4;">2.君不见高堂明镜悲白发，朝如青丝暮成雪。</span></span>
<span class="line"><span style="color:#f6f6f4;">3.人生得意须尽欢，莫使金樽空对月。</span></span>
<span class="line"><span style="color:#f6f6f4;">4.天生我材必有用，千金散尽还复来。</span></span>
<span class="line"><span style="color:#f6f6f4;">5.烹羊宰牛且为乐，会须一饮三百杯。</span></span>
<span class="line"><span style="color:#f6f6f4;">6.岑夫子，丹丘生，将进酒，杯莫停。</span></span>
<span class="line"><span style="color:#f6f6f4;">7.与君歌一曲，请君为我倾耳听。</span></span>
<span class="line"><span style="color:#f6f6f4;">8.钟鼓馔玉不足贵，但愿长醉不愿醒。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1.君不见黄河之水天上来，奔流到海不复回。</span></span>
<span class="line"><span style="color:#24292e;">2.君不见高堂明镜悲白发，朝如青丝暮成雪。</span></span>
<span class="line"><span style="color:#24292e;">3.人生得意须尽欢，莫使金樽空对月。</span></span>
<span class="line"><span style="color:#24292e;">4.天生我材必有用，千金散尽还复来。</span></span>
<span class="line"><span style="color:#24292e;">5.烹羊宰牛且为乐，会须一饮三百杯。</span></span>
<span class="line"><span style="color:#24292e;">6.岑夫子，丹丘生，将进酒，杯莫停。</span></span>
<span class="line"><span style="color:#24292e;">7.与君歌一曲，请君为我倾耳听。</span></span>
<span class="line"><span style="color:#24292e;">8.钟鼓馔玉不足贵，但愿长醉不愿醒。</span></span></code></pre></div><hr>`,109),c=[t];function r(y,F,i,E,u,d){return n(),a("div",null,c)}const h=s(e,[["render",r]]);export{b as __pageData,h as default};
