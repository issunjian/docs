import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/arraylist-d01f248c-114f-47e3-af18-7135feac2a5e.8ec337c5.png",o="/docs/assets/arraylist-01.f7750632.png",e="/docs/assets/arraylist-02.c33097ea.png",B=JSON.parse('{"title":"深入探讨 Java ArrayList：从源码分析到实践应用","description":"本文详细解析了 Java ArrayList 的实现原理、功能特点以及源码，为您提供了 ArrayList 的实际应用示例和性能优化建议。阅读本文，将帮助您更深入地理解 ArrayList，从而在实际编程中充分发挥其优势。","frontmatter":{"title":"深入探讨 Java ArrayList：从源码分析到实践应用","shortTitle":"ArrayList详解（附源码）","category":["Java核心"],"tag":["集合框架（容器）"],"description":"本文详细解析了 Java ArrayList 的实现原理、功能特点以及源码，为您提供了 ArrayList 的实际应用示例和性能优化建议。阅读本文，将帮助您更深入地理解 ArrayList，从而在实际编程中充分发挥其优势。","head":[["meta",{"name":"keywords","content":"Java,ArrayList,ArrayList源码,源码分析, java arraylist"}]]},"headers":[],"relativePath":"backend/tobetter/collection/arraylist.md","filePath":"backend/tobetter/collection/arraylist.md"}'),t={name:"backend/tobetter/collection/arraylist.md"},c=l(`<h1 id="_6-3-arraylist详解-附源码" tabindex="-1">6.3 ArrayList详解（附源码） <a class="header-anchor" href="#_6-3-arraylist详解-附源码" aria-label="Permalink to &quot;6.3 ArrayList详解（附源码）&quot;">​</a></h1><p>“二哥，听说今天我们开讲 ArrayList 了？好期待哦！”三妹明知故问，这个托配合得依然天衣无缝。</p><p>“是的呀，三妹。”我肯定地点了点头，继续说道，“ArrayList 可以称得上是集合框架方面最常用的类了，可以和 HashMap 一较高下。”</p><p>从名字就可以看得出来，ArrayList 实现了 List 接口，并且是基于数组实现的。</p><p>数组的大小是固定的，一旦创建的时候指定了大小，就不能再调整了。也就是说，如果数组满了，就不能再添加任何元素了。ArrayList 在数组的基础上实现了自动扩容，并且提供了比数组更丰富的预定义方法（各种增删改查），非常灵活。</p><p>Java 这门编程语言和别的编程语言，比如说 C语言的不同之处就在这里，如果是 C语言的话，你就必须得动手实现自己的 ArrayList，原生的库函数里面是没有的。</p><h3 id="_01、创建-arraylist" tabindex="-1">01、创建 ArrayList <a class="header-anchor" href="#_01、创建-arraylist" aria-label="Permalink to &quot;01、创建 ArrayList&quot;">​</a></h3><p>“二哥，<strong>如何创建一个 ArrayList 啊</strong>？”三妹问。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; alist </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; alist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;();</span></span></code></pre></div><p>可以通过上面的语句来创建一个字符串类型的 ArrayList（通过尖括号来限定 ArrayList 中元素的类型，如果尝试添加其他类型的元素，将会产生编译错误），更简化的写法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; alist </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; alist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span></code></pre></div><p>由于 ArrayList 实现了 List 接口，所以 alist 变量的类型可以是 List 类型；new 关键字声明后的尖括号中可以不再指定元素的类型，因为编译器可以通过前面尖括号中的类型进行智能推断。</p><p>此时会调用无参构造方法（见下面的代码）创建一个空的数组，常量DEFAULTCAPACITY_EMPTY_ELEMENTDATA的值为 <code>{}</code>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ArrayList</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArrayList</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果非常确定 ArrayList 中元素的个数，在创建的时候还可以指定初始大小。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; alist </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; alist </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span></code></pre></div><p>这样做的好处是，可以有效地避免在添加新的元素时进行不必要的扩容。</p><h3 id="_02、向-arraylist-中添加元素" tabindex="-1">02、向 ArrayList 中添加元素 <a class="header-anchor" href="#_02、向-arraylist-中添加元素" aria-label="Permalink to &quot;02、向 ArrayList 中添加元素&quot;">​</a></h3><p>“二哥，<strong>那怎么向 ArrayList 中添加一个元素呢</strong>？”三妹继续问。</p><p>可以通过 <code>add()</code> 方法向 ArrayList 中添加一个元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>我们来跟一下源码，看看 add 方法到底执行了哪些操作。跟的过程中，我们也可以偷师到 Java 源码的作者（大师级程序员）是如何优雅地写代码的。</p><p>我先给个结论，全当抛砖引玉。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">堆栈过程图示：</span></span>
<span class="line"><span style="color:#f6f6f4;">add(element)</span></span>
<span class="line"><span style="color:#f6f6f4;">└── if (size == elementData.length) // 判断是否需要扩容</span></span>
<span class="line"><span style="color:#f6f6f4;">    ├── grow(minCapacity) // 扩容</span></span>
<span class="line"><span style="color:#f6f6f4;">    │   └── newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1) // 计算新的数组容量</span></span>
<span class="line"><span style="color:#f6f6f4;">    │   └── Arrays.copyOf(elementData, newCapacity) // 创建新的数组</span></span>
<span class="line"><span style="color:#f6f6f4;">    ├── elementData[size++] = element; // 添加新元素</span></span>
<span class="line"><span style="color:#f6f6f4;">    └── return true; // 添加成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">堆栈过程图示：</span></span>
<span class="line"><span style="color:#24292e;">add(element)</span></span>
<span class="line"><span style="color:#24292e;">└── if (size == elementData.length) // 判断是否需要扩容</span></span>
<span class="line"><span style="color:#24292e;">    ├── grow(minCapacity) // 扩容</span></span>
<span class="line"><span style="color:#24292e;">    │   └── newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1) // 计算新的数组容量</span></span>
<span class="line"><span style="color:#24292e;">    │   └── Arrays.copyOf(elementData, newCapacity) // 创建新的数组</span></span>
<span class="line"><span style="color:#24292e;">    ├── elementData[size++] = element; // 添加新元素</span></span>
<span class="line"><span style="color:#24292e;">    └── return true; // 添加成功</span></span></code></pre></div><p>来具体看一下，先是 <code>add()</code> 方法的源码（已添加好详细地注释）</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 将指定元素添加到 ArrayList 的末尾</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#7B7F8B;"> 要添加的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 添加成功返回 true</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(size </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">// 确保 ArrayList 能够容纳新的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e; </span><span style="color:#7B7F8B;">// 在 ArrayList 的末尾添加指定元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 将指定元素添加到 ArrayList 的末尾</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">e</span><span style="color:#6A737D;"> 要添加的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 添加成功返回 true</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(size </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 确保 ArrayList 能够容纳新的元素</span></span>
<span class="line"><span style="color:#24292E;">    elementData[size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e; </span><span style="color:#6A737D;">// 在 ArrayList 的末尾添加指定元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>参数 e 为要添加的元素，此时的值为“沉默王二”，size 为 ArrayList 的长度，此时为 0。</p><p>继续跟下去，来看看 <code>ensureCapacityInternal()</code>方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 确保 ArrayList 能够容纳指定容量的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">minCapacity</span><span style="color:#7B7F8B;"> 指定容量的最小值</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (elementData </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { </span><span style="color:#7B7F8B;">// 如果 elementData 还是默认的空数组</span></span>
<span class="line"><span style="color:#F6F6F4;">        minCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">max</span><span style="color:#F6F6F4;">(DEFAULT_CAPACITY, minCapacity); </span><span style="color:#7B7F8B;">// 使用 DEFAULT_CAPACITY 和指定容量的最小值中的较大值</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureExplicitCapacity</span><span style="color:#F6F6F4;">(minCapacity); </span><span style="color:#7B7F8B;">// 确保容量能够容纳指定容量的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 确保 ArrayList 能够容纳指定容量的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">minCapacity</span><span style="color:#6A737D;"> 指定容量的最小值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (elementData </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { </span><span style="color:#6A737D;">// 如果 elementData 还是默认的空数组</span></span>
<span class="line"><span style="color:#24292E;">        minCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(DEFAULT_CAPACITY, minCapacity); </span><span style="color:#6A737D;">// 使用 DEFAULT_CAPACITY 和指定容量的最小值中的较大值</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureExplicitCapacity</span><span style="color:#24292E;">(minCapacity); </span><span style="color:#6A737D;">// 确保容量能够容纳指定容量的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时：</p><ul><li>参数 minCapacity 为 1（size+1 传过来的）</li><li>elementData 为存放 ArrayList 元素的底层数组，前面声明 ArrayList 的时候讲过了，此时为空 <code>{}</code></li><li>DEFAULTCAPACITY_EMPTY_ELEMENTDATA 前面也讲过了，为 <code>{}</code></li></ul><p>所以，if 条件此时为 true，if 语句<code>minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity)</code>要执行。</p><p>DEFAULT_CAPACITY 为 10（见下面的代码），所以执行完这行代码后，minCapacity 为 10，<code>Math.max()</code> 方法的作用是取两个当中最大的那个。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> DEFAULT_CAPACITY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> DEFAULT_CAPACITY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span></code></pre></div><p>接下来执行 <code>ensureExplicitCapacity()</code> 方法，来看一下源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 检查并确保集合容量足够，如果需要则增加集合容量。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">minCapacity</span><span style="color:#7B7F8B;"> 所需最小容量</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ensureExplicitCapacity</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 检查是否超出了数组范围，确保不会溢出</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (minCapacity </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> elementData.length </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果需要增加容量，则调用 grow 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">grow</span><span style="color:#F6F6F4;">(minCapacity);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 检查并确保集合容量足够，如果需要则增加集合容量。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">minCapacity</span><span style="color:#6A737D;"> 所需最小容量</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ensureExplicitCapacity</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查是否超出了数组范围，确保不会溢出</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (minCapacity </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> elementData.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果需要增加容量，则调用 grow 方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">grow</span><span style="color:#24292E;">(minCapacity);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时：</p><ul><li>参数 minCapacity 为 10</li><li>elementData.length 为 0（数组为空）</li></ul><p>所以 10-0&gt;0，if 条件为 true，进入 if 语句执行 <code>grow()</code> 方法，来看源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 扩容 ArrayList 的方法，确保能够容纳指定容量的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">minCapacity</span><span style="color:#7B7F8B;"> 指定容量的最小值</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">grow</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> minCapacity) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 检查是否会导致溢出，oldCapacity 为当前数组长度</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> oldCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> elementData.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> newCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> oldCapacity </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (oldCapacity </span><span style="color:#F286C4;">&gt;&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 扩容至原来的1.5倍</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (newCapacity </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> minCapacity </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果还是小于指定容量的最小值</span></span>
<span class="line"><span style="color:#F6F6F4;">        newCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> minCapacity; </span><span style="color:#7B7F8B;">// 直接扩容至指定容量的最小值</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (newCapacity </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> MAX_ARRAY_SIZE </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果超出了数组的最大长度</span></span>
<span class="line"><span style="color:#F6F6F4;">        newCapacity </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hugeCapacity</span><span style="color:#F6F6F4;">(minCapacity); </span><span style="color:#7B7F8B;">// 扩容至数组的最大长度</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 将当前数组复制到一个新数组中，长度为 newCapacity</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(elementData, newCapacity);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 扩容 ArrayList 的方法，确保能够容纳指定容量的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">minCapacity</span><span style="color:#6A737D;"> 指定容量的最小值</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grow</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> minCapacity) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 检查是否会导致溢出，oldCapacity 为当前数组长度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> oldCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> elementData.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldCapacity </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (oldCapacity </span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 扩容至原来的1.5倍</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newCapacity </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> minCapacity </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果还是小于指定容量的最小值</span></span>
<span class="line"><span style="color:#24292E;">        newCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> minCapacity; </span><span style="color:#6A737D;">// 直接扩容至指定容量的最小值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (newCapacity </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> MAX_ARRAY_SIZE </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果超出了数组的最大长度</span></span>
<span class="line"><span style="color:#24292E;">        newCapacity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hugeCapacity</span><span style="color:#24292E;">(minCapacity); </span><span style="color:#6A737D;">// 扩容至数组的最大长度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将当前数组复制到一个新数组中，长度为 newCapacity</span></span>
<span class="line"><span style="color:#24292E;">    elementData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(elementData, newCapacity);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此时：</p><ul><li>参数 minCapacity 为 10</li><li>变量 oldCapacity 为 0</li></ul><p>所以 newCapacity 也为 0，于是 <code>newCapacity - minCapacity</code> 等于 -10 小于 0，于是第一个 if 条件为 true，执行第一个 if 语句 <code>newCapacity = minCapacity</code>，然后 newCapacity 为 10。</p><p>紧接着执行 <code>elementData = Arrays.copyOf(elementData, newCapacity);</code>，也就是进行数组的第一次扩容，长度为 10。</p><p>回到 <code>add()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(size </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(E e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(size </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    elementData[size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行 <code>elementData[size++] = e</code>。</p><p>此时：</p><ul><li>size 为 0</li><li>e 为 “沉默王二”</li></ul><p>所以数组的第一个元素（下标为 0） 被赋值为“沉默王二”，接着返回 true，第一次 add 方法执行完毕。</p><p>PS：add 过程中会遇到一个令新手感到困惑的右移操作符 <code>&gt;&gt;</code>，借这个机会来解释一下。</p><p>ArrayList 在第一次执行 add 后会扩容为 10，那 ArrayList 第二次扩容发生在什么时候呢？</p><p>答案是添加第 11 个元素时，大家可以尝试分析一下这个过程。</p><h3 id="_03、右移操作符" tabindex="-1">03、右移操作符 <a class="header-anchor" href="#_03、右移操作符" aria-label="Permalink to &quot;03、右移操作符&quot;">​</a></h3><p>“oldCapacity 等于 10，<code>oldCapacity &gt;&gt; 1</code> 这个表达式等于多少呢？三妹你知道吗？”我问三妹。</p><p>“不知道啊，<code>&gt;&gt;</code> 是什么意思呢？”三妹很疑惑。</p><p>“<code>&gt;&gt;</code> 是右移运算符，<code>oldCapacity &gt;&gt; 1</code> 相当于 oldCapacity 除以 2。”我给三妹解释道，“在计算机内部，都是按照二进制存储的，10 的二进制就是 1010，也就是 <code>0*2^0 + 1*2^1 + 0*2^2 + 1*2^3</code>=0+2+0+8=10 。。。。。。”</p><p>还没等我解释完，三妹就打断了我，“二哥，能再详细解释一下到底为什么吗？”</p><p>“当然可以啊。”我拍着胸脯对三妹说。</p><p>先从位权的含义说起吧。</p><p>平常我们使用的是十进制数，比如说 39，并不是简单的 3 和 9，3 表示的是 <code>3*10 = 30</code>，9 表示的是 <code>9*1 = 9</code>，和 3 相乘的 10，和 9 相乘的 1，就是<strong>位权</strong>。位数不同，位权就不同，第 1 位是 10 的 0 次方（也就是 <code>10^0=1</code>），第 2 位是 10 的 1 次方（<code>10^1=10</code>），第 3 位是 10 的 2 次方（<code>10^2=100</code>），最右边的是第一位，依次类推。</p><p>位权这个概念同样适用于二进制，第 1 位是 2 的 0 次方（也就是 <code>2^0=1</code>），第 2 位是 2 的 1 次方（<code>2^1=2</code>），第 3 位是 2 的 2 次方（<code>2^2=4</code>），第 34 位是 2 的 3 次方（<code>2^3=8</code>）。</p><p>十进制的情况下，10 是基数，二进制的情况下，2 是基数。</p><p>10 在十进制的表示法是 <code>0*10^0+1*10^1</code>=0+10=10。</p><p>10 的二进制数是 1010，也就是 <code>0*2^0 + 1*2^1 + 0*2^2 + 1*2^3</code>=0+2+0+8=10。</p><p>然后是<strong>移位运算</strong>，移位分为左移和右移，在 Java 中，左移的运算符是 <code>&lt;&lt;</code>，右移的运算符 <code>&gt;&gt;</code>。</p><p>拿 <code>oldCapacity &gt;&gt; 1</code> 来说吧，<code>&gt;&gt;</code> 左边的是被移位的值，此时是 10，也就是二进制 <code>1010</code>；<code>&gt;&gt;</code> 右边的是要移位的位数，此时是 1。</p><p>1010 向右移一位就是 101，空出来的最高位此时要补 0，也就是 0101。</p><p>“那为什么不补 1 呢？”三妹这个问题很尖锐。</p><p>“因为是算术右移，并且是正数，所以最高位补 0；如果表示的是负数，就需要补 1。”我慢吞吞地回答道，“0101 的十进制就刚好是 <code>1*2^0 + 0*2^1 + 1*2^2 + 0*2^3</code>=1+0+4+0=5，如果多移几个数来找规律的话，就会发现，右移 1 位是原来的 1/2，右移 2 位是原来的 1/4，诸如此类。”</p><p>也就是说，ArrayList 的大小会扩容为原来的大小+原来大小/2，也就是 1.5 倍。</p><p>这下明白了吧？</p><p>你可以通过在 ArrayList 中添加第 11 个元素来 debug 验证一下。</p><img src="`+p+`"><h3 id="_04、向-arraylist-的指定位置添加元素" tabindex="-1">04、向 ArrayList 的指定位置添加元素 <a class="header-anchor" href="#_04、向-arraylist-的指定位置添加元素" aria-label="Permalink to &quot;04、向 ArrayList 的指定位置添加元素&quot;">​</a></h3><p>除了 <code>add(E e)</code> 方法，还可以通过 <code>add(int index, E element)</code> 方法把元素添加到 ArrayList 的指定位置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><code>add(int index, E element)</code> 方法的源码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 在指定位置插入一个元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;">   要插入元素的位置</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#7B7F8B;"> 要插入的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围，则抛出此异常</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">rangeCheckForAdd</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">ensureCapacityInternal</span><span style="color:#F6F6F4;">(size </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">// 确保容量足够，如果需要扩容就扩容</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(elementData, index, elementData, index </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">            size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> index); </span><span style="color:#7B7F8B;">// 将 index 及其后面的元素向后移动一位</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[index] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 将元素插入到指定位置</span></span>
<span class="line"><span style="color:#F6F6F4;">    size</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 元素个数加一</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 在指定位置插入一个元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;">   要插入元素的位置</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">element</span><span style="color:#6A737D;"> 要插入的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围，则抛出此异常</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, E element) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheckForAdd</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">ensureCapacityInternal</span><span style="color:#24292E;">(size </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 确保容量足够，如果需要扩容就扩容</span></span>
<span class="line"><span style="color:#24292E;">    System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index, elementData, index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index); </span><span style="color:#6A737D;">// 将 index 及其后面的元素向后移动一位</span></span>
<span class="line"><span style="color:#24292E;">    elementData[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 将元素插入到指定位置</span></span>
<span class="line"><span style="color:#24292E;">    size</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 元素个数加一</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>add(int index, E element)</code>方法会调用到一个非常重要的<a href="https://tobebetterjavaer.com/oo/native-method.html" target="_blank" rel="noreferrer">本地方法</a> <code>System.arraycopy()</code>，它会对数组进行复制（要插入位置上的元素往后复制）。</p><p>来细品一下。</p><p>这是 arraycopy() 的语法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> src, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> srcPos, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> dest, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> destPos, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> length);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(Object src, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> srcPos, Object dest, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> destPos, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length);</span></span></code></pre></div><p>在 <code>ArrayList.add(int index, E element)</code> 方法中，具体用法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(elementData, index, elementData, index </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> index);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index, elementData, index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index);</span></span></code></pre></div><ul><li>elementData：表示要复制的源数组，即 ArrayList 中的元素数组。</li><li>index：表示源数组中要复制的起始位置，即需要将 index 及其后面的元素向后移动一位。</li><li>elementData：表示要复制到的目标数组，即 ArrayList 中的元素数组。</li><li>index + 1：表示目标数组中复制的起始位置，即将 index 及其后面的元素向后移动一位后，应该插入到的位置。</li><li>size - index：表示要复制的元素个数，即需要将 index 及其后面的元素向后移动一位，需要移动的元素个数为 size - index。</li></ul><p>“三妹，注意看，我画幅图来表示下。”我认真地做起了图。</p><img src="`+o+`"><h3 id="_05、更新-arraylist-中的元素" tabindex="-1">05、更新 ArrayList 中的元素 <a class="header-anchor" href="#_05、更新-arraylist-中的元素" aria-label="Permalink to &quot;05、更新 ArrayList 中的元素&quot;">​</a></h3><p>“二哥，那怎么<strong>更新 ArrayList 中的元素</strong>呢？”三妹继续问。</p><p>可以使用 <code>set()</code> 方法来更改 ArrayList 中的元素，需要提供下标和新元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>假设原来 0 位置上的元素为“沉默王三”，现在可以将其更新为“沉默王四”。</p><p>来看一下 <code>set()</code> 方法的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 用指定元素替换指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;">   要替换的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#7B7F8B;"> 要存储在指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 先前在指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围，则抛出此异常</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">rangeCheck</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> oldValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 获取原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[index] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 将新元素替换到指定位置上</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldValue; </span><span style="color:#7B7F8B;">// 返回原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用指定元素替换指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;">   要替换的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">element</span><span style="color:#6A737D;"> 要存储在指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 先前在指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围，则抛出此异常</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, E element) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheck</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    E oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 获取原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#24292E;">    elementData[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 将新元素替换到指定位置上</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue; </span><span style="color:#6A737D;">// 返回原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法会先对指定的下标进行检查，看是否越界，然后替换新值并返回旧值。</p><h3 id="_06、删除-arraylist-中的元素" tabindex="-1">06、删除 ArrayList 中的元素 <a class="header-anchor" href="#_06、删除-arraylist-中的元素" aria-label="Permalink to &quot;06、删除 ArrayList 中的元素&quot;">​</a></h3><p>“二哥，那怎么<strong>删除 ArrayList 中的元素</strong>呢？”三妹继续问。</p><p><code>remove(int index)</code> 方法用于删除指定下标位置上的元素，<code>remove(Object o)</code> 方法用于删除指定值的元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>先来看 <code>remove(int index)</code> 方法的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 删除指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要删除的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 先前在指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围，则抛出此异常</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">rangeCheck</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> oldValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 获取要删除的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> numMoved </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 计算需要移动的元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (numMoved </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果需要移动元素，就用 System.arraycopy 方法实现</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(elementData, index</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, elementData, index,</span></span>
<span class="line"><span style="color:#F6F6F4;">                numMoved);</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">size] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将数组末尾的元素置为 null，让 GC 回收该元素占用的空间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldValue; </span><span style="color:#7B7F8B;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 删除指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要删除的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 先前在指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围，则抛出此异常</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheck</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否越界</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    E oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 获取要删除的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numMoved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 计算需要移动的元素个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (numMoved </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果需要移动元素，就用 System.arraycopy 方法实现</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, elementData, index,</span></span>
<span class="line"><span style="color:#24292E;">                numMoved);</span></span>
<span class="line"><span style="color:#24292E;">    elementData[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">size] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将数组末尾的元素置为 null，让 GC 回收该元素占用的空间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue; </span><span style="color:#6A737D;">// 返回被删除的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是，在 ArrayList 中，删除元素时，需要将删除位置后面的元素向前移动一位，以填补删除位置留下的空缺。如果需要移动元素，则需要使用 System.arraycopy 方法将删除位置后面的元素向前移动一位。最后，将数组末尾的元素置为 null，以便让垃圾回收机制回收该元素占用的空间。</p><p>再来看 <code>remove(Object o)</code> 方法的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 删除列表中第一次出现的指定元素（如果存在）。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#7B7F8B;"> 要删除的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 如果列表包含指定元素，则返回 true；否则返回 false</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要删除的元素是 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; index </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; index</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 遍历列表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (elementData[index] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果找到了 null 元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">fastRemove</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 调用 fastRemove 方法快速删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回 true，表示成功删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果要删除的元素不是 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; index </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; index</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 遍历列表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(elementData[index])) { </span><span style="color:#7B7F8B;">// 如果找到了要删除的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">fastRemove</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 调用 fastRemove 方法快速删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 返回 true，表示成功删除元素</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 如果找不到要删除的元素，则返回 false</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 删除列表中第一次出现的指定元素（如果存在）。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">o</span><span style="color:#6A737D;"> 要删除的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 如果列表包含指定元素，则返回 true；否则返回 false</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要删除的元素是 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 遍历列表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (elementData[index] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果找到了 null 元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">fastRemove</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 调用 fastRemove 方法快速删除元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 true，表示成功删除元素</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果要删除的元素不是 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; index </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; index</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 遍历列表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(elementData[index])) { </span><span style="color:#6A737D;">// 如果找到了要删除的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">fastRemove</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 调用 fastRemove 方法快速删除元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 返回 true，表示成功删除元素</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果找不到要删除的元素，则返回 false</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法通过遍历的方式找到要删除的元素，null 的时候使用 == 操作符判断，非 null 的时候使用 <code>equals()</code> 方法，然后调用 <code>fastRemove()</code> 方法。</p><p>注意：</p><ul><li>有相同元素时，只会删除第一个。</li><li>判断两个元素是否相等，可以参考<a href="https://tobebetterjavaer.com/string/equals.html" target="_blank" rel="noreferrer">Java如何判断两个字符串是否相等</a></li></ul><p>继续往后面跟，来看一下 <code>fastRemove()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 快速删除指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要删除的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fastRemove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> numMoved </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 计算需要移动的元素个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (numMoved </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果需要移动元素，就用 System.arraycopy 方法实现</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.</span><span style="color:#62E884;">arraycopy</span><span style="color:#F6F6F4;">(elementData, index</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, elementData, index,</span></span>
<span class="line"><span style="color:#F6F6F4;">                numMoved);</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">size] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 将数组末尾的元素置为 null，让 GC 回收该元素占用的空间</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 快速删除指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要删除的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fastRemove</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> numMoved </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 计算需要移动的元素个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (numMoved </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果需要移动元素，就用 System.arraycopy 方法实现</span></span>
<span class="line"><span style="color:#24292E;">        System.</span><span style="color:#6F42C1;">arraycopy</span><span style="color:#24292E;">(elementData, index</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, elementData, index,</span></span>
<span class="line"><span style="color:#24292E;">                numMoved);</span></span>
<span class="line"><span style="color:#24292E;">    elementData[</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">size] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 将数组末尾的元素置为 null，让 GC 回收该元素占用的空间</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>同样是调用 <code>System.arraycopy()</code> 方法对数组进行复制和移动。</p><p>“三妹，注意看，我画幅图来表示下。”我认真地做起了图。</p><img src="`+e+`"><h3 id="_07、查找-arraylist-中的元素" tabindex="-1">07、查找 ArrayList 中的元素 <a class="header-anchor" href="#_07、查找-arraylist-中的元素" aria-label="Permalink to &quot;07、查找 ArrayList 中的元素&quot;">​</a></h3><p>“二哥，那怎么<strong>查找 ArrayList 中的元素</strong>呢？”三妹继续问。</p><p>如果要正序查找一个元素，可以使用 <code>indexOf()</code> 方法；如果要倒序查找一个元素，可以使用 <code>lastIndexOf()</code> 方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">alist.</span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">alist.</span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>来看一下 <code>indexOf()</code> 方法的源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回指定元素在列表中第一次出现的位置。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 如果列表不包含该元素，则返回 -1。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#7B7F8B;"> 要查找的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 指定元素在列表中第一次出现的位置；如果列表不包含该元素，则返回 -1</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要查找的元素是 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 遍历列表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (elementData[i]</span><span style="color:#F286C4;">==</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果找到了 null 元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i; </span><span style="color:#7B7F8B;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果要查找的元素不是 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> size; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 遍历列表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(elementData[i])) </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i; </span><span style="color:#7B7F8B;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 如果找不到要查找的元素，则返回 -1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回指定元素在列表中第一次出现的位置。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果列表不包含该元素，则返回 -1。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">o</span><span style="color:#6A737D;"> 要查找的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 指定元素在列表中第一次出现的位置；如果列表不包含该元素，则返回 -1</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要查找的元素是 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 遍历列表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (elementData[i]</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果找到了 null 元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果要查找的元素不是 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> size; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 遍历列表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(elementData[i])) </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果找不到要查找的元素，则返回 -1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果元素为 null 的时候使用“==”操作符，否则使用 <code>equals()</code> 方法。</p><p><code>lastIndexOf()</code> 方法和 <code>indexOf()</code> 方法类似，不过遍历的时候从最后开始。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回指定元素在列表中最后一次出现的位置。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 如果列表不包含该元素，则返回 -1。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#7B7F8B;"> 要查找的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 指定元素在列表中最后一次出现的位置；如果列表不包含该元素，则返回 -1</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">lastIndexOf</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果要查找的元素是 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 从后往前遍历列表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (elementData[i]</span><span style="color:#F286C4;">==</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 如果找到了 null 元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i; </span><span style="color:#7B7F8B;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果要查找的元素不是 null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> size</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">--</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 从后往前遍历列表</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (o.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(elementData[i])) </span><span style="color:#7B7F8B;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> i; </span><span style="color:#7B7F8B;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 如果找不到要查找的元素，则返回 -1</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回指定元素在列表中最后一次出现的位置。</span></span>
<span class="line"><span style="color:#6A737D;"> * 如果列表不包含该元素，则返回 -1。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">o</span><span style="color:#6A737D;"> 要查找的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 指定元素在列表中最后一次出现的位置；如果列表不包含该元素，则返回 -1</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lastIndexOf</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果要查找的元素是 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 从后往前遍历列表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (elementData[i]</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 如果找到了 null 元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果要查找的元素不是 null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> size</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 从后往前遍历列表</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (o.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(elementData[i])) </span><span style="color:#6A737D;">// 如果找到了要查找的元素</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i; </span><span style="color:#6A737D;">// 返回元素的索引</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 如果找不到要查找的元素，则返回 -1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>contains()</code> 方法可以判断 ArrayList 中是否包含某个元素，其内部就是通过 <code>indexOf()</code> 方法实现的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">contains</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> o) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(o) </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(Object o) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(o) </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_08、二分查找法" tabindex="-1">08、二分查找法 <a class="header-anchor" href="#_08、二分查找法" aria-label="Permalink to &quot;08、二分查找法&quot;">​</a></h3><p>如果 ArrayList 中的元素是经过排序的，就可以使用二分查找法，效率更快。</p><p><a href="https://tobebetterjavaer.com/common-tool/collections.html" target="_blank" rel="noreferrer"><code>Collections</code></a> 类的 <code>sort()</code> 方法可以对 ArrayList 进行排序，该方法会按照字母顺序对 String 类型的列表进行排序。如果是自定义类型的列表，还可以指定 Comparator 进行排序。</p><p>这里先简单地了解一下，后面会详细地讲。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; copy </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;(alist);</span></span>
<span class="line"><span style="color:#F6F6F4;">copy.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">copy.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">copy.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">copy.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Collections.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(copy);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(copy);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; copy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(alist);</span></span>
<span class="line"><span style="color:#24292E;">copy.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">copy.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;c&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">copy.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">copy.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Collections.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(copy);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(copy);</span></span></code></pre></div><p>输出结果如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[a, b, c, d]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[a, b, c, d]</span></span></code></pre></div><p>排序后就可以使用二分查找法了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Collections.</span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(copy, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(copy, </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_09、arraylist增删改查时的时间复杂度" tabindex="-1">09、ArrayList增删改查时的时间复杂度 <a class="header-anchor" href="#_09、arraylist增删改查时的时间复杂度" aria-label="Permalink to &quot;09、ArrayList增删改查时的时间复杂度&quot;">​</a></h3><p>“最后，三妹，我们来简单总结一下 ArrayList 的时间复杂度吧，方便后面学习 LinkedList 时对比。”我喝了一口水后补充道。</p><h4 id="_1-查询" tabindex="-1">1）查询 <a class="header-anchor" href="#_1-查询" aria-label="Permalink to &quot;1）查询&quot;">​</a></h4><p>时间复杂度为 O(1)，因为 ArrayList 内部使用数组来存储元素，所以可以直接根据索引来访问元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">rangeCheck</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否合法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 调用 elementData 方法获取元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 此方法不进行边界检查，因此只应由内部方法和迭代器调用。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (E) elementData[index]; </span><span style="color:#7B7F8B;">// 返回指定索引位置上的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheck</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否合法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 调用 elementData 方法获取元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 返回列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> * 此方法不进行边界检查，因此只应由内部方法和迭代器调用。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要返回的元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 列表中指定位置的元素</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">E </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (E) elementData[index]; </span><span style="color:#6A737D;">// 返回指定索引位置上的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_2-插入" tabindex="-1">2）插入 <a class="header-anchor" href="#_2-插入" aria-label="Permalink to &quot;2）插入&quot;">​</a></h4><p>添加一个元素（调用 <code>add()</code> 方法时）的时间复杂度最好情况为 O(1)，最坏情况为 O(n)。</p><ul><li>如果在列表末尾添加元素，时间复杂度为 O(1)。</li><li>如果要在列表的中间或开头插入元素，则需要将插入位置之后的元素全部向后移动一位，时间复杂度为 O(n)。</li></ul><h4 id="_3-删除" tabindex="-1">3）删除 <a class="header-anchor" href="#_3-删除" aria-label="Permalink to &quot;3）删除&quot;">​</a></h4><p>删除一个元素（调用 <code>remove(Object)</code> 方法时）的时间复杂度最好情况 O(1)，最坏情况 O(n)。</p><ul><li>如果要删除列表末尾的元素，时间复杂度为 O(1)。</li><li>如果要删除列表中间或开头的元素，则需要将删除位置之后的元素全部向前移动一位，时间复杂度为 O(n)。</li></ul><h4 id="_4-修改" tabindex="-1">4）修改 <a class="header-anchor" href="#_4-修改" aria-label="Permalink to &quot;4）修改&quot;">​</a></h4><p>修改一个元素（调用 <code>set()</code>方法时）与查询操作类似，可以直接根据索引来访问元素，时间复杂度为 O(1)。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 用指定元素替换列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#7B7F8B;"> 要替换元素的索引</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#7B7F8B;"> 要放入列表中的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IndexOutOfBoundsException</span><span style="color:#7B7F8B;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> index, </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> element) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">rangeCheck</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 检查索引是否合法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">E</span><span style="color:#F6F6F4;"> oldValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">elementData</span><span style="color:#F6F6F4;">(index); </span><span style="color:#7B7F8B;">// 获取原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    elementData[index] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element; </span><span style="color:#7B7F8B;">// 将指定位置上的元素替换为新元素</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> oldValue; </span><span style="color:#7B7F8B;">// 返回原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 用指定元素替换列表中指定位置的元素。</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">index</span><span style="color:#6A737D;"> 要替换元素的索引</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">element</span><span style="color:#6A737D;"> 要放入列表中的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IndexOutOfBoundsException</span><span style="color:#6A737D;"> 如果索引超出范围（index &lt; 0 || index &gt;= size()）</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> E </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index, E element) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">rangeCheck</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 检查索引是否合法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    E oldValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">elementData</span><span style="color:#24292E;">(index); </span><span style="color:#6A737D;">// 获取原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#24292E;">    elementData[index] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> element; </span><span style="color:#6A737D;">// 将指定位置上的元素替换为新元素</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> oldValue; </span><span style="color:#6A737D;">// 返回原来在指定位置上的元素</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_10、总结" tabindex="-1">10、总结 <a class="header-anchor" href="#_10、总结" aria-label="Permalink to &quot;10、总结&quot;">​</a></h3><p>ArrayList，如果有个中文名的话，应该叫动态数组，也就是可增长的数组，可调整大小的数组。动态数组克服了静态数组的限制，静态数组的容量是固定的，只能在首次创建的时候指定。而动态数组会随着元素的增加自动调整大小，更符合实际的开发需求。</p><p>学习集合框架，ArrayList 是第一课，也是新手进阶的重要一课。要想完全掌握 ArrayList，扩容这个机制是必须得掌握，也是面试中经常考察的一个点。</p><p>要想掌握扩容机制，就必须得读源码，也就肯定会遇到 <code>oldCapacity &gt;&gt; 1</code>，有些初学者会选择跳过，虽然不影响整体上的学习，但也错过了一个精进的机会。</p><p>计算机内部是如何表示十进制数的，右移时又发生了什么，静下心来去研究一下，你就会发现，哦，原来这么有趣呢？</p><p>“好了，三妹，这一节我们就学到这里，收工！”</p><hr>`,154),r=[c];function y(F,i,d,E,A,C){return a(),n("div",null,r)}const u=s(t,[["render",y]]);export{B as __pageData,u as default};
