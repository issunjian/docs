import{_ as a,o as e,c as t,V as s}from"./chunks/framework.c6d8cbec.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/rabbitmq/rabbitmq-02.md","filePath":"interview/backend/rabbitmq/rabbitmq-02.md"}'),r={name:"interview/backend/rabbitmq/rabbitmq-02.md"},n=s(`<h3 id="_1、如何解决消息队列的延时以及过期失效问题-消息队列满了以后该怎么处理-有几百万消息持续积压几小时-怎么办" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%BB%B6%E6%97%B6%E4%BB%A5%E5%8F%8A%E8%BF%87%E6%9C%9F%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%BB%A1%E4%BA%86%E4%BB%A5%E5%90%8E%E8%AF%A5%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%E6%9C%89%E5%87%A0%E7%99%BE%E4%B8%87%E6%B6%88%E6%81%AF%E6%8C%81%E7%BB%AD%E7%A7%AF%E5%8E%8B%E5%87%A0%E5%B0%8F%E6%97%B6%E6%80%8E%E4%B9%88%E5%8A%9E" target="_blank" rel="noreferrer">1、如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，怎么办？</a> <a class="header-anchor" href="#_1、如何解决消息队列的延时以及过期失效问题-消息队列满了以后该怎么处理-有几百万消息持续积压几小时-怎么办" aria-label="Permalink to &quot;[1、如何解决消息队列的延时以及过期失效问题？消息队列满了以后该怎么处理？有几百万消息持续积压几小时，怎么办？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#1如何解决消息队列的延时以及过期失效问题消息队列满了以后该怎么处理有几百万消息持续积压几小时怎么办)&quot;">​</a></h3><p><strong>消息积压处理办法：临时紧急扩容：</strong></p><p><strong>1、</strong> 先修复 consumer 的问题，确保其恢复消费速度，然后将现有 cnosumer 都停掉。</p><p><strong>2、</strong> 新建一个 topic，partition 是原来的 10 倍，临时建立好原先 10 倍的 queue 数量。</p><p><strong>3、</strong> 然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</p><p><strong>4、</strong> 接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</p><p><strong>5、</strong> 等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。</p><p><strong>6、</strong> MQ中消息失效：假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。那这就是第二个坑了。这就不是说数据会大量积压在 mq 里，而是大量的数据会直接搞丢。我们可以采取一个方案，就是批量重导，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上12点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据，写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><p><strong>mq消息队列块满了：</strong></p><p>如果消息积压在 mq 里，你很长时间都没有处理掉，此时导致 mq 都快写满了，咋办？这个还有别的办法吗？没有，谁让你第一个方案执行的太慢了，你临时写程序，接入数据来消费，消费一个丢弃一个，都不要了，快速消费掉所有的消息。然后走第二个方案，到了晚上再补数据吧。</p><h3 id="_2、为什么说保证-message-被可靠持久化的条件是-queue-和-exchange-具有durable-属性-同时-message-具有-persistent-属性才行" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E4%BF%9D%E8%AF%81-message-%E8%A2%AB%E5%8F%AF%E9%9D%A0%E6%8C%81%E4%B9%85%E5%8C%96%E7%9A%84%E6%9D%A1%E4%BB%B6%E6%98%AF-queue-%E5%92%8C-exchange-%E5%85%B7%E6%9C%89durable-%E5%B1%9E%E6%80%A7%E5%90%8C%E6%97%B6-message-%E5%85%B7%E6%9C%89-persistent-%E5%B1%9E%E6%80%A7%E6%89%8D%E8%A1%8C" target="_blank" rel="noreferrer">2、为什么说保证 message 被可靠持久化的条件是 queue 和 exchange 具有durable 属性，同时 message 具有 persistent 属性才行？</a> <a class="header-anchor" href="#_2、为什么说保证-message-被可靠持久化的条件是-queue-和-exchange-具有durable-属性-同时-message-具有-persistent-属性才行" aria-label="Permalink to &quot;[2、为什么说保证 message 被可靠持久化的条件是 queue 和 exchange 具有durable 属性，同时 message 具有 persistent 属性才行？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#2为什么说保证-message-被可靠持久化的条件是-queue-和-exchange-具有durable-属性同时-message-具有-persistent-属性才行)&quot;">​</a></h3><p>binding 关系可以表示为 exchange – binding – queue 。从文档中我们知道，若要求投递的 message 能够不丢失，要求 message 本身设置 persistent 属性，要求 exchange和 queue 都设置 durable 属性。</p><p>其实这问题可以这么想，若 exchange 或 queue 未设置durable 属性，则在其 crash 之后就会无法恢复，那么即使 message 设置了 persistent 属性，仍然存在 message 虽然能恢复但却无处容身的问题；同理，若 message 本身未设置persistent 属性，则 message 的持久化更无从谈起。</p><h3 id="_3、如何自动删除长时间没有消费的消息" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E5%A6%82%E4%BD%95%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E9%95%BF%E6%97%B6%E9%97%B4%E6%B2%A1%E6%9C%89%E6%B6%88%E8%B4%B9%E7%9A%84%E6%B6%88%E6%81%AF" target="_blank" rel="noreferrer">3、如何自动删除长时间没有消费的消息？</a> <a class="header-anchor" href="#_3、如何自动删除长时间没有消费的消息" aria-label="Permalink to &quot;[3、如何自动删除长时间没有消费的消息？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#3如何自动删除长时间没有消费的消息)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// 通过队列属性设置消息过期时间</span></span>
<span class="line"><span style="color:#f6f6f4;">Map&lt;String, Object&gt; argss = new HashMap&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#f6f6f4;">argss.put(&quot;x-message-ttl&quot;,6000);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">// 对每条消息设置过期时间</span></span>
<span class="line"><span style="color:#f6f6f4;">AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()</span></span>
<span class="line"><span style="color:#f6f6f4;">    .expiration(&quot;10000&quot;) // TTL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 通过队列属性设置消息过期时间</span></span>
<span class="line"><span style="color:#24292e;">Map&lt;String, Object&gt; argss = new HashMap&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#24292e;">argss.put(&quot;x-message-ttl&quot;,6000);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 对每条消息设置过期时间</span></span>
<span class="line"><span style="color:#24292e;">AMQP.BasicProperties properties = new AMQP.BasicProperties.Builder()</span></span>
<span class="line"><span style="color:#24292e;">    .expiration(&quot;10000&quot;) // TTL</span></span></code></pre></div><h3 id="_4、rabbitmq-概念里的-channel、exchange-和-queue-这些东东是逻辑概念-还是对应着进程实体-这些东东分别起什么作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4rabbitmq-%E6%A6%82%E5%BF%B5%E9%87%8C%E7%9A%84-channelexchange-%E5%92%8C-queue-%E8%BF%99%E4%BA%9B%E4%B8%9C%E4%B8%9C%E6%98%AF%E9%80%BB%E8%BE%91%E6%A6%82%E5%BF%B5%E8%BF%98%E6%98%AF%E5%AF%B9%E5%BA%94%E7%9D%80%E8%BF%9B%E7%A8%8B%E5%AE%9E%E4%BD%93%E8%BF%99%E4%BA%9B%E4%B8%9C%E4%B8%9C%E5%88%86%E5%88%AB%E8%B5%B7%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">4、RabbitMQ 概念里的 channel、exchange 和 queue 这些东东是逻辑概念，还是对应着进程实体？这些东东分别起什么作用？</a> <a class="header-anchor" href="#_4、rabbitmq-概念里的-channel、exchange-和-queue-这些东东是逻辑概念-还是对应着进程实体-这些东东分别起什么作用" aria-label="Permalink to &quot;[4、RabbitMQ 概念里的 channel、exchange 和 queue 这些东东是逻辑概念，还是对应着进程实体？这些东东分别起什么作用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#4rabbitmq-概念里的-channelexchange-和-queue-这些东东是逻辑概念还是对应着进程实体这些东东分别起什么作用)&quot;">​</a></h3><p>queue 具有自己的 erlang 进程；exchange 内部实现为保存 binding 关系的查找表；channel 是实际进行路由工作的实体，即负责按照 routing_key 将 message 投递给queue 。由 AMQP 协议描述可知，channel 是真实 TCP 连接之上的虚拟连接，所有AMQP 命令都是通过 channel 发送的，且每一个 channel 有唯一的 ID。</p><p>一个 channel 只能被单独一个操作系统线程使用，故投递到特定 channel 上的 message 是有顺序的。但一个操作系统线程上允许使用多个 channel 。channel 号为 0 的 channel 用于处理所有对于当前 connection 全局有效的帧，而 1-65535 号 channel 用于处理和特定 channel 相关的帧。AMQP 协议给出的 channel ，其中每一个 channel 运行在一个独立的线程上，多线程共享同一个 socket。</p><h3 id="_5、消费者获取消息的方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E6%B6%88%E8%B4%B9%E8%80%85%E8%8E%B7%E5%8F%96%E6%B6%88%E6%81%AF%E7%9A%84%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">5、消费者获取消息的方式？</a> <a class="header-anchor" href="#_5、消费者获取消息的方式" aria-label="Permalink to &quot;[5、消费者获取消息的方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#5消费者获取消息的方式)&quot;">​</a></h3><p>推</p><p>拉</p><h3 id="_6、使用rabbitmq有什么好处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E4%BD%BF%E7%94%A8rabbitmq%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84" target="_blank" rel="noreferrer">6、使用RabbitMQ有什么好处？</a> <a class="header-anchor" href="#_6、使用rabbitmq有什么好处" aria-label="Permalink to &quot;[6、使用RabbitMQ有什么好处？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#6使用rabbitmq有什么好处)&quot;">​</a></h3><p><strong>1、</strong> 解耦，系统A在代码中直接调用系统B和系统C的代码，如果将来D系统接入，系统A还需要修改代码，过于麻烦！</p><p><strong>2、</strong> 异步，将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度</p><p><strong>3、</strong> 削峰，并发量大的时候，所有的请求直接怼到数据库，造成数据库连接异常</p><h3 id="_7、mq的缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7mq%E7%9A%84%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">7、mq的缺点</a> <a class="header-anchor" href="#_7、mq的缺点" aria-label="Permalink to &quot;[7、mq的缺点](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#7mq的缺点)&quot;">​</a></h3><p><strong>系统可用性降低</strong></p><p>系统引入的外部依赖越多，越容易挂掉，本来你就是A系统调用BCD三个系统的接口就好了，人ABCD四个系统好好的，没啥问题，你偏加个MQ进来，万一MQ挂了咋整？MQ挂了，整套系统崩溃了，你不就完了么。</p><p><strong>系统复杂性提高</strong></p><p>硬生生加个MQ进来，你怎么保证消息没有重复消费？怎么处理消息丢失的情况？怎么保证消息传递的顺序性？头大头大，问题一大堆，痛苦不已</p><p><strong>一致性问题</strong></p><p><strong>1、</strong> A系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是BCD三个系统那里，BD两个系统写库成功了，结果C系统写库失败了，咋整？你这数据就不一致了。</p><p><strong>2、</strong> 所以消息队列实际是一种非常复杂的架构，你引入它有很多好处，但是也得针对它带来的坏处做各种额外的技术方案和架构来规避掉，最好之后，你会发现，妈呀，系统复杂度提升了一个数量级，也许是复杂了10倍。但是关键时刻，用，还是得用的</p><h3 id="_8、死信队列" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97" target="_blank" rel="noreferrer">8、死信队列？</a> <a class="header-anchor" href="#_8、死信队列" aria-label="Permalink to &quot;[8、死信队列？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#8死信队列)&quot;">​</a></h3><p>DLX，全称为 Dead-Letter-Exchange，死信交换器，死信邮箱。当消息在一个队列中变成死信 (dead message) 之后，它能被重新被发送到另一个交换器中，这个交换器就是 DLX，绑定 DLX 的队列就称之为死信队列。</p><h3 id="_9、binding绑定" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9binding%E7%BB%91%E5%AE%9A" target="_blank" rel="noreferrer">9、Binding绑定？</a> <a class="header-anchor" href="#_9、binding绑定" aria-label="Permalink to &quot;[9、Binding绑定？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#9binding绑定)&quot;">​</a></h3><p>通过绑定将交换器和队列关联起来，一般会指定一个BindingKey,这样RabbitMq就知道如何正确路由消息到队列了。</p><h3 id="_10、消息传输保证层级" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10%E6%B6%88%E6%81%AF%E4%BC%A0%E8%BE%93%E4%BF%9D%E8%AF%81%E5%B1%82%E7%BA%A7" target="_blank" rel="noreferrer">10、消息传输保证层级？</a> <a class="header-anchor" href="#_10、消息传输保证层级" aria-label="Permalink to &quot;[10、消息传输保证层级？](https://gitee.com/souyunku/DevBooks/blob/master/docs/RabbitMQ/RabbitMQ最新2021年面试题大汇总，附答案.md#10消息传输保证层级)&quot;">​</a></h3><p>At most once:最多一次。消息可能会丢失，单不会重复传输。</p><p>At least once：最少一次。消息觉不会丢失，但可能会重复传输。</p><p>Exactly once: 恰好一次，每条消息肯定仅传输一次。</p><h3 id="_11、如何保证消息的可靠性投递" tabindex="-1">11、如何保证消息的可靠性投递? <a class="header-anchor" href="#_11、如何保证消息的可靠性投递" aria-label="Permalink to &quot;11、如何保证消息的可靠性投递?&quot;">​</a></h3><h3 id="_12、如何保证消息不被重复消费-或者说-如何保证消息消费时的幂等性" tabindex="-1">12、如何保证消息不被重复消费？或者说，如何保证消息消费时的幂等性？ <a class="header-anchor" href="#_12、如何保证消息不被重复消费-或者说-如何保证消息消费时的幂等性" aria-label="Permalink to &quot;12、如何保证消息不被重复消费？或者说，如何保证消息消费时的幂等性？&quot;">​</a></h3><h3 id="_13、如何防止出现-blackholed-问题" tabindex="-1">13、如何防止出现 blackholed 问题？ <a class="header-anchor" href="#_13、如何防止出现-blackholed-问题" aria-label="Permalink to &quot;13、如何防止出现 blackholed 问题？&quot;">​</a></h3><h3 id="_14、rabbitmq-允许发送的-message-最大可达多大" tabindex="-1">14、RabbitMQ 允许发送的 message 最大可达多大？ <a class="header-anchor" href="#_14、rabbitmq-允许发送的-message-最大可达多大" aria-label="Permalink to &quot;14、RabbitMQ 允许发送的 message 最大可达多大？&quot;">​</a></h3><h3 id="_15、如何保证消息的顺序性" tabindex="-1">15、如何保证消息的顺序性? <a class="header-anchor" href="#_15、如何保证消息的顺序性" aria-label="Permalink to &quot;15、如何保证消息的顺序性?&quot;">​</a></h3><h3 id="_16、使用rabbitmq有什么好处" tabindex="-1">16、使用RabbitMQ有什么好处？ <a class="header-anchor" href="#_16、使用rabbitmq有什么好处" aria-label="Permalink to &quot;16、使用RabbitMQ有什么好处？&quot;">​</a></h3><h3 id="_17、rabbitmq-什么是信道" tabindex="-1">17、RabbitMQ 什么是信道？ <a class="header-anchor" href="#_17、rabbitmq-什么是信道" aria-label="Permalink to &quot;17、RabbitMQ 什么是信道？&quot;">​</a></h3><h3 id="_18、如何确保消息不丢失" tabindex="-1">18、如何确保消息不丢失？ <a class="header-anchor" href="#_18、如何确保消息不丢失" aria-label="Permalink to &quot;18、如何确保消息不丢失？&quot;">​</a></h3><h3 id="_19、如何保证rabbitmq消息的可靠传输" tabindex="-1">19、如何保证RabbitMQ消息的可靠传输？ <a class="header-anchor" href="#_19、如何保证rabbitmq消息的可靠传输" aria-label="Permalink to &quot;19、如何保证RabbitMQ消息的可靠传输？&quot;">​</a></h3><h3 id="_20、什么是routingkey路由键" tabindex="-1">20、什么是RoutingKey路由键？ <a class="header-anchor" href="#_20、什么是routingkey路由键" aria-label="Permalink to &quot;20、什么是RoutingKey路由键？&quot;">​</a></h3><h3 id="_21、延迟队列" tabindex="-1">21、延迟队列？ <a class="header-anchor" href="#_21、延迟队列" aria-label="Permalink to &quot;21、延迟队列？&quot;">​</a></h3><h3 id="_22、如何确保消息正确地发送至-rabbitmq-如何确保消息接收方消费了消息" tabindex="-1">22、如何确保消息正确地发送至 RabbitMQ？ 如何确保消息接收方消费了消息？ <a class="header-anchor" href="#_22、如何确保消息正确地发送至-rabbitmq-如何确保消息接收方消费了消息" aria-label="Permalink to &quot;22、如何确保消息正确地发送至 RabbitMQ？ 如何确保消息接收方消费了消息？&quot;">​</a></h3><h3 id="_23、如何保证rabbitmq消息的可靠传输" tabindex="-1">23、如何保证RabbitMQ消息的可靠传输？ <a class="header-anchor" href="#_23、如何保证rabbitmq消息的可靠传输" aria-label="Permalink to &quot;23、如何保证RabbitMQ消息的可靠传输？&quot;">​</a></h3><h3 id="_24、amqp是什么" tabindex="-1">24、AMQP是什么? <a class="header-anchor" href="#_24、amqp是什么" aria-label="Permalink to &quot;24、AMQP是什么?&quot;">​</a></h3><h3 id="_25、消息怎么路由" tabindex="-1">25、消息怎么路由？ <a class="header-anchor" href="#_25、消息怎么路由" aria-label="Permalink to &quot;25、消息怎么路由？&quot;">​</a></h3><h3 id="_26、kafka、activemq、rabbitmq、rocketmq-有什么优缺点" tabindex="-1">26、Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？ <a class="header-anchor" href="#_26、kafka、activemq、rabbitmq、rocketmq-有什么优缺点" aria-label="Permalink to &quot;26、Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？&quot;">​</a></h3><h3 id="_27、什么是rabbitmq" tabindex="-1">27、什么是rabbitmq <a class="header-anchor" href="#_27、什么是rabbitmq" aria-label="Permalink to &quot;27、什么是rabbitmq&quot;">​</a></h3>`,58),o=[n];function i(b,E,l,c,h,B){return e(),t("div",null,o)}const m=a(r,[["render",i]]);export{p as __pageData,m as default};
