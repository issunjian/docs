import{_ as a,o as e,c as s,V as o}from"./chunks/framework.c6d8cbec.js";const t="/docs/assets/jdk-install-config-6f6fdb4a-7a44-4e76-b4ea-71c070a5b220.478e57e6.png",c="/docs/assets/jdk-install-config-cbc87f87-6351-4356-936b-77850cc682d5.f5c12a9e.png",n="/docs/assets/jdk-install-config-31e739ff-b69f-47b6-9db4-8843cd8a716a.3205070d.png",p="/docs/assets/jdk-install-config-e5b91a70-2a23-4ebd-896a-5ff19f0075b1.7623b74d.png",l="/docs/assets/jdk-install-config-a32db267-febe-4852-b528-deaacb43247d.e647aafc.png",i="/docs/assets/jdk-install-config-20230408164612.5dbb3daa.png",d="/docs/assets/jdk-install-config-a0a78e05-886f-425a-8ba9-d27314f7a21c.f5a13e56.png",r="/docs/assets/jdk-install-config-fdc94ada-ae44-4a93-ba0d-92860119ad9c.763623f8.png",g="/docs/assets/jdk-install-config-919eb8f0-9869-450c-a6cb-50318dd3e2e5.2f5c670c.png",m="/docs/assets/jdk-install-config-a4c05c3e-f305-4d6a-96d2-fe345e980c3b.26d5957e.png",b="/docs/assets/jdk-install-config-26be5706-036d-4fae-99fa-d5f14b7380d4.5c4b3fba.png",f="/docs/assets/jdk-install-config-20230408165518.b2646f6e.png",h="/docs/assets/jdk-install-config-20230408173945.6d8473fb.png",v="/docs/assets/jdk-install-config-20230408174048.7f8e2623.png",J="/docs/assets/jdk-install-config-20230408174158.df800f32.png",_="/docs/assets/brew-cc01fad8-53e9-4474-8923-08e97ac7090a.e0e414e4.png",C=JSON.parse('{"title":"Windows和macOS下安装JDK教程：原生安装与包管理器（高级）","description":"本文详细介绍了在Windows和macOS平台上安装JDK的两种方法：使用原始安装包手动配置环境变量和通过包管理器（如Chocolatey和Homebrew）一键式安装。我们将对比这两种方法的优缺点，帮助您选择最适合自己的JDK安装方式。","frontmatter":{"title":"Windows和macOS下安装JDK教程：原生安装与包管理器（高级）","shortTitle":"安装JDK","category":["Java核心"],"tag":["Java概述"],"description":"本文详细介绍了在Windows和macOS平台上安装JDK的两种方法：使用原始安装包手动配置环境变量和通过包管理器（如Chocolatey和Homebrew）一键式安装。我们将对比这两种方法的优缺点，帮助您选择最适合自己的JDK安装方式。","head":[["meta",{"name":"keywords","content":"JDK安装, Windows, macOS, Chocolatey, Homebrew, 环境变量, Java开发环境, 包管理器"}]]},"headers":[],"relativePath":"backend/tobetter/overview/jdk-install-config.md","filePath":"backend/tobetter/overview/jdk-install-config.md"}'),j={name:"backend/tobetter/overview/jdk-install-config.md"},k=o('<h1 id="_1-2-安装-jdk" tabindex="-1">1.2 安装 JDK <a class="header-anchor" href="#_1-2-安装-jdk" aria-label="Permalink to &quot;1.2 安装 JDK&quot;">​</a></h1><p>因为 Java 程序必须运行在 JVM 之上，所以我们 Java 程序员在学习 Java 之前，要做的第一件事情就是安装 JDK。</p><p>什么？</p><p>又是 JVM 又是 JDK 的，能不能讲清楚一点。</p><p>要扯清楚这两者之间的关系，就必须得再扯出另外一个名词 JRE，哈哈哈。</p><p>它们之间的关系可以用这幅图来表示。</p><img src="'+t+'"><p>真的是人生无常，大肠包小肠啊。</p><h3 id="_01、jvm、jre、jdk-有什么关系" tabindex="-1">01、JVM、JRE、JDK 有什么关系 <a class="header-anchor" href="#_01、jvm、jre、jdk-有什么关系" aria-label="Permalink to &quot;01、JVM、JRE、JDK 有什么关系&quot;">​</a></h3><p>JDK（Java Development Kit）是用于开发 Java 应用程序的软件环境。里面包含运行时环境（JRE）和其他 Java 开发所需的工具，比如说解释器（java）、编译器（javac）、文档生成器（javadoc）等等。</p><p>JRE（Java Runtime Environment）是用于运行 Java 应用程序的软件环境。也就是说，如果只想运行 Java 程序而不需要开发 Java 程序的话，只需要安装 JRE 就可以了。</p><p>JVM (Java Virtual Machine) ，也就是 Java 虚拟机，由一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域等组成，屏蔽了不同操作系统（macOS、Windows、Linux）的差异性，使得 Java 能够“一次编译，到处运行”。</p><p>比如说我用 macOS 生成了一个 jar 包（里面是打包好的字节码——可以在 Java 虚拟机上运行的目标代码），可以丢给 Windows 用户直接运行，也可以直接上传到 Linux 服务器运行。</p><p>这是 Oracle 官方给出的 JDK、JRE、JVM 关系图。</p><img src="'+c+'"><p>那针对不同的操作系统，官方也提供了不同的 JDK 安装包。</p><p>如果你用百度去搜，嗯。</p><img src="'+n+'"><p>总之，是把官方给吃了。</p><p>如果你用<a href="https://tobebetterjavaer.com/nice-article/itmind/" target="_blank" rel="noreferrer">谷歌</a>去搜“JDK”关键字，能搜到官方的下载链接。</p><blockquote><p><a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">https://www.oracle.com/java/technologies/downloads/</a></p></blockquote><p>好，如果你想安装 JDK ，到官方下载。</p><img src="'+p+'"><p>最新版是 JDK 18（短期版本），上一个长期支持版本是 JDK 17，推荐安装 JDK 8，哈哈哈哈，它升任它升，我用 Java 8。往下翻就能找到了。</p><img src="'+l+'"><p>根据你的操作系统下载对应的安装包，分 Windows（exe 后缀）和 macOS（dmg 后缀）。</p><img src="'+i+'"><p>下载后双击安装，然后配置环境变量就 OK 了。</p><h3 id="_02、windows-安装-jdk" tabindex="-1">02、Windows 安装 JDK <a class="header-anchor" href="#_02、windows-安装-jdk" aria-label="Permalink to &quot;02、Windows 安装 JDK&quot;">​</a></h3><p>安装步骤就省略了，傻瓜式下一步就好。这里只说一下环境变量的配置，在电脑桌面右键点击 “此电脑”的“属性”选项。</p><img src="'+d+'"><p>选择“高级系统设置”选项</p><img src="'+r+'"><p>点击下面的“环境变量”选项</p><img src="'+g+'"><p>点击“系统变量”下面的”新建“选项</p><img src="'+m+'"><p>在”变量名“处填上”Java_Home“，”变量值“为 JDK 安装路径，比如说”<code>D:\\Program Files\\Java\\jdk1.8.0_91</code>“</p><img src="'+b+`"><p>参考链接：<a href="https://www.cnblogs.com/cnwutianhao/p/5487758.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/cnwutianhao/p/5487758.html</a></p><p>再说一种高级点的安装方法。</p><p>Windows 用户建议先安装 <a href="https://tobebetterjavaer.com/gongju/choco.html" target="_blank" rel="noreferrer">Chocolatey</a>，这是一个 Windows 下的命令行软件管理器，可以方便开发者像在 Linux 下使用 yum 命令来安装软件，或者像在 macOS 下使用 brew 命令来安装软件，非常酷炫。</p><p>安装完成后，直接执行 <code>choco install jdk8</code> 就可以安装 JDK 8 了，并且会自动将 Java 加入到环境变量中，不用再去「我的电脑」「环境变量」中新建 JAVA_HOME 并复制 JDK 安装路径配置 PATH 变量了</p><p>&lt;img src=&quot;./images/choco-80a6ced8-c25d-4371-8096-b95be48af768)</p><h3 id="_03、macos-安装-jdk" tabindex="-1">03、macOS 安装 JDK <a class="header-anchor" href="#_03、macos-安装-jdk" aria-label="Permalink to &quot;03、macOS 安装 JDK&quot;">​</a></h3><p>macOS 用户建议先安装 <a href="https://tobebetterjavaer.com/gongju/brew.html" target="_blank" rel="noreferrer">Homebrew</a>，这是一个 macOS 下的命令行软件管理器，可以通过一行命令安装 Apple（或 Linux 系统）没有预装但你需要的软件。</p><p>安装完成后，直接执行 <code>brew install openjdk@8</code> 就可以安装 JDK 8 了。</p><p>如果需要在 macOS 安装多个版本的 JDK ，比如说 JDK 17，多个版本的 JDK 怎么管理呢？可以安装一下 <a href="https://www.jenv.be/" target="_blank" rel="noreferrer">jEnv</a>，一个帮助我们管理 JAVA_HOME 的命令行工具，在 GitHub 上已经收获 4.3k 的 star。</p><p>安装：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">brew install jenv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">brew install jenv</span></span></code></pre></div><p>在 zsh 中配置 jenv：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">eval &quot;$(jenv init -)&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;</span></span>
<span class="line"><span style="color:#24292e;">eval &quot;$(jenv init -)&quot;</span></span></code></pre></div><p>通过 <code>vim ~/.zshrc</code> 把以上内容添加到配置文件中并保存（source 下可以立即生效）</p><img src="`+f+'"><p>之后通过以下方式添加 JDK 到 jenv 中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">jenv add /usr/local/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jenv add /usr/local/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home/</span></span></code></pre></div><p>JDK 的安装路径可以通过两种方法 get 到。</p><p>一般情况下，JDK 的默认安装路径为 <code>/Library/Java/JavaVirtualMachines/</code>，进入该目录就可以看到。</p><img src="'+h+'"><p>还可以通过以下命令获取当前安装的 JDK 路径。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">/usr/libexec/java_home</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/usr/libexec/java_home</span></span></code></pre></div><img src="'+v+'"><p>添加 JDK 的路径后可以通过 <code>jenv versions</code> 查看所有添加到 jenv 进行管理的 JDK 版本。</p><img src="'+J+'"><p>带 <code>*</code> 的表示当前默认的 JDK 版本。</p><p>可以通过 <code>jenv global xxx</code> 切换全局的 JDK 版本。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">jenv global 17</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jenv global 17</span></span></code></pre></div><img src="'+_+'"><p>是不是贼方便？再也不用整这 <code>echo &#39;export PATH=&quot;/usr/local/opt/openjdk@17/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc</code> 玩意添加 JDK 到 PATH 环境变量了！</p><p>想用哪个 JDK 版本可以随时切换。</p><p>爽，实在是爽！</p><hr>',72),u=[k];function w(D,K,y,x,q,O){return e(),s("div",null,u)}const S=a(j,[["render",w]]);export{C as __pageData,S as default};
