import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/ES6.md","filePath":"frontend/js/ES6.md"}'),p={name:"frontend/js/ES6.md"},o=l(`<h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h2><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><h3 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-label="Permalink to &quot;基础使用&quot;">​</a></h3><p>Promise意为允诺，虽然从现在开始努力（新建的Promise立即执行），但以后才能知道结局（成功或失败）。通常，Promise用于包装异步行为，即事件a完成后执行事件b，如果没有这种同步机制，就无法写出a-&gt;b的逻辑。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(()</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">after 1000ms</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)},</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#7B7F8B;">//after 1000ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">,</span><span style="color:#E36209;">reject</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;after 1000ms&#39;</span><span style="color:#24292E;">)},</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">//after 1000ms</span></span></code></pre></div><p><img src="https://mdn.mozillademos.org/files/8633/promises.png" alt="MDN的图片清楚地介绍了Promise的过程"></p><h3 id="promise-prototype-then" tabindex="-1">Promise.prototype.then() <a class="header-anchor" href="#promise-prototype-then" aria-label="Permalink to &quot;Promise.prototype.then()&quot;">​</a></h3><p>我们注意到Promise接受了一个函数，而这个函数接受了两个参数resolve和reject，这俩是内置的函数，触发它们可以改变Promise的状态（从pending到fulfillment或者rejection）。</p><p>状态改变会继续执行then方法中的函数：then接受两个函数，一个在resolve时触发，另一个在reject时触发。resolve或reject执行后，之后的代码仍然会执行并且先于then。</p><p>then支持链式调用，也就是说then的返回值仍然可以用then，无论返回原始值、抛出错误还是返回Promise最终都返回Promise，具体情况参考<a href="#promise-then-的返回值">下表</a>（很好理解，不用记）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">&gt;</span><span style="color:#BF9EEE;">0.5</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">suc</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">reject</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">err</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(resolve)</span></span>
<span class="line"><span style="color:#F6F6F4;">},(</span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reject)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//可能输出suc或err</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">,</span><span style="color:#E36209;">reject</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">&gt;</span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;suc&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;err&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(resolve)</span></span>
<span class="line"><span style="color:#24292E;">},(</span><span style="color:#E36209;">reject</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reject)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//可能输出suc或err</span></span></code></pre></div><h3 id="promise-prototype-catch" tabindex="-1">Promise.prototype.catch() <a class="header-anchor" href="#promise-prototype-catch" aria-label="Permalink to &quot;Promise.prototype.catch()&quot;">​</a></h3><p>如果Promise的状态变成reject，不仅会触发then 方法，也会触发catch方法。</p><p>从实现的角度上讲，该方法与使用then的第二个参数完全相同。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">reject</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">err</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">catch</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(err)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//err</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">,</span><span style="color:#E36209;">reject</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;err&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//err</span></span></code></pre></div><h4 id="关于throw" tabindex="-1">关于throw <a class="header-anchor" href="#关于throw" aria-label="Permalink to &quot;关于throw&quot;">​</a></h4><p>通常throw会触发then的第二个方法和catch。但在异步函数中调用throw无效（同步函数内有效），在resolved()触发后throw无效。</p><h3 id="promise-all" tabindex="-1">Promise.all() <a class="header-anchor" href="#promise-all" aria-label="Permalink to &quot;Promise.all()&quot;">​</a></h3><p>通常接受一个Promise数组，返回一个Promise，都完成时返回的Promise变fullfillment，有一个错误即变reject。如果打算在网页加载时显示loading，使用Promise.all响应图片的onload是个好主意。</p><p>实际上Promise.all接受所有的可迭代对象，如果传入的对象为空，返回fullfillment的Promise；如果对象不包含Promise，则返回异步完成的Promise（与前者的区别涉及Event-loop，对于异步完成的Promise，之后的同步代码会认为其处于pending状态）；其他情况返回pending的Promise并根据执行情况转换状态。</p><h3 id="promise-race" tabindex="-1">Promise.race() <a class="header-anchor" href="#promise-race" aria-label="Permalink to &quot;Promise.race()&quot;">​</a></h3><p>和Promisel.all()相近，一旦其中一个Promise状态改变结果即确定（由最早改变状态的Promise决定）。用途可能在从不同路径请求相同资源，选择较快的那一个。</p><h3 id="promise-resolve" tabindex="-1">Promise.resolve() <a class="header-anchor" href="#promise-resolve" aria-label="Permalink to &quot;Promise.resolve()&quot;">​</a></h3><p>手动创建已经resolve的Promise。接受一个参数value，返回的Promise已执行resolve(value)。value如果是Promise，则直接返回此Promise；如果是带有then方法的对象<code>let obj = {then:(res,rej)=&gt;{res()}}</code>，返回的Promise相当于已执行了then方法<code>new Promise(obj.then)</code>。</p><h4 id="thenable" tabindex="-1">thenable <a class="header-anchor" href="#thenable" aria-label="Permalink to &quot;thenable&quot;">​</a></h4><p>指具有then方法的对象，可以作为参数传给Promise。</p><h3 id="promise-reject" tabindex="-1">Promise.reject() <a class="header-anchor" href="#promise-reject" aria-label="Permalink to &quot;Promise.reject()&quot;">​</a></h3><p>手动创建已经reject的Promise。接受一个参数作为reject的原因（可以是Error对象）。</p><h3 id="promise-prototype-allsettled" tabindex="-1">Promise.prototype.allSettled() <a class="header-anchor" href="#promise-prototype-allsettled" aria-label="Permalink to &quot;Promise.prototype.allSettled()&quot;">​</a></h3><p>还处于Draft。allSettled接受一个Promise数组，等待所有的Promise都被resolve或reject，它返回一个Promise，其中传递了每一个Promise的status。</p><h2 id="generator-生成器-✏️" tabindex="-1">generator 生成器 ✏️ <a class="header-anchor" href="#generator-生成器-✏️" aria-label="Permalink to &quot;generator 生成器 ✏️&quot;">​</a></h2><h2 id="模板字符串-模板字面量" tabindex="-1">模板字符串/模板字面量 <a class="header-anchor" href="#模板字符串-模板字面量" aria-label="Permalink to &quot;模板字符串/模板字面量&quot;">​</a></h2><p>用反引号\`\`表达的字符串，可以在其中使用<code>\${expression}</code>表达式。以表达式开头的模板字符串被称为带标签的模板字符串（通常是函数）。</p><p>模板字符串支持多行字符串、表达式与嵌套（需要在表达式内）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> total </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`She has </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">total</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> apples.\`</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> str1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">\`He said that </span><span style="color:#F286C4;">\${</span><span style="color:#E7EE98;">\`She has </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">total</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;"> apples\`</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> total </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`She has \${</span><span style="color:#24292E;">total</span><span style="color:#032F62;">} apples.\`</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`He said that \${\`She has \${</span><span style="color:#24292E;">total</span><span style="color:#032F62;">} apples\`}\`</span></span></code></pre></div><h3 id="带标签的模板字符串" tabindex="-1">带标签的模板字符串 <a class="header-anchor" href="#带标签的模板字符串" aria-label="Permalink to &quot;带标签的模板字符串&quot;">​</a></h3><p>字符串前的函数接收了字符串与表达式，前者以数组的形式，后者以多个参数的形式传递，通过函数返回处理过后的值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> dict</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">一个顶俩</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">救过不给</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">harmony</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">exp1</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">exp2</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(exp1</span><span style="color:#F286C4;">==</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一个顶俩</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    exp1</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">****</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(exp2</span><span style="color:#F286C4;">==</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">救过不给</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    exp2</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">****</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> str[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">exp1</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">exp2</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">str[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> str1 </span><span style="color:#F286C4;">=</span><span style="color:#62E884;">harmony</span><span style="color:#E7EE98;">\`我发送了两个红包</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">dict[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">}\${</span><span style="color:#F6F6F4;">dict[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">，请用新版QQ查看\`</span></span>
<span class="line"><span style="color:#7B7F8B;">//str1</span></span>
<span class="line"><span style="color:#7B7F8B;">//我发送了两个红包********，请用新版QQ查看 :str数组有3个元素，str[1]==&#39;&#39; :str数组还有特殊的raw方法，可以获得未转义的字符串</span></span>
<span class="line"><span style="color:#7B7F8B;">//dict</span></span>
<span class="line"><span style="color:#7B7F8B;">//[ &#39;一个顶俩&#39;, &#39;救过不给&#39; ] :不改变原表达式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dict</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;一个顶俩&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;救过不给&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">harmony</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">,</span><span style="color:#E36209;">exp1</span><span style="color:#24292E;">,</span><span style="color:#E36209;">exp2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(exp1</span><span style="color:#D73A49;">==</span><span style="color:#032F62;">&quot;一个顶俩&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    exp1</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;****&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(exp2</span><span style="color:#D73A49;">==</span><span style="color:#032F62;">&quot;救过不给&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    exp2</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;****&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">exp1</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">exp2</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">str[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str1 </span><span style="color:#D73A49;">=</span><span style="color:#6F42C1;">harmony</span><span style="color:#032F62;">\`我发送了两个红包\${</span><span style="color:#24292E;">dict</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">0</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}\${</span><span style="color:#24292E;">dict</span><span style="color:#032F62;">[</span><span style="color:#005CC5;">1</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}，请用新版QQ查看\`</span></span>
<span class="line"><span style="color:#6A737D;">//str1</span></span>
<span class="line"><span style="color:#6A737D;">//我发送了两个红包********，请用新版QQ查看 :str数组有3个元素，str[1]==&#39;&#39; :str数组还有特殊的raw方法，可以获得未转义的字符串</span></span>
<span class="line"><span style="color:#6A737D;">//dict</span></span>
<span class="line"><span style="color:#6A737D;">//[ &#39;一个顶俩&#39;, &#39;救过不给&#39; ] :不改变原表达式</span></span></code></pre></div><h2 id="类与对象" tabindex="-1">类与对象 <a class="header-anchor" href="#类与对象" aria-label="Permalink to &quot;类与对象&quot;">​</a></h2><h2 id="转译" tabindex="-1">转译 <a class="header-anchor" href="#转译" aria-label="Permalink to &quot;转译&quot;">​</a></h2><h3 id="babel" tabindex="-1">babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;babel&quot;">​</a></h3><h3 id="polypill" tabindex="-1">polypill <a class="header-anchor" href="#polypill" aria-label="Permalink to &quot;polypill&quot;">​</a></h3><h3 id="traceur" tabindex="-1">traceur <a class="header-anchor" href="#traceur" aria-label="Permalink to &quot;traceur&quot;">​</a></h3><h2 id="遍历器-iterator" tabindex="-1">遍历器 Iterator <a class="header-anchor" href="#遍历器-iterator" aria-label="Permalink to &quot;遍历器 Iterator&quot;">​</a></h2><p>Iterator提供了一个通用的接口，只要有此接口就可以用<code>for(let item of obj)</code>完成遍历。遍历器除了访问每一个成员，还决定访问的顺序。</p><h2 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h2><p>在扩展运算符中，我们已经了解构赋值的用法。也许它应该叫模式匹配。</p><h3 id="数组形式的解构赋值" tabindex="-1">数组形式的解构赋值 <a class="header-anchor" href="#数组形式的解构赋值" aria-label="Permalink to &quot;数组形式的解构赋值&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [a,b,c] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#7B7F8B;">//a==1 b==2 c==3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [d,[e,f],g] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,[</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">],</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#7B7F8B;">//d==4 e==5 f==6 g==7 不写f也不会报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [d,[e,f</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">],g] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,[</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">],</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#7B7F8B;">//d==4 e==5 f==10 g==6 f等于默认值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [a,b,c] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//a==1 b==2 c==3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [d,[e,f],g] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//d==4 e==5 f==6 g==7 不写f也不会报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [d,[e,f</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">],g] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">],</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//d==4 e==5 f==10 g==6 f等于默认值</span></span></code></pre></div><p>右边的对象不具有Iterator接口会导致报错，而具有Iterator接口的对象（即使不是数组）不会报错。</p><h3 id="对象形式的解构赋值" tabindex="-1">对象形式的解构赋值 <a class="header-anchor" href="#对象形式的解构赋值" aria-label="Permalink to &quot;对象形式的解构赋值&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {x,y} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {x</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">,y</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#7B7F8B;">//x==100 y==50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {random} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {log} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> console;</span></span>
<span class="line"><span style="color:#7B7F8B;">//random==Math.random log==console.log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {food</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">dinner} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {food</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pork</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#7B7F8B;">//dinner==&quot;pork&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">{day,night}} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">{day</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,night</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">12</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">}}</span></span>
<span class="line"><span style="color:#7B7F8B;">//day==0 night==12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{};</span></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">setPrototypeOf</span><span style="color:#F6F6F4;">(obj,{size</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">67</span><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {size} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj;</span></span>
<span class="line"><span style="color:#7B7F8B;">//支持获取原型上的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> {xx</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,y</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">yy</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">83</span><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{}</span></span>
<span class="line"><span style="color:#7B7F8B;">//xx=0 yy=83 使用默认值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {x,y} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {x:</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">,y:</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//x==100 y==50</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {random} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {log} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> console;</span></span>
<span class="line"><span style="color:#6A737D;">//random==Math.random log==console.log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">food</span><span style="color:#24292E;">:dinner} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {food:</span><span style="color:#032F62;">&quot;pork&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//dinner==&quot;pork&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">:{day,night}} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {obj:{day:</span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">,night:</span><span style="color:#032F62;">&#39;12&#39;</span><span style="color:#24292E;">}}</span></span>
<span class="line"><span style="color:#6A737D;">//day==0 night==12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{};</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">setPrototypeOf</span><span style="color:#24292E;">(obj,{size:</span><span style="color:#005CC5;">67</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {size} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#6A737D;">//支持获取原型上的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> {xx</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#24292E;">:yy</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">83</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#6A737D;">//xx=0 yy=83 使用默认值</span></span></code></pre></div><h3 id="函数参数形式的解构赋值" tabindex="-1">函数参数形式的解构赋值 <a class="header-anchor" href="#函数参数形式的解构赋值" aria-label="Permalink to &quot;函数参数形式的解构赋值&quot;">​</a></h3><p>在函数参数中，每一个参数都可以解构。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f1</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">([</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">],[</span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">a</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">b</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">c;</span></span>
<span class="line"><span style="color:#62E884;">f1</span><span style="color:#F6F6F4;">([</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">],[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#7B7F8B;">//6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f2</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">({</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">},{</span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">}</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{})</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">a</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">b</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">c;</span></span>
<span class="line"><span style="color:#62E884;">f2</span><span style="color:#F6F6F4;">({a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#7B7F8B;">//25</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">([</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">],[</span><span style="color:#E36209;">c</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">c;</span></span>
<span class="line"><span style="color:#6F42C1;">f1</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">],[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">//6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">({</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">},{</span><span style="color:#E36209;">c</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{})</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">c;</span></span>
<span class="line"><span style="color:#6F42C1;">f2</span><span style="color:#24292E;">({a:</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">//25</span></span></code></pre></div><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h2><p>()=&gt;</p><p>_=&gt;</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p>TIP</p><h4 id="promise-then-的返回值" tabindex="-1">Promise.then()的返回值 <a class="header-anchor" href="#promise-then-的返回值" aria-label="Permalink to &quot;Promise.then()的返回值&quot;">​</a></h4><p>当一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer"><code>Promise</code></a>完成（fulfilled）或者失败（rejected），返回函数将被异步调用（由当前的线程循环来调度完成）。具体的返回值依据以下规则返回：</p><ul><li><p>如果then中的回调函数返回一个值，那么then返回的Promise将会成为接受状态，并且将返回的值作为接受状态的回调函数的参数值。</p></li><li><p>如果then中的回调函数没有返回值，那么then返回的Promise将会成为接受状态，并且该接受状态的回调函数的参数值为 undefined。</p></li><li><p>如果then中的回调函数抛出一个错误，那么then返回的Promise将会成为拒绝状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</p></li><li><p>如果then中的回调函数返回一个已经是接受状态的Promise，那么then返回的Promise也会成为接受状态，并且将那个Promise的接受状态的回调函数的参数值作为该被返回的Promise的接受状态回调函数的参数值。</p></li><li><p>如果then中的回调函数返回一个已经是拒绝状态的Promise，那么then返回的Promise也会成为拒绝状态，并且将那个Promise的拒绝状态的回调函数的参数值作为该被返回的Promise的拒绝状态回调函数的参数值。</p></li><li><p>如果then中的回调函数返回一个未定状态（pending）的Promise，那么then返回Promise的状态也是未定的，并且它的终态与那个Promise的终态相同；同时，它变为终态时调用的回调函数参数与那个Promise变为终态时的回调函数的参数是相同的。</p></li></ul><p>最后更新: 9/6/2019, 1:47:07 PM</p>`,64),e=[o];function t(r,c,y,F,i,E){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
