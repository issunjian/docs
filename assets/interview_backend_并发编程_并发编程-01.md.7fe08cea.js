import{_ as a,o as e,c as r,V as o}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-01.md","filePath":"interview/backend/并发编程/并发编程-01.md"}'),t={name:"interview/backend/并发编程/并发编程-01.md"},E=o('<h3 id="_1、java中concurrenthashmap的并发度是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1java%E4%B8%ADconcurrenthashmap%E7%9A%84%E5%B9%B6%E5%8F%91%E5%BA%A6%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">1、Java中ConcurrentHashMap的并发度是什么？</a> <a class="header-anchor" href="#_1、java中concurrenthashmap的并发度是什么" aria-label="Permalink to &quot;[1、Java中ConcurrentHashMap的并发度是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#1java中concurrenthashmap的并发度是什么)&quot;">​</a></h3><p>ConcurrentHashMap把实际map划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是ConcurrentHashMap类构造函数的一个可选参数，默认值为16，这样在多线程情况下就能避免争用。</p><p>在JDK8后，它摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法。同时加入了更多的辅助变量来提高并发度，具体内容还是查看源码吧。</p><h3 id="_2、程序计数器有什么作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">2、程序计数器有什么作用？</a> <a class="header-anchor" href="#_2、程序计数器有什么作用" aria-label="Permalink to &quot;[2、程序计数器有什么作用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#2程序计数器有什么作用)&quot;">​</a></h3><p>程序计数器是一块较小的内存空间，它的作用可以看作是当前线程所执行的字节码的行号指示器。这里面存的，就是当前线程执行的进度。程序计数器还存储了当前正在运行的流程，包括正在执行的指令、跳转、分支、循环、异常处理等。</p><h3 id="_3、在-java-中-executor-和-executors-的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3%E5%9C%A8-java-%E4%B8%AD-executor-%E5%92%8C-executors-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、在 Java 中 Executor 和 Executors 的区别？</a> <a class="header-anchor" href="#_3、在-java-中-executor-和-executors-的区别" aria-label="Permalink to &quot;[3、在 Java 中 Executor 和 Executors 的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#3在-java-中-executor-和-executors-的区别)&quot;">​</a></h3><p><strong>1、</strong> Executors 工具类的不同方法按照我们的需求创建了不同的线程池，来满足业务的需求。</p><p><strong>2、</strong> Executor 接口对象能执行我们的线程任务。</p><p><strong>3、</strong> ExecutorService 接口继承了 Executor 接口并进行了扩展，提供了更多的方法我们能获得任务执行的状态并且可以获取任务的返回值。</p><p><strong>4、</strong> 使用 ThreadPoolExecutor 可以创建自定义线程池。</p><h3 id="_4、semaphore有什么作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4semaphore%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">4、Semaphore有什么作用</a> <a class="header-anchor" href="#_4、semaphore有什么作用" aria-label="Permalink to &quot;[4、Semaphore有什么作用](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#4semaphore有什么作用)&quot;">​</a></h3><p>Semaphore就是一个信号量，它的作用是限制某段代码块的并发数。Semaphore有一个构造函数，可以传入一个int型整数n，表示某段代码最多只有n个线程可以访问，如果超出了n，那么请等待，等到某个线程执行完毕这段代码块，下一个线程再进入。由此可以看出如果Semaphore构造函数中传入的int型整数n=1，相当于变成了一个synchronized了。</p><h3 id="_5、程序计数器-线程私有" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89" target="_blank" rel="noreferrer">5、程序计数器(线程私有)</a> <a class="header-anchor" href="#_5、程序计数器-线程私有" aria-label="Permalink to &quot;[5、程序计数器(线程私有)](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#5程序计数器线程私有)&quot;">​</a></h3><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“线程私有” 的内存。</p><p>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址） 。如果还是 Native 方法，则为空。</p><p>这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。</p><h3 id="_6、并发编程三要素" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E8%A6%81%E7%B4%A0" target="_blank" rel="noreferrer">6、并发编程三要素？</a> <a class="header-anchor" href="#_6、并发编程三要素" aria-label="Permalink to &quot;[6、并发编程三要素？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#6并发编程三要素)&quot;">​</a></h3><p><strong>1、</strong> 原子性</p><p>原子性指的是一个或者多个操作，要么全部执行并且在执行的过程中不被其他操作打断，要么就全部都不执行。</p><p><strong>2、</strong> 可见性</p><p>可见性指多个线程操作一个共享变量时，其中一个线程对变量进行修改后，其他线程可以立即看到修改的结果。</p><p><strong>3、</strong> 有序性</p><p>有序性，即程序的执行顺序按照代码的先后顺序来执行。</p><h3 id="_7、osgi-动态模型系统" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7osgi-%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E7%B3%BB%E7%BB%9F" target="_blank" rel="noreferrer">7、OSGI（ 动态模型系统）</a> <a class="header-anchor" href="#_7、osgi-动态模型系统" aria-label="Permalink to &quot;[7、OSGI（ 动态模型系统）](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#7osgi-动态模型系统)&quot;">​</a></h3><p>OSGi(Open Service Gateway Initiative)，是面向 Java 的动态模型系统，是 Java 动态化模块化系统的一系列规范。</p><h3 id="_8、thread类中的yield方法有什么作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8thread%E7%B1%BB%E4%B8%AD%E7%9A%84yield%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">8、Thread类中的yield方法有什么作用？</a> <a class="header-anchor" href="#_8、thread类中的yield方法有什么作用" aria-label="Permalink to &quot;[8、Thread类中的yield方法有什么作用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#8thread类中的yield方法有什么作用)&quot;">​</a></h3><p>使当前线程从执行状态（运行状态）变为可执行态（就绪状态）。</p><p>当前线程到了就绪状态，那么接下来哪个线程会从就绪状态变成执行状态呢？可能是当前线程，也可能是其他线程，看系统的分配了。</p><h3 id="_9、分代回收" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E5%88%86%E4%BB%A3%E5%9B%9E%E6%94%B6" target="_blank" rel="noreferrer">9、分代回收</a> <a class="header-anchor" href="#_9、分代回收" aria-label="Permalink to &quot;[9、分代回收](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#9分代回收)&quot;">​</a></h3><p>分代回收基于两个事实:大部分对象很快就不使用了,还有一部分不会立即无用,但也不会持续很长时间</p><p>年轻代-&gt;标记-复制</p><p>老年代-&gt;标记-清除</p><h3 id="_10、你经常使用什么并发容器-为什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E4%BD%A0%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E4%B8%BA%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">10、你经常使用什么并发容器，为什么？</a> <a class="header-anchor" href="#_10、你经常使用什么并发容器-为什么" aria-label="Permalink to &quot;[10、你经常使用什么并发容器，为什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题，中级面试题，大汇总.md#10你经常使用什么并发容器为什么)&quot;">​</a></h3><p>Vector、ConcurrentHashMap、HasTable</p><p>一般软件开发中容器用的最多的就是HashMap、ArrayList，LinkedList ，等等</p><p>但是在多线程开发中就不能乱用容器，如果使用了未加锁（非同步）的的集合，你的数据就会非常的混乱。由此在多线程开发中需要使用的容器必须是加锁（同步）的容器。</p><h3 id="_11、你将如何使用thread-dump-你将如何分析thread-dump" tabindex="-1">11、你将如何使用thread dump？你将如何分析Thread dump？ <a class="header-anchor" href="#_11、你将如何使用thread-dump-你将如何分析thread-dump" aria-label="Permalink to &quot;11、你将如何使用thread dump？你将如何分析Thread dump？&quot;">​</a></h3><h3 id="_12、引用计数法" tabindex="-1">12、引用计数法 <a class="header-anchor" href="#_12、引用计数法" aria-label="Permalink to &quot;12、引用计数法&quot;">​</a></h3><h3 id="_13、怎么看死锁的线程" tabindex="-1">13、怎么看死锁的线程？ <a class="header-anchor" href="#_13、怎么看死锁的线程" aria-label="Permalink to &quot;13、怎么看死锁的线程？&quot;">​</a></h3><h3 id="_14、在java中wait和sleep方法的不同" tabindex="-1">14、在java中wait和sleep方法的不同？ <a class="header-anchor" href="#_14、在java中wait和sleep方法的不同" aria-label="Permalink to &quot;14、在java中wait和sleep方法的不同？&quot;">​</a></h3><h3 id="_15、java虚引用" tabindex="-1">15、JAVA虚引用 <a class="header-anchor" href="#_15、java虚引用" aria-label="Permalink to &quot;15、JAVA虚引用&quot;">​</a></h3><h3 id="_16、说说cms垃圾收集器的工作原理" tabindex="-1">16、说说CMS垃圾收集器的工作原理 <a class="header-anchor" href="#_16、说说cms垃圾收集器的工作原理" aria-label="Permalink to &quot;16、说说CMS垃圾收集器的工作原理&quot;">​</a></h3><h3 id="_17、双亲委派机制可以被违背吗-请举例说明。" tabindex="-1">17、双亲委派机制可以被违背吗？请举例说明。 <a class="header-anchor" href="#_17、双亲委派机制可以被违背吗-请举例说明。" aria-label="Permalink to &quot;17、双亲委派机制可以被违背吗？请举例说明。&quot;">​</a></h3><h3 id="_18、死锁与活锁的区别-死锁与饥饿的区别" tabindex="-1">18、死锁与活锁的区别，死锁与饥饿的区别？ <a class="header-anchor" href="#_18、死锁与活锁的区别-死锁与饥饿的区别" aria-label="Permalink to &quot;18、死锁与活锁的区别，死锁与饥饿的区别？&quot;">​</a></h3><h3 id="_19、java-8-为什么要将永久代-permgen-替换为元空间-metaspace-呢" tabindex="-1">19、Java 8 为什么要将永久代(PermGen)替换为元空间(MetaSpace)呢？ <a class="header-anchor" href="#_19、java-8-为什么要将永久代-permgen-替换为元空间-metaspace-呢" aria-label="Permalink to &quot;19、Java 8 为什么要将永久代(PermGen)替换为元空间(MetaSpace)呢？&quot;">​</a></h3><h3 id="_20、什么是线程组-为什么在-java-中不推荐使用" tabindex="-1">20、什么是线程组，为什么在 Java 中不推荐使用？ <a class="header-anchor" href="#_20、什么是线程组-为什么在-java-中不推荐使用" aria-label="Permalink to &quot;20、什么是线程组，为什么在 Java 中不推荐使用？&quot;">​</a></h3><h3 id="_21、什么是线程池" tabindex="-1">21、什么是线程池？ <a class="header-anchor" href="#_21、什么是线程池" aria-label="Permalink to &quot;21、什么是线程池？&quot;">​</a></h3><h3 id="_22、死锁的原因" tabindex="-1">22、死锁的原因 <a class="header-anchor" href="#_22、死锁的原因" aria-label="Permalink to &quot;22、死锁的原因&quot;">​</a></h3><h3 id="_23、解释-java-堆空间及-gc" tabindex="-1">23、解释 Java 堆空间及 GC？ <a class="header-anchor" href="#_23、解释-java-堆空间及-gc" aria-label="Permalink to &quot;23、解释 Java 堆空间及 GC？&quot;">​</a></h3><h3 id="_24、创建对象的过程是什么" tabindex="-1">24、创建对象的过程是什么？ <a class="header-anchor" href="#_24、创建对象的过程是什么" aria-label="Permalink to &quot;24、创建对象的过程是什么？&quot;">​</a></h3><h3 id="_25、jvm-如何确定垃圾对象" tabindex="-1">25、JVM 如何确定垃圾对象？ <a class="header-anchor" href="#_25、jvm-如何确定垃圾对象" aria-label="Permalink to &quot;25、JVM 如何确定垃圾对象？&quot;">​</a></h3><h3 id="_26、jit是什么" tabindex="-1">26、JIT是什么？ <a class="header-anchor" href="#_26、jit是什么" aria-label="Permalink to &quot;26、JIT是什么？&quot;">​</a></h3><h3 id="_27、同步方法和同步块-哪个是更好的选择" tabindex="-1">27、同步方法和同步块，哪个是更好的选择？ <a class="header-anchor" href="#_27、同步方法和同步块-哪个是更好的选择" aria-label="Permalink to &quot;27、同步方法和同步块，哪个是更好的选择？&quot;">​</a></h3><h3 id="_28、java-concurrency-api中的lock接口-lock-interface-是什么-对比同步它有什么优势" tabindex="-1">28、Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？ <a class="header-anchor" href="#_28、java-concurrency-api中的lock接口-lock-interface-是什么-对比同步它有什么优势" aria-label="Permalink to &quot;28、Java Concurrency API中的Lock接口(Lock interface)是什么？对比同步它有什么优势？&quot;">​</a></h3><h3 id="_29、notify-和notifyall-有什么区别" tabindex="-1">29、notify()和notifyAll()有什么区别？ <a class="header-anchor" href="#_29、notify-和notifyall-有什么区别" aria-label="Permalink to &quot;29、notify()和notifyAll()有什么区别？&quot;">​</a></h3><h3 id="_30、什么是并发队列" tabindex="-1">30、什么是并发队列： <a class="header-anchor" href="#_30、什么是并发队列" aria-label="Permalink to &quot;30、什么是并发队列：&quot;">​</a></h3><h3 id="_31、hashmap中的key-可以是普通对象么-需要什么注意的地方" tabindex="-1">31、HashMap中的key，可以是普通对象么？需要什么注意的地方？ <a class="header-anchor" href="#_31、hashmap中的key-可以是普通对象么-需要什么注意的地方" aria-label="Permalink to &quot;31、HashMap中的key，可以是普通对象么？需要什么注意的地方？&quot;">​</a></h3>',57),B=[E];function s(h,n,A,i,l,c){return e(),r("div",null,B)}const m=a(t,[["render",s]]);export{u as __pageData,m as default};
