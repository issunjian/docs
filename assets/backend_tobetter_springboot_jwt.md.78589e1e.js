import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/jwt-1.8d681306.png",o="/docs/assets/jwt-2.186a0b02.png",e="/docs/assets/jwt-3.456d22aa.png",t="/docs/assets/jwt-4.7d275767.png",c="/docs/assets/jwt-5.9227a9b1.png",r="/docs/assets/jwt-6.83b0b0be.png",y="/docs/assets/jwt-7.ba3fe1a9.png",F="/docs/assets/jwt-8.5ae66e8e.png",i="/docs/assets/jwt-9.3d008c3d.png",E="/docs/assets/jwt-10.e142913f.png",T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/tobetter/springboot/jwt.md","filePath":"backend/tobetter/springboot/jwt.md"}'),u={name:"backend/tobetter/springboot/jwt.md"},d=l('<h2 id="干掉session-这个跨域认证解决方案真的优雅" tabindex="-1">干掉Session？这个跨域认证解决方案真的优雅！ <a class="header-anchor" href="#干掉session-这个跨域认证解决方案真的优雅" aria-label="Permalink to &quot;干掉Session？这个跨域认证解决方案真的优雅！&quot;">​</a></h2><p>用户登录认证是 Web 应用中非常常见的一个业务，一般的流程是这样的：</p><ul><li>客户端向服务器端发送用户名和密码</li><li>服务器端验证通过后，在当前会话（session）中保存相关数据，比如说登录时间、登录 IP 等。</li><li>服务器端向客户端返回一个 session_id，客户端将其保存在 Cookie 中。</li><li>客户端再向服务器端发起请求时，将 session_id 传回给服务器端。</li><li>服务器端拿到 session_id 后，对用户的身份进行鉴定。</li></ul><p>单机情况下，这种模式是没有任何问题的，但对于前后端分离的 Web 应用来说，就非常痛苦了。于是就有了另外一种解决方案，服务器端不再保存 session 数据，而是将其保存在客户端，客户端每次发起请求时再把这个数据发送给服务器端进行验证。<strong>JWT</strong>（JSON Web Token）就是这种方案的典型代表。</p><img src="'+p+`"><h3 id="一、关于-jwt" tabindex="-1">一、关于 JWT <a class="header-anchor" href="#一、关于-jwt" aria-label="Permalink to &quot;一、关于 JWT&quot;">​</a></h3><p>JWT，是目前最流行的一个<a href="https://mp.weixin.qq.com/s/HTMDZaukCb7pyfHefVcfyg" target="_blank" rel="noreferrer">跨域</a>认证解决方案：客户端发起用户登录请求，服务器端接收并认证成功后，生成一个 JSON 对象（如下所示），然后将其返回给客户端。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">{</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;sub&quot;: &quot;wanger&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;created&quot;: 1645700436900,</span></span>
<span class="line"><span style="color:#f6f6f4;">  &quot;exp&quot;: 1646305236</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">  &quot;sub&quot;: &quot;wanger&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;created&quot;: 1645700436900,</span></span>
<span class="line"><span style="color:#24292e;">  &quot;exp&quot;: 1646305236</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>客户端再次与服务器端通信的时候，把这个 JSON 对象捎带上，作为前后端互相信任的一个凭证。服务器端接收到请求后，通过 JSON 对象对用户身份进行鉴定，这样就不再需要保存任何 session 数据了。</p><p>假如我现在使用用户名 wanger 和密码 123456 进行访问编程喵（Codingmore）的 login 接口，那么实际的 JWT 是一串看起来像是加过密的字符串。</p><img src="`+o+'"><p>为了让大家看的更清楚一点，我将其复制到了 <a href="https://jwt.io/" target="_blank" rel="noreferrer">jwt 的官网</a>。</p><img src="'+e+`"><p>左侧 Encoded 部分就是 JWT 密文，中间用「<code>.</code>」分割成了三部分（右侧 Decoded 部分）：</p><ul><li>Header（头部），描述 JWT 的元数据，其中 <code>alg</code> 属性表示签名的算法（当前为 HS512）；</li><li>Payload（负载），用来存放实际需要传递的数据，其中 <code>sub</code> 属性表示主题（实际值为用户名），<code>created</code> 属性表示 JWT 产生的时间，<code>exp</code> 属性表示过期时间</li><li>Signature（签名），对前两部分的签名，防止数据篡改；这里需要服务器端指定一个密钥（只有服务器端才知道），不能泄露给客户端，然后使用 Header 中指定的签名算法，按照下面的公式产生签名：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">HMACSHA512(</span></span>
<span class="line"><span style="color:#f6f6f4;">  base64UrlEncode(header) + &quot;.&quot; +</span></span>
<span class="line"><span style="color:#f6f6f4;">  base64UrlEncode(payload),</span></span>
<span class="line"><span style="color:#f6f6f4;">  your-256-bit-secret</span></span>
<span class="line"><span style="color:#f6f6f4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">HMACSHA512(</span></span>
<span class="line"><span style="color:#24292e;">  base64UrlEncode(header) + &quot;.&quot; +</span></span>
<span class="line"><span style="color:#24292e;">  base64UrlEncode(payload),</span></span>
<span class="line"><span style="color:#24292e;">  your-256-bit-secret</span></span>
<span class="line"><span style="color:#24292e;">)</span></span></code></pre></div><p>算出签名后，再把 Header、Payload、Signature 拼接成一个字符串，中间用「<code>.</code>」分割，就可以返回给客户端了。</p><p>客户端拿到 JWT 后，可以放在 localStorage，也可以放在 Cookie 里面。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const TokenKey = &#39;1D596CD8-8A20-4CEC-98DD-CDC12282D65C&#39; // createUuid()</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">export function getToken () {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return Cookies.get(TokenKey)</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">export function setToken (token) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return Cookies.set(TokenKey, token)</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const TokenKey = &#39;1D596CD8-8A20-4CEC-98DD-CDC12282D65C&#39; // createUuid()</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export function getToken () {</span></span>
<span class="line"><span style="color:#24292e;">  return Cookies.get(TokenKey)</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">export function setToken (token) {</span></span>
<span class="line"><span style="color:#24292e;">  return Cookies.set(TokenKey, token)</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>以后客户端再与服务器端通信的时候，就带上这个 JWT，一般放在 HTTP 的请求的头信息 Authorization 字段里。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Authorization: Bearer &lt;token&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Authorization: Bearer &lt;token&gt;</span></span></code></pre></div><img src="`+t+`"><p>服务器端接收到请求后，再对 JWT 进行验证，如果验证通过就返回相应的资源。</p><h3 id="二、实战-jwt" tabindex="-1">二、实战 JWT <a class="header-anchor" href="#二、实战-jwt" aria-label="Permalink to &quot;二、实战 JWT&quot;">​</a></h3><p>第一步，在 pom.xml 文件中添加 JWT 的依赖。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;0.9.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;0.9.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>第二步，在 application.yml 中添加 JWT 的配置项。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">jwt:</span></span>
<span class="line"><span style="color:#f6f6f4;">  tokenHeader: Authorization #JWT存储的请求头</span></span>
<span class="line"><span style="color:#f6f6f4;">  secret: codingmore-admin-secret #JWT加解密使用的密钥</span></span>
<span class="line"><span style="color:#f6f6f4;">  expiration: 604800 #JWT的超期限时间(60*60*24*7)</span></span>
<span class="line"><span style="color:#f6f6f4;">  tokenHead: &#39;Bearer &#39;  #JWT负载中拿到开头</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">jwt:</span></span>
<span class="line"><span style="color:#24292e;">  tokenHeader: Authorization #JWT存储的请求头</span></span>
<span class="line"><span style="color:#24292e;">  secret: codingmore-admin-secret #JWT加解密使用的密钥</span></span>
<span class="line"><span style="color:#24292e;">  expiration: 604800 #JWT的超期限时间(60*60*24*7)</span></span>
<span class="line"><span style="color:#24292e;">  tokenHead: &#39;Bearer &#39;  #JWT负载中拿到开头</span></span></code></pre></div><p>第三步，新建 JwtTokenUtil.java 工具类，主要有三个方法：</p><ul><li><code>generateToken(UserDetails userDetails)</code>：根据登录用户生成 token</li><li><code>getUserNameFromToken(String token)</code>：从 token 中获取登录用户</li><li><code>validateToken(String token, UserDetails userDetails)</code>：判断 token 是否仍然有效</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JwtTokenUtil</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.secret}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> secret;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.expiration}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> expiration;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.tokenHead}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> tokenHead;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 根据用户信息生成token</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">generateToken</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">UserDetails</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">userDetails</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; claims </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        claims.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(CLAIM_KEY_USERNAME, userDetails.</span><span style="color:#62E884;">getUsername</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        claims.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(CLAIM_KEY_CREATED, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">generateToken</span><span style="color:#F6F6F4;">(claims);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 根据用户名、创建时间生成JWT的token</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">generateToken</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; </span><span style="color:#FFB86C;font-style:italic;">claims</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Jwts.</span><span style="color:#62E884;">builder</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">setClaims</span><span style="color:#F6F6F4;">(claims)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">setExpiration</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">generateExpirationDate</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">signWith</span><span style="color:#F6F6F4;">(SignatureAlgorithm.HS512, secret)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">compact</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 从token中获取登录用户名</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getUserNameFromToken</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">token</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Claims</span><span style="color:#F6F6F4;"> claims </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getClaimsFromToken</span><span style="color:#F6F6F4;">(token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (claims </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> claims.</span><span style="color:#62E884;">getSubject</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 从token中获取JWT中的负载</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Claims</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getClaimsFromToken</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">token</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Claims</span><span style="color:#F6F6F4;"> claims </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            claims </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Jwts.</span><span style="color:#62E884;">parser</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                    .</span><span style="color:#62E884;">setSigningKey</span><span style="color:#F6F6F4;">(secret)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    .</span><span style="color:#62E884;">parseClaimsJws</span><span style="color:#F6F6F4;">(token)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    .</span><span style="color:#62E884;">getBody</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">JWT格式验证失败:{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> claims;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 验证token是否还有效</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">token</span><span style="color:#7B7F8B;">       客户端传入的token</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">userDetails</span><span style="color:#7B7F8B;"> 从数据库中查询出来的用户信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">validateToken</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">token</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">UserDetails</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">userDetails</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getUserNameFromToken</span><span style="color:#F6F6F4;">(token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(userDetails.</span><span style="color:#62E884;">getUsername</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#62E884;">isTokenExpired</span><span style="color:#F6F6F4;">(token);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 判断token是否已经失效</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isTokenExpired</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">token</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> expiredDate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getExpiredDateFromToken</span><span style="color:#F6F6F4;">(token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> expiredDate.</span><span style="color:#62E884;">before</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 从token中获取过期时间</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getExpiredDateFromToken</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">token</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Claims</span><span style="color:#F6F6F4;"> claims </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getClaimsFromToken</span><span style="color:#F6F6F4;">(token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> claims.</span><span style="color:#62E884;">getExpiration</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JwtTokenUtil</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.secret}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String secret;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.expiration}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long expiration;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.tokenHead}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String tokenHead;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 根据用户信息生成token</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">generateToken</span><span style="color:#24292E;">(UserDetails </span><span style="color:#E36209;">userDetails</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; claims </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        claims.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CLAIM_KEY_USERNAME, userDetails.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        claims.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CLAIM_KEY_CREATED, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateToken</span><span style="color:#24292E;">(claims);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 根据用户名、创建时间生成JWT的token</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">generateToken</span><span style="color:#24292E;">(Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">claims</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Jwts.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setClaims</span><span style="color:#24292E;">(claims)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">setExpiration</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">generateExpirationDate</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">signWith</span><span style="color:#24292E;">(SignatureAlgorithm.HS512, secret)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">compact</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 从token中获取登录用户名</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getUserNameFromToken</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">token</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Claims claims </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClaimsFromToken</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (claims </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> claims.</span><span style="color:#6F42C1;">getSubject</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 从token中获取JWT中的负载</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Claims </span><span style="color:#6F42C1;">getClaimsFromToken</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">token</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Claims claims </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            claims </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Jwts.</span><span style="color:#6F42C1;">parser</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">setSigningKey</span><span style="color:#24292E;">(secret)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">parseClaimsJws</span><span style="color:#24292E;">(token)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;JWT格式验证失败:{}&quot;</span><span style="color:#24292E;">, token);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> claims;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 验证token是否还有效</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">token</span><span style="color:#6A737D;">       客户端传入的token</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">userDetails</span><span style="color:#6A737D;"> 从数据库中查询出来的用户信息</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">validateToken</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">token</span><span style="color:#24292E;">, UserDetails </span><span style="color:#E36209;">userDetails</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUserNameFromToken</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(userDetails.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isTokenExpired</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 判断token是否已经失效</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isTokenExpired</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">token</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Date expiredDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getExpiredDateFromToken</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> expiredDate.</span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 从token中获取过期时间</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Date </span><span style="color:#6F42C1;">getExpiredDateFromToken</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">token</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Claims claims </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClaimsFromToken</span><span style="color:#24292E;">(token);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> claims.</span><span style="color:#6F42C1;">getExpiration</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步， 在 UsersController.java 中新增 login 登录接口，接收用户名和密码，并将 JWT 返回给客户端。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Api</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">tags</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/users</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UsersController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IUsersService</span><span style="color:#F6F6F4;"> usersService;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.tokenHeader}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> tokenHeader;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.tokenHead}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> tokenHead;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiOperation</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录以后返回token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultObject</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">Validated</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UsersLoginParam</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">users</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">BindingResult</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> usersService.</span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(users.</span><span style="color:#62E884;">getUserLogin</span><span style="color:#F6F6F4;">(), users.</span><span style="color:#62E884;">getUserPass</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (token </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">validateFailed</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">用户名或密码错误</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 将 JWT 传递回客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, String&gt; tokenMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        tokenMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, token);</span></span>
<span class="line"><span style="color:#F6F6F4;">        tokenMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tokenHead</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, tokenHead);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultObject.</span><span style="color:#62E884;">success</span><span style="color:#F6F6F4;">(tokenMap);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Api</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tags</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;用户&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/users&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsersController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> IUsersService usersService;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.tokenHeader}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String tokenHeader;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.tokenHead}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String tokenHead;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;登录以后返回token&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultObject </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Validated</span><span style="color:#24292E;"> UsersLoginParam </span><span style="color:#E36209;">users</span><span style="color:#24292E;">, BindingResult </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> usersService.</span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(users.</span><span style="color:#6F42C1;">getUserLogin</span><span style="color:#24292E;">(), users.</span><span style="color:#6F42C1;">getUserPass</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">validateFailed</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户名或密码错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将 JWT 传递回客户端</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; tokenMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        tokenMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">, token);</span></span>
<span class="line"><span style="color:#24292E;">        tokenMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tokenHead&quot;</span><span style="color:#24292E;">, tokenHead);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultObject.</span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">(tokenMap);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第五步，在 UsersServiceImpl.java 中新增 login 方法，根据用户名从数据库中查询用户，密码验证通过后生成 JWT。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UsersServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServiceImpl</span><span style="color:#F6F6F4;">&lt;UsersMapper, Users&gt; </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IUsersService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PasswordEncoder</span><span style="color:#F6F6F4;"> passwordEncoder;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">JwtTokenUtil</span><span style="color:#F6F6F4;"> jwtTokenUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">username</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">password</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//密码需要客户端加密后传递</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 查询用户+用户资源</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">UserDetails</span><span style="color:#F6F6F4;"> userDetails </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">loadUserByUsername</span><span style="color:#F6F6F4;">(username);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 验证密码</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">passwordEncoder.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(password, userDetails.</span><span style="color:#62E884;">getPassword</span><span style="color:#F6F6F4;">())) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                Asserts.</span><span style="color:#62E884;">fail</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">密码不正确</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 返回 JWT</span></span>
<span class="line"><span style="color:#F6F6F4;">            token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jwtTokenUtil.</span><span style="color:#62E884;">generateToken</span><span style="color:#F6F6F4;">(userDetails);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">AuthenticationException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            LOGGER.</span><span style="color:#62E884;">warn</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录异常:{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, e.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> token;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsersServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServiceImpl</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UsersMapper</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Users</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IUsersService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PasswordEncoder passwordEncoder;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> JwtTokenUtil jwtTokenUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">password</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//密码需要客户端加密后传递</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 查询用户+用户资源</span></span>
<span class="line"><span style="color:#24292E;">            UserDetails userDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadUserByUsername</span><span style="color:#24292E;">(username);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 验证密码</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">passwordEncoder.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(password, userDetails.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">                Asserts.</span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;密码不正确&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 返回 JWT</span></span>
<span class="line"><span style="color:#24292E;">            token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwtTokenUtil.</span><span style="color:#6F42C1;">generateToken</span><span style="color:#24292E;">(userDetails);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (AuthenticationException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            LOGGER.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;登录异常:{}&quot;</span><span style="color:#24292E;">, e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> token;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第六步，新增 JwtAuthenticationTokenFilter.java，每次客户端发起请求时对 JWT 进行验证。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JwtAuthenticationTokenFilter</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">OncePerRequestFilter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Logger</span><span style="color:#F6F6F4;"> LOGGER </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> LoggerFactory.</span><span style="color:#62E884;">getLogger</span><span style="color:#F6F6F4;">(JwtAuthenticationTokenFilter.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">UserDetailsService</span><span style="color:#F6F6F4;"> userDetailsService;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">JwtTokenUtil</span><span style="color:#F6F6F4;"> jwtTokenUtil;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.tokenHeader}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> tokenHeader;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jwt.tokenHead}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> tokenHead;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doFilterInternal</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                    </span><span style="color:#97E1F1;font-style:italic;">FilterChain</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">chain</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 从客户端请求中获取 JWT</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> authHeader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getHeader</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.tokenHeader);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 该 JWT 是我们规定的格式，以 tokenHead 开头</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (authHeader </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> authHeader.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.tokenHead)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// The part after &quot;Bearer &quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> authToken </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> authHeader.</span><span style="color:#62E884;">substring</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.tokenHead.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 从 JWT 中获取用户名</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jwtTokenUtil.</span><span style="color:#62E884;">getUserNameFromToken</span><span style="color:#F6F6F4;">(authToken);</span></span>
<span class="line"><span style="color:#F6F6F4;">            LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">checking username:{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, username);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// SecurityContextHolder 是 SpringSecurity 的一个工具类</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 保存应用程序中当前使用人的安全上下文</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (username </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> SecurityContextHolder.</span><span style="color:#62E884;">getContext</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getAuthentication</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 根据用户名获取登录用户信息</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">UserDetails</span><span style="color:#F6F6F4;"> userDetails </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.userDetailsService.</span><span style="color:#62E884;">loadUserByUsername</span><span style="color:#F6F6F4;">(username);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 验证 token 是否过期</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (jwtTokenUtil.</span><span style="color:#62E884;">validateToken</span><span style="color:#F6F6F4;">(authToken, userDetails)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 将登录用户保存到安全上下文中</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">UsernamePasswordAuthenticationToken</span><span style="color:#F6F6F4;"> authentication </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">UsernamePasswordAuthenticationToken</span><span style="color:#F6F6F4;">(userDetails,</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, userDetails.</span><span style="color:#62E884;">getAuthorities</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                    authentication.</span><span style="color:#62E884;">setDetails</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WebAuthenticationDetailsSource</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">buildDetails</span><span style="color:#F6F6F4;">(request));</span></span>
<span class="line"><span style="color:#F6F6F4;">                    SecurityContextHolder.</span><span style="color:#62E884;">getContext</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">setAuthentication</span><span style="color:#F6F6F4;">(authentication);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                    LOGGER.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">authenticated user:{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, username);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        chain.</span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(request, response);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JwtAuthenticationTokenFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OncePerRequestFilter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger LOGGER </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(JwtAuthenticationTokenFilter.class);</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> UserDetailsService userDetailsService;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> JwtTokenUtil jwtTokenUtil;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.tokenHeader}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String tokenHeader;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jwt.tokenHead}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String tokenHead;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFilterInternal</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                    HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                    FilterChain </span><span style="color:#E36209;">chain</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从客户端请求中获取 JWT</span></span>
<span class="line"><span style="color:#24292E;">        String authHeader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getHeader</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tokenHeader);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 该 JWT 是我们规定的格式，以 tokenHead 开头</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (authHeader </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> authHeader.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tokenHead)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// The part after &quot;Bearer &quot;</span></span>
<span class="line"><span style="color:#24292E;">            String authToken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> authHeader.</span><span style="color:#6F42C1;">substring</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.tokenHead.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 从 JWT 中获取用户名</span></span>
<span class="line"><span style="color:#24292E;">            String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jwtTokenUtil.</span><span style="color:#6F42C1;">getUserNameFromToken</span><span style="color:#24292E;">(authToken);</span></span>
<span class="line"><span style="color:#24292E;">            LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;checking username:{}&quot;</span><span style="color:#24292E;">, username);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// SecurityContextHolder 是 SpringSecurity 的一个工具类</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 保存应用程序中当前使用人的安全上下文</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (username </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> SecurityContextHolder.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAuthentication</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 根据用户名获取登录用户信息</span></span>
<span class="line"><span style="color:#24292E;">                UserDetails userDetails </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userDetailsService.</span><span style="color:#6F42C1;">loadUserByUsername</span><span style="color:#24292E;">(username);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 验证 token 是否过期</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (jwtTokenUtil.</span><span style="color:#6F42C1;">validateToken</span><span style="color:#24292E;">(authToken, userDetails)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 将登录用户保存到安全上下文中</span></span>
<span class="line"><span style="color:#24292E;">                    UsernamePasswordAuthenticationToken authentication </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsernamePasswordAuthenticationToken</span><span style="color:#24292E;">(userDetails,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, userDetails.</span><span style="color:#6F42C1;">getAuthorities</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    authentication.</span><span style="color:#6F42C1;">setDetails</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebAuthenticationDetailsSource</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">buildDetails</span><span style="color:#24292E;">(request));</span></span>
<span class="line"><span style="color:#24292E;">                    SecurityContextHolder.</span><span style="color:#6F42C1;">getContext</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setAuthentication</span><span style="color:#24292E;">(authentication);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    LOGGER.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;authenticated user:{}&quot;</span><span style="color:#24292E;">, username);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        chain.</span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(request, response);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>JwtAuthenticationTokenFilter 继承了 OncePerRequestFilter，该过滤器能确保一次请求只通过一次 filter，而不需要重复执行。也就是说，客户端每发起一次请求，该过滤器就会执行一次。</p><p>这个过滤器非常关键啊，基本上每行代码我都添加了注释，当然了，为了确保大家都能搞清楚这个类到底做了什么，我再来画一幅流程图，这样就一清二楚了。</p><img src="`+c+'"><p>SpringSecurity 是一个安全管理框架，可以和 Spring Boot 应用无缝衔接，SecurityContextHolder 是其中非常关键的一个工具类，持有安全上下文信息，里面保存有当前操作的用户是谁，用户是否已经被认证，用户拥有的权限等关键信息。</p><p>SecurityContextHolder 默认使用了 ThreadLocal 策略来存储认证信息，ThreadLocal 的特点是存在它里边的数据，哪个线程存的，哪个线程才能访问到。这就意味着不同的请求进入到服务器端后，会由不同的 Thread 去处理，例如线程 A 将请求 1 的用户信息存入了 ThreadLocal，线程 B 在处理请求 2 的时候是无法获取到用户信息的。</p><p>所以说 JwtAuthenticationTokenFilter 过滤器会在每次请求过来的时候进行一遍 JWT 的验证，确保客户端过来的请求是安全的。然后 SpringSecurity 才会对接下来的请求接口放行。这也是 JWT 和 Session 的根本区别：</p><ul><li>JWT 需要每次请求的时候验证一次，并且只要 JWT 没有过期，哪怕服务器端重启了，认证仍然有效。</li><li>Session 在没有过期的情况下是不需要重新对用户信息进行验证的，当服务器端重启后，用户需要重新登录获取新的 Session。</li></ul><p>也就是说，<strong>在 JWT 的方案下，服务器端保存的密钥（secret）一定不能泄露，否则客户端就可以根据签名算法伪造用户的认证信息了</strong>。</p><h3 id="三、swagger-中添加-jwt-验证" tabindex="-1">三、Swagger 中添加 JWT 验证 <a class="header-anchor" href="#三、swagger-中添加-jwt-验证" aria-label="Permalink to &quot;三、Swagger 中添加 JWT 验证&quot;">​</a></h3><p>对于后端开发人员来说，如何在 <a href="https://mp.weixin.qq.com/s/gWPCg6TP3G_-I-eqA6EJmA" target="_blank" rel="noreferrer">Swagger（整合了 Knife4j 进行美化）</a> 中添加 JWT 验证呢？</p><p>第一步，访问 login 接口，输入用户名和密码进行登录，获取服务器端返回的 JWT。</p><img src="'+r+'"><p>第二步，收集服务器端返回的 tokenHead 和 token，将其填入 Authorize（注意 tokenHead 和 token 之间有一个空格）完成登录认证。</p><img src="'+y+'"><p>第三步，再次请求其他接口时，Swagger 会自动将 Authorization 作为请求头信息发送到服务器端。</p><img src="'+F+'"><p>第四步，服务器端接收到该请求后，会通过 JwtAuthenticationTokenFilter 过滤器对 JWT 进行校验。</p><img src="'+i+'"><p>到此为止，整个流程全部打通了，完美！</p><h3 id="四、总结" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h3><p>综上来看，用 JWT 来解决前后端分离项目中的跨域认证还是非常丝滑的，这主要得益于 JSON 的通用性，可以跨语言，JavaScript 和 Java 都支持；另外，JWT 的组成非常简单，非常便于传输；还有 JWT 不需要在服务器端保存会话信息（Session），非常易于扩展。</p><p>当然了，为了保证 JWT 的安全性，不要在 JWT 中保存敏感信息，因为一旦私钥泄露，JWT 是很容易在客户端被解密的；如果可以，请使用 HTTPS 协议。</p><p>参考链接：</p><blockquote><p>阮一峰：<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a><br> 春夏秋冬过：<a href="https://segmentfault.com/a/1190000012557493" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000012557493</a><br> 江南一点雨：<a href="https://cloud.tencent.com/developer/article/1612175" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1612175</a><br> Dearmadman：<a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noreferrer">https://www.jianshu.com/p/576dbf44b2ae</a><br> mcarozheng：<a href="http://www.macrozheng.com/" target="_blank" rel="noreferrer">http://www.macrozheng.com/</a></p></blockquote><p>源码路径：</p><blockquote><p><a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></p></blockquote><hr><p><strong>本篇已收录至 GitHub 上星标 1.6k+ star 的开源专栏《Java程序员进阶之路》，据说每一个优秀的 Java 程序员都喜欢她，风趣幽默、通俗易懂。内容包括 Java 基础、Java 并发编程、Java 虚拟机、Java 企业级开发、Java 面试等核心知识点。学 Java，就认准 Java程序员进阶之路</strong>😄。</p><p><a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noreferrer">https://github.com/itwanger/toBeBetterJavaer</a></p><p>star 了这个仓库就等于你拥有了成为了一名优秀 Java 工程师的潜力。也可以戳下面的链接跳转到《Java程序员进阶之路》的官网网址，开始愉快的学习之旅吧。</p><p><a href="https://tobebetterjavaer.com/" target="_blank" rel="noreferrer">https://tobebetterjavaer.com/</a></p><img src="'+E+'"><p><em>没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟</em>。</p>',70),g=[d];function C(D,f,k,A,h,m){return n(),a("div",null,g)}const b=s(u,[["render",C]]);export{T as __pageData,b as default};
