import{_ as e,H as t,o as c,c as r,J as a,E as l,a as s,V as o,C as p}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"Spring Boot","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/spring/SpringBootMybatis.md","filePath":"java/javaee/spring/SpringBootMybatis.md"}'),y={name:"java/javaee/spring/SpringBootMybatis.md"},F=o(`<h1 id="spring-boot" tabindex="-1">Spring Boot <a class="header-anchor" href="#spring-boot" aria-label="Permalink to &quot;Spring Boot&quot;">​</a></h1><p>进一步对Spring中的操作进行封装，通过注解（@）取代xml文件进行自动配置，简化编程。</p><hr><h2 id="默认映射路径" tabindex="-1">默认映射路径 <a class="header-anchor" href="#默认映射路径" aria-label="Permalink to &quot;默认映射路径&quot;">​</a></h2><ul><li><code>classpath:/META-INF/resources/</code></li><li><code>classpath:/resources/</code></li><li><code>classpath:/static/</code></li><li><code>classpath:/public/</code></li></ul><p>优先级顺序：META-INF/resources &gt; resources &gt; static &gt; public</p><hr><h2 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h2><p>resources 文件夹下，支持以下两种格式。由 Spring Boot 自动加载。</p><ol><li>application.properties</li><li>application.yml</li></ol><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">#端口号</span></span>
<span class="line"><span style="color:#F286C4;">server.port=</span><span style="color:#F6F6F4;">8080</span></span>
<span class="line"><span style="color:#7B7F8B;">#访问前缀</span></span>
<span class="line"><span style="color:#F286C4;">server.servlet.context-path=</span><span style="color:#F6F6F4;">/demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">#数据库驱动</span></span>
<span class="line"><span style="color:#F286C4;">jdbc.driver=</span><span style="color:#F6F6F4;">com.mysql.jc.jdbc.Driver</span></span>
<span class="line"><span style="color:#7B7F8B;">#数据库链接</span></span>
<span class="line"><span style="color:#F286C4;">jdbc.url=</span><span style="color:#F6F6F4;">jdbc:mysql://localhost:3306/demo?</span><span style="color:#F286C4;">useUnicode=</span><span style="color:#F6F6F4;">true&amp;</span><span style="color:#F286C4;">characterEncoding=</span><span style="color:#F6F6F4;">utf8&amp;</span><span style="color:#F286C4;">useSSL=</span><span style="color:#F6F6F4;">false&amp;</span><span style="color:#F286C4;">serverTimezone=</span><span style="color:#F6F6F4;">UTC</span></span>
<span class="line"><span style="color:#7B7F8B;">#数据库用户名</span></span>
<span class="line"><span style="color:#F286C4;">jdbc.username=</span><span style="color:#F6F6F4;">root</span></span>
<span class="line"><span style="color:#7B7F8B;">#数据库密码</span></span>
<span class="line"><span style="color:#F286C4;">jdbc.password=</span><span style="color:#F6F6F4;">wdh19970506</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">#Mybatis</span></span>
<span class="line"><span style="color:#7B7F8B;">#配置文件路径</span></span>
<span class="line"><span style="color:#F286C4;">mybatis_config_file=</span><span style="color:#F6F6F4;">mybatis-config.xml</span></span>
<span class="line"><span style="color:#7B7F8B;">#SQL语句配置路径</span></span>
<span class="line"><span style="color:#F286C4;">mapper_path=</span><span style="color:#F6F6F4;">/mapper/**.xml</span></span>
<span class="line"><span style="color:#7B7F8B;">#实体类所在包</span></span>
<span class="line"><span style="color:#F286C4;">type_alias_package=</span><span style="color:#F6F6F4;">com.example.demo.entity</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#端口号</span></span>
<span class="line"><span style="color:#D73A49;">server.port</span><span style="color:#24292E;">=8080</span></span>
<span class="line"><span style="color:#6A737D;">#访问前缀</span></span>
<span class="line"><span style="color:#D73A49;">server.servlet.context-path</span><span style="color:#24292E;">=/demo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#数据库驱动</span></span>
<span class="line"><span style="color:#D73A49;">jdbc.driver</span><span style="color:#24292E;">=com.mysql.jc.jdbc.Driver</span></span>
<span class="line"><span style="color:#6A737D;">#数据库链接</span></span>
<span class="line"><span style="color:#D73A49;">jdbc.url</span><span style="color:#24292E;">=jdbc:mysql://localhost:3306/demo?</span><span style="color:#D73A49;">useUnicode</span><span style="color:#24292E;">=true&amp;</span><span style="color:#D73A49;">characterEncoding</span><span style="color:#24292E;">=utf8&amp;</span><span style="color:#D73A49;">useSSL</span><span style="color:#24292E;">=false&amp;</span><span style="color:#D73A49;">serverTimezone</span><span style="color:#24292E;">=UTC</span></span>
<span class="line"><span style="color:#6A737D;">#数据库用户名</span></span>
<span class="line"><span style="color:#D73A49;">jdbc.username</span><span style="color:#24292E;">=root</span></span>
<span class="line"><span style="color:#6A737D;">#数据库密码</span></span>
<span class="line"><span style="color:#D73A49;">jdbc.password</span><span style="color:#24292E;">=wdh19970506</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">#Mybatis</span></span>
<span class="line"><span style="color:#6A737D;">#配置文件路径</span></span>
<span class="line"><span style="color:#D73A49;">mybatis_config_file</span><span style="color:#24292E;">=mybatis-config.xml</span></span>
<span class="line"><span style="color:#6A737D;">#SQL语句配置路径</span></span>
<span class="line"><span style="color:#D73A49;">mapper_path</span><span style="color:#24292E;">=/mapper/**.xml</span></span>
<span class="line"><span style="color:#6A737D;">#实体类所在包</span></span>
<span class="line"><span style="color:#D73A49;">type_alias_package</span><span style="color:#24292E;">=com.example.demo.entity</span></span></code></pre></div><p>JDBC连接Mysql5驱动： com.mysql.jdbc.Driver JDBC连接Mysql6驱动： com.mysql.cj.jdbc.Driver, URL必须要指定时区serverTimezone！</p><hr><h2 id="启动类" tabindex="-1">启动类 <a class="header-anchor" href="#启动类" aria-label="Permalink to &quot;启动类&quot;">​</a></h2><p><code>@SpringBootApplication</code> 类：作为程序入口，在创建 Spring Boot 项目时自动创建。</p><p>等同于 <code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code> ，会自动完成配置并扫描路径下所有包。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//DemoApplication.class</span></span>
<span class="line"><span style="color:#7B7F8B;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">SpringBootApplication</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">DemoApplication</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        SpringApplication.</span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">(DemoApplication.class, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//DemoApplication.class</span></span>
<span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootApplication</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DemoApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SpringApplication.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(DemoApplication.class, args);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h3 id="配置类" tabindex="-1">配置类 <a class="header-anchor" href="#配置类" aria-label="Permalink to &quot;配置类&quot;">​</a></h3><ul><li><code>@Configuration</code>：标注类为配置类</li><li><code>@Bean(name = &#39;bean&#39;)</code>：标注方法，IOC容器通过该方法生成bean</li><li><code>@AutoWired</code>：标注属性，由IOC容器自动装配并使用</li></ul><p>配置类内声明的Bean方法将生成实例纳入到spring容器中，并且实例名就是方法名。</p><h3 id="工具类" tabindex="-1">工具类 <a class="header-anchor" href="#工具类" aria-label="Permalink to &quot;工具类&quot;">​</a></h3><ul><li><code>@Component</code>: 标注类为工具类</li></ul><p>工具类声明后会自动生成bean实例纳入到spring容器中。</p><h3 id="异常处理类" tabindex="-1">异常处理类 <a class="header-anchor" href="#异常处理类" aria-label="Permalink to &quot;异常处理类&quot;">​</a></h3><ul><li><code>@ControllerAdvice</code>: 标注当前类为所有Controller类服务</li><li><code>@ExceptionHandler</code>: 标注当前方法处理异常（默认处理RuntimeException） <code>@ExceptionHandler(value = Exception.class)</code>: 处理所有异常</li><li><code>@ResponseBody</code>:将Controller类返回数据(通常为map)转码添加到response中(默认为json形式)</li></ul><hr><h2 id="数据访问层-dao" tabindex="-1">数据访问层 DAO <a class="header-anchor" href="#数据访问层-dao" aria-label="Permalink to &quot;数据访问层 DAO&quot;">​</a></h2><p>和数据库建立连接，并定义和数据库之间的交互操作。</p><details><summary>1. 配置类：配置数据库连接</summary><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//DataSourceConfiguration.java</span></span>
<span class="line"><span style="color:#7B7F8B;">//创建DataSource Bean并交由Ioc容器管理，通过其与数据库进行连接</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">MapperScan</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.example.demo.dao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">DataSourceConfiguration</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//全局配置为属性赋值</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jdbc.driver}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> jdbcDriver;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jdbc.url}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> jdbcUrl;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jdbc.username}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> jdbcUsername;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${jdbc.password}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> jdbcPassword;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//创建DataSource Bean并生成实例</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">name</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dataSource</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ComboPooledDataSource</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createDataSource</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PropertyVetoException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 生成dataSource实例</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ComboPooledDataSource</span><span style="color:#F6F6F4;"> dataSource </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ComboPooledDataSource</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设置数据库驱动</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setDriverClass</span><span style="color:#F6F6F4;">(jdbcDriver);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设置数据库连接URL</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setJdbcUrl</span><span style="color:#F6F6F4;">(jdbcUrl);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设置用户名</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setUser</span><span style="color:#F6F6F4;">(jdbcUsername);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设置用户密码</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setPassword</span><span style="color:#F6F6F4;">(jdbcPassword);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 连接池最大线程数（需引入c3p0包）</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setMaxPoolSize</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 连接池最小线程数</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setMinPoolSize</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 关闭连接后不自动提交</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setAutoCommitOnClose</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 连接超时时间</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setCheckoutTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 连接失败重试次数</span></span>
<span class="line"><span style="color:#F6F6F4;">        dataSource.</span><span style="color:#62E884;">setAcquireRetryAttempts</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> dataSource;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//DataSourceConfiguration.java</span></span>
<span class="line"><span style="color:#6A737D;">//创建DataSource Bean并交由Ioc容器管理，通过其与数据库进行连接</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MapperScan</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.example.demo.dao&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//全局配置为属性赋值</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jdbc.driver}&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String jdbcDriver;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jdbc.url}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String jdbcUrl;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jdbc.username}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String jdbcUsername;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${jdbc.password}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String jdbcPassword;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建DataSource Bean并生成实例</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ComboPooledDataSource </span><span style="color:#6F42C1;">createDataSource</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> PropertyVetoException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成dataSource实例</span></span>
<span class="line"><span style="color:#24292E;">        ComboPooledDataSource dataSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ComboPooledDataSource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置数据库驱动</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setDriverClass</span><span style="color:#24292E;">(jdbcDriver);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置数据库连接URL</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setJdbcUrl</span><span style="color:#24292E;">(jdbcUrl);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置用户名</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setUser</span><span style="color:#24292E;">(jdbcUsername);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置用户密码</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setPassword</span><span style="color:#24292E;">(jdbcPassword);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 连接池最大线程数（需引入c3p0包）</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setMaxPoolSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 连接池最小线程数</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setMinPoolSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 关闭连接后不自动提交</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setAutoCommitOnClose</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 连接超时时间</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setCheckoutTimeout</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 连接失败重试次数</span></span>
<span class="line"><span style="color:#24292E;">        dataSource.</span><span style="color:#6F42C1;">setAcquireRetryAttempts</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataSource;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><ul><li><code>@Mapper</code>：Mybatis注解，标注接口，编译时自动生成实现类（根据mapper/xml文件）</li><li><code>@MapperScan(&quot;package&quot;)</code>：Mybatis注解，标注接口所在包，编译时对接口自动生成实现类</li></ul><details><summary>2. 配置类：配置MyBatis</summary><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//SessionFactoryConfiguration.java(dao)</span></span>
<span class="line"><span style="color:#7B7F8B;">//MyBatis核心：自动创建Session Bean（封装JDBC连接），其实例可以直接执行被映射的SQL语句</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SessionFactoryConfiguration</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//配置mybatis相关路径</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> mybatisConfigFile;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${mybatis_config_file}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setMybatisConfigFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">mybatisConfigFile</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        SessionFactoryConfiguration.mybatisConfigFile </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mybatisConfigFile;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> mapperPath;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${mapper_path}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setMapperPath</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">mapperPath</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        SessionFactoryConfiguration.mapperPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mapperPath;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Value</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">\${type_alias_package}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> typeAliasPackage;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//注入连接池</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DataSource</span><span style="color:#F6F6F4;"> dataSource;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">//创建sqlSessionFactory Bean并生成实例</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">name</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sqlSessionFactory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SqlSessionFactoryBean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createSqlSessionFactoryBean</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 生成sqlSessionFactory实例</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SqlSessionFactoryBean</span><span style="color:#F6F6F4;"> sqlSessionFactoryBean </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SqlSessionFactoryBean</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设置相关扫描路径和连接池</span></span>
<span class="line"><span style="color:#F6F6F4;">        sqlSessionFactoryBean.</span><span style="color:#62E884;">setConfigLocation</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ClassPathResource</span><span style="color:#F6F6F4;">(mybatisConfigFile));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">PathMatchingResourcePatternResolver</span><span style="color:#F6F6F4;"> pathMatchingResourcePatternResolver </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">PathMatchingResourcePatternResolver</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> packageSearchPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> mapperPath;</span></span>
<span class="line"><span style="color:#F6F6F4;">        sqlSessionFactoryBean.</span><span style="color:#62E884;">setMapperLocations</span><span style="color:#F6F6F4;">(pathMatchingResourcePatternResolver.</span><span style="color:#62E884;">getResources</span><span style="color:#F6F6F4;">(packageSearchPath));</span></span>
<span class="line"><span style="color:#F6F6F4;">        sqlSessionFactoryBean.</span><span style="color:#62E884;">setDataSource</span><span style="color:#F6F6F4;">(dataSource);</span></span>
<span class="line"><span style="color:#F6F6F4;">        sqlSessionFactoryBean.</span><span style="color:#62E884;">setTypeAliasesPackage</span><span style="color:#F6F6F4;">(typeAliasPackage);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> sqlSessionFactoryBean;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//SessionFactoryConfiguration.java(dao)</span></span>
<span class="line"><span style="color:#6A737D;">//MyBatis核心：自动创建Session Bean（封装JDBC连接），其实例可以直接执行被映射的SQL语句</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SessionFactoryConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//配置mybatis相关路径</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String mybatisConfigFile;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${mybatis_config_file}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setMybatisConfigFile</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">mybatisConfigFile</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SessionFactoryConfiguration.mybatisConfigFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mybatisConfigFile;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String mapperPath;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${mapper_path}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setMapperPath</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">mapperPath</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        SessionFactoryConfiguration.mapperPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mapperPath;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${type_alias_package}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String typeAliasPackage;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//注入连接池</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataSource dataSource;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//创建sqlSessionFactory Bean并生成实例</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;sqlSessionFactory&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SqlSessionFactoryBean </span><span style="color:#6F42C1;">createSqlSessionFactoryBean</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成sqlSessionFactory实例</span></span>
<span class="line"><span style="color:#24292E;">        SqlSessionFactoryBean sqlSessionFactoryBean </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SqlSessionFactoryBean</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设置相关扫描路径和连接池</span></span>
<span class="line"><span style="color:#24292E;">        sqlSessionFactoryBean.</span><span style="color:#6F42C1;">setConfigLocation</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClassPathResource</span><span style="color:#24292E;">(mybatisConfigFile));</span></span>
<span class="line"><span style="color:#24292E;">        PathMatchingResourcePatternResolver pathMatchingResourcePatternResolver </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PathMatchingResourcePatternResolver</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String packageSearchPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> mapperPath;</span></span>
<span class="line"><span style="color:#24292E;">        sqlSessionFactoryBean.</span><span style="color:#6F42C1;">setMapperLocations</span><span style="color:#24292E;">(pathMatchingResourcePatternResolver.</span><span style="color:#6F42C1;">getResources</span><span style="color:#24292E;">(packageSearchPath));</span></span>
<span class="line"><span style="color:#24292E;">        sqlSessionFactoryBean.</span><span style="color:#6F42C1;">setDataSource</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">        sqlSessionFactoryBean.</span><span style="color:#6F42C1;">setTypeAliasesPackage</span><span style="color:#24292E;">(typeAliasPackage);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> sqlSessionFactoryBean;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><details><summary>3. XML文件：配置mybatis全局属性（可选）</summary><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--mybatis-config.xml(resources文件夹)--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">configuration</span></span>
<span class="line"><span style="color:#F6F6F4;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">configuration</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!-- 配置全局属性 --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">settings</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--使用jdbc的getGeneratedKeys获取数据库自增主键值--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">       &lt;</span><span style="color:#F286C4;">setting</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">useGeneratedKeys</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--使用列标签替换列别名 默认:true--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">       &lt;</span><span style="color:#F286C4;">setting</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">useColumnLabel</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--开启驼峰命名转换:Table{create_time} -&gt; Entity{createTime}--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--属性名和数据库参数名一致时，mybatis才会把从数据库参数自动转换为实体类属性。--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">       &lt;</span><span style="color:#F286C4;">setting</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mapUnderscoreToCamelCase</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">value</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> /&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">   &lt;/</span><span style="color:#F286C4;">settings</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">configuration</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--mybatis-config.xml(resources文件夹)--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#D73A49;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configuration</span></span>
<span class="line"><span style="color:#24292E;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 配置全局属性 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">settings</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--使用jdbc的getGeneratedKeys获取数据库自增主键值--&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">setting</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;useGeneratedKeys&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--使用列标签替换列别名 默认:true--&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">setting</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;useColumnLabel&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--开启驼峰命名转换:Table{create_time} -&gt; Entity{createTime}--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--属性名和数据库参数名一致时，mybatis才会把从数据库参数自动转换为实体类属性。--&gt;</span></span>
<span class="line"><span style="color:#24292E;">       &lt;</span><span style="color:#22863A;">setting</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mapUnderscoreToCamelCase&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;/</span><span style="color:#22863A;">settings</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre></div></details><details><summary>4. 定义实体类（略）</summary></details><details><summary>5. 定义接口类，规定对属性的存取操作</summary><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//personDao.java(dao文件夹)</span></span>
<span class="line"><span style="color:#7B7F8B;">//接口类：规定对相关属性的数据库存取操作（由mybatis加载时自动配置实现类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PersonDao</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 展示列表</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> personList</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Person&gt; </span><span style="color:#62E884;">queryPerson</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 根据Id查找person信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> person</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">queryPersonById</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ID</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 插入person信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">person</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">insertPerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 更新person信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">person</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">updatePerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">person</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 删除person信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">ID</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deletePerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ID</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//personDao.java(dao文件夹)</span></span>
<span class="line"><span style="color:#6A737D;">//接口类：规定对相关属性的数据库存取操作（由mybatis加载时自动配置实现类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonDao</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 展示列表</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> personList</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">Person</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">queryPerson</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 根据Id查找person信息</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> person</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    Person </span><span style="color:#6F42C1;">queryPersonById</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ID</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 插入person信息</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">person</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">insertPerson</span><span style="color:#24292E;">(Person </span><span style="color:#E36209;">person</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 更新person信息</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">person</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updatePerson</span><span style="color:#24292E;">(Person </span><span style="color:#E36209;">person</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 删除person信息</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">ID</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deletePerson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">ID</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><ol><li>XML文件：设置执行方法的SQL语句</li></ol><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!--PersonDao.xml(resources/mapper文件夹)--&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!--MyBatis会根据该文件自动配置对数据库操作的实现类--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;?</span><span style="color:#F286C4;">xml</span><span style="color:#62E884;font-style:italic;"> version</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;font-style:italic;"> encoding</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">?&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">mapper</span></span>
<span class="line"><span style="color:#F6F6F4;">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">mapper</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">namespace</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.example.demo.dao.PersonDao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">queryPerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">resultType</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.example.demo.entity.Person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		SELECT person_ID,person_name</span></span>
<span class="line"><span style="color:#F6F6F4;">		FROM demo_person</span></span>
<span class="line"><span style="color:#F6F6F4;">		ORDER BY person_ID</span></span>
<span class="line"><span style="color:#F6F6F4;">		DESC</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;/</span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">queryPersonById</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">resultType</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.example.demo.entity.Person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		SELECT person_ID,person_name</span></span>
<span class="line"><span style="color:#F6F6F4;">		FROM demo_person</span></span>
<span class="line"><span style="color:#F6F6F4;">		where</span></span>
<span class="line"><span style="color:#F6F6F4;">		person_ID= #{person_ID}</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;/</span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--insert成功会返回一个名为ID的主键值，在数据库中为person_ID项--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">insert</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">insertPerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">useGeneratedKeys</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">true</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">keyProperty</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;font-style:italic;">keyColumn</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">person_ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">parameterType</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.example.demo.entity.Person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		INSERT INTO</span></span>
<span class="line"><span style="color:#F6F6F4;">		demo_person(person_ID,person_name)</span></span>
<span class="line"><span style="color:#F6F6F4;">		VALUES</span></span>
<span class="line"><span style="color:#F6F6F4;">		(#{person_ID},#{person_name})</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;/</span><span style="color:#F286C4;">insert</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">update</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">updatePerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">parameterType</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.example.demo.entity.Person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;/</span></span>
<span class="line"><span style="color:#F6F6F4;">		update demo_person</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;</span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">			&lt;</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">test</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">person_name != null</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;person_name=#{person_name},&lt;/</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		&lt;/</span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">		where person_id=#{person_ID}</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">update</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">id</span><span style="color:#F6F6F4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">deletePerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        DELETE FROM</span></span>
<span class="line"><span style="color:#F6F6F4;">		demo_person</span></span>
<span class="line"><span style="color:#F6F6F4;">		WHERE</span></span>
<span class="line"><span style="color:#F6F6F4;">		person_id =</span></span>
<span class="line"><span style="color:#F6F6F4;">		#{person_ID}</span></span>
<span class="line"><span style="color:#F6F6F4;">	&lt;/</span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">mapper</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--PersonDao.xml(resources/mapper文件夹)--&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!--MyBatis会根据该文件自动配置对数据库操作的实现类--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#D73A49;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mapper</span></span>
<span class="line"><span style="color:#24292E;">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#24292E;">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">namespace</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.example.demo.dao.PersonDao&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;queryPerson&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.example.demo.entity.Person&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		SELECT person_ID,person_name</span></span>
<span class="line"><span style="color:#24292E;">		FROM demo_person</span></span>
<span class="line"><span style="color:#24292E;">		ORDER BY person_ID</span></span>
<span class="line"><span style="color:#24292E;">		DESC</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">select</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;queryPersonById&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resultType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.example.demo.entity.Person&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		SELECT person_ID,person_name</span></span>
<span class="line"><span style="color:#24292E;">		FROM demo_person</span></span>
<span class="line"><span style="color:#24292E;">		where</span></span>
<span class="line"><span style="color:#24292E;">		person_ID= #{person_ID}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">select</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--insert成功会返回一个名为ID的主键值，在数据库中为person_ID项--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">insert</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;insertPerson&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useGeneratedKeys</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyProperty</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ID&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">keyColumn</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;person_ID&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parameterType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.example.demo.entity.Person&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		INSERT INTO</span></span>
<span class="line"><span style="color:#24292E;">		demo_person(person_ID,person_name)</span></span>
<span class="line"><span style="color:#24292E;">		VALUES</span></span>
<span class="line"><span style="color:#24292E;">		(#{person_ID},#{person_name})</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">insert</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">update</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;updatePerson&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parameterType</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;com.example.demo.entity.Person&quot;</span><span style="color:#24292E;">&gt;/</span></span>
<span class="line"><span style="color:#24292E;">		update demo_person</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">set</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;</span><span style="color:#22863A;">if</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;person_name != null&quot;</span><span style="color:#24292E;">&gt;person_name=#{person_name},&lt;/</span><span style="color:#22863A;">if</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">set</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		where person_id=#{person_ID}</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">update</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">delete</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;deletePerson&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        DELETE FROM</span></span>
<span class="line"><span style="color:#24292E;">		demo_person</span></span>
<span class="line"><span style="color:#24292E;">		WHERE</span></span>
<span class="line"><span style="color:#24292E;">		person_id =</span></span>
<span class="line"><span style="color:#24292E;">		#{person_ID}</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">delete</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">mapper</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><hr><h2 id="业务层-service" tabindex="-1">业务层 Service <a class="header-anchor" href="#业务层-service" aria-label="Permalink to &quot;业务层 Service&quot;">​</a></h2><p>规定事务，保障事务的原子属性。</p><details><summary>1. 配置类：配置事务管理</summary><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//TransactionManagementConfiguration.java(service)</span></span>
<span class="line"><span style="color:#7B7F8B;">//声明事务，通过其对事务进行管理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TransactionManagementConfiguration</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">TransactionManagementConfigurer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 注入连接池</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DataSource</span><span style="color:#F6F6F4;"> dataSource;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//返回实例</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PlatformTransactionManager</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">annotationDrivenTransactionManager</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DataSourceTransactionManager</span><span style="color:#F6F6F4;">(dataSource);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//TransactionManagementConfiguration.java(service)</span></span>
<span class="line"><span style="color:#6A737D;">//声明事务，通过其对事务进行管理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionManagementConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TransactionManagementConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 注入连接池</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> DataSource dataSource;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//返回实例</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PlatformTransactionManager </span><span style="color:#6F42C1;">annotationDrivenTransactionManager</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceTransactionManager</span><span style="color:#24292E;">(dataSource);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><ul><li><code>@EnableTransactionManagement</code>：开启事务管理（方法上添加注解 @Transactional）</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//PersonServiceImpl.java(service/impl文件夹内)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Service</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PersonServiceImpl</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PersonService</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PersonDao</span><span style="color:#F6F6F4;"> personDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Person&gt; </span><span style="color:#62E884;">getPersonList</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 返回所有的区域信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> personDao.</span><span style="color:#62E884;">queryPerson</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getPersonById</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">PersonId</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> personDao.</span><span style="color:#62E884;">queryPersonById</span><span style="color:#F6F6F4;">(PersonId);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addPerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Person</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 空值判断，主要是判断PersonName不为空</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Person.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(Person.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">())) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> effectedNum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personDao.</span><span style="color:#62E884;">insertPerson</span><span style="color:#F6F6F4;">(Person);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (effectedNum </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">添加信息失败!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">添加信息失败:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">信息不能为空！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">modifyPerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Person</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 空值判断，主要是PersonId不为空</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (Person.</span><span style="color:#62E884;">getID</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> Person.</span><span style="color:#62E884;">getID</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 设置默认值</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 更新区域信息</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> effectedNum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personDao.</span><span style="color:#62E884;">updatePerson</span><span style="color:#F6F6F4;">(Person);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (effectedNum </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">更新信息失败!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">更新信息失败:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">信息不能为空！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Transactional</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deletePerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">PersonId</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (PersonId </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 删除区域信息</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> effectedNum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personDao.</span><span style="color:#62E884;">deletePerson</span><span style="color:#F6F6F4;">(PersonId);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (effectedNum </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">删除信息失败!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">删除信息失败:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ID不能为空！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//PersonServiceImpl.java(service/impl文件夹内)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Service</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonServiceImpl</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonService</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PersonDao personDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">Person</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getPersonList</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 返回所有的区域信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> personDao.</span><span style="color:#6F42C1;">queryPerson</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Person </span><span style="color:#6F42C1;">getPersonById</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">PersonId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> personDao.</span><span style="color:#6F42C1;">queryPersonById</span><span style="color:#24292E;">(PersonId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addPerson</span><span style="color:#24292E;">(Person </span><span style="color:#E36209;">Person</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空值判断，主要是判断PersonName不为空</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Person.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(Person.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> effectedNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personDao.</span><span style="color:#6F42C1;">insertPerson</span><span style="color:#24292E;">(Person);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effectedNum </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;添加信息失败!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;添加信息失败:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;信息不能为空！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(Person </span><span style="color:#E36209;">Person</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 空值判断，主要是PersonId不为空</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Person.</span><span style="color:#6F42C1;">getID</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Person.</span><span style="color:#6F42C1;">getID</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设置默认值</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 更新区域信息</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> effectedNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personDao.</span><span style="color:#6F42C1;">updatePerson</span><span style="color:#24292E;">(Person);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effectedNum </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;更新信息失败!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;更新信息失败:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;信息不能为空！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Transactional</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deletePerson</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">PersonId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (PersonId </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 删除区域信息</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> effectedNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personDao.</span><span style="color:#6F42C1;">deletePerson</span><span style="color:#24292E;">(PersonId);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (effectedNum </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;删除信息失败!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;删除信息失败:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID不能为空！&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>@Transactional</code>：标记类/方法具有事务属性，默认出现RuntimeException则回滚。 <code>@Transactional(rollbackFor = Exception.class)</code> 事务在遇到全部异常(Exception)均回滚。</li></ul><hr><h2 id="控制层-controller" tabindex="-1">控制层 Controller <a class="header-anchor" href="#控制层-controller" aria-label="Permalink to &quot;控制层 Controller&quot;">​</a></h2><p>Spring Boot 内集成了 TomCat 服务器，通过控制层接收浏览器的 URL 请求进行操作并返回数据。</p><p>底层和浏览器的信息交互仍旧由 servlet 完成。</p><h3 id="控制层配置" tabindex="-1">控制层配置 <a class="header-anchor" href="#控制层配置" aria-label="Permalink to &quot;控制层配置&quot;">​</a></h3><p>配置文件继承 WebMvcConfigurerAdapter 类（已过时），通过重写以下几个方法管理控制层。</p><p>替代方案 直接实现 WebMvcConfigurer 接口或继承 WebMvcConfigurationSupport 类，这表明用户完全接管 spring MVC，会丢弃 SpringBoot 的默认设置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">/** 解决跨域问题 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">public void addCorsMappings(CorsRegistry registry) ;</span></span>
<span class="line"><span style="color:#f6f6f4;">/** 添加拦截器 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">void addInterceptors(InterceptorRegistry registry);</span></span>
<span class="line"><span style="color:#f6f6f4;">/** 配置视图解析器 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">void configureViewResolvers(ViewResolverRegistry registry);</span></span>
<span class="line"><span style="color:#f6f6f4;">/** 配置内容裁决选项 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">void configureContentNegotiation(ContentNegotiationConfigurer configurer);</span></span>
<span class="line"><span style="color:#f6f6f4;">/** 视图跳转控制器 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">void addViewControllers(ViewControllerRegistry registry);</span></span>
<span class="line"><span style="color:#f6f6f4;">/** 静态资源处理 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">void addResourceHandlers(ResourceHandlerRegistry registry);</span></span>
<span class="line"><span style="color:#f6f6f4;">/** 默认静态资源处理器 **/</span></span>
<span class="line"><span style="color:#f6f6f4;">void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/** 解决跨域问题 **/</span></span>
<span class="line"><span style="color:#24292e;">public void addCorsMappings(CorsRegistry registry) ;</span></span>
<span class="line"><span style="color:#24292e;">/** 添加拦截器 **/</span></span>
<span class="line"><span style="color:#24292e;">void addInterceptors(InterceptorRegistry registry);</span></span>
<span class="line"><span style="color:#24292e;">/** 配置视图解析器 **/</span></span>
<span class="line"><span style="color:#24292e;">void configureViewResolvers(ViewResolverRegistry registry);</span></span>
<span class="line"><span style="color:#24292e;">/** 配置内容裁决选项 **/</span></span>
<span class="line"><span style="color:#24292e;">void configureContentNegotiation(ContentNegotiationConfigurer configurer);</span></span>
<span class="line"><span style="color:#24292e;">/** 视图跳转控制器 **/</span></span>
<span class="line"><span style="color:#24292e;">void addViewControllers(ViewControllerRegistry registry);</span></span>
<span class="line"><span style="color:#24292e;">/** 静态资源处理 **/</span></span>
<span class="line"><span style="color:#24292e;">void addResourceHandlers(ResourceHandlerRegistry registry);</span></span>
<span class="line"><span style="color:#24292e;">/** 默认静态资源处理器 **/</span></span>
<span class="line"><span style="color:#24292e;">void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);</span></span></code></pre></div><h4 id="跨域问题" tabindex="-1">跨域问题 <a class="header-anchor" href="#跨域问题" aria-label="Permalink to &quot;跨域问题&quot;">​</a></h4><p>否则返回数据会被浏览器拦截</p><p>public void addCorsMappings(CorsRegistry registry) { //添加映射路径 registry.addMapping(&quot;/**&quot;) //放行哪些原始域 .allowedOrigins(&quot;<em>&quot;) //是否发送Cookie信息 .allowCredentials(true) //放行哪些原始域(请求方式) .allowedMethods(&quot;GET&quot;,&quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;) //放行哪些原始域(头部信息) .allowedHeaders(&quot;</em>&quot;) //暴露哪些头部信息（因为跨域访问默认不能获取全部头部信息） .exposedHeaders(&quot;Header1&quot;, &quot;Header2&quot;); }</p><h4 id="拦截器-interceptor" tabindex="-1">拦截器（Interceptor） <a class="header-anchor" href="#拦截器-interceptor" aria-label="Permalink to &quot;拦截器（Interceptor）&quot;">​</a></h4><p>Javaweb中，在执行Controller方法前后对Controller请求进行拦截和处理。</p><p>依赖于web框架(Spring配置)，在实现上基于Java的反射机制。</p><p><strong>过滤器(Filter)</strong></p><p>Javaweb中，在request/response传入Servlet前，过滤信息或设置参数。</p><p>它依赖于servlet容器(web.xml配置)。在实现上基于函数回调。</p><p><strong>两者常用于修改字符编码、删除无用参数、登录校验等。Spring框架中优先使用拦截器：功能接近、使用更加灵活。</strong></p><p>一个*：只匹配字符，不匹配路径（/） 两个**：匹配字符，和路径（/）</p><p><a href="https://www.cnblogs.com/kangkaii/p/9023751.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/kangkaii/p/9023751.html</a></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WebSecurityConfiguration</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WebMvcConfigurerAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//路径映射，已在Controller中配置</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">/*@Override</span></span>
<span class="line"><span style="color:#7B7F8B;">        public void addViewControllers(ViewControllerRegistry registry) {</span></span>
<span class="line"><span style="color:#7B7F8B;">            registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);</span></span>
<span class="line"><span style="color:#7B7F8B;">            registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);</span></span>
<span class="line"><span style="color:#7B7F8B;">            registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;success&quot;);</span></span>
<span class="line"><span style="color:#7B7F8B;">            registry.addResourceHandler(&quot;/webjars/**&quot;) .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span></span>
<span class="line"><span style="color:#7B7F8B;">        }*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//session ke</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> SESSION_KEY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//装载拦截器</span></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SecurityInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getSecurityInterceptor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SecurityInterceptor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//配置拦截器</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addInterceptors</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistry</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">registry</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistration</span><span style="color:#F6F6F4;"> addInterceptor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> registry.</span><span style="color:#62E884;">addInterceptor</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">getSecurityInterceptor</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 排除配置</span></span>
<span class="line"><span style="color:#F6F6F4;">            addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/error</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/user/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/asserts/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/webjars/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/public/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 拦截配置</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//addInterceptor.excludePathPatterns(&quot;/**&quot;);</span></span>
<span class="line"><span style="color:#F6F6F4;">            addInterceptor.</span><span style="color:#62E884;">addPathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//定义拦截器</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SecurityInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HandlerInterceptorAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">preHandle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">HttpSession</span><span style="color:#F6F6F4;"> session </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getSession</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (session.</span><span style="color:#62E884;">getAttribute</span><span style="color:#F6F6F4;">(SESSION_KEY) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 跳转登录</span></span>
<span class="line"><span style="color:#F6F6F4;">                request.</span><span style="color:#62E884;">setAttribute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录失败，请先输入用户名和密码。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 请求转发请求转发是一个请求一次响应，而重定向是两次请求两次响应。请求转发地址不变化，而重定向会显示后一个请求的地址</span></span>
<span class="line"><span style="color:#F6F6F4;">                request.</span><span style="color:#62E884;">getRequestDispatcher</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forward</span><span style="color:#F6F6F4;">(request,response);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSecurityConfiguration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurerAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//路径映射，已在Controller中配置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/*@Override</span></span>
<span class="line"><span style="color:#6A737D;">        public void addViewControllers(ViewControllerRegistry registry) {</span></span>
<span class="line"><span style="color:#6A737D;">            registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">            registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">            registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;success&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">            registry.addResourceHandler(&quot;/webjars/**&quot;) .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">        }*/</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//session ke</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String SESSION_KEY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//装载拦截器</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> SecurityInterceptor </span><span style="color:#6F42C1;">getSecurityInterceptor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SecurityInterceptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//配置拦截器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            InterceptorRegistration addInterceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">addInterceptor</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getSecurityInterceptor</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 排除配置</span></span>
<span class="line"><span style="color:#24292E;">            addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/error&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/user/login&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/asserts/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/webjars/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/public/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 拦截配置</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//addInterceptor.excludePathPatterns(&quot;/**&quot;);</span></span>
<span class="line"><span style="color:#24292E;">            addInterceptor.</span><span style="color:#6F42C1;">addPathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//定义拦截器</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SecurityInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerInterceptorAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preHandle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">                HttpSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (session.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(SESSION_KEY) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 跳转登录</span></span>
<span class="line"><span style="color:#24292E;">                request.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;登录失败，请先输入用户名和密码。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 请求转发请求转发是一个请求一次响应，而重定向是两次请求两次响应。请求转发地址不变化，而重定向会显示后一个请求的地址</span></span>
<span class="line"><span style="color:#24292E;">                request.</span><span style="color:#6F42C1;">getRequestDispatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(request,response);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h3 id="实现类" tabindex="-1">实现类 <a class="header-anchor" href="#实现类" aria-label="Permalink to &quot;实现类&quot;">​</a></h3><p>Controller 类需要使用 <code>@RestController</code> 或 <code>@Controller</code> 注解标注。</p><ul><li><p><code>@Controller</code>：类中所有方法以 String 形式返回 classpath 路径下同名 html 页面。适用于 JSP/thymeleaf 等动态加载页面。</p></li><li><p><code>@RestController</code>：类中所有方法以 Map/List 等形式返回 JSON 数据。适用于前后端分离开发。</p></li></ul><p><code>@Controller</code> 类中标注 <code>@ResponseBody</code> 方法，可以起到和 <code>@RestController</code> 类相同的效果。</p><h4 id="请求映射" tabindex="-1">请求映射 <a class="header-anchor" href="#请求映射" aria-label="Permalink to &quot;请求映射&quot;">​</a></h4><p>Controller 类中的方法使用 <code>@RequestMapping</code> 注解标注，就可以将指定 URL 请求映射到方法上处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.GET)     </span><span style="color:#7B7F8B;">// 参数为 URL 路径和请求方式</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                         </span><span style="color:#7B7F8B;">// 默认接收所有请求方式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">GetMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                             </span><span style="color:#7B7F8B;">// 简写形式的 GET 请求</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">PostMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                            </span><span style="color:#7B7F8B;">// 简写形式的 POST 请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 灵活映射</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/?/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                      </span><span style="color:#7B7F8B;">// ? 匹配单字符</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/*/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)\`：                                    </span><span style="color:#7B7F8B;">// * 匹配任意数量字符</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/**/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)：                                    </span><span style="color:#7B7F8B;">// ** 匹配任意数量目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/{ID}/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)\`                                   </span><span style="color:#7B7F8B;">// {} 读取 URL 路径中的参数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)     </span><span style="color:#6A737D;">// 参数为 URL 路径和请求方式</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)                                         </span><span style="color:#6A737D;">// 默认接收所有请求方式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)                                             </span><span style="color:#6A737D;">// 简写形式的 GET 请求</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)                                            </span><span style="color:#6A737D;">// 简写形式的 POST 请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 灵活映射</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/?/hello&quot;</span><span style="color:#24292E;">)                                      </span><span style="color:#6A737D;">// ? 匹配单字符</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/*/hello&quot;</span><span style="color:#24292E;">)\`：                                    </span><span style="color:#6A737D;">// * 匹配任意数量字符</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**/hello&quot;</span><span style="color:#24292E;">)：                                    </span><span style="color:#6A737D;">// ** 匹配任意数量目录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/{ID}/hello&quot;</span><span style="color:#24292E;">)\`                                   </span><span style="color:#6A737D;">// {} 读取 URL 路径中的参数</span></span></code></pre></div><p>Controller 类也可以通过 <code>@RequestMapping</code> 注解标注，表示路径下的 URL 请求在该类中寻找方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/speak</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SpeakController</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">GetMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">(){ </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; } </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/speak&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpeakController</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(){ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">; } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="参数接收" tabindex="-1">参数接收 <a class="header-anchor" href="#参数接收" aria-label="Permalink to &quot;参数接收&quot;">​</a></h4><p>对于请求 /test?username=mrjoker&amp;password=123456 ，有以下几种方式接收参数。</p><ol><li>直接获取参数</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(String username, String password){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>通过 HttpServletRequest 类来获取参数</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> request){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getParameter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getParameter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(HttpServletRequest request){</span></span>
<span class="line"><span style="color:#24292E;">    String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li>通过自定义对象来获取参数</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getUsername</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getPassword</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(User user){</span></span>
<span class="line"><span style="color:#24292E;">    String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="4"><li>通过 RequestParam 注解来获取参数（实参值赋给形参）</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s1, @</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s2){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s2;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">) String s1, @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">) String s2){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="5"><li>通过 PathVariable 注解来动态获取参数，对于请求 /test/mrjoker/123456</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test/{username}/{password}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">PathVariable</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s1, @</span><span style="color:#97E1F1;font-style:italic;">PathVariable</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s2){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s2;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test/{username}/{password}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">) String s1, @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">) String s2){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="6"><li>通过 ModelAttribute 注解来获取其他方法返回值作为参数</li></ol><p><a href="https://blog.csdn.net/a532672728/article/details/78057218" target="_blank" rel="noreferrer">https://blog.csdn.net/a532672728/article/details/78057218</a> 传递参数</p><h4 id="请求参数" tabindex="-1">请求参数 <a class="header-anchor" href="#请求参数" aria-label="Permalink to &quot;请求参数&quot;">​</a></h4><p>GET 请求请求参数直接附着在 URL 中。而 POST 请求请求参数放置在请求体中，其请求参数有以下两种格式：</p><p><strong>Form Data 格式</strong></p><p>请求的 Content-Type 为 application/x-www-form-urlencoded</p><p>示例：<code>username=mrjoker&amp;password=123456</code></p><p><strong>Request Payload 格式</strong></p><p>请求的 Content-Type 为 application/json 或者 multipart/form-data</p><p>示例：<code>{&quot;username&quot;:&quot;mrjoker&quot;, &quot;password&quot;:&quot;123456&quot;}</code></p><p>AJAX 提交 POST 请求默认使用 Form Data 格式，Spring MVC 会自动解析到对应的 bean 中并获取参数。但对于 Request Payload 请求，则必须进行处理：</p><ol><li>前端解决方案 axios 库可以使用 qs 库将 json 对象转化为 Form Data 格式。</li><li>后端解决方案 Spring Boot 在请求参数上加 <code>@RequestBody</code> 注解，将请求正文解析到对应的 bean 中获取参数。</li></ol><p>一个请求可以有多个 RequestParam，但只能有一个 RequestBody。如果 URL 内含有参数，两者也可以同时使用。</p><p>@RequestBody 可以直接以 String 接收前端传过来的 json 数据，也可以用对象自动解析前端传过来的 json 数据。对象里定义 List 属性，可用来接收多条 json 数据。</p><p>axios 中的 params与 data 传参的区别: params 传参，参数以 k=v&amp;k=v 格式放置在 url 中传递。data传参，参数会收到Request Header中的 Content-Type 类型的影响 data 的参数会在 form表单中。</p><p><a href="https://www.cnblogs.com/dw039/p/11104628.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/dw039/p/11104628.html</a></p><h4 id="局部跨域" tabindex="-1">局部跨域 <a class="header-anchor" href="#局部跨域" aria-label="Permalink to &quot;局部跨域&quot;">​</a></h4><p>在方法上（@RequestMapping）或者在控制器（@Controller）上使用注解 @CrossOrigin，可以实现局部跨域</p><p>@RequestMapping(&quot;/hello&quot;) @ResponseBody @CrossOrigin(&quot;<a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a>&quot;) public String index( ){ return &quot;Hello World&quot;; }</p><p>使用HttpServletResponse对象添加响应头（Access-Control-Allow-Origin）来授权原始域，这里Origin的值也可以设置为&quot;*&quot; ，表示全部放行。 @RequestMapping(&quot;/hello&quot;) @ResponseBody public String index(HttpServletResponse response){ response.addHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;<a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a>&quot;); return &quot;Hello World&quot;; }</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">login</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestBody</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">login</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> User user) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//PersonController.java（web文件夹内）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RestController</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/superadmin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PersonController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PersonService</span><span style="color:#F6F6F4;"> PersonService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 获取所有信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/listPerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; </span><span style="color:#62E884;">listPerson</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; modelMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Person&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;Person&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取列表</span></span>
<span class="line"><span style="color:#F6F6F4;">        list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> PersonService.</span><span style="color:#62E884;">getPersonList</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        modelMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">PersonList</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, list);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> modelMap;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 通过ID获取信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/getPersonbyid</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; </span><span style="color:#62E884;">getPersonById</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">PersonId</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; modelMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> Person </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> PersonService.</span><span style="color:#62E884;">getPersonById</span><span style="color:#F6F6F4;">(PersonId);</span></span>
<span class="line"><span style="color:#F6F6F4;">        modelMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, Person);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> modelMap;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 添加信息</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">PersonStr</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">request</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IOException</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">JsonMappingException</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">JsonParseException</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/addPerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; </span><span style="color:#62E884;">addPerson</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestBody</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Person</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">JsonParseException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">JsonMappingException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; modelMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 添加区域信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        modelMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">success</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, PersonService.</span><span style="color:#62E884;">addPerson</span><span style="color:#F6F6F4;">(Person));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> modelMap;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 修改信息，主要修改名字</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">PersonStr</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">request</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">IOException</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">JsonMappingException</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@throws</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;">JsonParseException</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/modifyPerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; </span><span style="color:#62E884;">modifyPerson</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestBody</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">Person</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">JsonParseException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">JsonMappingException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; modelMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 修改信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        modelMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">success</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, PersonService.</span><span style="color:#62E884;">modifyPerson</span><span style="color:#F6F6F4;">(Person));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> modelMap;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/removePerson</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; </span><span style="color:#62E884;">removePerson</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">PersonId</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;String, Object&gt; modelMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;String, Object&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 修改信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        modelMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">success</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, PersonService.</span><span style="color:#62E884;">deletePerson</span><span style="color:#F6F6F4;">(PersonId));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> modelMap;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//PersonController.java（web文件夹内）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/superadmin&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PersonController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> PersonService PersonService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 获取所有信息</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/listPerson&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">listPerson</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; modelMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Person</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;</span><span style="color:#D73A49;">Person</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取列表</span></span>
<span class="line"><span style="color:#24292E;">        list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PersonService.</span><span style="color:#6F42C1;">getPersonList</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        modelMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PersonList&quot;</span><span style="color:#24292E;">, list);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> modelMap;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 通过ID获取信息</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/getPersonbyid&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getPersonById</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">PersonId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; modelMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取信息</span></span>
<span class="line"><span style="color:#24292E;">        Person Person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PersonService.</span><span style="color:#6F42C1;">getPersonById</span><span style="color:#24292E;">(PersonId);</span></span>
<span class="line"><span style="color:#24292E;">        modelMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Person&quot;</span><span style="color:#24292E;">, Person);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> modelMap;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 添加信息</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">PersonStr</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">request</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IOException</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonMappingException</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonParseException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/addPerson&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">addPerson</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> Person </span><span style="color:#E36209;">Person</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonParseException, JsonMappingException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; modelMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 添加区域信息</span></span>
<span class="line"><span style="color:#24292E;">        modelMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">, PersonService.</span><span style="color:#6F42C1;">addPerson</span><span style="color:#24292E;">(Person));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> modelMap;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 修改信息，主要修改名字</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">PersonStr</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#E36209;">request</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">IOException</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonMappingException</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@throws</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">JsonParseException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/modifyPerson&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> Person </span><span style="color:#E36209;">Person</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> JsonParseException, JsonMappingException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; modelMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 修改信息</span></span>
<span class="line"><span style="color:#24292E;">        modelMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">, PersonService.</span><span style="color:#6F42C1;">modifyPerson</span><span style="color:#24292E;">(Person));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> modelMap;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/removePerson&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">removePerson</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">PersonId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; modelMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 修改信息</span></span>
<span class="line"><span style="color:#24292E;">        modelMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;success&quot;</span><span style="color:#24292E;">, PersonService.</span><span style="color:#6F42C1;">deletePerson</span><span style="color:#24292E;">(PersonId));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> modelMap;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="请求转发和重定向" tabindex="-1">请求转发和重定向 <a class="header-anchor" href="#请求转发和重定向" aria-label="Permalink to &quot;请求转发和重定向&quot;">​</a></h4><p>1.请求转发（forward）:</p><p>当客户端（浏览器）向远程服务器发送一个URL请求后，服务器接收到请求后，会在服务器内部直接通过另外的一个URL获取资源并将此资源再响应给浏览器，请求转发整个过程是一次性的。</p><p>浏览器的URL地址仍然是原来的URL.</p><p>2.重定向（Redirect）: 当客户端（浏览器）向服务器发送一个URL请求后，服务器会告诉浏览器，资源在另外一个URL地址上，此时浏览器会重新发送请求到新的资源地址。重定向发送了两次URL请求。</p><p>浏览器上面的URL已经换位了新的资源请求地址。</p><p><a href="https://www.cnblogs.com/javaxiaobu/p/11149151.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/javaxiaobu/p/11149151.html</a></p><hr><h3 id="spring-boot配置https" tabindex="-1">Spring Boot配置HTTPS <a class="header-anchor" href="#spring-boot配置https" aria-label="Permalink to &quot;Spring Boot配置HTTPS&quot;">​</a></h3><p>####生成SSL证书</p><p><a href="https://www.cnblogs.com/benwu/articles/4891758.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/benwu/articles/4891758.html</a></p><p>JDK提供证书管理工具: JDK\\bin\\keytool.exe</p>`,120),i=p("p",null,[p("strong",null,"cmd命令(JDK\\bin目录打开)")],-1),E=p("p",null,"密钥库: 保存密钥和对应的证书。【证书只含有公钥】",-1),u=o(`<ul><li>alias 证书别名</li><li>keyalg 加密算法，生成密钥对默认RSA</li><li>keysize 密钥键长，RSA默认2048</li><li>validity 证书有效期，默认90</li><li>keypass 证书密码</li><li>keystore 密钥库路径，默认创建在用户目录下</li><li>storetype 密钥库类型，默认JKS</li><li>storepass 密钥库密码</li></ul><p>查看密钥库 <code>keytool -list -v -alias tomcat -keystore &quot;D:\\mykeystore.keystore&quot; -storepass 123456 </code></p><p>将生成的证书文件拷贝到项目resources目录下</p><p>####修改全局配置文件</p><p>application.properties格式</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">server.port</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> 8443</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.key-store</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> classpath:mykeystore.keystore</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.key-store-password</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> 123456</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.keyStoreType</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> PKCS12</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.keyAlias</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tomcat</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">server.port</span><span style="color:#24292E;"> = 8443</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.key-store</span><span style="color:#24292E;"> = classpath:mykeystore.keystore</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.key-store-password</span><span style="color:#24292E;"> = 123456</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.keyStoreType</span><span style="color:#24292E;"> = PKCS12</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.keyAlias</span><span style="color:#24292E;"> = tomcat</span></span></code></pre></div><p>设置SSL后，默认使用HTTPS协议。访问localhost:8443，会出现证书安全提示，强行进入即可。</p>`,7),d=o(`<p>如果将服务器端口号设置成443端口,即https的默认访问端口,那么在进行https访问的时候可以不带端口号直接访问。</p><p><strong>修改入口文件</strong></p><p>如果访问<a href="http://localhost:8443" target="_blank" rel="noreferrer">http://localhost:8443</a>，则提示需要TLS。</p><p>》》将http连接自动转换为https连接</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TestSslApplication</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//servlet容器，自己写的bean会覆盖自动配置的bean？</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletWebServerFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">servletContainer</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TomcatServletWebServerFactory</span><span style="color:#F6F6F4;"> tomcat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TomcatServletWebServerFactory</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        tomcat.</span><span style="color:#62E884;">addAdditionalTomcatConnectors</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">createStandardConnector</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> tomcat;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">　　</span><span style="color:#7B7F8B;">// 新建connecter监听80端口，并重定向至8443</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Connector</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createStandardConnector</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Connector</span><span style="color:#F6F6F4;"> connector </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Connector</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.apache.coyote.http11.Http11NioProtocol</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setScheme</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setPort</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">80</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setSecure</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setRedirectPort</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">8443</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> connector;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSslApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//servlet容器，自己写的bean会覆盖自动配置的bean？</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ServletWebServerFactory </span><span style="color:#6F42C1;">servletContainer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        TomcatServletWebServerFactory tomcat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TomcatServletWebServerFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        tomcat.</span><span style="color:#6F42C1;">addAdditionalTomcatConnectors</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createStandardConnector</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tomcat;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">　　</span><span style="color:#6A737D;">// 新建connecter监听80端口，并重定向至8443</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Connector </span><span style="color:#6F42C1;">createStandardConnector</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Connector connector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Connector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setScheme</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setSecure</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setRedirectPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8443</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> connector;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>重新配置Servlet容器(Tomcat)</p><p>自动配置类ServletWebServerFactoryAutoConfiguration会读取bean</p><p><a href="https://www.jianshu.com/p/017a7f40efff" target="_blank" rel="noreferrer">https://www.jianshu.com/p/017a7f40efff</a></p><p><strong>衍生：Spring Boot是如何启动Tomcat的？</strong></p><p>tomcat最顶层容器是Server，代表着整个服务器，一个Server包含多个Service。Service主要包括多个Connector和一个Container。Connector用来处理连接相关的事情，并提供Socket到Request和Response相关转化。Container用于封装和管理Servlet，以及处理具体的Request请求。</p><hr><p>main方法： 实例化SpringApplication，执行run方法</p><p>run方法：<br> 配置属性、获取监听器，初始化输入参数、配置环境，输出banner 创建上下文、预处理上下文、刷新上下文、再刷新上下文：context</p><p>refreshApplicationContext方法：通过ServletWebServerFactory接口定义了getwebServer方法，通过其创建webServer并返回（创建时做了两件重要的事情：把Connector对象添加到tomcat中，配置引擎）【TomcatServletWebServerFactory是接口其中一个实现类】</p><p>TomcatwebServer类中，规定了Tomcat服务器的启动和关闭方法。</p><p>Spring Boot启动过程主要做了以下几件事情：</p><p>在SpringBoot中启动tomcat的工作在刷新上下文这一步</p><p>而tomcat的启动主要是实例化两个组件：Connector、Container</p>`,18);function D(C,g,q,A,m,f){const n=t("font");return c(),r("div",null,[F,a(n,{size:"2",color:"green"},{default:l(()=>[s("Tomcat使用Java提供的密码库，通过Java的Keytool工具生成JKS等格式的证书文件。 Apache使用OpenSSL提供的密码库，生成PEM、KEY、CRT等格式的证书文件。")]),_:1}),i,E,a(n,{size:"2",color:"blond"},{default:l(()=>[s("genkeypair 生成密钥对（非对称加密算法） genseckey 生成密钥（对称加密算法） ")]),_:1}),s(' 创建名为tomcat的密钥对以及自签名的证书，放入mykeystore密钥库中（不存在则创建） `keytool -genkeypair -alias "tomcat" -keyalg "RSA" -validity 180 -keypass "123456" -keystore "D:\\mykeystore.keystore" -storetype PKCS12 -storepass ` '),u,a(n,{size:"2",color:"brown"},{default:l(()=>[s("【未付费注册，不被数字认证机构CA认可：会被浏览器标记为不安全】")]),_:1}),d])}const b=e(y,[["render",D]]);export{B as __pageData,b as default};
