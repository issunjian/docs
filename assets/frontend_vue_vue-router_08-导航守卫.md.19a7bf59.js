import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/vue/vue-router/08-导航守卫.md","filePath":"frontend/vue/vue-router/08-导航守卫.md"}'),p={name:"frontend/vue/vue-router/08-导航守卫.md"},o=l(`<p>一般称为 <strong>中间件</strong> ，很重要，</p><p>前进后退，设置 权限控制在这里</p><h2 id="全局前置守卫" tabindex="-1">全局前置守卫 <a class="header-anchor" href="#全局前置守卫" aria-label="Permalink to &quot;全局前置守卫&quot;">​</a></h2><p><code>router.beforeEach</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">router.</span><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">form</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(to, form);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">form</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(to, form);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>每个守卫方法接收三个参数：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">to: Route， 即将要进入的目标 路由对象；</span></span>
<span class="line"><span style="color:#f6f6f4;">from: Route，当前导航正要离开的路由；</span></span>
<span class="line"><span style="color:#f6f6f4;">next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</span></span>
<span class="line"><span style="color:#f6f6f4;">next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</span></span>
<span class="line"><span style="color:#f6f6f4;">next(&#39;/&#39;) 或者 next({ path: &#39;/&#39; }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">to: Route， 即将要进入的目标 路由对象；</span></span>
<span class="line"><span style="color:#24292e;">from: Route，当前导航正要离开的路由；</span></span>
<span class="line"><span style="color:#24292e;">next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed (确认的)。</span></span>
<span class="line"><span style="color:#24292e;">next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到 from 路由对应的地址。</span></span>
<span class="line"><span style="color:#24292e;">next(&#39;/&#39;) 或者 next({ path: &#39;/&#39; }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</span></span></code></pre></div><h3 id="案例-权限判断" tabindex="-1">案例 权限判断 <a class="header-anchor" href="#案例-权限判断" aria-label="Permalink to &quot;案例 权限判断&quot;">​</a></h3><p>完整案例：<a href="./08.a-全局前置守卫案例-登陆判断路由.html">08.a-全局前置守卫案例-登陆判断路由</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> whileList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">router.</span><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> token </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> localStorage.</span><span style="color:#62E884;">getItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">token</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//白名单 有值 或者登陆过存储了token信息可以跳转 否则就去登录页面</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (whileList.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(to.path) </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> token) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//另外说一下beforeEach可以定义不止一个，vue会收集你所有定义的路由钩子，所以next的作用不应该是跳转，而是使步骤进行到下一个你定义的钩子</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">            path</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">        })</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">whileList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;token&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//白名单 有值 或者登陆过存储了token信息可以跳转 否则就去登录页面</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (whileList.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(to.path) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> token) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//另外说一下beforeEach可以定义不止一个，vue会收集你所有定义的路由钩子，所以next的作用不应该是跳转，而是使步骤进行到下一个你定义的钩子</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            path:</span><span style="color:#032F62;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="全局后置守卫" tabindex="-1">全局后置守卫 <a class="header-anchor" href="#全局后置守卫" aria-label="Permalink to &quot;全局后置守卫&quot;">​</a></h2><p>使用场景一般可以用来做 <a href="./08.b-全局后置守卫案例-进度条加载.html">loadingBar 完整案例</a></p><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">router.</span><span style="color:#62E884;">afterEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    Vnode.component?.exposed?.</span><span style="color:#62E884;">endLoading</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,</span><span style="color:#E36209;">from</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    Vnode.component?.exposed?.</span><span style="color:#6F42C1;">endLoading</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>loadingBar 组件</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">template</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wraps</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">ref</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">class</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">div</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">template</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;wraps&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">setup</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ts</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">import </span><span style="color:#F286C4;">{</span><span style="color:#F6F6F4;"> ref, onMounted </span><span style="color:#F286C4;">}</span><span style="color:#F6F6F4;"> from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">let speed = ref&lt;</span><span style="color:#F286C4;">number</span><span style="color:#F6F6F4;">&gt;(1)</span></span>
<span class="line"><span style="color:#F6F6F4;">let bar = ref&lt;</span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span><span style="color:#F6F6F4;">&gt;()</span></span>
<span class="line"><span style="color:#F6F6F4;">let timer = ref&lt;</span><span style="color:#F286C4;">number</span><span style="color:#F6F6F4;">&gt;(0)</span></span>
<span class="line"><span style="color:#F6F6F4;">const startLoading = () =&gt; </span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    let dom </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bar.value </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    speed.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">    timer.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> window.</span><span style="color:#62E884;">requestAnimationFrame</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (speed.value </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">90</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            speed.value </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            dom.style.width </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> speed.value </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">%</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">            timer.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> window.</span><span style="color:#62E884;">requestAnimationFrame</span><span style="color:#F6F6F4;">(fn)</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            speed.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            window.</span><span style="color:#62E884;">cancelAnimationFrame</span><span style="color:#F6F6F4;">(timer.value)</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">const endLoading = () =&gt; </span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    let dom </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bar.value </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLElement</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        window.</span><span style="color:#62E884;">requestAnimationFrame</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            speed.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            dom.style.width </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> speed.value </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">%</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">        })</span></span>
<span class="line"><span style="color:#F6F6F4;">    }, </span><span style="color:#BF9EEE;">500</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">defineExpose(</span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    startLoading,</span></span>
<span class="line"><span style="color:#F6F6F4;">    endLoading</span></span>
<span class="line"><span style="color:#F286C4;">}</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">style</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">scoped</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">scss</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">.wraps </span><span style="color:#F286C4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    position: fixed;</span></span>
<span class="line"><span style="color:#F6F6F4;">    top: </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    width: </span><span style="color:#BF9EEE;">100</span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    height: 2px;</span></span>
<span class="line"><span style="color:#F6F6F4;">    .bar {</span></span>
<span class="line"><span style="color:#F6F6F4;">        height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> inherit;</span></span>
<span class="line"><span style="color:#F6F6F4;">        width: </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        background: blue;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F286C4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">style</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;ts&#39;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">import { ref, onMounted } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#24292E;">let speed = ref&lt;</span><span style="color:#22863A;">number</span><span style="color:#24292E;">&gt;(1)</span></span>
<span class="line"><span style="color:#24292E;">let bar = ref&lt;</span><span style="color:#005CC5;">HTMLElement</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">let timer = ref&lt;</span><span style="color:#22863A;">number</span><span style="color:#24292E;">&gt;(0)</span></span>
<span class="line"><span style="color:#24292E;">const startLoading = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    let dom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar.value </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    speed.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    timer.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (speed.value </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">90</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            speed.value </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            dom.style.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;%&#39;</span></span>
<span class="line"><span style="color:#24292E;">            timer.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(fn)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            speed.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            window.</span><span style="color:#6F42C1;">cancelAnimationFrame</span><span style="color:#24292E;">(timer.value)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">const endLoading = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    let dom </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bar.value </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        window.</span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            speed.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            dom.style.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> speed.value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;%&#39;</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">defineExpose({</span></span>
<span class="line"><span style="color:#24292E;">    startLoading,</span></span>
<span class="line"><span style="color:#24292E;">    endLoading</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scoped</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;scss&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">.wraps {</span></span>
<span class="line"><span style="color:#24292E;">    position: fixed;</span></span>
<span class="line"><span style="color:#24292E;">    top: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    width: </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    height: 2px;</span></span>
<span class="line"><span style="color:#24292E;">    .bar {</span></span>
<span class="line"><span style="color:#24292E;">        height: inherit;</span></span>
<span class="line"><span style="color:#24292E;">        width: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        background: blue;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>mian.ts</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> loadingBar </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./components/loadingBar.vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> Vnode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createVNode</span><span style="color:#F6F6F4;">(loadingBar)</span></span>
<span class="line"><span style="color:#62E884;">render</span><span style="color:#F6F6F4;">(Vnode, document.body)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Vnode);</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">router.</span><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Vnode.component?.exposed?.</span><span style="color:#62E884;">startLoading</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">router.</span><span style="color:#62E884;">afterEach</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    Vnode.component?.exposed?.</span><span style="color:#62E884;">endLoading</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> loadingBar </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./components/loadingBar.vue&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Vnode</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createVNode</span><span style="color:#24292E;">(loadingBar)</span></span>
<span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(Vnode, document.body)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Vnode);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Vnode.component?.exposed?.</span><span style="color:#6F42C1;">startLoading</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">, </span><span style="color:#E36209;">from</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Vnode.component?.exposed?.</span><span style="color:#6F42C1;">endLoading</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><blockquote><p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。 本文链接：<a href="https://blog.csdn.net/qq1195566313/article/details/123699583" target="_blank" rel="noreferrer">https://blog.csdn.net/qq1195566313/article/details/123699583</a></p></blockquote>`,20),e=[o];function t(c,r,F,y,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
