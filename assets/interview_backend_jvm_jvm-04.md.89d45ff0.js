import{_ as a,o as e,c as r,V as o}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/jvm/jvm-04.md","filePath":"interview/backend/jvm/jvm-04.md"}'),t={name:"interview/backend/jvm/jvm-04.md"},s=o('<h3 id="_1、java弱引用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1java%E5%BC%B1%E5%BC%95%E7%94%A8" target="_blank" rel="noreferrer">1、JAVA弱引用</a> <a class="header-anchor" href="#_1、java弱引用" aria-label="Permalink to &quot;[1、JAVA弱引用](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#1java弱引用)&quot;">​</a></h3><p>弱引用需要用 WeakReference 类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管 JVM 的内存空间是否足够，总会回收该对象占用的内存。</p><h3 id="_2、什么是堆" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86" target="_blank" rel="noreferrer">2、什么是堆</a> <a class="header-anchor" href="#_2、什么是堆" aria-label="Permalink to &quot;[2、什么是堆](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#2什么是堆)&quot;">​</a></h3><p>存放对象实例，所有的对象和数组都要在堆上分配。 是 JVM 所管理的内存中最大的一块区域。</p><h3 id="_3、什么是程序计数器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3%E4%BB%80%E4%B9%88%E6%98%AF%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noreferrer">3、什么是程序计数器</a> <a class="header-anchor" href="#_3、什么是程序计数器" aria-label="Permalink to &quot;[3、什么是程序计数器](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#3什么是程序计数器)&quot;">​</a></h3><p>当前线程所执行的行号指示器。是 JVM 内存区域最小的一块区域。执行字节码工作时就是利用程序计数器来选取下一条需要执行的字节码指令。</p><h3 id="_4、各种回收器-各自优缺点-重点cms、g1" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4%E5%90%84%E7%A7%8D%E5%9B%9E%E6%94%B6%E5%99%A8%E5%90%84%E8%87%AA%E4%BC%98%E7%BC%BA%E7%82%B9%E9%87%8D%E7%82%B9cmsg1" target="_blank" rel="noreferrer">4、各种回收器，各自优缺点，重点CMS、G1</a> <a class="header-anchor" href="#_4、各种回收器-各自优缺点-重点cms、g1" aria-label="Permalink to &quot;[4、各种回收器，各自优缺点，重点CMS、G1](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#4各种回收器各自优缺点重点cmsg1)&quot;">​</a></h3><p>图来源于《深入理解Java虚拟机：JVM高级特效与最佳实现》，图中两个收集器之间有连线，说明它们可以配合使用.</p><p><strong>1、</strong> Serial收集器，串行收集器是最古老，最稳定以及效率高的收集器，但可能会产生较长的停顿，只使用一个线程去回收。</p><p><strong>2、</strong> ParNew收集器，ParNew收集器其实就是Serial收集器的多线程版本。</p><p><strong>3、</strong> Parallel收集器，Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。</p><p><strong>4、</strong> Parallel Old收集器，Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程“标记－整理”算法</p><p><strong>5、</strong> CMS收集器，CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它需要消耗额外的CPU和内存资源，在CPU和内存资源紧张，CPU较少时，会加重系统负担。CMS无法处理浮动垃圾。CMS的“标记-清除”算法，会导致大量空间碎片的产生。</p><p><strong>6、</strong> G1收集器，G1 (Garbage-First)是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器、以极高概率满足GC停顿时间要求的同时,还具备高吞吐量性能特征。</p><h3 id="_5、可以描述一下-class-文件的结构吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B-class-%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E5%90%97" target="_blank" rel="noreferrer">5、可以描述一下 class 文件的结构吗？</a> <a class="header-anchor" href="#_5、可以描述一下-class-文件的结构吗" aria-label="Permalink to &quot;[5、可以描述一下 class 文件的结构吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#5可以描述一下-class-文件的结构吗)&quot;">​</a></h3><p><strong>1、</strong> Class 文件包含了 Java 虚拟机的指令集、符号表、辅助信息的字节码(Byte Code)，是实现跨操作系统和语言无关性的基石之一。</p><p><strong>2、</strong> 一个 Class 文件定义了一个类或接口的信息，是以 8 个字节为单位，没有分隔符，按顺序紧凑排在一起的二进制流。</p><p><strong>3、</strong> 用 &quot;无符号数&quot; 和 &quot;表&quot; 组成的伪结构来存储数据。</p><p><strong>4、</strong> 无符号数：基本数据类型，用来描述数字、索引引用、数量值、字符串值，如u1、u2 分别表示 1 个字节、2 个字节</p><p><strong>10、</strong> 表：无符号数和其他表组成，命名一般以 &quot;_info&quot; 结尾</p><p><strong>组成部分</strong></p><p><strong>1、</strong> 魔数 Magic Number</p><p>Class 文件头 4 个字节，0xCAFEBABE</p><p>作用是确定该文件是 Class 文件</p><p><strong>2、</strong> 版本号</p><p>4 个字节，前 2 个是次版本号 Minor Version，后 2 个主版本号 Major Version</p><p>从 45 (JDK1.0) 开始，如 0x00000032 转十进制就是 50，代表 JDK 6</p><p>低版本的虚拟机跑不了高版本的 Class 文件</p><p><strong>3、</strong> 常量池</p><p>常量容量计数值(constant_pool_count)，u2，从 1 开始。如 0x0016 十进制 22 代表有</p><p>21 项常量</p><p>每项常量都是一个表，目前 17 种</p><p>特点：Class 文件中最大数据项目之一、第一个出现表数据结构</p><p><strong>4、</strong> 访问标志</p><p>2 个字节，表示类或接口的访问标志</p><p><strong>5、</strong> 类索引、父类索引、接口索引集合</p><p>类索引(this_class)、父类索引(super_class)，u2</p><p>接口索引集合(interfaces)，u2 集合</p><p>类索引确定类的全限定名、父类索引确定父类的全限定名、接口索引集合确定实现接口</p><p>索引值在常量池中查找对应的常量</p><p><strong>6、</strong> 字段表(field_info)集合</p><p>描述接口或类申明的变量</p><p>fields_count，u2，表示字段表数量；后面接着相应数量的字段表</p><p>9 种字段访问标志</p><p><strong>7、</strong> 方法表(method_info)集合</p><p><strong>描述接口或类申明的方法</strong></p><p>methods_count，u2，表示方法表数量；后面接着相应数量的方法表</p><p>12 种方法访问标志</p><p><strong>方法表结构与字段表结构一致</strong></p><p><strong>8、</strong> 属性表(attribute_info)集合</p><p>class 文件、字段表、方法表可携带属性集合，描述特有信息</p><p>预定义 29 项属性，可自定义写入不重名属性</p><h3 id="_6、类的实例化顺序" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%A1%BA%E5%BA%8F" target="_blank" rel="noreferrer">6、类的实例化顺序</a> <a class="header-anchor" href="#_6、类的实例化顺序" aria-label="Permalink to &quot;[6、类的实例化顺序](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#6类的实例化顺序)&quot;">​</a></h3><p><strong>比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，他们的执行顺序</strong></p><p>先静态、先父后子。</p><p>先静态：父静态 &gt; 子静态</p><p>优先级：父类 &gt; 子类 静态代码块 &gt; 非静态代码块 &gt; 构造函数</p><p><strong>一个类的实例化过程：</strong></p><p><strong>1、</strong> 父类中的static代码块，当前类的static</p><p><strong>2、</strong> 顺序执行父类的普通代码块</p><p><strong>3、</strong> 父类的构造函数</p><p><strong>4、</strong> 子类普通代码块</p><p><strong>5、</strong> 子类（当前类）的构造函数，按顺序执行。</p><p><strong>6、</strong> 子类方法的执行，</p><h3 id="_7、怎么打出线程栈信息" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E6%80%8E%E4%B9%88%E6%89%93%E5%87%BA%E7%BA%BF%E7%A8%8B%E6%A0%88%E4%BF%A1%E6%81%AF" target="_blank" rel="noreferrer">7、怎么打出线程栈信息？</a> <a class="header-anchor" href="#_7、怎么打出线程栈信息" aria-label="Permalink to &quot;[7、怎么打出线程栈信息？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#7怎么打出线程栈信息)&quot;">​</a></h3><p>输入jps，获得进程号。top -Hp pid 获取本进程中所有线程的CPU耗时性能 jstack pid命令查看当前java进程的堆栈状态 或者 jstack -l &gt; /tmp/output.txt 把堆栈信息打到一个txt文件。可以使用fastthread 堆栈定位（fastthread.io）</p><h3 id="_8、程序计数器是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、程序计数器是什么？</a> <a class="header-anchor" href="#_8、程序计数器是什么" aria-label="Permalink to &quot;[8、程序计数器是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#8程序计数器是什么)&quot;">​</a></h3><p><strong>程序计数器</strong>是一块较小的内存空间，可以看作当前线程所执行字节码的行号指示器。字节码解释器工作时通过改变计数器的值选取下一条执行指令。分支、循环、跳转、线程恢复等功能都需要依赖计数器完成。是唯一在虚拟机规范中没有规定内存溢出情况的区域。</p><p>如果线程正在执行 Java 方法，计数器记录正在执行的虚拟机字节码指令地址。如果是本地方法，计数器值为 Undefined。</p><h3 id="_9、jvm的引用类型有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9jvm%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">9、JVM的引用类型有哪些？</a> <a class="header-anchor" href="#_9、jvm的引用类型有哪些" aria-label="Permalink to &quot;[9、JVM的引用类型有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#9jvm的引用类型有哪些)&quot;">​</a></h3><p>引用内型：</p><p><strong>强引用：</strong></p><p>当内存不足的时候，JVM宁可出现OutOfMemoryError错误停止，也需要进行保存，并且不会将此空间回收。在引用期间和栈有联系就无法被回收</p><p><strong>软引用：</strong></p><p>当内存不足的时候，进行对象的回收处理，往往用于高速缓存中；mybatis就是其中</p><p><strong>弱引用：</strong></p><p>不管内存是否紧张，只要有垃圾了就立即回收</p><p><strong>幽灵引用：</strong></p><p>和没有引用是一样的</p><h3 id="_10、serial-与-parallel-gc-之间的不同之处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10serial-%E4%B8%8E-parallel-gc-%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%8D%E5%90%8C%E4%B9%8B%E5%A4%84" target="_blank" rel="noreferrer">10、Serial 与 Parallel GC 之间的不同之处？</a> <a class="header-anchor" href="#_10、serial-与-parallel-gc-之间的不同之处" aria-label="Permalink to &quot;[10、Serial 与 Parallel GC 之间的不同之处？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新2021年面试题及答案，汇总版.md#10serial-与-parallel-gc-之间的不同之处)&quot;">​</a></h3><p>Serial 与 Parallel 在 GC 执行的时候都会引起 stop-the-world。它们之间主要不同 serial 收集器是默认的复制收集器，执行 GC 的时候只有一个线程，而parallel 收集器使用多个 GC 线程来执行。</p><h3 id="_11、jvm新生代中为什么要分为eden和survivor" tabindex="-1">11、JVM新生代中为什么要分为Eden和Survivor？ <a class="header-anchor" href="#_11、jvm新生代中为什么要分为eden和survivor" aria-label="Permalink to &quot;11、JVM新生代中为什么要分为Eden和Survivor？&quot;">​</a></h3><h3 id="_12、老年代" tabindex="-1">12、老年代 <a class="header-anchor" href="#_12、老年代" aria-label="Permalink to &quot;12、老年代&quot;">​</a></h3><h3 id="_13、常用jvm基本配置参数" tabindex="-1">13、常用JVM基本配置参数 <a class="header-anchor" href="#_13、常用jvm基本配置参数" aria-label="Permalink to &quot;13、常用JVM基本配置参数&quot;">​</a></h3><h3 id="_14、如何判断一个类是无用的类" tabindex="-1">14、如何判断一个类是无用的类? <a class="header-anchor" href="#_14、如何判断一个类是无用的类" aria-label="Permalink to &quot;14、如何判断一个类是无用的类?&quot;">​</a></h3><h3 id="_15、什么是-class-文件-class-文件主要的信息结构有哪些" tabindex="-1">15、什么是 Class 文件？ Class 文件主要的信息结构有哪些？ <a class="header-anchor" href="#_15、什么是-class-文件-class-文件主要的信息结构有哪些" aria-label="Permalink to &quot;15、什么是 Class 文件？ Class 文件主要的信息结构有哪些？&quot;">​</a></h3><h3 id="_16、java-堆的结构是什么样子的-什么是堆中的永久代-perm-gen-space" tabindex="-1">16、Java 堆的结构是什么样子的？什么是堆中的永久代（Perm Gen space） <a class="header-anchor" href="#_16、java-堆的结构是什么样子的-什么是堆中的永久代-perm-gen-space" aria-label="Permalink to &quot;16、Java 堆的结构是什么样子的？什么是堆中的永久代（Perm Gen space）&quot;">​</a></h3><h3 id="_17、如何判断对象可以被回收" tabindex="-1">17、如何判断对象可以被回收 <a class="header-anchor" href="#_17、如何判断对象可以被回收" aria-label="Permalink to &quot;17、如何判断对象可以被回收&quot;">​</a></h3><h3 id="_18、jvm有哪些内存区域-jvm的内存布局是什么" tabindex="-1">18、JVM有哪些内存区域？(JVM的内存布局是什么？) <a class="header-anchor" href="#_18、jvm有哪些内存区域-jvm的内存布局是什么" aria-label="Permalink to &quot;18、JVM有哪些内存区域？(JVM的内存布局是什么？)&quot;">​</a></h3><h3 id="_19、说说cms垃圾收集器的工作原理" tabindex="-1">19、说说CMS垃圾收集器的工作原理 <a class="header-anchor" href="#_19、说说cms垃圾收集器的工作原理" aria-label="Permalink to &quot;19、说说CMS垃圾收集器的工作原理&quot;">​</a></h3><h3 id="_20、类加载是什么" tabindex="-1">20、类加载是什么？ <a class="header-anchor" href="#_20、类加载是什么" aria-label="Permalink to &quot;20、类加载是什么？&quot;">​</a></h3><h3 id="_21、java虚引用" tabindex="-1">21、JAVA虚引用 <a class="header-anchor" href="#_21、java虚引用" aria-label="Permalink to &quot;21、JAVA虚引用&quot;">​</a></h3><h3 id="_22、对于jdk自带的监控和性能分析工具用过哪些" tabindex="-1">22、对于JDK自带的监控和性能分析工具用过哪些？ <a class="header-anchor" href="#_22、对于jdk自带的监控和性能分析工具用过哪些" aria-label="Permalink to &quot;22、对于JDK自带的监控和性能分析工具用过哪些？&quot;">​</a></h3><h3 id="_23、什么是指令重排序" tabindex="-1">23、什么是指令重排序？ <a class="header-anchor" href="#_23、什么是指令重排序" aria-label="Permalink to &quot;23、什么是指令重排序？&quot;">​</a></h3><h3 id="_24、有哪些类加载器" tabindex="-1">24、有哪些类加载器？ <a class="header-anchor" href="#_24、有哪些类加载器" aria-label="Permalink to &quot;24、有哪些类加载器？&quot;">​</a></h3><h3 id="_25、堆和栈的区别" tabindex="-1">25、堆和栈的区别 <a class="header-anchor" href="#_25、堆和栈的区别" aria-label="Permalink to &quot;25、堆和栈的区别&quot;">​</a></h3><h3 id="_26、java会存在内存泄漏吗-请简单描述。" tabindex="-1">26、Java会存在内存泄漏吗？请简单描述。 <a class="header-anchor" href="#_26、java会存在内存泄漏吗-请简单描述。" aria-label="Permalink to &quot;26、Java会存在内存泄漏吗？请简单描述。&quot;">​</a></h3><h3 id="_27、生产环境服务器变慢-如何诊断处理" tabindex="-1">27、生产环境服务器变慢，如何诊断处理？ <a class="header-anchor" href="#_27、生产环境服务器变慢-如何诊断处理" aria-label="Permalink to &quot;27、生产环境服务器变慢，如何诊断处理？&quot;">​</a></h3><h3 id="_28、什么是逃逸分析" tabindex="-1">28、什么是逃逸分析？ <a class="header-anchor" href="#_28、什么是逃逸分析" aria-label="Permalink to &quot;28、什么是逃逸分析？&quot;">​</a></h3><h3 id="_29、java中会存在内存泄漏吗-请简单描述。" tabindex="-1">29、java中会存在内存泄漏吗，请简单描述。 <a class="header-anchor" href="#_29、java中会存在内存泄漏吗-请简单描述。" aria-label="Permalink to &quot;29、java中会存在内存泄漏吗，请简单描述。&quot;">​</a></h3><h3 id="_30、程序计数器为什么是私有的" tabindex="-1">30、程序计数器为什么是私有的? <a class="header-anchor" href="#_30、程序计数器为什么是私有的" aria-label="Permalink to &quot;30、程序计数器为什么是私有的?&quot;">​</a></h3>',101),n=[s];function l(E,p,i,h,m,d){return e(),r("div",null,n)}const u=a(t,[["render",l]]);export{B as __pageData,u as default};
