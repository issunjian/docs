import{_ as s}from"./chunks/filter.a4777ab7.js";import{_ as n,o as a,c as l,V as p}from"./chunks/framework.c6d8cbec.js";const g=JSON.parse('{"title":"Spring AOP","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/spring/SpringAOP.md","filePath":"java/javaee/spring/SpringAOP.md"}'),o={name:"java/javaee/spring/SpringAOP.md"},e=p(`<h1 id="spring-aop" tabindex="-1">Spring AOP <a class="header-anchor" href="#spring-aop" aria-label="Permalink to &quot;Spring AOP&quot;">​</a></h1><p><a href="https://www.cnblogs.com/joy99/p/10941543.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/joy99/p/10941543.html</a></p><p>超级详细版：<a href="http://shouce.jb51.net/spring/aop.html" target="_blank" rel="noreferrer">http://shouce.jb51.net/spring/aop.html</a></p><hr><h2 id="aop-原理" tabindex="-1">AOP 原理 <a class="header-anchor" href="#aop-原理" aria-label="Permalink to &quot;AOP 原理&quot;">​</a></h2><h3 id="面向切面" tabindex="-1">面向切面 <a class="header-anchor" href="#面向切面" aria-label="Permalink to &quot;面向切面&quot;">​</a></h3><p>( Aspect Orient Programming ) 面向切面编程，是面向对象编程(OOP) 的一种补充。</p><p>在 Java 程序自上而下处理主业务时，也会经常处理一些和主业务逻辑无关的问题（比如在接收用户访问请求时，计算程序响应该请求的运行时间）。这些代码如果和主逻辑代码混淆，会导致后期难以维护。</p><p>AOP 就是将这些横切性问题和主逻辑解耦。保证开发者不修改主逻辑代码的前提下，能为系统中的业务组件添加删除、或复用某种功能。</p><h3 id="代理模式" tabindex="-1">代理模式 <a class="header-anchor" href="#代理模式" aria-label="Permalink to &quot;代理模式&quot;">​</a></h3><p>AOP 的本质是修改业务组件实际执行方法的源代码。即代理类 A 封装了目标类 B ，外部调用 B 的目标方法时会被代理类 A 拦截，代理类 A 一方面执行切面逻辑，一方面把调用转发给目标类 B ，执行目标方法。</p><p>该过程是代理模式的实现，代理方式有以下两种：</p><ul><li><p><strong>静态 AOP</strong> ：在编译阶段对程序源代码进行修改，生成静态的 AOP 代理类（字节码文件已被修改）。性能更好。</p></li><li><p><strong>动态 AOP</strong> ：在运行阶段动态生成代理对象。灵活性更好。</p></li></ul><h4 id="动态代理" tabindex="-1">动态代理 <a class="header-anchor" href="#动态代理" aria-label="Permalink to &quot;动态代理&quot;">​</a></h4><p>Spring 中的 AOP 是通过动态代理实现的，有以下两种方式：</p><ul><li><strong>JDK 动态代理</strong></li></ul><p>利用反射机制生成一个实现代理接口的类，在调用具体方法前调用 InvokeHandler 来处理。</p><p>JDK 代理只能对实现接口的类生成代理。代理生成的是一个接口对象，因此代理类必须实现了接口，否则会抛出异常。</p><ul><li><strong>CGlib 动态代理</strong></li></ul><p>直接操作字节码对代理对象类的字节码文件加载并修改，生成子类来处理。</p><p>CGlib 代理针对类实现代理，对指定的类生成一个子类并覆盖其中的方法，因此不能代理 final 类。</p><hr><h2 id="aop-注解详解" tabindex="-1">AOP 注解详解 <a class="header-anchor" href="#aop-注解详解" aria-label="Permalink to &quot;AOP 注解详解&quot;">​</a></h2><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><p>对负责扫描组件的配置文件类(@Configuration) 添加 <code>@EnableAspectJAutoProxy</code> 注解，启用 AOP 功能。</p><p>**默认通过 JDK 动态代理方式进行织入。**但必须代理一个实现接口的类，否则会抛出异常。</p><p>注解改为 <code>@EnableAspectJAutoProxy(proxyTargetClass = true)</code>：</p><p>通过 cglib 的动态代理方式进行织入。但如果拓展类的方法被 final 修饰，则织入无效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ComponentScan</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">basePackageClasses</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {com.company.project.service.Meal.class})</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">EnableAspectJAutoProxy</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">proxyTargetClass</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AppConfig</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ComponentScan</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">basePackageClasses</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {com.company.project.service.Meal.class})</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableAspectJAutoProxy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">proxyTargetClass</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="切面" tabindex="-1">切面 <a class="header-anchor" href="#切面" aria-label="Permalink to &quot;切面&quot;">​</a></h3><p>对组件类(@component) 添加 <code>@Aspect</code> 注解，表示该类为切面类。</p><h4 id="增强类型" tabindex="-1">增强类型 <a class="header-anchor" href="#增强类型" aria-label="Permalink to &quot;增强类型&quot;">​</a></h4><p><strong>前置通知</strong></p><p>切面方法注解 <code>@Before</code> 表示目标方法调用前，执行该切面方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Before</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">execution(* com.company.project.service.Meal.eat(..))</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cook</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cook</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Before</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execution(* com.company.project.service.Meal.eat(..))&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cook</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cook&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>后置通知</strong></p><ul><li>切面方法注解 <code>@After</code> 表示目标方法返回或抛出异常后，执行该切面方法。</li><li>切面方法注解 <code>@AfterReturning</code> 只在目标方法返回后，执行该切面方法。</li><li>切面方法注解 <code>@AfterThrowing</code> 只在目标方法抛出异常后，执行该切面方法。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">AfterReturning</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">execution(* com.company.project.service.Meal.eat(..))</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">clean</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">clean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AfterReturning</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execution(* com.company.project.service.Meal.eat(..))&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clean</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;clean&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>环绕通知</strong></p><p>切面方法注解 <code>@Around</code> 表示切面方法执行过程中，执行目标方法。</p><p>传入参数为 ProceedingJoinPoint 类对象，表示目标方法。在切面方法中调用其 proceed 方法来执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Around</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">execution(* com.company.project.service.Meal.eat(..))</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">party</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ProceedingJoinPoint</span><span style="color:#F6F6F4;"> pj) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cook</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        pj.</span><span style="color:#62E884;">proceed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">clean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">throwable</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        throwable.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Around</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execution(* com.company.project.service.Meal.eat(..))&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">party</span><span style="color:#24292E;">(ProceedingJoinPoint pj) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cook&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        pj.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;clean&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">throwable</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        throwable.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="切点声明" tabindex="-1">切点声明 <a class="header-anchor" href="#切点声明" aria-label="Permalink to &quot;切点声明&quot;">​</a></h4><p>在切面方法中需要声明切面方法要切入的目标方法，execution 指示器是我们定义切点时最主要使用的指示器。</p><p>格式为： <code>execution(返回数据类型 路径.类.方法(传入参数类型))</code></p><p>参数 | 功能</p><ul><li>| - <code>execution(* com.company.project.service.Meal.eat(..))</code> | 执行 Meal 类的 eat 方法时切入 <code>execution(* com.company.project.service.Meal.eat(int,String))</code> | 执行 Meal 类的 eat(int,String) 方法时切入 <code>execution(* com.company.project.service.Meal.*(..))</code> | 执行 Meal 类的所有方法时切入 <code>execution(* com.company.project.service.*.*(..))</code> | 执行 service 包内的任意方法时切入（不包含子包） <code>execution(* com.company.project.service..*.*(..))</code> | 执行 service 包内的任意方法时切入（包含子包） <code>execution(public * *(..))</code> | 执行所有目标类的所有 public 方法时切入 <code>execution(* pre*(...))</code> | 执行所有目标类所有以 pre 为前缀的方法时切入</li></ul><p>还有一些其他指示器：</p><p>参数 | 功能</p><ul><li><p>| - <code>within(com.company.project.service.*)</code> | 执行 service 包内的任意方法时切入 <code>this(com.company.project.service.AccountService)</code> | 执行实现 AccountService 接口的代理对象的任意方法时切入 <code>target(com.company.project.service.AccountService)</code> | 执行实现 AccountService 接口的目标对象的任意方法时切入 <code>args(java.io.Serializable)</code>| 任何一个只接受一个参数，并且运行时所传入的参数是 Serializable 接口的方法</p></li><li><p>多个匹配条件之间使用链接符连接： <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 。</p></li><li><p>within 指示器表示可以选择的包，bean 指示器可以在切点中选择 bean 。</p></li></ul><p>如参数 <code>execution(String com.company.project.service.test1.IBuy.buy(double)) &amp;&amp; args(price) &amp;&amp; bean(girl)</code></p><p>要求返回类型为 String ；参数类型为 double ；参数名为 price ；调用目标方法的 bean 名称为 girl 。</p><p><strong>简化代码</strong></p><p>对于类中要频繁要切入的目标方法，我们可以使用 <code>@Pointcut</code> 注解声明切点表达式，简化代码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Aspect</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">EatPlus</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Pointcut</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">execution(* com.company.project.service.Meal.eat(..))</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">point</span><span style="color:#F6F6F4;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Before</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">point()</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">cook</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cook</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Around</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">point()</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">party</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ProceedingJoinPoint</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">pj</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">cook</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            pj.</span><span style="color:#62E884;">proceed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">clean</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">throwable</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            throwable.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Pointcut</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">execution(String com.company.project.service.Meal.eat(double)) &amp;&amp; args(price) &amp;&amp; bean(people)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">point2</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">price</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Around</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">point2(price)</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">pay</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ProceedingJoinPoint</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">pj</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">price</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            pj.</span><span style="color:#62E884;">proceed</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (price </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">can not afford</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">没有购买</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">throwable</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            throwable.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">购买</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Aspect</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">EatPlus</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Pointcut</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execution(* com.company.project.service.Meal.eat(..))&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point</span><span style="color:#24292E;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Before</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;point()&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cook</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cook&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Around</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;point()&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">party</span><span style="color:#24292E;">(ProceedingJoinPoint </span><span style="color:#E36209;">pj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;cook&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            pj.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;clean&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">throwable</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            throwable.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Pointcut</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;execution(String com.company.project.service.Meal.eat(double)) &amp;&amp; args(price) &amp;&amp; bean(people)&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point2</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Around</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;point2(price)&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">pay</span><span style="color:#24292E;">(ProceedingJoinPoint </span><span style="color:#E36209;">pj</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            pj.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (price </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;can not afford&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;没有购买&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">throwable</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            throwable.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;购买&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="常用-aop" tabindex="-1">常用 AOP <a class="header-anchor" href="#常用-aop" aria-label="Permalink to &quot;常用 AOP&quot;">​</a></h2><h3 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h3><ul><li><p><code>@ControllerAdvice</code> / <code>@RestControllerAdvice</code>: 标注当前类为所有 Controller 类服务</p></li><li><p><code>@ExceptionHandler</code>: 标注当前方法处理异常（默认处理 RuntimeException） <code>@ExceptionHandler(value = Exception.class)</code>: 处理所有异常</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RestControllerAdvice</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ControllerExceptionHandler</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ExceptionHandler</span><span style="color:#F6F6F4;">(Throwable.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultBean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleOtherException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">错误=%s,位置=%s</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, e.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(), e.</span><span style="color:#62E884;">getStackTrace</span><span style="color:#F6F6F4;">()[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultBean.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(ErrorCode.UNKNOWN_ERROR.</span><span style="color:#62E884;">getErrorCode</span><span style="color:#F6F6F4;">(), message);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ExceptionHandler</span><span style="color:#F6F6F4;">(StreamPlatformException.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultBean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleVenusException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">StreamPlatformException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultBean.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(e.</span><span style="color:#62E884;">getErrorCode</span><span style="color:#F6F6F4;">(), e.</span><span style="color:#62E884;">getMessageToUser</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ExceptionHandler</span><span style="color:#F6F6F4;">(FormValidationException.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ResultBean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handleFormValidationException</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FormValidationException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        e.</span><span style="color:#62E884;">getResult</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getAllErrors</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(objectError </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (objectError </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> FieldError) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">FieldError</span><span style="color:#F6F6F4;"> fieldError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (FieldError) objectError;</span></span>
<span class="line"><span style="color:#F6F6F4;">                message.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">参数</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(fieldError.</span><span style="color:#62E884;">getField</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                        .</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">错误值为</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(fieldError.</span><span style="color:#62E884;">getRejectedValue</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                        .</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(fieldError.</span><span style="color:#62E884;">getDefaultMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                message.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(objectError.</span><span style="color:#62E884;">getDefaultMessage</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ResultBean.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(ErrorCode.PARAMETER_VALIDATION_ERROR.</span><span style="color:#62E884;">getErrorCode</span><span style="color:#F6F6F4;">(),</span></span>
<span class="line"><span style="color:#F6F6F4;">                String.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(ErrorCode.PARAMETER_VALIDATION_ERROR.</span><span style="color:#62E884;">getMessage</span><span style="color:#F6F6F4;">(), message));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestControllerAdvice</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ControllerExceptionHandler</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(Throwable.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultBean </span><span style="color:#6F42C1;">handleOtherException</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;错误=%s,位置=%s&quot;</span><span style="color:#24292E;">, e.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(), e.</span><span style="color:#6F42C1;">getStackTrace</span><span style="color:#24292E;">()[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultBean.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(ErrorCode.UNKNOWN_ERROR.</span><span style="color:#6F42C1;">getErrorCode</span><span style="color:#24292E;">(), message);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(StreamPlatformException.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultBean </span><span style="color:#6F42C1;">handleVenusException</span><span style="color:#24292E;">(StreamPlatformException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultBean.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getErrorCode</span><span style="color:#24292E;">(), e.</span><span style="color:#6F42C1;">getMessageToUser</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ExceptionHandler</span><span style="color:#24292E;">(FormValidationException.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ResultBean </span><span style="color:#6F42C1;">handleFormValidationException</span><span style="color:#24292E;">(FormValidationException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        StringBuilder message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAllErrors</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(objectError </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (objectError </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> FieldError) {</span></span>
<span class="line"><span style="color:#24292E;">                FieldError fieldError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (FieldError) objectError;</span></span>
<span class="line"><span style="color:#24292E;">                message.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;参数&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(fieldError.</span><span style="color:#6F42C1;">getField</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;错误值为&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(fieldError.</span><span style="color:#6F42C1;">getRejectedValue</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                        .</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(fieldError.</span><span style="color:#6F42C1;">getDefaultMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                message.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(objectError.</span><span style="color:#6F42C1;">getDefaultMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ResultBean.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(ErrorCode.PARAMETER_VALIDATION_ERROR.</span><span style="color:#6F42C1;">getErrorCode</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(ErrorCode.PARAMETER_VALIDATION_ERROR.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">(), message));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="拦截器" tabindex="-1">拦截器 <a class="header-anchor" href="#拦截器" aria-label="Permalink to &quot;拦截器&quot;">​</a></h3><ul><li><strong>拦截器(Interceptor)</strong></li></ul><p>Java Web 中，在执行 Controller 方法前后对 Controller 请求进行拦截和处理。依赖于 web 框架，在 Spring 配置。在实现上基于 Java 的反射机制。</p><ul><li><strong>过滤器(Filter)</strong></li></ul><p>Java Web 中，在 request/response 传入 Servlet 前，过滤信息或设置参数。依赖于 servlet 容器，在 web.xml 配置。在实现上基于函数回调。</p><blockquote><p>两者常用于修改字符编码、删除无用参数、登录校验等。Spring 框架中优先使用拦截器：功能接近、使用更加灵活。</p></blockquote><p>拦截器配置</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 在配置中引入拦截器对象（单独编写拦截器类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addInterceptors</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistry</span><span style="color:#F6F6F4;"> registry) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 导入拦截器对象，默认拦截全部</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistration</span><span style="color:#F6F6F4;"> addInterceptor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> registry.</span><span style="color:#62E884;">addInterceptor</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myInterceptor</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 排除配置</span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/error</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/user/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);               </span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/asserts/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                       </span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/webjars/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/public/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 拦截配置</span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">addPathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在配置中引入拦截器对象（单独编写拦截器类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry registry) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 导入拦截器对象，默认拦截全部</span></span>
<span class="line"><span style="color:#24292E;">    InterceptorRegistration addInterceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">addInterceptor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myInterceptor</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 排除配置</span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/error&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/user/login&quot;</span><span style="color:#24292E;">);               </span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/asserts/**&quot;</span><span style="color:#24292E;">);                       </span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/webjars/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/public/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拦截配置</span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">addPathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>拦截器类通过实现 HandlerInterceptor 接口或者继承 HandlerInterceptorAdapter 类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 定义拦截器</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">myInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HandlerInterceptorAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Session key</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> SESSION_KEY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// preHandle 预处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">preHandle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 检查 session</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">HttpSession</span><span style="color:#F6F6F4;"> session </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getSession</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (session.</span><span style="color:#62E884;">getAttribute</span><span style="color:#F6F6F4;">(SESSION_KEY) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 重定向到登录页面</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">setAttribute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录失败，请先输入用户名和密码。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">getRequestDispatcher</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forward</span><span style="color:#F6F6F4;">(request,response);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// postHandle 善后处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">postHandle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                           </span><span style="color:#97E1F1;font-style:italic;">ModelAndView</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">modelAndView</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">INTERCEPTOR POSTHANDLE CALLED</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义拦截器</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerInterceptorAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Session key</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String SESSION_KEY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// preHandle 预处理</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preHandle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查 session</span></span>
<span class="line"><span style="color:#24292E;">        HttpSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (session.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(SESSION_KEY) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重定向到登录页面</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;登录失败，请先输入用户名和密码。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">getRequestDispatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(request,response);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// postHandle 善后处理</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postHandle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           ModelAndView </span><span style="color:#E36209;">modelAndView</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;INTERCEPTOR POSTHANDLE CALLED&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>过滤器类通过继承 Filter 类实现，直接添加注解即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">                                                                </span><span style="color:#7B7F8B;">// 作为组件，交给容器处理</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ServletComponentScan</span><span style="color:#F6F6F4;">                                                     </span><span style="color:#7B7F8B;">// 扫描组件</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">WebFilter</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">urlPatterns</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login/*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">filterName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">loginFilter</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)           </span><span style="color:#7B7F8B;">// 设定过滤路径和名称</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Order</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)                                                                 </span><span style="color:#7B7F8B;">// 设定优先级（值小会优先执行）</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LoginFilter</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Filter</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">init</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FilterConfig</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">filterConfig</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">servletRequest</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">servletResponse</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">FilterChain</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">filterChain</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 过滤器前执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">before</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 执行内部逻辑</span></span>
<span class="line"><span style="color:#F6F6F4;">        filterChain.</span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 过滤器后执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">after</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">destroy</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;">                                                                </span><span style="color:#6A737D;">// 作为组件，交给容器处理</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ServletComponentScan</span><span style="color:#24292E;">                                                     </span><span style="color:#6A737D;">// 扫描组件</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">WebFilter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">urlPatterns</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/login/*&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">filterName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;loginFilter&quot;</span><span style="color:#24292E;">)           </span><span style="color:#6A737D;">// 设定过滤路径和名称</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)                                                                 </span><span style="color:#6A737D;">// 设定优先级（值小会优先执行）</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoginFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(FilterConfig </span><span style="color:#E36209;">filterConfig</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(ServletRequest </span><span style="color:#E36209;">servletRequest</span><span style="color:#24292E;">, ServletResponse </span><span style="color:#E36209;">servletResponse</span><span style="color:#24292E;">, FilterChain </span><span style="color:#E36209;">filterChain</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 过滤器前执行</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行内部逻辑</span></span>
<span class="line"><span style="color:#24292E;">        filterChain.</span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 过滤器后执行</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>调用顺序</strong></p><p><img src="`+s+'" alt="filter"></p>',74),t=[e];function c(r,y,F,i,E,u){return a(),l("div",null,t)}const A=n(o,[["render",c]]);export{g as __pageData,A as default};
