import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/instanceof-jvm-b676fee6-bfd4-4ae9-9c7b-e488e345f775.92ba4bf4.gif",d=JSON.parse('{"title":"Java中的instanceof关键字是如何实现的？","description":"Java程序员进阶之路，小白的零基础Java教程，从入门到进阶，Java中的instanceof关键字是如何实现的？","frontmatter":{"title":"Java中的instanceof关键字是如何实现的？","shortTitle":"instanceof关键字是如何实现的？","category":["Java核心"],"tag":["Java重要知识点"],"description":"Java程序员进阶之路，小白的零基础Java教程，从入门到进阶，Java中的instanceof关键字是如何实现的？","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java进阶之路,Java入门,教程,java,instanceof"}]]},"headers":[],"relativePath":"backend/tobetter/basic-extra-meal/instanceof-jvm.md","filePath":"backend/tobetter/basic-extra-meal/instanceof-jvm.md"}'),o={name:"backend/tobetter/basic-extra-meal/instanceof-jvm.md"},e=l('<p>小二那天去面试，碰到了这个问题：“<strong>instanceof 关键字是如何实现的</strong>？”面试官希望他能从底层来分析一下，结果小二没答上来，就来问我。</p><p>我唯唯诺诺，强装镇定，只好把 R 大的一篇回答甩给了他，并且叮嘱他：“认认真真看，玩完后要是还不明白，再来问我。。。”</p><blockquote><p>作者：RednaxelaFX，整理：沉默王二，链接：<a href="https://www.zhihu.com/question/21574535/answer/18998914" target="_blank" rel="noreferrer">https://www.zhihu.com/question/21574535/answer/18998914</a></p></blockquote><img src="'+p+`"><hr><h2 id="场景一-月薪-3000-元一下的码农职位" tabindex="-1">场景一：月薪 3000 元一下的码农职位 <a class="header-anchor" href="#场景一-月薪-3000-元一下的码农职位" aria-label="Permalink to &quot;场景一：月薪 3000 元一下的码农职位&quot;">​</a></h2><p>用 Java 伪代码来表现instanceof关键字在Java语言规范所描述的运行时语义，是这样的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// obj instanceof T</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (obj </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (T) obj; </span><span style="color:#7B7F8B;">// checkcast</span></span>
<span class="line"><span style="color:#F6F6F4;">      result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ClassCastException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// obj instanceof T</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (obj </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      T temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (T) obj; </span><span style="color:#6A737D;">// checkcast</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (ClassCastException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>用中文说就是：如果有表达式 <code>obj instanceof T</code>，那么如果 obj 不为 null 并且 (T) obj 不抛 ClassCastException 异常则该表达式值为 true ，否则值为 false 。</p><p>如果面试官说“这不是废话嘛”，进入场景二。</p><h2 id="场景二-月薪6000-8000的java研发职位" tabindex="-1">场景二：月薪6000-8000的Java研发职位 <a class="header-anchor" href="#场景二-月薪6000-8000的java研发职位" aria-label="Permalink to &quot;场景二：月薪6000-8000的Java研发职位&quot;">​</a></h2><p>JVM有一条名为 instanceof 的指令，而Java源码编译到Class文件时会把Java语言中的 instanceof 运算符映射到JVM的 instanceof 指令上。</p><p>javac是这样做的：</p><ul><li>instanceof 是javac能识别的一个关键字，对应到Token.INSTANCEOF的token类型。做词法分析的时候扫描到&quot;instanceof&quot;关键字就映射到了一个Token.INSTANCEOF token。</li><li>该编译器的抽象语法树节点有一个JCTree.JCInstanceOf类用于表示instanceof运算。做语法分析的时候解析到<a href="https://tobebetterjavaer.com/basic-extra-meal/instanceof.html" target="_blank" rel="noreferrer">instanceof运算符</a>就会生成这个JCTree.JCInstanceof类型的节点。</li><li>中途还得根据Java语言规范对instanceof运算符的编译时检查的规定把有问题的情况找出来。</li><li>到最后生成字节码的时候为JCTree.JCInstanceof节点生成instanceof字节码指令。</li></ul><p>回答到这层面就已经能解决好些实际问题了，如果面试官还说，“这不还是废话嘛”，进入场景三。</p><h2 id="场景三-月薪10000的java高级研发职位" tabindex="-1">场景三：月薪10000的Java高级研发职位 <a class="header-anchor" href="#场景三-月薪10000的java高级研发职位" aria-label="Permalink to &quot;场景三：月薪10000的Java高级研发职位&quot;">​</a></h2><p>先简单介绍一下instanceof的字节码：</p><ul><li>操作：确定对象是否为给定的类型</li><li>指令格式：instanceof|indexbyte1|indexbyte2</li><li>指令执行前后的栈顶状态： <ul><li>……，objectref=&gt;</li><li>……，result</li></ul></li></ul><p>再简单描述下：indexbyte1和indexbyte2用于构造对当前类的常量池的索引，objectref为reference类型，可以是某个类，数组的实例或者是接口。</p><p>基本的实现过程：对indexbyte1和indexbyte2构造的常量池索引进行解析，然后根据java规范判断解析的类是不是objectref的一个实例，最后在栈顶写入结果。</p><p>基本上就是根据规范来 YY 下实现，就能八九不离十蒙混过关了。</p><p>如果面试官还不满意，进入场景四。</p><h2 id="场景四-月薪10000以上的java资深研发职位" tabindex="-1">场景四：月薪10000以上的Java资深研发职位 <a class="header-anchor" href="#场景四-月薪10000以上的java资深研发职位" aria-label="Permalink to &quot;场景四：月薪10000以上的Java资深研发职位&quot;">​</a></h2><p>这个岗位注重性能调优什么的，R 大说可以上论文了：</p><blockquote><p><a href="https://dl.acm.org/doi/10.1145/583810.583821" target="_blank" rel="noreferrer">https://dl.acm.org/doi/10.1145/583810.583821</a></p></blockquote><p>论文我也看不懂，所以这里就不 BB 了。（逃</p><p>篇论文描述了HotSpot VM做子类型判断的算法，这里简单补充一下JDK6至今的HotSpot VM实际采用的算法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">S.</span><span style="color:#62E884;">is_subtype_of</span><span style="color:#F6F6F4;">(T) </span><span style="color:#F286C4;">:=</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> off </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> T.offset;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (S </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> T) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (T </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">S</span><span style="color:#F6F6F4;">[off]) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (off </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;">cache) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ( S.</span><span style="color:#62E884;">scan_secondary_subtype_array</span><span style="color:#F6F6F4;">(T) ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    S.cache </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> T;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">S.</span><span style="color:#6F42C1;">is_subtype_of</span><span style="color:#24292E;">(T) </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> off </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> T.offset;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (S </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> T) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (T </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">S</span><span style="color:#24292E;">[off]) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (off </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">cache) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( S.</span><span style="color:#6F42C1;">scan_secondary_subtype_array</span><span style="color:#24292E;">(T) ) {</span></span>
<span class="line"><span style="color:#24292E;">    S.cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> T;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>HotSpot VM的两个编译器，Client Compiler (C1) 与 Server Compiler (C2) 各自对子类型判断的实现有更进一步的优化。实际上在JVM里，instanceof的功能就实现了4份，VM runtime、解释器、C1、C2各一份。</p><p>VM runtime的：</p><blockquote><p><a href="http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp" target="_blank" rel="noreferrer">http://hg.openjdk.java.net/jdk7u/jdk7u/hotspot/file/tip/src/share/vm/oops/oop.inline.hpp</a></p></blockquote><p>分享的最后，二哥简单来说一下。</p><p>这个问题涉及语法细节，涉及jvm实现，涉及编译器，还涉及一点点数据结构设计，比较考验一个 Java 程序员的内功，如果要回答到论文的程度，那真的是，面试官也得提前备好知识点，不然应聘者的回答啥也听不懂就挺尴尬的。</p><p>反正 R 大回答里的很多细节我都是第一次听，逃了逃了。。。。。。</p><hr>`,35),t=[e];function c(r,y,F,i,f,E){return a(),n("div",null,t)}const h=s(o,[["render",c]]);export{d as __pageData,h as default};
