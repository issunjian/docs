import{_ as a,o as e,c as s,V as n}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-24.md","filePath":"interview/backend/java/java-24.md"}'),o={name:"interview/backend/java/java-24.md"},t=n(`<h3 id="_1、java-8-为什么要将永久代-permgen-替换为元空间-metaspace-呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1java-8-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%B0%86%E6%B0%B8%E4%B9%85%E4%BB%A3permgen%E6%9B%BF%E6%8D%A2%E4%B8%BA%E5%85%83%E7%A9%BA%E9%97%B4metaspace%E5%91%A2" target="_blank" rel="noreferrer">1、Java 8 为什么要将永久代(PermGen)替换为元空间(MetaSpace)呢？</a> <a class="header-anchor" href="#_1、java-8-为什么要将永久代-permgen-替换为元空间-metaspace-呢" aria-label="Permalink to &quot;[1、Java 8 为什么要将永久代(PermGen)替换为元空间(MetaSpace)呢？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#1java-8-为什么要将永久代permgen替换为元空间metaspace呢)&quot;">​</a></h3><p>整个永久代有一个 JVM 本身设置固定大小上线，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，并且永远不会出现java.lang.OutOfMemoryError。你可以使用 -XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。-XX：MetaspaceSize 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p><h3 id="_2、如何自定义线程线程池" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0" target="_blank" rel="noreferrer">2、如何自定义线程线程池?</a> <a class="header-anchor" href="#_2、如何自定义线程线程池" aria-label="Permalink to &quot;[2、如何自定义线程线程池?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#2如何自定义线程线程池)&quot;">​</a></h3><p>先看ThreadPoolExecutor（线程池）这个类的构造参数</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/045/42/87_8.png#alt=87%5C_8.png" alt="">构造参数参数介绍：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">corePoolSize 核心线程数量</span></span>
<span class="line"><span style="color:#f6f6f4;">maximumPoolSize 最大线程数量</span></span>
<span class="line"><span style="color:#f6f6f4;">keepAliveTime 线程保持时间，N个时间单位</span></span>
<span class="line"><span style="color:#f6f6f4;">unit 时间单位（比如秒，分）</span></span>
<span class="line"><span style="color:#f6f6f4;">workQueue 阻塞队列</span></span>
<span class="line"><span style="color:#f6f6f4;">threadFactory 线程工厂</span></span>
<span class="line"><span style="color:#f6f6f4;">handler 线程池拒绝策略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">corePoolSize 核心线程数量</span></span>
<span class="line"><span style="color:#24292e;">maximumPoolSize 最大线程数量</span></span>
<span class="line"><span style="color:#24292e;">keepAliveTime 线程保持时间，N个时间单位</span></span>
<span class="line"><span style="color:#24292e;">unit 时间单位（比如秒，分）</span></span>
<span class="line"><span style="color:#24292e;">workQueue 阻塞队列</span></span>
<span class="line"><span style="color:#24292e;">threadFactory 线程工厂</span></span>
<span class="line"><span style="color:#24292e;">handler 线程池拒绝策略</span></span></code></pre></div><ul><li>代码示例：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">package com.lijie;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.util.concurrent.ArrayBlockingQueue;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.util.concurrent.ThreadPoolExecutor;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#f6f6f4;">public class Test001 {</span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        //创建线程池</span></span>
<span class="line"><span style="color:#f6f6f4;">        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 2, 60L, TimeUnit.SECONDS, new ArrayBlockingQueue &lt; &gt; (3));</span></span>
<span class="line"><span style="color:#f6f6f4;">        for (int i = 1; i &lt;= 6; i++) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            TaskThred t1 = new TaskThred(&quot;任务&quot; + i);</span></span>
<span class="line"><span style="color:#f6f6f4;">            //executor.execute(t1);是执行线程方法</span></span>
<span class="line"><span style="color:#f6f6f4;">            executor.execute(t1);</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">        //executor.shutdown()不再接受新的任务，并且等待之前提交的任务都执行完再关闭，阻塞队列中的任务不会再执行。</span></span>
<span class="line"><span style="color:#f6f6f4;">        executor.shutdown();</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;">class TaskThred implements Runnable {</span></span>
<span class="line"><span style="color:#f6f6f4;">    private String taskName;</span></span>
<span class="line"><span style="color:#f6f6f4;">    public TaskThred(String taskName) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        this.taskName = taskName;</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">    public void run() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(Thread.currentThread().getName() + taskName);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">package com.lijie;</span></span>
<span class="line"><span style="color:#24292e;">import java.util.concurrent.ArrayBlockingQueue;</span></span>
<span class="line"><span style="color:#24292e;">import java.util.concurrent.ThreadPoolExecutor;</span></span>
<span class="line"><span style="color:#24292e;">import java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#24292e;">public class Test001 {</span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        //创建线程池</span></span>
<span class="line"><span style="color:#24292e;">        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 2, 60L, TimeUnit.SECONDS, new ArrayBlockingQueue &lt; &gt; (3));</span></span>
<span class="line"><span style="color:#24292e;">        for (int i = 1; i &lt;= 6; i++) {</span></span>
<span class="line"><span style="color:#24292e;">            TaskThred t1 = new TaskThred(&quot;任务&quot; + i);</span></span>
<span class="line"><span style="color:#24292e;">            //executor.execute(t1);是执行线程方法</span></span>
<span class="line"><span style="color:#24292e;">            executor.execute(t1);</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">        //executor.shutdown()不再接受新的任务，并且等待之前提交的任务都执行完再关闭，阻塞队列中的任务不会再执行。</span></span>
<span class="line"><span style="color:#24292e;">        executor.shutdown();</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">class TaskThred implements Runnable {</span></span>
<span class="line"><span style="color:#24292e;">    private String taskName;</span></span>
<span class="line"><span style="color:#24292e;">    public TaskThred(String taskName) {</span></span>
<span class="line"><span style="color:#24292e;">        this.taskName = taskName;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    public void run() {</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(Thread.currentThread().getName() + taskName);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_3、类初始化的情况有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E6%83%85%E5%86%B5%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">3、类初始化的情况有哪些？</a> <a class="header-anchor" href="#_3、类初始化的情况有哪些" aria-label="Permalink to &quot;[3、类初始化的情况有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#3类初始化的情况有哪些)&quot;">​</a></h3><ol><li></li></ol><p>遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code> 或 <code>invokestatic</code> 字节码指令时，还未初始化。典型场景包括 new 实例化对象、读取或设置静态字段、调用静态方法。</p><ol start="2"><li></li></ol><p>对类反射调用时，还未初始化。</p><ol start="3"><li></li></ol><p>初始化类时，父类还未初始化。</p><ol start="4"><li></li></ol><p>虚拟机启动时，会先初始化包含 main 方法的主类。</p><ol start="5"><li></li></ol><p>使用 JDK7 的动态语言支持时，如果 MethodHandle 实例的解析结果为指定类型的方法句柄且句柄对应的类还未初始化。</p><ol start="6"><li></li></ol><p>口定义了默认方法，如果接口的实现类初始化，接口要在其之前初始化。</p><ol start="7"><li></li></ol><p>其余所有引用类型的方式都不会触发初始化，称为被动引用。被动引用实例：① 子类使用父类的静态字段时，只有父类被初始化。② 通过数组定义使用类。③ 常量在编译期会存入调用类的常量池，不会初始化定义常量的类。</p><ol start="8"><li></li></ol><p>接口和类加载过程的区别：初始化类时如果父类没有初始化需要初始化父类，但接口初始化时不要求父接口初始化，只有在真正使用父接口时（如引用接口中定义的常量）才会初始化。</p><h3 id="_4、java里有哪些引用类型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4java%E9%87%8C%E6%9C%89%E5%93%AA%E4%BA%9B%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">4、Java里有哪些引用类型？</a> <a class="header-anchor" href="#_4、java里有哪些引用类型" aria-label="Permalink to &quot;[4、Java里有哪些引用类型？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#4java里有哪些引用类型)&quot;">​</a></h3><p><strong>1、</strong> 强引用 这种引用属于最普通最强硬的一种存在，只有在和 GC Roots 断绝关系时，才会被消灭掉。</p><p><strong>2、</strong> 软引用 软引用用于维护一些可有可无的对象。在内存足够的时候，软引用对象不会被回收，只有在内存不足时，系统则会回收软引用对象，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。可以看到，这种特性非常适合用在缓存技术上。比如网页缓存、图片缓存等。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，Java 虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><p><strong>3、</strong> 弱引用 弱引用对象相比较软引用，要更加无用一些，它拥有更短的生命周期。当JVM进行垃圾回收时，无论内存是否充足，都会回收被弱引用关联的对象。弱引用拥有更短的生命周期，在 Java 中，用 java.lang.ref.WeakReference 类来表示。它的应用场景和软引用类似，可以在一些对内存更加敏感的系统里采用。</p><p><strong>4、</strong> 虚引用 这是一种形同虚设的引用，在现实场景中用的不是很多。虚引用必须和引用队列（ReferenceQueue）联合使用。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。实际上，虚引用的 get，总是返回 null。</p><h3 id="_5、java8-与元数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5java8-%E4%B8%8E%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">5、JAVA8 与元数据</a> <a class="header-anchor" href="#_5、java8-与元数据" aria-label="Permalink to &quot;[5、JAVA8 与元数据](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#5java8-与元数据)&quot;">​</a></h3><p>在 Java8 中， 永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代。元空间的本质和永久代类似，元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入nativememory, 字符串池和类的静态变量放入 java 堆中， 这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用空间来控制。</p><h3 id="_6、引用计数法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95" target="_blank" rel="noreferrer">6、引用计数法</a> <a class="header-anchor" href="#_6、引用计数法" aria-label="Permalink to &quot;[6、引用计数法](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#6引用计数法)&quot;">​</a></h3><p>在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单的办法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关联的引用， 即他们的引用计数都不为 0， 则说明对象不太可能再被用到，那么这个对象就是可回收对象。</p><h3 id="_7、string-str-aaa-与string-str-new-string-aaa-一样吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7string-str=aaa,%E4%B8%8Estring-str=new-string%E2%80%9Caaa%E4%B8%80%E6%A0%B7%E5%90%97" target="_blank" rel="noreferrer">7、String str=”aaa”,与String str=new String(“aaa”)一样吗？</a> <a class="header-anchor" href="#_7、string-str-aaa-与string-str-new-string-aaa-一样吗" aria-label="Permalink to &quot;[7、String str=”aaa”,与String str=new String(“aaa”)一样吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#7string-str=aaa,与string-str=new-string“aaa一样吗)&quot;">​</a></h3><p><strong>1、</strong> 不一样的。因为内存分配的方式不一样。</p><p><strong>2、</strong> 第一种，创建的”aaa”是常量，jvm都将其分配在常量池中。</p><p><strong>3、</strong> 第二种创建的是一个对象，jvm将其值分配在堆内存中。</p><h3 id="_8、xml的java解析有几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8xml%E7%9A%84java%E8%A7%A3%E6%9E%90%E6%9C%89%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">8、Xml的java解析有几种方式？</a> <a class="header-anchor" href="#_8、xml的java解析有几种方式" aria-label="Permalink to &quot;[8、Xml的java解析有几种方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#8xml的java解析有几种方式)&quot;">​</a></h3><p><strong>Java API解析xml主要有两种方式；</strong></p><p>Dom解析：一次性加载整个文档，生成树形结构。在生成的文档对象中，可以对节点进行增删改查的操作。当xml文本当较小的时候，可以使用dom解析。</p><p>Sax解析：基于事件的解析方式，解析速度比较快，解析的文档大小理论上是没有限制的。</p><p>还有一些开源的技术可以解析xml，dom4j或者jdom。</p><h3 id="_9、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E4%B8%BA%E4%BB%80%E4%B9%88-wait,-notify%E5%92%8C-notifyall%E5%BF%85%E9%A1%BB%E5%9C%A8%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E6%88%96%E8%80%85%E5%90%8C%E6%AD%A5%E5%9D%97%E4%B8%AD%E8%A2%AB%E8%B0%83%E7%94%A8" target="_blank" rel="noreferrer">9、为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？</a> <a class="header-anchor" href="#_9、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用" aria-label="Permalink to &quot;[9、为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#9为什么-wait,-notify和-notifyall必须在同步方法或者同步块中被调用)&quot;">​</a></h3><p>当一个线程需要调用对象的 wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的 notify()方法。同样的，当一个线程需要调用对象的 notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。</p><h3 id="_10、jvm新生代中为什么要分为eden和survivor" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10jvm%E6%96%B0%E7%94%9F%E4%BB%A3%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%86%E4%B8%BAeden%E5%92%8Csurvivor" target="_blank" rel="noreferrer">10、JVM新生代中为什么要分为Eden和Survivor？</a> <a class="header-anchor" href="#_10、jvm新生代中为什么要分为eden和survivor" aria-label="Permalink to &quot;[10、JVM新生代中为什么要分为Eden和Survivor？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新面试题，常见面试题及答案汇总.md#10jvm新生代中为什么要分为eden和survivor)&quot;">​</a></h3><p>如果没有Survivor，Eden区每进行一次Minor GC，存活的对象就会被送到老年代。老年代很快被填满，触发Major GC.老年代的内存空间远大于新生代，进行一次Full GC消耗的时间比Minor GC长得多,所以需要分为Eden和Survivor。Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。设置两个Survivor区最大的好处就是解决了碎片化，刚刚新建的对象在Eden中，经历一次Minor GC，Eden中的存活对象就会被移动到第一块survivor space S0，Eden被清空；等Eden区再满了，就再触发一次Minor GC，Eden和S0中的存活对象又会被复制送入第二块survivor space S1（这个过程非常重要，因为这种复制算法保证了S1中来自S0和Eden两部分的存活对象占用连续的内存空间，避免了碎片化的发生）</p><h3 id="_11、files的常用方法都有哪些" tabindex="-1">11、Files的常用方法都有哪些？ <a class="header-anchor" href="#_11、files的常用方法都有哪些" aria-label="Permalink to &quot;11、Files的常用方法都有哪些？&quot;">​</a></h3><h3 id="_12、32-位-jvm-和-64-位-jvm-的最大堆内存分别是多数" tabindex="-1">12、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？ <a class="header-anchor" href="#_12、32-位-jvm-和-64-位-jvm-的最大堆内存分别是多数" aria-label="Permalink to &quot;12、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？&quot;">​</a></h3><h3 id="_13、如何开启和查看-gc-日志" tabindex="-1">13、如何开启和查看 GC 日志？ <a class="header-anchor" href="#_13、如何开启和查看-gc-日志" aria-label="Permalink to &quot;13、如何开启和查看 GC 日志？&quot;">​</a></h3><h3 id="_14、怎么判断并发队列是阻塞队列还是非阻塞队列" tabindex="-1">14、怎么判断并发队列是阻塞队列还是非阻塞队列 <a class="header-anchor" href="#_14、怎么判断并发队列是阻塞队列还是非阻塞队列" aria-label="Permalink to &quot;14、怎么判断并发队列是阻塞队列还是非阻塞队列&quot;">​</a></h3><h3 id="_15、说说zgc垃圾收集器的工作原理" tabindex="-1">15、说说ZGC垃圾收集器的工作原理 <a class="header-anchor" href="#_15、说说zgc垃圾收集器的工作原理" aria-label="Permalink to &quot;15、说说ZGC垃圾收集器的工作原理&quot;">​</a></h3><h3 id="_16、3-0-1-0-3-将会返回什么-true-还是-false" tabindex="-1">16、3*0.1 == 0.3 将会返回什么？true 还是 false？ <a class="header-anchor" href="#_16、3-0-1-0-3-将会返回什么-true-还是-false" aria-label="Permalink to &quot;16、3*0.1 == 0.3 将会返回什么？true 还是 false？&quot;">​</a></h3><h3 id="_17、什么时候会触发fullgc" tabindex="-1">17、什么时候会触发FullGC <a class="header-anchor" href="#_17、什么时候会触发fullgc" aria-label="Permalink to &quot;17、什么时候会触发FullGC&quot;">​</a></h3><h3 id="_18、-before-和-beforeclass-有什么区别" tabindex="-1">18、<a href="/docs/Before.html">@Before </a> 和 <a href="/docs/BeforeClass.html">@BeforeClass </a> 有什么区别？ <a class="header-anchor" href="#_18、-before-和-beforeclass-有什么区别" aria-label="Permalink to &quot;18、[@Before ](/Before ) 和 [@BeforeClass ](/BeforeClass ) 有什么区别？&quot;">​</a></h3><h3 id="_19、什么是线程局部变量" tabindex="-1">19、什么是线程局部变量？ <a class="header-anchor" href="#_19、什么是线程局部变量" aria-label="Permalink to &quot;19、什么是线程局部变量？&quot;">​</a></h3><h3 id="_20、error与exception区别" tabindex="-1">20、Error与Exception区别？ <a class="header-anchor" href="#_20、error与exception区别" aria-label="Permalink to &quot;20、Error与Exception区别？&quot;">​</a></h3><h3 id="_21、当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递" tabindex="-1">21、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？ <a class="header-anchor" href="#_21、当一个对象被当作参数传递到一个方法后-此方法可改变这个对象的属性-并可返回变化后的结果-那么这里到底是值传递还是引用传递" aria-label="Permalink to &quot;21、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？&quot;">​</a></h3><h3 id="_22、集合的特点" tabindex="-1">22、集合的特点 <a class="header-anchor" href="#_22、集合的特点" aria-label="Permalink to &quot;22、集合的特点&quot;">​</a></h3><h3 id="_23、react有哪些优化性能是手段" tabindex="-1">23、React有哪些优化性能是手段? <a class="header-anchor" href="#_23、react有哪些优化性能是手段" aria-label="Permalink to &quot;23、React有哪些优化性能是手段?&quot;">​</a></h3><h3 id="_24、虚拟机栈-线程私有" tabindex="-1">24、虚拟机栈(线程私有) <a class="header-anchor" href="#_24、虚拟机栈-线程私有" aria-label="Permalink to &quot;24、虚拟机栈(线程私有)&quot;">​</a></h3><h3 id="_25、为什么要学习设计模式" tabindex="-1">25、为什么要学习设计模式 <a class="header-anchor" href="#_25、为什么要学习设计模式" aria-label="Permalink to &quot;25、为什么要学习设计模式&quot;">​</a></h3><h3 id="_26、构造器注入和-setter-依赖注入-那种方式更好" tabindex="-1">26、构造器注入和 setter 依赖注入，那种方式更好？ <a class="header-anchor" href="#_26、构造器注入和-setter-依赖注入-那种方式更好" aria-label="Permalink to &quot;26、构造器注入和 setter 依赖注入，那种方式更好？&quot;">​</a></h3><h3 id="_27、怎样通过-java-程序来判断-jvm-是-32-位-还是-64-位" tabindex="-1">27、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位？ <a class="header-anchor" href="#_27、怎样通过-java-程序来判断-jvm-是-32-位-还是-64-位" aria-label="Permalink to &quot;27、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位？&quot;">​</a></h3><h3 id="_28、什么时候使用访问者模式" tabindex="-1">28、什么时候使用访问者模式？ <a class="header-anchor" href="#_28、什么时候使用访问者模式" aria-label="Permalink to &quot;28、什么时候使用访问者模式？&quot;">​</a></h3><h3 id="_29、int-和-integer-哪个会占用更多的内存" tabindex="-1">29、int 和 Integer 哪个会占用更多的内存？ <a class="header-anchor" href="#_29、int-和-integer-哪个会占用更多的内存" aria-label="Permalink to &quot;29、int 和 Integer 哪个会占用更多的内存？&quot;">​</a></h3><h3 id="_30、mixin、hoc、render-props、react-hooks的优劣如何" tabindex="-1">30、mixin、hoc、render props、react-hooks的优劣如何？ <a class="header-anchor" href="#_30、mixin、hoc、render-props、react-hooks的优劣如何" aria-label="Permalink to &quot;30、mixin、hoc、render props、react-hooks的优劣如何？&quot;">​</a></h3><h3 id="_31、如何阻止表单提交" tabindex="-1">31、如何阻止表单提交 <a class="header-anchor" href="#_31、如何阻止表单提交" aria-label="Permalink to &quot;31、如何阻止表单提交&quot;">​</a></h3><h3 id="_32、java常用包有那些" tabindex="-1">32、Java常用包有那些？ <a class="header-anchor" href="#_32、java常用包有那些" aria-label="Permalink to &quot;32、Java常用包有那些？&quot;">​</a></h3><h3 id="_33、什么是daemon线程-它有什么意义" tabindex="-1">33、什么是Daemon线程？它有什么意义？ <a class="header-anchor" href="#_33、什么是daemon线程-它有什么意义" aria-label="Permalink to &quot;33、什么是Daemon线程？它有什么意义？&quot;">​</a></h3><h3 id="_34、怎么利用-junit-来测试一个方法的异常" tabindex="-1">34、怎么利用 JUnit 来测试一个方法的异常？ <a class="header-anchor" href="#_34、怎么利用-junit-来测试一个方法的异常" aria-label="Permalink to &quot;34、怎么利用 JUnit 来测试一个方法的异常？&quot;">​</a></h3><h3 id="_35、js如何跳转到到一个指定页面" tabindex="-1">35、Js如何跳转到到一个指定页面 <a class="header-anchor" href="#_35、js如何跳转到到一个指定页面" aria-label="Permalink to &quot;35、Js如何跳转到到一个指定页面&quot;">​</a></h3><h3 id="_36、阻塞队列和非阻塞队列区别" tabindex="-1">36、阻塞队列和非阻塞队列区别 <a class="header-anchor" href="#_36、阻塞队列和非阻塞队列区别" aria-label="Permalink to &quot;36、阻塞队列和非阻塞队列区别&quot;">​</a></h3><h3 id="_37、java-中-interrupted-和-isinterrupted-方法的区别" tabindex="-1">37、Java 中 interrupted 和 isInterrupted 方法的区别？ <a class="header-anchor" href="#_37、java-中-interrupted-和-isinterrupted-方法的区别" aria-label="Permalink to &quot;37、Java 中 interrupted 和 isInterrupted 方法的区别？&quot;">​</a></h3><h3 id="_38、jspservlet中通信作用域有那些" tabindex="-1">38、jspservlet中通信作用域有那些？ <a class="header-anchor" href="#_38、jspservlet中通信作用域有那些" aria-label="Permalink to &quot;38、jspservlet中通信作用域有那些？&quot;">​</a></h3><h3 id="_39、重排序遵守的规则" tabindex="-1">39、重排序遵守的规则 <a class="header-anchor" href="#_39、重排序遵守的规则" aria-label="Permalink to &quot;39、重排序遵守的规则&quot;">​</a></h3><h3 id="_40、类、方法、成员变量和局部变量的可用修饰符" tabindex="-1">40、类、方法、成员变量和局部变量的可用修饰符 - <a class="header-anchor" href="#_40、类、方法、成员变量和局部变量的可用修饰符" aria-label="Permalink to &quot;40、类、方法、成员变量和局部变量的可用修饰符 -&quot;">​</a></h3>`,77),r=[t];function l(i,p,c,h,E,u){return e(),s("div",null,r)}const m=a(o,[["render",l]]);export{f as __pageData,m as default};
