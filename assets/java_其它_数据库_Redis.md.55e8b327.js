import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/hash.1c7944d1.png",o="/docs/assets/建立连接.23e86ff4.png",e="/docs/assets/同步数据.bc0f4bec.png",t="/docs/assets/命令传播.88298e6a.png",m=JSON.parse('{"title":"Redis","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/数据库/Redis.md","filePath":"java/其它/数据库/Redis.md"}'),c={name:"java/其它/数据库/Redis.md"},r=l(`<h1 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h1><hr><h2 id="redis-介绍" tabindex="-1">Redis 介绍 <a class="header-anchor" href="#redis-介绍" aria-label="Permalink to &quot;Redis 介绍&quot;">​</a></h2><h3 id="nosql-技术" tabindex="-1">NoSQL 技术 <a class="header-anchor" href="#nosql-技术" aria-label="Permalink to &quot;NoSQL 技术&quot;">​</a></h3><p>在实际项目开发中，我们往往需要面对海量用户和高并发的数据请求。MySQL 等传统关系型数据库面临着两大问题：</p><ol><li>磁盘 IO 速度缓慢，单机读写速度不超过 10000 QPS，当数据库无法及时响应高并发的用户请求，请求积压进而导致数据库瘫痪。</li><li>数据关系复杂，扩展性差。不适合大规模集群。</li></ol><p>因此我们必须引入 NoSQL 技术去解决以上两个问题，以作为关系型数据库的补充。</p><h3 id="redis-数据库" tabindex="-1">Redis 数据库 <a class="header-anchor" href="#redis-数据库" aria-label="Permalink to &quot;Redis 数据库&quot;">​</a></h3><p>Redis 是一种<strong>基于内存</strong>的数据库技术。底层采用 C 语言开发，默认端口号 6379。</p><ol><li>Redis 数据库作为数据缓存，将业务数据直接存储在内存中进行读写，单机读/写速度可达 110000/84000 QPS，可以满足高速响应的需求。</li><li>Redis 数据库只负责存储数据，数据之间不具有任何关联，易于扩容和伸缩。</li></ol><h3 id="redis-应用场景" tabindex="-1">Redis 应用场景 <a class="header-anchor" href="#redis-应用场景" aria-label="Permalink to &quot;Redis 应用场景&quot;">​</a></h3><p>受限于内存的高昂成本，一般我们只使用 Redis 存储高频读写的关键数据。比如：</p><ol><li><strong>热点数据</strong>：如热点商品信息。</li><li><strong>任务队列</strong>：如秒杀队列、抢购队列。</li><li><strong>实时更新信息</strong>：如商品排行榜、公交到站信息。</li><li><strong>时效性信息</strong>：如手机验证码、session 、 心跳(heartbeat)。</li></ol><blockquote><p>Redis 主要适用于内部系统的高频数据。在线上环境负载极大的情况下，使用 Redis 也不足以满足对数据读写的速度要求。</p></blockquote><h3 id="redis-基本使用" tabindex="-1">Redis 基本使用 <a class="header-anchor" href="#redis-基本使用" aria-label="Permalink to &quot;Redis 基本使用&quot;">​</a></h3><h4 id="安装指令" tabindex="-1">安装指令 <a class="header-anchor" href="#安装指令" aria-label="Permalink to &quot;安装指令&quot;">​</a></h4><p>在控制台输入以下指令安装和使用 Redis：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">sudo</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">apt-get</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">install</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-server</span><span style="color:#F6F6F4;">       </span><span style="color:#7B7F8B;"># 安装 Redis 数据库（仅限 Ubuntu 可用）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-server</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 启动 Redis 数据库</span></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-server</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">--port</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6380</span><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;"># 启动 Redis 数据库，在指定端口</span></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-server</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-6379.conf</span><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;"># 启动 Redis 数据库，使用指定配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-cli</span><span style="color:#F6F6F4;">                               </span><span style="color:#7B7F8B;"># 进入 Redis 控制台，在默认端口</span></span>
<span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">redis-cli</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-p</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6380</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 进入 Redis 控制台，在指定端口</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apt-get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-server</span><span style="color:#24292E;">       </span><span style="color:#6A737D;"># 安装 Redis 数据库（仅限 Ubuntu 可用）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-server</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 启动 Redis 数据库</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-server</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6380</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 启动 Redis 数据库，在指定端口</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-server</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-6379.conf</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 启动 Redis 数据库，使用指定配置文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-cli</span><span style="color:#24292E;">                               </span><span style="color:#6A737D;"># 进入 Redis 控制台，在默认端口</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">redis-cli</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6380</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 进入 Redis 控制台，在指定端口</span></span></code></pre></div><h4 id="基础配置" tabindex="-1">基础配置 <a class="header-anchor" href="#基础配置" aria-label="Permalink to &quot;基础配置&quot;">​</a></h4><p>在 Redis 安装目录下的 <code>redis.conf</code> 文件是 Redis 默认配置文件，启动 Redis 数据库时默认加载。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">daemonize no                     # 守护线程，打开后启动 Redis 控制台不提示</span></span>
<span class="line"><span style="color:#f6f6f4;">bind 127.0.0.1                   # 绑定 IP 地址，绑定后只能通过该地址访问 Redis</span></span>
<span class="line"><span style="color:#f6f6f4;">port 6379                        # 端口号</span></span>
<span class="line"><span style="color:#f6f6f4;">databases 16                     # 存储区域数量</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">daemonize no                     # 守护线程，打开后启动 Redis 控制台不提示</span></span>
<span class="line"><span style="color:#24292e;">bind 127.0.0.1                   # 绑定 IP 地址，绑定后只能通过该地址访问 Redis</span></span>
<span class="line"><span style="color:#24292e;">port 6379                        # 端口号</span></span>
<span class="line"><span style="color:#24292e;">databases 16                     # 存储区域数量</span></span></code></pre></div><h4 id="日志配置" tabindex="-1">日志配置 <a class="header-anchor" href="#日志配置" aria-label="Permalink to &quot;日志配置&quot;">​</a></h4><p>Redis 总共支持四个日志级别：debug / verbose / notice / warning ，从前往后日志记录信息逐渐减少。通常情况下开发环境设为 verbose ，生产环境设为 notice 。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">loglevel verbose                 # 日志级别</span></span>
<span class="line"><span style="color:#f6f6f4;">logfile 6379.log                 # 日志文件名</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">loglevel verbose                 # 日志级别</span></span>
<span class="line"><span style="color:#24292e;">logfile 6379.log                 # 日志文件名</span></span></code></pre></div><h4 id="持久化配置" tabindex="-1">持久化配置 <a class="header-anchor" href="#持久化配置" aria-label="Permalink to &quot;持久化配置&quot;">​</a></h4><p>默认使用 RDB 方式持久化数据，相关配置如下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">save 900 1                            # 自动同步数据条件，900s 内变更 1 个 key 值则持久化</span></span>
<span class="line"><span style="color:#f6f6f4;">save 300 10                           # 自动同步数据条件，300s 内变更 10 个 key 值则持久化</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">rdbcompression yes                    # 是否压缩数据，压缩后节省空间但读取较慢</span></span>
<span class="line"><span style="color:#f6f6f4;">rdbchecksum yes                       # 是否格式校验（默认开启），校验降低文件损坏风险但读取较慢</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">dbfilename dump.rdb                   # 保存文件名</span></span>
<span class="line"><span style="color:#f6f6f4;">dir ./                                # 保存文件位置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">save 900 1                            # 自动同步数据条件，900s 内变更 1 个 key 值则持久化</span></span>
<span class="line"><span style="color:#24292e;">save 300 10                           # 自动同步数据条件，300s 内变更 10 个 key 值则持久化</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">rdbcompression yes                    # 是否压缩数据，压缩后节省空间但读取较慢</span></span>
<span class="line"><span style="color:#24292e;">rdbchecksum yes                       # 是否格式校验（默认开启），校验降低文件损坏风险但读取较慢</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">dbfilename dump.rdb                   # 保存文件名</span></span>
<span class="line"><span style="color:#24292e;">dir ./                                # 保存文件位置</span></span></code></pre></div><p>可以在配置文件中改用 AOF 方式持久化数据，刷新文件条件有三种类型： always / everysec / no 。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">appendonly yes                        # 选用 AOF 方式持久化</span></span>
<span class="line"><span style="color:#f6f6f4;">appendsync everysec                   # 刷新文件条件，每秒更新一次操作日志</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">appendonly yes                        # 选用 AOF 方式持久化</span></span>
<span class="line"><span style="color:#24292e;">appendsync everysec                   # 刷新文件条件，每秒更新一次操作日志</span></span></code></pre></div><h4 id="容量配置" tabindex="-1">容量配置 <a class="header-anchor" href="#容量配置" aria-label="Permalink to &quot;容量配置&quot;">​</a></h4><p>对 Redis 数据库占用空间和客户链接做出限制。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">maxclients 100                        # 客户连接数上限，超出后拒绝客户访问，为 0 表示不限制</span></span>
<span class="line"><span style="color:#f6f6f4;">timeout 300                           # 客户闲置时长，超出后关闭连接，为 0 表示不关闭</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">maxmemory 50                          # Redis 最大占用内存比例，为 0 表示全部可用</span></span>
<span class="line"><span style="color:#f6f6f4;">maxmemory-samples                     # Redis 随机选取数据数量</span></span>
<span class="line"><span style="color:#f6f6f4;">maxmemery-policy volatile-lru         # Redis 逐出策略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">maxclients 100                        # 客户连接数上限，超出后拒绝客户访问，为 0 表示不限制</span></span>
<span class="line"><span style="color:#24292e;">timeout 300                           # 客户闲置时长，超出后关闭连接，为 0 表示不关闭</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">maxmemory 50                          # Redis 最大占用内存比例，为 0 表示全部可用</span></span>
<span class="line"><span style="color:#24292e;">maxmemory-samples                     # Redis 随机选取数据数量</span></span>
<span class="line"><span style="color:#24292e;">maxmemery-policy volatile-lru         # Redis 逐出策略</span></span></code></pre></div><h4 id="多机配置" tabindex="-1">多机配置 <a class="header-anchor" href="#多机配置" aria-label="Permalink to &quot;多机配置&quot;">​</a></h4><p>如果我们要设置集群，则需要进行以下配置：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">cluster enabled yes                        # 开启集群</span></span>
<span class="line"><span style="color:#f6f6f4;">cluster-config-file nodes.conf             # 集群配置文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cluster enabled yes                        # 开启集群</span></span>
<span class="line"><span style="color:#24292e;">cluster-config-file nodes.conf             # 集群配置文件</span></span></code></pre></div><p>如果我们要设置主从服务器，则需要进行以下配置：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;"># 主服务器</span></span>
<span class="line"><span style="color:#f6f6f4;">requirepass 123456                    # 主服务器设置密码（可选）</span></span>
<span class="line"><span style="color:#f6f6f4;">repl-backlog-size 1mb                 # 缓冲区大小</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"># 从服务器</span></span>
<span class="line"><span style="color:#f6f6f4;">slaveof 127.0.0.1 6379                # 主服务器套接字，设置后自动连接</span></span>
<span class="line"><span style="color:#f6f6f4;">masterauth 123456                     # 主服务器密码</span></span>
<span class="line"><span style="color:#f6f6f4;">slave-serve-stale-data no             # 同步数据时是否允许读数据</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># 主服务器</span></span>
<span class="line"><span style="color:#24292e;">requirepass 123456                    # 主服务器设置密码（可选）</span></span>
<span class="line"><span style="color:#24292e;">repl-backlog-size 1mb                 # 缓冲区大小</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"># 从服务器</span></span>
<span class="line"><span style="color:#24292e;">slaveof 127.0.0.1 6379                # 主服务器套接字，设置后自动连接</span></span>
<span class="line"><span style="color:#24292e;">masterauth 123456                     # 主服务器密码</span></span>
<span class="line"><span style="color:#24292e;">slave-serve-stale-data no             # 同步数据时是否允许读数据</span></span></code></pre></div><hr><h2 id="redis-基础" tabindex="-1">Redis 基础 <a class="header-anchor" href="#redis-基础" aria-label="Permalink to &quot;Redis 基础&quot;">​</a></h2><ol><li><p>在 Redis 中单个指令都是原子性操作，通过指令操作 Redis 数据时无需担心线程安全问题。</p></li><li><p>Redis 以 key-value 的形式保存数据：key 值一定为 string 类型，而 value 值支持以下五种基础类型：</p></li></ol><p>数据类型 | 存储形式</p><ul><li>| - string | 字符串 hash | 哈希表 list | 链表 set | 哈希集 sorted_set | 二叉树集</li></ul><h3 id="存储区域" tabindex="-1">存储区域 <a class="header-anchor" href="#存储区域" aria-label="Permalink to &quot;存储区域&quot;">​</a></h3><p>Redis 将数据存储分为多个相互独立的区域，将 Redis 操作局限在自己的存储区域内。通常划分为 16 个（编号 0-15），默认使用编号 0 。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">select</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;"># 改用 1 号存储区域</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> dbsize                           </span><span style="color:#7B7F8B;"># 返回当前区域 key 数量</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> move key 2                       </span><span style="color:#7B7F8B;"># 将当前 key 迁移到 2 号存储区域</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> flushdb                          </span><span style="color:#7B7F8B;"># 清空当前存储区域</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> flushall                         </span><span style="color:#7B7F8B;"># 清空全部存储区域</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> 1                         </span><span style="color:#6A737D;"># 改用 1 号存储区域</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> dbsize                           </span><span style="color:#6A737D;"># 返回当前区域 key 数量</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> move key 2                       </span><span style="color:#6A737D;"># 将当前 key 迁移到 2 号存储区域</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> flushdb                          </span><span style="color:#6A737D;"># 清空当前存储区域</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> flushall                         </span><span style="color:#6A737D;"># 清空全部存储区域</span></span></code></pre></div><h3 id="key-操作" tabindex="-1">key 操作 <a class="header-anchor" href="#key-操作" aria-label="Permalink to &quot;key 操作&quot;">​</a></h3><p><strong>基本操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> del key                            </span><span style="color:#7B7F8B;"># 删除 key</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> exists key                         </span><span style="color:#7B7F8B;"># 判断是否存在 key</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> type key                           </span><span style="color:#7B7F8B;"># 返回 key 对应的 value 类型       </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> rename key newkey                  </span><span style="color:#7B7F8B;"># 重命名</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> renamenx key newkey                </span><span style="color:#7B7F8B;"># 重命名（返回 1），新名称已存在则失败（返回 0）</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> sort                               </span><span style="color:#7B7F8B;"># 对 key 排序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> del key                            </span><span style="color:#6A737D;"># 删除 key</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> exists key                         </span><span style="color:#6A737D;"># 判断是否存在 key</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> type key                           </span><span style="color:#6A737D;"># 返回 key 对应的 value 类型       </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> rename key newkey                  </span><span style="color:#6A737D;"># 重命名</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> renamenx key newkey                </span><span style="color:#6A737D;"># 重命名（返回 1），新名称已存在则失败（返回 0）</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> sort                               </span><span style="color:#6A737D;"># 对 key 排序</span></span></code></pre></div><p><strong>时效性控制</strong></p><p>Redis 中可以为 key 设置有效期，key 过期后会由 Redis 执行删除策略回收内存空间。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> expire key 10                      </span><span style="color:#7B7F8B;"># key 10s 内有效</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> expireat key 1355292000            </span><span style="color:#7B7F8B;"># key 截至时间戳有效</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> persist key                        </span><span style="color:#7B7F8B;"># key 永久有效</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> ttl key                            </span><span style="color:#7B7F8B;"># 返回 key 剩余有效时间，若不存在返回 -2 ，永久返回 -1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> expire key 10                      </span><span style="color:#6A737D;"># key 10s 内有效</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> expireat key 1355292000            </span><span style="color:#6A737D;"># key 截至时间戳有效</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> persist key                        </span><span style="color:#6A737D;"># key 永久有效</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ttl key                            </span><span style="color:#6A737D;"># 返回 key 剩余有效时间，若不存在返回 -2 ，永久返回 -1</span></span></code></pre></div><p><strong>查询操作</strong></p><p>Redis 支持查询存储区域内含有的 key，且允许使用以下通配符：</p><ul><li><code>*</code> 表示任意数量字符</li><li><code>?</code> 表示任意一个字符</li><li><code>[]</code> 表示一个指定字符</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> keys </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;"># 查询所有 key</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> keys user:</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;"># 查询所有 user 的 key</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> keys id:75</span><span style="color:#F286C4;">??</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 查询 ID 为 7500-7599 的 key</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> keys id:7[</span><span style="color:#BF9EEE;">2345</span><span style="color:#F6F6F4;">]55                  </span><span style="color:#7B7F8B;"># 查询 ID 为 7255/7355/7455/7555 的 key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> keys </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">                             </span><span style="color:#6A737D;"># 查询所有 key</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> keys user:</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 查询所有 user 的 key</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> keys id:75</span><span style="color:#D73A49;">??</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 查询 ID 为 7500-7599 的 key</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> keys id:7[</span><span style="color:#005CC5;">2345</span><span style="color:#24292E;">]55                  </span><span style="color:#6A737D;"># 查询 ID 为 7255/7355/7455/7555 的 key</span></span></code></pre></div><h3 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h3><h4 id="string-类型" tabindex="-1">string 类型 <a class="header-anchor" href="#string-类型" aria-label="Permalink to &quot;string 类型&quot;">​</a></h4><p>Redis 的 string 类型中，key 值对应的存储空间内将保存一个字符串数据，</p><p>key 值标准命名格式为 <code>表名:主键名:主键值:字段名</code>，如 <code>user:id:15942348:name - &quot;王东浩&quot;</code>。</p><p><strong>基本操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> set key 10                     </span><span style="color:#7B7F8B;"># 设置键值对</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> get key                        </span><span style="color:#7B7F8B;"># 获取键值，不存在则返回 nil</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> del key                        </span><span style="color:#7B7F8B;"># 删除键值对</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> strlen key                     </span><span style="color:#7B7F8B;"># 获取价值的字符串长度</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> append key 0                   </span><span style="color:#7B7F8B;"># 在键值尾部追加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> mset key1 10 key2 100          </span><span style="color:#7B7F8B;"># 设置多个数据</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> mget key1 key2                 </span><span style="color:#7B7F8B;"># 获取多个数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> setex key 10 1                 </span><span style="color:#7B7F8B;"># 设置键值对，10s 后自动删除</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> psetex key 10 1                </span><span style="color:#7B7F8B;"># 设置键值对，10ms 后自动删除</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> set key 10                     </span><span style="color:#6A737D;"># 设置键值对</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> get key                        </span><span style="color:#6A737D;"># 获取键值，不存在则返回 nil</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> del key                        </span><span style="color:#6A737D;"># 删除键值对</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> strlen key                     </span><span style="color:#6A737D;"># 获取价值的字符串长度</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> append key 0                   </span><span style="color:#6A737D;"># 在键值尾部追加</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mset key1 10 key2 100          </span><span style="color:#6A737D;"># 设置多个数据</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> mget key1 key2                 </span><span style="color:#6A737D;"># 获取多个数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> setex key 10 1                 </span><span style="color:#6A737D;"># 设置键值对，10s 后自动删除</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> psetex key 10 1                </span><span style="color:#6A737D;"># 设置键值对，10ms 后自动删除</span></span></code></pre></div><p><strong>数据操作</strong></p><p>如果字符串为合法数字，可以当作数字处理。但数值不能超过 shell 中的 long 类型。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> incr key                       </span><span style="color:#7B7F8B;"># 键值加一</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> decr key                       </span><span style="color:#7B7F8B;"># 键值减一</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> incrby key 10                  </span><span style="color:#7B7F8B;"># 键值加十</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> decrby key 10                  </span><span style="color:#7B7F8B;"># 键值减十</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> incrbyfloat key -1.5           </span><span style="color:#7B7F8B;"># 键值加 -1.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> incr key                       </span><span style="color:#6A737D;"># 键值加一</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> decr key                       </span><span style="color:#6A737D;"># 键值减一</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> incrby key 10                  </span><span style="color:#6A737D;"># 键值加十</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> decrby key 10                  </span><span style="color:#6A737D;"># 键值减十</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> incrbyfloat key -1.5           </span><span style="color:#6A737D;"># 键值加 -1.5</span></span></code></pre></div><h4 id="hash-类型" tabindex="-1">hash 类型 <a class="header-anchor" href="#hash-类型" aria-label="Permalink to &quot;hash 类型&quot;">​</a></h4><p>hash 类型中，key 值对应的存储空间内可以保存多个键值对(field-value)：field 和 value 都必须是字符串类型。当键值对较少时存储空间内采用数组存储，当键值对较多时采用哈希存储。</p><p>十分适合存储对象，每个键值对记录对象的一个属性。</p><p><img src="`+p+`" alt="hash"></p><p><strong>基本操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hset key field 10               </span><span style="color:#7B7F8B;"># 设置/更新键值对</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hsetnx key field 10             </span><span style="color:#7B7F8B;"># 如果键值不存在则设置键值对</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hget key field                  </span><span style="color:#7B7F8B;"># 获取键值</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hgetall key                     </span><span style="color:#7B7F8B;"># 获取全部键值</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hdel key field                  </span><span style="color:#7B7F8B;"># 删除键值对</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hlen key                        </span><span style="color:#7B7F8B;"># 获取键值对数量</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hexists key field               </span><span style="color:#7B7F8B;"># 判断是否存在字段（返回 1 或 0）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hmset key field1 1 field2 2     </span><span style="color:#7B7F8B;"># 设置/修改多个键值对</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hmget key field1 field2         </span><span style="color:#7B7F8B;"># 获取多个键值对</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hset key field 10               </span><span style="color:#6A737D;"># 设置/更新键值对</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hsetnx key field 10             </span><span style="color:#6A737D;"># 如果键值不存在则设置键值对</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hget key field                  </span><span style="color:#6A737D;"># 获取键值</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hgetall key                     </span><span style="color:#6A737D;"># 获取全部键值</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hdel key field                  </span><span style="color:#6A737D;"># 删除键值对</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hlen key                        </span><span style="color:#6A737D;"># 获取键值对数量</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hexists key field               </span><span style="color:#6A737D;"># 判断是否存在字段（返回 1 或 0）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hmset key field1 1 field2 2     </span><span style="color:#6A737D;"># 设置/修改多个键值对</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hmget key field1 field2         </span><span style="color:#6A737D;"># 获取多个键值对</span></span></code></pre></div><p><strong>扩展操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hkeys key                       </span><span style="color:#7B7F8B;"># 返回 key 对应的所有 field</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hvals key                       </span><span style="color:#7B7F8B;"># 返回 key 对应的所有 value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hincrby key field 1             </span><span style="color:#7B7F8B;"># 键值加一</span></span>
<span class="line"><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> hdecrby key field 1             </span><span style="color:#7B7F8B;"># 键值减一</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hkeys key                       </span><span style="color:#6A737D;"># 返回 key 对应的所有 field</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hvals key                       </span><span style="color:#6A737D;"># 返回 key 对应的所有 value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hincrby key field 1             </span><span style="color:#6A737D;"># 键值加一</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> hdecrby key field 1             </span><span style="color:#6A737D;"># 键值减一</span></span></code></pre></div><h4 id="list-类型" tabindex="-1">list 类型 <a class="header-anchor" href="#list-类型" aria-label="Permalink to &quot;list 类型&quot;">​</a></h4><p>list 类型中，key 值对应的存储空间内可以保存多个字符串数据，采用双向链表实现。具有索引的概念，但还是更适合从链表两侧操作。字符串总容量不能超过 2 的 32 次方。</p><p>十分适合存储有序信息，比如粉丝列表。</p><p><strong>基本操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">lpush</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 链表左侧插入数据，返回下标</span></span>
<span class="line"><span style="color:#62E884;">rpush</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 链表右侧插入数据，返回下标</span></span>
<span class="line"><span style="color:#62E884;">lpop</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 获取并删除最左侧数据</span></span>
<span class="line"><span style="color:#62E884;">rpop</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 获取并删除最右侧数据</span></span>
<span class="line"><span style="color:#62E884;">blpop</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 获取并删除最左侧数据，不存在则至多等待 10 s</span></span>
<span class="line"><span style="color:#62E884;">lrem</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">x</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 从左侧开始，删除三个为 x 的数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">lrange</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">                 </span><span style="color:#7B7F8B;"># 返回左侧前3个数据</span></span>
<span class="line"><span style="color:#62E884;">lrange</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-1</span><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;"># 返回全部数据（常用）</span></span>
<span class="line"><span style="color:#62E884;">lindex</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 返回指定位置数据</span></span>
<span class="line"><span style="color:#62E884;">llen</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">list</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 返回字符串个数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">lpush</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 链表左侧插入数据，返回下标</span></span>
<span class="line"><span style="color:#6F42C1;">rpush</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 链表右侧插入数据，返回下标</span></span>
<span class="line"><span style="color:#6F42C1;">lpop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 获取并删除最左侧数据</span></span>
<span class="line"><span style="color:#6F42C1;">rpop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 获取并删除最右侧数据</span></span>
<span class="line"><span style="color:#6F42C1;">blpop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 获取并删除最左侧数据，不存在则至多等待 10 s</span></span>
<span class="line"><span style="color:#6F42C1;">lrem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">x</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 从左侧开始，删除三个为 x 的数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">lrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 返回左侧前3个数据</span></span>
<span class="line"><span style="color:#6F42C1;">lrange</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 返回全部数据（常用）</span></span>
<span class="line"><span style="color:#6F42C1;">lindex</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 返回指定位置数据</span></span>
<span class="line"><span style="color:#6F42C1;">llen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 返回字符串个数</span></span></code></pre></div><h4 id="set-类型" tabindex="-1">set 类型 <a class="header-anchor" href="#set-类型" aria-label="Permalink to &quot;set 类型&quot;">​</a></h4><p>set 类型中，key 值对应的存储空间内可以保存多个字符串数据，采用哈希存储实现。随机查询效率比 list 类型更高。字符串总容量不能超过 2 的 32 次方。</p><p>十分适合存储集合类信息，比如用户感兴趣的话题、用户权限。</p><p><strong>基本操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">sadd</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">member</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;"># 添加数据（可以是多个）</span></span>
<span class="line"><span style="color:#62E884;">srem</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">member</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;"># 删除数据（可以是多个）</span></span>
<span class="line"><span style="color:#62E884;">smembers</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;">                     </span><span style="color:#7B7F8B;"># 展示全部数据  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">scard</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;"># 返回数据个数</span></span>
<span class="line"><span style="color:#62E884;">sismember</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 判断是否含有数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">srandmember</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;"># 随机从集合中选取 5 个数据</span></span>
<span class="line"><span style="color:#62E884;">spop</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;"># 返回并删除一个随机数据</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 添加数据（可以是多个）</span></span>
<span class="line"><span style="color:#6F42C1;">srem</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 删除数据（可以是多个）</span></span>
<span class="line"><span style="color:#6F42C1;">smembers</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 展示全部数据  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">scard</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 返回数据个数</span></span>
<span class="line"><span style="color:#6F42C1;">sismember</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 判断是否含有数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">srandmember</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 随机从集合中选取 5 个数据</span></span>
<span class="line"><span style="color:#6F42C1;">spop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># 返回并删除一个随机数据</span></span></code></pre></div><p><strong>扩展操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#62E884;">sinter</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set2</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 交</span></span>
<span class="line"><span style="color:#62E884;">sunion</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set2</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 并</span></span>
<span class="line"><span style="color:#62E884;">sdiff</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set2</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 差</span></span>
<span class="line"><span style="color:#62E884;">sinterstore</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">newset</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set2</span><span style="color:#F6F6F4;">       </span><span style="color:#7B7F8B;"># 交且存入新集合</span></span>
<span class="line"><span style="color:#62E884;">sunionstore</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">newset</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set2</span><span style="color:#F6F6F4;">       </span><span style="color:#7B7F8B;"># 并且存入新集合</span></span>
<span class="line"><span style="color:#62E884;">sdiffstore</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">newset</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set2</span><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;"># 差且存入新集合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">smove</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">oldset</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">newset</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;"># 数据从旧集合迁移到新集合</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sinter</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set2</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 交</span></span>
<span class="line"><span style="color:#6F42C1;">sunion</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set2</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 并</span></span>
<span class="line"><span style="color:#6F42C1;">sdiff</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set2</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 差</span></span>
<span class="line"><span style="color:#6F42C1;">sinterstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set2</span><span style="color:#24292E;">       </span><span style="color:#6A737D;"># 交且存入新集合</span></span>
<span class="line"><span style="color:#6F42C1;">sunionstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set2</span><span style="color:#24292E;">       </span><span style="color:#6A737D;"># 并且存入新集合</span></span>
<span class="line"><span style="color:#6F42C1;">sdiffstore</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set2</span><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 差且存入新集合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">smove</span><span style="color:#24292E;"> </span><span style="color:#032F62;">oldset</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newset</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 数据从旧集合迁移到新集合</span></span></code></pre></div><h4 id="sorted-set-类型" tabindex="-1">sorted_set 类型 <a class="header-anchor" href="#sorted-set-类型" aria-label="Permalink to &quot;sorted_set 类型&quot;">​</a></h4><p>如果我们需要数据查询效率较高且有序，则可以使用 sorted_set 类型。底层和 set 结构相同采用哈希存储（value 值仍不可重复），但在 key-value 存储结构后添加 score 属性为数据排序，默认从小到大。score 是数字且可以使用小数，但如果使用小数浮点类型可能会出现精度丢失。</p><p>可以用来存储排行榜等有序数据集合，还可以用于存储时效性或者带有权重的任务队列，用当前时间或者权重作为 score 。</p><p><strong>基本操作</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">zadd</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">score1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">member</span><span style="color:#F6F6F4;">             </span><span style="color:#7B7F8B;"># 添加数据且标记序号（可以是多个）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">zadd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">set</span><span style="color:#24292E;"> </span><span style="color:#032F62;">score1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">member</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># 添加数据且标记序号（可以是多个）</span></span></code></pre></div><h3 id="高级类型" tabindex="-1">高级类型 <a class="header-anchor" href="#高级类型" aria-label="Permalink to &quot;高级类型&quot;">​</a></h3><p>此外，Redis 还提供了 Bitmaps、 HyberLogLog、GEO 三种高级数据类型，用来适配特定的应用场景。</p><h4 id="bitmaps-类型" tabindex="-1">Bitmaps 类型 <a class="header-anchor" href="#bitmaps-类型" aria-label="Permalink to &quot;Bitmaps 类型&quot;">​</a></h4><p>Bitmaps 类型中用作存储布尔值：每个 key 对应若干字节数据（字节数 = 最大编号 / 8），每字节可以存储 8 个 boolean 值。</p><p>如果 Redis 要存储大量 boolean 值，使用 Bitmaps 类型可以显著节省内存空间。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setbit</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bits</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;"># 将 0 位置为 1(true)</span></span>
<span class="line"><span style="color:#62E884;">getbit</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bits</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 取 0 位的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bits</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 将 0 位置为 1(true)</span></span>
<span class="line"><span style="color:#6F42C1;">getbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bits</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 取 0 位的值</span></span></code></pre></div><h4 id="hyperloglog-类型" tabindex="-1">HyperLogLog 类型 <a class="header-anchor" href="#hyperloglog-类型" aria-label="Permalink to &quot;HyperLogLog 类型&quot;">​</a></h4><p>HyperLogLog 类型用作数据统计，只记录数量不保存数据，且当数据量巨大时存在误差！</p><p>使用 HyperLogLog 类型可以显著节省内存空间，每个 key 仅占用 12k 内存标记基数。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setbit</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bits</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">                  </span><span style="color:#7B7F8B;"># 将 0 位置为 1(true)</span></span>
<span class="line"><span style="color:#62E884;">getbit</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">bits</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 取 0 位的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bits</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">                  </span><span style="color:#6A737D;"># 将 0 位置为 1(true)</span></span>
<span class="line"><span style="color:#6F42C1;">getbit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bits</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 取 0 位的值</span></span></code></pre></div><h4 id="geo-类型" tabindex="-1">GEO 类型 <a class="header-anchor" href="#geo-类型" aria-label="Permalink to &quot;GEO 类型&quot;">​</a></h4><p>GEO 类型用作地理位置计算，根据经纬度。</p><hr><h2 id="redis-高级" tabindex="-1">Redis 高级 <a class="header-anchor" href="#redis-高级" aria-label="Permalink to &quot;Redis 高级&quot;">​</a></h2><h3 id="持久化" tabindex="-1">持久化 <a class="header-anchor" href="#持久化" aria-label="Permalink to &quot;持久化&quot;">​</a></h3><p>Redis 使用内存存储，一旦断电可能会导致数据丢失。因此需要将数据保存到永久性存储介质中，防止数据意外丢失。</p><p><em>如果 Redis 负责为数据库高热度数据访问加速或者一些其他业务（数据库中有重复数据），那么没必要为 Redis 数据持久化。</em></p><p>Redis 持久化有以下两种方式：</p><h4 id="数据快照-rdb" tabindex="-1">数据快照 RDB <a class="header-anchor" href="#数据快照-rdb" aria-label="Permalink to &quot;数据快照 RDB&quot;">​</a></h4><p><strong>定时将全部数据存入文件</strong>。存储速度慢但是恢复数据的速度很快，如果保存不及时仍会丢失少量数据。</p><p>数据以二进制形式默认存储在 <code>安装目录/data/dump.rgb</code> 文件。如果 Redis 数据库被关闭，下次重启时会从该文件读取数据。</p><p><strong>手动存储</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">save</span><span style="color:#F6F6F4;">                      </span><span style="color:#7B7F8B;"># 数据存入文件（会阻塞 Redis 数据库，导致其他指令无法执行）</span></span>
<span class="line"><span style="color:#62E884;">bgsave</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 数据存入文件（Redis 数据库调创建单独进程完成指令）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">reload</span><span style="color:#F6F6F4;">              </span><span style="color:#7B7F8B;"># 重启 Redis，且关闭时将数据存入文件</span></span>
<span class="line"><span style="color:#62E884;">shutrown</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">save</span><span style="color:#F6F6F4;">             </span><span style="color:#7B7F8B;"># 关闭 Redis，且关闭时将数据存入文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">save</span><span style="color:#24292E;">                      </span><span style="color:#6A737D;"># 数据存入文件（会阻塞 Redis 数据库，导致其他指令无法执行）</span></span>
<span class="line"><span style="color:#6F42C1;">bgsave</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 数据存入文件（Redis 数据库调创建单独进程完成指令）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">debug</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reload</span><span style="color:#24292E;">              </span><span style="color:#6A737D;"># 重启 Redis，且关闭时将数据存入文件</span></span>
<span class="line"><span style="color:#6F42C1;">shutrown</span><span style="color:#24292E;"> </span><span style="color:#032F62;">save</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># 关闭 Redis，且关闭时将数据存入文件</span></span></code></pre></div><p><strong>修改配置</strong></p><p>在 <code>安装目录/conf/redis-6379.conf</code> 配置文件内可以修改默认配置：</p><ul><li>如果操作系统内安装了多个 Redis 数据库（使用不同的端口），必须通过修改存储文件名加以区分。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">dir</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">data2</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 修改存储路径（默认 data） </span></span>
<span class="line"><span style="color:#62E884;">dbfilename</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">dump-6379.rgb</span><span style="color:#F6F6F4;">             </span><span style="color:#7B7F8B;"># 修改存储文件名（默认 dump.rgb）</span></span>
<span class="line"><span style="color:#62E884;">rdbcompression</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">no</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 关闭数据压缩（默认开启），读取文件加快但文件会变大</span></span>
<span class="line"><span style="color:#62E884;">rdbchecksum</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">no</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># 关闭格式校验（默认开启），读取文件加快但存在文件损坏风险</span></span>
<span class="line"><span style="color:#62E884;">stop-writes-on-bgsave-error</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">no</span><span style="color:#F6F6F4;">       </span><span style="color:#7B7F8B;"># 后台存储出现错误不停止（默认停止）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">dir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data2</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 修改存储路径（默认 data） </span></span>
<span class="line"><span style="color:#6F42C1;">dbfilename</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dump-6379.rgb</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># 修改存储文件名（默认 dump.rgb）</span></span>
<span class="line"><span style="color:#6F42C1;">rdbcompression</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 关闭数据压缩（默认开启），读取文件加快但文件会变大</span></span>
<span class="line"><span style="color:#6F42C1;">rdbchecksum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># 关闭格式校验（默认开启），读取文件加快但存在文件损坏风险</span></span>
<span class="line"><span style="color:#6F42C1;">stop-writes-on-bgsave-error</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;">       </span><span style="color:#6A737D;"># 后台存储出现错误不停止（默认停止）</span></span></code></pre></div><ul><li>通过修改配置文件，可以让 Redis 数据库可以自动调用 bgsave 指令更新 RDB 文件。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">save</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">                          </span><span style="color:#7B7F8B;"># 自动存储（100s 内发生 10 个 key 数据变化时触发）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 自动存储（100s 内发生 10 个 key 数据变化时触发）</span></span></code></pre></div><h4 id="日志记录-aof" tabindex="-1">日志记录 AOF <a class="header-anchor" href="#日志记录-aof" aria-label="Permalink to &quot;日志记录 AOF&quot;">​</a></h4><p><strong>将对数据的操作过程存入文件</strong>。这种方式刷新更频繁因此丢失数据概率更低，但恢复数据的速度比 RDB 方式更慢，占用存储空间也更大。</p><p>数据以二进制形式默认存储在 <code>安装目录/data/appendonly.aof</code> 文件。如果 Redis 数据库被关闭，下次重启时会根据该文件恢复数据。</p><p><strong>文件重写</strong></p><p>随着命令不断写入 AOF ，AOF 文件会越来越大，占用内存增多、恢复数据也会变慢。因此 Redis 需要对 AOF 文件进行重写，合并指令记录。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">rewriteaof</span><span style="color:#F6F6F4;">                          </span><span style="color:#7B7F8B;"># 重写 AOF 文件（会阻塞 Redis 数据库，导致其他指令无法执行）</span></span>
<span class="line"><span style="color:#62E884;">bgrewriteaof</span><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;"># 重写 AOF 文件（Redis 数据库调创建单独进程完成指令）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">rewriteaof</span><span style="color:#24292E;">                          </span><span style="color:#6A737D;"># 重写 AOF 文件（会阻塞 Redis 数据库，导致其他指令无法执行）</span></span>
<span class="line"><span style="color:#6F42C1;">bgrewriteaof</span><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 重写 AOF 文件（Redis 数据库调创建单独进程完成指令）</span></span></code></pre></div><p><strong>修改配置</strong></p><p>AOF 不是默认持久化方式，需要在 <code>安装目录/conf/redis-6379.conf</code> 配置文件内修改默认配置：</p><ul><li>必须通过配置文件开启并配置 AOF 存储。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">appendonly</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">yes</span><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;"># 选用 AOF 方式持久化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">appendsync</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">always</span><span style="color:#F6F6F4;">                     </span><span style="color:#7B7F8B;"># 每次操作刷新文件：非常频繁，损耗性能</span></span>
<span class="line"><span style="color:#62E884;">appendsync</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">everysec</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 每秒刷新文件（默认）</span></span>
<span class="line"><span style="color:#62E884;">appendsync</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">no</span><span style="color:#F6F6F4;">                         </span><span style="color:#7B7F8B;"># 手动刷新文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">appendonly</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;">                        </span><span style="color:#6A737D;"># 选用 AOF 方式持久化</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">appendsync</span><span style="color:#24292E;"> </span><span style="color:#032F62;">always</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 每次操作刷新文件：非常频繁，损耗性能</span></span>
<span class="line"><span style="color:#6F42C1;">appendsync</span><span style="color:#24292E;"> </span><span style="color:#032F62;">everysec</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 每秒刷新文件（默认）</span></span>
<span class="line"><span style="color:#6F42C1;">appendsync</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;">                         </span><span style="color:#6A737D;"># 手动刷新文件</span></span></code></pre></div><ul><li>修改路径和文件名的操作和 RDB 方法类似。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">dir</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">data2</span><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;"># 修改存储路径（默认 data） </span></span>
<span class="line"><span style="color:#62E884;">dbfilename</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">appendonly-6379.aof</span><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;"># 修改存储文件名（默认 appendonly.aof）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">dir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">data2</span><span style="color:#24292E;">                             </span><span style="color:#6A737D;"># 修改存储路径（默认 data） </span></span>
<span class="line"><span style="color:#6F42C1;">dbfilename</span><span style="color:#24292E;"> </span><span style="color:#032F62;">appendonly-6379.aof</span><span style="color:#24292E;">        </span><span style="color:#6A737D;"># 修改存储文件名（默认 appendonly.aof）</span></span></code></pre></div><ul><li>通过修改配置文件，可以让 Redis 数据库自动调用 bgrewriteaof 指令重写 AOF 文件。</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">略，之后补充</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">略，之后补充</span></span></code></pre></div><h3 id="事务" tabindex="-1">事务 <a class="header-anchor" href="#事务" aria-label="Permalink to &quot;事务&quot;">​</a></h3><p>假如我们通过多个操作执行一次购物，如果在这个过程中还执行了其他操作，可能导致我们的购物过程出现意想不到的错误。</p><p>因此我们引入事务的概念，将多个操作看作一个不可分割的整体，统一执行而不会被其他操作打断。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">multi</span><span style="color:#F6F6F4;">                     </span><span style="color:#7B7F8B;"># 开启事务，之后的命令不再立刻执行、而是进入任务队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 输入事务内的命令</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;">exec</span><span style="color:#F6F6F4;">                      </span><span style="color:#7B7F8B;"># 执行事务，执行任务队列里的命令</span></span>
<span class="line"><span style="color:#62E884;">discard</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 取消事务，清空任务队列</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">multi</span><span style="color:#24292E;">                     </span><span style="color:#6A737D;"># 开启事务，之后的命令不再立刻执行、而是进入任务队列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输入事务内的命令</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exec</span><span style="color:#24292E;">                      </span><span style="color:#6A737D;"># 执行事务，执行任务队列里的命令</span></span>
<span class="line"><span style="color:#6F42C1;">discard</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 取消事务，清空任务队列</span></span></code></pre></div><ol><li>如果事务中包含语法错误（不能识别的命令），所有的命令都不会执行。</li><li>如果事务中包含无法执行的命令，仅有出错的命令将不会被执行，其他被执行的命令需要开发者自行回滚。</li></ol><h4 id="锁" tabindex="-1">锁 <a class="header-anchor" href="#锁" aria-label="Permalink to &quot;锁&quot;">​</a></h4><p>在事务准备的过程中，如果执行的其他操作导致触发事务的条件发生了变化，这个时候就不应该继续执行事务。</p><p>我们引入了锁的概念来监视特定 key，在执行事务前如果其 value 发生了变化则终止事务执行。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">watch</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">key1</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">key2</span><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;"># 监视 key，书写在 multi 命令前</span></span>
<span class="line"><span style="color:#62E884;">unwatch</span><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;"># 取消监视 key，书写在 multi 命令前</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 在之后执行事务</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key1</span><span style="color:#24292E;"> </span><span style="color:#032F62;">key2</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 监视 key，书写在 multi 命令前</span></span>
<span class="line"><span style="color:#6F42C1;">unwatch</span><span style="color:#24292E;">                    </span><span style="color:#6A737D;"># 取消监视 key，书写在 multi 命令前</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在之后执行事务</span></span></code></pre></div><h4 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-label="Permalink to &quot;分布式锁&quot;">​</a></h4><p>如果 key 值变化极为频繁，那么使用普通锁会导致事务一直被终止。我们引入了分布式锁的概念，在加锁期间不允许其他进程对该值修改。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setnx</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lock-num</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">               </span><span style="color:#7B7F8B;"># 对 key(num) 加公共锁，其他线程不能对其进行操作。成功则返回 1，若已有锁导致失败返回 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 输入命令或者事务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">del</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lock-num</span><span style="color:#F6F6F4;">                   </span><span style="color:#7B7F8B;"># 对 key(num) 解公共锁</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setnx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lock-num</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">               </span><span style="color:#6A737D;"># 对 key(num) 加公共锁，其他线程不能对其进行操作。成功则返回 1，若已有锁导致失败返回 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 输入命令或者事务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">del</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lock-num</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;"># 对 key(num) 解公共锁</span></span></code></pre></div><p>分布式锁如果长期不被释放，就会出现死锁，导致其他操作无法继续执行。我们可以对分布式锁计时。<strong>计时分布式锁常用于多部署平台统一竞争锁。</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">expire</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lock-num</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;"># 对 key(num) 加公共锁，10s 后自动释放</span></span>
<span class="line"><span style="color:#62E884;">pexpire</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">lock-num</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">               </span><span style="color:#7B7F8B;"># 对 key(num) 加公共锁，10ms 后自动释放</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">expire</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lock-num</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 对 key(num) 加公共锁，10s 后自动释放</span></span>
<span class="line"><span style="color:#6F42C1;">pexpire</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lock-num</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">               </span><span style="color:#6A737D;"># 对 key(num) 加公共锁，10ms 后自动释放</span></span></code></pre></div><h3 id="删除策略" tabindex="-1">删除策略 <a class="header-anchor" href="#删除策略" aria-label="Permalink to &quot;删除策略&quot;">​</a></h3><p>Redis 中每个存储区域除了存储 key-value 值，还会开辟额外的存储空间 expires 记录每个 key-value 的存储地址以及过期时间。如果 key 过期或被删除指令删除，那么 Redis 要执行删除策略清理内存空间。</p><p>Redis 删除策略有以下三种方式，主要使用惰性删除和定期删除两种方式。</p><ol><li><strong>定时删除</strong></li></ol><p>key 过期后，存储 key-value 的内存地址立即被清空。</p><p>节省内存资源，但可能抢占处在繁忙状态的 CPU。</p><ol start="2"><li><strong>惰性删除</strong></li></ol><p>key 过期后不做任何处理。访问 key 时才检查是否过期，如果过期存储该 key-value 的内存地址才被清空。</p><p>节省 CPU 资源，但过期键值对可能大量占用内存。</p><ol start="3"><li><strong>定期删除</strong></li></ol><p>对于 16 个存储区域的 expires 进行轮询，对选中的 expires 随机选择 W 个 key 进行检查，如果 key 过期就进行删除。</p><ul><li>如果过期 key 超过 25%，那么重复检查该 expires 存储区域。</li><li>如果过期 key 少于 25%，那么按顺序检查下一个 expires 存储区域。</li></ul><h3 id="逐出策略" tabindex="-1">逐出策略 <a class="header-anchor" href="#逐出策略" aria-label="Permalink to &quot;逐出策略&quot;">​</a></h3><p>如果 Redis 使用内存空间前会检查内存容量。如果已被占满，那么 Redis 要执行逐出策略删除部分数据，以清理内存空间执行指令。</p><p>在选取删除数据时 Redis 并不会扫描全库数据，而是随机选取部分数据检测并从中删除：以节省 CPU 性能。</p><p>响应配置如下：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">maxmemory</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># Redis 最大占用内存比例，默认为 0（全部可用）</span></span>
<span class="line"><span style="color:#62E884;">maxmemory-samples</span><span style="color:#F6F6F4;">                       </span><span style="color:#7B7F8B;"># Redis 随机选取数据数量</span></span>
<span class="line"><span style="color:#62E884;">maxmemery-policy</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">volatile-lru</span><span style="color:#F6F6F4;">           </span><span style="color:#7B7F8B;"># Redis 逐出策略</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">maxmemory</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># Redis 最大占用内存比例，默认为 0（全部可用）</span></span>
<span class="line"><span style="color:#6F42C1;">maxmemory-samples</span><span style="color:#24292E;">                       </span><span style="color:#6A737D;"># Redis 随机选取数据数量</span></span>
<span class="line"><span style="color:#6F42C1;">maxmemery-policy</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volatile-lru</span><span style="color:#24292E;">           </span><span style="color:#6A737D;"># Redis 逐出策略</span></span></code></pre></div><p>Redis 逐出策略有以下三种方式，在配置文件中配置即可。</p><ol><li><strong>检查会过期数据</strong></li></ol><ul><li><code>volatile-lru</code> ：（推荐）挑选最久未使用的数据淘汰。</li><li><code>volatile-lfu</code> ：挑选最近一段时间使用频率最低的数据淘汰。</li><li><code>volatile-ttl</code> ：挑选将要过期的数据淘汰。</li><li><code>volatile-random</code> ：随机挑选数据淘汰。</li></ul><ol start="2"><li><strong>检查全部数据</strong></li></ol><ul><li><code>allkeys-lru</code> ：挑选最久未使用的数据淘汰。</li><li><code>allkeys-lfu</code> ：挑选最近一段时间使用频率最低的数据淘汰。</li><li><code>allkeys-random</code> ：随机挑选数据淘汰。</li></ul><ol start="3"><li><strong>不逐出数据</strong></li></ol><ul><li><code>no-enviction</code> ：（默认）抛出错误 Out Of Memery。</li></ul><hr><h2 id="redis-多机" tabindex="-1">Redis 多机 <a class="header-anchor" href="#redis-多机" aria-label="Permalink to &quot;Redis 多机&quot;">​</a></h2><h3 id="集群" tabindex="-1">集群 <a class="header-anchor" href="#集群" aria-label="Permalink to &quot;集群&quot;">​</a></h3><p>当数据量过大时，单个 Redis 数据库就无法存放。我们需要多个 Redis 数据库组成集群(cluster)，去分别<strong>存放不同的数据</strong>。</p><ol><li><p>key-value 数据进行存入时，会根据 key 的哈希值对 16384 取模，放入相应的槽(slot)存放。这 16384 个槽会分发给各个存储空间。</p></li><li><p>各个存储空间之间会相互通信，并记录所有编号的槽都存储在哪个存储空间：保证最多访问 Redis 两次可以命中。</p></li></ol><p><strong>配置文件</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">cluster</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">enabled</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">yes</span><span style="color:#F6F6F4;">                            </span><span style="color:#7B7F8B;"># 开启集群</span></span>
<span class="line"><span style="color:#62E884;">cluster-config-file</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">nodes-6379.conf</span><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;"># 集群配置文件（默认为 nodes.conf）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cluster</span><span style="color:#24292E;"> </span><span style="color:#032F62;">enabled</span><span style="color:#24292E;"> </span><span style="color:#032F62;">yes</span><span style="color:#24292E;">                            </span><span style="color:#6A737D;"># 开启集群</span></span>
<span class="line"><span style="color:#6F42C1;">cluster-config-file</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nodes-6379.conf</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 集群配置文件（默认为 nodes.conf）</span></span></code></pre></div><p><strong>集群指令</strong></p><ul><li><p>通过 <code>redis-cli</code> 打开 Redis 集群中的数据库，输入指令去插入不属于这个存储空间的键值，会返回错误。</p></li><li><p>通过 <code>redis-cli -c</code> 打开 Redis 集群中的数据库，会自动将插入数据指令转发到相应的存储空间。</p></li></ul><h3 id="主从复制" tabindex="-1">主从复制 <a class="header-anchor" href="#主从复制" aria-label="Permalink to &quot;主从复制&quot;">​</a></h3><p>如果数据只交给一个 Redis 服务器处理，那么可能面临两大问题：</p><ol><li>服务器同时处理过多读写操作，超过服务器负载。</li><li>一旦服务器宕机，就会导致服务异常中断。</li></ol><p>为了避免这两个问题，我们必须引入多个 Redis 服务器来保存相同数据，并采用主从复制结构：一个主服务器 Master 对应多个从服务器 Slave 。</p><ol><li><strong>读写分离</strong>：Master 负责写入数据；Slave 则会自动同步数据，并负责读取数据。起到均衡负载的作用。</li><li><strong>数据冗余</strong>：即使某个 Slave 故障，由于其他 Slave 已保存了这些数据，并不会导致服务中断。</li></ol><h4 id="容错机制" tabindex="-1">容错机制 <a class="header-anchor" href="#容错机制" aria-label="Permalink to &quot;容错机制&quot;">​</a></h4><ul><li><p>主从之间使用<strong>心跳</strong>建立连接。 Slave 每秒 ping 一次，汇报自己的偏移量、获取最新的指令。Master 默认每 10s ping 一次 Slave， 检查 slave 是否在线：如果 Slave 多数掉线或者高延迟，Master 停止写和数据同步功能，保障数据稳定性。</p></li><li><p>在分布式系统里还会部署多个 Redis 服务器作为<strong>哨兵</strong>（除端口号外完全相同），不提供数据服务，只负责监控主从机制的运行：如果发现 Master 宕机，哨兵将通知所有机器，使 Master 下线并开启投票机制选用一个 Slave 担任 Master 。</p></li></ul><h4 id="配置连接" tabindex="-1">配置连接 <a class="header-anchor" href="#配置连接" aria-label="Permalink to &quot;配置连接&quot;">​</a></h4><p>Master 和 Slave 通过以下过程建立连接。</p><p><img src="`+o+`" alt="x"></p><p>相比于输入指令，我们一般直接修改 conf 文件夹内的配置文件，由机器自动建立连接。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># Master </span></span>
<span class="line"><span style="color:#62E884;">requirepass</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123456</span><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;"># 连接主服务器需要密码（可选）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># Slave</span></span>
<span class="line"><span style="color:#62E884;">slaveof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">127.0</span><span style="color:#E7EE98;">.0.1</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6379</span><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;"># 根据套接字自动连接主服务器</span></span>
<span class="line"><span style="color:#62E884;">masterauth</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123456</span><span style="color:#F6F6F4;">                 </span><span style="color:#7B7F8B;"># 主服务器密码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Master </span></span>
<span class="line"><span style="color:#6F42C1;">requirepass</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">                </span><span style="color:#6A737D;"># 连接主服务器需要密码（可选）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Slave</span></span>
<span class="line"><span style="color:#6F42C1;">slaveof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#032F62;">.0.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;">            </span><span style="color:#6A737D;"># 根据套接字自动连接主服务器</span></span>
<span class="line"><span style="color:#6F42C1;">masterauth</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123456</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 主服务器密码</span></span></code></pre></div><h4 id="数据同步" tabindex="-1">数据同步 <a class="header-anchor" href="#数据同步" aria-label="Permalink to &quot;数据同步&quot;">​</a></h4><p>Slave 会定期复制 Master 的持久化文件，以保证数据同步。</p><p><img src="`+e+`" alt="x"></p><p><strong>复制缓冲区</strong>：一个先入先出队列，用来存储 AOF 形式指令。由偏移量记录当前执行到的位置。</p><ul><li>如果开启 AOF ，在创建时就会开启复制缓冲区。（偏移量记录自己执行到的位置）</li><li>如果使用 RDB ，在成为 Master 时会开启复制缓冲区。（Master 可以含有多个偏移量，记录不同 Slave 读取到的位置。）</li></ul><p><em>如果 Slave 过多，数据同步也会导致 Master 负载过高。因此 Slave 也可以兼职 Master，向下级 Slave 提供服务。但层次太多会导致数据延迟，慎用。</em></p><ol><li>数据同步阶段应避免流量高峰期，防止影响业务正常执行；也不要多个从服务器同时同步数据。</li><li>缓冲区应该足够大，否则一旦发生数据溢出会反复进行全量复制。</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># Master</span></span>
<span class="line"><span style="color:#62E884;">repl-backlog-size</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#E7EE98;">mb</span><span style="color:#F6F6F4;">                 </span><span style="color:#7B7F8B;"># 修改缓冲区大小（默认 1mb）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># Slave</span></span>
<span class="line"><span style="color:#62E884;">slave-serve-stale-data</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">no</span><span style="color:#F6F6F4;">             </span><span style="color:#7B7F8B;"># 不允许同步数据时读数据</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Master</span></span>
<span class="line"><span style="color:#6F42C1;">repl-backlog-size</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#032F62;">mb</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 修改缓冲区大小（默认 1mb）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Slave</span></span>
<span class="line"><span style="color:#6F42C1;">slave-serve-stale-data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># 不允许同步数据时读数据</span></span></code></pre></div><h4 id="命令传播" tabindex="-1">命令传播 <a class="header-anchor" href="#命令传播" aria-label="Permalink to &quot;命令传播&quot;">​</a></h4><p>服务器每次启动都会随机生成一个运行 ID（40 位 16 进制字符） ，Master 和 Slave 之间正是依靠 Master 的运行 ID 相互识别。</p><p><img src="`+t+`" alt="x"></p><hr><h2 id="redis-潜在问题" tabindex="-1">Redis 潜在问题 <a class="header-anchor" href="#redis-潜在问题" aria-label="Permalink to &quot;Redis 潜在问题&quot;">​</a></h2><h3 id="缓存故障" tabindex="-1">缓存故障 <a class="header-anchor" href="#缓存故障" aria-label="Permalink to &quot;缓存故障&quot;">​</a></h3><p>Redis 缓存技术常用于高并发情况下，有效减轻服务器和数据库负载。如果 Redis 出现问题导致无法均衡负载，就可能导致服务崩溃。</p><ol><li><strong>缓存预热</strong></li></ol><p>当系统刚启动时，<strong>由于 Redis 尚未保存数据导致无法命中</strong>，数据库被频繁请求数据，由于过载导致数据库崩溃。</p><p>数据库崩溃后， Redis 和应用服务器无法获取数据，请求积压会进一步导致 Redis 和服务器崩溃。</p><ol start="2"><li><strong>缓存雪崩</strong></li></ol><p>当流量激增时，<strong>如果 Redis 大量 key 过期导致无法命中</strong>，数据库被频繁请求数据，由于过载导致数据库崩溃。</p><p>数据库崩溃后， Redis 和应用服务器无法获取数据，请求积压会进一步导致 Redis 和服务器崩溃。</p><ol start="3"><li><strong>缓存击穿</strong></li></ol><p>当流量激增时，<strong>如果 Redis 某个极高热度的 key 过期导致无法命中</strong>，数据库被频繁请求数据，由于过载导致数据库崩溃。</p><p>数据库崩溃后， Redis 和应用服务器无法获取数据，请求积压会进一步导致 Redis 和服务器崩溃。</p><ol start="4"><li><strong>缓存穿透</strong></li></ol><p>当流量激增时，<strong>如果 Redis 收到大量非法访问导致无法命中</strong>，数据库被频繁请求数据，由于过载导致数据库崩溃。</p><p>数据库崩溃后， Redis 和应用服务器无法获取数据，请求积压会进一步导致 Redis 和服务器崩溃。</p><h3 id="一致性问题" tabindex="-1">一致性问题 <a class="header-anchor" href="#一致性问题" aria-label="Permalink to &quot;一致性问题&quot;">​</a></h3><p>如果在缓存中存储数据库数据备份，以提高查询效率，就一定会出现一致性问题，导致脏读。比如数据库中数据从 1 更新到 10 ，但缓存还未更新时读取，就会读取到 1。这个问题难以避免。</p><ol><li>缓存就是缓存，必须要设过期时间。</li><li>实时性要求比较高的（比如充值），直接读数据库。</li><li>数据库并发高需要分库分表。</li></ol><hr><h2 id="redis-客户端" tabindex="-1">Redis 客户端 <a class="header-anchor" href="#redis-客户端" aria-label="Permalink to &quot;Redis 客户端&quot;">​</a></h2><p>我们在实际使用 Redis 时往往要通过 Redis 客户端，以便在程序中直接操作 Redis 。常使用的 Redis 客户端有 Jedis、 以及功能更为高级的 Redisson、Lettuce 等。</p><h3 id="redistemplate-类" tabindex="-1">RedisTemplate 类 <a class="header-anchor" href="#redistemplate-类" aria-label="Permalink to &quot;RedisTemplate 类&quot;">​</a></h3><p>Spring Boot 提供了 RedisTemplate 工具类直接对 Redis 进行操作，也提供了 StringRedisTemplate 类继承 RedisTemplate 类，两者方法完全一致。</p><ul><li><code>RedisTemplate</code> 类：存储数据时序列化成字节数组保存，在 Redis 中数据为字节码。读取数据时自动转化为对象。</li><li><code>StringRedisTemplate</code> 类：存储数据直接以字符串形式保存，在 Redis 中数据直接可读。只适用于字符串类型的数据。</li></ul><p>由于两种序列化方法不同导致的数据存储形式差异，两个类之间不能对另一方存储的 Redis 数据进行操作。</p><p><strong>常用方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/* 直接对 key 操作 */</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                             </span><span style="color:#7B7F8B;">// 删除 key</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(collection);                                        </span><span style="color:#7B7F8B;">// 批量删除 key</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">expire</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">,TimeUnit.MINUTES);                         </span><span style="color:#7B7F8B;">// 设置 key 失效时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> expire </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisTemplate.</span><span style="color:#62E884;">getExpire</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                            </span><span style="color:#7B7F8B;">// 获取 key 失效时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> flag </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisTemplate.</span><span style="color:#62E884;">hasKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                              </span><span style="color:#7B7F8B;">// 判断 key 是否存在</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/* 操作字符串 */</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">opsForValue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">value</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                         </span><span style="color:#7B7F8B;">// 设置键值对 </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (String)redisTemplate.</span><span style="color:#62E884;">opsForValue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);             </span><span style="color:#7B7F8B;">// 获取键值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/* 操作 hash */</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">opsForHash</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">SmallKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashValue</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                  </span><span style="color:#7B7F8B;">// 设置键值对</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">boundHashOps</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">putAll</span><span style="color:#F6F6F4;">(hashMap);                               </span><span style="color:#7B7F8B;">// 批量设置键值对</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (String) redisTemplate.</span><span style="color:#62E884;">opsForHash</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">SmallKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);       </span><span style="color:#7B7F8B;">// 获取键值</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;"> entries </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisTemplate.</span><span style="color:#62E884;">opsForHash</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">entries</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                         </span><span style="color:#7B7F8B;">// 获取全部键值对</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">boundHashOps</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">SmallKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                            </span><span style="color:#7B7F8B;">// 删除键值对</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Boolean</span><span style="color:#F6F6F4;"> isEmpty </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisTemplate.</span><span style="color:#62E884;">boundHashOps</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HashKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">hasKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">SmallKey</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);          </span><span style="color:#7B7F8B;">// 是否含有键值对</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">opsForList</span><span style="color:#F6F6F4;">();　　 </span><span style="color:#7B7F8B;">// 操作 list</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">opsForSet</span><span style="color:#F6F6F4;">();　　  </span><span style="color:#7B7F8B;">// 操作 set</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">opsForZSet</span><span style="color:#F6F6F4;">();　 　</span><span style="color:#7B7F8B;">// 操作有序 set</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 直接对 key 操作 */</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);                                             </span><span style="color:#6A737D;">// 删除 key</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(collection);                                        </span><span style="color:#6A737D;">// 批量删除 key</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">expire</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,TimeUnit.MINUTES);                         </span><span style="color:#6A737D;">// 设置 key 失效时间</span></span>
<span class="line"><span style="color:#24292E;">Long expire </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate.</span><span style="color:#6F42C1;">getExpire</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);                            </span><span style="color:#6A737D;">// 获取 key 失效时间</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate.</span><span style="color:#6F42C1;">hasKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);                              </span><span style="color:#6A737D;">// 判断 key 是否存在</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 操作字符串 */</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">);                         </span><span style="color:#6A737D;">// 设置键值对 </span></span>
<span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String)redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">);             </span><span style="color:#6A737D;">// 获取键值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 操作 hash */</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">opsForHash</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HashKey&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;SmallKey&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;HashValue&quot;</span><span style="color:#24292E;">);                  </span><span style="color:#6A737D;">// 设置键值对</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">boundHashOps</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HashKey&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">putAll</span><span style="color:#24292E;">(hashMap);                               </span><span style="color:#6A737D;">// 批量设置键值对</span></span>
<span class="line"><span style="color:#24292E;">String value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) redisTemplate.</span><span style="color:#6F42C1;">opsForHash</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HashKey&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;SmallKey&quot;</span><span style="color:#24292E;">);       </span><span style="color:#6A737D;">// 获取键值</span></span>
<span class="line"><span style="color:#24292E;">Map entries </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate.</span><span style="color:#6F42C1;">opsForHash</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HashKey&quot;</span><span style="color:#24292E;">);                         </span><span style="color:#6A737D;">// 获取全部键值对</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">boundHashOps</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HashKey&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SmallKey&quot;</span><span style="color:#24292E;">);                            </span><span style="color:#6A737D;">// 删除键值对</span></span>
<span class="line"><span style="color:#24292E;">Boolean isEmpty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate.</span><span style="color:#6F42C1;">boundHashOps</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HashKey&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">hasKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SmallKey&quot;</span><span style="color:#24292E;">);          </span><span style="color:#6A737D;">// 是否含有键值对</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">opsForList</span><span style="color:#24292E;">();　　 </span><span style="color:#6A737D;">// 操作 list</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">opsForSet</span><span style="color:#24292E;">();　　  </span><span style="color:#6A737D;">// 操作 set</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">opsForZSet</span><span style="color:#24292E;">();　 　</span><span style="color:#6A737D;">// 操作有序 set</span></span></code></pre></div><h3 id="jedis-客户端" tabindex="-1">Jedis 客户端 <a class="header-anchor" href="#jedis-客户端" aria-label="Permalink to &quot;Jedis 客户端&quot;">​</a></h3><p>Jedis 基于 Java 实现，是 shell 程序连接 Redis 数据库最常使用的工具。提供了比较全面的 Redis 命令的支持。</p><ul><li>Jedis 使用阻塞 I/O，且其方法调用都是同步的，程序流需要等到 sockets 处理完 I/O 才能执行。</li><li>Jedis 采取直连模式，在多个线程间共享一个 Jedis 实例线程不安全，多线程操作 Redis 必须要使用多个 Jedis 实例。</li></ul><ol><li><strong>导入依赖</strong></li></ol><p>Spring Boot 2.x 版本 Redis 默认导入了 lettuce，需要排除才能使用 Redis .</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- Redis --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.springframework.boot&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">exclusions</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">exclusion</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;io.lettuce&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;lettuce-core&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;/</span><span style="color:#F286C4;">exclusion</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">exclusions</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#7B7F8B;">&lt;!-- Jedis --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;redis.clients&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;jedis&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Redis --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.lettuce&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;lettuce-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- Jedis --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;redis.clients&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jedis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ol start="2"><li><strong>基本使用</strong></li></ol><p>使用引入的 Jedis 类即可连接 Redis 数据库并进行操作。操作名取自 Redis 指令，如果出现问题则会抛出 JedisDataException。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> redis.clients.jedis.Jedis;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JedisTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">jedisTest</span><span style="color:#F6F6F4;"> (){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 连接 Redis</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Jedis</span><span style="color:#F6F6F4;"> jedis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Jedis</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6379</span><span style="color:#F6F6F4;">);    </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 对 Redis 操作（直接使用 Redis 指令）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            jedis.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">MrJoker</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                  </span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(jedis.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">JedisDataException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">error</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 关闭 Redis 连接</span></span>
<span class="line"><span style="color:#F6F6F4;">            jedis.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();    </span></span>
<span class="line"><span style="color:#F6F6F4;">        }                                          </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> redis.clients.jedis.Jedis;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JedisTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jedisTest</span><span style="color:#24292E;"> (){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 连接 Redis</span></span>
<span class="line"><span style="color:#24292E;">        Jedis jedis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Jedis</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6379</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 对 Redis 操作（直接使用 Redis 指令）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            jedis.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;MrJoker&quot;</span><span style="color:#24292E;">);                  </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(jedis.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">));  </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(JedisDataException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">);  </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 关闭 Redis 连接</span></span>
<span class="line"><span style="color:#24292E;">            jedis.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();    </span></span>
<span class="line"><span style="color:#24292E;">        }                                          </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在实际开发中，创建多个 Redis 连接会非常复杂且难以管理，Jedis 提供了 JedisPool 类作为 Redis 连接池来管理 Redis 连接。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> redis.clients.jedis.JedisPool;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> redis.clients.jedis.JedisPoolConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JedisTest</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">jedisTest</span><span style="color:#F6F6F4;"> (){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 配置连接池</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">JedisPoolConfig</span><span style="color:#F6F6F4;"> poolConfig </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">JedisPoolConfig</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        poolConfig.</span><span style="color:#62E884;">setMaxIdle</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">);                 </span><span style="color:#7B7F8B;">// 最大空闲数</span></span>
<span class="line"><span style="color:#F6F6F4;">        poolConfig.</span><span style="color:#62E884;">setMaxTotal</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 最大连接数</span></span>
<span class="line"><span style="color:#F6F6F4;">        poolConfig.</span><span style="color:#62E884;">setMaxWaitMillis</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">20000</span><span style="color:#F6F6F4;">);        </span><span style="color:#7B7F8B;">// 最大等待毫秒数   </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建连接池</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">JedisPool</span><span style="color:#F6F6F4;"> pool </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">JedisPool</span><span style="color:#F6F6F4;">(poolConfig, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 从连接池中获取单个连接</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Jedis</span><span style="color:#F6F6F4;"> jedis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pool.</span><span style="color:#62E884;">getResource</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果需要密码</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//jedis.auth(&quot;password&quot;);                                 </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> redis.clients.jedis.JedisPool;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> redis.clients.jedis.JedisPoolConfig;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JedisTest</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jedisTest</span><span style="color:#24292E;"> (){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 配置连接池</span></span>
<span class="line"><span style="color:#24292E;">        JedisPoolConfig poolConfig </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JedisPoolConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        poolConfig.</span><span style="color:#6F42C1;">setMaxIdle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">);                 </span><span style="color:#6A737D;">// 最大空闲数</span></span>
<span class="line"><span style="color:#24292E;">        poolConfig.</span><span style="color:#6F42C1;">setMaxTotal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 最大连接数</span></span>
<span class="line"><span style="color:#24292E;">        poolConfig.</span><span style="color:#6F42C1;">setMaxWaitMillis</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20000</span><span style="color:#24292E;">);        </span><span style="color:#6A737D;">// 最大等待毫秒数   </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建连接池</span></span>
<span class="line"><span style="color:#24292E;">        JedisPool pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JedisPool</span><span style="color:#24292E;">(poolConfig, </span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 从连接池中获取单个连接</span></span>
<span class="line"><span style="color:#24292E;">        Jedis jedis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pool.</span><span style="color:#6F42C1;">getResource</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果需要密码</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//jedis.auth(&quot;password&quot;);                                 </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li><strong>Spring Boot 集成</strong></li></ol><p>Spring Boot 中，我们无需自行创建 Redis 连接，只需要在配置文件中配置好参数。</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># REDIS配置</span></span>
<span class="line"><span style="color:#7B7F8B;"># Redis数据库索引（默认为0）</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.database=</span><span style="color:#F6F6F4;">0</span></span>
<span class="line"><span style="color:#7B7F8B;"># Redis服务器地址</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.host=</span><span style="color:#F6F6F4;">localhost</span></span>
<span class="line"><span style="color:#7B7F8B;"># Redis服务器连接端口</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.port=</span><span style="color:#F6F6F4;">6379</span></span>
<span class="line"><span style="color:#7B7F8B;"># Redis服务器连接密码（默认为空）</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.password=</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池最大连接数（使用负值表示没有限制）</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.pool.max-active=</span><span style="color:#F6F6F4;">8</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.pool.max-wait=</span><span style="color:#F6F6F4;">-1</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池中的最大空闲连接</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.pool.max-idle=</span><span style="color:#F6F6F4;">8</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池中的最小空闲连接</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.pool.min-idle=</span><span style="color:#F6F6F4;">0</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接超时时间（毫秒）</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.timeout=</span><span style="color:#F6F6F4;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># REDIS配置</span></span>
<span class="line"><span style="color:#6A737D;"># Redis数据库索引（默认为0）</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.database</span><span style="color:#24292E;">=0</span></span>
<span class="line"><span style="color:#6A737D;"># Redis服务器地址</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.host</span><span style="color:#24292E;">=localhost</span></span>
<span class="line"><span style="color:#6A737D;"># Redis服务器连接端口</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.port</span><span style="color:#24292E;">=6379</span></span>
<span class="line"><span style="color:#6A737D;"># Redis服务器连接密码（默认为空）</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.password</span><span style="color:#24292E;">=</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池最大连接数（使用负值表示没有限制）</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.pool.max-active</span><span style="color:#24292E;">=8</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.pool.max-wait</span><span style="color:#24292E;">=-1</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池中的最大空闲连接</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.pool.max-idle</span><span style="color:#24292E;">=8</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池中的最小空闲连接</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.pool.min-idle</span><span style="color:#24292E;">=0</span></span>
<span class="line"><span style="color:#6A737D;"># 连接超时时间（毫秒）</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.timeout</span><span style="color:#24292E;">=0</span></span></code></pre></div><p>Spring Boot 提供默认的 RedisTemplate 工具类根据配置文件自动连接 Redis，自动加载后可以直接调用其中的方法去操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RunWith</span><span style="color:#F6F6F4;">(SpringJUnit4ClassRunner.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">SpringBootTest</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ApplicationTests</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RedisTemplate</span><span style="color:#F6F6F4;"> redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">User</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        user.</span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我没有三颗心脏</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        user.</span><span style="color:#62E884;">setAge</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">21</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 调用工具类方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">opsForValue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user_1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, user);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (User) redisTemplate.</span><span style="color:#62E884;">opsForValue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user_1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(user1.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringJUnit4ClassRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApplicationTests</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RedisTemplate redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我没有三颗心脏&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        user.</span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">21</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 调用工具类方法</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user_1&quot;</span><span style="color:#24292E;">, user);</span></span>
<span class="line"><span style="color:#24292E;">        User user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (User) redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;user_1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user1.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>RedisTemplate 类常用操作</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(key);                                   </span><span style="color:#7B7F8B;">// 删除 key</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(keys);                                  </span><span style="color:#7B7F8B;">// 批量删除 key</span></span>
<span class="line"><span style="color:#F6F6F4;">redisTemplate.</span><span style="color:#62E884;">expire</span><span style="color:#F6F6F4;">(key,time,TimeUnit.MINUTES);             </span><span style="color:#7B7F8B;">// 设置 key 失效时间</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> expire </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisTemplate.</span><span style="color:#62E884;">getExpire</span><span style="color:#F6F6F4;">(key);                  </span><span style="color:#7B7F8B;">// 获取 key 失效时间</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(key);                                   </span><span style="color:#6A737D;">// 删除 key</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(keys);                                  </span><span style="color:#6A737D;">// 批量删除 key</span></span>
<span class="line"><span style="color:#24292E;">redisTemplate.</span><span style="color:#6F42C1;">expire</span><span style="color:#24292E;">(key,time,TimeUnit.MINUTES);             </span><span style="color:#6A737D;">// 设置 key 失效时间</span></span>
<span class="line"><span style="color:#24292E;">Long expire </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisTemplate.</span><span style="color:#6F42C1;">getExpire</span><span style="color:#24292E;">(key);                  </span><span style="color:#6A737D;">// 获取 key 失效时间</span></span></code></pre></div><h3 id="lettuce-客户端" tabindex="-1">Lettuce 客户端 <a class="header-anchor" href="#lettuce-客户端" aria-label="Permalink to &quot;Lettuce 客户端&quot;">​</a></h3><p>更加高级的 Redis 客户端，用于线程安全同步，异步和响应使用，支持集群，Sentinel，管道和编码器。</p><ul><li>基于 Netty 框架的事件驱动的通信层，其方法调用是异步的。不用浪费线程等待网络或磁盘 I/O。</li><li>Lettuce 的 API 是线程安全的，所以可以操作单个 Lettuce 连接来完成各种操作。</li></ul><ol><li><strong>导入依赖</strong></li></ol><p>在 spring boot 2.x 版本，为 Redis 默认导入了 Lettuce 。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- Redis 默认导入 Lettuce --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.springframework.boot&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Redis 默认导入 Lettuce --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>如果 Spring Boot 版本过低，也可以自行导入 Lettuce. Redis 版本至少需要 2.6 .</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- 单独导入 Lettuce --&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.springframework.boot&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;io.lettuce&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;lettuce-core&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;5.1.8.RELEASE&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 单独导入 Lettuce --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.lettuce&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;lettuce-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;5.1.8.RELEASE&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><ol start="2"><li><strong>基本使用</strong></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LettuceTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">testSetGet</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 注册连接信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RedisURI</span><span style="color:#F6F6F4;"> redisUri </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RedisURI.</span><span style="color:#62E884;">builder</span><span style="color:#F6F6F4;">()                    </span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">withHost</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">withPort</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">6379</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">withTimeout</span><span style="color:#F6F6F4;">(Duration.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, ChronoUnit.SECONDS))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建 Redis 客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RedisClient</span><span style="color:#F6F6F4;"> redisClient </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RedisClient.</span><span style="color:#62E884;">create</span><span style="color:#F6F6F4;">(redisUri);   </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建连接</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">StatefulRedisConnection</span><span style="color:#F6F6F4;">&lt;String, String&gt; connection </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisClient.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">();     </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建同步命令</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RedisCommands</span><span style="color:#F6F6F4;">&lt;String, String&gt; redisCommands </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> connection.</span><span style="color:#62E884;">sync</span><span style="color:#F6F6F4;">();                </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SetArgs</span><span style="color:#F6F6F4;"> setArgs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> SetArgs.Builder.</span><span style="color:#62E884;">nx</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">ex</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisCommands.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">throwable</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, setArgs);</span></span>
<span class="line"><span style="color:#F6F6F4;">        Assertions.</span><span style="color:#62E884;">assertThat</span><span style="color:#F6F6F4;">(result).</span><span style="color:#62E884;">isEqualToIgnoringCase</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">OK</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> redisCommands.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        Assertions.</span><span style="color:#62E884;">assertThat</span><span style="color:#F6F6F4;">(result).</span><span style="color:#62E884;">isEqualTo</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">throwable</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">/******************** 其他操作 **********************/</span></span>
<span class="line"><span style="color:#F6F6F4;">        connection.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();                     </span><span style="color:#7B7F8B;">// 关闭连接</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisClient.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 关闭客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LettuceTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSetGet</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注册连接信息</span></span>
<span class="line"><span style="color:#24292E;">        RedisURI redisUri </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RedisURI.</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()                    </span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withHost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6379</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, ChronoUnit.SECONDS))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建 Redis 客户端</span></span>
<span class="line"><span style="color:#24292E;">        RedisClient redisClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RedisClient.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(redisUri);   </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建连接</span></span>
<span class="line"><span style="color:#24292E;">        StatefulRedisConnection&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisClient.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">();     </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建同步命令</span></span>
<span class="line"><span style="color:#24292E;">        RedisCommands&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; redisCommands </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">sync</span><span style="color:#24292E;">();                </span></span>
<span class="line"><span style="color:#24292E;">        SetArgs setArgs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SetArgs.Builder.</span><span style="color:#6F42C1;">nx</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">ex</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisCommands.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;throwable&quot;</span><span style="color:#24292E;">, setArgs);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(result).</span><span style="color:#6F42C1;">isEqualToIgnoringCase</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;OK&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> redisCommands.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertThat</span><span style="color:#24292E;">(result).</span><span style="color:#6F42C1;">isEqualTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;throwable&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/******************** 其他操作 **********************/</span></span>
<span class="line"><span style="color:#24292E;">        connection.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();                     </span><span style="color:#6A737D;">// 关闭连接</span></span>
<span class="line"><span style="color:#24292E;">        redisClient.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 关闭客户端</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Lettuce 主要提供三种API：同步（sync）<code>RedisCommands</code>、异步（async）<code>RedisAsyncCommands</code>、反应式（reactive）<code>RedisReactiveCommands</code>。</p><ol start="3"><li><strong>Spring Boot 集成</strong></li></ol><p>同样在配置文件中配置好参数。</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">spring.redis.host=</span><span style="color:#F6F6F4;">localhost</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.port=</span><span style="color:#F6F6F4;">6379</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.password=</span><span style="color:#F6F6F4;">root</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池最大连接数(使用负值表示没有限制) 默认为8</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.lettuce.pool.max-active=</span><span style="color:#F6F6F4;">8</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池最大阻塞等待时间(使用负值表示没有限制) 默认为-1</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.lettuce.pool.max-wait=</span><span style="color:#F6F6F4;">-1ms</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池中的最大空闲连接 默认为8</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.lettuce.pool.max-idle=</span><span style="color:#F6F6F4;">8</span></span>
<span class="line"><span style="color:#7B7F8B;"># 连接池中的最小空闲连接 默认为 0</span></span>
<span class="line"><span style="color:#F286C4;">spring.redis.lettuce.pool.min-idle=</span><span style="color:#F6F6F4;">0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">spring.redis.host</span><span style="color:#24292E;">=localhost</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.port</span><span style="color:#24292E;">=6379</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.password</span><span style="color:#24292E;">=root</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池最大连接数(使用负值表示没有限制) 默认为8</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.lettuce.pool.max-active</span><span style="color:#24292E;">=8</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池最大阻塞等待时间(使用负值表示没有限制) 默认为-1</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.lettuce.pool.max-wait</span><span style="color:#24292E;">=-1ms</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池中的最大空闲连接 默认为8</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.lettuce.pool.max-idle</span><span style="color:#24292E;">=8</span></span>
<span class="line"><span style="color:#6A737D;"># 连接池中的最小空闲连接 默认为 0</span></span>
<span class="line"><span style="color:#D73A49;">spring.redis.lettuce.pool.min-idle</span><span style="color:#24292E;">=0</span></span></code></pre></div><p>我们同样可以使用 Spring Boot 提供默认的 RedisTemplate 工具类根据配置文件自动连接 Redis。但默认情况下的模板只支持 <code>RedisTemplate&lt;String,String&gt;</code> 存入字符串，因此我们往往需要自定义 RedisTemplate 设置序列化器，以方便操作实例对象。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RedisConfig</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RedisTemplate</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">redisTemplate</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">RedisConnectionFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">factory</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RedisTemplate</span><span style="color:#F6F6F4;">&lt;String, Serializable&gt; redisTemplate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RedisTemplate</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// key 采用 String 的序列化方式</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">setKeySerializer</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringRedisSerializer</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// value 采用 jackson 的序列化方式</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">setValueSerializer</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">GenericJackson2JsonRedisSerializer</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// hash 采用 String/jackson 的序列化方式</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">setHashKeySerializer</span><span style="color:#F6F6F4;">(stringRedisSerializer);</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">setHashValueSerializer</span><span style="color:#F6F6F4;">(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">setConnectionFactory</span><span style="color:#F6F6F4;">(connectionFactory);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> redisTemplate;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RedisTemplate </span><span style="color:#6F42C1;">redisTemplate</span><span style="color:#24292E;">(RedisConnectionFactory </span><span style="color:#E36209;">factory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        RedisTemplate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Serializable</span><span style="color:#24292E;">&gt; redisTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> RedisTemplate&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// key 采用 String 的序列化方式</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">setKeySerializer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringRedisSerializer</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// value 采用 jackson 的序列化方式</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">setValueSerializer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GenericJackson2JsonRedisSerializer</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// hash 采用 String/jackson 的序列化方式</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">setHashKeySerializer</span><span style="color:#24292E;">(stringRedisSerializer);</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">setHashValueSerializer</span><span style="color:#24292E;">(jackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">setConnectionFactory</span><span style="color:#24292E;">(connectionFactory);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> redisTemplate;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>完成后即可用自定义的 RedisTemplate 工具类对 Redis 进行操作。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RunWith</span><span style="color:#F6F6F4;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">SpringBootTest</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RedisTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Autowired</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RedisTemplate</span><span style="color:#F6F6F4;">&lt;String, Serializable&gt; redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Test</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user:1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        redisTemplate.</span><span style="color:#62E884;">opsForValue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(key, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">User</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pjmike</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (User) redisTemplate.</span><span style="color:#62E884;">opsForValue</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(key);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">SpringBootTest</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RedisTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Autowired</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> RedisTemplate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Serializable</span><span style="color:#24292E;">&gt; redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        String key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user:1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(key, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;pjmike&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (User) redisTemplate.</span><span style="color:#6F42C1;">opsForValue</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(key);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li>Lettuce <a href="https://www.cnblogs.com/throwable/p/11601538.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/throwable/p/11601538.html</a><a href="https://juejin.im/post/6844903681087930375" target="_blank" rel="noreferrer">https://juejin.im/post/6844903681087930375</a></li></ul>`,269),y=[r];function i(F,d,E,g,u,h){return a(),n("div",null,y)}const k=s(c,[["render",i]]);export{m as __pageData,k as default};
