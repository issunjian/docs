import{_ as a,o as s,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-10.md","filePath":"interview/backend/并发编程/并发编程-10.md"}'),l={name:"interview/backend/并发编程/并发编程-10.md"},p=e(`<h3 id="_1、生产上如何配置垃圾收集器的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1%E7%94%9F%E4%BA%A7%E4%B8%8A%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84" target="_blank" rel="noreferrer">1、生产上如何配置垃圾收集器的？</a> <a class="header-anchor" href="#_1、生产上如何配置垃圾收集器的" aria-label="Permalink to &quot;[1、生产上如何配置垃圾收集器的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#1生产上如何配置垃圾收集器的)&quot;">​</a></h3><p>首先是内存大小问题，基本上每一个内存区域我都会设置一个上限，来避免溢出问题，比如元空间。通常，堆空间我会设置成操作系统的<code>2/3</code>（这是想给其他进程和操作系统预留一些时间），超过8GB的堆优先选用G1。</p><p>接下来，我会对JVM进行初步优化。比如根据老年代的对象提升速度，来调整年轻代和老年代之间的比例。</p><p>再接下来，就是专项优化，主要判断的依据就是系统容量、访问延迟、吞吐量等。我们的服务是高并发的，所以对STW的时间非常敏感。</p><p>我会通过记录详细的GC日志，来找到这个瓶颈点，借用<code>gceasy</code>（重点）这样的日志分析工具，很容易定位到问题。之所以选择采用工具，是因为gc日志看起来实在是太麻烦了，gceasy号称是AI学习分析问题，可视化做的较好。</p><h3 id="_2、对象的访问定位有哪几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">2、对象的访问定位有哪几种方式?</a> <a class="header-anchor" href="#_2、对象的访问定位有哪几种方式" aria-label="Permalink to &quot;[2、对象的访问定位有哪几种方式?](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#2对象的访问定位有哪几种方式)&quot;">​</a></h3><p>建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。对象的访问方式有虚拟机实现而定，目前主流的访问方式有使用句柄和直接指针2种：</p><p>句柄：如果使用句柄的话，那么Java堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p><p>直接指针：如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference 中存储的直接就是对象的地址。</p><p>这两种对象访问方式各有优势。使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 reference 本身不需要修改。使用直接指针访问方式最大的好处就是速度快，它节省了一次指针定位的时间开销。</p><h3 id="_3、invokedynamic-指令是干什么的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3invokedynamic-%E6%8C%87%E4%BB%A4%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84" target="_blank" rel="noreferrer">3、invokedynamic 指令是干什么的？</a> <a class="header-anchor" href="#_3、invokedynamic-指令是干什么的" aria-label="Permalink to &quot;[3、invokedynamic 指令是干什么的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#3invokedynamic-指令是干什么的)&quot;">​</a></h3><p>Java 7 开始，新引入的字节码指令，可以实现一些动态类型语言的功能。Java 8 的 Lambda 表达式就是通过 invokedynamic 指令实现，使用方法句柄实现。</p><h3 id="_4、cas的问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4cas%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">4、CAS的问题</a> <a class="header-anchor" href="#_4、cas的问题" aria-label="Permalink to &quot;[4、CAS的问题](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#4cas的问题)&quot;">​</a></h3><p><strong>1、</strong> CAS容易造成ABA问题</p><p>一个线程a将数值改成了b，接着又改成了a，此时CAS认为是没有变化，其实是已经变化过了，而这个问题的解决方案可以使用版本号标识，每操作一次version加1。在java5中，已经提供了AtomicStampedReference来解决问题。</p><p><strong>2、</strong> 不能保证代码块的原子性</p><p>CAS机制所保证的知识一个变量的原子性操作，而不能保证整个代码块的原子性。比如需要保证3个变量共同进行原子性的更新，就不得不使用synchronized了。</p><p><strong>3、</strong> CAS造成CPU利用率增加</p><p>之前说过了CAS里面是一个循环判断的过程，如果线程一直没有获取到状态，cpu资源会一直被占用。</p><h3 id="_5、讲讲什么情况下会出现内存溢出-内存泄漏" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E8%AE%B2%E8%AE%B2%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F" target="_blank" rel="noreferrer">5、讲讲什么情况下会出现内存溢出，内存泄漏？</a> <a class="header-anchor" href="#_5、讲讲什么情况下会出现内存溢出-内存泄漏" aria-label="Permalink to &quot;[5、讲讲什么情况下会出现内存溢出，内存泄漏？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#5讲讲什么情况下会出现内存溢出内存泄漏)&quot;">​</a></h3><p>内存泄漏的原因很简单：</p><p><strong>1、</strong> 对象是可达的(一直被引用)</p><p><strong>2、</strong> 但是对象不会被使用</p><p>常见的内存泄漏例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        Set&lt;Object&gt; set = new HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            Object object = new Object();</span></span>
<span class="line"><span style="color:#f6f6f4;">            set.add(object);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">            // 设置为空，该对象不再使用</span></span>
<span class="line"><span style="color:#f6f6f4;">            object = null;</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        // 但是set集合中还维护object的引用，gc不会回收object对象</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(set);</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(set.size());</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        Set&lt;Object&gt; set = new HashSet&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#24292e;">            Object object = new Object();</span></span>
<span class="line"><span style="color:#24292e;">            set.add(object);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">            // 设置为空，该对象不再使用</span></span>
<span class="line"><span style="color:#24292e;">            object = null;</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        // 但是set集合中还维护object的引用，gc不会回收object对象</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(set);</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(set.size());</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>输出结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[java.lang.Object@74a14482, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@677327b6, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@6d6f6e28, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@4554617c, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@45ee12a7, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@1b6d3586, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@7f31245a,</span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@135fbaa4,</span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@1540e19d, </span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.Object@14ae5a5]</span></span>
<span class="line"><span style="color:#f6f6f4;">10</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Process finished with exit code 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[java.lang.Object@74a14482, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@677327b6, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@6d6f6e28, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@4554617c, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@45ee12a7, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@1b6d3586, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@7f31245a,</span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@135fbaa4,</span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@1540e19d, </span></span>
<span class="line"><span style="color:#24292e;">java.lang.Object@14ae5a5]</span></span>
<span class="line"><span style="color:#24292e;">10</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Process finished with exit code 0</span></span></code></pre></div><p>解决这个内存泄漏问题也很简单，将set设置为null，那就可以避免上述内存泄漏问题了。其他内存泄漏得一步一步分析了。</p><p><strong>内存溢出的原因：</strong></p><p><strong>1、</strong> 内存泄露导致堆栈内存不断增大，从而引发内存溢出。</p><p><strong>2、</strong> 大量的jar，class文件加载，装载类的空间不够，溢出</p><p><strong>3、</strong> 操作大量的对象导致堆内存空间已经用满了，溢出</p><p><strong>4、</strong> nio直接操作内存，内存过大导致溢出</p><p><strong>解决：</strong></p><p><strong>1、</strong> 查看程序是否存在内存泄漏的问题</p><p><strong>2、</strong> 设置参数加大空间</p><p><strong>3、</strong> 代码中是否存在死循环或循环产生过多重复的对象实体、</p><p><strong>4、</strong> 查看是否使用了nio直接操作内存。</p><h3 id="_6、类的实例化顺序" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%A1%BA%E5%BA%8F" target="_blank" rel="noreferrer">6、类的实例化顺序</a> <a class="header-anchor" href="#_6、类的实例化顺序" aria-label="Permalink to &quot;[6、类的实例化顺序](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#6类的实例化顺序)&quot;">​</a></h3><p><strong>1、</strong> 父类静态成员和静态初始化块 ，按在代码中出现的顺序依次执行</p><p><strong>2、</strong> 子类静态成员和静态初始化块 ，按在代码中出现的顺序依次执行</p><p><strong>3、</strong> 父类实例成员和实例初始化块 ，按在代码中出现的顺序依次执行</p><p><strong>4、</strong> 父类构造方法</p><p><strong>5、</strong> 子类实例成员和实例初始化块 ，按在代码中出现的顺序依次执行</p><p><strong>6、</strong> 子类构造方法</p><p><strong>检验一下是不是真懂了：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class Base {</span></span>
<span class="line"><span style="color:#f6f6f4;">    private String name = &quot;博客：Soinice&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public Base() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        tellName();</span></span>
<span class="line"><span style="color:#f6f6f4;">        printName();</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public void tellName() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;Base tell name: &quot; + name);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public void printName() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;Base print name: &quot; + name);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class Base {</span></span>
<span class="line"><span style="color:#24292e;">    private String name = &quot;博客：Soinice&quot;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public Base() {</span></span>
<span class="line"><span style="color:#24292e;">        tellName();</span></span>
<span class="line"><span style="color:#24292e;">        printName();</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public void tellName() {</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;Base tell name: &quot; + name);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public void printName() {</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;Base print name: &quot; + name);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class Dervied extends Base {</span></span>
<span class="line"><span style="color:#f6f6f4;">    private String name = &quot;Java3y&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public Dervied() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        tellName();</span></span>
<span class="line"><span style="color:#f6f6f4;">        printName();</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    @Override</span></span>
<span class="line"><span style="color:#f6f6f4;">    public void tellName() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;Dervied tell name: &quot; + name);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    @Override</span></span>
<span class="line"><span style="color:#f6f6f4;">    public void printName() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;Dervied print name: &quot; + name);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        new Dervied();</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class Dervied extends Base {</span></span>
<span class="line"><span style="color:#24292e;">    private String name = &quot;Java3y&quot;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public Dervied() {</span></span>
<span class="line"><span style="color:#24292e;">        tellName();</span></span>
<span class="line"><span style="color:#24292e;">        printName();</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    @Override</span></span>
<span class="line"><span style="color:#24292e;">    public void tellName() {</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;Dervied tell name: &quot; + name);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    @Override</span></span>
<span class="line"><span style="color:#24292e;">    public void printName() {</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;Dervied print name: &quot; + name);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        new Dervied();</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p><strong>输出数据：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Dervied tell name: null</span></span>
<span class="line"><span style="color:#f6f6f4;">Dervied print name: null</span></span>
<span class="line"><span style="color:#f6f6f4;">Dervied tell name: Java3y</span></span>
<span class="line"><span style="color:#f6f6f4;">Dervied print name: Java3y</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Process finished with exit code 0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Dervied tell name: null</span></span>
<span class="line"><span style="color:#24292e;">Dervied print name: null</span></span>
<span class="line"><span style="color:#24292e;">Dervied tell name: Java3y</span></span>
<span class="line"><span style="color:#24292e;">Dervied print name: Java3y</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Process finished with exit code 0</span></span></code></pre></div><p>第一次做错的同学点个赞，加个关注不过分吧(hahaha。</p><h3 id="_7、serial-垃圾收集器-单线程、-复制算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7serial-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E5%8D%95%E7%BA%BF%E7%A8%8B-%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">7、Serial 垃圾收集器（单线程、 复制算法）</a> <a class="header-anchor" href="#_7、serial-垃圾收集器-单线程、-复制算法" aria-label="Permalink to &quot;[7、Serial 垃圾收集器（单线程、 复制算法）](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#7serial-垃圾收集器单线程-复制算法)&quot;">​</a></h3><p>Serial（英文连续） 是最基本垃圾收集器，使用复制算法，曾经是JDK1.3.1 之前新生代唯一的垃圾收集器。Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。</p><p>Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 Serial垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</p><h3 id="_8、怎么唤醒一个阻塞的线程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8%E6%80%8E%E4%B9%88%E5%94%A4%E9%86%92%E4%B8%80%E4%B8%AA%E9%98%BB%E5%A1%9E%E7%9A%84%E7%BA%BF%E7%A8%8B" target="_blank" rel="noreferrer">8、怎么唤醒一个阻塞的线程</a> <a class="header-anchor" href="#_8、怎么唤醒一个阻塞的线程" aria-label="Permalink to &quot;[8、怎么唤醒一个阻塞的线程](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#8怎么唤醒一个阻塞的线程)&quot;">​</a></h3><p>如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它；如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。</p><h3 id="_9、什么是阻塞式方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%BB%E5%A1%9E%E5%BC%8F%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">9、什么是阻塞式方法？</a> <a class="header-anchor" href="#_9、什么是阻塞式方法" aria-label="Permalink to &quot;[9、什么是阻塞式方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#9什么是阻塞式方法)&quot;">​</a></h3><p>阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，ServerSocket的accept()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。</p><h3 id="_10、并发队列的常用方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E5%B9%B6%E5%8F%91%E9%98%9F%E5%88%97%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">10、并发队列的常用方法</a> <a class="header-anchor" href="#_10、并发队列的常用方法" aria-label="Permalink to &quot;[10、并发队列的常用方法](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题附答案解析，大汇总.md#10并发队列的常用方法)&quot;">​</a></h3><p>不管是那种列队，是那个类，当是他们使用的方法都是差不多的</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>在不超出队列长度的情况下插入元素，可以立即执行，成功返回true，如果队列满了就抛出异常。</td></tr><tr><td>offer()</td><td>在不超出队列长度的情况下插入元素的时候则可以立即在队列的尾部插入指定元素,成功时返回true，如果此队列已满，则返回false。</td></tr><tr><td>put()</td><td>插入元素的时候，如果队列满了就进行等待，直到队列可用。</td></tr><tr><td>take()</td><td>从队列中获取值，如果队列中没有值，线程会一直阻塞，直到队列中有值，并且该方法取得了该值。</td></tr><tr><td>poll(long timeout, TimeUnit unit)</td><td>在给定的时间里，从队列中获取值，如果没有取到会抛出异常。</td></tr><tr><td>remainingCapacity()</td><td>获取队列中剩余的空间。</td></tr><tr><td>remove(Object o)</td><td>从队列中移除指定的值。</td></tr><tr><td>contains(Object o)</td><td>判断队列中是否拥有该值。</td></tr><tr><td>drainTo(Collection c)</td><td>将队列中值，全部移除，并发设置到给定的集合中。</td></tr></tbody></table><h3 id="_11、工作中常用的-jvm-配置参数有哪些" tabindex="-1">11、工作中常用的 JVM 配置参数有哪些？ <a class="header-anchor" href="#_11、工作中常用的-jvm-配置参数有哪些" aria-label="Permalink to &quot;11、工作中常用的 JVM 配置参数有哪些？&quot;">​</a></h3><h3 id="_12、怎样通过-java-程序来判断-jvm-是-32-位-还是-64位" tabindex="-1">12、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？ <a class="header-anchor" href="#_12、怎样通过-java-程序来判断-jvm-是-32-位-还是-64位" aria-label="Permalink to &quot;12、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？&quot;">​</a></h3><h3 id="_13、newfixedthreadpool" tabindex="-1">13、newFixedThreadPool <a class="header-anchor" href="#_13、newfixedthreadpool" aria-label="Permalink to &quot;13、newFixedThreadPool&quot;">​</a></h3><h3 id="_14、executors类是什么" tabindex="-1">14、Executors类是什么？ <a class="header-anchor" href="#_14、executors类是什么" aria-label="Permalink to &quot;14、Executors类是什么？&quot;">​</a></h3><h3 id="_15、什么是双亲委派机制" tabindex="-1">15、什么是双亲委派机制？ <a class="header-anchor" href="#_15、什么是双亲委派机制" aria-label="Permalink to &quot;15、什么是双亲委派机制？&quot;">​</a></h3><h3 id="_16、说说自己是怎么使用-synchronized-关键字-在项目中用到了吗" tabindex="-1">16、说说自己是怎么使用 synchronized 关键字，在项目中用到了吗 <a class="header-anchor" href="#_16、说说自己是怎么使用-synchronized-关键字-在项目中用到了吗" aria-label="Permalink to &quot;16、说说自己是怎么使用 synchronized 关键字，在项目中用到了吗&quot;">​</a></h3><h3 id="_17、介绍一下-jvm-中垃圾收集器有哪些-他们特点分别是什么" tabindex="-1">17、介绍一下 JVM 中垃圾收集器有哪些？ 他们特点分别是什么？ <a class="header-anchor" href="#_17、介绍一下-jvm-中垃圾收集器有哪些-他们特点分别是什么" aria-label="Permalink to &quot;17、介绍一下 JVM 中垃圾收集器有哪些？ 他们特点分别是什么？&quot;">​</a></h3><h3 id="_18、为什么thread类的sleep-和yield-方法是静态的" tabindex="-1">18、为什么Thread类的sleep()和yield ()方法是静态的？ <a class="header-anchor" href="#_18、为什么thread类的sleep-和yield-方法是静态的" aria-label="Permalink to &quot;18、为什么Thread类的sleep()和yield ()方法是静态的？&quot;">​</a></h3><h3 id="_19、如何避免线程死锁" tabindex="-1">19、如何避免线程死锁 <a class="header-anchor" href="#_19、如何避免线程死锁" aria-label="Permalink to &quot;19、如何避免线程死锁&quot;">​</a></h3><h3 id="_20、分代收集算法" tabindex="-1">20、分代收集算法 <a class="header-anchor" href="#_20、分代收集算法" aria-label="Permalink to &quot;20、分代收集算法&quot;">​</a></h3><h3 id="_21、多线程同步有哪几种方法" tabindex="-1">21、多线程同步有哪几种方法？ <a class="header-anchor" href="#_21、多线程同步有哪几种方法" aria-label="Permalink to &quot;21、多线程同步有哪几种方法？&quot;">​</a></h3><h3 id="_22、什么是executors" tabindex="-1">22、什么是Executors？ <a class="header-anchor" href="#_22、什么是executors" aria-label="Permalink to &quot;22、什么是Executors？&quot;">​</a></h3><h3 id="_23、谈谈永久代" tabindex="-1">23、谈谈永久代 <a class="header-anchor" href="#_23、谈谈永久代" aria-label="Permalink to &quot;23、谈谈永久代&quot;">​</a></h3><h3 id="_24、对于jdk自带的监控和性能分析工具用过哪些" tabindex="-1">24、对于JDK自带的监控和性能分析工具用过哪些？ <a class="header-anchor" href="#_24、对于jdk自带的监控和性能分析工具用过哪些" aria-label="Permalink to &quot;24、对于JDK自带的监控和性能分析工具用过哪些？&quot;">​</a></h3><h3 id="_25、serial-old-收集器-单线程标记整理算法" tabindex="-1">25、Serial Old 收集器（单线程标记整理算法 ） <a class="header-anchor" href="#_25、serial-old-收集器-单线程标记整理算法" aria-label="Permalink to &quot;25、Serial Old 收集器（单线程标记整理算法 ）&quot;">​</a></h3><h3 id="_26、四种线程池的创建" tabindex="-1">26、四种线程池的创建： <a class="header-anchor" href="#_26、四种线程池的创建" aria-label="Permalink to &quot;26、四种线程池的创建：&quot;">​</a></h3><h3 id="_27、线程池作用" tabindex="-1">27、线程池作用？ <a class="header-anchor" href="#_27、线程池作用" aria-label="Permalink to &quot;27、线程池作用？&quot;">​</a></h3><h3 id="_28、什么是堆" tabindex="-1">28、什么是堆 <a class="header-anchor" href="#_28、什么是堆" aria-label="Permalink to &quot;28、什么是堆&quot;">​</a></h3><h3 id="_29、minorgc、majorgc、fullgc-什么时候发生" tabindex="-1">29、MinorGC、MajorGC、FullGC 什么时候发生？ <a class="header-anchor" href="#_29、minorgc、majorgc、fullgc-什么时候发生" aria-label="Permalink to &quot;29、MinorGC、MajorGC、FullGC 什么时候发生？&quot;">​</a></h3><h3 id="_30、简述java的对象结构" tabindex="-1">30、简述Java的对象结构 <a class="header-anchor" href="#_30、简述java的对象结构" aria-label="Permalink to &quot;30、简述Java的对象结构&quot;">​</a></h3><h3 id="_31、jre、jdk、jvm-及-jit-之间有什么不同" tabindex="-1">31、JRE、JDK、JVM 及 JIT 之间有什么不同？ <a class="header-anchor" href="#_31、jre、jdk、jvm-及-jit-之间有什么不同" aria-label="Permalink to &quot;31、JRE、JDK、JVM 及 JIT 之间有什么不同？&quot;">​</a></h3><h3 id="_32、实现可见性的方法有哪些" tabindex="-1">32、实现可见性的方法有哪些？ <a class="header-anchor" href="#_32、实现可见性的方法有哪些" aria-label="Permalink to &quot;32、实现可见性的方法有哪些？&quot;">​</a></h3>`,83),o=[p];function t(r,c,i,E,d,f){return s(),n("div",null,o)}const u=a(l,[["render",t]]);export{B as __pageData,u as default};
