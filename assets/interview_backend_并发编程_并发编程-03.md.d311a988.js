import{_ as a,o as e,c as s,V as o}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-03.md","filePath":"interview/backend/并发编程/并发编程-03.md"}'),t={name:"interview/backend/并发编程/并发编程-03.md"},r=o(`<h3 id="_1、线程与进程的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#1%E7%BA%BF%E7%A8%8B%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、线程与进程的区别？</a> <a class="header-anchor" href="#_1、线程与进程的区别" aria-label="Permalink to &quot;[1、线程与进程的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#1线程与进程的区别)&quot;">​</a></h3><p>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。</p><p>一个程序至少有一个进程,一个进程至少有一个线程。</p><h3 id="_2、什么是并发容器的实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#2%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">2、什么是并发容器的实现？</a> <a class="header-anchor" href="#_2、什么是并发容器的实现" aria-label="Permalink to &quot;[2、什么是并发容器的实现？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#2什么是并发容器的实现)&quot;">​</a></h3><p><strong>1、</strong> 何为同步容器：可以简单地理解为通过synchronized来实现同步的容器，如果有多个线程调用同步容器的方法，它们将会串行执行。比如Vector，Hashtable，以及Collections.synchronizedSet，synchronizedList等方法返回的容器。</p><p><strong>2、</strong> 可以通过查看Vector，Hashtable等这些同步容器的实现代码，可以看到这些容器实现线程安全的方式就是将它们的状态封装起来，并在需要同步的方法上加上关键字synchronized。</p><p>并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性，例如在ConcurrentHashMap中采用了一种粒度更细的加锁机制，可以称为分段锁，在这种锁机制下，允许任意数量的读线程并发地访问map，并且执行读操作的线程和写操作的线程也可以并发的访问map，同时允许一定数量的写操作线程并发地修改map，所以它可以在并发环境下实现更高的吞吐量。</p><h3 id="_3、32、volatile关键字的原理是什么-干什么用的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#332volatile%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%E5%B9%B2%E4%BB%80%E4%B9%88%E7%94%A8%E7%9A%84" target="_blank" rel="noreferrer">3、32、volatile关键字的原理是什么？干什么用的？</a> <a class="header-anchor" href="#_3、32、volatile关键字的原理是什么-干什么用的" aria-label="Permalink to &quot;[3、32、volatile关键字的原理是什么？干什么用的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#332volatile关键字的原理是什么干什么用的)&quot;">​</a></h3><p>使用了volatile关键字的变量，每当变量的值有变动的时候，都会将更改立即同步到主内存中；而如果某个线程想要使用这个变量，就先要从主存中刷新到工作内存，这样就确保了变量的可见性。</p><p>一般使用一个volatile修饰的bool变量，来控制线程的运行状态。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">volatile boolean stop = false;</span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;"> void stop(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  this.stop = true;</span></span>
<span class="line"><span style="color:#f6f6f4;"> }</span></span>
<span class="line"><span style="color:#f6f6f4;"> void start(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  new Thread(()-&gt;{</span></span>
<span class="line"><span style="color:#f6f6f4;">   while (!stop){</span></span>
<span class="line"><span style="color:#f6f6f4;">    //sth</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;">  }).start();</span></span>
<span class="line"><span style="color:#f6f6f4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">volatile boolean stop = false;</span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;"> void stop(){</span></span>
<span class="line"><span style="color:#24292e;">  this.stop = true;</span></span>
<span class="line"><span style="color:#24292e;"> }</span></span>
<span class="line"><span style="color:#24292e;"> void start(){</span></span>
<span class="line"><span style="color:#24292e;">  new Thread(()-&gt;{</span></span>
<span class="line"><span style="color:#24292e;">   while (!stop){</span></span>
<span class="line"><span style="color:#24292e;">    //sth</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;">  }).start();</span></span>
<span class="line"><span style="color:#24292e;"> }</span></span></code></pre></div><h3 id="_4、请说出与线程同步以及线程调度相关的方法。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#4%E8%AF%B7%E8%AF%B4%E5%87%BA%E4%B8%8E%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BB%A5%E5%8F%8A%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82" target="_blank" rel="noreferrer">4、请说出与线程同步以及线程调度相关的方法。</a> <a class="header-anchor" href="#_4、请说出与线程同步以及线程调度相关的方法。" aria-label="Permalink to &quot;[4、请说出与线程同步以及线程调度相关的方法。](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#4请说出与线程同步以及线程调度相关的方法。)&quot;">​</a></h3><p><strong>1、</strong> wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</p><p><strong>2、</strong> sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理 InterruptedException 异常；</p><p><strong>3、</strong> notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由 JVM 确定唤醒哪个线程，而且与优先级无关；</p><p><strong>4、</strong> notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</p><h3 id="_5、描述一下什么情况下-对象会从年轻代进入老年代" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E5%AF%B9%E8%B1%A1%E4%BC%9A%E4%BB%8E%E5%B9%B4%E8%BD%BB%E4%BB%A3%E8%BF%9B%E5%85%A5%E8%80%81%E5%B9%B4%E4%BB%A3" target="_blank" rel="noreferrer">5、描述一下什么情况下，对象会从年轻代进入老年代</a> <a class="header-anchor" href="#_5、描述一下什么情况下-对象会从年轻代进入老年代" aria-label="Permalink to &quot;[5、描述一下什么情况下，对象会从年轻代进入老年代](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#5描述一下什么情况下对象会从年轻代进入老年代)&quot;">​</a></h3><p><strong>1、</strong> 对象的年龄超过一定阀值，-XX:MaxTenuringThreshold 可以指定该阀值</p><p><strong>2、</strong> 动态对象年龄判定，有的垃圾回收算法，比如 G1，并不要求 age 必须达到 15 才能晋升到老年代，它会使用一些动态的计算方法</p><p><strong>3、</strong> 大小超出某个阀值的对象将直接在老年代上分配，值默认为 0，意思是全部首选 Eden 区进行分配，-XX:PretenureSizeThreshold 可以指定该阀值，部分收集器不支持</p><p><strong>4、</strong> 分配担保，当 Survivor 空间不够的时候，则需要依赖其他内存（指老年代）进行分配担保，这个时候，对象也会直接在老年代上分配</p><h3 id="_6、jvm的引用类型有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#6jvm%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">6、JVM的引用类型有哪些？</a> <a class="header-anchor" href="#_6、jvm的引用类型有哪些" aria-label="Permalink to &quot;[6、JVM的引用类型有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#6jvm的引用类型有哪些)&quot;">​</a></h3><p>引用内型：</p><p><strong>强引用：</strong></p><p>当内存不足的时候，JVM宁可出现OutOfMemoryError错误停止，也需要进行保存，并且不会将此空间回收。在引用期间和栈有联系就无法被回收</p><p><strong>软引用：</strong></p><p>当内存不足的时候，进行对象的回收处理，往往用于高速缓存中；mybatis就是其中</p><p><strong>弱引用：</strong></p><p>不管内存是否紧张，只要有垃圾了就立即回收</p><p><strong>幽灵引用：</strong></p><p>和没有引用是一样的</p><h3 id="_7、类加载器双亲委派模型机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#7%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">7、类加载器双亲委派模型机制？</a> <a class="header-anchor" href="#_7、类加载器双亲委派模型机制" aria-label="Permalink to &quot;[7、类加载器双亲委派模型机制？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#7类加载器双亲委派模型机制)&quot;">​</a></h3><p><strong>基本定义：</strong></p><p>双亲委派模型的工作流程是：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器没有找到所需的类时，子加载器才会尝试去加载该类。</p><p><strong>双亲委派机制:</strong></p><p><strong>1、</strong> 当 AppClassLoader 加载一个 class 时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器 ExtClassLoader 去完成。</p><p><strong>2、</strong> 当 ExtClassLoader 加载一个 class 时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给 BootStrapClassLoader 去完成。</p><p><strong>3、</strong> 如果 BootStrapClassLoader 加载失败，会使用 ExtClassLoader 来尝试加载；</p><p><strong>4、</strong> 若 ExtClassLoader 也加载失败，则会使用 AppClassLoader 来加载，如果 AppClassLoader 也加载失败，则会报出异常 ClassNotFoundException。</p><p><strong>如下图所示：</strong></p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/05/34/39_4.png#alt=39%5C_4.png" alt=""></p><p><strong>双亲委派作用：</strong></p><p><strong>1、</strong> 通过带有优先级的层级关可以避免类的重复加载；</p><p><strong>2、</strong> 保证 Java 程序安全稳定运行，Java 核心 API 定义类型不会被随意替换。</p><h3 id="_8、堆溢出的原因" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#8%E5%A0%86%E6%BA%A2%E5%87%BA%E7%9A%84%E5%8E%9F%E5%9B%A0" target="_blank" rel="noreferrer">8、堆溢出的原因？</a> <a class="header-anchor" href="#_8、堆溢出的原因" aria-label="Permalink to &quot;[8、堆溢出的原因？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#8堆溢出的原因)&quot;">​</a></h3><p>堆用于存储对象实例，只要不断创建对象并保证 GC Roots 到对象有可达路径避免垃圾回收，随着对象数量的增加，总容量触及最大堆容量后就会 OOM，例如在 while 死循环中一直 new 创建实例。</p><p>堆 OOM 是实际应用中最常见的 OOM，处理方法是通过内存映像分析工具对 Dump 出的堆转储快照分析，确认内存中导致 OOM 的对象是否必要，分清到底是内存泄漏还是内存溢出。</p><p>如果是内存泄漏，通过工具查看泄漏对象到 GC Roots 的引用链，找到泄露对象是通过怎样的引用路径、与哪些 GC Roots 关联才导致无法回收，一般可以准确定位到产生内存泄漏代码的具***置。</p><p>如果不是内存泄漏，即内存中对象都必须存活，应当检查 JVM 堆参数，与机器内存相比是否还有向上调整的空间。再从代码检查是否存在某些对象生命周期过长、持有状态时间过长、存储结构设计不合理等情况，尽量减少程序运行期的内存消耗。</p><h3 id="_9、如何查看-jvm-当前使用的是什么垃圾收集器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#9%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B-jvm-%E5%BD%93%E5%89%8D%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8" target="_blank" rel="noreferrer">9、如何查看 JVM 当前使用的是什么垃圾收集器？</a> <a class="header-anchor" href="#_9、如何查看-jvm-当前使用的是什么垃圾收集器" aria-label="Permalink to &quot;[9、如何查看 JVM 当前使用的是什么垃圾收集器？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#9如何查看-jvm-当前使用的是什么垃圾收集器)&quot;">​</a></h3><p>-XX:+PrintCommandLineFlags 参数可以打印出所选垃圾收集器和堆空间大小等设置</p><p>如果开启了 GC 日志详细信息，里面也会包含各代使用的垃圾收集器的简称</p><h3 id="_10、多线程的劣势" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#10%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8A%A3%E5%8A%BF%EF%BC%9A" target="_blank" rel="noreferrer">10、多线程的劣势：</a> <a class="header-anchor" href="#_10、多线程的劣势" aria-label="Permalink to &quot;[10、多线程的劣势：](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题及答案，2021版.md#10多线程的劣势：)&quot;">​</a></h3><p>**线程也是程序，所以线程需要占用内存，线程越多占用内存也越多；</p><p>多线程需要协调和管理，所以需要 CPU 时间跟踪线程；</p><p>线程之间对共享资源的访问会相互影响，必须解决竞用共享资源的问题。**</p><h3 id="_11、什么是线程池-为什么要使用它" tabindex="-1">11、什么是线程池？ 为什么要使用它？ <a class="header-anchor" href="#_11、什么是线程池-为什么要使用它" aria-label="Permalink to &quot;11、什么是线程池？ 为什么要使用它？&quot;">​</a></h3><h3 id="_12、描述一下-jvm-加载-class-文件的原理机制" tabindex="-1">12、描述一下 JVM 加载 class 文件的原理机制 <a class="header-anchor" href="#_12、描述一下-jvm-加载-class-文件的原理机制" aria-label="Permalink to &quot;12、描述一下 JVM 加载 class 文件的原理机制&quot;">​</a></h3><h3 id="_13、linux环境下如何查找哪个线程使用cpu最长" tabindex="-1">13、Linux环境下如何查找哪个线程使用CPU最长 <a class="header-anchor" href="#_13、linux环境下如何查找哪个线程使用cpu最长" aria-label="Permalink to &quot;13、Linux环境下如何查找哪个线程使用CPU最长&quot;">​</a></h3><h3 id="_14、java-中的同步集合与并发集合有什么区别" tabindex="-1">14、Java 中的同步集合与并发集合有什么区别？ <a class="header-anchor" href="#_14、java-中的同步集合与并发集合有什么区别" aria-label="Permalink to &quot;14、Java 中的同步集合与并发集合有什么区别？&quot;">​</a></h3><h3 id="_15、各种回收算法" tabindex="-1">15、各种回收算法 <a class="header-anchor" href="#_15、各种回收算法" aria-label="Permalink to &quot;15、各种回收算法&quot;">​</a></h3><h3 id="_16、copyonwritearraylist-是什么" tabindex="-1">16、CopyOnWriteArrayList 是什么? <a class="header-anchor" href="#_16、copyonwritearraylist-是什么" aria-label="Permalink to &quot;16、CopyOnWriteArrayList 是什么?&quot;">​</a></h3><h3 id="_17、说一下垃圾分代收集的过程" tabindex="-1">17、说一下垃圾分代收集的过程 <a class="header-anchor" href="#_17、说一下垃圾分代收集的过程" aria-label="Permalink to &quot;17、说一下垃圾分代收集的过程&quot;">​</a></h3><h3 id="_18、线程的状态" tabindex="-1">18、线程的状态 <a class="header-anchor" href="#_18、线程的状态" aria-label="Permalink to &quot;18、线程的状态&quot;">​</a></h3><h3 id="_19、jvm有哪些内存区域-jvm的内存布局是什么" tabindex="-1">19、JVM有哪些内存区域？(JVM的内存布局是什么？) <a class="header-anchor" href="#_19、jvm有哪些内存区域-jvm的内存布局是什么" aria-label="Permalink to &quot;19、JVM有哪些内存区域？(JVM的内存布局是什么？)&quot;">​</a></h3><h3 id="_20、在-java-程序中怎么保证多线程的运行安全" tabindex="-1">20、在 Java 程序中怎么保证多线程的运行安全？ <a class="header-anchor" href="#_20、在-java-程序中怎么保证多线程的运行安全" aria-label="Permalink to &quot;20、在 Java 程序中怎么保证多线程的运行安全？&quot;">​</a></h3><h3 id="_21、synchronized、volatile、cas比较" tabindex="-1">21、synchronized、volatile、CAS比较 <a class="header-anchor" href="#_21、synchronized、volatile、cas比较" aria-label="Permalink to &quot;21、synchronized、volatile、CAS比较&quot;">​</a></h3><h3 id="_22、java-的引用有哪些类型" tabindex="-1">22、Java 的引用有哪些类型？ <a class="header-anchor" href="#_22、java-的引用有哪些类型" aria-label="Permalink to &quot;22、Java 的引用有哪些类型？&quot;">​</a></h3><h3 id="_23、你做过-jvm-调优-说说如何查看-jvm-参数默认值" tabindex="-1">23、你做过 JVM 调优，说说如何查看 JVM 参数默认值？ <a class="header-anchor" href="#_23、你做过-jvm-调优-说说如何查看-jvm-参数默认值" aria-label="Permalink to &quot;23、你做过 JVM 调优，说说如何查看 JVM 参数默认值？&quot;">​</a></h3><h3 id="_24、本地方法栈的作用" tabindex="-1">24、本地方法栈的作用？ <a class="header-anchor" href="#_24、本地方法栈的作用" aria-label="Permalink to &quot;24、本地方法栈的作用？&quot;">​</a></h3><h3 id="_25、java-中用到的线程调度算法是什么" tabindex="-1">25、Java 中用到的线程调度算法是什么？ <a class="header-anchor" href="#_25、java-中用到的线程调度算法是什么" aria-label="Permalink to &quot;25、Java 中用到的线程调度算法是什么？&quot;">​</a></h3><h3 id="_26、动态改变构造" tabindex="-1">26、动态改变构造 <a class="header-anchor" href="#_26、动态改变构造" aria-label="Permalink to &quot;26、动态改变构造&quot;">​</a></h3><h3 id="_27、什么是vector" tabindex="-1">27、什么是Vector <a class="header-anchor" href="#_27、什么是vector" aria-label="Permalink to &quot;27、什么是Vector&quot;">​</a></h3><h3 id="_28、java中的同步集合与并发集合有什么区别" tabindex="-1">28、Java中的同步集合与并发集合有什么区别？ <a class="header-anchor" href="#_28、java中的同步集合与并发集合有什么区别" aria-label="Permalink to &quot;28、Java中的同步集合与并发集合有什么区别？&quot;">​</a></h3><h3 id="_29、java线程数过多会造成什么异常" tabindex="-1">29、Java线程数过多会造成什么异常？ <a class="header-anchor" href="#_29、java线程数过多会造成什么异常" aria-label="Permalink to &quot;29、Java线程数过多会造成什么异常？&quot;">​</a></h3><h3 id="_30、线程b怎么知道线程a修改了变量" tabindex="-1">30、线程B怎么知道线程A修改了变量 <a class="header-anchor" href="#_30、线程b怎么知道线程a修改了变量" aria-label="Permalink to &quot;30、线程B怎么知道线程A修改了变量&quot;">​</a></h3><h3 id="_31、分区收集算法" tabindex="-1">31、分区收集算法 <a class="header-anchor" href="#_31、分区收集算法" aria-label="Permalink to &quot;31、分区收集算法&quot;">​</a></h3>`,77),n=[r];function l(E,p,i,B,h,c){return e(),s("div",null,n)}const u=a(t,[["render",l]]);export{d as __pageData,u as default};
