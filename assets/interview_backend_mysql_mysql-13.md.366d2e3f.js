import{_ as e,o as a,c as t,V as o}from"./chunks/framework.c6d8cbec.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mysql/mysql-13.md","filePath":"interview/backend/mysql/mysql-13.md"}'),E={name:"interview/backend/mysql/mysql-13.md"},r=o('<h3 id="_1、int-20-中20的涵义" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1int20%E4%B8%AD20%E7%9A%84%E6%B6%B5%E4%B9%89" target="_blank" rel="noreferrer">1、int(20)中20的涵义</a> <a class="header-anchor" href="#_1、int-20-中20的涵义" aria-label="Permalink to &quot;[1、int(20)中20的涵义](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#1int20中20的涵义)&quot;">​</a></h3><p><strong>1、</strong> 是指显示字符的长度。20表示最大显示宽度为20，但仍占4字节存储，存储范围不变；</p><p><strong>2、</strong> 不影响内部存储，只是影响带 zerofill 定义的 int 时，前面补多少个 0，易于报表展示</p><h3 id="_2、为什么索引结构默认使用b-tree-而不是hash-二叉树-红黑树" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E4%B8%BA%E4%BB%80%E4%B9%88%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8b+tree%E8%80%8C%E4%B8%8D%E6%98%AFhash%E4%BA%8C%E5%8F%89%E6%A0%91%E7%BA%A2%E9%BB%91%E6%A0%91" target="_blank" rel="noreferrer">2、为什么索引结构默认使用B+Tree，而不是Hash，二叉树，红黑树？</a> <a class="header-anchor" href="#_2、为什么索引结构默认使用b-tree-而不是hash-二叉树-红黑树" aria-label="Permalink to &quot;[2、为什么索引结构默认使用B+Tree，而不是Hash，二叉树，红黑树？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#2为什么索引结构默认使用b+tree而不是hash二叉树红黑树)&quot;">​</a></h3><p>B+tree：因为B树不管叶子节点还是非叶子节点，都会保存数据，这样导致在非叶子节点中能保存的指针数量变少（有些资料也称为扇出），指针少的情况下要保存大量数据，只能增加树的高度，导致IO操作变多，查询性能变低；</p><p>Hash：虽然可以快速定位，但是没有顺序，IO复杂度高。</p><p>二叉树：树的高度不均匀，不能自平衡，查找效率跟数据有关（树的高度），并且IO代价高。</p><p>红黑树：树的高度随着数据量增加而增加，IO代价高。</p><h3 id="_3、mysql里记录货币用什么字段类型好" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3mysql%E9%87%8C%E8%AE%B0%E5%BD%95%E8%B4%A7%E5%B8%81%E7%94%A8%E4%BB%80%E4%B9%88%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B%E5%A5%BD" target="_blank" rel="noreferrer">3、MySQL里记录货币用什么字段类型好</a> <a class="header-anchor" href="#_3、mysql里记录货币用什么字段类型好" aria-label="Permalink to &quot;[3、MySQL里记录货币用什么字段类型好](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#3mysql里记录货币用什么字段类型好)&quot;">​</a></h3><p>NUMERIC和DECIMAL类型被MySQL实现为同样的类型，这在SQL92标准允许。他们被用于保存值，该值的准确精度是极其重要的值，例如与金钱有关的数据。当声明一个类是这些类型之一时，精度和规模的能被(并且通常是)指定。</p><p><strong>例如：</strong></p><p>salary DECIMAL(9,2)</p><p>在这个例子中，9(precision)代表将被用于存储值的总的小数位数，而2(scale)代表将被用于存储小数点后的位数。</p><p>因此，在这种情况下，能被存储在salary列中的值的范围是从-9999999.99到9999999.99。</p><h3 id="_4、数据库自增主键可能遇到什么问题。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E5%8F%AF%E8%83%BD%E9%81%87%E5%88%B0%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E3%80%82" target="_blank" rel="noreferrer">4、数据库自增主键可能遇到什么问题。</a> <a class="header-anchor" href="#_4、数据库自增主键可能遇到什么问题。" aria-label="Permalink to &quot;[4、数据库自增主键可能遇到什么问题。](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#4数据库自增主键可能遇到什么问题。)&quot;">​</a></h3><p>使用自增主键对数据库做分库分表，可能出现诸如主键重复等的问题。解决方案的话，简单点的话可以考虑使用UUID哈</p><p>自增主键会产生表锁，从而引发问题</p><p>自增主键可能用完问题。</p><h3 id="_5、从锁的类别角度讲-mysql都有哪些锁呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E4%BB%8E%E9%94%81%E7%9A%84%E7%B1%BB%E5%88%AB%E8%A7%92%E5%BA%A6%E8%AE%B2mysql%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E9%94%81%E5%91%A2" target="_blank" rel="noreferrer">5、从锁的类别角度讲，MySQL都有哪些锁呢？</a> <a class="header-anchor" href="#_5、从锁的类别角度讲-mysql都有哪些锁呢" aria-label="Permalink to &quot;[5、从锁的类别角度讲，MySQL都有哪些锁呢？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#5从锁的类别角度讲mysql都有哪些锁呢)&quot;">​</a></h3><p>从锁的类别上来讲，有共享锁和排他锁。</p><p>共享锁: 又叫做读锁。当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。</p><p>排他锁: 又叫做写锁。当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。</p><h3 id="_6、索引失效情况-校验sql语句是否使用了索引方式为" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E6%83%85%E5%86%B5-%E6%A0%A1%E9%AA%8Csql%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%90%A6%E4%BD%BF%E7%94%A8%E4%BA%86%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F%E4%B8%BA%EF%BC%9A" target="_blank" rel="noreferrer">6、索引失效情况？ ==校验SQL语句是否使用了索引方式为：</a> <a class="header-anchor" href="#_6、索引失效情况-校验sql语句是否使用了索引方式为" aria-label="Permalink to &quot;[6、索引失效情况？ ==校验SQL语句是否使用了索引方式为：](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#6索引失效情况-校验sql语句是否使用了索引方式为：)&quot;">​</a></h3><p><strong>在SQL语句前面使用explain关键字==</strong></p><p><strong>1、</strong> like以%开头索引无效，当like以&amp;结尾，索引有效。</p><p><strong>2、</strong> or语句前后没有同事使用索引，当且仅当or语句查询条件的前后列均为索引时，索引生效。</p><p><strong>3、</strong> 组合索引，使用的不是第一列索引时候，索引失效，即最左匹配规则。</p><p><strong>4、</strong> 数据类型出现隐式转换，如varchar不加单引号的时候可能会自动转换为int类型，这个时候索引失效。</p><p><strong>5、</strong> 在索引列上使用IS NULL或者 IS NOT NULL 时候，索引失效，因为索引是不索引空值得。</p><p><strong>6、</strong> 在索引字段上使用，NOT、 &lt;&gt;、！= 、时候是不会使用索引的，对于这样的处理只会进行全表扫描。</p><p><strong>7、</strong> 对索引字段进行计算操作，函数操作时不会使用索引。</p><p><strong>8、</strong> 当全表扫描速度比索引速度快的时候不会使用索引。</p><h3 id="_7、优化特定类型的查询语句" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7%E4%BC%98%E5%8C%96%E7%89%B9%E5%AE%9A%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5" target="_blank" rel="noreferrer">7、优化特定类型的查询语句</a> <a class="header-anchor" href="#_7、优化特定类型的查询语句" aria-label="Permalink to &quot;[7、优化特定类型的查询语句](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#7优化特定类型的查询语句)&quot;">​</a></h3><p><strong>平时积累吧：</strong></p><p><strong>1、</strong> 比如使用select 具体字段代替 select *</p><p><strong>2、</strong> 使用count(*) 而不是count(列名)</p><p><strong>3、</strong> 在不影响业务的情况，使用缓存</p><p><strong>4、</strong> explain 分析你的SQL</p><h3 id="_8、mysql数据库作发布系统的存储-一天五万条以上的增量-预计运维三年-怎么优化" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%80%E5%A4%A9%E4%BA%94%E4%B8%87%E6%9D%A1%E4%BB%A5%E4%B8%8A%E7%9A%84%E5%A2%9E%E9%87%8F%E9%A2%84%E8%AE%A1%E8%BF%90%E7%BB%B4%E4%B8%89%E5%B9%B4,%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96" target="_blank" rel="noreferrer">8、MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？</a> <a class="header-anchor" href="#_8、mysql数据库作发布系统的存储-一天五万条以上的增量-预计运维三年-怎么优化" aria-label="Permalink to &quot;[8、MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#8mysql数据库作发布系统的存储一天五万条以上的增量预计运维三年,怎么优化)&quot;">​</a></h3><p>a、设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。</p><p>b、选择合适的表字段数据类型和存储引擎，适当的添加索引。</p><p>c、MySQL库主从读写分离。</p><p>d、找规律分表，减少单表中的数据量提高查询速度。</p><p>e。添加缓存机制，比如Memcached，apc等。</p><p>f、不经常改动的页面，生成静态页面。</p><p>g、书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.</p><h3 id="_9、myisam表格将在哪里存储-并且还提供其存储格式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9myisam%E8%A1%A8%E6%A0%BC%E5%B0%86%E5%9C%A8%E5%93%AA%E9%87%8C%E5%AD%98%E5%82%A8%E5%B9%B6%E4%B8%94%E8%BF%98%E6%8F%90%E4%BE%9B%E5%85%B6%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F" target="_blank" rel="noreferrer">9、MyISAM表格将在哪里存储，并且还提供其存储格式？</a> <a class="header-anchor" href="#_9、myisam表格将在哪里存储-并且还提供其存储格式" aria-label="Permalink to &quot;[9、MyISAM表格将在哪里存储，并且还提供其存储格式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#9myisam表格将在哪里存储并且还提供其存储格式)&quot;">​</a></h3><p>每个MyISAM表格以三种格式存储在磁盘上：</p><p>·“.frm”文件存储表定义</p><p>·数据文件具有“.MYD”（MYData）扩展名</p><p>索引文件具有“.MYI”（MYIndex）扩展名</p><h3 id="_10、为什么要优化" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%98%E5%8C%96" target="_blank" rel="noreferrer">10、为什么要优化</a> <a class="header-anchor" href="#_10、为什么要优化" aria-label="Permalink to &quot;[10、为什么要优化](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL高级面试题，中级面试题，大汇总.md#10为什么要优化)&quot;">​</a></h3><p><strong>1、</strong> 系统的吞吐量瓶颈往往出现在数据库的访问速度上</p><p><strong>2、</strong> 随着应用程序的运行，数据库的中的数据会越来越多，处理时间会相应变慢</p><p><strong>3、</strong> 数据是存放在磁盘上的，读写速度无法和内存相比</p><p>优化原则：减少系统瓶颈，减少资源占用，增加系统的反应速度</p><h3 id="_11、mysql中都有哪些触发器" tabindex="-1">11、MySQL中都有哪些触发器？ <a class="header-anchor" href="#_11、mysql中都有哪些触发器" aria-label="Permalink to &quot;11、MySQL中都有哪些触发器？&quot;">​</a></h3><h3 id="_12、sql-约束有哪几种呢" tabindex="-1">12、SQL 约束有哪几种呢？ <a class="header-anchor" href="#_12、sql-约束有哪几种呢" aria-label="Permalink to &quot;12、SQL 约束有哪几种呢？&quot;">​</a></h3><h3 id="_13、试述视图的优点" tabindex="-1">13、试述视图的优点？ <a class="header-anchor" href="#_13、试述视图的优点" aria-label="Permalink to &quot;13、试述视图的优点？&quot;">​</a></h3><h3 id="_14、说一下大表查询的优化方案" tabindex="-1">14、说一下大表查询的优化方案 <a class="header-anchor" href="#_14、说一下大表查询的优化方案" aria-label="Permalink to &quot;14、说一下大表查询的优化方案&quot;">​</a></h3><h3 id="_15、大表数据查询-怎么优化" tabindex="-1">15、大表数据查询，怎么优化 <a class="header-anchor" href="#_15、大表数据查询-怎么优化" aria-label="Permalink to &quot;15、大表数据查询，怎么优化&quot;">​</a></h3><h3 id="_16、慢查询日志" tabindex="-1">16、慢查询日志 <a class="header-anchor" href="#_16、慢查询日志" aria-label="Permalink to &quot;16、慢查询日志&quot;">​</a></h3><h3 id="_17、解释mysql外连接、内连接与自连接的区别" tabindex="-1">17、解释MySQL外连接、内连接与自连接的区别 <a class="header-anchor" href="#_17、解释mysql外连接、内连接与自连接的区别" aria-label="Permalink to &quot;17、解释MySQL外连接、内连接与自连接的区别&quot;">​</a></h3><h3 id="_18、mysql的binlog有有几种录入格式-分别有什么区别" tabindex="-1">18、MySQL的binlog有有几种录入格式？分别有什么区别？ <a class="header-anchor" href="#_18、mysql的binlog有有几种录入格式-分别有什么区别" aria-label="Permalink to &quot;18、MySQL的binlog有有几种录入格式？分别有什么区别？&quot;">​</a></h3><h3 id="_19、使用索引查询一定能提高查询的性能吗-为什么" tabindex="-1">19、使用索引查询一定能提高查询的性能吗？为什么 <a class="header-anchor" href="#_19、使用索引查询一定能提高查询的性能吗-为什么" aria-label="Permalink to &quot;19、使用索引查询一定能提高查询的性能吗？为什么&quot;">​</a></h3><h3 id="_20、union与union-all的区别" tabindex="-1">20、UNION与UNION ALL的区别？ <a class="header-anchor" href="#_20、union与union-all的区别" aria-label="Permalink to &quot;20、UNION与UNION ALL的区别？&quot;">​</a></h3><h3 id="_21、你是否做过主从一致性校验-如果有-怎么做的-如果没有-你打算怎么做" tabindex="-1">21、你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？ <a class="header-anchor" href="#_21、你是否做过主从一致性校验-如果有-怎么做的-如果没有-你打算怎么做" aria-label="Permalink to &quot;21、你是否做过主从一致性校验，如果有，怎么做的，如果没有，你打算怎么做？&quot;">​</a></h3><h3 id="_22、字段为什么要求定义为not-null" tabindex="-1">22、字段为什么要求定义为not null？ <a class="header-anchor" href="#_22、字段为什么要求定义为not-null" aria-label="Permalink to &quot;22、字段为什么要求定义为not null？&quot;">​</a></h3><h3 id="_23、drop、delete与truncate的区别" tabindex="-1">23、drop、delete与truncate的区别 <a class="header-anchor" href="#_23、drop、delete与truncate的区别" aria-label="Permalink to &quot;23、drop、delete与truncate的区别&quot;">​</a></h3><h3 id="_24、主键、外键和索引的区别" tabindex="-1">24、主键、外键和索引的区别？ <a class="header-anchor" href="#_24、主键、外键和索引的区别" aria-label="Permalink to &quot;24、主键、外键和索引的区别？&quot;">​</a></h3><h3 id="_25、mysql的复制原理以及流程" tabindex="-1">25、MySQL的复制原理以及流程 <a class="header-anchor" href="#_25、mysql的复制原理以及流程" aria-label="Permalink to &quot;25、MySQL的复制原理以及流程&quot;">​</a></h3><h3 id="_26、100-mysql一条sql加锁分析" tabindex="-1">26、100.MySQL一条SQL加锁分析 <a class="header-anchor" href="#_26、100-mysql一条sql加锁分析" aria-label="Permalink to &quot;26、100.MySQL一条SQL加锁分析&quot;">​</a></h3><h3 id="_27、存储引擎选择" tabindex="-1">27、存储引擎选择 <a class="header-anchor" href="#_27、存储引擎选择" aria-label="Permalink to &quot;27、存储引擎选择&quot;">​</a></h3><h3 id="_28、drop、delete与truncate的区别" tabindex="-1">28、drop、delete与truncate的区别 <a class="header-anchor" href="#_28、drop、delete与truncate的区别" aria-label="Permalink to &quot;28、drop、delete与truncate的区别&quot;">​</a></h3><h3 id="_29、什么是脏读-幻读-不可重复读" tabindex="-1">29、什么是脏读？幻读？不可重复读？ <a class="header-anchor" href="#_29、什么是脏读-幻读-不可重复读" aria-label="Permalink to &quot;29、什么是脏读？幻读？不可重复读？&quot;">​</a></h3>',75),s=[r];function A(l,B,n,h,i,d){return a(),t("div",null,s)}const m=e(E,[["render",A]]);export{c as __pageData,m as default};
