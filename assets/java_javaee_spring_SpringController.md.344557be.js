import{_ as e}from"./chunks/filter.a4777ab7.js";import{_ as t,H as r,o as c,c as y,J as a,E as l,a as s,V as o,C as p}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"Spring Controller","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/spring/SpringController.md","filePath":"java/javaee/spring/SpringController.md"}'),F={name:"java/javaee/spring/SpringController.md"},i=o(`<h1 id="spring-controller" tabindex="-1">Spring Controller <a class="header-anchor" href="#spring-controller" aria-label="Permalink to &quot;Spring Controller&quot;">​</a></h1><hr><h2 id="服务器控制" tabindex="-1">服务器控制 <a class="header-anchor" href="#服务器控制" aria-label="Permalink to &quot;服务器控制&quot;">​</a></h2><h3 id="响应架构" tabindex="-1">响应架构 <a class="header-anchor" href="#响应架构" aria-label="Permalink to &quot;响应架构&quot;">​</a></h3><p>Spring Boot 内集成了 Tomcat 服务器，也可以外接 Tomcat 服务器。通过控制层接收浏览器的 URL 请求进行操作并返回数据。</p><p>底层和浏览器的信息交互仍旧由 servlet 完成，服务器整体架构如下：</p><ul><li><p><strong>Server</strong>： Tomcat 最顶层容器，代表整个服务器。</p><ul><li><p><strong>Service</strong>：服务，对应不同的任务。</p><ul><li><p><strong>Connector</strong>：有多个，用来处理连接相关的事情，并提供 Socket 到 Request 和 Response 相关转化。</p></li><li><p><strong>Container</strong>：只有一个，用于封装和管理 Servlet ，以及处理具体的 Request 请求。</p></li></ul></li></ul></li></ul><h3 id="启动过程" tabindex="-1">启动过程 <a class="header-anchor" href="#启动过程" aria-label="Permalink to &quot;启动过程&quot;">​</a></h3><p>main 方法： 实例化 SpringApplication ，执行run方法</p><p>run方法：<br> 配置属性、获取监听器，初始化输入参数、配置环境，输出banner 创建上下文、预处理上下文、刷新上下文、再刷新上下文：context</p><p>refreshApplicationContext方法：通过ServletWebServerFactory接口定义了getwebServer方法，通过其创建webServer并返回（创建时做了两件重要的事情：把Connector对象添加到tomcat中，配置引擎）【TomcatServletWebServerFactory是接口其中一个实现类】</p><p>TomcatwebServer类中，规定了Tomcat服务器的启动和关闭方法。</p><p>而tomcat的启动主要是实例化两个组件：Connector、Container</p><hr><h2 id="controller-实现" tabindex="-1">Controller 实现 <a class="header-anchor" href="#controller-实现" aria-label="Permalink to &quot;Controller 实现&quot;">​</a></h2><p>Controller 类需要使用 <code>@RestController</code> 或 <code>@Controller</code> 注解标注。</p><ul><li><p><code>@Controller</code>：类中所有方法以 String 形式返回 classpath 路径下同名 html 页面。适用于 JSP/thymeleaf 等动态加载页面。</p></li><li><p><code>@RestController</code>：类中所有方法以 Map/List 等形式返回 JSON 数据。适用于前后端分离开发。</p></li></ul><p>P.S. <code>@Controller</code> 类中标注 <code>@ResponseBody</code> 的方法，可以起到和 <code>@RestController</code> 类相同的效果。</p><h3 id="请求映射" tabindex="-1">请求映射 <a class="header-anchor" href="#请求映射" aria-label="Permalink to &quot;请求映射&quot;">​</a></h3><ol><li>Controller 类中的方法使用 <code>@RequestMapping</code> 注解标注，就可以将指定 URL 请求映射到方法上处理。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.GET)     </span><span style="color:#7B7F8B;">// 参数为 URL 路径和请求方式</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                         </span><span style="color:#7B7F8B;">// 默认接收所有请求方式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">GetMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                             </span><span style="color:#7B7F8B;">// 简写形式的 GET 请求</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">PostMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                            </span><span style="color:#7B7F8B;">// 简写形式的 POST 请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 灵活映射</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/?/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                       </span><span style="color:#7B7F8B;">// ? 匹配单字符</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/*/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)\`：                                    </span><span style="color:#7B7F8B;">// * 匹配任意数量字符</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/**/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)：                                    </span><span style="color:#7B7F8B;">// ** 匹配任意数量目录</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/{ID}/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)\`                                   </span><span style="color:#7B7F8B;">// {} 自动读取 URL 路径动态参数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.GET)     </span><span style="color:#6A737D;">// 参数为 URL 路径和请求方式</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)                                         </span><span style="color:#6A737D;">// 默认接收所有请求方式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)                                             </span><span style="color:#6A737D;">// 简写形式的 GET 请求</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)                                            </span><span style="color:#6A737D;">// 简写形式的 POST 请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 灵活映射</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/?/hello&quot;</span><span style="color:#24292E;">)                                       </span><span style="color:#6A737D;">// ? 匹配单字符</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/*/hello&quot;</span><span style="color:#24292E;">)\`：                                    </span><span style="color:#6A737D;">// * 匹配任意数量字符</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**/hello&quot;</span><span style="color:#24292E;">)：                                    </span><span style="color:#6A737D;">// ** 匹配任意数量目录</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/{ID}/hello&quot;</span><span style="color:#24292E;">)\`                                   </span><span style="color:#6A737D;">// {} 自动读取 URL 路径动态参数</span></span></code></pre></div><ol start="2"><li>Controller 类也可以通过 <code>@RequestMapping</code> 注解标注，表示路径下的 URL 请求在该类中寻找方法。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/speak</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SpeakController</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">GetMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">(){ </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; } </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/speak&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SpeakController</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(){ </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">; } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="get-请求参数" tabindex="-1">GET 请求参数 <a class="header-anchor" href="#get-请求参数" aria-label="Permalink to &quot;GET 请求参数&quot;">​</a></h3><p>GET 请求参数直接附着在 URL 中。对于请求 <code>/test?username=mrjoker&amp;password=123456</code> ，Controller 方法有以下几种方式接收：</p><ol><li>直接获取参数</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(String username, String password){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>通过 HttpServletRequest 类来获取参数</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> request){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getParameter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getParameter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(HttpServletRequest request){</span></span>
<span class="line"><span style="color:#24292E;">    String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getParameter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li>通过自定义对象来获取参数</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getUsername</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getPassword</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(User user){</span></span>
<span class="line"><span style="color:#24292E;">    String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="4"><li>通过 RequestParam 注解来获取参数，实参值赋给形参。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">required</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">defaultValue</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">mrjoker</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s1, @</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s2){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s2;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">required</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">defaultValue</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;mrjoker&quot;</span><span style="color:#24292E;">) String s1, @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">) String s2){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="5"><li>通过 PathVariable 注解来动态获取参数，参数直接附着在 URL 中。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test/{username}/{password}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">PathVariable</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s1, @</span><span style="color:#97E1F1;font-style:italic;">PathVariable</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s2){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> s2;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test/{username}/{password}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">) String s1, @</span><span style="color:#D73A49;">PathVariable</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">) String s2){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="6"><li>通过 ModelAttribute 注解来获取其他方法返回值作为参数，被注释方法会在此 controller 中每个方法执行前被执行。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Controller</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">HelloWorldController</span><span style="color:#F6F6F4;"> { </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ModelAttribute</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">populateModel</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">abc</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Model</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">model</span><span style="color:#F6F6F4;">) { </span></span>
<span class="line"><span style="color:#F6F6F4;">        model.</span><span style="color:#62E884;">addAttribute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">attributeName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, abc); </span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/helloWorld</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helloWorld</span><span style="color:#F6F6F4;">() { </span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">helloWorld</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Controller</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloWorldController</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ModelAttribute</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">populateModel</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;"> String </span><span style="color:#E36209;">abc</span><span style="color:#24292E;">, Model </span><span style="color:#E36209;">model</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">        model.</span><span style="color:#6F42C1;">addAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;attributeName&quot;</span><span style="color:#24292E;">, abc); </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/helloWorld&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">helloWorld</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;helloWorld&quot;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="post-请求参数" tabindex="-1">POST 请求参数 <a class="header-anchor" href="#post-请求参数" aria-label="Permalink to &quot;POST 请求参数&quot;">​</a></h3><p>POST 请求请求参数放置在请求体中，有以下两种格式：</p><ul><li><strong>Form Data 格式</strong></li></ul><p>请求的 Content-Type 为 application/x-www-form-urlencoded</p><p>示例：<code>username=mrjoker&amp;password=123456</code></p><ul><li><strong>Request Payload 格式</strong></li></ul><p>请求的 Content-Type 为 application/json 或者 multipart/form-data</p><p>示例：<code>{&quot;username&quot;:&quot;mrjoker&quot;, &quot;password&quot;:&quot;123456&quot;}</code></p><ol><li>AJAX 提交 POST 请求默认使用 Form Data 格式，Spring MVC 会自动解析到对应的 bean 中并获取参数。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 逐个参数接收</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username, @</span><span style="color:#97E1F1;font-style:italic;">RequestParam</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 解析为整体接收</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getUsername</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getPassword</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 逐个参数接收</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">RequestMethod.POST)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">) String username, @</span><span style="color:#D73A49;">RequestParam</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">) String password){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 解析为整体接收</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">RequestMethod.POST)</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(User user){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li><p>Vue 提交 POST 请求默认使用 Request Payload 格式，Spring MVC 接收时必须进行处理：</p><ul><li>前端解决方案： axios 库可以使用 qs 库将 json 对象转化为 Form Data 格式。</li><li>后端解决方案： Spring Boot 在请求参数上加 <code>@RequestBody</code> 注解，将请求正文解析到对应的 bean 中获取参数。</li></ul></li></ol><p><code>@RequestBody</code> 可以直接以 String 接收前端传过来的 json 数据，也可以用对象自动解析前端传过来的 json 数据。对象里定义 List 属性，可用来接收多条 json 数据。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// String 形式接收</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestBody</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> user) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">JSONObject</span><span style="color:#F6F6F4;"> userJson </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> JSON.</span><span style="color:#62E884;">parseObject</span><span style="color:#F6F6F4;">(user);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> userJson.</span><span style="color:#62E884;">getString</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">username</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> password </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> userJson.</span><span style="color:#62E884;">getString</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">password</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> username </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> password;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 解析为对象接收</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">updateClusterIdByClientAndQueue</span><span style="color:#F6F6F4;">(@</span><span style="color:#97E1F1;font-style:italic;">RequestBody</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getUsername</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> user.</span><span style="color:#62E884;">getPassword</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// String 形式接收</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> String user) {</span></span>
<span class="line"><span style="color:#24292E;">    JSONObject userJson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> JSON.</span><span style="color:#6F42C1;">parseObject</span><span style="color:#24292E;">(user);</span></span>
<span class="line"><span style="color:#24292E;">    String username </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userJson.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;username&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    String password </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userJson.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;password&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> password;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 解析为对象接收</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">updateClusterIdByClientAndQueue</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> User user) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getUsername</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">getPassword</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>一个请求可以有多个 <code>@RequestParam</code>，但只能有一个 <code>@RequestBody</code>。 URL 内含有参数时，两者可以同时使用。</p></blockquote><h3 id="请求转发和重定向" tabindex="-1">请求转发和重定向 <a class="header-anchor" href="#请求转发和重定向" aria-label="Permalink to &quot;请求转发和重定向&quot;">​</a></h3><ol><li><p><strong>请求转发（forward）</strong></p><p>客户端（浏览器）向服务器 A 发送一个 URL 请求，服务器 A 会向另一台服务器 B 获取资源并将此资源响应给浏览器。浏览器的 URL 地址仍然是 A 。</p></li><li><p><strong>重定向（Redirect）</strong></p><p>客户端（浏览器）向服务器 A 发送一个 URL 请求，服务器 A 告知浏览器资源在服务器 B，浏览器会重新发送请求到服务器 B。浏览器的 URL 地址切换为 B。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 请求转发</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">forward</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">forward:/test2?type=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> type;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 重定向</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test2</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> type </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">redirect</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">redirect:/test2?type=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> type;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 请求转发</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    String type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;forward&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;forward:/test2?type=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> type;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重定向</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/test2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test2</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    String type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redirect&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;redirect:/test2?type=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> type;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在拦截器中，常通过修改 HttpSevletRequest 对象实现请求转发。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">request.</span><span style="color:#62E884;">getRequestDispatcher</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forward</span><span style="color:#F6F6F4;">(request,response);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">request.</span><span style="color:#6F42C1;">getRequestDispatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(request,response);</span></span></code></pre></div><hr><h2 id="controller-配置" tabindex="-1">Controller 配置 <a class="header-anchor" href="#controller-配置" aria-label="Permalink to &quot;Controller 配置&quot;">​</a></h2><p>Spring 的 WebMvcConfigurer 接口定义了 Controller 层配置信息（默认为空实现）。</p><p>开发者可以通过实现 WebMvcConfigurer 接口或继承 WebMvcConfigurationSupport 类对以下方法进行重写。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WebMVCConfig</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WebMvcConfigurer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /** 解决跨域问题 **/</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addCorsMappings</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">CorsRegistry</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">registry</span><span style="color:#F6F6F4;">){};</span></span>
<span class="line"><span style="color:#7B7F8B;">    /** 添加拦截器 **/</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addInterceptors</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistry</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">registry</span><span style="color:#F6F6F4;">){};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMVCConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebMvcConfigurer</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /** 解决跨域问题 **/</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCorsMappings</span><span style="color:#24292E;">(CorsRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">){};</span></span>
<span class="line"><span style="color:#6A737D;">    /** 添加拦截器 **/</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry </span><span style="color:#E36209;">registry</span><span style="color:#24292E;">){};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="跨域问题" tabindex="-1">跨域问题 <a class="header-anchor" href="#跨域问题" aria-label="Permalink to &quot;跨域问题&quot;">​</a></h3><p>配置如何处理跨域请求，否则返回数据会被浏览器拦截。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addCorsMappings</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">CorsRegistry</span><span style="color:#F6F6F4;"> registry) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 添加映射路径（全部）</span></span>
<span class="line"><span style="color:#F6F6F4;">    registry.</span><span style="color:#62E884;">addMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 放行哪些原始域</span></span>
<span class="line"><span style="color:#F6F6F4;">            .</span><span style="color:#62E884;">allowedOrigins</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 是否发送 Cookie 信息</span></span>
<span class="line"><span style="color:#F6F6F4;">            .</span><span style="color:#62E884;">allowCredentials</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 放行哪些原始域(请求方式)</span></span>
<span class="line"><span style="color:#F6F6F4;">            .</span><span style="color:#62E884;">allowedMethods</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">POST</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">PUT</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">DELETE</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 放行哪些原始域(头部信息)</span></span>
<span class="line"><span style="color:#F6F6F4;">            .</span><span style="color:#62E884;">allowedHeaders</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 暴露哪些头部信息</span></span>
<span class="line"><span style="color:#F6F6F4;">            .</span><span style="color:#62E884;">exposedHeaders</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Header1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Header2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addCorsMappings</span><span style="color:#24292E;">(CorsRegistry registry) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 添加映射路径（全部）</span></span>
<span class="line"><span style="color:#24292E;">    registry.</span><span style="color:#6F42C1;">addMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 放行哪些原始域</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowedOrigins</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 是否发送 Cookie 信息</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowCredentials</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 放行哪些原始域(请求方式)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowedMethods</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;PUT&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;DELETE&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 放行哪些原始域(头部信息)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">allowedHeaders</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 暴露哪些头部信息</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">exposedHeaders</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Header1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Header2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>局部跨域</strong></p><ol><li><code>@CrossOrigin</code> 注解：在方法上（@RequestMapping）或者在控制器（@Controller）上使用，可以实现局部跨域。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">CrossOrigin</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://localhost:8080</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">index</span><span style="color:#F6F6F4;">( ){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">CrossOrigin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http://localhost:8080&quot;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">( ){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>使用 HttpServletResponse 对象添加响应头实现局部跨域。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ResponseBody</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">index</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> response){</span></span>
<span class="line"><span style="color:#F6F6F4;">    response.</span><span style="color:#62E884;">addHeader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Access-Control-Allow-Origin</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http://localhost:8080</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 指定端口放行</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// response.addHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);                             全部放行</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ResponseBody</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">index</span><span style="color:#24292E;">(HttpServletResponse response){</span></span>
<span class="line"><span style="color:#24292E;">    response.</span><span style="color:#6F42C1;">addHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Access-Control-Allow-Origin&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;http://localhost:8080&quot;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 指定端口放行</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// response.addHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);                             全部放行</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="拦截器-过滤器" tabindex="-1">拦截器 &amp; 过滤器 <a class="header-anchor" href="#拦截器-过滤器" aria-label="Permalink to &quot;拦截器 &amp; 过滤器&quot;">​</a></h3><ul><li><strong>拦截器(Interceptor)</strong></li></ul><p>Java Web 中，在执行 Controller 方法前后对 Controller 请求进行拦截和处理。依赖于 web 框架，在 Spring 配置。在实现上基于 Java 的反射机制。</p><ul><li><strong>过滤器(Filter)</strong></li></ul><p>Java Web 中，在 request/response 传入 Servlet 前，过滤信息或设置参数。依赖于 servlet 容器，在 web.xml 配置。在实现上基于函数回调。</p><blockquote><p>两者常用于修改字符编码、删除无用参数、登录校验等。Spring 框架中优先使用拦截器：功能接近、使用更加灵活。</p></blockquote><p>拦截器配置</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 在配置中引入拦截器对象（单独编写拦截器类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addInterceptors</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistry</span><span style="color:#F6F6F4;"> registry) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 导入拦截器对象，默认拦截全部</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">InterceptorRegistration</span><span style="color:#F6F6F4;"> addInterceptor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> registry.</span><span style="color:#62E884;">addInterceptor</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myInterceptor</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 排除配置</span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/error</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/user/login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);               </span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/asserts/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                       </span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/webjars/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">excludePathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/public/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 拦截配置</span></span>
<span class="line"><span style="color:#F6F6F4;">    addInterceptor.</span><span style="color:#62E884;">addPathPatterns</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/**</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在配置中引入拦截器对象（单独编写拦截器类）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addInterceptors</span><span style="color:#24292E;">(InterceptorRegistry registry) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 导入拦截器对象，默认拦截全部</span></span>
<span class="line"><span style="color:#24292E;">    InterceptorRegistration addInterceptor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> registry.</span><span style="color:#6F42C1;">addInterceptor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myInterceptor</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 排除配置</span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/error&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/login&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;/user/login&quot;</span><span style="color:#24292E;">);               </span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/asserts/**&quot;</span><span style="color:#24292E;">);                       </span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/webjars/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">excludePathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/public/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拦截配置</span></span>
<span class="line"><span style="color:#24292E;">    addInterceptor.</span><span style="color:#6F42C1;">addPathPatterns</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/**&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>拦截器类通过实现 HandlerInterceptor 接口或者继承 HandlerInterceptorAdapter 类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 定义拦截器</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">myInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HandlerInterceptorAdapter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// Session key</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> SESSION_KEY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">user</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// preHandle 预处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">preHandle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 检查 session</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">HttpSession</span><span style="color:#F6F6F4;"> session </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getSession</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (session.</span><span style="color:#62E884;">getAttribute</span><span style="color:#F6F6F4;">(SESSION_KEY) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 重定向到登录页面</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">setAttribute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录失败，请先输入用户名和密码。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">getRequestDispatcher</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forward</span><span style="color:#F6F6F4;">(request,response);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// postHandle 善后处理</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">postHandle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">handler</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                           </span><span style="color:#97E1F1;font-style:italic;">ModelAndView</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">modelAndView</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">INTERCEPTOR POSTHANDLE CALLED</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义拦截器</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HandlerInterceptorAdapter</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Session key</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String SESSION_KEY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;user&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// preHandle 预处理</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preHandle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 检查 session</span></span>
<span class="line"><span style="color:#24292E;">        HttpSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (session.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(SESSION_KEY) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 重定向到登录页面</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;登录失败，请先输入用户名和密码。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">getRequestDispatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(request,response);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// postHandle 善后处理</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postHandle</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">handler</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                           ModelAndView </span><span style="color:#E36209;">modelAndView</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;INTERCEPTOR POSTHANDLE CALLED&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>过滤器类通过继承 Filter 类实现，直接添加注解即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Component</span><span style="color:#F6F6F4;">                                                                </span><span style="color:#7B7F8B;">// 作为组件，交给容器处理</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">ServletComponentScan</span><span style="color:#F6F6F4;">                                                     </span><span style="color:#7B7F8B;">// 扫描组件</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">WebFilter</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">urlPatterns</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/login/*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">filterName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">loginFilter</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)           </span><span style="color:#7B7F8B;">// 设定过滤路径和名称</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Order</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)                                                                 </span><span style="color:#7B7F8B;">// 设定优先级（值小会优先执行）</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LoginFilter</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Filter</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">init</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FilterConfig</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">filterConfig</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">servletRequest</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">servletResponse</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">FilterChain</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">filterChain</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 过滤器前执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">before</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 执行内部逻辑</span></span>
<span class="line"><span style="color:#F6F6F4;">        filterChain.</span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 过滤器后执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">after</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">destroy</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span><span style="color:#24292E;">                                                                </span><span style="color:#6A737D;">// 作为组件，交给容器处理</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ServletComponentScan</span><span style="color:#24292E;">                                                     </span><span style="color:#6A737D;">// 扫描组件</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">WebFilter</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">urlPatterns</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/login/*&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">filterName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;loginFilter&quot;</span><span style="color:#24292E;">)           </span><span style="color:#6A737D;">// 设定过滤路径和名称</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)                                                                 </span><span style="color:#6A737D;">// 设定优先级（值小会优先执行）</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoginFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(FilterConfig </span><span style="color:#E36209;">filterConfig</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(ServletRequest </span><span style="color:#E36209;">servletRequest</span><span style="color:#24292E;">, ServletResponse </span><span style="color:#E36209;">servletResponse</span><span style="color:#24292E;">, FilterChain </span><span style="color:#E36209;">filterChain</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 过滤器前执行</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;before&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行内部逻辑</span></span>
<span class="line"><span style="color:#24292E;">        filterChain.</span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 过滤器后执行</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>调用顺序</strong></p><p><img src="`+e+'" alt="filter"></p><hr><h3 id="spring-boot配置https" tabindex="-1">Spring Boot配置HTTPS <a class="header-anchor" href="#spring-boot配置https" aria-label="Permalink to &quot;Spring Boot配置HTTPS&quot;">​</a></h3><p>####生成SSL证书</p><p><a href="https://www.cnblogs.com/benwu/articles/4891758.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/benwu/articles/4891758.html</a></p><p>JDK提供证书管理工具: JDK\\bin\\keytool.exe</p>',88),E=p("p",null,[p("strong",null,"cmd命令(JDK\\bin目录打开)")],-1),u=p("p",null,"密钥库: 保存密钥和对应的证书。【证书只含有公钥】",-1),d=o(`<ul><li>alias 证书别名</li><li>keyalg 加密算法，生成密钥对默认RSA</li><li>keysize 密钥键长，RSA默认2048</li><li>validity 证书有效期，默认90</li><li>keypass 证书密码</li><li>keystore 密钥库路径，默认创建在用户目录下</li><li>storetype 密钥库类型，默认JKS</li><li>storepass 密钥库密码</li></ul><p>查看密钥库 <code>keytool -list -v -alias tomcat -keystore &quot;D:\\mykeystore.keystore&quot; -storepass 123456 </code></p><p>将生成的证书文件拷贝到项目resources目录下</p><p>####修改全局配置文件</p><p>application.properties格式</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">server.port</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> 8443</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.key-store</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> classpath:mykeystore.keystore</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.key-store-password</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> 123456</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.keyStoreType</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> PKCS12</span></span>
<span class="line"><span style="color:#F286C4;">server.ssl.keyAlias</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tomcat</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">server.port</span><span style="color:#24292E;"> = 8443</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.key-store</span><span style="color:#24292E;"> = classpath:mykeystore.keystore</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.key-store-password</span><span style="color:#24292E;"> = 123456</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.keyStoreType</span><span style="color:#24292E;"> = PKCS12</span></span>
<span class="line"><span style="color:#D73A49;">server.ssl.keyAlias</span><span style="color:#24292E;"> = tomcat</span></span></code></pre></div><p>设置SSL后，默认使用HTTPS协议。访问localhost:8443，会出现证书安全提示，强行进入即可。</p>`,7),q=o(`<p>如果将服务器端口号设置成443端口,即https的默认访问端口,那么在进行https访问的时候可以不带端口号直接访问。</p><p><strong>修改入口文件</strong></p><p>如果访问<a href="http://localhost:8443" target="_blank" rel="noreferrer">http://localhost:8443</a>，则提示需要TLS。</p><p>》》将http连接自动转换为https连接</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TestSslApplication</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//servlet容器，自己写的bean会覆盖自动配置的bean？</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletWebServerFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">servletContainer</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">TomcatServletWebServerFactory</span><span style="color:#F6F6F4;"> tomcat </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TomcatServletWebServerFactory</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        tomcat.</span><span style="color:#62E884;">addAdditionalTomcatConnectors</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">createStandardConnector</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> tomcat;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">　　</span><span style="color:#7B7F8B;">// 新建connecter监听80端口，并重定向至8443</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Connector</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createStandardConnector</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Connector</span><span style="color:#F6F6F4;"> connector </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Connector</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.apache.coyote.http11.Http11NioProtocol</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setScheme</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">http</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setPort</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">80</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setSecure</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        connector.</span><span style="color:#62E884;">setRedirectPort</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">8443</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> connector;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSslApplication</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//servlet容器，自己写的bean会覆盖自动配置的bean？</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ServletWebServerFactory </span><span style="color:#6F42C1;">servletContainer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        TomcatServletWebServerFactory tomcat </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TomcatServletWebServerFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        tomcat.</span><span style="color:#6F42C1;">addAdditionalTomcatConnectors</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">createStandardConnector</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tomcat;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">　　</span><span style="color:#6A737D;">// 新建connecter监听80端口，并重定向至8443</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Connector </span><span style="color:#6F42C1;">createStandardConnector</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Connector connector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Connector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setScheme</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;http&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setSecure</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        connector.</span><span style="color:#6F42C1;">setRedirectPort</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8443</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> connector;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>重新配置Servlet容器(Tomcat)</p><p>自动配置类ServletWebServerFactoryAutoConfiguration会读取bean</p><p><a href="https://www.jianshu.com/p/017a7f40efff" target="_blank" rel="noreferrer">https://www.jianshu.com/p/017a7f40efff</a></p>`,8);function C(g,D,h,v,A,f){const n=r("font");return c(),y("div",null,[i,a(n,{size:"2",color:"green"},{default:l(()=>[s("Tomcat使用Java提供的密码库，通过Java的Keytool工具生成JKS等格式的证书文件。 Apache使用OpenSSL提供的密码库，生成PEM、KEY、CRT等格式的证书文件。")]),_:1}),E,u,a(n,{size:"2",color:"blond"},{default:l(()=>[s("genkeypair 生成密钥对（非对称加密算法） genseckey 生成密钥（对称加密算法） ")]),_:1}),s(' 创建名为tomcat的密钥对以及自签名的证书，放入mykeystore密钥库中（不存在则创建） `keytool -genkeypair -alias "tomcat" -keyalg "RSA" -validity 180 -keypass "123456" -keystore "D:\\mykeystore.keystore" -storetype PKCS12 -storepass ` '),d,a(n,{size:"2",color:"brown"},{default:l(()=>[s("【未付费注册，不被数字认证机构CA认可：会被浏览器标记为不安全】")]),_:1}),q])}const R=t(F,[["render",C]]);export{m as __pageData,R as default};
