import{_ as a,o as e,c as o,V as s}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端高级面试题整理及答案.md","filePath":"interview/backend/前端/前端高级面试题整理及答案.md"}'),t={name:"interview/backend/前端/前端高级面试题整理及答案.md"},n=s(`<h3 id="_1、如何使用storage-对js文件进行缓存" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8storage-%E5%AF%B9js%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E7%BC%93%E5%AD%98" target="_blank" rel="noreferrer">1、如何使用storage 对js文件进行缓存</a> <a class="header-anchor" href="#_1、如何使用storage-对js文件进行缓存" aria-label="Permalink to &quot;[1、如何使用storage 对js文件进行缓存](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#1如何使用storage-对js文件进行缓存)&quot;">​</a></h3><p>由于sessionStorage - 针对一个 session 的数据存储，所以我们一般利用localStorage储存js文件，只有在第一次访问该页面的时候加载js文件，以后在访问的时候加载本地localStorage执行</p><h3 id="_2、webpack的缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#2webpack%E7%9A%84%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">2、webpack的缺点</a> <a class="header-anchor" href="#_2、webpack的缺点" aria-label="Permalink to &quot;[2、webpack的缺点](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#2webpack的缺点)&quot;">​</a></h3><p>webpack的缺点是只能用于采用模块化开发的项目</p><h3 id="_3、节点类型-判断当前节点类型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#3%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">3、节点类型?判断当前节点类型?</a> <a class="header-anchor" href="#_3、节点类型-判断当前节点类型" aria-label="Permalink to &quot;[3、节点类型?判断当前节点类型?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#3节点类型判断当前节点类型)&quot;">​</a></h3><p><strong>1、</strong> 元素节点</p><p><strong>2、</strong> 属性节点</p><p><strong>3、</strong> 文本节点</p><p><strong>8、</strong> 注释节点</p><p><strong>9、</strong> 文档节点</p><p>通过nodeObject.nodeType判断节点类型：其中，nodeObject 为DOM节点（节点对象）。该属性返回以数字表示的节点类型，例如，元素节点返回 1，属性节点返回 2 。</p><h3 id="_4、常见的浏览器内核有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#4%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">4、常见的浏览器内核有哪些</a> <a class="header-anchor" href="#_4、常见的浏览器内核有哪些" aria-label="Permalink to &quot;[4、常见的浏览器内核有哪些](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#4常见的浏览器内核有哪些)&quot;">​</a></h3><p><strong>1、</strong> Trident( MSHTML )：IE MaxThon TT The World 360 搜狗浏览器</p><p><strong>2、</strong> Geckos：Netscape6及以上版本 FireFox Mozilla Suite/SeaMonkey</p><p><strong>3、</strong> Presto：Opera7及以上(Opera内核原为：Presto，现为：Blink)</p><p><strong>4、</strong> Webkit：Safari Chrome</p><h3 id="_5、position跟display、overflow、float这些特性相互叠加后会怎么样" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#5position%E8%B7%9Fdisplayoverflowfloat%E8%BF%99%E4%BA%9B%E7%89%B9%E6%80%A7%E7%9B%B8%E4%BA%92%E5%8F%A0%E5%8A%A0%E5%90%8E%E4%BC%9A%E6%80%8E%E4%B9%88%E6%A0%B7" target="_blank" rel="noreferrer">5、position跟display、overflow、float这些特性相互叠加后会怎么样？</a> <a class="header-anchor" href="#_5、position跟display、overflow、float这些特性相互叠加后会怎么样" aria-label="Permalink to &quot;[5、position跟display、overflow、float这些特性相互叠加后会怎么样？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#5position跟displayoverflowfloat这些特性相互叠加后会怎么样)&quot;">​</a></h3><p>display属性规定元素应该生成的框的类型；position属性规定元素的定位类型；float属性是一种布局方式，定义元素在哪个方向浮动。</p><p>类似于优先级机制：position：absolute/fixed优先级最高，有他们在时，float不起作用，display值需要调整。float 或者absolute定位的元素，只能是块元素或表格。</p><h3 id="_6、canvas-和-svg-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#6canvas-%E5%92%8C-svg-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、Canvas 和 SVG 有什么区别？</a> <a class="header-anchor" href="#_6、canvas-和-svg-有什么区别" aria-label="Permalink to &quot;[6、Canvas 和 SVG 有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#6canvas-和-svg-有什么区别)&quot;">​</a></h3><p>Canvas 是一种通过 JavaScript 来绘制 2D 图形的方法。Canvas 是逐像素来进行渲染的，因此当我们对 Canvas 进行缩放时，会出现锯齿或者失真的情况。</p><p>SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。我们可以为某个元素附加 JavaScript 事件监听函数。并且 SVG 保存的是图形的绘制方法，因此当 SVG 图形缩放时并不会失真。</p><h3 id="_7、如何优化关键渲染路径-浏览器渲染过程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#7%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">7、如何优化关键渲染路径？（浏览器渲染过程）</a> <a class="header-anchor" href="#_7、如何优化关键渲染路径-浏览器渲染过程" aria-label="Permalink to &quot;[7、如何优化关键渲染路径？（浏览器渲染过程）](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#7如何优化关键渲染路径浏览器渲染过程)&quot;">​</a></h3><p>为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：</p><p><strong>1、</strong> 关键资源的数量。</p><p><strong>2、</strong> 关键路径长度。</p><p><strong>3、</strong> 关键字节的数量。</p><p>关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。</p><p>同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，</p><p>并且资源越大，下载所需的往返次数就越多。</p><p>最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它</p><p>们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。</p><p><strong>优化关键渲染路径的常规步骤如下：</strong></p><p><strong>1、</strong> 对关键路径进行分析和特性描述：资源数、字节数、长度。</p><p><strong>2、</strong> 最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。</p><p><strong>3、</strong> 优化关键字节数以缩短下载时间（往返次数）。</p><p><strong>4、</strong> 优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度。</p><h3 id="_8、event-preventdefault-和-event-stoppropagation-方法之间有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#8eventpreventdefault-%E5%92%8C-eventstoppropagation%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">8、event.preventDefault() 和 event.stopPropagation()方法之间有什么区别？</a> <a class="header-anchor" href="#_8、event-preventdefault-和-event-stoppropagation-方法之间有什么区别" aria-label="Permalink to &quot;[8、event.preventDefault() 和 event.stopPropagation()方法之间有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#8eventpreventdefault-和-eventstoppropagation方法之间有什么区别)&quot;">​</a></h3><p><code>event.preventDefault()</code> 方法可防止元素的默认行为。如果在表单元素中使用，它将阻止其提交。如果在锚元素中使用，它将阻止其导航。如果在上下文菜单中使用，它将阻止其显示或显示。<code>event.stopPropagation()</code>方法用于阻止捕获和冒泡阶段中当前事件的进一步传播。</p><h3 id="_9、什么是执行上下文和执行栈" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#9%E4%BB%80%E4%B9%88%E6%98%AF%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A0%88" target="_blank" rel="noreferrer">9、什么是执行上下文和执行栈？</a> <a class="header-anchor" href="#_9、什么是执行上下文和执行栈" aria-label="Permalink to &quot;[9、什么是执行上下文和执行栈？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#9什么是执行上下文和执行栈)&quot;">​</a></h3><p>变量或函数的执行上下文，决定了它们的行为以及可以访问哪些数据。每个上下文都有一个关联的变量对象，而这个上下文中定义的所有变量和函数都存在于这个对象上(如DOM中全局上下文关联的便是<code>window</code>对象)。</p><p>每个函数调用都有自己的上下文。当代码执行流进入函数时，函数的上下文被推到一个执行栈中。在函数执行完之后，执行栈会弹出该函数上下文，在其上的所有变量和函数都会被销毁，并将控制权返还给之前的执行上下文。 JS的执行流就是通过这个执行栈进行控制的。</p><h3 id="_10、函数表达式和函数声明之间有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86%E5%8F%8A%E7%AD%94%E6%A1%88.md#10%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">10、函数表达式和函数声明之间有什么区别？</a> <a class="header-anchor" href="#_10、函数表达式和函数声明之间有什么区别" aria-label="Permalink to &quot;[10、函数表达式和函数声明之间有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题整理及答案.md#10函数表达式和函数声明之间有什么区别)&quot;">​</a></h3><p>看下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">hoistedFunc();</span></span>
<span class="line"><span style="color:#f6f6f4;">notHoistedFunc();</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">function hoistedFunc(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  console.log(&quot;注意：我会被提升&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">var notHoistedFunc = function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  console.log(&quot;注意：我没有被提升&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">hoistedFunc();</span></span>
<span class="line"><span style="color:#24292e;">notHoistedFunc();</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">function hoistedFunc(){</span></span>
<span class="line"><span style="color:#24292e;">  console.log(&quot;注意：我会被提升&quot;);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var notHoistedFunc = function(){</span></span>
<span class="line"><span style="color:#24292e;">  console.log(&quot;注意：我没有被提升&quot;);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p><code>notHoistedFunc</code>调用抛出异常：<code>Uncaught TypeError: notHoistedFunc is not a function</code>，而<code>hoistedFunc</code>调用不会，因为<code>hoistedFunc</code>会被提升到作用域的顶部，而<code>notHoistedFunc</code> 不会。</p><h3 id="_11、html标签" tabindex="-1">11、HTML标签： <a class="header-anchor" href="#_11、html标签" aria-label="Permalink to &quot;11、HTML标签：&quot;">​</a></h3><h3 id="_12、为什么在调用这个函数时-代码中的b会变成一个全局变量" tabindex="-1">12、为什么在调用这个函数时，代码中的<code>b</code>会变成一个全局变量? <a class="header-anchor" href="#_12、为什么在调用这个函数时-代码中的b会变成一个全局变量" aria-label="Permalink to &quot;12、为什么在调用这个函数时，代码中的\`b\`会变成一个全局变量?&quot;">​</a></h3><h3 id="_13、说说你对amd和commonjs的理解" tabindex="-1">13、说说你对AMD和Commonjs的理解 <a class="header-anchor" href="#_13、说说你对amd和commonjs的理解" aria-label="Permalink to &quot;13、说说你对AMD和Commonjs的理解&quot;">​</a></h3><h3 id="_14、为什么要有同源限制" tabindex="-1">14、为什么要有同源限制？ <a class="header-anchor" href="#_14、为什么要有同源限制" aria-label="Permalink to &quot;14、为什么要有同源限制？&quot;">​</a></h3><h3 id="_15、eval是做什么的" tabindex="-1">15、eval是做什么的？ <a class="header-anchor" href="#_15、eval是做什么的" aria-label="Permalink to &quot;15、eval是做什么的？&quot;">​</a></h3><h3 id="_16、什么是类" tabindex="-1">16、什么是类？ <a class="header-anchor" href="#_16、什么是类" aria-label="Permalink to &quot;16、什么是类？&quot;">​</a></h3><h3 id="_17、css优先级算法如何计算" tabindex="-1">17、CSS优先级算法如何计算？ <a class="header-anchor" href="#_17、css优先级算法如何计算" aria-label="Permalink to &quot;17、CSS优先级算法如何计算？&quot;">​</a></h3><h3 id="_18、页面从输入url到页面加载显示完成-这个过程中都发生了什么" tabindex="-1">18、页面从输入URL到页面加载显示完成，这个过程中都发生了什么？ <a class="header-anchor" href="#_18、页面从输入url到页面加载显示完成-这个过程中都发生了什么" aria-label="Permalink to &quot;18、页面从输入URL到页面加载显示完成，这个过程中都发生了什么？&quot;">​</a></h3><h3 id="_19、你对浏览器的理解" tabindex="-1">19、你对浏览器的理解？ <a class="header-anchor" href="#_19、你对浏览器的理解" aria-label="Permalink to &quot;19、你对浏览器的理解？&quot;">​</a></h3><h3 id="_20、什么是弹性布局" tabindex="-1">20、什么是弹性布局？ <a class="header-anchor" href="#_20、什么是弹性布局" aria-label="Permalink to &quot;20、什么是弹性布局？&quot;">​</a></h3><h3 id="_21、说说严格模式的限制" tabindex="-1">21、说说严格模式的限制 <a class="header-anchor" href="#_21、说说严格模式的限制" aria-label="Permalink to &quot;21、说说严格模式的限制&quot;">​</a></h3><h3 id="_22、有一个高度自适应的div-里面有两个div-一个高度100px-希望另一个填满剩下的高度" tabindex="-1">22、有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度 <a class="header-anchor" href="#_22、有一个高度自适应的div-里面有两个div-一个高度100px-希望另一个填满剩下的高度" aria-label="Permalink to &quot;22、有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度&quot;">​</a></h3><h3 id="_23、css属性overflow属性定义溢出元素内容区的内容会如何处理" tabindex="-1">23、CSS属性overflow属性定义溢出元素内容区的内容会如何处理? <a class="header-anchor" href="#_23、css属性overflow属性定义溢出元素内容区的内容会如何处理" aria-label="Permalink to &quot;23、CSS属性overflow属性定义溢出元素内容区的内容会如何处理?&quot;">​</a></h3><h3 id="_24、什么是fouc-如何避免" tabindex="-1">24、什么是FOUC?如何避免 <a class="header-anchor" href="#_24、什么是fouc-如何避免" aria-label="Permalink to &quot;24、什么是FOUC?如何避免&quot;">​</a></h3><h3 id="_25、什么是ajax和json-它们的优点和缺点" tabindex="-1">25、什么是Ajax和JSON，它们的优点和缺点 <a class="header-anchor" href="#_25、什么是ajax和json-它们的优点和缺点" aria-label="Permalink to &quot;25、什么是Ajax和JSON，它们的优点和缺点&quot;">​</a></h3><h3 id="_26、请描述一下-cookies-sessionstorage-和-localstorage-的区别" tabindex="-1">26、请描述一下 cookies，sessionStorage 和 localStorage 的区别？ <a class="header-anchor" href="#_26、请描述一下-cookies-sessionstorage-和-localstorage-的区别" aria-label="Permalink to &quot;26、请描述一下 cookies，sessionStorage 和 localStorage 的区别？&quot;">​</a></h3><h3 id="_27、同步和异步的区别" tabindex="-1">27、同步和异步的区别 <a class="header-anchor" href="#_27、同步和异步的区别" aria-label="Permalink to &quot;27、同步和异步的区别&quot;">​</a></h3><h3 id="_28、介绍一下标准的css的盒子模型-低版本ie的盒子模型有什么不同的" tabindex="-1">28、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？ <a class="header-anchor" href="#_28、介绍一下标准的css的盒子模型-低版本ie的盒子模型有什么不同的" aria-label="Permalink to &quot;28、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？&quot;">​</a></h3><h3 id="_29、sessionstorage和localstroage与cookie之间有什么关联-cookie最大存放多少字节" tabindex="-1">29、sessionStorage和localstroage与cookie之间有什么关联, cookie最大存放多少字节 <a class="header-anchor" href="#_29、sessionstorage和localstroage与cookie之间有什么关联-cookie最大存放多少字节" aria-label="Permalink to &quot;29、sessionStorage和localstroage与cookie之间有什么关联, cookie最大存放多少字节&quot;">​</a></h3><h3 id="_30、行内元素与块级元素的区别" tabindex="-1">30、行内元素与块级元素的区别？ <a class="header-anchor" href="#_30、行内元素与块级元素的区别" aria-label="Permalink to &quot;30、行内元素与块级元素的区别？&quot;">​</a></h3>`,66),r=[n];function l(i,E,c,p,d,h){return e(),o("div",null,r)}const B=a(t,[["render",l]]);export{u as __pageData,B as default};
