import{_ as s,o as n,c as a,V as p}from"./chunks/framework.c6d8cbec.js";const l="/docs/assets/knife4j-1.e7bf485a.png",o="/docs/assets/knife4j-2.52f0ecc1.png",e="/docs/assets/knife4j-3.9c3bc3aa.png",t="/docs/assets/knife4j-0a9eb2b1-bace-4f47-ace9-8a5f9f280279.42197a9a.png",c="/docs/assets/knife4j-16b1b553-1667-4222-9f29-2e5dfc8917a0.6fffb9a3.png",r="/docs/assets/knife4j-3cfbf598-b94a-4081-aab3-06af1eef612c.768e2bbe.png",y="/docs/assets/knife4j-6.b224b0b2.png",F="/docs/assets/knife4j-7.4bad1e0a.png",i="/docs/assets/knife4j-8.9a44e2a9.png",E="/docs/assets/knife4j-9.76afc31a.png",g="/docs/assets/knife4j-10.d91ffd7c.png",f="/docs/assets/knife4j-11.7678e5a4.png",d="/docs/assets/knife4j-12.e46c1c9c.png",u="/docs/assets/knife4j-13.e089ee74.png",b="/docs/assets/knife4j-14.7db0f043.png",h="/docs/assets/knife4j-15.b44ab8cf.png",P=JSON.parse('{"title":"Spring Boot整合Knife4j，美化强化丑陋的Swagger","description":"","frontmatter":{"title":"Spring Boot整合Knife4j，美化强化丑陋的Swagger","category":["Java企业级开发"],"tag":["Spring Boot"]},"headers":[],"relativePath":"backend/tobetter/gongju/knife4j.md","filePath":"backend/tobetter/gongju/knife4j.md"}'),m={name:"backend/tobetter/gongju/knife4j.md"},C=p('<p>一般在使用 Spring Boot 开发前后端分离项目的时候，都会用到 <a href="https://tobebetterjavaer.com/springboot/swagger.html" target="_blank" rel="noreferrer">Swagger</a>（戳链接详细了解）。</p><p>但随着系统功能的不断增加，接口数量的爆炸式增长，Swagger 的使用体验就会变得越来越差，比如请求参数为 JSON 的时候没办法格式化，返回结果没办法折叠，还有就是没有提供搜索功能。</p><p>今天我们介绍的主角 Knife4j 弥补了这些不足，赋予了 Swagger 更强的生命力和表现力。</p><h2 id="关于-knife4j" tabindex="-1">关于 Knife4j <a class="header-anchor" href="#关于-knife4j" aria-label="Permalink to &quot;关于 Knife4j&quot;">​</a></h2><p>Knife4j 的前身是 swagger-bootstrap-ui，是 springfox-swagger-ui 的增强 UI 实现。swagger-bootstrap-ui 采用的是前端 UI 混合后端 Java 代码的打包方式，在微服务的场景下显得非常臃肿，改良后的 Knife4j 更加小巧、轻量，并且功能更加强大。</p><p>springfox-swagger-ui 的界面长这个样子，说实话，确实略显丑陋。</p><img src="'+l+'"><p>swagger-bootstrap-ui 增强后的样子长下面这样。单纯从直观体验上来看，确实增强了。</p><img src="'+o+'"><p>那改良后的 Knife4j 不仅在界面上更加优雅、炫酷，功能上也更加强大：后端 Java 代码和前端 UI 模块分离了出来，在微服务场景下更加灵活；还提供了专注于 Swagger 的增强解决方案。</p><img src="'+e+`"><p>官方文档：</p><blockquote><p><a href="https://doc.xiaominfo.com/knife4j/documentation/" target="_blank" rel="noreferrer">https://doc.xiaominfo.com/knife4j/documentation/</a></p></blockquote><p>码云地址：</p><blockquote><p><a href="https://gitee.com/xiaoym/knife4j" target="_blank" rel="noreferrer">https://gitee.com/xiaoym/knife4j</a></p></blockquote><p>示例地址：</p><blockquote><p><a href="https://gitee.com/xiaoym/swagger-bootstrap-ui-demo" target="_blank" rel="noreferrer">https://gitee.com/xiaoym/swagger-bootstrap-ui-demo</a></p></blockquote><h2 id="整合-knife4j" tabindex="-1">整合 Knife4j <a class="header-anchor" href="#整合-knife4j" aria-label="Permalink to &quot;整合 Knife4j&quot;">​</a></h2><p>Knife4j 完全遵循了 Swagger 的使用方式，所以可以无缝切换。</p><p>第一步，在 pom.xml 文件中添加 Knife4j 的依赖（<strong>不需要再引入 springfox-boot-starter</strong>了，因为 Knife4j 的 starter 里面已经加入过了）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;!--在引用时请在maven中央仓库搜索3.X最新版本号--&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;3.0.2&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;!--在引用时请在maven中央仓库搜索3.X最新版本号--&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;3.0.2&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>第二步，配置类 SwaggerConfig 还是 Swagger 时期原来的配方。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">EnableOpenApi</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SwaggerConfig</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Docket</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">docket</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Docket</span><span style="color:#F6F6F4;"> docket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Docket</span><span style="color:#F6F6F4;">(DocumentationType.OAS_30)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">apiInfo</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">apiInfo</span><span style="color:#F6F6F4;">()).</span><span style="color:#62E884;">enable</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">select</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//apis： 添加swagger接口提取范围</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">apis</span><span style="color:#F6F6F4;">(RequestHandlerSelectors.</span><span style="color:#62E884;">basePackage</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">top.codingmore.controller</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">paths</span><span style="color:#F6F6F4;">(PathSelectors.</span><span style="color:#62E884;">any</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> docket;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ApiInfo</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">apiInfo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ApiInfoBuilder</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">title</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">编程猫实战项目笔记</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">description</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">编程喵是一个 Spring Boot+Vue 的前后端分离项目</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">contact</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Contact</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">https://codingmore.top</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">www.qing_gee@163.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">version</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">v1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                .</span><span style="color:#62E884;">build</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableOpenApi</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SwaggerConfig</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Docket </span><span style="color:#6F42C1;">docket</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        Docket docket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Docket</span><span style="color:#24292E;">(DocumentationType.OAS_30)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">apiInfo</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">apiInfo</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">enable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//apis： 添加swagger接口提取范围</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">apis</span><span style="color:#24292E;">(RequestHandlerSelectors.</span><span style="color:#6F42C1;">basePackage</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;top.codingmore.controller&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">paths</span><span style="color:#24292E;">(PathSelectors.</span><span style="color:#6F42C1;">any</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> docket;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> ApiInfo </span><span style="color:#6F42C1;">apiInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ApiInfoBuilder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;编程猫实战项目笔记&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">description</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;编程喵是一个 Spring Boot+Vue 的前后端分离项目&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">contact</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Contact</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;https://codingmore.top&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;www.qing_gee@163.com&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">version</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;v1.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步，新建测试控制器类 Knife4jController.java：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Api</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">tags</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">测试 Knife4j</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RestController</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/knife4j</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Knife4jController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">ApiOperation</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">测试</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">method</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二又帅又丑</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Api</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tags</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;测试 Knife4j&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/knife4j&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Knife4jController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">ApiOperation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;测试&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">method</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二又帅又丑&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第四步，由于 springfox 3.0.x 版本 和 Spring Boot 2.6.x 版本有冲突，所以还需要先解决这个 bug，一共分两步（在<a href="https://tobebetterjavaer.com/springboot/swagger.html" target="_blank" rel="noreferrer">Swagger</a> 那篇已经解释过了，这里不再赘述，但防止有小伙伴在学习的时候再次跳坑，这里就重复一下步骤）。</p><p>先在 application.yml 文件中加入：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">spring:</span></span>
<span class="line"><span style="color:#f6f6f4;">  mvc:</span></span>
<span class="line"><span style="color:#f6f6f4;">    path match:</span></span>
<span class="line"><span style="color:#f6f6f4;">      matching-strategy: ANT_PATH_MATCHER</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">spring:</span></span>
<span class="line"><span style="color:#24292e;">  mvc:</span></span>
<span class="line"><span style="color:#24292e;">    path match:</span></span>
<span class="line"><span style="color:#24292e;">      matching-strategy: ANT_PATH_MATCHER</span></span></code></pre></div><p>再在 SwaggerConfig.java 中添加：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BeanPostProcessor</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">springfoxHandlerProviderBeanPostProcessor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BeanPostProcessor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">postProcessAfterInitialization</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">bean</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">beanName</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BeansException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (bean </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> WebMvcRequestHandlerProvider </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> bean </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> WebFluxRequestHandlerProvider) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">customizeSpringfoxHandlerMappings</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">getHandlerMappings</span><span style="color:#F6F6F4;">(bean));</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> bean;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> &lt;T </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> RequestMappingInfoHandlerMapping&gt; </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">customizeSpringfoxHandlerMappings</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;T&gt; </span><span style="color:#FFB86C;font-style:italic;">mappings</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;T&gt; copy </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mappings.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                    .</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(mapping </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> mapping.</span><span style="color:#62E884;">getPatternParser</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    .</span><span style="color:#62E884;">collect</span><span style="color:#F6F6F4;">(Collectors.</span><span style="color:#62E884;">toList</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            mappings.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            mappings.</span><span style="color:#62E884;">addAll</span><span style="color:#F6F6F4;">(copy);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">SuppressWarnings</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">unchecked</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;RequestMappingInfoHandlerMapping&gt; </span><span style="color:#62E884;">getHandlerMappings</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">bean</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> field </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectionUtils.</span><span style="color:#62E884;">findField</span><span style="color:#F6F6F4;">(bean.</span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">(), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">handlerMappings</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                field.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">RequestMappingInfoHandlerMapping</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">) field.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(bean);</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IllegalArgumentException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">IllegalAccessException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IllegalStateException</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> BeanPostProcessor </span><span style="color:#6F42C1;">springfoxHandlerProviderBeanPostProcessor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BeanPostProcessor</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">postProcessAfterInitialization</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">bean</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">beanName</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> BeansException {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bean </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> WebMvcRequestHandlerProvider </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> bean </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> WebFluxRequestHandlerProvider) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">customizeSpringfoxHandlerMappings</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getHandlerMappings</span><span style="color:#24292E;">(bean));</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> bean;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> &lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">RequestMappingInfoHandlerMapping</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customizeSpringfoxHandlerMappings</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">mappings</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            List&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; copy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mappings.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(mapping </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> mapping.</span><span style="color:#6F42C1;">getPatternParser</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    .</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            mappings.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            mappings.</span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(copy);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">RequestMappingInfoHandlerMapping</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">getHandlerMappings</span><span style="color:#24292E;">(Object </span><span style="color:#E36209;">bean</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Field field </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectionUtils.</span><span style="color:#6F42C1;">findField</span><span style="color:#24292E;">(bean.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;handlerMappings&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                field.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">RequestMappingInfoHandlerMapping</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">) field.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(bean);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IllegalArgumentException | IllegalAccessException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalStateException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上步骤均完成后，开始下一步，否则要么项目启动的时候报错，要么在文档中看不到测试的文档接口。</p><p>第五步，运行 Spring Boot 项目，浏览器地址栏输入以下地址访问 API 文档，查看效果。</p><blockquote><p>访问地址（和 Swagger 不同）：<a href="http://localhost:8080/doc.html" target="_blank" rel="noreferrer">http://localhost:8080/doc.html</a></p></blockquote><img src="`+t+'"><p>是不是比 Swagger 简洁大方多了？如果想测试接口的话，可以直接点击接口，然后点击「测试」，点击发送就可以看到返回结果了。</p><img src="'+c+'"><h2 id="knife4j-的功能特点" tabindex="-1">Knife4j 的功能特点 <a class="header-anchor" href="#knife4j-的功能特点" aria-label="Permalink to &quot;Knife4j 的功能特点&quot;">​</a></h2><p>编程喵🐱实战项目中已经整合好了 Knife4j，在本地跑起来后，就可以查看所有 API 接口了。编程喵中的管理端（codingmore-admin）端口为 9002，启动服务后，在浏览器中输入 <a href="http://localhost:9002/doc.html" target="_blank" rel="noreferrer">http://localhost:9002/doc.html</a> 就可以访问到了。</p><img src="'+r+'"><p>简单来介绍下 Knife4j 的 功能特点：</p><p><strong>1）支持登录认证</strong></p><p>Knife4j 和 Swagger 一样，也是支持头部登录认证的，点击「authorize」菜单，添加登录后的信息即可保持登录认证的 token。</p><img src="'+y+'"><p>如果某个 API 需要登录认证的话，就会把之前填写的信息带过来。</p><img src="'+F+'"><p><strong>2）支持 JSON 折叠</strong></p><p>Swagger 是不支持 JSON 折叠的，当返回的信息非常多的时候，界面就会显得非常的臃肿。Knife4j 则不同，可以对返回的 JSON 节点进行折叠。</p><img src="'+i+'"><p><strong>3）离线文档</strong></p><p>Knife4j 支持把 API 文档导出为离线文档（支持 markdown 格式、HTML 格式、Word 格式），</p><img src="'+E+'"><p>使用 Typora 打开后的样子如下，非常的大方美观。</p><img src="'+g+'"><p><strong>4）全局参数</strong></p><p>当某些请求需要全局参数时，这个功能就很实用了，Knife4j 支持 header 和 query 两种方式。</p><img src="'+f+'"><p>之后进行请求的时候，就会把这个全局参数带过去。</p><img src="'+d+'"><p><strong>5）搜索 API 接口</strong></p><p>Swagger 是没有搜索功能的，当要测试的接口有很多的时候，当需要去找某一个 API 的时候就傻眼了，只能一个个去拖动滚动条去找。</p><img src="'+u+'"><p>在文档的右上角，Knife4j 提供了文档搜索功能，输入要查询的关键字，就可以检索筛选了，是不是很方便？</p><img src="'+b+'"><p>目前支持搜索接口的地址、名称和描述。</p><h2 id="尾声" tabindex="-1">尾声 <a class="header-anchor" href="#尾声" aria-label="Permalink to &quot;尾声&quot;">​</a></h2><p>除了我上面提到的增强功能，Knife4j 还提供了很多实用的功能，大家可以通过官网的介绍一一尝试下，生产效率会提高不少。</p><blockquote><p><a href="https://doc.xiaominfo.com/knife4j/documentation/enhance.html" target="_blank" rel="noreferrer">https://doc.xiaominfo.com/knife4j/documentation/enhance.html</a></p></blockquote><img src="'+h+'"><hr><p>更多内容，只针对《Java程序员进阶之路》星球用户开放，需要的小伙伴可以<a href="https://tobebetterjavaer.com/zhishixingqiu/" target="_blank" rel="noreferrer">戳链接🔗</a>加入我们的星球，一起学习，一起卷。。<strong>编程喵</strong>🐱是一个 Spring Boot+Vue 的前后端分离项目，融合了市面上绝大多数流行的技术要点。通过学习实战项目，你可以将所学的知识通过实践进行检验、你可以拓宽自己的技术边界，你可以掌握一个真正的实战项目是如何从 0 到 1 的。</p><hr><h2 id="源码路径" tabindex="-1">源码路径 <a class="header-anchor" href="#源码路径" aria-label="Permalink to &quot;源码路径&quot;">​</a></h2><blockquote><ul><li>编程喵：<a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></li><li>codingmore-knife4j：<a href="https://github.com/itwanger/codingmore-learning/tree/main/codingmore-knife4j" target="_blank" rel="noreferrer">https://github.com/itwanger/codingmore-learning</a></li></ul></blockquote>',73),k=[C];function q(D,A,j,v,_,w){return n(),a("div",null,k)}const x=s(m,[["render",q]]);export{P as __pageData,x as default};
