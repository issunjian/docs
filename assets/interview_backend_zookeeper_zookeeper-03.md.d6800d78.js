import{_ as e,o,c as r,V as a}from"./chunks/framework.c6d8cbec.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/zookeeper/zookeeper-03.md","filePath":"interview/backend/zookeeper/zookeeper-03.md"}'),t={name:"interview/backend/zookeeper/zookeeper-03.md"},s=a('<h3 id="_1、zab和paxos算法的联系与区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1zab%E5%92%8Cpaxos%E7%AE%97%E6%B3%95%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、ZAB和Paxos算法的联系与区别？</a> <a class="header-anchor" href="#_1、zab和paxos算法的联系与区别" aria-label="Permalink to &quot;[1、ZAB和Paxos算法的联系与区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#1zab和paxos算法的联系与区别)&quot;">​</a></h3><p><strong>相同点：</strong></p><p><strong>1、</strong> 两者都存在一个类似于Leader进程的角色，由其负责协调多个Follower进程的运行</p><p><strong>2、</strong> Leader进程都会等待超过半数的Follower做出正确的反馈后，才会将一个提案进行提交</p><p><strong>3、</strong> ZAB协议中，每个Proposal中都包含一个 epoch 值来代表当前的Leader周期，Paxos中名字为Ballot</p><p><strong>不同点：</strong></p><p>ZAB用来构建高可用的分布式数据主备系统（Zookeeper），Paxos是用来构建分布式一致性状态机系统。</p><h3 id="_2、什么是zookeeper" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E4%BB%80%E4%B9%88%E6%98%AFzookeeper" target="_blank" rel="noreferrer">2、什么是ZooKeeper?</a> <a class="header-anchor" href="#_2、什么是zookeeper" aria-label="Permalink to &quot;[2、什么是ZooKeeper?](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#2什么是zookeeper)&quot;">​</a></h3><p>ZooKeeper是一个开源分布式协同服务系统，Zookeeper的设计目标是将那些复杂容易出错的分布式一致性服务封装起来，构成一个高效可用的原语集，并提供一系列简单接口给用户使用。</p><h3 id="_3、zookeeper的数据模型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3zookeeper%E7%9A%84%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B" target="_blank" rel="noreferrer">3、ZooKeeper的数据模型？</a> <a class="header-anchor" href="#_3、zookeeper的数据模型" aria-label="Permalink to &quot;[3、ZooKeeper的数据模型？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#3zookeeper的数据模型)&quot;">​</a></h3><p>共享的、树形结构，由一系列的 ZNode数据节点组成，类似文件系统(目录不能存数据）。ZNode存有数据信息，如版本号等等。ZNode之间的层级关系，像文件系统中的目录结构一样。并且它是将数据存在内存中，这样可以提高吞吐、减少延迟。</p><h3 id="_4、集群最少要几台机器-集群规则是怎样的-集群中有-3-台服务器-其中一个节点宕机-这个时候-zookeeper-还可以使用吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4%E9%9B%86%E7%BE%A4%E6%9C%80%E5%B0%91%E8%A6%81%E5%87%A0%E5%8F%B0%E6%9C%BA%E5%99%A8%E9%9B%86%E7%BE%A4%E8%A7%84%E5%88%99%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9C%89-3-%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9%E5%AE%95%E6%9C%BA%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99-zookeeper-%E8%BF%98%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%90%97" target="_blank" rel="noreferrer">4、集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？</a> <a class="header-anchor" href="#_4、集群最少要几台机器-集群规则是怎样的-集群中有-3-台服务器-其中一个节点宕机-这个时候-zookeeper-还可以使用吗" aria-label="Permalink to &quot;[4、集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#4集群最少要几台机器集群规则是怎样的集群中有-3-台服务器其中一个节点宕机这个时候-zookeeper-还可以使用吗)&quot;">​</a></h3><p>集群规则为 2N+1 台，N&gt;0，即 3 台。可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。</p><h3 id="_5、数据发布-订阅" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E6%95%B0%E6%8D%AE%E5%8F%91%E5%B8%83/%E8%AE%A2%E9%98%85" target="_blank" rel="noreferrer">5、数据发布/订阅？</a> <a class="header-anchor" href="#_5、数据发布-订阅" aria-label="Permalink to &quot;[5、数据发布/订阅？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#5数据发布/订阅)&quot;">​</a></h3><p>发布者将数据发布到ZooKeeper上一个或多个节点上，订阅者从中订阅数据，从而动态获取数据的目的，实现配置信息的集中式管理和数据动态更新。</p><h3 id="_6、acl权限控制机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6acl%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">6、ACL权限控制机制</a> <a class="header-anchor" href="#_6、acl权限控制机制" aria-label="Permalink to &quot;[6、ACL权限控制机制](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#6acl权限控制机制)&quot;">​</a></h3><p>UGO（User/Group/Others）</p><p>目前在Linux/Unix文件系统中使用，也是使用最广泛的权限控制方式。是一种粗粒度的文件系统权限控制模式。</p><p>ACL（Access Control List）访问控制列表</p><p><strong>包括三个方面：</strong></p><p><strong>权限模式（Scheme）</strong></p><p><strong>1、</strong> IP：从IP地址粒度进行权限控制</p><p><strong>2、</strong> Digest：最常用，用类似于 username:password 的权限标识来进行权限配置，便于区分不同应用来进行权限控制</p><p><strong>3、</strong> World：最开放的权限控制方式，是一种特殊的digest模式，只有一个权限标识“world:anyone”</p><p><strong>4、</strong> Super：超级用户</p><p><strong>授权对象</strong></p><p>授权对象指的是权限赋予的用户或一个指定实体，例如IP地址或是机器灯。</p><p><strong>权限 Permission</strong></p><p><strong>1、</strong> CREATE：数据节点创建权限，允许授权对象在该Znode下创建子节点</p><p><strong>2、</strong> DELETE：子节点删除权限，允许授权对象删除该数据节点的子节点</p><p><strong>3、</strong> READ：数据节点的读取权限，允许授权对象访问该数据节点并读取其数据内容或子节点列表等</p><p><strong>4、</strong> WRITE：数据节点更新权限，允许授权对象对该数据节点进行更新操作</p><p><strong>5、</strong> ADMIN：数据节点管理权限，允许授权对象对该数据节点进行ACL相关设置操作</p><h3 id="_7、说几个zookeeper常用的命令。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7%E8%AF%B4%E5%87%A0%E4%B8%AAzookeeper%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%E3%80%82" target="_blank" rel="noreferrer">7、说几个zookeeper常用的命令。</a> <a class="header-anchor" href="#_7、说几个zookeeper常用的命令。" aria-label="Permalink to &quot;[7、说几个zookeeper常用的命令。](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#7说几个zookeeper常用的命令。)&quot;">​</a></h3><p>常用命令：ls get set create delete等。</p><h3 id="_8、zab-和-paxos-算法的联系与区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8zab-%E5%92%8C-paxos-%E7%AE%97%E6%B3%95%E7%9A%84%E8%81%94%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">8、ZAB 和 Paxos 算法的联系与区别？</a> <a class="header-anchor" href="#_8、zab-和-paxos-算法的联系与区别" aria-label="Permalink to &quot;[8、ZAB 和 Paxos 算法的联系与区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#8zab-和-paxos-算法的联系与区别)&quot;">​</a></h3><p><strong>相同点：</strong></p><p><strong>1、</strong> 两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行</p><p><strong>2、</strong> Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交</p><p><strong>3、</strong> ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot</p><p><strong>不同点：</strong></p><p>ZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统。</p><h3 id="_9、zookeeper-是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9zookeeper-%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、ZooKeeper 是什么？</a> <a class="header-anchor" href="#_9、zookeeper-是什么" aria-label="Permalink to &quot;[9、ZooKeeper 是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#9zookeeper-是什么)&quot;">​</a></h3><p><strong>1、</strong> ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</p><p><strong>2、</strong> ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p><strong>Zookeeper 保证了如下分布式一致性特性：</strong></p><p><strong>1、</strong> 顺序一致性</p><p><strong>2、</strong> 原子性</p><p><strong>3、</strong> 单一视图</p><p><strong>4、</strong> 可靠性</p><p><strong>5、</strong> 实时性（最终一致性）</p><p>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</p><p>有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。</p><h3 id="_10、集群支持动态添加机器吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E9%9B%86%E7%BE%A4%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E6%9C%BA%E5%99%A8%E5%90%97" target="_blank" rel="noreferrer">10、集群支持动态添加机器吗？</a> <a class="header-anchor" href="#_10、集群支持动态添加机器吗" aria-label="Permalink to &quot;[10、集群支持动态添加机器吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题附答案解析，大汇总.md#10集群支持动态添加机器吗)&quot;">​</a></h3><p>其实就是水平扩容了，Zookeeper在这方面不太好。两种方式：</p><p>全部重启：关闭所有Zookeeper服务，修改配置之后启动。不影响之前客户端的会话。</p><p>逐个重启：在过半存活即可用的原则下，一台机器重启不影响整个集群对外提供服务。这是比较常用的方式。</p><p>3.5版本开始支持动态扩容。</p><h3 id="_11、集群支持动态添加机器吗" tabindex="-1">11、集群支持动态添加机器吗？ <a class="header-anchor" href="#_11、集群支持动态添加机器吗" aria-label="Permalink to &quot;11、集群支持动态添加机器吗？&quot;">​</a></h3><h3 id="_12、服务器角色" tabindex="-1">12、服务器角色 <a class="header-anchor" href="#_12、服务器角色" aria-label="Permalink to &quot;12、服务器角色&quot;">​</a></h3><h3 id="_13、广播模式" tabindex="-1">13、广播模式 <a class="header-anchor" href="#_13、广播模式" aria-label="Permalink to &quot;13、广播模式&quot;">​</a></h3><h3 id="_14、分布式集群中为什么会有-master主节点" tabindex="-1">14、分布式集群中为什么会有 Master主节点？ <a class="header-anchor" href="#_14、分布式集群中为什么会有-master主节点" aria-label="Permalink to &quot;14、分布式集群中为什么会有 Master主节点？&quot;">​</a></h3><h3 id="_15、哪些情况会导致zab进入恢复模式并选取新的leader" tabindex="-1">15、哪些情况会导致ZAB进入恢复模式并选取新的Leader? <a class="header-anchor" href="#_15、哪些情况会导致zab进入恢复模式并选取新的leader" aria-label="Permalink to &quot;15、哪些情况会导致ZAB进入恢复模式并选取新的Leader?&quot;">​</a></h3><h3 id="_16、服务器角色" tabindex="-1">16、服务器角色 <a class="header-anchor" href="#_16、服务器角色" aria-label="Permalink to &quot;16、服务器角色&quot;">​</a></h3><h3 id="_17、什么是会话session" tabindex="-1">17、什么是会话Session? <a class="header-anchor" href="#_17、什么是会话session" aria-label="Permalink to &quot;17、什么是会话Session?&quot;">​</a></h3><h3 id="_18、负载均衡" tabindex="-1">18、负载均衡 <a class="header-anchor" href="#_18、负载均衡" aria-label="Permalink to &quot;18、负载均衡&quot;">​</a></h3><h3 id="_19、zookeeper可以保证哪些分布式一致性特性" tabindex="-1">19、ZooKeeper可以保证哪些分布式一致性特性？ <a class="header-anchor" href="#_19、zookeeper可以保证哪些分布式一致性特性" aria-label="Permalink to &quot;19、ZooKeeper可以保证哪些分布式一致性特性？&quot;">​</a></h3><h3 id="_20、zookeeper是如何选取主leader的" tabindex="-1">20、zookeeper是如何选取主leader的？ <a class="header-anchor" href="#_20、zookeeper是如何选取主leader的" aria-label="Permalink to &quot;20、zookeeper是如何选取主leader的？&quot;">​</a></h3><h3 id="_21、zk节点宕机如何处理" tabindex="-1">21、zk节点宕机如何处理？ <a class="header-anchor" href="#_21、zk节点宕机如何处理" aria-label="Permalink to &quot;21、zk节点宕机如何处理？&quot;">​</a></h3><h3 id="_22、zookeeper-专门设计的一种支持崩溃恢复的原子广-播协议是" tabindex="-1">22、Zookeeper 专门设计的一种支持崩溃恢复的原子广 播协议是? <a class="header-anchor" href="#_22、zookeeper-专门设计的一种支持崩溃恢复的原子广-播协议是" aria-label="Permalink to &quot;22、Zookeeper 专门设计的一种支持崩溃恢复的原子广 播协议是?&quot;">​</a></h3><h3 id="_23、数据同步" tabindex="-1">23、数据同步 <a class="header-anchor" href="#_23、数据同步" aria-label="Permalink to &quot;23、数据同步&quot;">​</a></h3><h3 id="_24、zookeeper-文件系统" tabindex="-1">24、Zookeeper 文件系统 <a class="header-anchor" href="#_24、zookeeper-文件系统" aria-label="Permalink to &quot;24、Zookeeper 文件系统&quot;">​</a></h3><h3 id="_25、watcher事件监听器" tabindex="-1">25、Watcher事件监听器？ <a class="header-anchor" href="#_25、watcher事件监听器" aria-label="Permalink to &quot;25、Watcher事件监听器？&quot;">​</a></h3><h3 id="_26、说几个-zookeeper-常用的命令。" tabindex="-1">26、说几个 zookeeper 常用的命令。 <a class="header-anchor" href="#_26、说几个-zookeeper-常用的命令。" aria-label="Permalink to &quot;26、说几个 zookeeper 常用的命令。&quot;">​</a></h3><h3 id="_27、zookeeper提供了什么" tabindex="-1">27、ZooKeeper提供了什么？ <a class="header-anchor" href="#_27、zookeeper提供了什么" aria-label="Permalink to &quot;27、ZooKeeper提供了什么？&quot;">​</a></h3><h3 id="_28、服务器的3中角色" tabindex="-1">28、服务器的3中角色？ <a class="header-anchor" href="#_28、服务器的3中角色" aria-label="Permalink to &quot;28、服务器的3中角色？&quot;">​</a></h3><h3 id="_29、zookeeper-的-java-客户端都有哪些" tabindex="-1">29、Zookeeper 的 java 客户端都有哪些？ <a class="header-anchor" href="#_29、zookeeper-的-java-客户端都有哪些" aria-label="Permalink to &quot;29、Zookeeper 的 java 客户端都有哪些？&quot;">​</a></h3><h3 id="_30、zab协议" tabindex="-1">30、ZAB协议？ <a class="header-anchor" href="#_30、zab协议" aria-label="Permalink to &quot;30、ZAB协议？&quot;">​</a></h3>',78),E=[s];function p(n,l,h,i,A,d){return o(),r("div",null,E)}const c=e(t,[["render",p]]);export{k as __pageData,c as default};
