import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"线程池","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/并发/线程池.md","filePath":"java/javase/并发/线程池.md"}'),o={name:"java/javase/并发/线程池.md"},p=l(`<h1 id="线程池" tabindex="-1">线程池 <a class="header-anchor" href="#线程池" aria-label="Permalink to &quot;线程池&quot;">​</a></h1><hr><h2 id="线程池基本概念" tabindex="-1">线程池基本概念 <a class="header-anchor" href="#线程池基本概念" aria-label="Permalink to &quot;线程池基本概念&quot;">​</a></h2><h3 id="线程池-1" tabindex="-1">线程池 <a class="header-anchor" href="#线程池-1" aria-label="Permalink to &quot;线程池&quot;">​</a></h3><p>线程池本质上是一种对象池，用于管理线程资源。在任务执行前，需要从线程池中拿出线程来执行。在任务执行完成之后，把线程放回线程池。实际开发中，线程资源一般通过线程池提供，比如处理数据库连接、接收网络请求。</p><ol><li>线程的创建更加规范，可以合理控制开辟线程的数量。</li><li>不必频繁地创建和销毁线程，优化了资源的开销。</li></ol><h3 id="核心线程池" tabindex="-1">核心线程池 <a class="header-anchor" href="#核心线程池" aria-label="Permalink to &quot;核心线程池&quot;">​</a></h3><p><strong>(corePool) 通常状况下，线程池最多能创建的线程数。</strong></p><p>当有新任务等待处理时，线程池会首先判断核心线程池是否已满，如果没满则创建线程执行任务。即使有其他核心线程空闲也会创建新的核心线程来执行。</p><h3 id="任务队列" tabindex="-1">任务队列 <a class="header-anchor" href="#任务队列" aria-label="Permalink to &quot;任务队列&quot;">​</a></h3><p><strong>(BlockQueue) 线程池中等待被线程执行的任务队列。</strong></p><p>如果核心线程池已满，线程池会判断队列是否已满。如果队列没满，就会将任务放在队列中等待执行。</p><ul><li>ArrayBlockingQueue // 基于数组实现的阻塞队列，有界。</li><li>LinkedBlockingQueue // 基于链表实现的阻塞队列，可以无界。</li><li>SynchronousQueue // 不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作。</li><li>PriorityBlockingQueue // 带优先级的阻塞队列，无界。</li></ul><h3 id="最大线程池" tabindex="-1">最大线程池 <a class="header-anchor" href="#最大线程池" aria-label="Permalink to &quot;最大线程池&quot;">​</a></h3><p><strong>(maximumPool) 任务量很大时，线程池最多能创建的线程数。</strong></p><p>如果队列已满，说明当前任务量已经非常大，仅靠核心线程池内的线程数量已无法处理。线程池会判断最大线程池是否已满，如果没满则创建更多线程，从等待队列首部取得任务并执行。</p><h3 id="拒绝策略" tabindex="-1">拒绝策略 <a class="header-anchor" href="#拒绝策略" aria-label="Permalink to &quot;拒绝策略&quot;">​</a></h3><p><strong>(RejectedExecutionHandler) 线程池拒绝过量任务的方式。</strong></p><p>如果最大线程池已满，表示当前服务器已无法处理这么多任务。任务会按照既定的拒绝策略被处理。</p><ul><li>CallerRunsPolicy // 在调用者线程执行。</li><li>AbortPolicy // 直接抛出 RejectedExecutionException 异常。</li><li>DiscardPolicy // （常用）任务直接丢弃，不做任何处理。</li><li>DiscardOldestPolicy // 丢弃队列里最旧的那个任务，再尝试执行当前任务。</li></ul><hr><h2 id="threadpoolexecutor-类" tabindex="-1">ThreadPoolExecutor 类 <a class="header-anchor" href="#threadpoolexecutor-类" aria-label="Permalink to &quot;ThreadPoolExecutor 类&quot;">​</a></h2><p>实现了 ExecutorService 接口，是 java 开发常用的线程池类。位于 java.util.concurrent 包内，使用时需要进行导入。</p><h3 id="创建线程池" tabindex="-1">创建线程池 <a class="header-anchor" href="#创建线程池" aria-label="Permalink to &quot;创建线程池&quot;">​</a></h3><ol><li>ThreadPoolExecutor 类在创建线程池时需要输入以下参数：</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;                                                </span><span style="color:#7B7F8B;">// 核心线程池大小</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> maximumPoolSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">;                                             </span><span style="color:#7B7F8B;">// 最大线程池大小</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> keepAliveTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;                                             </span><span style="color:#7B7F8B;">// 空闲线程多久被销毁，0 表示永远不会</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> TimeUnit.SECONDS;                                    </span><span style="color:#7B7F8B;">// keepAliveTime 的单位</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BlockingQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt; workQueue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayBlockingQueue</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);     </span><span style="color:#7B7F8B;">// 任务队列</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ThreadFactory</span><span style="color:#F6F6F4;"> threadFactory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NameTreadFactory</span><span style="color:#F6F6F4;">();                </span><span style="color:#7B7F8B;">// 线程工厂接口，一般默认。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">RejectedExecutionHandler</span><span style="color:#F6F6F4;"> handler </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyIgnorePolicy</span><span style="color:#F6F6F4;">();             </span><span style="color:#7B7F8B;">// 拒绝策略，一般默认。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ThreadPoolExecutor</span><span style="color:#F6F6F4;"> service </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(corePoolSize, maximumPoolSize, keepAliveTime, </span></span>
<span class="line"><span style="color:#F6F6F4;">unit, workQueue, threadFactory, handler);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;                                                </span><span style="color:#6A737D;">// 核心线程池大小</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maximumPoolSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">;                                             </span><span style="color:#6A737D;">// 最大线程池大小</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAliveTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;                                             </span><span style="color:#6A737D;">// 空闲线程多久被销毁，0 表示永远不会</span></span>
<span class="line"><span style="color:#24292E;">TimeUnit unit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.SECONDS;                                    </span><span style="color:#6A737D;">// keepAliveTime 的单位</span></span>
<span class="line"><span style="color:#24292E;">BlockingQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt; workQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// 任务队列</span></span>
<span class="line"><span style="color:#24292E;">ThreadFactory threadFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NameTreadFactory</span><span style="color:#24292E;">();                </span><span style="color:#6A737D;">// 线程工厂接口，一般默认。</span></span>
<span class="line"><span style="color:#24292E;">RejectedExecutionHandler handler </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyIgnorePolicy</span><span style="color:#24292E;">();             </span><span style="color:#6A737D;">// 拒绝策略，一般默认。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ThreadPoolExecutor service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(corePoolSize, maximumPoolSize, keepAliveTime, </span></span>
<span class="line"><span style="color:#24292E;">unit, workQueue, threadFactory, handler);</span></span></code></pre></div><ol start="2"><li>ThreadPoolExecutor 类还可以重写以下方法（默认为空实现）：</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> service </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, TimeUnit.SECONDS, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayBlockingQueue</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 任务执行前被调用</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">beforeExecute</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">t</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">r</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">beforeExecute is called</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 任务执行后被调用</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">afterExecute</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">r</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">t</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">afterExecute is called</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 线程池结束后被调用</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">terminated</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">terminated is called</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ExecutorService service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, TimeUnit.SECONDS, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayBlockingQueue&lt;&gt;(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 任务执行前被调用</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeExecute</span><span style="color:#24292E;">(Thread </span><span style="color:#E36209;">t</span><span style="color:#24292E;">, Runnable </span><span style="color:#E36209;">r</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;beforeExecute is called&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 任务执行后被调用</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterExecute</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">r</span><span style="color:#24292E;">, Throwable </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;afterExecute is called&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 线程池结束后被调用</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">terminated</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;terminated is called&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="获取线程池信息" tabindex="-1">获取线程池信息 <a class="header-anchor" href="#获取线程池信息" aria-label="Permalink to &quot;获取线程池信息&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">getTaskCount</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 获取已经执行或正在执行的任务数</span></span>
<span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">getCompletedTaskCount</span><span style="color:#F6F6F4;">();        </span><span style="color:#7B7F8B;">// 获取已经执行的任务数</span></span>
<span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">getLargestPoolSize</span><span style="color:#F6F6F4;">();           </span><span style="color:#7B7F8B;">// 获取线程池曾经创建过的最大线程数</span></span>
<span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">getPoolSize</span><span style="color:#F6F6F4;">();                  </span><span style="color:#7B7F8B;">// 获取线程池线程数</span></span>
<span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">getActiveCount</span><span style="color:#F6F6F4;">();               </span><span style="color:#7B7F8B;">// 获取活跃线程数（正在执行任务的线程数）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">getTaskCount</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 获取已经执行或正在执行的任务数</span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">getCompletedTaskCount</span><span style="color:#24292E;">();        </span><span style="color:#6A737D;">// 获取已经执行的任务数</span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">getLargestPoolSize</span><span style="color:#24292E;">();           </span><span style="color:#6A737D;">// 获取线程池曾经创建过的最大线程数</span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">getPoolSize</span><span style="color:#24292E;">();                  </span><span style="color:#6A737D;">// 获取线程池线程数</span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">getActiveCount</span><span style="color:#24292E;">();               </span><span style="color:#6A737D;">// 获取活跃线程数（正在执行任务的线程数）</span></span></code></pre></div><h3 id="提交任务" tabindex="-1">提交任务 <a class="header-anchor" href="#提交任务" aria-label="Permalink to &quot;提交任务&quot;">​</a></h3><p>可以向线程池提交的任务有两种：Runnable 接口和 Callable 接口。</p><h4 id="runnable-接口" tabindex="-1">Runnable 接口 <a class="header-anchor" href="#runnable-接口" aria-label="Permalink to &quot;Runnable 接口&quot;">​</a></h4><p>内部定义了 run 方法，没有返回值，不允许抛出异常。通过 execute 方法向线程池提交。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Runnable</span><span style="color:#F6F6F4;">(){             </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">System.out.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">new thread</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">)</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">(){             </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new thread&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h4 id="callable-接口" tabindex="-1">Callable 接口 <a class="header-anchor" href="#callable-接口" aria-label="Permalink to &quot;Callable 接口&quot;">​</a></h4><p>内部定义了 call 方法，允许有返回值，允许抛出异常。通过 submit 方法向线程池提交，返回一个 Future 对象。</p><p>可以通过调用 Future 对象的 get 方法获得数据，在返回结果前 get 方法会阻塞。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;Integer&gt; f </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> service.</span><span style="color:#62E884;">submit</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Callable</span><span style="color:#F6F6F4;">(){            </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">System.out.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">new thread</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">)</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(f.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Future&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; f </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Callable</span><span style="color:#24292E;">(){            </span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new thread&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(f.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="关闭线程池" tabindex="-1">关闭线程池 <a class="header-anchor" href="#关闭线程池" aria-label="Permalink to &quot;关闭线程池&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();      </span><span style="color:#7B7F8B;">// 线程池不再接受新的任务，线程池中已有任务执行完成后终止。</span></span>
<span class="line"><span style="color:#F6F6F4;">service.</span><span style="color:#62E884;">shutdownNow</span><span style="color:#F6F6F4;">();   </span><span style="color:#7B7F8B;">// 线程池不再接受新的任务并对所有线程执行 interrupt 操作，清空队列并终止。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> service.</span><span style="color:#62E884;">isShutdown</span><span style="color:#F6F6F4;">();      </span><span style="color:#7B7F8B;">// 返回线程池是否关闭：不再接受新任务。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> service.</span><span style="color:#62E884;">isTerminated</span><span style="color:#F6F6F4;">();    </span><span style="color:#7B7F8B;">// 返回线程池是否终止</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();      </span><span style="color:#6A737D;">// 线程池不再接受新的任务，线程池中已有任务执行完成后终止。</span></span>
<span class="line"><span style="color:#24292E;">service.</span><span style="color:#6F42C1;">shutdownNow</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// 线程池不再接受新的任务并对所有线程执行 interrupt 操作，清空队列并终止。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">isShutdown</span><span style="color:#24292E;">();      </span><span style="color:#6A737D;">// 返回线程池是否关闭：不再接受新任务。</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> service.</span><span style="color:#6F42C1;">isTerminated</span><span style="color:#24292E;">();    </span><span style="color:#6A737D;">// 返回线程池是否终止</span></span></code></pre></div><p><strong>ThreadPoolExecutor 类示例</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadPool</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> pool;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">( </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;"> )</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//自定义线程工厂</span></span>
<span class="line"><span style="color:#F6F6F4;">        pool </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">, TimeUnit.MILLISECONDS, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayBlockingQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt;(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadFactory</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newThread</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">r</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">线程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">r.</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">+</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">创建</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//线程命名</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> th </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Thread</span><span style="color:#F6F6F4;">(r,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">threadPool</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">r.</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> th;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> ThreadPoolExecutor.</span><span style="color:#62E884;">CallerRunsPolicy</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;i</span><span style="color:#F286C4;">&lt;</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            pool.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadTask</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }    </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadTask</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;">{    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//输出执行线程的名称</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ThreadName:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPool</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExecutorService pool;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">( </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//自定义线程工厂</span></span>
<span class="line"><span style="color:#24292E;">        pool </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, TimeUnit.MILLISECONDS, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayBlockingQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Thread </span><span style="color:#6F42C1;">newThread</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">r</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;线程&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">r.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;创建&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//线程命名</span></span>
<span class="line"><span style="color:#24292E;">                Thread th </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;">(r,</span><span style="color:#032F62;">&quot;threadPool&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">r.</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> th;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadPoolExecutor.</span><span style="color:#6F42C1;">CallerRunsPolicy</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">          </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">&lt;</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            pool.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTask</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadTask</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">{    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//输出执行线程的名称</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ThreadName:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="executors-类-不常用" tabindex="-1"><s>Executors 类（不常用）</s> <a class="header-anchor" href="#executors-类-不常用" aria-label="Permalink to &quot;~~Executors 类（不常用）~~&quot;">​</a></h2><p>继承 ThreadPoolExecutor 类的线程池工厂类：提供 4 种工厂方法创建线程池。但该方法既不灵活也不安全，实际开发中很少使用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 单个线程的线程池</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> service </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newSingleThreadExecutor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 指定数量的线程池</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> service </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">); </span></span>
<span class="line"><span style="color:#7B7F8B;">// 大小不限的线程池，60s 不使用会自动回收空闲线程。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> service </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newCacheThreadExecutor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">// 大小不限的线程池，可定时执行任务。</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> service </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newScheduleThreadExecutor</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 单个线程的线程池</span></span>
<span class="line"><span style="color:#24292E;">ExecutorService service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newSingleThreadExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 指定数量的线程池</span></span>
<span class="line"><span style="color:#24292E;">ExecutorService service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#6A737D;">// 大小不限的线程池，60s 不使用会自动回收空闲线程。</span></span>
<span class="line"><span style="color:#24292E;">ExecutorService service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newCacheThreadExecutor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 大小不限的线程池，可定时执行任务。</span></span>
<span class="line"><span style="color:#24292E;">ExecutorService service </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newScheduleThreadExecutor</span><span style="color:#24292E;">();</span></span></code></pre></div><p><strong>Executors 类示例</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadPoolTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> executor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            executor.</span><span style="color:#62E884;">submit</span><span style="color:#F6F6F4;">(() </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">thread id is: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getId</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    Thread.</span><span style="color:#62E884;">sleep</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1000L</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            });</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            executor.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;thread id is: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,49),e=[p];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{d as __pageData,h as default};
