import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/utils-20230330093633.8bcf3317.png",o="/docs/assets/utils-20230330095801.4229815d.png",e="/docs/assets/utils-20230330100334.f3e61e64.png",t="/docs/assets/utils-c58920ac-cf04-4d95-ad29-90339a086569.c57e9320.jpg",c="/docs/assets/utils-629ecd75-259b-46aa-b1dd-82606cfc92ee.8a9bed58.jpg",r="/docs/assets/utils-0a4ecb9c-b9d2-4090-a7b7-c626a0672b94.141fb843.jpg",m=JSON.parse('{"title":"其他常用Java工具类：IPUtil、CollectionUtils、MDC、ClassUtils、BeanUtils、ReflectionUtils","description":"描述：本文详细介绍了Java编程中常用的一些工具类，如IpUtil、MDC、ClassUtils、BeanUtils、ReflectionUtils等。通过具体的代码示例，阐述了这些工具类在实际应用中的优势和使用方法。掌握这些实用的Java工具类，让您在Java编程中轻松应对各种开发任务，提高开发效率。","frontmatter":{"title":"其他常用Java工具类：IPUtil、CollectionUtils、MDC、ClassUtils、BeanUtils、ReflectionUtils","shortTitle":"其他常用工具类","category":["Java核心"],"tag":["常用工具类"],"description":"描述：本文详细介绍了Java编程中常用的一些工具类，如IpUtil、MDC、ClassUtils、BeanUtils、ReflectionUtils等。通过具体的代码示例，阐述了这些工具类在实际应用中的优势和使用方法。掌握这些实用的Java工具类，让您在Java编程中轻松应对各种开发任务，提高开发效率。","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java进阶之路,Java入门,教程,java,工具类,轮子,java 工具类,java IPUtil,java CollectionUtils"}]]},"headers":[],"relativePath":"backend/tobetter/common-tool/utils.md","filePath":"backend/tobetter/common-tool/utils.md"}'),F={name:"backend/tobetter/common-tool/utils.md"},y=l(`<h1 id="_9-8-其他常用工具类" tabindex="-1">9.8 其他常用工具类 <a class="header-anchor" href="#_9-8-其他常用工具类" aria-label="Permalink to &quot;9.8 其他常用工具类&quot;">​</a></h1><p>除了我们前面提到的 Java 原生工具类，比如说 <a href="https://tobebetterjavaer.com/common-tool/arrays.html" target="_blank" rel="noreferrer">Arrays</a>、<a href="https://tobebetterjavaer.com/common-tool/Objects.html" target="_blank" rel="noreferrer">Objects</a>、<a href="https://tobebetterjavaer.com/common-tool/collections.html" target="_blank" rel="noreferrer">Collections</a>、<a href="https://tobebetterjavaer.com/common-tool/scanner.html" target="_blank" rel="noreferrer">Scanner</a> 等，还有一些第三方的工具类，比如说 <a href="https://tobebetterjavaer.com/common-tool/hutool.html" target="_blank" rel="noreferrer">Hutool</a>、<a href="https://tobebetterjavaer.com/common-tool/guava.html" target="_blank" rel="noreferrer">Guava</a> 等，以及我们今天介绍的 IpUtil、CollectionUtils、StringUtils、MDC、ClassUtils、BeanUtils、ReflectionUtils 等等，在很大程度上能够提高我们的生产效率。</p><p>当然了，如果能好好看一下它们的源码，对技术功底的提升，也是有很大帮助的。</p><h3 id="iputil-获取本机-ip" tabindex="-1">IpUtil：获取本机 Ip <a class="header-anchor" href="#iputil-获取本机-ip" aria-label="Permalink to &quot;IpUtil：获取本机 Ip&quot;">​</a></h3><p>获取本机 IP 算是比较常见的一个需求场景了，比如业务报警，可能就会带上出问题的机器 IP，方便直接上去看日志定位问题，那么问题来了，如何获取机器 IP 呢？</p><h4 id="_1-基本方法" tabindex="-1">1. 基本方法 <a class="header-anchor" href="#_1-基本方法" aria-label="Permalink to &quot;1. 基本方法&quot;">​</a></h4><p>如何获取机器 IP？如果了解 InetAddress 这个工具类，就很容易写出一个简单的工具类，如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getLocalIP</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">UnknownHostException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getLocalIP</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (UnknownHostException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的实现有问题么？</p><p>当然没问题，拿我本机和阿里服务器执行一下，并没有问题如实的输出了预期的 IP</p><p>本机执行后截图如下：</p><img src="`+p+'"><p>阿里云机器执行后截图如下：</p><img src="'+o+`"><h4 id="_2-进阶版" tabindex="-1">2. 进阶版 <a class="header-anchor" href="#_2-进阶版" aria-label="Permalink to &quot;2. 进阶版&quot;">​</a></h4><p>做一点简单的改动，获取 IPV4 的地址，源码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getLocalIpByNetcard</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 枚举所有的网络接口</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Enumeration</span><span style="color:#F6F6F4;">&lt;NetworkInterface&gt; e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> NetworkInterface.</span><span style="color:#62E884;">getNetworkInterfaces</span><span style="color:#F6F6F4;">(); e.</span><span style="color:#62E884;">hasMoreElements</span><span style="color:#F6F6F4;">(); ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 获取当前网络接口</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">NetworkInterface</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">nextElement</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 遍历当前网络接口的所有地址</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InterfaceAddress</span><span style="color:#F6F6F4;"> address </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> item.</span><span style="color:#62E884;">getInterfaceAddresses</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 忽略回环地址和未启用的网络接口</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (item.</span><span style="color:#62E884;">isLoopback</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">item.</span><span style="color:#62E884;">isUp</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">continue</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 如果当前地址是 IPv4 地址，则返回其字符串表示</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (address.</span><span style="color:#62E884;">getAddress</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> Inet4Address) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">Inet4Address</span><span style="color:#F6F6F4;"> inet4Address </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Inet4Address) address.</span><span style="color:#62E884;">getAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> inet4Address.</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果没有找到任何 IPv4 地址，则返回本地主机地址</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">SocketException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">UnknownHostException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 抛出运行时异常</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getLocalIpByNetcard</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 枚举所有的网络接口</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Enumeration&lt;</span><span style="color:#D73A49;">NetworkInterface</span><span style="color:#24292E;">&gt; e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NetworkInterface.</span><span style="color:#6F42C1;">getNetworkInterfaces</span><span style="color:#24292E;">(); e.</span><span style="color:#6F42C1;">hasMoreElements</span><span style="color:#24292E;">(); ) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 获取当前网络接口</span></span>
<span class="line"><span style="color:#24292E;">            NetworkInterface item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">nextElement</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 遍历当前网络接口的所有地址</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (InterfaceAddress address </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> item.</span><span style="color:#6F42C1;">getInterfaceAddresses</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 忽略回环地址和未启用的网络接口</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item.</span><span style="color:#6F42C1;">isLoopback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">item.</span><span style="color:#6F42C1;">isUp</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果当前地址是 IPv4 地址，则返回其字符串表示</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (address.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Inet4Address) {</span></span>
<span class="line"><span style="color:#24292E;">                    Inet4Address inet4Address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Inet4Address) address.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inet4Address.</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果没有找到任何 IPv4 地址，则返回本地主机地址</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SocketException | UnknownHostException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 抛出运行时异常</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要注意的是，这段代码只返回本机的 IPv4 地址，并且只返回第一个符合条件的地址。如果本机有多个网络接口或者每个接口有多个地址，则可能无法返回预期的地址。此外，如果找不到任何 IPv4 地址，则会返回本地主机地址。</p><p>再次测试，输出如下</p><img src="`+e+`"><h4 id="_3-完整工具类" tabindex="-1">3. 完整工具类 <a class="header-anchor" href="#_3-完整工具类" aria-label="Permalink to &quot;3. 完整工具类&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.net.</span><span style="color:#BF9EEE;font-style:italic;">*</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.util.Enumeration;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">IPUtil</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> DEFAULT_IP </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">127.0.0.1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 直接根据第一个网卡地址作为其内网ipv4地址，避免返回 127.0.0.1</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 第一个符合条件的内网 IPv4 地址</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getLocalIpByNetcard</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 枚举所有的网络接口</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Enumeration</span><span style="color:#F6F6F4;">&lt;NetworkInterface&gt; e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> NetworkInterface.</span><span style="color:#62E884;">getNetworkInterfaces</span><span style="color:#F6F6F4;">(); e.</span><span style="color:#62E884;">hasMoreElements</span><span style="color:#F6F6F4;">(); ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 获取当前网络接口</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">NetworkInterface</span><span style="color:#F6F6F4;"> item </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">nextElement</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 遍历当前网络接口的所有地址</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InterfaceAddress</span><span style="color:#F6F6F4;"> address </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> item.</span><span style="color:#62E884;">getInterfaceAddresses</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 忽略回环地址和未启用的网络接口</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (item.</span><span style="color:#62E884;">isLoopback</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">item.</span><span style="color:#62E884;">isUp</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">continue</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 如果当前地址是 IPv4 地址，则返回其字符串表示</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (address.</span><span style="color:#62E884;">getAddress</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> Inet4Address) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">Inet4Address</span><span style="color:#F6F6F4;"> inet4Address </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Inet4Address) address.</span><span style="color:#62E884;">getAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> inet4Address.</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 如果没有找到符合条件的地址，则返回本地主机地址</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">SocketException</span><span style="color:#F6F6F4;"> | </span><span style="color:#97E1F1;font-style:italic;">UnknownHostException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">    /**</span></span>
<span class="line"><span style="color:#7B7F8B;">     * 获取本地主机地址</span></span>
<span class="line"><span style="color:#7B7F8B;">     *</span></span>
<span class="line"><span style="color:#7B7F8B;">     * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> 本地主机地址</span></span>
<span class="line"><span style="color:#7B7F8B;">     */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getLocalIP</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> InetAddress.</span><span style="color:#62E884;">getLocalHost</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getHostAddress</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">UnknownHostException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.net.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Enumeration;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IPUtil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String DEFAULT_IP </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127.0.0.1&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 直接根据第一个网卡地址作为其内网ipv4地址，避免返回 127.0.0.1</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 第一个符合条件的内网 IPv4 地址</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getLocalIpByNetcard</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 枚举所有的网络接口</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Enumeration&lt;</span><span style="color:#D73A49;">NetworkInterface</span><span style="color:#24292E;">&gt; e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> NetworkInterface.</span><span style="color:#6F42C1;">getNetworkInterfaces</span><span style="color:#24292E;">(); e.</span><span style="color:#6F42C1;">hasMoreElements</span><span style="color:#24292E;">(); ) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 获取当前网络接口</span></span>
<span class="line"><span style="color:#24292E;">                NetworkInterface item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">nextElement</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 遍历当前网络接口的所有地址</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (InterfaceAddress address </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> item.</span><span style="color:#6F42C1;">getInterfaceAddresses</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 忽略回环地址和未启用的网络接口</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item.</span><span style="color:#6F42C1;">isLoopback</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">item.</span><span style="color:#6F42C1;">isUp</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 如果当前地址是 IPv4 地址，则返回其字符串表示</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (address.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> Inet4Address) {</span></span>
<span class="line"><span style="color:#24292E;">                        Inet4Address inet4Address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Inet4Address) address.</span><span style="color:#6F42C1;">getAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inet4Address.</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果没有找到符合条件的地址，则返回本地主机地址</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (SocketException | UnknownHostException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 获取本地主机地址</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> 本地主机地址</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getLocalIP</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> InetAddress.</span><span style="color:#6F42C1;">getLocalHost</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getHostAddress</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (UnknownHostException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>IPUtil 类中定义了两个方法，分别是 <code>getLocalIpByNetcard()</code> 和 <code>getLocalIP()</code>。前者是获取本机的内网 IPv4 地址，避免了返回 127.0.0.1 的问题。后者是获取本地主机地址，如果本机有多个 IP 地址，则可能返回其中的任意一个。</p><h3 id="mdc-一个线程安全的参数传递工具类" tabindex="-1">MDC：一个线程安全的参数传递工具类 <a class="header-anchor" href="#mdc-一个线程安全的参数传递工具类" aria-label="Permalink to &quot;MDC：一个线程安全的参数传递工具类&quot;">​</a></h3><p><code>MDC</code> 是 <a href="https://tobebetterjavaer.com/gongju/slf4j.html" target="_blank" rel="noreferrer"><code>org.slf4j</code></a> 包下的一个类，它的全称是 Mapped Diagnostic Context，我们可以认为它是一个线程安全的存放诊断日志的容器。</p><p>MDC 的底层是用了 <a href="https://tobebetterjavaer.com/thread/ThreadLocal.html" target="_blank" rel="noreferrer"><code>ThreadLocal</code></a> 来保存数据的。</p><p>我们可以用它传递参数。</p><p>例如现在有这样一种场景：我们使用<code>RestTemplate</code>调用远程接口时，有时需要在<code>header</code>中传递信息，比如：traceId，source 等，便于在查询日志时能够串联一次完整的请求链路，快速定位问题。</p><p>这种业务场景就能通过<code>ClientHttpRequestInterceptor</code>接口实现，具体做法如下：</p><p>第一步，定义一个 LogFilter 拦截所有接口请求，在 MDC 中设置 traceId：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LogFilter</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Filter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">init</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FilterConfig</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">filterConfig</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">response</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">FilterChain</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">chain</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        MdcUtil.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(UUID.</span><span style="color:#62E884;">randomUUID</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">记录请求日志</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        chain.</span><span style="color:#62E884;">doFilter</span><span style="color:#F6F6F4;">(request, response);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">记录响应日志</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">destroy</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogFilter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Filter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(FilterConfig </span><span style="color:#E36209;">filterConfig</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(ServletRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, ServletResponse </span><span style="color:#E36209;">response</span><span style="color:#24292E;">, FilterChain </span><span style="color:#E36209;">chain</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#24292E;">        MdcUtil.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(UUID.</span><span style="color:#6F42C1;">randomUUID</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;记录请求日志&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        chain.</span><span style="color:#6F42C1;">doFilter</span><span style="color:#24292E;">(request, response);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;记录响应日志&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第二步，实现<code>ClientHttpRequestInterceptor</code>接口，MDC 中获取当前请求的 traceId，然后设置到 header 中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RestTemplateInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ClientHttpRequestInterceptor</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ClientHttpResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">intercept</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">request</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">body</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ClientHttpRequestExecution</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">execution</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">getHeaders</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">traceId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, MdcUtil.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> execution.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(request, body);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplateInterceptor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClientHttpRequestInterceptor</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ClientHttpResponse </span><span style="color:#6F42C1;">intercept</span><span style="color:#24292E;">(HttpRequest </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">body</span><span style="color:#24292E;">, ClientHttpRequestExecution </span><span style="color:#E36209;">execution</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">getHeaders</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;traceId&quot;</span><span style="color:#24292E;">, MdcUtil.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> execution.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(request, body);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>第三步，定义配置类，配置上面定义的<code>RestTemplateInterceptor</code>类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Configuration</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RestTemplateConfiguration</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RestTemplate</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">restTemplate</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RestTemplate</span><span style="color:#F6F6F4;"> restTemplate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RestTemplate</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        restTemplate.</span><span style="color:#62E884;">setInterceptors</span><span style="color:#F6F6F4;">(Collections.</span><span style="color:#62E884;">singletonList</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">restTemplateInterceptor</span><span style="color:#F6F6F4;">()));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> restTemplate;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Bean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">RestTemplateInterceptor</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">restTemplateInterceptor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RestTemplateInterceptor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplateConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RestTemplate </span><span style="color:#6F42C1;">restTemplate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        RestTemplate restTemplate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        restTemplate.</span><span style="color:#6F42C1;">setInterceptors</span><span style="color:#24292E;">(Collections.</span><span style="color:#6F42C1;">singletonList</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">restTemplateInterceptor</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> restTemplate;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RestTemplateInterceptor </span><span style="color:#6F42C1;">restTemplateInterceptor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RestTemplateInterceptor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>其中 MdcUtil 其实是利用 MDC 工具在 ThreadLocal 中存储和获取 traceId</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MdcUtil</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> TRACE_ID </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">TRACE_ID</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> MDC.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(TRACE_ID);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        MDC.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(TRACE_ID, value);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MdcUtil</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> String TRACE_ID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;TRACE_ID&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> MDC.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(TRACE_ID);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        MDC.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(TRACE_ID, value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然，这个例子中没有演示 MdcUtil 类的 add 方法具体调的地方，我们可以在 filter 中执行接口方法之前，生成 traceId，调用 MdcUtil 类的 add 方法添加到 MDC 中，然后在同一个请求的其他地方就能通过 MdcUtil 类的 get 方法获取到该 traceId。</p><p>能使用 MDC 保存 traceId 等参数的根本原因是，用户请求到应用服务器，Tomcat 会从线程池中分配一个线程去处理该请求。</p><p>那么该请求的整个过程中，保存到 MDC 的 ThreadLocal 中的参数，也是该线程独享的，所以不会有线程安全问题。</p><h3 id="classutils" tabindex="-1">ClassUtils <a class="header-anchor" href="#classutils" aria-label="Permalink to &quot;ClassUtils&quot;">​</a></h3><p>spring 的<code>org.springframework.util</code>包下的<code>ClassUtils</code>类，它里面有很多让我们惊喜的功能。</p><p>它里面包含了类和对象相关的很多非常实用的方法。</p><h4 id="获取对象的所有接口" tabindex="-1">获取对象的所有接口 <a class="header-anchor" href="#获取对象的所有接口" aria-label="Permalink to &quot;获取对象的所有接口&quot;">​</a></h4><p>如果你想获取某个对象的所有接口，可以使用 ClassUtils 的<code>getAllInterfaces</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt;[] allInterfaces </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ClassUtils.</span><span style="color:#62E884;">getAllInterfaces</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">User</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;[] allInterfaces </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassUtils.</span><span style="color:#6F42C1;">getAllInterfaces</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">());</span></span></code></pre></div><h4 id="获取某个类的包名" tabindex="-1">获取某个类的包名 <a class="header-anchor" href="#获取某个类的包名" aria-label="Permalink to &quot;获取某个类的包名&quot;">​</a></h4><p>如果你想获取某个类的包名，可以使用 ClassUtils 的<code>getPackageName</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> packageName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ClassUtils.</span><span style="color:#62E884;">getPackageName</span><span style="color:#F6F6F4;">(User.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(packageName);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String packageName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ClassUtils.</span><span style="color:#6F42C1;">getPackageName</span><span style="color:#24292E;">(User.class);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(packageName);</span></span></code></pre></div><h4 id="判断某个类是否内部类" tabindex="-1">判断某个类是否内部类 <a class="header-anchor" href="#判断某个类是否内部类" aria-label="Permalink to &quot;判断某个类是否内部类&quot;">​</a></h4><p>如果你想判断某个类是否内部类，可以使用 ClassUtils 的<code>isInnerClass</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ClassUtils.</span><span style="color:#62E884;">isInnerClass</span><span style="color:#F6F6F4;">(User.class));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ClassUtils.</span><span style="color:#6F42C1;">isInnerClass</span><span style="color:#24292E;">(User.class));</span></span></code></pre></div><h4 id="判断对象是否代理对象" tabindex="-1">判断对象是否代理对象 <a class="header-anchor" href="#判断对象是否代理对象" aria-label="Permalink to &quot;判断对象是否代理对象&quot;">​</a></h4><p>如果你想判断对象是否代理对象，可以使用 ClassUtils 的<code>isCglibProxy</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ClassUtils.</span><span style="color:#62E884;">isCglibProxy</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">User</span><span style="color:#F6F6F4;">()));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ClassUtils.</span><span style="color:#6F42C1;">isCglibProxy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">()));</span></span></code></pre></div><p>ClassUtils 还有很多有用的方法，等待着你去发掘。感兴趣的小伙伴，可以看看下面的内容：</p><img src="`+t+`"><h3 id="beanutils" tabindex="-1">BeanUtils <a class="header-anchor" href="#beanutils" aria-label="Permalink to &quot;BeanUtils&quot;">​</a></h3><p>Spring 给我们提供了一个<code>JavaBean</code>的工具类，它在<code>org.springframework.beans</code>包下面，它的名字叫做：<code>BeanUtils</code>。</p><p>让我们一起看看这个工具可以带给我们哪些惊喜。</p><h4 id="拷贝对象的属性" tabindex="-1">拷贝对象的属性 <a class="header-anchor" href="#拷贝对象的属性" aria-label="Permalink to &quot;拷贝对象的属性&quot;">​</a></h4><p>曾几何时，你有没有这样的需求：把某个对象中的所有属性，都拷贝到另外一个对象中。这时就能使用 BeanUtils 的<code>copyProperties</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">User</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">user1.</span><span style="color:#62E884;">setId</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">user1.</span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">user1.</span><span style="color:#62E884;">setAddress</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">中国</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">User</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">BeanUtils.</span><span style="color:#62E884;">copyProperties</span><span style="color:#F6F6F4;">(user1, user2);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(user2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">User user1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">user1.</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">user1.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">user1.</span><span style="color:#6F42C1;">setAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;中国&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">User user2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">BeanUtils.</span><span style="color:#6F42C1;">copyProperties</span><span style="color:#24292E;">(user1, user2);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user2);</span></span></code></pre></div><h4 id="实例化某个类" tabindex="-1">实例化某个类 <a class="header-anchor" href="#实例化某个类" aria-label="Permalink to &quot;实例化某个类&quot;">​</a></h4><p>如果你想通过反射实例化一个类的对象，可以使用 BeanUtils 的<code>instantiateClass</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">User</span><span style="color:#F6F6F4;"> user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> BeanUtils.</span><span style="color:#62E884;">instantiateClass</span><span style="color:#F6F6F4;">(User.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(user);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanUtils.</span><span style="color:#6F42C1;">instantiateClass</span><span style="color:#24292E;">(User.class);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(user);</span></span></code></pre></div><h4 id="获取指定类的指定方法" tabindex="-1">获取指定类的指定方法 <a class="header-anchor" href="#获取指定类的指定方法" aria-label="Permalink to &quot;获取指定类的指定方法&quot;">​</a></h4><p>如果你想获取某个类的指定方法，可以使用 BeanUtils 的<code>findDeclaredMethod</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> declaredMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> BeanUtils.</span><span style="color:#62E884;">findDeclaredMethod</span><span style="color:#F6F6F4;">(User.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(declaredMethod.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method declaredMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanUtils.</span><span style="color:#6F42C1;">findDeclaredMethod</span><span style="color:#24292E;">(User.class, </span><span style="color:#032F62;">&quot;getId&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(declaredMethod.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre></div><h4 id="获取指定方法的参数" tabindex="-1">获取指定方法的参数 <a class="header-anchor" href="#获取指定方法的参数" aria-label="Permalink to &quot;获取指定方法的参数&quot;">​</a></h4><p>如果你想获取某个方法的参数，可以使用 BeanUtils 的<code>findPropertyForMethod</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> declaredMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> BeanUtils.</span><span style="color:#62E884;">findDeclaredMethod</span><span style="color:#F6F6F4;">(User.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">PropertyDescriptor</span><span style="color:#F6F6F4;"> propertyForMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> BeanUtils.</span><span style="color:#62E884;">findPropertyForMethod</span><span style="color:#F6F6F4;">(declaredMethod);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(propertyForMethod.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method declaredMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanUtils.</span><span style="color:#6F42C1;">findDeclaredMethod</span><span style="color:#24292E;">(User.class, </span><span style="color:#032F62;">&quot;getId&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">PropertyDescriptor propertyForMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BeanUtils.</span><span style="color:#6F42C1;">findPropertyForMethod</span><span style="color:#24292E;">(declaredMethod);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(propertyForMethod.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span></code></pre></div><p>如果你对 BeanUtils 比较感兴趣，可以看看下面内容：</p><img src="`+c+`"><h3 id="reflectionutils" tabindex="-1">ReflectionUtils <a class="header-anchor" href="#reflectionutils" aria-label="Permalink to &quot;ReflectionUtils&quot;">​</a></h3><p>有时候，我们需要在项目中使用<code>反射</code>功能，如果使用最原始的方法来开发，代码量会非常多，而且很麻烦，它需要处理一大堆异常以及访问权限等问题。</p><p>好消息是 Spring 给我们提供了一个<code>ReflectionUtils</code>工具，它在<code>org.springframework.util</code>包下面。</p><h4 id="获取方法" tabindex="-1">获取方法 <a class="header-anchor" href="#获取方法" aria-label="Permalink to &quot;获取方法&quot;">​</a></h4><p>如果你想获取某个类的某个方法，可以使用 ReflectionUtils 类的<code>findMethod</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> method </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectionUtils.</span><span style="color:#62E884;">findMethod</span><span style="color:#F6F6F4;">(User.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectionUtils.</span><span style="color:#6F42C1;">findMethod</span><span style="color:#24292E;">(User.class, </span><span style="color:#032F62;">&quot;getId&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="获取字段" tabindex="-1">获取字段 <a class="header-anchor" href="#获取字段" aria-label="Permalink to &quot;获取字段&quot;">​</a></h4><p>如果你想获取某个类的某个字段，可以使用 ReflectionUtils 类的<code>findField</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> field </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectionUtils.</span><span style="color:#62E884;">findField</span><span style="color:#F6F6F4;">(User.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Field field </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectionUtils.</span><span style="color:#6F42C1;">findField</span><span style="color:#24292E;">(User.class, </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="执行方法" tabindex="-1">执行方法 <a class="header-anchor" href="#执行方法" aria-label="Permalink to &quot;执行方法&quot;">​</a></h4><p>如果你想通过反射调用某个方法，传递参数，可以使用 ReflectionUtils 类的<code>invokeMethod</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ReflectionUtils.</span><span style="color:#62E884;">invokeMethod</span><span style="color:#F6F6F4;">(method, springContextsUtil.</span><span style="color:#62E884;">getBean</span><span style="color:#F6F6F4;">(beanName), param);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ReflectionUtils.</span><span style="color:#6F42C1;">invokeMethod</span><span style="color:#24292E;">(method, springContextsUtil.</span><span style="color:#6F42C1;">getBean</span><span style="color:#24292E;">(beanName), param);</span></span></code></pre></div><h4 id="判断字段是否常量" tabindex="-1">判断字段是否常量 <a class="header-anchor" href="#判断字段是否常量" aria-label="Permalink to &quot;判断字段是否常量&quot;">​</a></h4><p>如果你想判断某个字段是否常量，可以使用 ReflectionUtils 类的<code>isPublicStaticFinal</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> field </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectionUtils.</span><span style="color:#62E884;">findField</span><span style="color:#F6F6F4;">(User.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ReflectionUtils.</span><span style="color:#62E884;">isPublicStaticFinal</span><span style="color:#F6F6F4;">(field));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Field field </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectionUtils.</span><span style="color:#6F42C1;">findField</span><span style="color:#24292E;">(User.class, </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ReflectionUtils.</span><span style="color:#6F42C1;">isPublicStaticFinal</span><span style="color:#24292E;">(field));</span></span></code></pre></div><h4 id="判断是否-equals-方法" tabindex="-1">判断是否 equals 方法 <a class="header-anchor" href="#判断是否-equals-方法" aria-label="Permalink to &quot;判断是否 equals 方法&quot;">​</a></h4><p>如果你想判断某个方法是否 equals 方法，可以使用 ReflectionUtils 类的<code>isEqualsMethod</code>方法。例如：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> method </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectionUtils.</span><span style="color:#62E884;">findMethod</span><span style="color:#F6F6F4;">(User.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getId</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ReflectionUtils.</span><span style="color:#62E884;">isEqualsMethod</span><span style="color:#F6F6F4;">(method));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectionUtils.</span><span style="color:#6F42C1;">findMethod</span><span style="color:#24292E;">(User.class, </span><span style="color:#032F62;">&quot;getId&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ReflectionUtils.</span><span style="color:#6F42C1;">isEqualsMethod</span><span style="color:#24292E;">(method));</span></span></code></pre></div><p>当然这个类还有不少有趣的方法，感兴趣的朋友，可以看看下面内容：</p><img src="`+r+'"><blockquote><p>参考链接：<a href="https://juejin.cn/post/7102418518599008286" target="_blank" rel="noreferrer">https://juejin.cn/post/7102418518599008286</a> 作者：苏三，编辑：沉默王二</p></blockquote><hr><p>最近整理了一份牛逼的学习资料，包括但不限于 Java 基础部分（JVM、Java 集合框架、多线程），还囊括了 <strong>数据库、计算机网络、算法与数据结构、设计模式、框架类 Spring、Netty、微服务（Dubbo，消息队列） 网关</strong> 等等等等……详情戳：<a href="https://tobebetterjavaer.com/pdf/programmer-111.html" target="_blank" rel="noreferrer">可以说是 2022 年全网最全的学习和找工作的 PDF 资源了</a></p>',97),i=[y];function d(E,u,h,C,g,f){return a(),n("div",null,i)}const A=s(F,[["render",d]]);export{m as __pageData,A as default};
