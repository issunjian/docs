import{_ as a,o as e,c as r,V as o}from"./chunks/framework.c6d8cbec.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-15.md","filePath":"interview/backend/java/java-15.md"}'),t={name:"interview/backend/java/java-15.md"},n=o('<h3 id="_1、thread-类中的-yield-方法有什么作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#1thread-%E7%B1%BB%E4%B8%AD%E7%9A%84-yield-%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">1、Thread 类中的 yield 方法有什么作用？</a> <a class="header-anchor" href="#_1、thread-类中的-yield-方法有什么作用" aria-label="Permalink to &quot;[1、Thread 类中的 yield 方法有什么作用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#1thread-类中的-yield-方法有什么作用)&quot;">​</a></h3><p>使当前线程从执行状态（运行状态）变为可执行态（就绪状态）。</p><p>当前线程到了就绪状态，那么接下来哪个线程会从就绪状态变成执行状态呢？可能是当前线程，也可能是其他线程，看系统的分配了。</p><h3 id="_2、如何在两个线程间共享数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#2%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">2、如何在两个线程间共享数据？</a> <a class="header-anchor" href="#_2、如何在两个线程间共享数据" aria-label="Permalink to &quot;[2、如何在两个线程间共享数据？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#2如何在两个线程间共享数据)&quot;">​</a></h3><p>在两个线程间共享变量即可实现共享。</p><p>一般来说，共享变量要求变量本身是线程安全的，然后在线程内使用的时候，如果有对共享变量的复合操作，那么也得保证复合操作的线程安全性。</p><h3 id="_3、在一个静态方法内调用一个非静态成员为什么是非法的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#3%E5%9C%A8%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%86%85%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AA%E9%9D%9E%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E9%9D%9E%E6%B3%95%E7%9A%84" target="_blank" rel="noreferrer">3、在一个静态方法内调用一个非静态成员为什么是非法的？</a> <a class="header-anchor" href="#_3、在一个静态方法内调用一个非静态成员为什么是非法的" aria-label="Permalink to &quot;[3、在一个静态方法内调用一个非静态成员为什么是非法的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#3在一个静态方法内调用一个非静态成员为什么是非法的)&quot;">​</a></h3><p>由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h3 id="_4、设计模式分类" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%86%E7%B1%BB" target="_blank" rel="noreferrer">4、设计模式分类</a> <a class="header-anchor" href="#_4、设计模式分类" aria-label="Permalink to &quot;[4、设计模式分类](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#4设计模式分类)&quot;">​</a></h3><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/047/42/89_1.png#alt=89%5C_1.png" alt=""></p><p><strong>1、</strong> 创建型模式，共五种：<strong>工厂方法模式、抽象工厂模式</strong>、<strong>单例模式</strong>、建造者模式、<strong>原型模式。</strong></p><p><strong>2、</strong> 结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p><strong>3、</strong> 行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><h3 id="_5、为什么wait和notify方法要在同步块中调用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#5%E4%B8%BA%E4%BB%80%E4%B9%88wait%E5%92%8Cnotify%E6%96%B9%E6%B3%95%E8%A6%81%E5%9C%A8%E5%90%8C%E6%AD%A5%E5%9D%97%E4%B8%AD%E8%B0%83%E7%94%A8" target="_blank" rel="noreferrer">5、为什么wait和notify方法要在同步块中调用？</a> <a class="header-anchor" href="#_5、为什么wait和notify方法要在同步块中调用" aria-label="Permalink to &quot;[5、为什么wait和notify方法要在同步块中调用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#5为什么wait和notify方法要在同步块中调用)&quot;">​</a></h3><p>Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。还有一个原因是为了避免wait和notify之间产生竞态条件。</p><h3 id="_6、接口与抽象类有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#6%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、接口与抽象类有什么区别？</a> <a class="header-anchor" href="#_6、接口与抽象类有什么区别" aria-label="Permalink to &quot;[6、接口与抽象类有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#6接口与抽象类有什么区别)&quot;">​</a></h3><p><strong>1、</strong> 抽象类有构造方法，接口没有构造方法</p><p><strong>2、</strong> 抽象类只能单继承，接口可以多继承</p><p><strong>3、</strong> 抽象类可以有普通方法，接口中的所有方法都是抽象方法</p><p><strong>4、</strong> 接口的属性都是public static final修饰的，而抽象的不是</p><h3 id="_7、我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#7%E6%88%91%E8%83%BD%E5%9C%A8%E4%B8%8D%E8%BF%9B%E8%A1%8C%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%86%E4%B8%80%E4%B8%AA-double-%E5%80%BC%E8%B5%8B%E5%80%BC%E7%BB%99-long-%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E9%87%8F%E5%90%97" target="_blank" rel="noreferrer">7、我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？</a> <a class="header-anchor" href="#_7、我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗" aria-label="Permalink to &quot;[7、我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#7我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗)&quot;">​</a></h3><p>不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。</p><h3 id="_8、说出几条-java-中方法重载的最佳实践" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#8%E8%AF%B4%E5%87%BA%E5%87%A0%E6%9D%A1-java-%E4%B8%AD%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5" target="_blank" rel="noreferrer">8、说出几条 Java 中方法重载的最佳实践？</a> <a class="header-anchor" href="#_8、说出几条-java-中方法重载的最佳实践" aria-label="Permalink to &quot;[8、说出几条 Java 中方法重载的最佳实践？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#8说出几条-java-中方法重载的最佳实践)&quot;">​</a></h3><p>下面有几条可以遵循的方法重载的最佳实践来避免造成自动装箱的混乱。</p><p>a）不要重载这样的方法：一个方法接收 int 参数，而另个方法接收 Integer 参数。</p><p>b）不要重载参数数量一致，而只是参数顺序不同的方法。</p><p>c）如果重载的方法参数个数多于 5 个，采用可变参数。</p><h3 id="_9、垃圾收集算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#9%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">9、垃圾收集算法</a> <a class="header-anchor" href="#_9、垃圾收集算法" aria-label="Permalink to &quot;[9、垃圾收集算法](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#9垃圾收集算法)&quot;">​</a></h3><p>GC最基础的算法有三种：标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法。</p><p><strong>标记 -清除算法</strong></p><p>“标记-清除”（Mark-Sweep）算法，如它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。</p><p><strong>复制算法</strong></p><p>“复制”（Copying）的收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。</p><p><strong>标记-压缩算法</strong></p><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p><p><strong>分代收集算法</strong></p><p>“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法</p><h3 id="_10、java-程序是怎样运行的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#10java-%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84" target="_blank" rel="noreferrer">10、Java 程序是怎样运行的？</a> <a class="header-anchor" href="#_10、java-程序是怎样运行的" aria-label="Permalink to &quot;[10、Java 程序是怎样运行的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理汇总，2021年最新版.md#10java-程序是怎样运行的)&quot;">​</a></h3><ol><li></li></ol><p>首先通过 Javac 编译器将 <code>.java</code> 转为 JVM 可加载的 <code>.class</code> 字节码文件。</p><ol start="2"><li></li></ol><p>Javac 是由 Java 编写的程序，编译过程可以分为：① 词法解析，通过空格分割出单词、操作符、控制符等信息，形成 token 信息流，传递给语法解析器。② 语法解析，把 token 信息流按照 Java 语法规则组装成语法树。③ 语义分析，检查关键字使用是否合理、类型是否匹配、作用域是否正确等。④ 字节码生成，将前面各个步骤的信息转换为字节码。</p><ol start="3"><li></li></ol><p>字节码必须通过类加载过程加载到 JVM 后才可以执行，执行有三种模式，解释执行、JIT 编译执行、JIT 编译与解释器混合执行（主流 JVM 默认执行的方式）。混合模式的优势在于解释器在启动时先解释执行，省去编译时间。</p><ol start="4"><li></li></ol><p>之后通过即时编译器 JIT 把字节码文件编译成本地机器码。</p><ol start="5"><li></li></ol><p>Java 程序最初都是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会认定其为&quot;热点代码&quot;，热点代码的检测主要有基于采样和基于计数器两种方式，为了提高热点代码的执行效率，虚拟机会把它们编译成本地机器码，尽可能对代码优化，在运行时完成这个任务的后端编译器被称为即时编译器。</p><ol start="6"><li></li></ol><p>还可以通过静态的提前编译器 AOT 直接把程序编译成与目标机器指令集相关的二进制代码。</p><h3 id="_11、java-中-comparator-与-comparable-有什么不同" tabindex="-1">11、Java 中，Comparator 与 Comparable 有什么不同？ <a class="header-anchor" href="#_11、java-中-comparator-与-comparable-有什么不同" aria-label="Permalink to &quot;11、Java 中，Comparator 与 Comparable 有什么不同？&quot;">​</a></h3><h3 id="_12、四种构建线程池的区别及特点" tabindex="-1">12、四种构建线程池的区别及特点？ <a class="header-anchor" href="#_12、四种构建线程池的区别及特点" aria-label="Permalink to &quot;12、四种构建线程池的区别及特点？&quot;">​</a></h3><h3 id="_13、synchronized的作用" tabindex="-1">13、synchronized的作用？ <a class="header-anchor" href="#_13、synchronized的作用" aria-label="Permalink to &quot;13、synchronized的作用？&quot;">​</a></h3><h3 id="_14、什么情况发生栈溢出" tabindex="-1">14、什么情况发生栈溢出？ <a class="header-anchor" href="#_14、什么情况发生栈溢出" aria-label="Permalink to &quot;14、什么情况发生栈溢出？&quot;">​</a></h3><h3 id="_15、对象的相等与指向他们的引用相等-两者有什么不同" tabindex="-1">15、对象的相等与指向他们的引用相等，两者有什么不同？ <a class="header-anchor" href="#_15、对象的相等与指向他们的引用相等-两者有什么不同" aria-label="Permalink to &quot;15、对象的相等与指向他们的引用相等，两者有什么不同？&quot;">​</a></h3><h3 id="_16、string类的常用方法有那些" tabindex="-1">16、String类的常用方法有那些？ <a class="header-anchor" href="#_16、string类的常用方法有那些" aria-label="Permalink to &quot;16、String类的常用方法有那些？&quot;">​</a></h3><h3 id="_17、在做文件上传的时候-form表单的enctype的指是什么" tabindex="-1">17、在做文件上传的时候，form表单的enctype的指是什么？ <a class="header-anchor" href="#_17、在做文件上传的时候-form表单的enctype的指是什么" aria-label="Permalink to &quot;17、在做文件上传的时候，form表单的enctype的指是什么？&quot;">​</a></h3><h3 id="_18、死锁的原因" tabindex="-1">18、死锁的原因 <a class="header-anchor" href="#_18、死锁的原因" aria-label="Permalink to &quot;18、死锁的原因&quot;">​</a></h3><h3 id="_19、synchronizedmap和concurrenthashmap有什么区别" tabindex="-1">19、SynchronizedMap和ConcurrentHashMap有什么区别？ <a class="header-anchor" href="#_19、synchronizedmap和concurrenthashmap有什么区别" aria-label="Permalink to &quot;19、SynchronizedMap和ConcurrentHashMap有什么区别？&quot;">​</a></h3><h3 id="_20、你做过-jvm-调优-说说如何查看-jvm-参数默认值" tabindex="-1">20、你做过 JVM 调优，说说如何查看 JVM 参数默认值？ <a class="header-anchor" href="#_20、你做过-jvm-调优-说说如何查看-jvm-参数默认值" aria-label="Permalink to &quot;20、你做过 JVM 调优，说说如何查看 JVM 参数默认值？&quot;">​</a></h3><h3 id="_21、你是如何调用-wait-方法的-使用-if-块还是循环-为什么" tabindex="-1">21、你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？ <a class="header-anchor" href="#_21、你是如何调用-wait-方法的-使用-if-块还是循环-为什么" aria-label="Permalink to &quot;21、你是如何调用 wait（）方法的？使用 if 块还是循环？为什么？&quot;">​</a></h3><h3 id="_22、什么是重写-什么是重载" tabindex="-1">22、什么是重写？什么是重载？ <a class="header-anchor" href="#_22、什么是重写-什么是重载" aria-label="Permalink to &quot;22、什么是重写？什么是重载？&quot;">​</a></h3><h3 id="_23、java-中-weakreference-与-softreference-的区别" tabindex="-1">23、Java 中 WeakReference 与 SoftReference 的区别？ <a class="header-anchor" href="#_23、java-中-weakreference-与-softreference-的区别" aria-label="Permalink to &quot;23、Java 中 WeakReference 与 SoftReference 的区别？&quot;">​</a></h3><h3 id="_24、string-str-aa-string-s-bb-string-aa-aa-s-一种创建了几个对象" tabindex="-1">24、String str=”aa”,String s=”bb”,String aa=aa+s;一种创建了几个对象？ <a class="header-anchor" href="#_24、string-str-aa-string-s-bb-string-aa-aa-s-一种创建了几个对象" aria-label="Permalink to &quot;24、String str=”aa”,String s=”bb”,String aa=aa+s;一种创建了几个对象？&quot;">​</a></h3><h3 id="_25、如何设置请求的编码以及响应内容的类型" tabindex="-1">25、如何设置请求的编码以及响应内容的类型？ <a class="header-anchor" href="#_25、如何设置请求的编码以及响应内容的类型" aria-label="Permalink to &quot;25、如何设置请求的编码以及响应内容的类型？&quot;">​</a></h3><h3 id="_26、jvm怎么判断一个对象是不是要回收" tabindex="-1">26、JVM怎么判断一个对象是不是要回收？ <a class="header-anchor" href="#_26、jvm怎么判断一个对象是不是要回收" aria-label="Permalink to &quot;26、JVM怎么判断一个对象是不是要回收？&quot;">​</a></h3><h3 id="_27、有哪些-gc-算法" tabindex="-1">27、有哪些 GC 算法？ <a class="header-anchor" href="#_27、有哪些-gc-算法" aria-label="Permalink to &quot;27、有哪些 GC 算法？&quot;">​</a></h3><h3 id="_28、serial-与-parallel-gc之间的不同之处" tabindex="-1">28、Serial 与 Parallel GC之间的不同之处？ <a class="header-anchor" href="#_28、serial-与-parallel-gc之间的不同之处" aria-label="Permalink to &quot;28、Serial 与 Parallel GC之间的不同之处？&quot;">​</a></h3><h3 id="_29、arraylist和vector有什么不同之处" tabindex="-1">29、ArrayList和Vector有什么不同之处？ <a class="header-anchor" href="#_29、arraylist和vector有什么不同之处" aria-label="Permalink to &quot;29、ArrayList和Vector有什么不同之处？&quot;">​</a></h3><h3 id="_30、如何在-windows-和-linux-上查找哪个线程cpu利用率最高" tabindex="-1">30、如何在 Windows 和 Linux 上查找哪个线程cpu利用率最高？ <a class="header-anchor" href="#_30、如何在-windows-和-linux-上查找哪个线程cpu利用率最高" aria-label="Permalink to &quot;30、如何在 Windows 和 Linux 上查找哪个线程cpu利用率最高？&quot;">​</a></h3><h3 id="_31、在java中-如何跳出当前的多重嵌套循环" tabindex="-1">31、在Java中，如何跳出当前的多重嵌套循环？ <a class="header-anchor" href="#_31、在java中-如何跳出当前的多重嵌套循环" aria-label="Permalink to &quot;31、在Java中，如何跳出当前的多重嵌套循环？&quot;">​</a></h3><h3 id="_32、垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收" tabindex="-1">32、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？ <a class="header-anchor" href="#_32、垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收" aria-label="Permalink to &quot;32、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？&quot;">​</a></h3><h3 id="_33、集合和数组的区别" tabindex="-1">33、集合和数组的区别 <a class="header-anchor" href="#_33、集合和数组的区别" aria-label="Permalink to &quot;33、集合和数组的区别&quot;">​</a></h3><h3 id="_34、线程池的执行原理" tabindex="-1">34、线程池的执行原理？ <a class="header-anchor" href="#_34、线程池的执行原理" aria-label="Permalink to &quot;34、线程池的执行原理？&quot;">​</a></h3><h3 id="_35、你知道有哪些开源框架" tabindex="-1">35、你知道有哪些开源框架？ <a class="header-anchor" href="#_35、你知道有哪些开源框架" aria-label="Permalink to &quot;35、你知道有哪些开源框架？&quot;">​</a></h3><h3 id="_36、如何确保线程安全" tabindex="-1">36、如何确保线程安全？ <a class="header-anchor" href="#_36、如何确保线程安全" aria-label="Permalink to &quot;36、如何确保线程安全？&quot;">​</a></h3><h3 id="_37、个线程和-2-个线程的同步代码-哪个更容易写" tabindex="-1">37、个线程和 2 个线程的同步代码，哪个更容易写？ <a class="header-anchor" href="#_37、个线程和-2-个线程的同步代码-哪个更容易写" aria-label="Permalink to &quot;37、个线程和 2 个线程的同步代码，哪个更容易写？&quot;">​</a></h3><h3 id="_38、说说自己是怎么使用-synchronized-关键字-在项目中用到了吗" tabindex="-1">38、说说自己是怎么使用 synchronized 关键字，在项目中用到了吗 <a class="header-anchor" href="#_38、说说自己是怎么使用-synchronized-关键字-在项目中用到了吗" aria-label="Permalink to &quot;38、说说自己是怎么使用 synchronized 关键字，在项目中用到了吗&quot;">​</a></h3><h3 id="_39、接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class" tabindex="-1">39、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？ <a class="header-anchor" href="#_39、接口是否可继承-extends-接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class" aria-label="Permalink to &quot;39、接口是否可继承（extends）接口？抽象类是否可实现（implements）接口？抽象类是否可继承具体类（concrete class）？&quot;">​</a></h3><h3 id="_40、arraylist-与-linkedlist-的不区别" tabindex="-1">40、ArrayList 与 LinkedList 的不区别？ <a class="header-anchor" href="#_40、arraylist-与-linkedlist-的不区别" aria-label="Permalink to &quot;40、ArrayList 与 LinkedList 的不区别？&quot;">​</a></h3>',80),s=[n];function i(l,E,h,d,c,B){return e(),r("div",null,s)}const m=a(t,[["render",i]]);export{b as __pageData,m as default};
