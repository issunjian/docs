import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"类和接口","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/基础/类和接口.md","filePath":"java/javase/基础/类和接口.md"}'),p={name:"java/javase/基础/类和接口.md"},o=l(`<h1 id="类和接口" tabindex="-1">类和接口 <a class="header-anchor" href="#类和接口" aria-label="Permalink to &quot;类和接口&quot;">​</a></h1><hr><h2 id="对象-object" tabindex="-1">对象 Object <a class="header-anchor" href="#对象-object" aria-label="Permalink to &quot;对象 Object&quot;">​</a></h2><p>java 是面向对象的语言：对象包含了状态和行为，用户通过调用对象的方法、改变对象的属性来实现 java 程序的功能。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Car</span><span style="color:#F6F6F4;"> myCar </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Car</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">BMW</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                          </span><span style="color:#7B7F8B;">// 创建对象       </span></span>
<span class="line"><span style="color:#F6F6F4;">me.brand </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Benz</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;                                   </span><span style="color:#7B7F8B;">// 修改对象变量                   </span></span>
<span class="line"><span style="color:#F6F6F4;">me.</span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">London</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                     </span><span style="color:#7B7F8B;">// 调用对象方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Car myCar </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;BMW&quot;</span><span style="color:#24292E;">);                          </span><span style="color:#6A737D;">// 创建对象       </span></span>
<span class="line"><span style="color:#24292E;">me.brand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Benz&quot;</span><span style="color:#24292E;">;                                   </span><span style="color:#6A737D;">// 修改对象变量                   </span></span>
<span class="line"><span style="color:#24292E;">me.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;London&quot;</span><span style="color:#24292E;">);                                     </span><span style="color:#6A737D;">// 调用对象方法</span></span></code></pre></div><p>在 java 程序中我们通过类和接口来定义对象的性质：每个 java 文件都是一个定义好的 public 类 / 接口，且类名 / 接口名与文件名相同。</p><p><em>java 文件可以含有多个类 / 接口，但只能有一个 public 类 / 接口供外部访问。</em></p><hr><h2 id="类-class" tabindex="-1">类 Class <a class="header-anchor" href="#类-class" aria-label="Permalink to &quot;类 Class&quot;">​</a></h2><p>对象的类型：定义对象含有的变量和方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Car</span><span style="color:#F6F6F4;"> {     </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> brand;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> description </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">this is a car</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// static 变量 </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> number_of_car;  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">car</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">brand</span><span style="color:#F6F6F4;">){        </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.brand </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> brand;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 方法  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">loc</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">go to</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> loc);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }   </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// static 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> static </span><span style="color:#62E884;">showNum</span><span style="color:#F6F6F4;">(){            </span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(number_of_car);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 初始化块</span></span>
<span class="line"><span style="color:#F6F6F4;">    {       </span></span>
<span class="line"><span style="color:#F6F6F4;">        number_of_car;                                      </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// static 初始化块</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;">{                                                              </span></span>
<span class="line"><span style="color:#F6F6F4;">        number_of_car </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 内部类</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Warranty</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">repair</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">repair</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }    </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;"> {     </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 变量</span></span>
<span class="line"><span style="color:#24292E;">    String brand;</span></span>
<span class="line"><span style="color:#24292E;">    String description </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;this is a car&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// static 变量 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> number_of_car;  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">car</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">brand</span><span style="color:#24292E;">){        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.brand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> brand;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 方法  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">loc</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;go to&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> loc);</span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// static 方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> static </span><span style="color:#6F42C1;">showNum</span><span style="color:#24292E;">(){            </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(number_of_car);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化块</span></span>
<span class="line"><span style="color:#24292E;">    {       </span></span>
<span class="line"><span style="color:#24292E;">        number_of_car;                                      </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// static 初始化块</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;">{                                                              </span></span>
<span class="line"><span style="color:#24292E;">        number_of_car </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 内部类</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Warranty</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">repair</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;repair&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }    </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><strong>变量</strong></li></ul><p>对象中存储的数据。</p><ul><li><strong>方法</strong></li></ul><p>调用时执行的代码。</p><ul><li><strong>初始化块</strong></li></ul><p>创建对象前自动执行的代码。</p><ul><li><strong>内部类</strong></li></ul><p>定义在类中的类。</p><ul><li><strong>构造方法</strong></li></ul><p>在创建对象时自动执行，不返回任何参数（先执行初始化块，再执行构造方法）。</p><p>未定义任何构造方法时，系统会自动添加无参构造方法。</p><h3 id="终态声明" tabindex="-1">终态声明 <a class="header-anchor" href="#终态声明" aria-label="Permalink to &quot;终态声明&quot;">​</a></h3><ul><li><strong>final 常量</strong>： 只能赋值一次，不可更改。</li><li><strong>final 类</strong>： 不可被继承。</li><li><strong>final 方法</strong>：（弃用）不可被继承。现在所有的 private 方法都隐式地指定为 final。</li></ul><p><em>对于 final 常量，如果编译时就可以确定值，编译器会在编译时直接把这个变量替换成它的值。</em></p><h3 id="静态声明" tabindex="-1">静态声明 <a class="header-anchor" href="#静态声明" aria-label="Permalink to &quot;静态声明&quot;">​</a></h3><ul><li><strong>static 变量</strong>：该变量由该类的所有对象共享，不需要创建对象也可使用。</li><li><strong>static 方法</strong>：允许直接访问，不需要创建对象也可被调用。如 main 方法。</li><li><strong>static 初始化块</strong>：在创建类的第一个对象前自动执行（先执行静态初始化块，再执行初始化块）。</li><li><strong>static 内部类</strong>：外部类对象共享，只能访问外部类的静态成员。</li></ul><h3 id="权限声明" tabindex="-1">权限声明 <a class="header-anchor" href="#权限声明" aria-label="Permalink to &quot;权限声明&quot;">​</a></h3><ul><li><strong>public</strong>： 允许所有访问。</li><li><strong>protected</strong>： 只允许本类、同包和子类访问。</li><li><strong>[default]</strong>： 允许本类和同包访问。</li><li><strong>private</strong>： 只允许本类访问。</li></ul><hr><h2 id="接口-interface" tabindex="-1">接口 Interface <a class="header-anchor" href="#接口-interface" aria-label="Permalink to &quot;接口 Interface&quot;">​</a></h2><p>类的规范：只规定应含有哪些方法，而不负责具体实现。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Move</span><span style="color:#F6F6F4;">{  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// abstract 方法                   </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">loc</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// default 方法                                 </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">stop</span><span style="color:#F6F6F4;">() {      </span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">stop</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    };                  </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Move</span><span style="color:#24292E;">{  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// abstract 方法                   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">loc</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// default 方法                                 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stop</span><span style="color:#24292E;">() {      </span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stop&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    };                  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol><li>声明接口：必须且默认为 static final，通常为 public 。</li><li>只允许声明静态常量：必须且默认为 public static final 。</li><li>声明抽象方法：必须且默认为 abstract ，可以为 static。</li></ol><blockquote><p>JDK 1.8 以前，接口中抽象方法必须且默认为 public，不允许实现任何方法。 JDK 1.8 以后，接口中抽象方法可以且默认为 default，且允许实现 static 和 default 方法。 JDK 1.9 以后，接口中抽象方法可以是 private。*</p></blockquote><h3 id="抽象声明" tabindex="-1">抽象声明 <a class="header-anchor" href="#抽象声明" aria-label="Permalink to &quot;抽象声明&quot;">​</a></h3><ul><li><strong>abstract 方法</strong>：只有声明，而没有方法的具体实现。</li><li><strong>abstract 类</strong>：类的模板，不能实例化对象。必须由其他类继承才能使用。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Vehicle</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 声明变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> brand;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 声明并实现方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">loc</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">go to</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> loc);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }   </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vehicle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 声明变量</span></span>
<span class="line"><span style="color:#24292E;">    String brand;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 声明并实现方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">loc</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;go to&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> loc);</span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="接口和抽象类的区别" tabindex="-1">接口和抽象类的区别 <a class="header-anchor" href="#接口和抽象类的区别" aria-label="Permalink to &quot;接口和抽象类的区别&quot;">​</a></h4><ol><li>接口不能实现普通方法，抽象类可以实现具体的方法、也可以不实现。</li><li>接口只能定义静态常量，抽象类可以定义非静态变量。</li><li>一个实体类可以实现多个接口，但只能继承一个抽象类。</li></ol><h3 id="更新声明" tabindex="-1">更新声明 <a class="header-anchor" href="#更新声明" aria-label="Permalink to &quot;更新声明&quot;">​</a></h3><ul><li><p><strong>default 方法</strong>：更新接口时添加的新方法，允许旧类实现接口而不实现该方法。</p><ul><li><p>可以直接在接口内实现，供没有定义的旧类直接使用。若类中实现了该方法则覆盖。</p></li><li><p>如果类实现了多个接口且拥有同名 default 方法：</p><ol><li>两个接口若存在继承关系，调用时优先使用子类方法。</li><li>否则，必须重写子类 default 方法，通过 super 关键字明确实现哪个接口：</li></ol></li></ul></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Plane</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Move</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Fly</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    ...</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        Fly.super.</span><span style="color:#62E884;">go</span><span style="color:#F6F6F4;">();                 </span><span style="color:#7B7F8B;">// 实现选定 default 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Plane</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Move</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Fly</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        Fly.super.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">();                 </span><span style="color:#6A737D;">// 实现选定 default 方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="包-package" tabindex="-1">包 Package <a class="header-anchor" href="#包-package" aria-label="Permalink to &quot;包 Package&quot;">​</a></h2><p>命名空间，表示 java 文件的存储路径。其路径记录在每个 java 文件首。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">com.company.project.module</span><span style="color:#F6F6F4;">;                    </span><span style="color:#7B7F8B;">// 声明存储路径</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.company.project.module;                    </span><span style="color:#6A737D;">// 声明存储路径</span></span></code></pre></div><h3 id="导入-import" tabindex="-1">导入 import <a class="header-anchor" href="#导入-import" aria-label="Permalink to &quot;导入 import&quot;">​</a></h3><p>在 java 文件中，如果要调用其他 java 文件中定义的类 / 接口，就需要进行导入：</p><ul><li><p>同一存储路径（包）下的 java 文件不需要导入，可以直接调用。</p></li><li><p>已默认导入 java.lang 路径下所有 java 文件，包含 System、String、Object、Math 等常用类。</p></li><li><p>如果没有导入对应 java 文件，或者导入了多个同名 java 文件，在调用类 / 接口时需要标明路径。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">com.company.project.module</span><span style="color:#F6F6F4;">;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.util.Scanner;                             </span><span style="color:#7B7F8B;">// 导入 java 文件，但不包括内部 static 变量和方法</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.net.</span><span style="color:#BF9EEE;font-style:italic;">*</span><span style="color:#F6F6F4;">;                                    </span><span style="color:#7B7F8B;">// 导入路径下所有 java 文件，但不包括下属文件夹</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> java.lang.Math.PI;                      </span><span style="color:#7B7F8B;">// 导入 java 文件中的 static 变量或方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">java</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">io</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> java.io.</span><span style="color:#62E884;">InputStream</span><span style="color:#F6F6F4;">(System.in);    </span><span style="color:#7B7F8B;">// 未导入类，调用时需要标明路径</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(in);                                   </span><span style="color:#7B7F8B;">// 已导入类，可直接调用</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextInt</span><span style="color:#F6F6F4;">();                                       </span><span style="color:#7B7F8B;">// 默认导入类，可直接调用</span></span>
<span class="line"><span style="color:#F6F6F4;">        sc.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();           </span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.company.project.module;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Scanner;                             </span><span style="color:#6A737D;">// 导入 java 文件，但不包括内部 static 变量和方法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.net.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;                                    </span><span style="color:#6A737D;">// 导入路径下所有 java 文件，但不包括下属文件夹</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> java.lang.Math.PI;                      </span><span style="color:#6A737D;">// 导入 java 文件中的 static 变量或方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        java.io.InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">InputStream</span><span style="color:#24292E;">(System.in);    </span><span style="color:#6A737D;">// 未导入类，调用时需要标明路径</span></span>
<span class="line"><span style="color:#24292E;">        Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(in);                                   </span><span style="color:#6A737D;">// 已导入类，可直接调用</span></span>
<span class="line"><span style="color:#24292E;">        Integer n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">();                                       </span><span style="color:#6A737D;">// 默认导入类，可直接调用</span></span>
<span class="line"><span style="color:#24292E;">        sc.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();           </span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,51),t=[o];function e(c,r,y,F,i,E){return a(),n("div",null,t)}const g=s(p,[["render",e]]);export{d as __pageData,g as default};
