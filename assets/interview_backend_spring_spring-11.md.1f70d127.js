import{_ as o,o as r,c as e,V as t}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/spring/spring-11.md","filePath":"interview/backend/spring/spring-11.md"}'),a={name:"interview/backend/spring/spring-11.md"},n=t('<h3 id="_1、区分-beanfactory-和-applicationcontext。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#1%E5%8C%BA%E5%88%86-beanfactory-%E5%92%8C-applicationcontext%E3%80%82" target="_blank" rel="noreferrer">1、区分 BeanFactory 和 ApplicationContext。</a> <a class="header-anchor" href="#_1、区分-beanfactory-和-applicationcontext。" aria-label="Permalink to &quot;[1、区分 BeanFactory 和 ApplicationContext。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#1区分-beanfactory-和-applicationcontext。)&quot;">​</a></h3><table><thead><tr><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>它使用懒加载</td><td>它使用即时加载</td></tr><tr><td>它使用语法显式提供资源对象</td><td>它自己创建和管理资源对象</td></tr><tr><td>不支持国际化</td><td>支持国际化</td></tr><tr><td>不支持基于依赖的注解</td><td>支持基于依赖的注解</td></tr></tbody></table><h3 id="_2、如何重新加载springboot上的更改-而无需重新启动服务器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#2%E5%A6%82%E4%BD%95%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BDspringboot%E4%B8%8A%E7%9A%84%E6%9B%B4%E6%94%B9%E8%80%8C%E6%97%A0%E9%9C%80%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noreferrer">2、如何重新加载SpringBoot上的更改，而无需重新启动服务器？</a> <a class="header-anchor" href="#_2、如何重新加载springboot上的更改-而无需重新启动服务器" aria-label="Permalink to &quot;[2、如何重新加载SpringBoot上的更改，而无需重新启动服务器？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#2如何重新加载springboot上的更改而无需重新启动服务器)&quot;">​</a></h3><p>这可以使用DEV工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat将重新启动。</p><p>SpringBoot有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。</p><p>开发人员可以重新加载SpringBoot上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。SpringBoot在它的第一个版本时没有这个功能。</p><p>这是开发人员最需要的功能。DevTools模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供H2数据库控制台以更好地测试应用程序。</p><h3 id="_3、spring-jdbc-api-中存在哪些类" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#3spring-jdbc-api-%E4%B8%AD%E5%AD%98%E5%9C%A8%E5%93%AA%E4%BA%9B%E7%B1%BB" target="_blank" rel="noreferrer">3、spring JDBC API 中存在哪些类？</a> <a class="header-anchor" href="#_3、spring-jdbc-api-中存在哪些类" aria-label="Permalink to &quot;[3、spring JDBC API 中存在哪些类？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#3spring-jdbc-api-中存在哪些类)&quot;">​</a></h3><p><strong>1、</strong> JdbcTemplate</p><p><strong>2、</strong> SimpleJdbcTemplate</p><p><strong>3、</strong> NamedParameterJdbcTemplate</p><p><strong>4、</strong> SimpleJdbcInsert</p><p><strong>5、</strong> SimpleJdbcCall</p><h3 id="_4、spring-cloud-和dubbo区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#4spring-cloud-%E5%92%8Cdubbo%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">4、spring cloud 和dubbo区别?</a> <a class="header-anchor" href="#_4、spring-cloud-和dubbo区别" aria-label="Permalink to &quot;[4、spring cloud 和dubbo区别?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#4spring-cloud-和dubbo区别)&quot;">​</a></h3><p><strong>1、</strong> 服务调用方式 dubbo是RPC springcloud Rest Api</p><p><strong>2、</strong> 注册中心,dubbo 是zookeeper springcloud是eureka，也可以是zookeeper</p><p><strong>3、</strong> 服务网关,dubbo本身没有实现，只能通过其他第三方技术整合，springcloud有Zuul路由网关，作为路由服务器，进行消费者的请求分发,springcloud支持断路器，与git完美集成配置文件支持版本控制，事物总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素。</p><h3 id="_5、spring-boot初始化环境变量流程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#5spring-boot%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B5%81%E7%A8%8B" target="_blank" rel="noreferrer">5、spring boot初始化环境变量流程?</a> <a class="header-anchor" href="#_5、spring-boot初始化环境变量流程" aria-label="Permalink to &quot;[5、spring boot初始化环境变量流程?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#5spring-boot初始化环境变量流程)&quot;">​</a></h3><p><strong>1、</strong> 调用<code>prepareEnvironment</code>方法去设置环境变量</p><p><strong>2、</strong> 接下来有三个方法<code>getOrCreateEnvironment</code>，<code>configureEnvironment</code>，<code>environmentPrepared</code></p><p><strong>3、</strong> <code>getOrCreateEnvironment</code>去初始化系统环境变量</p><p><strong>4、</strong> <code>configureEnvironment</code>去初始化命令行参数</p><p><strong>5、</strong> <code>environmentPrepared</code>当广播到来的时候调用<code>onApplicationEnvironmentPreparedEvent</code>方法去使用<code>postProcessEnvironment</code>方法<code>load yml</code>和<code>properties变量</code></p><h3 id="_6、服务网关的作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#6%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">6、服务网关的作用</a> <a class="header-anchor" href="#_6、服务网关的作用" aria-label="Permalink to &quot;[6、服务网关的作用](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#6服务网关的作用)&quot;">​</a></h3><p><strong>1、</strong> 简化客户端调用复杂度，统一处理外部请求。</p><p><strong>2、</strong> 数据裁剪以及聚合，根据不同的接口需求，对数据加工后对外。</p><p><strong>3、</strong> 多渠道支持，针对不同的客户端提供不同的网关支持。</p><p><strong>4、</strong> 遗留系统的微服务化改造，可以作为新老系统的中转组件。</p><p><strong>5、</strong> 统一处理调用过程中的安全、权限问题。</p><h3 id="_7、springboot-支持哪些日志框架-推荐和默认的日志框架是哪个" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#7springboot-%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%8E%A8%E8%8D%90%E5%92%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%98%AF%E5%93%AA%E4%B8%AA" target="_blank" rel="noreferrer">7、SpringBoot 支持哪些日志框架？推荐和默认的日志框架是哪个？</a> <a class="header-anchor" href="#_7、springboot-支持哪些日志框架-推荐和默认的日志框架是哪个" aria-label="Permalink to &quot;[7、SpringBoot 支持哪些日志框架？推荐和默认的日志框架是哪个？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#7springboot-支持哪些日志框架推荐和默认的日志框架是哪个)&quot;">​</a></h3><p>SpringBoot 支持 Java Util Logging, Log4j2, Lockback 作为日志框架，如果你使用 Starters 启动器，SpringBoot 将使用 Logback 作为默认日志框架。</p><h3 id="_8、如何配置springboot应用程序日志记录" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#8%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEspringboot%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95" target="_blank" rel="noreferrer">8、如何配置SpringBoot应用程序日志记录？</a> <a class="header-anchor" href="#_8、如何配置springboot应用程序日志记录" aria-label="Permalink to &quot;[8、如何配置SpringBoot应用程序日志记录？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#8如何配置springboot应用程序日志记录)&quot;">​</a></h3><p>SpringBoot附带了对Log4J2，Java Util Logging和Logback的支持。它通常预先配置为控制台输出。可以通过仅在application.properties文件中指定logging.level来配置它们。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">logging.level.spring.framework=Debug</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">logging.level.spring.framework=Debug</span></span></code></pre></div><h3 id="_9、ribbon和feign调用服务的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#9ribbon%E5%92%8Cfeign%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、Ribbon和Feign调用服务的区别</a> <a class="header-anchor" href="#_9、ribbon和feign调用服务的区别" aria-label="Permalink to &quot;[9、Ribbon和Feign调用服务的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#9ribbon和feign调用服务的区别)&quot;">​</a></h3><p><strong>1、</strong> 调用方式同：Ribbon需要我们自己构建Http请求，模拟Http请求然后通过RestTemplate发给其他服务，步骤相当繁琐</p><p><strong>2、</strong> 而Feign则是在Ribbon的基础上进行了一次改进，采用接口的形式，将我们需要调用的服务方法定义成抽象方法保存在本地就可以了，不需要自己构建Http请求了，直接调用接口就行了，不过要注意，调用方法要和本地抽象方法的签名完全一致。</p><h3 id="_10、什么是-swagger-你用-springboot-实现了它吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%E7%89%88.md#10%E4%BB%80%E4%B9%88%E6%98%AF-swagger%E4%BD%A0%E7%94%A8-springboot-%E5%AE%9E%E7%8E%B0%E4%BA%86%E5%AE%83%E5%90%97" target="_blank" rel="noreferrer">10、什么是 Swagger？你用 SpringBoot 实现了它吗？</a> <a class="header-anchor" href="#_10、什么是-swagger-你用-springboot-实现了它吗" aria-label="Permalink to &quot;[10、什么是 Swagger？你用 SpringBoot 实现了它吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring面试题及答案整理汇总，2021年最新版.md#10什么是-swagger你用-springboot-实现了它吗)&quot;">​</a></h3><p>Swagger 广泛用于可视化 API，使用 Swagger UI 为前端开发人员提供在线沙箱。Swagger 是用于生成 RESTful Web 服务的可视化表示的工具，规范和完整框架实现。它使文档能够以与服务器相同的速度更新。当通过 Swagger 正确定义时，消费者可以使用最少量的实现逻辑来理解远程服务并与其进行交互。因此，Swagger消除了调用服务时的猜测。</p><h3 id="_11、多个消费者调用同一接口-eruka默认的分配方式是什么" tabindex="-1">11、多个消费者调用同一接口，eruka默认的分配方式是什么？ <a class="header-anchor" href="#_11、多个消费者调用同一接口-eruka默认的分配方式是什么" aria-label="Permalink to &quot;11、多个消费者调用同一接口，eruka默认的分配方式是什么？&quot;">​</a></h3><h3 id="_12、什么是starter" tabindex="-1">12、什么是starter? <a class="header-anchor" href="#_12、什么是starter" aria-label="Permalink to &quot;12、什么是starter?&quot;">​</a></h3><h3 id="_13、如何使用springboot实现异常处理" tabindex="-1">13、如何使用SpringBoot实现异常处理? <a class="header-anchor" href="#_13、如何使用springboot实现异常处理" aria-label="Permalink to &quot;13、如何使用SpringBoot实现异常处理?&quot;">​</a></h3><h3 id="_14、bean-工厂和-application-contexts-有什么区别" tabindex="-1">14、Bean 工厂和 Application contexts 有什么区别？ <a class="header-anchor" href="#_14、bean-工厂和-application-contexts-有什么区别" aria-label="Permalink to &quot;14、Bean 工厂和 Application contexts 有什么区别？&quot;">​</a></h3><h3 id="_15、spring-boot-starter-parent有什么用" tabindex="-1">15、spring-boot-starter-parent有什么用？ <a class="header-anchor" href="#_15、spring-boot-starter-parent有什么用" aria-label="Permalink to &quot;15、spring-boot-starter-parent有什么用？&quot;">​</a></h3><h3 id="_16、微服务之间如何独立通讯的" tabindex="-1">16、微服务之间如何独立通讯的? <a class="header-anchor" href="#_16、微服务之间如何独立通讯的" aria-label="Permalink to &quot;16、微服务之间如何独立通讯的?&quot;">​</a></h3><h3 id="_17、springboot-有哪几种读取配置的方式" tabindex="-1">17、SpringBoot 有哪几种读取配置的方式？ <a class="header-anchor" href="#_17、springboot-有哪几种读取配置的方式" aria-label="Permalink to &quot;17、SpringBoot 有哪几种读取配置的方式？&quot;">​</a></h3><h3 id="_18、你所知道微服务的技术栈有哪些-列举一二" tabindex="-1">18、你所知道微服务的技术栈有哪些？列举一二 <a class="header-anchor" href="#_18、你所知道微服务的技术栈有哪些-列举一二" aria-label="Permalink to &quot;18、你所知道微服务的技术栈有哪些？列举一二&quot;">​</a></h3><h3 id="_19、docker的目的是什么" tabindex="-1">19、Docker的目的是什么？ <a class="header-anchor" href="#_19、docker的目的是什么" aria-label="Permalink to &quot;19、Docker的目的是什么？&quot;">​</a></h3><h3 id="_20、如何给spring-容器提供配置元数据" tabindex="-1">20、如何给Spring 容器提供配置元数据? <a class="header-anchor" href="#_20、如何给spring-容器提供配置元数据" aria-label="Permalink to &quot;20、如何给Spring 容器提供配置元数据?&quot;">​</a></h3><h3 id="_21、如何在springboot应用程序中实现spring安全性" tabindex="-1">21、如何在SpringBoot应用程序中实现Spring安全性？ <a class="header-anchor" href="#_21、如何在springboot应用程序中实现spring安全性" aria-label="Permalink to &quot;21、如何在SpringBoot应用程序中实现Spring安全性？&quot;">​</a></h3><h3 id="_22、springboot性能如何优化" tabindex="-1">22、SpringBoot性能如何优化 <a class="header-anchor" href="#_22、springboot性能如何优化" aria-label="Permalink to &quot;22、SpringBoot性能如何优化&quot;">​</a></h3><h3 id="_23、什么是网关" tabindex="-1">23、什么是网关? <a class="header-anchor" href="#_23、什么是网关" aria-label="Permalink to &quot;23、什么是网关?&quot;">​</a></h3><h3 id="_24、如何使用-springboot-实现异常处理" tabindex="-1">24、如何使用 SpringBoot 实现异常处理？ <a class="header-anchor" href="#_24、如何使用-springboot-实现异常处理" aria-label="Permalink to &quot;24、如何使用 SpringBoot 实现异常处理？&quot;">​</a></h3><h3 id="_25、springboot-中如何解决跨域问题" tabindex="-1">25、SpringBoot 中如何解决跨域问题 ? <a class="header-anchor" href="#_25、springboot-中如何解决跨域问题" aria-label="Permalink to &quot;25、SpringBoot 中如何解决跨域问题 ?&quot;">​</a></h3><h3 id="_26、指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。" tabindex="-1">26、指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。 <a class="header-anchor" href="#_26、指出在-spring-aop-中-concern-和-cross-cutting-concern-的不同之处。" aria-label="Permalink to &quot;26、指出在 spring aop 中 concern 和 cross-cutting concern 的不同之处。&quot;">​</a></h3><h3 id="_27、谈谈服务降级、熔断、服务隔离" tabindex="-1">27、谈谈服务降级、熔断、服务隔离 <a class="header-anchor" href="#_27、谈谈服务降级、熔断、服务隔离" aria-label="Permalink to &quot;27、谈谈服务降级、熔断、服务隔离&quot;">​</a></h3><h3 id="_28、什么是-spring-profiles" tabindex="-1">28、什么是 Spring Profiles？ <a class="header-anchor" href="#_28、什么是-spring-profiles" aria-label="Permalink to &quot;28、什么是 Spring Profiles？&quot;">​</a></h3><h3 id="_29、什么是-websockets" tabindex="-1">29、什么是 WebSockets？ <a class="header-anchor" href="#_29、什么是-websockets" aria-label="Permalink to &quot;29、什么是 WebSockets？&quot;">​</a></h3><h3 id="_30、-component-controller-repository-service-有何区别" tabindex="-1">30、@Component, @Controller, @Repository, <a href="/docs/Service.html">@Service </a> 有何区别？ <a class="header-anchor" href="#_30、-component-controller-repository-service-有何区别" aria-label="Permalink to &quot;30、@Component, @Controller, @Repository, [@Service ](/Service ) 有何区别？&quot;">​</a></h3>',59),i=[n];function s(p,g,E,c,l,d){return r(),e("div",null,i)}const B=o(a,[["render",s]]);export{h as __pageData,B as default};
