import{_ as e,o as s,c as a,V as i}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/redis/redis-07.md","filePath":"interview/backend/redis/redis-07.md"}'),r={name:"interview/backend/redis/redis-07.md"},n=i(`<h3 id="_1、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1mysql%E9%87%8C%E6%9C%892000w%E6%95%B0%E6%8D%AEredis%E4%B8%AD%E5%8F%AA%E5%AD%9820w%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%BD%E6%98%AF%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">1、MySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据？</a> <a class="header-anchor" href="#_1、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" aria-label="Permalink to &quot;[1、MySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#1mysql里有2000w数据redis中只存20w的数据如何保证redis中的数据都是热点数据)&quot;">​</a></h3><p>Redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><h3 id="_2、redis-过期键的删除策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2redis-%E8%BF%87%E6%9C%9F%E9%94%AE%E7%9A%84%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">2、Redis 过期键的删除策略？</a> <a class="header-anchor" href="#_2、redis-过期键的删除策略" aria-label="Permalink to &quot;[2、Redis 过期键的删除策略？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#2redis-过期键的删除策略)&quot;">​</a></h3><p><strong>1、</strong> 定时删除:在设置键的过期时间的同时，创建一个定时器 timer). 让定时器在键的过期时间来临时， 立即执行对键的删除操作。</p><p><strong>2、</strong> 惰性删除:放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是 否过期， 如果过期的话， 就删除该键;如果没有过期， 就返回该键。</p><p><strong>3、</strong> 定期删除:每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至 于要删除多少过期键， 以及要检查多少个数据库， 则由算法决定。</p><h3 id="_3、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3mysql%E9%87%8C%E6%9C%892000w%E6%95%B0%E6%8D%AEredis%E4%B8%AD%E5%8F%AA%E5%AD%9820w%E7%9A%84%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%BD%E6%98%AF%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">3、mySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据</a> <a class="header-anchor" href="#_3、mysql里有2000w数据-redis中只存20w的数据-如何保证redis中的数据都是热点数据" aria-label="Permalink to &quot;[3、mySQL里有2000w数据，Redis中只存20w的数据，如何保证Redis中的数据都是热点数据](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#3mysql里有2000w数据redis中只存20w的数据如何保证redis中的数据都是热点数据)&quot;">​</a></h3><p><em>相关知识：Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略（回收策略）。</em></p><h3 id="_4、redis-key的过期时间和永久有效分别怎么设置" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4redis-key%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%E5%92%8C%E6%B0%B8%E4%B9%85%E6%9C%89%E6%95%88%E5%88%86%E5%88%AB%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">4、Redis key的过期时间和永久有效分别怎么设置？</a> <a class="header-anchor" href="#_4、redis-key的过期时间和永久有效分别怎么设置" aria-label="Permalink to &quot;[4、Redis key的过期时间和永久有效分别怎么设置？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#4redis-key的过期时间和永久有效分别怎么设置)&quot;">​</a></h3><p>EXPIRE和PERSIST命令。</p><h3 id="_5、请用redis和任意语言实现一段恶意登录保护的代码" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E8%AF%B7%E7%94%A8redis%E5%92%8C%E4%BB%BB%E6%84%8F%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E4%B8%80%E6%AE%B5%E6%81%B6%E6%84%8F%E7%99%BB%E5%BD%95%E4%BF%9D%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">5、请用Redis和任意语言实现一段恶意登录保护的代码，</a> <a class="header-anchor" href="#_5、请用redis和任意语言实现一段恶意登录保护的代码" aria-label="Permalink to &quot;[5、请用Redis和任意语言实现一段恶意登录保护的代码，](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#5请用redis和任意语言实现一段恶意登录保护的代码)&quot;">​</a></h3><p>限制1小时内每用户Id最多只能登录5次。具体登录函数或功能用空函数即可，不用详细写出。</p><p>用列表实现:列表中每个元素代表登陆时间,只要最后的第5次登陆时间和现在时间差不超过1小时就禁止登陆.用Python写的代码如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="color:#f6f6f4;">import Redis  </span></span>
<span class="line"><span style="color:#f6f6f4;">import sys  </span></span>
<span class="line"><span style="color:#f6f6f4;">import time  </span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;">r = Redis.StrictRedis(host=’127.0.0.1′, port=6379, db=0)  </span></span>
<span class="line"><span style="color:#f6f6f4;">try:       </span></span>
<span class="line"><span style="color:#f6f6f4;">    id = sys.argv[1]</span></span>
<span class="line"><span style="color:#f6f6f4;">except:      </span></span>
<span class="line"><span style="color:#f6f6f4;">    print(‘input argument error’)    </span></span>
<span class="line"><span style="color:#f6f6f4;">    sys.exit(0)  </span></span>
<span class="line"><span style="color:#f6f6f4;">if r.llen(id) &gt;= 5 and time.time() – float(r.lindex(id, 4)) &lt;= 3600:      </span></span>
<span class="line"><span style="color:#f6f6f4;">    print(“you are forbidden logining”)</span></span>
<span class="line"><span style="color:#f6f6f4;">else:       </span></span>
<span class="line"><span style="color:#f6f6f4;">    print(‘you are allowed to login’)    </span></span>
<span class="line"><span style="color:#f6f6f4;">    r.lpush(id, time.time())    </span></span>
<span class="line"><span style="color:#f6f6f4;">    # login_func()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">#!/usr/bin/env python3</span></span>
<span class="line"><span style="color:#24292e;">import Redis  </span></span>
<span class="line"><span style="color:#24292e;">import sys  </span></span>
<span class="line"><span style="color:#24292e;">import time  </span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;">r = Redis.StrictRedis(host=’127.0.0.1′, port=6379, db=0)  </span></span>
<span class="line"><span style="color:#24292e;">try:       </span></span>
<span class="line"><span style="color:#24292e;">    id = sys.argv[1]</span></span>
<span class="line"><span style="color:#24292e;">except:      </span></span>
<span class="line"><span style="color:#24292e;">    print(‘input argument error’)    </span></span>
<span class="line"><span style="color:#24292e;">    sys.exit(0)  </span></span>
<span class="line"><span style="color:#24292e;">if r.llen(id) &gt;= 5 and time.time() – float(r.lindex(id, 4)) &lt;= 3600:      </span></span>
<span class="line"><span style="color:#24292e;">    print(“you are forbidden logining”)</span></span>
<span class="line"><span style="color:#24292e;">else:       </span></span>
<span class="line"><span style="color:#24292e;">    print(‘you are allowed to login’)    </span></span>
<span class="line"><span style="color:#24292e;">    r.lpush(id, time.time())    </span></span>
<span class="line"><span style="color:#24292e;">    # login_func()</span></span></code></pre></div><h3 id="_6、-或是关注" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E6%88%96%E6%98%AF%E5%85%B3%E6%B3%A8" target="_blank" rel="noreferrer">6、，或是关注</a> <a class="header-anchor" href="#_6、-或是关注" aria-label="Permalink to &quot;[6、，或是关注](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#6或是关注)&quot;">​</a></h3><h3 id="_7、怎么理解redis事务" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3redis%E4%BA%8B%E5%8A%A1" target="_blank" rel="noreferrer">7、怎么理解Redis事务？</a> <a class="header-anchor" href="#_7、怎么理解redis事务" aria-label="Permalink to &quot;[7、怎么理解Redis事务？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#7怎么理解redis事务)&quot;">​</a></h3><p>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p><h3 id="_8、redis-key-的过期时间和永久有效分别怎么设置" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8redis-key-%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%E5%92%8C%E6%B0%B8%E4%B9%85%E6%9C%89%E6%95%88%E5%88%86%E5%88%AB%E6%80%8E%E4%B9%88%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">8、Redis key 的过期时间和永久有效分别怎么设置？</a> <a class="header-anchor" href="#_8、redis-key-的过期时间和永久有效分别怎么设置" aria-label="Permalink to &quot;[8、Redis key 的过期时间和永久有效分别怎么设置？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#8redis-key-的过期时间和永久有效分别怎么设置)&quot;">​</a></h3><p>EXPIRE 和 PERSIST 命令。</p><h3 id="_9、redis中海量数据的正确操作方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9redis%E4%B8%AD%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">9、Redis中海量数据的正确操作方式</a> <a class="header-anchor" href="#_9、redis中海量数据的正确操作方式" aria-label="Permalink to &quot;[9、Redis中海量数据的正确操作方式](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#9redis中海量数据的正确操作方式)&quot;">​</a></h3><p>利用SCAN系列命令（SCAN、SSCAN、HSCAN、ZSCAN）完成数据迭代。</p><h3 id="_10、什么是redis-简述它的优缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E4%BB%80%E4%B9%88%E6%98%AFredis%E7%AE%80%E8%BF%B0%E5%AE%83%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">10、什么是Redis？简述它的优缺点？</a> <a class="header-anchor" href="#_10、什么是redis-简述它的优缺点" aria-label="Permalink to &quot;[10、什么是Redis？简述它的优缺点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题及答案附答案汇总.md#10什么是redis简述它的优缺点)&quot;">​</a></h3><p>Redis的全称是：Remote Dictionary.Server，本质上是一个Key-Value类型的内存数据库，很像Memcached，整个数据库统统加载在内存当中进行操作，定期通过异步操作把数据库数据flush到硬盘上进行保存。</p><p>因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。</p><p>Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构，此外单个value的最大限制是1GB，不像 Memcached只能保存1MB的数据，因此Redis可以用来实现很多有用的功能。</p><p>比方说用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务，用他的Set可以做高性能的tag系统等等。</p><p>另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的Memcached来用。 Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。</p><h3 id="_11、redis如何做内存优化" tabindex="-1">11、Redis如何做内存优化？ <a class="header-anchor" href="#_11、redis如何做内存优化" aria-label="Permalink to &quot;11、Redis如何做内存优化？&quot;">​</a></h3><h3 id="_12、redis-集群如何选择数据库" tabindex="-1">12、Redis 集群如何选择数据库？ <a class="header-anchor" href="#_12、redis-集群如何选择数据库" aria-label="Permalink to &quot;12、Redis 集群如何选择数据库？&quot;">​</a></h3><h3 id="_13、定期删除" tabindex="-1">13、定期删除 <a class="header-anchor" href="#_13、定期删除" aria-label="Permalink to &quot;13、定期删除&quot;">​</a></h3><h3 id="_14、内存碎片" tabindex="-1">14、内存碎片 <a class="header-anchor" href="#_14、内存碎片" aria-label="Permalink to &quot;14、内存碎片&quot;">​</a></h3><h3 id="_15、redis-集群之间是如何复制的" tabindex="-1">15、Redis 集群之间是如何复制的？ <a class="header-anchor" href="#_15、redis-集群之间是如何复制的" aria-label="Permalink to &quot;15、Redis 集群之间是如何复制的？&quot;">​</a></h3><h3 id="_16、数据分片模型" tabindex="-1">16、数据分片模型 <a class="header-anchor" href="#_16、数据分片模型" aria-label="Permalink to &quot;16、数据分片模型&quot;">​</a></h3><h3 id="_17、jedis与redisson对比有什么优缺点" tabindex="-1">17、Jedis与Redisson对比有什么优缺点？ <a class="header-anchor" href="#_17、jedis与redisson对比有什么优缺点" aria-label="Permalink to &quot;17、Jedis与Redisson对比有什么优缺点？&quot;">​</a></h3><h3 id="_18、redis事务相关的命令有哪几个" tabindex="-1">18、Redis事务相关的命令有哪几个？ <a class="header-anchor" href="#_18、redis事务相关的命令有哪几个" aria-label="Permalink to &quot;18、Redis事务相关的命令有哪几个？&quot;">​</a></h3><h3 id="_19、使用过redis做异步队列么-你是怎么用的" tabindex="-1">19、使用过Redis做异步队列么，你是怎么用的？ <a class="header-anchor" href="#_19、使用过redis做异步队列么-你是怎么用的" aria-label="Permalink to &quot;19、使用过Redis做异步队列么，你是怎么用的？&quot;">​</a></h3><h3 id="_20、什么是redis" tabindex="-1">20、什么是Redis? <a class="header-anchor" href="#_20、什么是redis" aria-label="Permalink to &quot;20、什么是Redis?&quot;">​</a></h3><h3 id="_21、redis持久化的几种方式" tabindex="-1">21、Redis持久化的几种方式 <a class="header-anchor" href="#_21、redis持久化的几种方式" aria-label="Permalink to &quot;21、Redis持久化的几种方式&quot;">​</a></h3><h3 id="_22、redis回收进程如何工作的" tabindex="-1">22、Redis回收进程如何工作的？ <a class="header-anchor" href="#_22、redis回收进程如何工作的" aria-label="Permalink to &quot;22、Redis回收进程如何工作的？&quot;">​</a></h3><h3 id="_23、redis有哪些适合的场景" tabindex="-1">23、Redis有哪些适合的场景？ <a class="header-anchor" href="#_23、redis有哪些适合的场景" aria-label="Permalink to &quot;23、Redis有哪些适合的场景？&quot;">​</a></h3><h3 id="_24、redis集群如何选择数据库" tabindex="-1">24、Redis集群如何选择数据库？ <a class="header-anchor" href="#_24、redis集群如何选择数据库" aria-label="Permalink to &quot;24、Redis集群如何选择数据库？&quot;">​</a></h3><h3 id="_25、redis常见性能问题和解决方案" tabindex="-1">25、Redis常见性能问题和解决方案： <a class="header-anchor" href="#_25、redis常见性能问题和解决方案" aria-label="Permalink to &quot;25、Redis常见性能问题和解决方案：&quot;">​</a></h3><h3 id="_26、使用redis-有哪些好处" tabindex="-1">26、使用Redis 有哪些好处？ <a class="header-anchor" href="#_26、使用redis-有哪些好处" aria-label="Permalink to &quot;26、使用Redis 有哪些好处？&quot;">​</a></h3><h3 id="_27、redis的回收策略-淘汰策略" tabindex="-1">27、Redis的回收策略（淘汰策略）? <a class="header-anchor" href="#_27、redis的回收策略-淘汰策略" aria-label="Permalink to &quot;27、Redis的回收策略（淘汰策略）?&quot;">​</a></h3><h3 id="_28、jedis与redisson对比有什么优缺点" tabindex="-1">28、Jedis与Redisson对比有什么优缺点？ <a class="header-anchor" href="#_28、jedis与redisson对比有什么优缺点" aria-label="Permalink to &quot;28、Jedis与Redisson对比有什么优缺点？&quot;">​</a></h3><h3 id="_29、进程本身运行需要的内存" tabindex="-1">29、进程本身运行需要的内存 <a class="header-anchor" href="#_29、进程本身运行需要的内存" aria-label="Permalink to &quot;29、进程本身运行需要的内存&quot;">​</a></h3>`,47),o=[n];function d(t,l,E,p,c,h){return s(),a("div",null,o)}const B=e(r,[["render",d]]);export{u as __pageData,B as default};
