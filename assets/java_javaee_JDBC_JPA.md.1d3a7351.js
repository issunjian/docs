import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"JPA","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/JDBC/JPA.md","filePath":"java/javaee/JDBC/JPA.md"}'),p={name:"java/javaee/JDBC/JPA.md"},o=l(`<h1 id="jpa" tabindex="-1">JPA <a class="header-anchor" href="#jpa" aria-label="Permalink to &quot;JPA&quot;">​</a></h1><hr><h2 id="jpa-相关概念" tabindex="-1">JPA 相关概念 <a class="header-anchor" href="#jpa-相关概念" aria-label="Permalink to &quot;JPA 相关概念&quot;">​</a></h2><h3 id="orm-框架" tabindex="-1">ORM 框架 <a class="header-anchor" href="#orm-框架" aria-label="Permalink to &quot;ORM 框架&quot;">​</a></h3><p>(Object Relational Mapping) 建立 Java 程序实体类与数据库表之间的映射关系。使用 ORM 框架进行编程 Java 程序会根据开发者配置，在运行时自动把数据对象持久化到数据库中，比直接使用 JDBC 编程更为方便和强大。</p><p>常见的 ORM 框架有 Hibernate, MyBatis 等。</p><h3 id="jpa-规范" tabindex="-1">JPA 规范 <a class="header-anchor" href="#jpa-规范" aria-label="Permalink to &quot;JPA 规范&quot;">​</a></h3><p>(Java Persistence API) Java 程序和数据库连接的 Java EE 标准，本质上是一种 ORM 规范。使用户不必在 Java 程序中书写 SQL 语句就能直接把数据对象持久化到数据库中，由数据库厂商负责具体实现。</p><h4 id="jdbc-和-jpa-的区别" tabindex="-1">JDBC 和 JPA 的区别 <a class="header-anchor" href="#jdbc-和-jpa-的区别" aria-label="Permalink to &quot;JDBC 和 JPA 的区别&quot;">​</a></h4><ul><li>JDBC 是面向 SQL 的规范和接口，用户仍需要在 java 程序中书写 SQL 语句。</li><li>JPA 是直接面向数据对象的规范和接口，可以通过直接操作对象来实现持久化，大大简化了操作的繁杂度。</li></ul><p>P.S. Hibernate 是符合 JPA 规范的，而 MyBatis 却不符合，因为 MyBatis 还需要书写 SQL 语句。</p><p><a href="https://www.jianshu.com/p/c14640b63653" target="_blank" rel="noreferrer">https://www.jianshu.com/p/c14640b63653</a></p><hr><h2 id="spring-jpa" tabindex="-1">Spring JPA <a class="header-anchor" href="#spring-jpa" aria-label="Permalink to &quot;Spring JPA&quot;">​</a></h2><p>Spring 框架中提供了对数据操作的框架 SpringData ； SpringData 框架下则提供了基于 JPA 标准操作数据的模块 SpringData JPA 。</p><p>import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.Id; import javax.persistence.Table;</p><h3 id="实体类" tabindex="-1">实体类 <a class="header-anchor" href="#实体类" aria-label="Permalink to &quot;实体类&quot;">​</a></h3><p>类</p><p><code>@Entity</code> 声明实体类，自动对应数据库表（必选）</p><p><code>@Table(name = &quot;AUTH_USER&quot;)</code> 声明了数据库实体对应的表名，如果没有默认表名和实体名一致。</p><p>属性</p><p><code>@Id</code> 声明属性对应数据库字段是主键。</p><p><code>@Column(length = 32)</code> 用来声明实体属性的表字段的定义。</p><ol><li>name - 属性对应数据库字段名，默认和属性名称一致。</li><li>length - 属性对应数据库字段长度，默认 255。</li><li>属性对应数据库字段类型会自动推断。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Entity</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Table</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">name</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">AUTH_USER</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UserDO</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Id</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> id;</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Column</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">length</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getId</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> id;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setId</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">id</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.id </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> id;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Entity</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Table</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;AUTH_USER&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDO</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Id</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Long id;</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Column</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Long </span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行时，系统自动将数据表给我们建好了。</p><p>我们要实现一个增加、删除、修改、查询功能的持久层服务，那么我只需要声明一个接口，这个接口继承 org.springframework.data.repository.Repository&lt;T, ID&gt; 接口或者他的子接口就行。这里为了功能的完备，我们继承了 org.springframework.data.jpa.repository.JpaRepository&lt;T, ID&gt; 接口。其中 T 是数据库实体类，ID 是数据库实体类的主键。 然后再简单的在这个接口上增加一个 @Repository 注解就结束了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">Repository</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">UserDao</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">JpaRepository</span><span style="color:#F6F6F4;">&lt;UserDAO, id&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repository</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDao</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JpaRepository</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">UserDAO</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">id</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>UserDO userDO = new UserDO(); userDO.setId(1L); userDO.setName(&quot;风清扬&quot;);</p>`,29),e=[o];function t(c,r,i,y,F,E){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
