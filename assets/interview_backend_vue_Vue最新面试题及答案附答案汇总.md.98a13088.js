import{_ as e,o as a,c as t,V as o}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/vue/Vue最新面试题及答案附答案汇总.md","filePath":"interview/backend/vue/Vue最新面试题及答案附答案汇总.md"}'),r={name:"interview/backend/vue/Vue最新面试题及答案附答案汇总.md"},s=o(`<h3 id="_1、vue常用的修饰符" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1vue%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noreferrer">1、vue常用的修饰符？</a> <a class="header-anchor" href="#_1、vue常用的修饰符" aria-label="Permalink to &quot;[1、vue常用的修饰符？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#1vue常用的修饰符)&quot;">​</a></h3><p><strong>1、</strong> .stop：等同于JavaScript中的event.stopPropagation()，防止事件冒泡；</p><p><strong>2、</strong> .prevent：等同于JavaScript中的event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；</p><p><strong>3、</strong> .capture：与事件冒泡的方向相反，事件捕获由外到内；</p><p><strong>4、</strong> .self：只会触发自己范围内的事件，不包含子元素；</p><p><strong>5、</strong> .once：只会触发一次。</p><h3 id="_2、vue常用的修饰符" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2vue%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noreferrer">2、vue常用的修饰符</a> <a class="header-anchor" href="#_2、vue常用的修饰符" aria-label="Permalink to &quot;[2、vue常用的修饰符](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#2vue常用的修饰符)&quot;">​</a></h3><p><strong>1、</strong> .stop：等同于JavaScript中的event.stopPropagation()，防止事件冒泡；</p><p><strong>2、</strong> .prevent：等同于JavaScript中的event.preventDefault()，防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）；</p><p><strong>3、</strong> .capture：与事件冒泡的方向相反，事件捕获由外到内；</p><p><strong>4、</strong> .self：只会触发自己范围内的事件，不包含子元素；</p><p><strong>5、</strong> .once：只会触发一次。</p><h3 id="_3、vue-router跳转和location-href有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3vue-router%E8%B7%B3%E8%BD%AC%E5%92%8Clocationhref%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、Vue-router跳转和location.href有什么区别</a> <a class="header-anchor" href="#_3、vue-router跳转和location-href有什么区别" aria-label="Permalink to &quot;[3、Vue-router跳转和location.href有什么区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#3vue-router跳转和locationhref有什么区别)&quot;">​</a></h3><p><strong>1、</strong> 使用location.href=&#39;/url&#39;来跳转，简单方便，但是刷新了页面；</p><p><strong>2、</strong> 使用history.pushState(&#39;/url&#39;)，无刷新页面，静态跳转；</p><p><strong>3、</strong> 引进router，然后使用router.push(&#39;/url&#39;)来跳转，使用了diff算法，实现了按需加载，减少了dom的消耗。</p><p><strong>4、</strong> 其实使用router跳转和使用history.pushState()没什么差别的，因为vue-router就是用了history.pushState()，尤其是在history模式下。</p><h3 id="_4、简单说一下vue2-x响应式数据原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E7%AE%80%E5%8D%95%E8%AF%B4%E4%B8%80%E4%B8%8Bvue2x%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">4、简单说一下Vue2.x响应式数据原理</a> <a class="header-anchor" href="#_4、简单说一下vue2-x响应式数据原理" aria-label="Permalink to &quot;[4、简单说一下Vue2.x响应式数据原理](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#4简单说一下vue2x响应式数据原理)&quot;">​</a></h3><p>Vue在初始化数据时，会使用<code>Object.defineProperty</code>重新定义data中的所有属性，当页面使用对应属性时，首先会进行依赖收集(收集当前组件的<code>watcher</code>)如果属性发生变化会通知相关依赖进行更新操作(<code>发布订阅</code>)。</p><h3 id="_5、vuex有哪几种属性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5vuex%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">5、vuex有哪几种属性？</a> <a class="header-anchor" href="#_5、vuex有哪几种属性" aria-label="Permalink to &quot;[5、vuex有哪几种属性？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#5vuex有哪几种属性)&quot;">​</a></h3><p>有五种，分别是 State、 Getter、Mutation 、Action、 Module</p><p><strong>1、</strong> state =&gt; 基本数据(数据源存放地)</p><p><strong>2、</strong> getters =&gt; 从基本数据派生出来的数据</p><p><strong>3、</strong> mutations =&gt; 提交更改数据的方法，同步！</p><p><strong>4、</strong> actions =&gt; 像一个装饰器，包裹mutations，使之可以异步。</p><p><strong>5、</strong> modules =&gt; 模块化Vuex</p><h3 id="_6、路由跳转和location-href的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E5%92%8Clocationhref%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、路由跳转和location.href的区别？</a> <a class="header-anchor" href="#_6、路由跳转和location-href的区别" aria-label="Permalink to &quot;[6、路由跳转和location.href的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#6路由跳转和locationhref的区别)&quot;">​</a></h3><p>使用location.href=&#39;/url&#39;来跳转，简单方便，但是刷新了页面；</p><p>使用路由方式跳转，无刷新页面，静态跳转；</p><h3 id="_7、销毁过程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E9%94%80%E6%AF%81%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">7、销毁过程</a> <a class="header-anchor" href="#_7、销毁过程" aria-label="Permalink to &quot;[7、销毁过程](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#7销毁过程)&quot;">​</a></h3><p><code>父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</code></p><h3 id="_8、什么是vue生命周期" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E4%BB%80%E4%B9%88%E6%98%AFvue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noreferrer">8、什么是vue生命周期？</a> <a class="header-anchor" href="#_8、什么是vue生命周期" aria-label="Permalink to &quot;[8、什么是vue生命周期？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#8什么是vue生命周期)&quot;">​</a></h3><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p><h3 id="_9、用纯js编写一个程序来反转字符串" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E7%94%A8%E7%BA%AFjs%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E6%9D%A5%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noreferrer">9、用纯JS编写一个程序来反转字符串</a> <a class="header-anchor" href="#_9、用纯js编写一个程序来反转字符串" aria-label="Permalink to &quot;[9、用纯JS编写一个程序来反转字符串](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#9用纯js编写一个程序来反转字符串)&quot;">​</a></h3><p>使用内置函数：内置函数reverse()直接反转字符串。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">str=&quot;jQuery&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">str = str.split(&quot;&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">str = str.reverse()</span></span>
<span class="line"><span style="color:#f6f6f4;">str = str.join(&quot;&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">alert(str);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">str=&quot;jQuery&quot;;</span></span>
<span class="line"><span style="color:#24292e;">str = str.split(&quot;&quot;)</span></span>
<span class="line"><span style="color:#24292e;">str = str.reverse()</span></span>
<span class="line"><span style="color:#24292e;">str = str.join(&quot;&quot;)</span></span>
<span class="line"><span style="color:#24292e;">alert(str);</span></span></code></pre></div><p>首先将字符串拆分为数组，然后反转数组，最近将字符连接起来形成字符串。 使用循环:首先，计算字符串中的字符数，然后对原始字符串应用递减循环，该循环从最后一个字符开始，打印每个字符，直到count变为零。</p><h3 id="_10、分别简述computed和watch的使用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E5%88%86%E5%88%AB%E7%AE%80%E8%BF%B0computed%E5%92%8Cwatch%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">10、分别简述computed和watch的使用场景</a> <a class="header-anchor" href="#_10、分别简述computed和watch的使用场景" aria-label="Permalink to &quot;[10、分别简述computed和watch的使用场景](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新面试题及答案附答案汇总.md#10分别简述computed和watch的使用场景)&quot;">​</a></h3><p><strong>computed:</strong></p><p>当一个属性受多个属性影响的时候就需要用到computed</p><p>最典型的栗子： 购物车商品结算的时候</p><p><strong>watch:</strong></p><p>当一条数据影响多条数据的时候就需要用watch</p><p>栗子：搜索数据</p><h3 id="_11、数组去重复的方法有哪些" tabindex="-1">11、数组去重复的方法有哪些 <a class="header-anchor" href="#_11、数组去重复的方法有哪些" aria-label="Permalink to &quot;11、数组去重复的方法有哪些&quot;">​</a></h3><h3 id="_12、cancas和svg的是什么以及区别" tabindex="-1">12、cancas和SVG的是什么以及区别 <a class="header-anchor" href="#_12、cancas和svg的是什么以及区别" aria-label="Permalink to &quot;12、cancas和SVG的是什么以及区别&quot;">​</a></h3><h3 id="_13、解释一下-use-strict" tabindex="-1">13、解释一下 &quot;use strict&quot; ? “ <a class="header-anchor" href="#_13、解释一下-use-strict" aria-label="Permalink to &quot;13、解释一下 &quot;use strict&quot; ? “&quot;">​</a></h3><h3 id="_14、vue更新数组时触发视图更新的方法" tabindex="-1">14、vue更新数组时触发视图更新的方法 <a class="header-anchor" href="#_14、vue更新数组时触发视图更新的方法" aria-label="Permalink to &quot;14、vue更新数组时触发视图更新的方法&quot;">​</a></h3><h3 id="_15、js中的array-splice-和array-slice-方法有什么区别" tabindex="-1">15、JS中的Array.splice()和Array.slice()方法有什么区别 <a class="header-anchor" href="#_15、js中的array-splice-和array-slice-方法有什么区别" aria-label="Permalink to &quot;15、JS中的Array.splice()和Array.slice()方法有什么区别&quot;">​</a></h3><h3 id="_16、再说一下computed和watch" tabindex="-1">16、再说一下Computed和Watch <a class="header-anchor" href="#_16、再说一下computed和watch" aria-label="Permalink to &quot;16、再说一下Computed和Watch&quot;">​</a></h3><h3 id="_17、什么是观察者" tabindex="-1">17、什么是观察者？ <a class="header-anchor" href="#_17、什么是观察者" aria-label="Permalink to &quot;17、什么是观察者？&quot;">​</a></h3><h3 id="_18、vue中双向数据绑定是如何实现的" tabindex="-1">18、Vue中双向数据绑定是如何实现的？ <a class="header-anchor" href="#_18、vue中双向数据绑定是如何实现的" aria-label="Permalink to &quot;18、Vue中双向数据绑定是如何实现的？&quot;">​</a></h3><h3 id="_19、nexttick知道吗-实现原理是什么" tabindex="-1">19、nextTick知道吗，实现原理是什么？ <a class="header-anchor" href="#_19、nexttick知道吗-实现原理是什么" aria-label="Permalink to &quot;19、nextTick知道吗，实现原理是什么？&quot;">​</a></h3><h3 id="_20、如何在javascript中每x秒调用一个函数" tabindex="-1">20、如何在JavaScript中每x秒调用一个函数 <a class="header-anchor" href="#_20、如何在javascript中每x秒调用一个函数" aria-label="Permalink to &quot;20、如何在JavaScript中每x秒调用一个函数&quot;">​</a></h3><h3 id="_21、vue里面router-link在电脑上有用-在安卓上没反应怎么解决" tabindex="-1">21、Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？ <a class="header-anchor" href="#_21、vue里面router-link在电脑上有用-在安卓上没反应怎么解决" aria-label="Permalink to &quot;21、Vue里面router-link在电脑上有用，在安卓上没反应怎么解决？&quot;">​</a></h3><h3 id="_22、vue的实现原理" tabindex="-1">22、vue的实现原理？ <a class="header-anchor" href="#_22、vue的实现原理" aria-label="Permalink to &quot;22、vue的实现原理？&quot;">​</a></h3><h3 id="_23、什么是生命周期hook-列出一些生命周期hook。" tabindex="-1">23、什么是生命周期hook？列出一些生命周期hook。 <a class="header-anchor" href="#_23、什么是生命周期hook-列出一些生命周期hook。" aria-label="Permalink to &quot;23、什么是生命周期hook？列出一些生命周期hook。&quot;">​</a></h3><h3 id="_24、js-中的主要有哪几类错误" tabindex="-1">24、JS 中的主要有哪几类错误 <a class="header-anchor" href="#_24、js-中的主要有哪几类错误" aria-label="Permalink to &quot;24、JS 中的主要有哪几类错误&quot;">​</a></h3><h3 id="_25、v-show和v-if指令的共同点和不同点" tabindex="-1">25、v-show和v-if指令的共同点和不同点？ <a class="header-anchor" href="#_25、v-show和v-if指令的共同点和不同点" aria-label="Permalink to &quot;25、v-show和v-if指令的共同点和不同点？&quot;">​</a></h3><h3 id="_26、vuex是什么-怎么使用-哪种功能场景使用它" tabindex="-1">26、vuex是什么？怎么使用？哪种功能场景使用它？ <a class="header-anchor" href="#_26、vuex是什么-怎么使用-哪种功能场景使用它" aria-label="Permalink to &quot;26、vuex是什么？怎么使用？哪种功能场景使用它？&quot;">​</a></h3><h3 id="_27、如何将-js-日期转换为iso标准" tabindex="-1">27、如何将 JS 日期转换为ISO标准 <a class="header-anchor" href="#_27、如何将-js-日期转换为iso标准" aria-label="Permalink to &quot;27、如何将 JS 日期转换为ISO标准&quot;">​</a></h3><h3 id="_28、什么是动态-prop" tabindex="-1">28、什么是动态 prop？ <a class="header-anchor" href="#_28、什么是动态-prop" aria-label="Permalink to &quot;28、什么是动态 prop？&quot;">​</a></h3>`,62),n=[s];function u(l,i,c,h,E,p){return a(),t("div",null,n)}const b=e(r,[["render",u]]);export{A as __pageData,b as default};
