import{_ as a,o as e,c as r,V as o}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/mysql/mysql-05.md","filePath":"interview/backend/mysql/mysql-05.md"}'),t={name:"interview/backend/mysql/mysql-05.md"},s=o('<h3 id="_1、now-和current-date-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#1now%E5%92%8Ccurrent_date%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、NOW（）和CURRENT_DATE（）有什么区别？</a> <a class="header-anchor" href="#_1、now-和current-date-有什么区别" aria-label="Permalink to &quot;[1、NOW（）和CURRENT_DATE（）有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#1now和current_date有什么区别)&quot;">​</a></h3><p>NOW（）命令用于显示当前年份，月份，日期，小时，分钟和秒。</p><p>CURRENT_DATE（）仅显示当前年份，月份和日期。</p><h3 id="_2、char和varchar的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#2char%E5%92%8Cvarchar%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、CHAR和VARCHAR的区别？</a> <a class="header-anchor" href="#_2、char和varchar的区别" aria-label="Permalink to &quot;[2、CHAR和VARCHAR的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#2char和varchar的区别)&quot;">​</a></h3><p>1.CHAR和VARCHAR类型在存储和检索方面有所不同</p><p>2.CHAR列长度固定为创建表时声明的长度，长度值范围是1到255</p><p>当CHAR值被存储时，它们被用空格填充到特定长度，检索CHAR值时需删除尾随空格。</p><h3 id="_3、主键索引与唯一索引的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#3%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E4%B8%8E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、主键索引与唯一索引的区别</a> <a class="header-anchor" href="#_3、主键索引与唯一索引的区别" aria-label="Permalink to &quot;[3、主键索引与唯一索引的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#3主键索引与唯一索引的区别)&quot;">​</a></h3><p><strong>1、</strong> 主键是一种约束，唯一索引是一种索引，两者在本质上是不同的。</p><p><strong>2、</strong> 主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。</p><p><strong>3、</strong> 唯一性索引列允许空值，而主键列不允许为空值。</p><p><strong>4、</strong> 主键列在创建时，已经默认为空值 ++ 唯一索引了。</p><p><strong>5、</strong> 一个表最多只能创建一个主键，但可以创建多个唯一索引。</p><p><strong>6、</strong> 主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。</p><p><strong>7、</strong> 主键可以被其他表引用为外键，而唯一索引不能。 ？</p><h3 id="_4、mysql中有哪些不同的表格" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#4mysql%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E7%9A%84%E8%A1%A8%E6%A0%BC" target="_blank" rel="noreferrer">4、MySQL中有哪些不同的表格？</a> <a class="header-anchor" href="#_4、mysql中有哪些不同的表格" aria-label="Permalink to &quot;[4、MySQL中有哪些不同的表格？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#4mysql中有哪些不同的表格)&quot;">​</a></h3><p><strong>共有5种类型的表格：</strong></p><p><strong>1、</strong> MyISAM</p><p><strong>2、</strong> Heap</p><p><strong>3、</strong> Merge</p><p><strong>4、</strong> INNODB</p><p><strong>5、</strong> ISAM</p><h3 id="_5、sql的生命周期" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#5sql%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noreferrer">5、SQL的生命周期？</a> <a class="header-anchor" href="#_5、sql的生命周期" aria-label="Permalink to &quot;[5、SQL的生命周期？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#5sql的生命周期)&quot;">​</a></h3><p><strong>1、</strong> 应用服务器与数据库服务器建立一个连接</p><p><strong>2、</strong> 数据库进程拿到请求sql</p><p><strong>3、</strong> 解析并生成执行计划，执行</p><p><strong>4、</strong> 读取数据到内存并进行逻辑处理</p><p><strong>5、</strong> 通过步骤一的连接，发送结果到客户端</p><p><strong>6、</strong> 关掉连接，释放资源</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/5/2/049/50/99_8.png#alt=99%5C_8.png" alt=""></p><h3 id="_6、你怎么看到为表格定义的所有索引" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#6%E4%BD%A0%E6%80%8E%E4%B9%88%E7%9C%8B%E5%88%B0%E4%B8%BA%E8%A1%A8%E6%A0%BC%E5%AE%9A%E4%B9%89%E7%9A%84%E6%89%80%E6%9C%89%E7%B4%A2%E5%BC%95" target="_blank" rel="noreferrer">6、你怎么看到为表格定义的所有索引？</a> <a class="header-anchor" href="#_6、你怎么看到为表格定义的所有索引" aria-label="Permalink to &quot;[6、你怎么看到为表格定义的所有索引？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#6你怎么看到为表格定义的所有索引)&quot;">​</a></h3><p>索引是通过以下方式为表格定义的：</p><p><code>SHOW INDEX FROM &lt;tablename&gt;;</code></p><h3 id="_7、数据库为什么使用b-树而不是b树" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#7%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8b+%E6%A0%91%E8%80%8C%E4%B8%8D%E6%98%AFb%E6%A0%91" target="_blank" rel="noreferrer">7、数据库为什么使用B+树而不是B树</a> <a class="header-anchor" href="#_7、数据库为什么使用b-树而不是b树" aria-label="Permalink to &quot;[7、数据库为什么使用B+树而不是B树](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#7数据库为什么使用b+树而不是b树)&quot;">​</a></h3><p><strong>1、</strong> B树只适合随机检索，而B+树同时支持随机检索和顺序检索；</p><p><strong>2、</strong> B+树空间利用率更高，可减少I/O次数，磁盘读写代价更低。一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘I/O消耗。B+树的内部结点并没有指向关键字具体信息的指针，只是作为索引使用，其内部结点比B树小，盘块能容纳的结点中关键字数量更多，一次性读入内存中可以查找的关键字也就越多，相对的，IO读写次数也就降低了。而IO读写次数是影响索引检索效率的最大因素；</p><p><strong>3、</strong> B+树的查询效率更加稳定。B树搜索有可能会在非叶子结点结束，越靠近根节点的记录查找时间越短，只要找到关键字即可确定记录的存在，其性能等价于在关键字全集内做一次二分查找。而在B+树中，顺序检索比较明显，随机检索时，任何关键字的查找都必须走一条从根节点到叶节点的路，所有关键字的查找路径长度相同，导致每一个关键字的查询效率相当。</p><p><strong>4、</strong> B-树在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。B+树的叶子节点使用指针顺序连接在一起，只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作。</p><p><strong>5、</strong> 增删文件（节点）时，效率更高。因为B+树的叶子节点包含所有关键字，并以有序的链表结构存储，这样可很好提高增删效率。</p><h3 id="_8、数据库三大范式是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#8%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、数据库三大范式是什么</a> <a class="header-anchor" href="#_8、数据库三大范式是什么" aria-label="Permalink to &quot;[8、数据库三大范式是什么](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#8数据库三大范式是什么)&quot;">​</a></h3><p>第一范式：每个列都不可以再拆分。</p><p>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。</p><p>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他非主键。</p><p>在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有足够的理由。比如性能。事实上我们经常会为了性能而妥协数据库的设计。</p><h3 id="_9、怎么优化sql查询语句吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#9%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E5%90%97" target="_blank" rel="noreferrer">9、怎么优化SQL查询语句吗</a> <a class="header-anchor" href="#_9、怎么优化sql查询语句吗" aria-label="Permalink to &quot;[9、怎么优化SQL查询语句吗](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#9怎么优化sql查询语句吗)&quot;">​</a></h3><p><strong>1、</strong> 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引</p><p><strong>2、</strong> 用索引可以提高查询</p><p><strong>3、</strong> SELECT子句中避免使用*号，尽量全部大写SQL</p><p><strong>4、</strong> 应尽量避免在 where 子句中对字段进行 is null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，使用 IS NOT NULL</p><p><strong>5、</strong> where 子句中使用 or 来连接条件，也会导致引擎放弃使用索引而进行全表扫描</p><p><strong>6、</strong> in 和 not in 也要慎用，否则会导致全表扫描</p><h3 id="_10、覆盖索引、回表等这些-了解过吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#10%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95%E5%9B%9E%E8%A1%A8%E7%AD%89%E8%BF%99%E4%BA%9B%E4%BA%86%E8%A7%A3%E8%BF%87%E5%90%97" target="_blank" rel="noreferrer">10、覆盖索引、回表等这些，了解过吗？</a> <a class="header-anchor" href="#_10、覆盖索引、回表等这些-了解过吗" aria-label="Permalink to &quot;[10、覆盖索引、回表等这些，了解过吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/MySQL/MySQL最新基础面试题及答案整理.md#10覆盖索引回表等这些了解过吗)&quot;">​</a></h3><p><strong>1、</strong> 覆盖索引： 查询列要被所建的索引覆盖，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。</p><p><strong>2、</strong> 回表：二级索引无法直接查询所有列的数据，所以通过二级索引查询到聚簇索引后，再查询到想要的数据，这种通过二级索引查询出来的过程，就叫做回表。</p><p>网上这篇文章讲得很清晰：</p><p><a href="https://www.jianshu.com/p/8991cbca3854" target="_blank" rel="noreferrer">MySQL覆盖索引与回表</a></p><h3 id="_11、null是什么意思" tabindex="-1">11、NULL是什么意思 <a class="header-anchor" href="#_11、null是什么意思" aria-label="Permalink to &quot;11、NULL是什么意思&quot;">​</a></h3><h3 id="_12、mysql中in-和exists的区别。" tabindex="-1">12、MySQL中in 和exists的区别。 <a class="header-anchor" href="#_12、mysql中in-和exists的区别。" aria-label="Permalink to &quot;12、MySQL中in 和exists的区别。&quot;">​</a></h3><h3 id="_13、500台db-在最快时间之内重启。" tabindex="-1">13、500台db，在最快时间之内重启。 <a class="header-anchor" href="#_13、500台db-在最快时间之内重启。" aria-label="Permalink to &quot;13、500台db，在最快时间之内重启。&quot;">​</a></h3><h3 id="_14、mysql数据库作发布系统的存储-一天五万条以上的增量-预计运维三年-怎么优化" tabindex="-1">14、MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？ <a class="header-anchor" href="#_14、mysql数据库作发布系统的存储-一天五万条以上的增量-预计运维三年-怎么优化" aria-label="Permalink to &quot;14、MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？&quot;">​</a></h3><h3 id="_15、now-和current-date-有什么区别" tabindex="-1">15、NOW（）和CURRENT_DATE（）有什么区别？ <a class="header-anchor" href="#_15、now-和current-date-有什么区别" aria-label="Permalink to &quot;15、NOW（）和CURRENT_DATE（）有什么区别？&quot;">​</a></h3><h3 id="_16、超键、候选键、主键、外键分别是什么" tabindex="-1">16、超键、候选键、主键、外键分别是什么？ <a class="header-anchor" href="#_16、超键、候选键、主键、外键分别是什么" aria-label="Permalink to &quot;16、超键、候选键、主键、外键分别是什么？&quot;">​</a></h3><h3 id="_17、关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" tabindex="-1">17、关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？ <a class="header-anchor" href="#_17、关心过业务系统里面的sql耗时吗-统计过慢查询吗-对慢查询都怎么优化过" aria-label="Permalink to &quot;17、关心过业务系统里面的sql耗时吗？统计过慢查询吗？对慢查询都怎么优化过？&quot;">​</a></h3><h3 id="_18、为什么要使用视图-什么是视图" tabindex="-1">18、为什么要使用视图？什么是视图？ <a class="header-anchor" href="#_18、为什么要使用视图-什么是视图" aria-label="Permalink to &quot;18、为什么要使用视图？什么是视图？&quot;">​</a></h3><h3 id="_19、索引的一些潜规则" tabindex="-1">19、索引的一些潜规则 <a class="header-anchor" href="#_19、索引的一些潜规则" aria-label="Permalink to &quot;19、索引的一些潜规则&quot;">​</a></h3><h3 id="_20、myisamchk是用来做什么的" tabindex="-1">20、myisamchk是用来做什么的？ <a class="header-anchor" href="#_20、myisamchk是用来做什么的" aria-label="Permalink to &quot;20、myisamchk是用来做什么的？&quot;">​</a></h3><h3 id="_21、如何在unix和mysql时间戳之间进行转换" tabindex="-1">21、如何在Unix和MySQL时间戳之间进行转换？ <a class="header-anchor" href="#_21、如何在unix和mysql时间戳之间进行转换" aria-label="Permalink to &quot;21、如何在Unix和MySQL时间戳之间进行转换？&quot;">​</a></h3><h3 id="_22、什么是索引" tabindex="-1">22、什么是索引？ <a class="header-anchor" href="#_22、什么是索引" aria-label="Permalink to &quot;22、什么是索引？&quot;">​</a></h3><h3 id="_23、日常工作中你是怎么优化sql的" tabindex="-1">23、日常工作中你是怎么优化SQL的？ <a class="header-anchor" href="#_23、日常工作中你是怎么优化sql的" aria-label="Permalink to &quot;23、日常工作中你是怎么优化SQL的？&quot;">​</a></h3><h3 id="_24、mysql的主从延迟-你怎么解决" tabindex="-1">24、MYSQL的主从延迟，你怎么解决？ <a class="header-anchor" href="#_24、mysql的主从延迟-你怎么解决" aria-label="Permalink to &quot;24、MYSQL的主从延迟，你怎么解决？&quot;">​</a></h3><h3 id="_25、索引的底层实现" tabindex="-1">25、索引的底层实现 <a class="header-anchor" href="#_25、索引的底层实现" aria-label="Permalink to &quot;25、索引的底层实现&quot;">​</a></h3><h3 id="_26、sql语言包括哪几部分-每部分都有哪些操作关键字" tabindex="-1">26、SQL语言包括哪几部分？每部分都有哪些操作关键字？ <a class="header-anchor" href="#_26、sql语言包括哪几部分-每部分都有哪些操作关键字" aria-label="Permalink to &quot;26、SQL语言包括哪几部分？每部分都有哪些操作关键字？&quot;">​</a></h3><h3 id="_27、500台db-在最快时间之内重启。" tabindex="-1">27、500台db，在最快时间之内重启。 <a class="header-anchor" href="#_27、500台db-在最快时间之内重启。" aria-label="Permalink to &quot;27、500台db，在最快时间之内重启。&quot;">​</a></h3><h3 id="_28、mysql中text数据类型的最大长度" tabindex="-1">28、MySQL中TEXT数据类型的最大长度 <a class="header-anchor" href="#_28、mysql中text数据类型的最大长度" aria-label="Permalink to &quot;28、MySQL中TEXT数据类型的最大长度&quot;">​</a></h3><h3 id="_29、数据库存储日期格式时-如何考虑时区转换问题" tabindex="-1">29、数据库存储日期格式时，如何考虑时区转换问题？ <a class="header-anchor" href="#_29、数据库存储日期格式时-如何考虑时区转换问题" aria-label="Permalink to &quot;29、数据库存储日期格式时，如何考虑时区转换问题？&quot;">​</a></h3>',75),n=[s];function E(l,h,i,d,A,c){return e(),r("div",null,n)}const b=a(t,[["render",E]]);export{m as __pageData,b as default};
