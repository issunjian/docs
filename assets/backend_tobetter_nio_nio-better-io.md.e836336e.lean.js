import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/nio-better-io-20230406180538.8eac7de2.png",o="/docs/assets/why-20230331191748.139238db.png",e="/docs/assets/why-20230404141335.264c899a.png",h=JSON.parse('{"title":"Java NIO 比传统 IO 强在哪里？","description":"本篇内容主要讲述了 NIO 和传统 IO 之间的差异。首先，传统 IO 采用阻塞模型，而 NIO 使用非阻塞模型，通过选择器监控多个通道上的 I/O 事件，从而提升性能与可伸缩性。其次，在文件操作方面，传统 IO 依赖字节流或字符流进行文件读写，而 NIO 则利用通道和缓冲区进行操作，性能优势相对较小。最后，在网络传输方面，传统 IO 使用 Socket 和 ServerSocket，而 NIO 提供了 SocketChannel 和 ServerSocketChannel，支持非阻塞网络传输，进一步增强并发处理能力。","frontmatter":{"title":"Java NIO 比传统 IO 强在哪里？","shortTitle":"NIO比IO强在哪？","category":["Java核心"],"tag":["Java NIO"],"description":"本篇内容主要讲述了 NIO 和传统 IO 之间的差异。首先，传统 IO 采用阻塞模型，而 NIO 使用非阻塞模型，通过选择器监控多个通道上的 I/O 事件，从而提升性能与可伸缩性。其次，在文件操作方面，传统 IO 依赖字节流或字符流进行文件读写，而 NIO 则利用通道和缓冲区进行操作，性能优势相对较小。最后，在网络传输方面，传统 IO 使用 Socket 和 ServerSocket，而 NIO 提供了 SocketChannel 和 ServerSocketChannel，支持非阻塞网络传输，进一步增强并发处理能力。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"java,nio,io,Java NIO, 传统IO, 非阻塞模式, 缓冲区, 通道, 选择器"}]]},"headers":[],"relativePath":"backend/tobetter/nio/nio-better-io.md","filePath":"backend/tobetter/nio/nio-better-io.md"}'),t={name:"backend/tobetter/nio/nio-better-io.md"},c=l("",53),r=[c];function F(y,i,E,C,u,f){return n(),a("div",null,r)}const D=s(t,[["render",F]]);export{h as __pageData,D as default};
