import{_ as a,o as e,c as o,V as r}from"./chunks/framework.c6d8cbec.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-08.md","filePath":"interview/backend/并发编程/并发编程-08.md"}'),t={name:"interview/backend/并发编程/并发编程-08.md"},E=r('<h3 id="_1、zgc收集器中的染色指针有什么用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1zgc%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9F%93%E8%89%B2%E6%8C%87%E9%92%88%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8" target="_blank" rel="noreferrer">1、ZGC收集器中的染色指针有什么用？</a> <a class="header-anchor" href="#_1、zgc收集器中的染色指针有什么用" aria-label="Permalink to &quot;[1、ZGC收集器中的染色指针有什么用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#1zgc收集器中的染色指针有什么用)&quot;">​</a></h3><p>染色指针是一种直接将少量额外的信息存储在指针上的技术，可是为什么指针本身也可以存储额外信息呢？在64位系统中，理论可以访问的内存高达16EB（2的64次幂）字节 [3] 。实际上，基于需求（用不到那么多内存）、性能（地址越宽在做地址转换时需要的页表级数越多）和成本（消耗更多晶体管）的考虑，在AMD64架构 [4] 中只支持到52位（4PB）的地址总线和48位（256TB）的虚拟地址空间，所以目前64位的硬件实际能够支持的最大内存只有256TB。此外，操作系统一侧也还会施加自己的约束，64位的Linux则分别支持47位（128TB）的进程虚拟地址空间和46位（64TB）的物理地址空间，64位的Windows系统甚至只支持44位（16TB）的物理地址空间。尽管Linux下64位指针的高18位不能用来寻址，但剩余的46位指针所能支持的64TB内存在今天仍然能够充分满足大型服务器的需要。鉴于此，ZGC的染色指针技术继续盯上了这剩下的46位指针宽度，将其高4位提取出来存储四个标志信息。通过这些标志位，虚拟机可以直接从指针中看到其引用对象的三色标记状态、是否进入了重分配集（即被移动过）、是否只能通过finalize()方法才能被访问到。当然，由于这些标志位进一步压缩了原本就只有46位的地址空间，也直接导致ZGC能够管理的内存不可以超过4TB（2的42次幂） 。</p><h3 id="_2、什么情况下会发生栈溢出" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E6%A0%88%E6%BA%A2%E5%87%BA" target="_blank" rel="noreferrer">2、什么情况下会发生栈溢出？</a> <a class="header-anchor" href="#_2、什么情况下会发生栈溢出" aria-label="Permalink to &quot;[2、什么情况下会发生栈溢出？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#2什么情况下会发生栈溢出)&quot;">​</a></h3><p>栈的大小可以通过-Xss参数进行设置，当递归层次太深的时候，就会发生栈溢出。比如循环调用，递归等。</p><h3 id="_3、copyonwritearraylist-的设计思想" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3copyonwritearraylist-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3" target="_blank" rel="noreferrer">3、CopyOnWriteArrayList 的设计思想?</a> <a class="header-anchor" href="#_3、copyonwritearraylist-的设计思想" aria-label="Permalink to &quot;[3、CopyOnWriteArrayList 的设计思想?](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#3copyonwritearraylist-的设计思想)&quot;">​</a></h3><p><strong>1、</strong> 读写分离，读和写分开</p><p><strong>2、</strong> 最终一致性</p><p><strong>3、</strong> 使用另外开辟空间的思路，来解决并发冲突</p><h3 id="_4、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E4%B8%BA%E4%BB%80%E4%B9%88-wait,-notify%E5%92%8C-notifyall%E5%BF%85%E9%A1%BB%E5%9C%A8%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E6%88%96%E8%80%85%E5%90%8C%E6%AD%A5%E5%9D%97%E4%B8%AD%E8%A2%AB%E8%B0%83%E7%94%A8" target="_blank" rel="noreferrer">4、为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？</a> <a class="header-anchor" href="#_4、为什么-wait-notify-和-notifyall-必须在同步方法或者同步块中被调用" aria-label="Permalink to &quot;[4、为什么 wait(), notify()和 notifyAll()必须在同步方法或者同步块中被调用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#4为什么-wait,-notify和-notifyall必须在同步方法或者同步块中被调用)&quot;">​</a></h3><p>当一个线程需要调用对象的 wait()方法的时候，这个线程必须拥有该对象的锁，接着它就会释放这个对象锁并进入等待状态直到其他线程调用这个对象上的 notify()方法。同样的，当一个线程需要调用对象的 notify()方法时，它会释放这个对象的锁，以便其他在等待的线程就可以得到这个对象锁。由于所有的这些方法都需要线程持有对象的锁，这样就只能通过同步来实现，所以他们只能在同步方法或者同步块中被调用。</p><h3 id="_5、copyonwritearraylist可以用于什么应用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5copyonwritearraylist%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BA%8E%E4%BB%80%E4%B9%88%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">5、CopyOnWriteArrayList可以用于什么应用场景？</a> <a class="header-anchor" href="#_5、copyonwritearraylist可以用于什么应用场景" aria-label="Permalink to &quot;[5、CopyOnWriteArrayList可以用于什么应用场景？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#5copyonwritearraylist可以用于什么应用场景)&quot;">​</a></h3><p>CopyOnWriteArrayList(免锁容器)的好处之一是当多个迭代器同时遍历和修改这个列表时，不会抛出ConcurrentModificationException。在CopyOnWriteArrayList中，写入将导致创建整个底层数组的副本，而源数组将保留在原地，使得复制的数组在被修改时，读取操作可以安全地执行。</p><p><strong>1、</strong> 由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致young gc或者full gc；</p><p><strong>2、</strong> 不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然CopyOnWriteArrayList 能做到最终一致性,但是还是没法满足实时性要求；</p><p><strong>CopyOnWriteArrayList透露的思想</strong></p><p><strong>1、</strong> 读写分离，读和写分开</p><p><strong>2、</strong> 最终一致性</p><p><strong>3、</strong> 使用另外开辟空间的思路，来解决并发冲突</p><h3 id="_6、线程的-sleep-方法和-yield-方法有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6%E7%BA%BF%E7%A8%8B%E7%9A%84-sleep%E6%96%B9%E6%B3%95%E5%92%8C-yield%E6%96%B9%E6%B3%95%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">6、线程的 sleep()方法和 yield()方法有什么区别？</a> <a class="header-anchor" href="#_6、线程的-sleep-方法和-yield-方法有什么区别" aria-label="Permalink to &quot;[6、线程的 sleep()方法和 yield()方法有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#6线程的-sleep方法和-yield方法有什么区别)&quot;">​</a></h3><p><strong>1、</strong> sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；</p><p><strong>2、</strong> 线程执行 sleep()方法后转入阻塞（blocked）状态，而执行 yield()方法后转入就绪（ready）状态；</p><p><strong>3、</strong> sleep()方法声明抛出 InterruptedException，而 yield()方法没有声明任何异常；</p><p><strong>4、</strong> sleep()方法比 yield()方法（跟操作系统 CPU 调度相关）具有更好的可移植性，通常不建议使用yield()方法来控制并发线程的执行。</p><h3 id="_7、safepoint是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7safepoint%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">7、safepoint是什么？</a> <a class="header-anchor" href="#_7、safepoint是什么" aria-label="Permalink to &quot;[7、safepoint是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#7safepoint是什么)&quot;">​</a></h3><p>STW并不会只发生在内存回收的时候。现在程序员这么卷，碰到几次safepoint的问题几率也是比较大的。</p><p>当发生GC时，用户线程必须全部停下来，才可以进行垃圾回收，这个状态我们可以认为JVM是安全的（safe），整个堆的状态是稳定的。</p><p>如果在GC前，有线程迟迟进入不了safepoint，那么整个JVM都在等待这个阻塞的线程，造成了整体GC的时间变长。</p><h3 id="_8、什么是io密集" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E4%BB%80%E4%B9%88%E6%98%AFio%E5%AF%86%E9%9B%86" target="_blank" rel="noreferrer">8、什么是IO密集</a> <a class="header-anchor" href="#_8、什么是io密集" aria-label="Permalink to &quot;[8、什么是IO密集](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#8什么是io密集)&quot;">​</a></h3><p>IO密集型，即该任务需要大量的IO，即大量的阻塞。在单线程上运行IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待。所以在IO密集型任务中使用多线程可以大大的加速程序运行，即时在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。</p><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h3 id="_9、线程和进程区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、线程和进程区别</a> <a class="header-anchor" href="#_9、线程和进程区别" aria-label="Permalink to &quot;[9、线程和进程区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#9线程和进程区别)&quot;">​</a></h3><p>什么是线程和进程?</p><p><strong>进程</strong></p><p>一个在内存中运行的应用程序。 每个正在系统上运行的程序都是一个进程</p><p><strong>线程</strong></p><p>进程中的一个执行任务（控制单元）， 它负责在程序里独立执行。</p><p>一个进程至少有一个线程，一个进程可以运行多个线程，多个线程可共享数据</p><p><strong>进程与线程的区别</strong></p><p><strong>1、</strong> 根本区别：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位</p><p><strong>2、</strong> 资源开销：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p><p><strong>3、</strong> 包含关系：如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><p><strong>4、</strong> 内存分配：同一进程的线程共享本进程的地址空间和资源，而进程与进程之间的地址空间和资源是相互独立的</p><p><strong>5、</strong> 影响关系：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃有可能导致整个进程都死掉。所以多进程要比多线程健壮。</p><p><strong>6、</strong> 执行过程：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行</p><h3 id="_10、cas-的会产生什么问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10cas-%E7%9A%84%E4%BC%9A%E4%BA%A7%E7%94%9F%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">10、CAS 的会产生什么问题？</a> <a class="header-anchor" href="#_10、cas-的会产生什么问题" aria-label="Permalink to &quot;[10、CAS 的会产生什么问题？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新2021年面试题，高级面试题及附答案解析.md#10cas-的会产生什么问题)&quot;">​</a></h3><p><strong>ABA 问题：</strong></p><p>比如说一个线程 one 从内存位置 V 中取出 A，这时候另一个线程 two 也从内存中取出 A，并且 two 进行了一些操作变成了 B，然后 two 又将 V 位置的数据变成 A，这时候线程 one 进行 CAS 操作发现内存中仍然是 A，然后 one 操作成功。尽管线程 one 的 CAS 操作成功，但可能存在潜藏的问题。从 Java1.5 开始 JDK 的 atomic包里提供了一个类 AtomicStampedReference 来解决 ABA 问题。</p><p><strong>循环时间长开销大：</strong></p><p>对于资源竞争严重（线程冲突严重）的情况，CAS 自旋的概率会比较大，从而浪费更多的 CPU 资源，效率低于 synchronized。</p><p><strong>只能保证一个共享变量的原子操作：</strong></p><p>当对一个共享变量执行操作时，我们可以使用循环 CAS 的方式来保证原子操作，但是对多个共享变量操作时，循环 CAS 就无法保证操作的原子性，这个时候就可以用锁。</p><h3 id="_11、一个线程运行时发生异常会怎样" tabindex="-1">11、一个线程运行时发生异常会怎样？ <a class="header-anchor" href="#_11、一个线程运行时发生异常会怎样" aria-label="Permalink to &quot;11、一个线程运行时发生异常会怎样？&quot;">​</a></h3><h3 id="_12、什么是自旋" tabindex="-1">12、什么是自旋 <a class="header-anchor" href="#_12、什么是自旋" aria-label="Permalink to &quot;12、什么是自旋&quot;">​</a></h3><h3 id="_13、什么是上下文切换" tabindex="-1">13、什么是上下文切换? <a class="header-anchor" href="#_13、什么是上下文切换" aria-label="Permalink to &quot;13、什么是上下文切换?&quot;">​</a></h3><h3 id="_14、对象在哪块内存分配" tabindex="-1">14、对象在哪块内存分配？ <a class="header-anchor" href="#_14、对象在哪块内存分配" aria-label="Permalink to &quot;14、对象在哪块内存分配？&quot;">​</a></h3><h3 id="_15、什么是futuretask-使用executorservice启动任务。" tabindex="-1">15、什么是FutureTask?使用ExecutorService启动任务。 <a class="header-anchor" href="#_15、什么是futuretask-使用executorservice启动任务。" aria-label="Permalink to &quot;15、什么是FutureTask?使用ExecutorService启动任务。&quot;">​</a></h3><h3 id="_16、方法区" tabindex="-1">16、方法区 <a class="header-anchor" href="#_16、方法区" aria-label="Permalink to &quot;16、方法区&quot;">​</a></h3><h3 id="_17、本地方法栈" tabindex="-1">17、本地方法栈 <a class="header-anchor" href="#_17、本地方法栈" aria-label="Permalink to &quot;17、本地方法栈&quot;">​</a></h3><h3 id="_18、synchronizedmap和concurrenthashmap有什么区别" tabindex="-1">18、SynchronizedMap和ConcurrentHashMap有什么区别？ <a class="header-anchor" href="#_18、synchronizedmap和concurrenthashmap有什么区别" aria-label="Permalink to &quot;18、SynchronizedMap和ConcurrentHashMap有什么区别？&quot;">​</a></h3><h3 id="_19、用过concurrenthashmap-讲一下他和hashtable的不同之处" tabindex="-1">19、用过ConcurrentHashMap，讲一下他和HashTable的不同之处？ <a class="header-anchor" href="#_19、用过concurrenthashmap-讲一下他和hashtable的不同之处" aria-label="Permalink to &quot;19、用过ConcurrentHashMap，讲一下他和HashTable的不同之处？&quot;">​</a></h3><h3 id="_20、能够找到-reference-chain-的对象-就一定会存活么" tabindex="-1">20、能够找到 Reference Chain 的对象，就一定会存活么？ <a class="header-anchor" href="#_20、能够找到-reference-chain-的对象-就一定会存活么" aria-label="Permalink to &quot;20、能够找到 Reference Chain 的对象，就一定会存活么？&quot;">​</a></h3><h3 id="_21、synchronized和reentrantlock的区别" tabindex="-1">21、synchronized和ReentrantLock的区别 <a class="header-anchor" href="#_21、synchronized和reentrantlock的区别" aria-label="Permalink to &quot;21、synchronized和ReentrantLock的区别&quot;">​</a></h3><h3 id="_22、jvm-数据运行区-哪些会造成-oom-的情况" tabindex="-1">22、JVM 数据运行区，哪些会造成 OOM 的情况？ <a class="header-anchor" href="#_22、jvm-数据运行区-哪些会造成-oom-的情况" aria-label="Permalink to &quot;22、JVM 数据运行区，哪些会造成 OOM 的情况？&quot;">​</a></h3><h3 id="_23、类的实例化顺序" tabindex="-1">23、类的实例化顺序 <a class="header-anchor" href="#_23、类的实例化顺序" aria-label="Permalink to &quot;23、类的实例化顺序&quot;">​</a></h3><h3 id="_24、什么是线程池-有哪几种创建方式" tabindex="-1">24、什么是线程池？有哪几种创建方式？ <a class="header-anchor" href="#_24、什么是线程池-有哪几种创建方式" aria-label="Permalink to &quot;24、什么是线程池？有哪几种创建方式？&quot;">​</a></h3><h3 id="_25、java-中怎么获取一份线程-dump-文件-你如何在-java-中获取线程堆栈" tabindex="-1">25、Java 中怎么获取一份线程 dump 文件？你如何在 Java 中获取线程堆栈？ <a class="header-anchor" href="#_25、java-中怎么获取一份线程-dump-文件-你如何在-java-中获取线程堆栈" aria-label="Permalink to &quot;25、Java 中怎么获取一份线程 dump 文件？你如何在 Java 中获取线程堆栈？&quot;">​</a></h3><h3 id="_26、java中垃圾回收有什么目的-什么时候进行垃圾回收" tabindex="-1">26、Java中垃圾回收有什么目的？什么时候进行垃圾回收？ <a class="header-anchor" href="#_26、java中垃圾回收有什么目的-什么时候进行垃圾回收" aria-label="Permalink to &quot;26、Java中垃圾回收有什么目的？什么时候进行垃圾回收？&quot;">​</a></h3><h3 id="_27、synchronized、volatile、cas-比较" tabindex="-1">27、synchronized、volatile、CAS 比较 <a class="header-anchor" href="#_27、synchronized、volatile、cas-比较" aria-label="Permalink to &quot;27、synchronized、volatile、CAS 比较&quot;">​</a></h3><h3 id="_28、程序计数器" tabindex="-1">28、程序计数器 <a class="header-anchor" href="#_28、程序计数器" aria-label="Permalink to &quot;28、程序计数器&quot;">​</a></h3><h3 id="_29、对象分配内存是否线程安全" tabindex="-1">29、对象分配内存是否线程安全？ <a class="header-anchor" href="#_29、对象分配内存是否线程安全" aria-label="Permalink to &quot;29、对象分配内存是否线程安全？&quot;">​</a></h3><h3 id="_30、谈谈双亲委派模型" tabindex="-1">30、谈谈双亲委派模型 <a class="header-anchor" href="#_30、谈谈双亲委派模型" aria-label="Permalink to &quot;30、谈谈双亲委派模型&quot;">​</a></h3><h3 id="_31、为什么使用executor框架比使用应用创建和管理线程好" tabindex="-1">31、为什么使用Executor框架比使用应用创建和管理线程好？ <a class="header-anchor" href="#_31、为什么使用executor框架比使用应用创建和管理线程好" aria-label="Permalink to &quot;31、为什么使用Executor框架比使用应用创建和管理线程好？&quot;">​</a></h3><h3 id="_32、gc-是什么-为什么要有-gc" tabindex="-1">32、GC 是什么? 为什么要有 GC <a class="header-anchor" href="#_32、gc-是什么-为什么要有-gc" aria-label="Permalink to &quot;32、GC 是什么? 为什么要有 GC&quot;">​</a></h3>',73),n=[E];function s(i,B,A,l,h,c){return e(),o("div",null,n)}const u=a(t,[["render",s]]);export{p as __pageData,u as default};
