import{_ as a,o as e,c as o,V as t}from"./chunks/framework.c6d8cbec.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-12.md","filePath":"interview/backend/并发编程/并发编程-12.md"}'),r={name:"interview/backend/并发编程/并发编程-12.md"},E=t('<h3 id="_1、threadlocal是什么-有什么用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#1threadlocal%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8" target="_blank" rel="noreferrer">1、ThreadLocal是什么？有什么用？</a> <a class="header-anchor" href="#_1、threadlocal是什么-有什么用" aria-label="Permalink to &quot;[1、ThreadLocal是什么？有什么用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#1threadlocal是什么有什么用)&quot;">​</a></h3><p>ThreadLocal是一个本地线程副本变量工具类。主要用于将私有线程和该线程存放的副本对象做一个映射，各个线程之间的变量互不干扰，在高并发场景下，可以实现无状态的调用，特别适用于各个线程依赖不通的变量值完成操作的场景。</p><p>简单说ThreadLocal就是一种以空间换时间的做法，在每个Thread里面维护了一个以开地址法实现的ThreadLocal.ThreadLocalMap，把数据进行隔离，数据不共享，自然就没有线程安全方面的问题了。</p><h3 id="_2、说一下-atomic的原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#2%E8%AF%B4%E4%B8%80%E4%B8%8B-atomic%E7%9A%84%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">2、说一下 Atomic的原理？</a> <a class="header-anchor" href="#_2、说一下-atomic的原理" aria-label="Permalink to &quot;[2、说一下 Atomic的原理？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#2说一下-atomic的原理)&quot;">​</a></h3><p>Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。</p><h3 id="_3、内存溢出和内存泄漏的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#3%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%92%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、内存溢出和内存泄漏的区别？</a> <a class="header-anchor" href="#_3、内存溢出和内存泄漏的区别" aria-label="Permalink to &quot;[3、内存溢出和内存泄漏的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#3内存溢出和内存泄漏的区别)&quot;">​</a></h3><p>内存溢出 OutOfMemory，指程序在申请内存时，没有足够的内存空间供其使用。</p><p>内存泄露 Memory Leak，指程序在申请内存后，无法释放已申请的内存空间，内存泄漏最终将导致内存溢出。</p><h3 id="_4、你有哪些手段来排查-oom-的问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#4%E4%BD%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E6%89%8B%E6%AE%B5%E6%9D%A5%E6%8E%92%E6%9F%A5-oom-%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">4、你有哪些手段来排查 OOM 的问题？</a> <a class="header-anchor" href="#_4、你有哪些手段来排查-oom-的问题" aria-label="Permalink to &quot;[4、你有哪些手段来排查 OOM 的问题？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#4你有哪些手段来排查-oom-的问题)&quot;">​</a></h3><p><strong>1、</strong> 增加两个参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump.hprof，当 OOM 发生时自动 dump 堆内存信息到指定目录</p><p><strong>2、</strong> 同时 jstat 查看监控 JVM 的内存和 GC 情况，先观察问题大概出在什么区域</p><p><strong>3、</strong> 使用 MAT 工具载入到 dump 文件，分析大对象的占用情况，比如 HashMap 做缓存未清理，时间长了就会内存溢出，可以把改为弱引用</p><h3 id="_5、jvm垃圾回收机制-何时触发minorgc等操作" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#5jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E4%BD%95%E6%97%B6%E8%A7%A6%E5%8F%91minorgc%E7%AD%89%E6%93%8D%E4%BD%9C" target="_blank" rel="noreferrer">5、JVM垃圾回收机制，何时触发MinorGC等操作</a> <a class="header-anchor" href="#_5、jvm垃圾回收机制-何时触发minorgc等操作" aria-label="Permalink to &quot;[5、JVM垃圾回收机制，何时触发MinorGC等操作](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#5jvm垃圾回收机制何时触发minorgc等操作)&quot;">​</a></h3><p>当young gen中的eden区分配满的时候触发MinorGC(新生代的空间不够放的时候).</p><h3 id="_6、java-中能创建-volatile-数组吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#6java-%E4%B8%AD%E8%83%BD%E5%88%9B%E5%BB%BA-volatile-%E6%95%B0%E7%BB%84%E5%90%97" target="_blank" rel="noreferrer">6、Java 中能创建 volatile 数组吗？</a> <a class="header-anchor" href="#_6、java-中能创建-volatile-数组吗" aria-label="Permalink to &quot;[6、Java 中能创建 volatile 数组吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#6java-中能创建-volatile-数组吗)&quot;">​</a></h3><p>能，Java 中可以创建 volatile 类型数组，不过只是一个指向数组的引用，而不是整个数组。意思是，如果改变引用指向的数组，将会受到 volatile 的保护，但是如果多个线程同时改变数组的元素，volatile 标示符就不能起到之前的保护作用了。</p><h3 id="_7、介绍一下类文件结构吧" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#7%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%90%A7" target="_blank" rel="noreferrer">7、介绍一下类文件结构吧！</a> <a class="header-anchor" href="#_7、介绍一下类文件结构吧" aria-label="Permalink to &quot;[7、介绍一下类文件结构吧！](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#7介绍一下类文件结构吧)&quot;">​</a></h3><p>魔数: 确定这个文件是否为一个能被虚拟机接收的 Class 文件。Class 文件版本 ：Class 文件的版本号，保证编译正常执行。常量池 ：常量池主要存放两大常量：字面量和符号引用。访问标志 ：标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。当前类索引,父类索引 ：类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。接口索引集合 ：接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按implents(如果这个类本身是接口的话则是extends) 后的接口顺序从左到右排列在接口索引集合中。字段表集合 ：描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。方法表集合 ：类中的方法。属性表集合 ：在 Class 文件，字段表，方法表中都可以携带自己的属性表集合。</p><h3 id="_8、java中notify-和-notifyall有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#8java%E4%B8%ADnotify-%E5%92%8C-notifyall%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">8、Java中notify 和 notifyAll有什么区别？</a> <a class="header-anchor" href="#_8、java中notify-和-notifyall有什么区别" aria-label="Permalink to &quot;[8、Java中notify 和 notifyAll有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#8java中notify-和-notifyall有什么区别)&quot;">​</a></h3><p>notify() 方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有用武之地。而notifyAll()唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。</p><h3 id="_9、可以描述一下-class-文件的结构吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#9%E5%8F%AF%E4%BB%A5%E6%8F%8F%E8%BF%B0%E4%B8%80%E4%B8%8B-class-%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E5%90%97" target="_blank" rel="noreferrer">9、可以描述一下 class 文件的结构吗？</a> <a class="header-anchor" href="#_9、可以描述一下-class-文件的结构吗" aria-label="Permalink to &quot;[9、可以描述一下 class 文件的结构吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#9可以描述一下-class-文件的结构吗)&quot;">​</a></h3><p><strong>1、</strong> Class 文件包含了 Java 虚拟机的指令集、符号表、辅助信息的字节码(Byte Code)，是实现跨操作系统和语言无关性的基石之一。</p><p><strong>2、</strong> 一个 Class 文件定义了一个类或接口的信息，是以 8 个字节为单位，没有分隔符，按顺序紧凑排在一起的二进制流。</p><p><strong>3、</strong> 用 &quot;无符号数&quot; 和 &quot;表&quot; 组成的伪结构来存储数据。</p><p><strong>4、</strong> 无符号数：基本数据类型，用来描述数字、索引引用、数量值、字符串值，如u1、u2 分别表示 1 个字节、2 个字节</p><p><strong>10、</strong> 表：无符号数和其他表组成，命名一般以 &quot;_info&quot; 结尾</p><p><strong>组成部分</strong></p><p><strong>1、</strong> 魔数 Magic Number</p><p>Class 文件头 4 个字节，0xCAFEBABE</p><p>作用是确定该文件是 Class 文件</p><p><strong>2、</strong> 版本号</p><p>4 个字节，前 2 个是次版本号 Minor Version，后 2 个主版本号 Major Version</p><p>从 45 (JDK1.0) 开始，如 0x00000032 转十进制就是 50，代表 JDK 6</p><p>低版本的虚拟机跑不了高版本的 Class 文件</p><p><strong>3、</strong> 常量池</p><p>常量容量计数值(constant_pool_count)，u2，从 1 开始。如 0x0016 十进制 22 代表有</p><p>21 项常量</p><p>每项常量都是一个表，目前 17 种</p><p>特点：Class 文件中最大数据项目之一、第一个出现表数据结构</p><p><strong>4、</strong> 访问标志</p><p>2 个字节，表示类或接口的访问标志</p><p><strong>5、</strong> 类索引、父类索引、接口索引集合</p><p>类索引(this_class)、父类索引(super_class)，u2</p><p>接口索引集合(interfaces)，u2 集合</p><p>类索引确定类的全限定名、父类索引确定父类的全限定名、接口索引集合确定实现接口</p><p>索引值在常量池中查找对应的常量</p><p><strong>6、</strong> 字段表(field_info)集合</p><p>描述接口或类申明的变量</p><p>fields_count，u2，表示字段表数量；后面接着相应数量的字段表</p><p>9 种字段访问标志</p><p><strong>7、</strong> 方法表(method_info)集合</p><p><strong>描述接口或类申明的方法</strong></p><p>methods_count，u2，表示方法表数量；后面接着相应数量的方法表</p><p>12 种方法访问标志</p><p><strong>方法表结构与字段表结构一致</strong></p><p><strong>8、</strong> 属性表(attribute_info)集合</p><p>class 文件、字段表、方法表可携带属性集合，描述特有信息</p><p>预定义 29 项属性，可自定义写入不重名属性</p><h3 id="_10、java-程序是怎样运行的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86.md#10java-%E7%A8%8B%E5%BA%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%90%E8%A1%8C%E7%9A%84" target="_blank" rel="noreferrer">10、Java 程序是怎样运行的？</a> <a class="header-anchor" href="#_10、java-程序是怎样运行的" aria-label="Permalink to &quot;[10、Java 程序是怎样运行的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新基础面试题及答案整理.md#10java-程序是怎样运行的)&quot;">​</a></h3><ol><li></li></ol><p>首先通过 Javac 编译器将 <code>.java</code> 转为 JVM 可加载的 <code>.class</code> 字节码文件。</p><ol start="2"><li></li></ol><p>Javac 是由 Java 编写的程序，编译过程可以分为：① 词法解析，通过空格分割出单词、操作符、控制符等信息，形成 token 信息流，传递给语法解析器。② 语法解析，把 token 信息流按照 Java 语法规则组装成语法树。③ 语义分析，检查关键字使用是否合理、类型是否匹配、作用域是否正确等。④ 字节码生成，将前面各个步骤的信息转换为字节码。</p><ol start="3"><li></li></ol><p>字节码必须通过类加载过程加载到 JVM 后才可以执行，执行有三种模式，解释执行、JIT 编译执行、JIT 编译与解释器混合执行（主流 JVM 默认执行的方式）。混合模式的优势在于解释器在启动时先解释执行，省去编译时间。</p><ol start="4"><li></li></ol><p>之后通过即时编译器 JIT 把字节码文件编译成本地机器码。</p><ol start="5"><li></li></ol><p>Java 程序最初都是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会认定其为&quot;热点代码&quot;，热点代码的检测主要有基于采样和基于计数器两种方式，为了提高热点代码的执行效率，虚拟机会把它们编译成本地机器码，尽可能对代码优化，在运行时完成这个任务的后端编译器被称为即时编译器。</p><ol start="6"><li></li></ol><p>还可以通过静态的提前编译器 AOT 直接把程序编译成与目标机器指令集相关的二进制代码。</p><h3 id="_11、什么是aqs" tabindex="-1">11、什么是AQS <a class="header-anchor" href="#_11、什么是aqs" aria-label="Permalink to &quot;11、什么是AQS&quot;">​</a></h3><h3 id="_12、什么是并发容器的实现" tabindex="-1">12、什么是并发容器的实现？ <a class="header-anchor" href="#_12、什么是并发容器的实现" aria-label="Permalink to &quot;12、什么是并发容器的实现？&quot;">​</a></h3><h3 id="_13、本地方法区-线程私有" tabindex="-1">13、本地方法区(线程私有) <a class="header-anchor" href="#_13、本地方法区-线程私有" aria-label="Permalink to &quot;13、本地方法区(线程私有)&quot;">​</a></h3><h3 id="_14、类加载是什么" tabindex="-1">14、类加载是什么？ <a class="header-anchor" href="#_14、类加载是什么" aria-label="Permalink to &quot;14、类加载是什么？&quot;">​</a></h3><h3 id="_15、复制算法-copying" tabindex="-1">15、复制算法（copying） <a class="header-anchor" href="#_15、复制算法-copying" aria-label="Permalink to &quot;15、复制算法（copying）&quot;">​</a></h3><h3 id="_16、垃圾收集算法" tabindex="-1">16、垃圾收集算法 <a class="header-anchor" href="#_16、垃圾收集算法" aria-label="Permalink to &quot;16、垃圾收集算法&quot;">​</a></h3><h3 id="_17、jvm-的内存模型以及分区情况和作用" tabindex="-1">17、JVM 的内存模型以及分区情况和作用 <a class="header-anchor" href="#_17、jvm-的内存模型以及分区情况和作用" aria-label="Permalink to &quot;17、JVM 的内存模型以及分区情况和作用&quot;">​</a></h3><h3 id="_18、为什么wait和notify方法要在同步块中调用" tabindex="-1">18、为什么wait和notify方法要在同步块中调用？ <a class="header-anchor" href="#_18、为什么wait和notify方法要在同步块中调用" aria-label="Permalink to &quot;18、为什么wait和notify方法要在同步块中调用？&quot;">​</a></h3><h3 id="_19、java中interrupted-和-isinterrupted方法的区别" tabindex="-1">19、Java中interrupted 和 isInterrupted方法的区别？ <a class="header-anchor" href="#_19、java中interrupted-和-isinterrupted方法的区别" aria-label="Permalink to &quot;19、Java中interrupted 和 isInterrupted方法的区别？&quot;">​</a></h3><h3 id="_20、有哪些-gc-算法" tabindex="-1">20、有哪些 GC 算法？ <a class="header-anchor" href="#_20、有哪些-gc-算法" aria-label="Permalink to &quot;20、有哪些 GC 算法？&quot;">​</a></h3><h3 id="_21、可达性分析" tabindex="-1">21、可达性分析 <a class="header-anchor" href="#_21、可达性分析" aria-label="Permalink to &quot;21、可达性分析&quot;">​</a></h3><h3 id="_22、java的双亲委托机制是什么" tabindex="-1">22、Java的双亲委托机制是什么？ <a class="header-anchor" href="#_22、java的双亲委托机制是什么" aria-label="Permalink to &quot;22、Java的双亲委托机制是什么？&quot;">​</a></h3><h3 id="_23、线程的调度策略" tabindex="-1">23、线程的调度策略 <a class="header-anchor" href="#_23、线程的调度策略" aria-label="Permalink to &quot;23、线程的调度策略&quot;">​</a></h3><h3 id="_24、线程池中-submit-和-execute-方法有什么区别" tabindex="-1">24、线程池中 submit() 和 execute() 方法有什么区别？ <a class="header-anchor" href="#_24、线程池中-submit-和-execute-方法有什么区别" aria-label="Permalink to &quot;24、线程池中 submit() 和 execute() 方法有什么区别？&quot;">​</a></h3><h3 id="_25、对象分配规则" tabindex="-1">25、对象分配规则 <a class="header-anchor" href="#_25、对象分配规则" aria-label="Permalink to &quot;25、对象分配规则&quot;">​</a></h3><h3 id="_26、java中用到的线程调度算法是什么" tabindex="-1">26、Java中用到的线程调度算法是什么？ <a class="header-anchor" href="#_26、java中用到的线程调度算法是什么" aria-label="Permalink to &quot;26、Java中用到的线程调度算法是什么？&quot;">​</a></h3><h3 id="_27、java里有哪些引用类型" tabindex="-1">27、Java里有哪些引用类型？ <a class="header-anchor" href="#_27、java里有哪些引用类型" aria-label="Permalink to &quot;27、Java里有哪些引用类型？&quot;">​</a></h3><h3 id="_28、字符串常量存放在哪个区域" tabindex="-1">28、字符串常量存放在哪个区域？ <a class="header-anchor" href="#_28、字符串常量存放在哪个区域" aria-label="Permalink to &quot;28、字符串常量存放在哪个区域？&quot;">​</a></h3><h3 id="_29、什么是本地方法栈" tabindex="-1">29、什么是本地方法栈 <a class="header-anchor" href="#_29、什么是本地方法栈" aria-label="Permalink to &quot;29、什么是本地方法栈&quot;">​</a></h3><h3 id="_30、notify-和-notifyall-有什么区别" tabindex="-1">30、notify() 和 notifyAll() 有什么区别？ <a class="header-anchor" href="#_30、notify-和-notifyall-有什么区别" aria-label="Permalink to &quot;30、notify() 和 notifyAll() 有什么区别？&quot;">​</a></h3><h3 id="_31、说说java-垃圾回收机制" tabindex="-1">31、说说Java 垃圾回收机制 <a class="header-anchor" href="#_31、说说java-垃圾回收机制" aria-label="Permalink to &quot;31、说说Java 垃圾回收机制&quot;">​</a></h3><h3 id="_32、多线程应用场景" tabindex="-1">32、多线程应用场景 <a class="header-anchor" href="#_32、多线程应用场景" aria-label="Permalink to &quot;32、多线程应用场景&quot;">​</a></h3>',93),s=[E];function l(n,i,h,B,d,c){return e(),o("div",null,s)}const A=a(r,[["render",l]]);export{p as __pageData,A as default};
