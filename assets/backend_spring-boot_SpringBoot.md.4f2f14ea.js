import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring-boot/SpringBoot.md","filePath":"backend/spring-boot/SpringBoot.md"}'),p={name:"backend/spring-boot/SpringBoot.md"},o=l(`<h2 id="springbootweb请求响应" tabindex="-1">SpringBootWeb请求响应 <a class="header-anchor" href="#springbootweb请求响应" aria-label="Permalink to &quot;SpringBootWeb请求响应&quot;">​</a></h2><h2 id="今日目标" tabindex="-1">今日目标 <a class="header-anchor" href="#今日目标" aria-label="Permalink to &quot;今日目标&quot;">​</a></h2><p>目标</p><ul><li>能够编写 SpringBoot 入门案例 ❤️ ✏️</li><li>能够理解Http协议相关概念 🍐</li><li>能够使用Tomcat运行Web项目 ✏️ 🚀</li></ul><p>知识储备</p><ol><li>理解前端为什么要工程化</li><li>理解在开发过程中要导入其他人开发的java代码，提高开发效率</li><li>曾经有过包名名字随意的经历</li><li>在前端课程中完成过，异步请求的入门案例，能理解前后端交互的场景</li><li>对于曾经分享过资源给他人，并因此而感到快乐</li></ol><h2 id="_06-web入门课程介绍" tabindex="-1">06. web入门课程介绍 <a class="header-anchor" href="#_06-web入门课程介绍" aria-label="Permalink to &quot;06\\. web入门课程介绍&quot;">​</a></h2><p>问题</p><ol><li>为什么要学习SpringBoot？</li></ol><p>点击查看代码</p><p>通过springboot就可以快速的帮我们构建应用程序，springboot最大的特点 ：</p><ul><li>简化配置</li><li>快速开发</li><li>企业开发主流</li></ul><p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p><p>Spring的官方提供很多开源的项目，我们可以点击上面的projects，看到spring家族旗下的项目，按照流行程度排序为：</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220617222925923-2cb418f2.png" alt=""></p><p>Spring发展到今天已经形成了一种<strong>开发生态圈</strong>，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220617222609699-7dd84ee3.png" alt=""></p><p>而Spring家族旗下这么多的技术，。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220617224427947-553d0e6e.png" alt=""></p><p><strong>而如果我们在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。</strong> ⚠️ ⚠️</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220823185227296-61af5a38.png" alt=""></p><p>所以基于此呢，spring官方推荐我们从另外一个项目开始学习，那就是 企业非常实用</p><p>作业</p><ol><li>访问spring官网，借助翻译软件了解Spring的简介</li><li>借助翻译软件，了解4个的Spring子项目的作用和应用场景</li></ol><h2 id="_07-springboot快速入门-❤️-👈" tabindex="-1">07. SpringBoot快速入门 ❤️ 👈 <a class="header-anchor" href="#_07-springboot快速入门-❤️-👈" aria-label="Permalink to &quot;07\\. SpringBoot快速入门 ❤️ 👈&quot;">​</a></h2><h3 id="_7-1-需求" tabindex="-1">7.1 需求 <a class="header-anchor" href="#_7-1-需求" aria-label="Permalink to &quot;7.1 需求&quot;">​</a></h3><p>需求</p><ol><li>基于SpringBoot的方式开发一个web应用，浏览器发起请求/hello后，给浏览器返回字符串 “Hello World ~”。</li></ol><p><img src="http://www.yangeit.cn:21010/assets/image-20220823191003444-126c69c2.png" alt=""></p><h3 id="_7-2-开发步骤-✏️" tabindex="-1">7.2 开发步骤 ✏️ <a class="header-anchor" href="#_7-2-开发步骤-✏️" aria-label="Permalink to &quot;7.2 开发步骤 ✏️&quot;">​</a></h3><p>步骤</p><ul><li>第1步：创建SpringBoot工程项目</li><li>第2步：定义HelloController类，添加方法hello，并添加注解</li><li>第3步：测试运行</li></ul><h4 id="_7-2-1-创建springboot工程-需要联网" tabindex="-1">7.2.1 创建SpringBoot工程（需要联网） <a class="header-anchor" href="#_7-2-1-创建springboot工程-需要联网" aria-label="Permalink to &quot;7.2.1 创建SpringBoot工程（需要联网）&quot;">​</a></h4><p>基于Spring官方骨架，创建SpringBoot工程。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221201184702136-e5329f7e.png" alt="image-20221201184702136"></p><p>基本信息描述完毕之后，勾选web开发相关依赖。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221201184850248-52c1403e.png" alt="image-20221201184850248"></p><p>点击Finish之后，就会联网创建这个SpringBoot工程，创建好之后，结构如下：</p><ul><li>注意：在联网创建过程中，会下载相关资源(请耐心等待)</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221201185910596-13ab8c53.png" alt="image-20221201185910596"></p><p>image-20221201185910596</p><h4 id="_7-2-2-定义请求处理类" tabindex="-1">7.2.2 定义请求处理类 <a class="header-anchor" href="#_7-2-2-定义请求处理类" aria-label="Permalink to &quot;7.2.2 定义请求处理类&quot;">​</a></h4><p>在com.itheima这个包下创建一个子包controller</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221201190541295-5252d9cc.png" alt="image-20221201190541295"></p><p>然后在controller包下新建一个类：HelloController</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221201190825439-5c222ab2.png" alt="image-20221201190825439"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">com.itheima.controller</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> org.springframework.web.bind.annotation.</span><span style="color:#BF9EEE;font-style:italic;">*</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//表明当前类用来接受web请求</span></span>
<span class="line"><span style="color:#F6F6F4;">@</span><span style="color:#97E1F1;font-style:italic;">RestController</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">HelloController</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 配置访问该方法的路径：localhost:8080/hello</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">RequestMapping</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World ~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello World ~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.itheima.controller;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.springframework.web.bind.annotation.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//表明当前类用来接受web请求</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 配置访问该方法的路径：localhost:8080/hello</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello World ~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello World ~&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_7-2-3-运行测试" tabindex="-1">7.2.3 运行测试 <a class="header-anchor" href="#_7-2-3-运行测试" aria-label="Permalink to &quot;7.2.3 运行测试&quot;">​</a></h4><p>运行SpringBoot自动生成的引导类</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221201191028124-aebbf4f1.png" alt="image-20221201191028124"></p><p>image-20221201191028124</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221201191348924-f6f6d6e5.png" alt="image-20221201191348924"></p><p>image-20221201191348924</p><p>打开浏览器，输入 <code>http://localhost:8080/hello</code></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220823195048415-de0f7d4f.png" alt=""></p><p>作业</p><p>🚩 根据上述的步骤，创建一个SpringBoot项目，在浏览器访问localhost:8080/csheima 后，控制台输出 spring makes java simple</p><p>完成后，在飞秋班级群中，回复1，表示完成。🎉</p><h3 id="_7-3-web分析" tabindex="-1">7.3 Web分析 <a class="header-anchor" href="#_7-3-web分析" aria-label="Permalink to &quot;7.3 Web分析&quot;">​</a></h3><p>问题</p><ol><li>网络编程三要素分别？</li><li>浏览器和服务器两端进行数据交互，使用什么协议？</li></ol><p>点击查看代码</p><ul><li><p>👉 问题1： ip、端口、协议</p><ul><li>IP ：网络中计算机的唯一标识</li><li>端口 ：计算机中运行程序的唯一标识</li><li>协议 ：网络中计算机之间交互的规则</li></ul></li><li><p>👉 问题2：http协议</p></li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221201224603497-d404437c.png" alt="image-20221201224603497"></p><p>image-20221201224603497</p><p>点击查看图解说明</p><p>📱浏览器：</p><ul><li><p>输入网址：<code>http://192.168.100.11:8080/hello</code></p><ul><li><p>通过IP地址192.168.100.11定位到网络上的一台计算机</p><blockquote><p>我们之前在浏览器中输入的localhost，就是127.0.0.1（本机）</p></blockquote></li><li><p>通过端口号8080找到计算机上运行的程序</p><blockquote><p><code>localhost:8080</code> , 意思是在本地计算机中找到正在运行的8080端口的程序</p></blockquote></li><li><p>/hello是请求资源位置</p><ul><li>资源：对计算机而言资源就是数据 <ul><li>web资源：通过网络可以访问到的资源（通常是指存放在服务器上的数据）</li></ul></li></ul><blockquote><p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是/hello的数据</p><ul><li>8080端口程序，在服务器找/hello位置的资源数据，发给浏览器</li></ul></blockquote></li></ul></li></ul><p>💻 服务器：（可以理解为ServerSocket）</p><ul><li>接收到浏览器发送的信息（如：/hello）</li><li>在服务器上找到/hello的资源</li><li>把资源发送给浏览器</li></ul><h2 id="_08-http协议-🍐" tabindex="-1">08. HTTP协议 🍐 <a class="header-anchor" href="#_08-http协议-🍐" aria-label="Permalink to &quot;08\\. HTTP协议 🍐&quot;">​</a></h2><h3 id="_8-1-http-概述" tabindex="-1">8.1 HTTP-概述 <a class="header-anchor" href="#_8-1-http-概述" aria-label="Permalink to &quot;8.1 HTTP-概述&quot;">​</a></h3><p>问题</p><ol><li>Http协议有哪些特点？</li></ol><p>点击查看代码</p><ul><li><p><strong>基于TCP协议:</strong> 面向连接，安全</p><blockquote><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote></li><li><p><strong>基于请求-响应模型:</strong> 一次请求对应一次响应（先请求后响应）</p><blockquote><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote></li><li><p><strong>HTTP协议是无状态协议:</strong> 对于数据没有记忆能力。每次请求-响应都是独立的</p><blockquote><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p><ul><li><p>缺点: 多次请求间不能共享数据</p></li><li><p>优点: 速度快</p></li><li><p>如：京东购物。加入购物车和去购物车结算是两次请求</p></li><li><p>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</p></li><li><p>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</p></li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用会话技术(Cookie、Session)来解决这个问题。</p></blockquote></li></ul><h4 id="_8-1-1-介绍" tabindex="-1">8.1.1 介绍 <a class="header-anchor" href="#_8-1-1-介绍" aria-label="Permalink to &quot;8.1.1 介绍&quot;">​</a></h4><p><img src="http://www.yangeit.cn:21010/assets/image-20220823200024507-682e7b23.png" alt=""></p><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p><ul><li>1️⃣ http是互联网上应用最为广泛的一种网络协议</li><li>2️⃣ http协议要求：浏览器在向服务器发送请求数据时，或是服务器在向浏览器发送响应数据时，都必须按照固定的格式进行数据传输</li></ul><p>如果想知道http协议的数据传输格式有哪些，可以打开浏览器，点击\`F12\`打开开发者工具，点击\`Network\`来查看</p><p>点击查看步骤</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202105735230-7f78ecb2.png" alt="image-20221202105735230"></p><p>image-20221202105735230</p><p>浏览器向服务器进行请求时：</p><ul><li>服务器按照固定的格式进行解析</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202111044434-8ef95de2.png" alt="image-20221202111044434"></p><p>image-20221202111044434</p><p>服务器向浏览器进行响应时：</p><ul><li>浏览器按照固定的格式进行解析</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202111307819-82e0603d.png" alt="image-20221202111307819"></p><p>image-20221202111307819</p><p>技巧</p><p>学习HTTP主要就是学习请求和响应数据的具体格式内容</p><h3 id="_8-2-http-请求协议" tabindex="-1">8.2 HTTP-请求协议 <a class="header-anchor" href="#_8-2-http-请求协议" aria-label="Permalink to &quot;8.2 HTTP-请求协议&quot;">​</a></h3><p>问题</p><ol><li>Get和Post请求方式有什么区别？</li></ol><p>点击查看</p><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。</td><td></td></tr><tr><td>例：/brand/findAll?name=OPPO&amp;status=1</td><td>请求参数在请求体中</td><td></td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table><p>浏览器和服务器是按照HTTP协议进行数据通信的。</p><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器 <ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器 <ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><p>点击查看HTTP1.1版本中，浏览器访问服务器的几种方式：</p><table><thead><tr><th>请求方式</th><th>请求说明</th></tr></thead><tbody><tr><td></td><td>获取资源。</td></tr><tr><td>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=itheima" target="_blank" rel="noreferrer">http://www.baidu.com/s?wd=itheimaopen in new window</a></td><td></td></tr><tr><td></td><td>传输实体主体。</td></tr><tr><td>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td><td></td></tr><tr><td>OPTIONS</td><td>返回服务器针对特定资源所支持的HTTP请求方式。</td></tr><tr><td>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td><td></td></tr><tr><td>HEAD</td><td>获得报文首部。</td></tr><tr><td>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td><td></td></tr><tr><td>PUT</td><td>传输文件。</td></tr><tr><td>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td><td></td></tr><tr><td>DELETE</td><td>删除文件。</td></tr><tr><td>请求服务器删除Request-URI所标识的资源</td><td></td></tr><tr><td>TRACE</td><td>追踪路径。</td></tr><tr><td>回显服务器收到的请求，主要用于测试或诊断</td><td></td></tr><tr><td>CONNECT</td><td>要求用隧道协议连接代理。</td></tr><tr><td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</td><td></td></tr></tbody></table><p>在我们实际应用中常用的也就是 ：GET、POST</p><p><strong>GET方式的请求协议：</strong></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220823200708026-06315a1e.png" alt=""></p><ul><li><p>请求行 ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p><ul><li>请求方式：GET</li><li>资源路径：/brand/findAll?name=OPPO&amp;status=1 <ul><li>请求路径：/brand/findAll</li><li>请求参数：name=OPPO&amp;status=1 <ul><li>请求参数是以key=value形式出现</li><li>多个请求参数之间使用<code>&amp;</code>连接</li></ul></li><li>请求路径和请求参数之间使用<code>?</code>连接</li></ul></li><li>协议/版本：HTTP/1.1</li></ul></li><li><p>请求头 ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式</p><ul><li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li></ul><p>常见的HTTP请求头有:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Host: 表示请求的主机名</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Content-Type：请求主体的数据类型</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Content-Length：数据主体的大小（单位：字节）</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Host: 表示请求的主机名</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Content-Type：请求主体的数据类型</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Content-Length：数据主体的大小（单位：字节）</span></span></code></pre></div></li></ul><blockquote><p>举例说明：服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求。</p><p>比如:</p><ul><li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li><li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果（这就是我们常说的浏览器兼容问题）</li></ul></blockquote><ul><li>请求体 ：存储请求参数 <ul><li>GET请求的请求参数在请求行中，故不需要设置请求体</li></ul></li></ul><p><strong>POST方式的请求协议：</strong></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220823201303601-e280f7ac.png" alt=""></p><ul><li>请求行 (以上图中红色部分)：包含请求方式、资源路径、协议/版本 <ul><li>请求方式：POST</li><li>资源路径：/brand</li><li>协议/版本：HTTP/1.1</li></ul></li><li>请求头 (以上图中黄色部分)</li><li>请求体 (以上图中绿色部分) ：存储请求参数 <ul><li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li></ul></li></ul><h3 id="_8-3-http-响应协议" tabindex="-1">8.3 HTTP-响应协议 <a class="header-anchor" href="#_8-3-http-响应协议" aria-label="Permalink to &quot;8.3 HTTP-响应协议&quot;">​</a></h3><p>问题</p><ol><li>常用的响应状态码有哪些？</li></ol><p>点击查看代码</p><p>关于响应状态码，我们先主要认识三个状态码，其余的等后期用到了再去掌握：</p><ul><li>200 ok 客户端请求成功</li><li>404 Not Found 请求资源不存在</li><li>500 Internal Server Error 服务端发生不可预期的错误</li></ul><p><a href="http://www.yangeit.cn:21010/expand/responsestatuscode.html" target="_blank" rel="noreferrer">响应状态码详情</a></p><h4 id="_8-3-1-格式介绍" tabindex="-1">8.3.1 格式介绍 <a class="header-anchor" href="#_8-3-1-格式介绍" aria-label="Permalink to &quot;8.3.1 格式介绍&quot;">​</a></h4><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220823202344149-ab49b71f.png" alt=""></p><ul><li><p>(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p><ul><li>协议/版本：HTTP/1.1</li><li>响应状态码：200</li><li>状态码描述：OK</li></ul></li><li><p>(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p><ul><li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样，对方在收到信息后，就可以知道你是谁，你想干什么</li></ul><p>常见的HTTP响应头有:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Content-Length：表示该响应内容的长度（字节数）；</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Content-Encoding：表示该响应压缩算法，例如gzip ；</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Content-Length：表示该响应内容的长度（字节数）；</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Content-Encoding：表示该响应压缩算法，例如gzip ；</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span></span></code></pre></div></li><li><p>(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据</p><ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul></li></ul><h3 id="_8-4-http-协议解析🚀" tabindex="-1">8.4 HTTP-协议解析🚀 <a class="header-anchor" href="#_8-4-http-协议解析🚀" aria-label="Permalink to &quot;8.4 HTTP-协议解析🚀&quot;">​</a></h3><p>问题</p><ol><li>运行web程序，需要开发者编写程序解析Http协议吗？</li></ol><p>点击查看代码</p><p>不需要，直接使用已经开发好的服务器即可。</p><p>点击查看解析Http案例代码</p><p>将资料中准备好的Demo工程，导入到我们的IDEA中，有一个Server.java类，这里面就是自定义的一个服务器代码，主要使用到的是<code>ServerSocket</code>和<code>Socket</code></p><blockquote><p>说明：以下代码大家不需要自己写，我们主要是通过代码，让大家了解到服务器针对HTTP协议的解析机制</p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">com.itheima</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 自定义web服务器</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Server</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> ss </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">8080</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 监听指定端口</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">server is running...</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> sock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ss.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">connected from </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> sock.</span><span style="color:#62E884;">getRemoteSocketAddress</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Handler</span><span style="color:#F6F6F4;">(sock);</span></span>
<span class="line"><span style="color:#F6F6F4;">            t.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Handler</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> sock;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Handler</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">sock</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sock;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> input </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sock.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> output </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sock.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">handle</span><span style="color:#F6F6F4;">(input, output);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.sock.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">ioe</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">client disconnected.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">handle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">input</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">output</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> reader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(input, StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> writer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStreamWriter</span><span style="color:#F6F6F4;">(output, StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 读取HTTP请求:</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> requestOk </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> first </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (first.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">GET / HTTP/1.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            requestOk </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> header </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (header.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">()) { </span><span style="color:#7B7F8B;">// 读取到空行时, HTTP Header读取完毕</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(header);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(requestOk </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Response OK</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Response Error</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">requestOk) {</span><span style="color:#7B7F8B;">// 发送错误响应:</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HTTP/1.0 404 Not Found</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-Length: 0</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span><span style="color:#7B7F8B;">// 发送成功响应:</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">//读取html文件，转换为字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> is </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Server.class.</span><span style="color:#62E884;">getClassLoader</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getResourceAsStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">html/a.html</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> br </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(is));</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">StringBuilder</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StringBuilder</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> br.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">                data.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(line);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            br.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> length </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> data.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(StandardCharsets.UTF_8).length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">HTTP/1.1 200 OK</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Connection: keep-alive</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-Type: text/html</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Content-Length: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> length </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 空行标识Header和Body的分隔</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(data.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            writer.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.itheima;</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;"> * 自定义web服务器</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Server</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        ServerSocket ss </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 监听指定端口</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;server is running...&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            Socket sock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ss.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;connected from &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sock.</span><span style="color:#6F42C1;">getRemoteSocketAddress</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Handler</span><span style="color:#24292E;">(sock);</span></span>
<span class="line"><span style="color:#24292E;">            t.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Handler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Thread</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Socket sock;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Handler</span><span style="color:#24292E;">(Socket </span><span style="color:#E36209;">sock</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sock;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (InputStream input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sock.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             OutputStream output </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sock.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(input, output);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.sock.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">ioe</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;client disconnected.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(InputStream </span><span style="color:#E36209;">input</span><span style="color:#24292E;">, OutputStream </span><span style="color:#E36209;">output</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        BufferedReader reader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(input, StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">        BufferedWriter writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStreamWriter</span><span style="color:#24292E;">(output, StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 读取HTTP请求:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> requestOk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        String first </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (first.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GET / HTTP/1.&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            requestOk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">            String header </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (header.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()) { </span><span style="color:#6A737D;">// 读取到空行时, HTTP Header读取完毕</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(header);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(requestOk </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Response OK&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Response Error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">requestOk) {</span><span style="color:#6A737D;">// 发送错误响应:</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HTTP/1.0 404 Not Found</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Length: 0</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">// 发送成功响应:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//读取html文件，转换为字符串</span></span>
<span class="line"><span style="color:#24292E;">            InputStream is </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Server.class.</span><span style="color:#6F42C1;">getClassLoader</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getResourceAsStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;html/a.html&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            BufferedReader br </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(is));</span></span>
<span class="line"><span style="color:#24292E;">            StringBuilder data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StringBuilder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            String line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> br.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                data.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(line);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            br.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8).length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;HTTP/1.1 200 OK</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Connection: keep-alive</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type: text/html</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Length: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 空行标识Header和Body的分隔</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            writer.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>启动ServerSocket程序：</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202170430928-b3b7631c.png" alt="image-20221202170430928"></p><p>image-20221202170430928</p><p>浏览器输入：<code>http://localhost:8080</code> 就会访问到ServerSocket程序</p><ul><li>ServerSocket程序，会读取服务器上<code>html/a.html</code>文件，并把文件数据发送给浏览器</li><li>浏览器接收到a.html文件中的数据后进行解析，显示以下内容</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202171204705-13b49961.png" alt="image-20221202171204705"></p><p>image-20221202171204705</p><p>现在大家知道了服务器是可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，而在开发中真正用到的Web服务器，我们不会自己写的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220824233452167-6bf28097.png" alt=""></p><h2 id="_09-web服务器-tomcat-🍐🚀" tabindex="-1">09. WEB服务器-Tomcat 🍐🚀 <a class="header-anchor" href="#_09-web服务器-tomcat-🍐🚀" aria-label="Permalink to &quot;09\\. WEB服务器-Tomcat 🍐🚀&quot;">​</a></h2><h3 id="_9-1-简介" tabindex="-1">9.1 简介 <a class="header-anchor" href="#_9-1-简介" aria-label="Permalink to &quot;9.1 简介&quot;">​</a></h3><p>问题</p><ol><li>web服务器有什么作用？</li></ol><p>点击查看</p><ol><li>对http协议进行封装，简化web程序开发。</li><li>部署web项目，对外提供网上信息浏览服务。</li><li>常用的web服务器软件：Tomcat、Jetty、WebLogic</li></ol><h4 id="_9-1-1-服务器概述" tabindex="-1">9.1.1 服务器概述 <a class="header-anchor" href="#_9-1-1-服务器概述" aria-label="Permalink to &quot;9.1.1 服务器概述&quot;">​</a></h4><p><strong>服务器硬件</strong> 💻</p><ul><li>指的也是计算机，只不过服务器要比我们日常使用的计算机大很多。</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202173148317-72091c82.png" alt="image-20221202173148317"></p><p>image-20221202173148317</p><p>服务器，也称伺服器。是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p><p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p><p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p><p>服务器只是一台设备，必须安装服务器软件才能提供相应的服务。</p><p><strong>服务器软件</strong> 💿</p><p>服务器软件：基于ServerSocket编写的程序</p><ul><li>服务器软件本质是一个运行在服务器设备上的应用程序</li><li>能够接收客户端请求，并根据请求给客户端响应数据</li></ul><p><img src="http://www.yangeit.cn:21010/assets/1530625192392-1a23c10d.png" alt="1530625192392"></p><p>1530625192392</p><h4 id="_9-1-2-web服务器-🍐" tabindex="-1">9.1.2 Web服务器 🍐 <a class="header-anchor" href="#_9-1-2-web服务器-🍐" aria-label="Permalink to &quot;9.1.2 Web服务器 🍐&quot;">​</a></h4><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。主要功能是&quot;提供网上信息浏览服务&quot;。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220824233614686-b4ae7226.png" alt=""></p><p>Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p>Web服务器软件使用步骤</p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>第1步：准备静态资源</p><ul><li>在提供的资料中找到静态资源文件</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202180119859-f81f8305.png" alt="image-20221202180119859"></p><p>image-20221202180119859</p><p>第2步：下载安装Web服务器软件</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202181110555-2b7b7222.png" alt="image-20221202181110555"></p><p>image-20221202181110555</p><p>第3步：将静态资源部署到Web服务器上</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202180805686-ae285f3d.png" alt="image-20221202180805686"></p><p>image-20221202180805686</p><p>第4步：启动Web服务器使用浏览器访问对应的资源</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202181346327-10cd22ba.png" alt="image-20221202181346327"></p><p>image-20221202181346327</p><p>浏览器输入：<code>http://localhost:8080/demo/index.html</code></p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202181651469-ee9d6c76.png" alt="image-20221202181651469"></p><p>image-20221202181651469</p><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220824233728524-8df5b37b.png" alt="image-20220824233728524"></p><p>image-20220824233728524</p><p>技巧</p><p>Tomcat就是一款软件，我们主要是以学习如何去使用为主。具体我们会从以下这些方向去学习:</p><ol><li>简介：初步认识下Tomcat 🍐</li><li>基本使用: 安装、卸载、启动、关闭、配置和项目部署，这些都是对Tomcat的基本操作 🍐</li><li>IDEA中如何创建Maven Web项目 ❤️</li><li>IDEA中如何使用Tomcat ❤️</li></ol><h4 id="_9-1-3-tomcat" tabindex="-1">9.1.3 Tomcat <a class="header-anchor" href="#_9-1-3-tomcat" aria-label="Permalink to &quot;9.1.3 Tomcat&quot;">​</a></h4><p>Tomcat服务器软件是一个免费的开源的web应用服务器。是Apache软件基金会的一个核心项目。由Apache，Sun和其他一些公司及个人共同开发而成。</p><p>由于Tomcat只支持Servlet/JSP少量JavaEE规范，所以是一个开源免费的轻量级Web服务器。</p><blockquote><p>JavaEE规范： JavaEE =&gt; Java Enterprise Edition(Java企业版)</p><p>avaEE规范就是指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</p></blockquote><p>因为Tomcat支持Servlet/JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。</p><p>Tomcat的官网: <a href="https://tomcat.apache.org/" target="_blank" rel="noreferrer">https://tomcat.apache.org/open in new window</a></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220824233903517-0c89e850.png" alt="image-20220824233903517"></p><p>image-20220824233903517</p><h3 id="_9-2-基本使用-🚀" tabindex="-1">9.2 基本使用 🚀 <a class="header-anchor" href="#_9-2-基本使用-🚀" aria-label="Permalink to &quot;9.2 基本使用 🚀&quot;">​</a></h3><h4 id="_9-2-2-安装与卸载" tabindex="-1">9.2.2 安装与卸载 <a class="header-anchor" href="#_9-2-2-安装与卸载" aria-label="Permalink to &quot;9.2.2 安装与卸载&quot;">​</a></h4><p><strong>安装:</strong> Tomcat是绿色版，直接解压即安装</p><blockquote><p>在E盘的develop目录下，将<code>apache-tomcat-9.0.27-windows-x64.zip</code>进行解压缩，会得到一个<code>apache-tomcat-9.0.27</code>的目录，Tomcat就已经安装成功。</p></blockquote><p><img src="http://www.yangeit.cn:21010/assets/image-20221202184545321-e2d6c228.png" alt="image-20221202184545321"></p><p>image-20221202184545321</p><p>注意，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。</p><p>打开<code>apache-tomcat-9.0.27</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220824234652173-f94cfff7.png" alt=""></p><p>bin：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps：就是以后项目部署的目录</p><p>**卸载：**卸载比较简单，可以直接删除目录即可</p><h4 id="_9-2-3-启动与关闭" tabindex="-1">9.2.3 启动与关闭 <a class="header-anchor" href="#_9-2-3-启动与关闭" aria-label="Permalink to &quot;9.2.3 启动与关闭&quot;">​</a></h4><p><strong>启动Tomcat</strong></p><ul><li>双击tomcat解压目录/bin/<strong>startup.bat</strong>文件即可启动tomcat</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202183201663-197391c3.png" alt="image-20221202183201663"></p><p>image-20221202183201663</p><p>注意: tomcat服务器启动后,黑窗口不会关闭,只要黑窗口不关闭,就证明tomcat服务器正在运行</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202183409304-b91f3262.png" alt="image-20221202183409304"></p><p>image-20221202183409304</p><p>Tomcat的默认端口为8080，所以在浏览器的地址栏输入：<code>http://127.0.0.1:8080</code> 即可访问tomcat服务器</p><blockquote><p>127.0.0.1 也可以使用localhost代替。如：<code>http://localhost:8080</code></p></blockquote><p><img src="http://www.yangeit.cn:21010/assets/image-20221202183550682-98b96dba.png" alt="image-20221202183550682"></p><p>image-20221202183550682</p><ul><li>能看到以上图片中Apache Tomcat的内容就说明Tomcat已经启动成功</li></ul><p>注意事项 ：Tomcat启动的过程中，遇到控制台有中文乱码时，可以通常修改conf/logging.prooperties文件解决</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220825083848086-1cbddf85.png" alt="image-20220825083848086"></p><p>image-20220825083848086</p><p><strong>关闭:</strong> 关闭有三种方式</p><p>1、强制关闭：直接x掉Tomcat窗口（不建议）</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202184753808-3fa5a5f0.png" alt="image-20221202184753808"></p><p>image-20221202184753808</p><p>2、正常关闭：bin\\shutdown.bat</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202185103941-24852bc1.png" alt="image-20221202185103941"></p><p>image-20221202185103941</p><p>3、正常关闭：在Tomcat启动窗口中按下 Ctrl+C</p><ul><li>说明：如果按下Ctrl+C没有反映，可以多按几次</li></ul><h4 id="_9-2-4-常见问题" tabindex="-1">9.2.4 常见问题 <a class="header-anchor" href="#_9-2-4-常见问题" aria-label="Permalink to &quot;9.2.4 常见问题&quot;">​</a></h4><p><strong>问题1：Tomcat启动时，窗口一闪而过</strong></p><ul><li>检查JAVA_HOME环境变量是否正确配置</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202190033167-3fa39dcb.png" alt="image-20221202190033167"></p><p>image-20221202190033167</p><p><strong>问题2：端口号冲突</strong></p><p><img src="http://www.yangeit.cn:21010/assets/image-20220825084104447-15413839.png" alt="image-20220825084104447"></p><p>image-20220825084104447</p><ul><li><p>发生问题的原因：Tomcat使用的端口被占用了。</p></li><li><p>解决方案：换Tomcat端口号</p><ul><li>要想修改Tomcat启动的端口号，需要修改 conf/server.xml文件</li></ul></li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20220825084017185-a2a38818.png" alt="image-20220825084017185"></p><blockquote><p>注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><h3 id="_9-3-入门程序解析-🍐" tabindex="-1">9.3 入门程序解析 🍐 <a class="header-anchor" href="#_9-3-入门程序解析-🍐" aria-label="Permalink to &quot;9.3 入门程序解析 🍐&quot;">​</a></h3><p>问题</p><ol><li>为何SpringBoot工程如此强大？起步依赖名字有什么特点？</li></ol><p>点击查看代码</p><ol><li>因为有一个强大的父工程</li><li>起步依赖的名字中包含 <code>starter</code>单词</li></ol><p>关于web开发的基础知识，我们可以告一段落了。下面呢，我们在基于今天的核心技术点SpringBoot快速入门案例进行分析。</p><h4 id="_9-3-1-spring官方骨架" tabindex="-1">9.3.1 Spring官方骨架 <a class="header-anchor" href="#_9-3-1-spring官方骨架" aria-label="Permalink to &quot;9.3.1 Spring官方骨架&quot;">​</a></h4><p>之前我们创建的SpringBoot入门案例，是基于Spring官方提供的骨架实现的。</p><p>Spring官方骨架，可以理解为Spring官方为程序员提供一个搭建项目的模板。</p><blockquote><p>如果卡顿，可以使用Custom 香港的地址：<a href="https://start.springboot.io/" target="_blank" rel="noreferrer">https://start.springboot.ioopen in new window</a></p></blockquote><p><img src="http://www.yangeit.cn:21010/assets/image-20221202195646621-b2451407.png" alt="image-20221202195646621"></p><p>image-20221202195646621</p><p>我们可以通过访问：<a href="https://start.spring.io/" target="_blank" rel="noreferrer">https://start.spring.io/open in new window</a> ，进入到官方骨架页面</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202201623424-240da03e.png" alt="image-20221202201623424"></p><p>image-20221202201623424</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202200356398-26abb248.png" alt="image-20221202200356398"></p><p>image-20221202200356398</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202200547676-4a3ecece.png" alt="image-20221202200547676"></p><p>image-20221202200547676</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202200708988-0d6b7060.png" alt="image-20221202200708988"></p><p>image-20221202200708988</p><p>Spring官方生成的SpringBoot项目，怎么使用呢？</p><ul><li>解压缩后，就会得到一个SpringBoot项目工程</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202201042109-c49ef43d.png" alt="image-20221202201042109"></p><p>image-20221202201042109</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202201221136-da2db70c.png" alt="image-20221202201221136"></p><p>image-20221202201221136</p><p>打开pom.xml文件，我们可以看到springboot项目中引入了web依赖和test依赖</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202201826364-a929a81f.png" alt="image-20221202201826364"></p><p>image-20221202201826364</p><p>技巧</p><p>不论使用IDEA创建SpringBoot项目，还是直接在官方网站利用骨架生成SpringBoot项目，项目的结构和pom.xml文件中内容是相似的。</p><h4 id="_9-3-2-起步依赖" tabindex="-1">9.3.2 起步依赖 <a class="header-anchor" href="#_9-3-2-起步依赖" aria-label="Permalink to &quot;9.3.2 起步依赖&quot;">​</a></h4><p>在我们之前讲解的SpringBoot快速入门案例中，同样也引用了：web依赖和test依赖</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202202305118-5eb89da1.png" alt="image-20221202202305118"></p><p>image-20221202202305118</p><p>spring-boot-starter-web和spring-boot-starter-test，在SpringBoot中又称为：起步依赖</p><p>而在SpringBoot的项目中，有很多的起步依赖，他们有一个共同的特征：就是以<code>spring-boot-starter-</code>作为开头。在以后大家遇到spring-boot-starter-xxx这类的依赖，都为起步依赖。</p><p>起步依赖有什么特殊之处呢，这里我们以入门案例中引入的起步依赖做为讲解：</p><ul><li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li><li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li></ul><blockquote><p><strong>spring-boot-starter-web</strong>内部把关于Web开发所有的依赖都已经导入并且指定了版本，只需引入 <code>spring-boot-starter-web</code> 依赖就可以实现Web开发的需要的功能</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202204013113-ae1f7e14.png" alt="image-20221202204013113"></p><p>image-20221202204013113</p></blockquote><p>Spring的官方提供了很多现成的starter(起步依赖)，我们在开发相关应用时，只需要引入对应的starter即可。</p><p>官方地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters" target="_blank" rel="noreferrer">https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.startersopen in new window</a></p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202204536647-a332d9ee.png" alt="image-20221202204536647"></p><p>image-20221202204536647</p><p>每一个起步依赖，都用于开发一个特定的功能。</p><blockquote><p>举例：当我们开发中需要使用redis数据库时，只需要在SpringBoot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖。</p></blockquote><h4 id="_9-3-2-springboot父工程" tabindex="-1">9.3.2 SpringBoot父工程 <a class="header-anchor" href="#_9-3-2-springboot父工程" aria-label="Permalink to &quot;9.3.2 SpringBoot父工程&quot;">​</a></h4><p>在我们之前开发的SpringBoot入门案例中，我们通过maven引入的依赖，是没有指定具体的依赖版本号的。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20221202205103486-1805f538.png" alt="image-20221202205103486"></p><p>image-20221202205103486</p><p>问题</p><ol><li>为什么没有指定<code>&lt;version&gt;</code>版本号，可以正常使用呢？</li></ol><p>点击查看</p><ul><li>因为每一个SpringBoot工程，都有一个父工程。依赖的版本号，在父工程中统一管理。</li></ul><p><img src="http://www.yangeit.cn:21010/assets/image-20221202205318778-43a2b7b0.png" alt="image-20221202205318778"></p><p>image-20221202205318778</p><h4 id="_9-3-3-内嵌tomcat" tabindex="-1">9.3.3 内嵌Tomcat <a class="header-anchor" href="#_9-3-3-内嵌tomcat" aria-label="Permalink to &quot;9.3.3 内嵌Tomcat&quot;">​</a></h4><p>问题</p><ol><li>为什么我们之前书写的SpringBoot入门程序中，并没有把程序部署到Tomcat的webapps目录下，也可以运行呢？</li></ol><p>点击查看</p><p>是因为在我们的SpringBoot中，引入了web运行环境(也就是引入spring-boot-starter-web起步依赖)，其内部已经集成了内置的Tomcat服务器。</p><p>我们可以通过IDEA开发工具右侧的maven面板中，就可以看到当前工程引入的依赖。其中已经将Tomcat的相关依赖传递下来了，也就是说在SpringBoot中可以直接使用Tomcat服务器。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220825194553137-d6c40f36.png" alt=""></p><p>当我们运行SpringBoot的引导类时(运行main方法)，就会看到命令行输出的日志，其中占用8080端口的就是Tomcat。</p><p><img src="http://www.yangeit.cn:21010/assets/image-20220825195359993-950764b8.png" alt="image-20220825195359993"></p><p>image-20220825195359993</p>`,313),t=[o];function e(r,c,i,y,F,g){return a(),n("div",null,t)}const u=s(p,[["render",e]]);export{d as __pageData,u as default};
