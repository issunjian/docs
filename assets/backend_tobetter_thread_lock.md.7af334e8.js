import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"大致了解下Java的锁接口和锁","description":"大致了解下Java的锁接口和锁","frontmatter":{"title":"大致了解下Java的锁接口和锁","shortTitle":"大致了解下Java的锁接口和锁","description":"大致了解下Java的锁接口和锁","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,锁"}]]},"headers":[],"relativePath":"backend/tobetter/thread/lock.md","filePath":"backend/tobetter/thread/lock.md"}'),p={name:"backend/tobetter/thread/lock.md"},o=l(`<h1 id="大致了解下java的锁接口和锁" tabindex="-1">大致了解下Java的锁接口和锁 <a class="header-anchor" href="#大致了解下java的锁接口和锁" aria-label="Permalink to &quot;大致了解下Java的锁接口和锁&quot;">​</a></h1><p>前面我们介绍了Java原生的锁——基于对象的锁，它一般是配合synchronized关键字来使用的。实际上，Java在<code>java.util.concurrent.locks</code>包下，还为我们提供了几个关于锁的类和接口。它们有更强大的功能或更高的性能。</p><h2 id="synchronized的不足之处" tabindex="-1">synchronized的不足之处 <a class="header-anchor" href="#synchronized的不足之处" aria-label="Permalink to &quot;synchronized的不足之处&quot;">​</a></h2><p>我们先来看看<code>synchronized</code>有什么不足之处。</p><ul><li>如果临界区是只读操作，其实可以多线程一起执行，但使用synchronized的话，<strong>同一时间只能有一个线程执行</strong>。</li><li>synchronized无法知道线程有没有成功获取到锁</li><li>使用synchronized，如果临界区因为IO或者sleep方法等原因阻塞了，而当前线程又没有释放锁，就会导致<strong>所有线程等待</strong>。</li></ul><p>而这些都是locks包下的锁可以解决的。</p><h2 id="锁的几种分类" tabindex="-1">锁的几种分类 <a class="header-anchor" href="#锁的几种分类" aria-label="Permalink to &quot;锁的几种分类&quot;">​</a></h2><p>锁可以根据以下几种方式来进行分类，下面我们逐一介绍。</p><h3 id="可重入锁和非可重入锁" tabindex="-1">可重入锁和非可重入锁 <a class="header-anchor" href="#可重入锁和非可重入锁" aria-label="Permalink to &quot;可重入锁和非可重入锁&quot;">​</a></h3><p>所谓重入锁，顾名思义。就是支持重新进入的锁，也就是说这个锁支持一个<strong>线程对资源重复加锁</strong>。</p><p>synchronized关键字就是使用的重入锁。比如说，你在一个synchronized实例方法里面调用另一个本实例的synchronized实例方法，它可以重新进入这个锁，不会出现任何异常。</p><p>如果我们自己在继承AQS实现同步器的时候，没有考虑到占有锁的线程再次获取锁的场景，可能就会导致线程阻塞，那这个就是一个“非可重入锁”。</p><p><code>ReentrantLock</code>的中文意思就是可重入锁。也是本文后续要介绍的重点类。</p><h3 id="公平锁与非公平锁" tabindex="-1">公平锁与非公平锁 <a class="header-anchor" href="#公平锁与非公平锁" aria-label="Permalink to &quot;公平锁与非公平锁&quot;">​</a></h3><p>这里的“公平”，其实通俗意义来说就是“先来后到”，也就是FIFO。如果对一个锁来说，先对锁获取请求的线程一定会先被满足，后对锁获取请求的线程后被满足，那这个锁就是公平的。反之，那就是不公平的。</p><p>一般情况下，<strong>非公平锁能提升一定的效率。但是非公平锁可能会发生线程饥饿（有一些线程长时间得不到锁）的情况</strong>。所以要根据实际的需求来选择非公平锁和公平锁。</p><p>ReentrantLock支持非公平锁和公平锁两种。</p><h3 id="读写锁和排它锁" tabindex="-1">读写锁和排它锁 <a class="header-anchor" href="#读写锁和排它锁" aria-label="Permalink to &quot;读写锁和排它锁&quot;">​</a></h3><p>我们前面讲到的synchronized用的锁和ReentrantLock，其实都是“排它锁”。也就是说，这些锁在同一时刻只允许一个线程进行访问。</p><p>而读写锁可以在同一时刻允许多个读线程访问。Java提供了ReentrantReadWriteLock类作为读写锁的默认实现，内部维护了两个锁：一个读锁，一个写锁。通过分离读锁和写锁，使得在“读多写少”的环境下，大大地提高了性能。</p><blockquote><p>注意，即使用读写锁，在写线程访问时，所有的读线程和其它写线程均被阻塞。</p></blockquote><p><strong>可见，只是synchronized是远远不能满足多样化的业务对锁的要求的</strong>。接下来我们介绍一下JDK中有关锁的一些接口和类。</p><h2 id="jdk中有关锁的一些接口和类" tabindex="-1">JDK中有关锁的一些接口和类 <a class="header-anchor" href="#jdk中有关锁的一些接口和类" aria-label="Permalink to &quot;JDK中有关锁的一些接口和类&quot;">​</a></h2><p>众所周知，JDK中关于并发的类大多都在<code>java.util.concurrent</code>（以下简称juc）包下。而juc.locks包看名字就知道，是提供了一些并发锁的工具类的。前面我们介绍的AQS（AbstractQueuedSynchronizer）就是在这个包下。下面分别介绍一下这个包下的类和接口以及它们之间的关系。</p><h3 id="抽象类aqs-aqls-aos" tabindex="-1">抽象类AQS/AQLS/AOS <a class="header-anchor" href="#抽象类aqs-aqls-aos" aria-label="Permalink to &quot;抽象类AQS/AQLS/AOS&quot;">​</a></h3><p>这三个抽象类有一定的关系，所以这里放到一起讲。</p><p>首先我们看<strong>AQS</strong>（AbstractQueuedSynchronizer），之前专门有章节介绍这个类，它是在JDK 1.5 发布的，提供了一个“队列同步器”的基本功能实现。而AQS里面的“资源”是用一个<code>int</code>类型的数据来表示的，有时候我们的业务需求资源的数量超出了<code>int</code>的范围，所以在JDK 1.6 中，多了一个<strong>AQLS</strong>（AbstractQueuedLongSynchronizer）。它的代码跟AQS几乎一样，只是把资源的类型变成了<code>long</code>类型。</p><p>AQS和AQLS都继承了一个类叫<strong>AOS</strong>（AbstractOwnableSynchronizer）。这个类也是在JDK 1.6 中出现的。这个类只有几行简单的代码。从源码类上的注释可以知道，它是用于表示锁与持有者之间的关系（独占模式）。可以看一下它的主要方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 独占模式，锁的持有者  </span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> exclusiveOwnerThread;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 设置锁持有者  </span></span>
<span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setExclusiveOwnerThread</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t) {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    exclusiveOwnerThread </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> t;  </span></span>
<span class="line"><span style="color:#F6F6F4;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 获取锁的持有线程  </span></span>
<span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getExclusiveOwnerThread</span><span style="color:#F6F6F4;">() {  </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> exclusiveOwnerThread;  </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 独占模式，锁的持有者  </span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> Thread exclusiveOwnerThread;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置锁持有者  </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setExclusiveOwnerThread</span><span style="color:#24292E;">(Thread t) {  </span></span>
<span class="line"><span style="color:#24292E;">    exclusiveOwnerThread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;  </span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取锁的持有线程  </span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Thread </span><span style="color:#6F42C1;">getExclusiveOwnerThread</span><span style="color:#24292E;">() {  </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> exclusiveOwnerThread;  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="接口condition-lock-readwritelock" tabindex="-1">接口Condition/Lock/ReadWriteLock <a class="header-anchor" href="#接口condition-lock-readwritelock" aria-label="Permalink to &quot;接口Condition/Lock/ReadWriteLock&quot;">​</a></h3><p>juc.locks包下共有三个接口：<code>Condition</code>、<code>Lock</code>、<code>ReadWriteLock</code>。其中，Lock和ReadWriteLock从名字就可以看得出来，分别是锁和读写锁的意思。Lock接口里面有一些获取锁和释放锁的方法声明，而ReadWriteLock里面只有两个方法，分别返回“读锁”和“写锁”：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ReadWriteLock</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Lock</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Lock</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">writeLock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadWriteLock</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Lock </span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Lock </span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Lock接口中有一个方法是可以获得一个<code>Condition</code>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Condition</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newCondition</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Condition </span><span style="color:#6F42C1;">newCondition</span><span style="color:#24292E;">();</span></span></code></pre></div><p>之前我们提到了每个对象都可以用继承自<code>Object</code>的<strong>wait/notify</strong>方法来实现<strong>等待/通知机制</strong>。而Condition接口也提供了类似Object监视器的方法，通过与<strong>Lock</strong>配合来实现等待/通知模式。</p><p>那为什么既然有Object的监视器方法了，还要用Condition呢？这里有一个二者简单的对比：</p><table><thead><tr><th>对比项</th><th>Object监视器</th><th>Condition</th></tr></thead><tbody><tr><td>前置条件</td><td>获取对象的锁</td><td>调用Lock.lock获取锁，调用Lock.newCondition获取Condition对象</td></tr><tr><td>调用方式</td><td>直接调用，比如object.notify()</td><td>直接调用，比如condition.await()</td></tr><tr><td>等待队列的个数</td><td>一个</td><td>多个</td></tr><tr><td>当前线程释放锁进入等待状态</td><td>支持</td><td>支持</td></tr><tr><td>当前线程释放锁进入等待状态，在等待状态中不中断</td><td>不支持</td><td>支持</td></tr><tr><td>当前线程释放锁并进入超时等待状态</td><td>支持</td><td>支持</td></tr><tr><td>当前线程释放锁并进入等待状态直到将来的某个时间</td><td>不支持</td><td>支持</td></tr><tr><td>唤醒等待队列中的一个线程</td><td>支持</td><td>支持</td></tr><tr><td>唤醒等待队列中的全部线程</td><td>支持</td><td>支持</td></tr></tbody></table><p>Condition和Object的wait/notify基本相似。其中，Condition的await方法对应的是Object的wait方法，而Condition的<strong>signal/signalAll</strong>方法则对应Object的notify/notifyAll()。但Condition类似于Object的等待/通知机制的加强版。我们来看看主要的方法：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>await()</td><td>当前线程进入等待状态直到被通知（signal）或者中断；当前线程进入运行状态并从await()方法返回的场景包括：（1）其他线程调用相同Condition对象的signal/signalAll方法，并且当前线程被唤醒；（2）其他线程调用interrupt方法中断当前线程；</td></tr><tr><td>awaitUninterruptibly()</td><td>当前线程进入等待状态直到被通知，在此过程中对中断信号不敏感，不支持中断当前线程</td></tr><tr><td>awaitNanos(long)</td><td>当前线程进入等待状态，直到被通知、中断或者超时。如果返回值小于等于0，可以认定就是超时了</td></tr><tr><td>awaitUntil(Date)</td><td>当前线程进入等待状态，直到被通知、中断或者超时。如果没到指定时间被通知，则返回true，否则返回false</td></tr><tr><td>signal()</td><td>唤醒一个等待在Condition上的线程，被唤醒的线程在方法返回前必须获得与Condition对象关联的锁</td></tr><tr><td>signalAll()</td><td>唤醒所有等待在Condition上的线程，能够从await()等方法返回的线程必须先获得与Condition对象关联的锁</td></tr></tbody></table><h3 id="reentrantlock" tabindex="-1">ReentrantLock <a class="header-anchor" href="#reentrantlock" aria-label="Permalink to &quot;ReentrantLock&quot;">​</a></h3><p>ReentrantLock是一个非抽象类，它是Lock接口的JDK默认实现，实现了锁的基本功能。从名字上看，它是一个”可重入“锁，从源码上看，它内部有一个抽象类<code>Sync</code>，是继承了AQS，自己实现的一个同步器。同时，ReentrantLock内部有两个非抽象类<code>NonfairSync</code>和<code>FairSync</code>，它们都继承了Sync。从名字上看得出，分别是”非公平同步器“和”公平同步器“的意思。这意味着ReentrantLock可以支持”公平锁“和”非公平锁“。</p><p>通过看这两个同步器的源码可以发现，它们的实现都是”独占“的。都调用了AOS的<code>setExclusiveOwnerThread</code>方法，所以ReentrantLock的锁是”独占“的，也就是说，它的锁都是”排他锁“，不能共享。</p><p>在ReentrantLock的构造方法里，可以传入一个<code>boolean</code>类型的参数，来指定它是否是一个公平锁，默认情况下是非公平的。这个参数一旦实例化后就不能修改，只能通过<code>isFair()</code>方法来查看。</p><h3 id="reentrantreadwritelock" tabindex="-1">ReentrantReadWriteLock <a class="header-anchor" href="#reentrantreadwritelock" aria-label="Permalink to &quot;ReentrantReadWriteLock&quot;">​</a></h3><p>这个类也是一个非抽象类，它是ReadWriteLock接口的JDK默认实现。它与ReentrantLock的功能类似，同样是可重入的，支持非公平锁和公平锁。不同的是，它还支持”读写锁“。</p><p>ReentrantReadWriteLock内部的结构大概是这样：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 内部结构</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReentrantReadWriteLock</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">ReadLock</span><span style="color:#F6F6F4;"> readerLock;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReentrantReadWriteLock</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">WriteLock</span><span style="color:#F6F6F4;"> writerLock;</span></span>
<span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Sync</span><span style="color:#F6F6F4;"> sync;</span></span>
<span class="line"><span style="color:#F286C4;">abstract</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Sync</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractQueuedSynchronizer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 具体实现</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">NonfairSync</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Sync</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 具体实现</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FairSync</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Sync</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 具体实现</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ReadLock</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Lock</span><span style="color:#F6F6F4;">, java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Sync</span><span style="color:#F6F6F4;"> sync;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReadLock</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ReentrantReadWriteLock</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">lock</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            sync </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lock.sync;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 具体实现</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WriteLock</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Lock</span><span style="color:#F6F6F4;">, java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Sync</span><span style="color:#F6F6F4;"> sync;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WriteLock</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ReentrantReadWriteLock</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">lock</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            sync </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lock.sync;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 具体实现</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 构造方法，初始化两个锁</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReentrantReadWriteLock</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> fair) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    sync </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fair </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FairSync</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NonfairSync</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    readerLock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReadLock</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    writerLock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">WriteLock</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 获取读锁和写锁的方法</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> ReentrantReadWriteLock.WriteLock </span><span style="color:#62E884;">writeLock</span><span style="color:#F6F6F4;">() { </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> writerLock; }</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> ReentrantReadWriteLock.ReadLock  </span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">()  { </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> readerLock; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 内部结构</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReentrantReadWriteLock.ReadLock readerLock;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReentrantReadWriteLock.WriteLock writerLock;</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Sync sync;</span></span>
<span class="line"><span style="color:#D73A49;">abstract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sync</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractQueuedSynchronizer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 具体实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NonfairSync</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sync</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 具体实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FairSync</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sync</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 具体实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadLock</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lock</span><span style="color:#24292E;">, java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Sync sync;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadLock</span><span style="color:#24292E;">(ReentrantReadWriteLock </span><span style="color:#E36209;">lock</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            sync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lock.sync;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 具体实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WriteLock</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lock</span><span style="color:#24292E;">, java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Sync sync;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WriteLock</span><span style="color:#24292E;">(ReentrantReadWriteLock </span><span style="color:#E36209;">lock</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            sync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lock.sync;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 具体实现</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 构造方法，初始化两个锁</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReentrantReadWriteLock</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> fair) {</span></span>
<span class="line"><span style="color:#24292E;">    sync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fair </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FairSync</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NonfairSync</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    readerLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadLock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    writerLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WriteLock</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取读锁和写锁的方法</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ReentrantReadWriteLock.WriteLock </span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">() { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> writerLock; }</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ReentrantReadWriteLock.ReadLock  </span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">()  { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> readerLock; }</span></span></code></pre></div><p>可以看到，它同样是内部维护了两个同步器。且维护了两个Lock的实现类ReadLock和WriteLock。从源码可以发现，这两个内部类用的是外部类的同步器。</p><p>ReentrantReadWriteLock实现了读写锁，但它有一个小弊端，就是在“写”操作的时候，其它线程不能写也不能读。我们称这种现象为“写饥饿”，将在后文的StampedLock类继续讨论这个问题。</p><h3 id="stampedlock" tabindex="-1">StampedLock <a class="header-anchor" href="#stampedlock" aria-label="Permalink to &quot;StampedLock&quot;">​</a></h3><p><code>StampedLock</code>类是在Java 8 才发布的，也是Doug Lea大神所写，有人号称它为锁的性能之王。它没有实现Lock接口和ReadWriteLock接口，但它其实是实现了“读写锁”的功能，并且性能比ReentrantReadWriteLock更高。StampedLock还把读锁分为了“乐观读锁”和“悲观读锁”两种。</p><p>前面提到了ReentrantReadWriteLock会发生“写饥饿”的现象，但StampedLock不会。它是怎么做到的呢？它的核心思想在于，<strong>在读的时候如果发生了写，应该通过重试的方式来获取新的值，而不应该阻塞写操作。这种模式也就是典型的无锁编程思想，和CAS自旋的思想一样</strong>。这种操作方式决定了StampedLock在读线程非常多而写线程非常少的场景下非常适用，同时还避免了写饥饿情况的发生。</p><p>这里篇幅有限，就不介绍StampedLock的源码了，只是分析一下官方提供的用法（在JDK源码类声明的上方或Javadoc里可以找到）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Point</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> x, y;</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StampedLock</span><span style="color:#F6F6F4;"> sl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">StampedLock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 写锁的使用</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">deltaX</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">deltaY</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> stamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sl.</span><span style="color:#62E884;">writeLock</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 获取写锁</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">       x </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> deltaX;</span></span>
<span class="line"><span style="color:#F6F6F4;">       y </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> deltaY;</span></span>
<span class="line"><span style="color:#F6F6F4;">     } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">       sl.</span><span style="color:#62E884;">unlockWrite</span><span style="color:#F6F6F4;">(stamp); </span><span style="color:#7B7F8B;">// 释放写锁</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 乐观读锁的使用</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">distanceFromOrigin</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> stamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sl.</span><span style="color:#62E884;">tryOptimisticRead</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 获取乐观读锁</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> currentX </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x, currentY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> y;</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">sl.</span><span style="color:#62E884;">validate</span><span style="color:#F6F6F4;">(stamp)) { </span><span style="color:#7B7F8B;">// //检查乐观读锁后是否有其他写锁发生，有则返回false</span></span>
<span class="line"><span style="color:#F6F6F4;">        stamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sl.</span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 获取一个悲观读锁</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">          currentX </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">          currentY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> y;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">           sl.</span><span style="color:#62E884;">unlockRead</span><span style="color:#F6F6F4;">(stamp); </span><span style="color:#7B7F8B;">// 释放悲观读锁</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">sqrt</span><span style="color:#F6F6F4;">(currentX </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> currentX </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> currentY </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> currentY);</span></span>
<span class="line"><span style="color:#F6F6F4;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 悲观读锁以及读锁升级写锁的使用</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">moveIfAtOrigin</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">newX</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">newY</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> stamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sl.</span><span style="color:#62E884;">readLock</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 悲观读锁</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#7B7F8B;">// 读锁尝试转换为写锁：转换成功后相当于获取了写锁，转换失败相当于有写锁被占用</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> ws </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sl.</span><span style="color:#62E884;">tryConvertToWriteLock</span><span style="color:#F6F6F4;">(stamp); </span></span>
<span class="line"><span style="color:#F6F6F4;">           </span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (ws </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;">) { </span><span style="color:#7B7F8B;">// 如果转换成功</span></span>
<span class="line"><span style="color:#F6F6F4;">           stamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ws; </span><span style="color:#7B7F8B;">// 读锁的票据更新为写锁的</span></span>
<span class="line"><span style="color:#F6F6F4;">           x </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newX;</span></span>
<span class="line"><span style="color:#F6F6F4;">           y </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newY;</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">         }</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> { </span><span style="color:#7B7F8B;">// 如果转换失败</span></span>
<span class="line"><span style="color:#F6F6F4;">           sl.</span><span style="color:#62E884;">unlockRead</span><span style="color:#F6F6F4;">(stamp); </span><span style="color:#7B7F8B;">// 释放读锁</span></span>
<span class="line"><span style="color:#F6F6F4;">           stamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sl.</span><span style="color:#62E884;">writeLock</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 强制获取写锁</span></span>
<span class="line"><span style="color:#F6F6F4;">         }</span></span>
<span class="line"><span style="color:#F6F6F4;">       }</span></span>
<span class="line"><span style="color:#F6F6F4;">     } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">       sl.</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">(stamp); </span><span style="color:#7B7F8B;">// 释放所有锁</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;">   }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> x, y;</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StampedLock sl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StampedLock</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 写锁的使用</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">deltaX</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">deltaY</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> stamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sl.</span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取写锁</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> deltaX;</span></span>
<span class="line"><span style="color:#24292E;">       y </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> deltaY;</span></span>
<span class="line"><span style="color:#24292E;">     } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       sl.</span><span style="color:#6F42C1;">unlockWrite</span><span style="color:#24292E;">(stamp); </span><span style="color:#6A737D;">// 释放写锁</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 乐观读锁的使用</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">distanceFromOrigin</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> stamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sl.</span><span style="color:#6F42C1;">tryOptimisticRead</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取乐观读锁</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> currentX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x, currentY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">sl.</span><span style="color:#6F42C1;">validate</span><span style="color:#24292E;">(stamp)) { </span><span style="color:#6A737D;">// //检查乐观读锁后是否有其他写锁发生，有则返回false</span></span>
<span class="line"><span style="color:#24292E;">        stamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sl.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取一个悲观读锁</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          currentX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">          currentY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">           sl.</span><span style="color:#6F42C1;">unlockRead</span><span style="color:#24292E;">(stamp); </span><span style="color:#6A737D;">// 释放悲观读锁</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(currentX </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> currentX </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> currentY </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> currentY);</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 悲观读锁以及读锁升级写锁的使用</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moveIfAtOrigin</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">newX</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">newY</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> stamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sl.</span><span style="color:#6F42C1;">readLock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 悲观读锁</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6A737D;">// 读锁尝试转换为写锁：转换成功后相当于获取了写锁，转换失败相当于有写锁被占用</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ws </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sl.</span><span style="color:#6F42C1;">tryConvertToWriteLock</span><span style="color:#24292E;">(stamp); </span></span>
<span class="line"><span style="color:#24292E;">           </span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ws </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 如果转换成功</span></span>
<span class="line"><span style="color:#24292E;">           stamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ws; </span><span style="color:#6A737D;">// 读锁的票据更新为写锁的</span></span>
<span class="line"><span style="color:#24292E;">           x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newX;</span></span>
<span class="line"><span style="color:#24292E;">           y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newY;</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果转换失败</span></span>
<span class="line"><span style="color:#24292E;">           sl.</span><span style="color:#6F42C1;">unlockRead</span><span style="color:#24292E;">(stamp); </span><span style="color:#6A737D;">// 释放读锁</span></span>
<span class="line"><span style="color:#24292E;">           stamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sl.</span><span style="color:#6F42C1;">writeLock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 强制获取写锁</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"><span style="color:#24292E;">     } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       sl.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">(stamp); </span><span style="color:#6A737D;">// 释放所有锁</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>乐观读锁的意思就是先假定在这个锁获取期间，共享变量不会被改变，既然假定不会被改变，那就不需要上锁。在获取乐观读锁之后进行了一些操作，然后又调用了validate方法，这个方法就是用来验证tryOptimisticRead之后，是否有写操作执行过，如果有，则获取一个悲观读锁，这里的悲观读锁和ReentrantReadWriteLock中的读锁类似，也是个共享锁。</p></blockquote><p>可以看到，StampedLock获取锁会返回一个<code>long</code>类型的变量，释放锁的时候再把这个变量传进去。简单看看源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 用于操作state后获取stamp的值</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> LG_READERS </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> RUNIT </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">;               </span><span style="color:#7B7F8B;">//0000 0000 0001</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> WBIT  </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> LG_READERS; </span><span style="color:#7B7F8B;">//0000 1000 0000</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> RBITS </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> WBIT </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">;        </span><span style="color:#7B7F8B;">//0000 0111 1111</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> RFULL </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RBITS </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1L</span><span style="color:#F6F6F4;">;       </span><span style="color:#7B7F8B;">//0000 0111 1110</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> ABITS </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> RBITS </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> WBIT;     </span><span style="color:#7B7F8B;">//0000 1111 1111</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> SBITS </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">~</span><span style="color:#F6F6F4;">RBITS;           </span><span style="color:#7B7F8B;">//1111 1000 0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 初始化时state的值</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> ORIGIN </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WBIT</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;       </span><span style="color:#7B7F8B;">//0001 0000 0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 锁共享变量state</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">volatile</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> state;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 读锁溢出时用来存储多出的读锁</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">transient</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> readerOverflow;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用于操作state后获取stamp的值</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> LG_READERS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> RUNIT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">;               </span><span style="color:#6A737D;">//0000 0000 0001</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> WBIT  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> LG_READERS; </span><span style="color:#6A737D;">//0000 1000 0000</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> RBITS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WBIT </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">;        </span><span style="color:#6A737D;">//0000 0111 1111</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> RFULL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RBITS </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1L</span><span style="color:#24292E;">;       </span><span style="color:#6A737D;">//0000 0111 1110</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ABITS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> RBITS </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> WBIT;     </span><span style="color:#6A737D;">//0000 1111 1111</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> SBITS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">RBITS;           </span><span style="color:#6A737D;">//1111 1000 0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 初始化时state的值</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> ORIGIN </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> WBIT </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;       </span><span style="color:#6A737D;">//0001 0000 0000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 锁共享变量state</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">volatile</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> state;</span></span>
<span class="line"><span style="color:#6A737D;">// 读锁溢出时用来存储多出的读锁</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">transient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> readerOverflow;</span></span></code></pre></div><p>StampedLock用这个long类型的变量的前7位（LG_READERS）来表示读锁，每获取一个悲观读锁，就加1（RUNIT），每释放一个悲观读锁，就减1。而悲观读锁最多只能装128个（7位限制），很容易溢出，所以用一个int类型的变量来存储溢出的悲观读锁。</p><p>写锁用state变量剩下的位来表示，每次获取一个写锁，就加0000 1000 0000（WBIT）。需要注意的是，<strong>写锁在释放的时候，并不是减WBIT，而是再加WBIT</strong>。这是为了<strong>让每次写锁都留下痕迹</strong>，解决CAS中的ABA问题，也为<strong>乐观锁检查变化</strong>validate方法提供基础。</p><p>乐观读锁就比较简单了，并没有真正改变state的值，而是在获取锁的时候记录state的写状态，在操作完成后去检查state的写状态部分是否发生变化，上文提到了，每次写锁都会留下痕迹，也是为了这里乐观锁检查变化提供方便。</p><p>总的来说，StampedLock的性能是非常优异的，基本上可以取代ReentrantReadWriteLock的作用。</p><hr><blockquote><p>内容大部分来源以下三个开源仓库：</p><ul><li><a href="http://concurrent.redspider.group/" target="_blank" rel="noreferrer">深入浅出 Java 多线程</a></li><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a></li><li><a href="https://github.com/CoderLeixiaoshuai/java-eight-part" target="_blank" rel="noreferrer">Java八股文</a></li></ul></blockquote><hr>`,64),e=[o];function t(c,r,y,F,i,d){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{C as __pageData,A as default};
