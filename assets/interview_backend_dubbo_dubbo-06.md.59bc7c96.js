import{_ as o,o as a,c as e,V as t}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/dubbo/dubbo-06.md","filePath":"interview/backend/dubbo/dubbo-06.md"}'),r={name:"interview/backend/dubbo/dubbo-06.md"},s=t('<h3 id="_1、你觉得用-dubbo-好还是-spring-cloud-好" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E4%BD%A0%E8%A7%89%E5%BE%97%E7%94%A8-dubbo-%E5%A5%BD%E8%BF%98%E6%98%AF-spring-cloud-%E5%A5%BD" target="_blank" rel="noreferrer">1、你觉得用 Dubbo 好还是 Spring Cloud 好？</a> <a class="header-anchor" href="#_1、你觉得用-dubbo-好还是-spring-cloud-好" aria-label="Permalink to &quot;[1、你觉得用 Dubbo 好还是 Spring Cloud 好？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#1你觉得用-dubbo-好还是-spring-cloud-好)&quot;">​</a></h3><p>扩展性的问题，没有好坏，只有适合不适合，不过我好像更倾向于使用 Dubbo, Spring Cloud 版本升级太快，组件更新替换太频繁，配置太繁琐，还有很多我觉得是没有 Dubbo 顺手的地方。</p><h3 id="_2、dubbo-monitor-实现原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2dubbo-monitor-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">2、Dubbo Monitor 实现原理？</a> <a class="header-anchor" href="#_2、dubbo-monitor-实现原理" aria-label="Permalink to &quot;[2、Dubbo Monitor 实现原理？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#2dubbo-monitor-实现原理)&quot;">​</a></h3><p>Consumer端在发起调用之前会先走filter链；provider端在接收到请求时也是先走filter链，然后才进行真正的业务逻辑处理。</p><p>默认情况下，在consumer和provider的filter链中都会有Monitorfilter。</p><p><strong>1、</strong> MonitorFilter向DubboMonitor发送数据</p><p><strong>2、</strong> DubboMonitor将数据进行聚合后（默认聚合1min中的统计数据）暂存到ConcurrentMap&lt;Statistics, AtomicReference&gt; statisticsMap，然后使用一个含有3个线程（线程名字：DubboMonitorSendTimer）的线程池每隔1min钟，调用SimpleMonitorService遍历发送statisticsMap中的统计数据，每发送完毕一个，就重置当前的Statistics的AtomicReference</p><p><strong>3、</strong> SimpleMonitorService将这些聚合数据塞入BlockingQueue queue中（队列大写为100000）</p><p><strong>4、</strong> SimpleMonitorService使用一个后台线程（线程名为：DubboMonitorAsyncWriteLogThread）将queue中的数据写入文件（该线程以死循环的形式来写）</p><p><strong>5、</strong> SimpleMonitorService还会使用一个含有1个线程（线程名字：DubboMonitorTimer）的线程池每隔5min钟，将文件中的统计数据画成图表</p><h3 id="_3、rpc使用了哪些关键技术-从调用者的角度看" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3rpc%E4%BD%BF%E7%94%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E4%BB%8E%E8%B0%83%E7%94%A8%E8%80%85%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%EF%BC%9A" target="_blank" rel="noreferrer">3、RPC使用了哪些关键技术，从调用者的角度看：</a> <a class="header-anchor" href="#_3、rpc使用了哪些关键技术-从调用者的角度看" aria-label="Permalink to &quot;[3、RPC使用了哪些关键技术，从调用者的角度看：](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#3rpc使用了哪些关键技术从调用者的角度看：)&quot;">​</a></h3><p>服务的调用者启动的时候根据自己订阅的服务向服务注册中心查找服务提供者的地址等信息；</p><p>当服务调用者消费的服务上线或者下线的时候，注册中心会告知该服务的调用者；</p><p>服务调用者下线的时候，则取消订阅。</p><h3 id="_4、dubbo-可以对结果进行缓存吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4dubbo-%E5%8F%AF%E4%BB%A5%E5%AF%B9%E7%BB%93%E6%9E%9C%E8%BF%9B%E8%A1%8C%E7%BC%93%E5%AD%98%E5%90%97" target="_blank" rel="noreferrer">4、Dubbo 可以对结果进行缓存吗？</a> <a class="header-anchor" href="#_4、dubbo-可以对结果进行缓存吗" aria-label="Permalink to &quot;[4、Dubbo 可以对结果进行缓存吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#4dubbo-可以对结果进行缓存吗)&quot;">​</a></h3><p>为了提高数据访问的速度。Dubbo 提供了声明式缓存，以减少用户加缓存的工作量&lt;dubbo:reference cache=“true” /&gt;</p><p>其实比普通的配置文件就多了一个标签 cache=“true”</p><h3 id="_5、dubbo-用到哪些设计模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5dubbo-%E7%94%A8%E5%88%B0%E5%93%AA%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">5、Dubbo 用到哪些设计模式？</a> <a class="header-anchor" href="#_5、dubbo-用到哪些设计模式" aria-label="Permalink to &quot;[5、Dubbo 用到哪些设计模式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#5dubbo-用到哪些设计模式)&quot;">​</a></h3><p>Dubbo框架在初始化和通信过程中使用了多种设计模式，可灵活控制类加载、权限控制等功能。</p><p><strong>工厂模式</strong></p><p>Provider在export服务时，会调用ServiceConfig的export方法。ServiceConfig中有个字段：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Protocol</span><span style="color:#F6F6F4;"> protocol </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ExtensionLoader.</span><span style="color:#62E884;">getExtensionLoader</span><span style="color:#F6F6F4;">(Protocol.class).</span><span style="color:#62E884;">getAdaptiveExtension</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Protocol protocol </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExtensionLoader.</span><span style="color:#6F42C1;">getExtensionLoader</span><span style="color:#24292E;">(Protocol.class).</span><span style="color:#6F42C1;">getAdaptiveExtension</span><span style="color:#24292E;">();</span></span></code></pre></div><p>Dubbo里有很多这种代码。这也是一种工厂模式，只是实现类的获取采用了JDK SPI的机制。这么实现的优点是可扩展性强，想要扩展实现，只需要在classpath下增加个文件就可以了，代码零侵入。另外，像上面的Adaptive实现，可以做到调用时动态决定调用哪个实现，但是由于这种实现采用了动态代理，会造成代码调试比较麻烦，需要分析出实际调用的实现类。</p><p><strong>装饰器模式</strong></p><p>Dubbo在启动和调用阶段都大量使用了装饰器模式。以Provider提供的调用链为例，具体的调用链代码是在ProtocolFilterWrapper的buildInvokerChain完成的，具体是将注解中含有group=provider的Filter实现，按照order排序，最后的调用顺序是：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">EchoFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> ClassLoaderFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> GenericFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> ContextFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> ExecuteLimitFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> TraceFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> TimeoutFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> MonitorFilter </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ExceptionFilter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">EchoFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ClassLoaderFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> GenericFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ContextFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ExecuteLimitFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> TraceFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> TimeoutFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> MonitorFilter </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> ExceptionFilter</span></span></code></pre></div><p>更确切地说，这里是装饰器和责任链模式的混合使用。例如，EchoFilter的作用是判断是否是回声测试请求，是的话直接返回内容，这是一种责任链的体现。而像ClassLoaderFilter则只是在主功能上添加了功能，更改当前线程的ClassLoader，这是典型的装饰器模式。</p><p><strong>观察者模式</strong></p><p>Dubbo的Provider启动时，需要与注册中心交互，先注册自己的服务，再订阅自己的服务，订阅时，采用了观察者模式，开启一个listener。注册中心会每5秒定时检查是否有服务更新，如果有更新，向该服务的提供者发送一个notify消息，provider接受到notify消息后，即运行NotifyListener的notify方法，执行监听器方法。</p><p><strong>动态代理模式</strong></p><p>Dubbo扩展JDK SPI的类ExtensionLoader的Adaptive实现是典型的动态代理实现。Dubbo需要灵活地控制实现类，即在调用阶段动态地根据参数决定调用哪个实现类，所以采用先生成代理类的方法，能够做到灵活的调用。生成代理类的代码是ExtensionLoader的createAdaptiveExtensionClassCode方法。代理类的主要逻辑是，获取URL参数中指定参数的值作为获取实现类的key。</p><h3 id="_6、dubbo-如何优雅停机" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6dubbo-%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%81%9C%E6%9C%BA" target="_blank" rel="noreferrer">6、Dubbo 如何优雅停机？</a> <a class="header-anchor" href="#_6、dubbo-如何优雅停机" aria-label="Permalink to &quot;[6、Dubbo 如何优雅停机？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#6dubbo-如何优雅停机)&quot;">​</a></h3><p>Dubbo 是通过 JDK 的 ShutdownHook 来完成优雅停机的，所以如果使用kill -9 PID 等强制关闭指令，是不会执行优雅停机的，只有通过 kill PID 时，才会执行。</p><h3 id="_7、rpc使用了哪些关键技术-nio通信" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7rpc%E4%BD%BF%E7%94%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AFnio%E9%80%9A%E4%BF%A1" target="_blank" rel="noreferrer">7、RPC使用了哪些关键技术，NIO通信</a> <a class="header-anchor" href="#_7、rpc使用了哪些关键技术-nio通信" aria-label="Permalink to &quot;[7、RPC使用了哪些关键技术，NIO通信](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#7rpc使用了哪些关键技术nio通信)&quot;">​</a></h3><p>出于并发性能的考虑，传统的阻塞式 IO 显然不太合适，因此我们需要异步的 IO，即 NIO。Java 提供了 NIO 的解决方案，Java 7 也提供了更优秀的 NIO.2 支持。可以选择Netty或者MINA来解决NIO数据传输的问题。</p><h3 id="_8、在使用过程中都遇到了些什么问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E5%9C%A8%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%83%BD%E9%81%87%E5%88%B0%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">8、在使用过程中都遇到了些什么问题？</a> <a class="header-anchor" href="#_8、在使用过程中都遇到了些什么问题" aria-label="Permalink to &quot;[8、在使用过程中都遇到了些什么问题？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#8在使用过程中都遇到了些什么问题)&quot;">​</a></h3><p>如序列化问题。</p><h3 id="_9、集群容错怎么做" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E6%80%8E%E4%B9%88%E5%81%9A" target="_blank" rel="noreferrer">9、集群容错怎么做？</a> <a class="header-anchor" href="#_9、集群容错怎么做" aria-label="Permalink to &quot;[9、集群容错怎么做？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#9集群容错怎么做)&quot;">​</a></h3><p>读操作建议使用 Failover 失败自动切换，默认重试两次其他服务器。写操作建议使用 Failfast 快速失败，发一次调用失败就立即报错。</p><h3 id="_10、dubbo-超时时间怎样设置" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10dubbo-%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4%E6%80%8E%E6%A0%B7%E8%AE%BE%E7%BD%AE" target="_blank" rel="noreferrer">10、Dubbo 超时时间怎样设置？</a> <a class="header-anchor" href="#_10、dubbo-超时时间怎样设置" aria-label="Permalink to &quot;[10、Dubbo 超时时间怎样设置？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Dubbo/Dubbo最新面试题及答案附答案汇总.md#10dubbo-超时时间怎样设置)&quot;">​</a></h3><p>Dubbo 超时时间设置有两种方式：</p><p>服务提供者端设置超时时间，在 Dubbo 的用户文档中，推荐如果能在服务端多配置就尽量多配置，因为服务提供者比消费者更清楚自己提供的服务特性。</p><p>服务消费者端设置超时时间，如果在消费者端设置了超时时间，以消费者端为主，即优先级更高。因为服务调用方设置超时时间控制性更灵活。如果消费方超时，服务端线程不会定制，会产生警告。</p><h3 id="_11、说说-dubbo-服务暴露的过程。" tabindex="-1">11、说说 Dubbo 服务暴露的过程。 <a class="header-anchor" href="#_11、说说-dubbo-服务暴露的过程。" aria-label="Permalink to &quot;11、说说 Dubbo 服务暴露的过程。&quot;">​</a></h3><h3 id="_12、注册了多个同一样的服务-如果测试指定的某一个服务呢" tabindex="-1">12、注册了多个同一样的服务，如果测试指定的某一个服务呢？ <a class="header-anchor" href="#_12、注册了多个同一样的服务-如果测试指定的某一个服务呢" aria-label="Permalink to &quot;12、注册了多个同一样的服务，如果测试指定的某一个服务呢？&quot;">​</a></h3><h3 id="_13、dubbo-服务降级-失败重试怎么做" tabindex="-1">13、Dubbo 服务降级，失败重试怎么做？ <a class="header-anchor" href="#_13、dubbo-服务降级-失败重试怎么做" aria-label="Permalink to &quot;13、Dubbo 服务降级，失败重试怎么做？&quot;">​</a></h3><h3 id="_14、说说核心的配置有哪些" tabindex="-1">14、说说核心的配置有哪些？ <a class="header-anchor" href="#_14、说说核心的配置有哪些" aria-label="Permalink to &quot;14、说说核心的配置有哪些？&quot;">​</a></h3><h3 id="_15、rpc使用了哪些关键技术-dubbo" tabindex="-1">15、RPC使用了哪些关键技术，Dubbo <a class="header-anchor" href="#_15、rpc使用了哪些关键技术-dubbo" aria-label="Permalink to &quot;15、RPC使用了哪些关键技术，Dubbo&quot;">​</a></h3><h3 id="_16、服务上线怎么不影响旧版本" tabindex="-1">16、服务上线怎么不影响旧版本？ <a class="header-anchor" href="#_16、服务上线怎么不影响旧版本" aria-label="Permalink to &quot;16、服务上线怎么不影响旧版本？&quot;">​</a></h3><h3 id="_17、dubbo推荐用什么协议" tabindex="-1">17、dubbo推荐用什么协议？ <a class="header-anchor" href="#_17、dubbo推荐用什么协议" aria-label="Permalink to &quot;17、dubbo推荐用什么协议？&quot;">​</a></h3><h3 id="_18、dubbo-支持服务降级吗" tabindex="-1">18、Dubbo 支持服务降级吗？ <a class="header-anchor" href="#_18、dubbo-支持服务降级吗" aria-label="Permalink to &quot;18、Dubbo 支持服务降级吗？&quot;">​</a></h3><h3 id="_19、dubbo的集群容错方案有哪些" tabindex="-1">19、Dubbo的集群容错方案有哪些？ <a class="header-anchor" href="#_19、dubbo的集群容错方案有哪些" aria-label="Permalink to &quot;19、Dubbo的集群容错方案有哪些？&quot;">​</a></h3><h3 id="_20、dubbo-推荐用什么协议" tabindex="-1">20、dubbo 推荐用什么协议？ <a class="header-anchor" href="#_20、dubbo-推荐用什么协议" aria-label="Permalink to &quot;20、dubbo 推荐用什么协议？&quot;">​</a></h3><h3 id="_21、dubbo-的主要应用场景" tabindex="-1">21、Dubbo 的主要应用场景？ <a class="header-anchor" href="#_21、dubbo-的主要应用场景" aria-label="Permalink to &quot;21、Dubbo 的主要应用场景？&quot;">​</a></h3><h3 id="_22、集群容错怎么做" tabindex="-1">22、集群容错怎么做？ <a class="header-anchor" href="#_22、集群容错怎么做" aria-label="Permalink to &quot;22、集群容错怎么做？&quot;">​</a></h3><h3 id="_23、dubbo-支持哪些协议-每种协议的应用场景-优缺点" tabindex="-1">23、Dubbo 支持哪些协议，每种协议的应用场景，优缺点？ <a class="header-anchor" href="#_23、dubbo-支持哪些协议-每种协议的应用场景-优缺点" aria-label="Permalink to &quot;23、Dubbo 支持哪些协议，每种协议的应用场景，优缺点？&quot;">​</a></h3><h3 id="_24、rpc使用了哪些关键技术-建立通信" tabindex="-1">24、RPC使用了哪些关键技术，建立通信 <a class="header-anchor" href="#_24、rpc使用了哪些关键技术-建立通信" aria-label="Permalink to &quot;24、RPC使用了哪些关键技术，建立通信&quot;">​</a></h3><h3 id="_25、rpc使用了哪些关键技术-动态代理" tabindex="-1">25、RPC使用了哪些关键技术，动态代理 <a class="header-anchor" href="#_25、rpc使用了哪些关键技术-动态代理" aria-label="Permalink to &quot;25、RPC使用了哪些关键技术，动态代理&quot;">​</a></h3><h3 id="_26、服务调用超时会怎么样" tabindex="-1">26、服务调用超时会怎么样？ <a class="header-anchor" href="#_26、服务调用超时会怎么样" aria-label="Permalink to &quot;26、服务调用超时会怎么样？&quot;">​</a></h3><h3 id="_27、dubbo支持服务多协议吗" tabindex="-1">27、Dubbo支持服务多协议吗？ <a class="header-anchor" href="#_27、dubbo支持服务多协议吗" aria-label="Permalink to &quot;27、Dubbo支持服务多协议吗？&quot;">​</a></h3><h3 id="_28、dubbo-服务负载均衡策略" tabindex="-1">28、dubbo 服务负载均衡策略？ <a class="header-anchor" href="#_28、dubbo-服务负载均衡策略" aria-label="Permalink to &quot;28、dubbo 服务负载均衡策略？&quot;">​</a></h3><h3 id="_29、dubbo-连接注册中心和直连的区别" tabindex="-1">29、dubbo 连接注册中心和直连的区别 <a class="header-anchor" href="#_29、dubbo-连接注册中心和直连的区别" aria-label="Permalink to &quot;29、dubbo 连接注册中心和直连的区别&quot;">​</a></h3><h3 id="_30、dubbo-配置文件是如何加载到-spring-中的" tabindex="-1">30、Dubbo 配置文件是如何加载到 Spring 中的？ <a class="header-anchor" href="#_30、dubbo-配置文件是如何加载到-spring-中的" aria-label="Permalink to &quot;30、Dubbo 配置文件是如何加载到 Spring 中的？&quot;">​</a></h3>',63),b=[s];function n(l,i,u,p,E,c){return a(),e("div",null,b)}const D=o(r,[["render",n]]);export{h as __pageData,D as default};
