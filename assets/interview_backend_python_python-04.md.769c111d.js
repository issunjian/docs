import{_ as s,o as a,c as o,V as n}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/python/python-04.md","filePath":"interview/backend/python/python-04.md"}'),e={name:"interview/backend/python/python-04.md"},l=n(`<h3 id="_1、break、continue、pass是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1breakcontinuepass%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">1、break、continue、pass是什么？</a> <a class="header-anchor" href="#_1、break、continue、pass是什么" aria-label="Permalink to &quot;[1、break、continue、pass是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#1breakcontinuepass是什么)&quot;">​</a></h3><p>break：在满足条件时，它将导致程序退出循环。</p><p>continue：将返回到循环的开头，它使程序在当前循环迭代中的跳过所有剩余语句。</p><p>pass：使程序传递所有剩余语句而不执行。</p><h3 id="_2、ascii、unicode、utf-8、gbk的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2asciiunicodeutf-8gbk%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、ascii、Unicode、utf-8、gbk的区别</a> <a class="header-anchor" href="#_2、ascii、unicode、utf-8、gbk的区别" aria-label="Permalink to &quot;[2、ascii、Unicode、utf-8、gbk的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#2asciiunicodeutf-8gbk的区别)&quot;">​</a></h3><p><strong>1、</strong> ascii 是最早美国用的标准信息交换码，把所有的字母的大小写，各种符号用 二进制来表示，共有256中，加入些拉丁文等字符，1bytes代表一个字符</p><p><strong>2、</strong> Unicode是为了统一世界各国语言的不用，统一用2个bytes代表一个字符，可以表达2^16=65556个，称为万国语言，特点：速度快，但浪费空间</p><p><strong>3、</strong> utf-8 为了改变Unicode的这种缺点，规定1个英文字符用1个字节表示，1个中文字符用3个字节表示，特点；节省空间，速度慢，用在硬盘数据传输，网络数据传输，相比硬盘和网络速度，体现不出来的</p><p><strong>4、</strong> gbk 是中文的字符编码，用2个字节代表一个字符</p><h3 id="_3、如何在python中管理内存" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3%E5%A6%82%E4%BD%95%E5%9C%A8python%E4%B8%AD%E7%AE%A1%E7%90%86%E5%86%85%E5%AD%98" target="_blank" rel="noreferrer">3、如何在Python中管理内存？</a> <a class="header-anchor" href="#_3、如何在python中管理内存" aria-label="Permalink to &quot;[3、如何在Python中管理内存？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#3如何在python中管理内存)&quot;">​</a></h3><p>Python内存由Python的私有headspace管理。</p><p>所有的Python对象和数据结构都位于一个私有堆中。私用堆的分配由Python内存管理器负责。</p><p>Python还内置了一个的垃圾收集器，可以回收未使用的内存并释放内存，使其可用于headspace。</p><h3 id="_4、python中的map-function是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4python%E4%B8%AD%E7%9A%84map-function%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">4、Python中的Map Function是什么？</a> <a class="header-anchor" href="#_4、python中的map-function是什么" aria-label="Permalink to &quot;[4、Python中的Map Function是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#4python中的map-function是什么)&quot;">​</a></h3><p>map函数在对可迭代对象的每一项应用特定函数后，会返回map对象。</p><h3 id="_5、如何保证redis中的数据都是热点数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81redis%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%83%BD%E6%98%AF%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">5、如何保证Redis中的数据都是热点数据</a> <a class="header-anchor" href="#_5、如何保证redis中的数据都是热点数据" aria-label="Permalink to &quot;[5、如何保证Redis中的数据都是热点数据](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#5如何保证redis中的数据都是热点数据)&quot;">​</a></h3><p><strong>1、</strong> Redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。Redis 提供 6种数据淘汰策略：</p><p><strong>2、</strong> volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</p><p><strong>3、</strong> volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</p><p><strong>4、</strong> volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</p><p><strong>5、</strong> allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</p><p><strong>6、</strong> allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p><p><strong>7、</strong> no-enviction（驱逐）：禁止驱逐数据</p><h3 id="_6、当退出python时-是否释放全部内存" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E5%BD%93%E9%80%80%E5%87%BApython%E6%97%B6%E6%98%AF%E5%90%A6%E9%87%8A%E6%94%BE%E5%85%A8%E9%83%A8%E5%86%85%E5%AD%98" target="_blank" rel="noreferrer">6、当退出Python时，是否释放全部内存？</a> <a class="header-anchor" href="#_6、当退出python时-是否释放全部内存" aria-label="Permalink to &quot;[6、当退出Python时，是否释放全部内存？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#6当退出python时是否释放全部内存)&quot;">​</a></h3><p>答案是No。循环引用其它对象或引用自全局命名空间的对象的模块，在Python退出时并非完全释放。</p><p>另外，也不会释放C库保留的内存部分。</p><h3 id="_7、select、poll、epoll模型的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7selectpollepoll%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">7、select、poll、epoll模型的区别</a> <a class="header-anchor" href="#_7、select、poll、epoll模型的区别" aria-label="Permalink to &quot;[7、select、poll、epoll模型的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#7selectpollepoll模型的区别)&quot;">​</a></h3><p><strong>1、</strong> 支持一个进程所能打开的最大连接数</p><p>select的最大连接数大概32_32，或者32_64</p><p>poll本质和select没区别，但是它没有最大连接数限制</p><p>epoll大概10万左右(1G的机器)</p><p><strong>2、</strong> FD剧增后带来的IO效率问题</p><p>select和poll每次调用都会对连接进行线性遍历，所以会随着FD的增加会造成遍历速度慢的“线性下降性能问题”</p><p>epoll没有前两个的线性下降的性能问题，但是当socket都很活跃的情况下，可能会有性能问题。</p><p><strong>3、</strong> 消息传递方式</p><p>select和poll内核需要将消息传递到用户空间，都需要内核拷贝动作。</p><p>epoll通过内核和用户空间共享一块内存来实现</p><h3 id="_8、什么是c-s和b-s架构" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8%E4%BB%80%E4%B9%88%E6%98%AFc/s%E5%92%8Cb/s%E6%9E%B6%E6%9E%84" target="_blank" rel="noreferrer">8、什么是C/S和B/S架构</a> <a class="header-anchor" href="#_8、什么是c-s和b-s架构" aria-label="Permalink to &quot;[8、什么是C/S和B/S架构](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#8什么是c/s和b/s架构)&quot;">​</a></h3><p><strong>1、</strong> C/S 架构是一种典型的两层架构，其全称是Client/Server，即客户端服务器端架构，其客户端包含一个或多个在用户的电脑上运行的程序，而服务器端有两种，一种是数据库服务器端，客户端通过数据库连接访问服务器端的数据；另一种是Socket服务器端，服务器端的程序通过Socket与客户端的程序通信。</p><p><strong>2、</strong> B/S架构的全称为Browser/Server，即浏览器/服务器结构。Browser指的是Web浏览器，极少数事务逻辑在前端实现，但主要事务逻辑在服务器端实现，Browser客户端，WebApp服务器端和DB端构成所谓的三层架构。B/S架构的系统无须特别安装，只有Web浏览器即可。</p><h3 id="_9、列举redis支持的过期策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E5%88%97%E4%B8%BEredis%E6%94%AF%E6%8C%81%E7%9A%84%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">9、列举Redis支持的过期策略</a> <a class="header-anchor" href="#_9、列举redis支持的过期策略" aria-label="Permalink to &quot;[9、列举Redis支持的过期策略](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#9列举redis支持的过期策略)&quot;">​</a></h3><p><strong>定时删除</strong></p><p>在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除</p><p><strong>惰性删除</strong></p><p>key过期的时候不删除，每次从数据库获取key的时候去检查是否过期，若过期，则删除，返回null。</p><p><strong>定期删除</strong></p><p>每隔一段时间执行一次删除(在Redis.conf配置文件设置hz，1s刷新的频率)过期key操作</p><h3 id="_10、输入某年某月某日-判断这是这一年的第几天" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E8%BE%93%E5%85%A5%E6%9F%90%E5%B9%B4%E6%9F%90%E6%9C%88%E6%9F%90%E6%97%A5%E5%88%A4%E6%96%AD%E8%BF%99%E6%98%AF%E8%BF%99%E4%B8%80%E5%B9%B4%E7%9A%84%E7%AC%AC%E5%87%A0%E5%A4%A9" target="_blank" rel="noreferrer">10、输入某年某月某日，判断这是这一年的第几天？</a> <a class="header-anchor" href="#_10、输入某年某月某日-判断这是这一年的第几天" aria-label="Permalink to &quot;[10、输入某年某月某日，判断这是这一年的第几天？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题附答案解析，大汇总.md#10输入某年某月某日判断这是这一年的第几天)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">date</span><span style="color:#F286C4;">=</span><span style="color:#97E1F1;">input</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">请输入某年某月某日，格式：xxxx.xx.xx</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get_day</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F6F6F4;">days1</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">28</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">days2</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">29</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">31</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">year,month,day </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">(i) </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> date.split(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)]</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">400</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">or</span><span style="color:#F6F6F4;"> (year </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">4</span><span style="color:#F286C4;">==</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> year </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F286C4;">!=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F6F6F4;">days</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">days2</span></span>
<span class="line"><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">days</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">days1</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">sum</span><span style="color:#F6F6F4;">(days[</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">month</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">])</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">day</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(get_day(date))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">date</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">input</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;请输入某年某月某日，格式：xxxx.xx.xx&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_day</span><span style="color:#24292E;">(date):</span></span>
<span class="line"><span style="color:#24292E;">days1</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">28</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">days2</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">29</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">31</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">year,month,day </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">int</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> date.split(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> year </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">400</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">or</span><span style="color:#24292E;"> (year </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#D73A49;">==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> year </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">!=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#24292E;">days</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">days2</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">days</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">days1</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;">(days[:month</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">day</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(get_day(date))</span></span></code></pre></div><h3 id="_11、列表和元组之间的区别是" tabindex="-1">11、列表和元组之间的区别是？ <a class="header-anchor" href="#_11、列表和元组之间的区别是" aria-label="Permalink to &quot;11、列表和元组之间的区别是？&quot;">​</a></h3><h3 id="_12、dns域名解析过程" tabindex="-1">12、DNS域名解析过程 <a class="header-anchor" href="#_12、dns域名解析过程" aria-label="Permalink to &quot;12、DNS域名解析过程&quot;">​</a></h3><h3 id="_13、什么是猴子补丁" tabindex="-1">13、什么是猴子补丁？ <a class="header-anchor" href="#_13、什么是猴子补丁" aria-label="Permalink to &quot;13、什么是猴子补丁？&quot;">​</a></h3><h3 id="_14、在python中是如何管理内存的" tabindex="-1">14、在Python中是如何管理内存的？ <a class="header-anchor" href="#_14、在python中是如何管理内存的" aria-label="Permalink to &quot;14、在Python中是如何管理内存的？&quot;">​</a></h3><h3 id="_15、python有什么特点" tabindex="-1">15、Python有什么特点？ <a class="header-anchor" href="#_15、python有什么特点" aria-label="Permalink to &quot;15、Python有什么特点？&quot;">​</a></h3><h3 id="_16、解释一下python中的逻辑运算符" tabindex="-1">16、解释一下Python中的逻辑运算符 <a class="header-anchor" href="#_16、解释一下python中的逻辑运算符" aria-label="Permalink to &quot;16、解释一下Python中的逻辑运算符&quot;">​</a></h3><h3 id="_17、-和is的区别是" tabindex="-1">17、==和is的区别是？ <a class="header-anchor" href="#_17、-和is的区别是" aria-label="Permalink to &quot;17、==和is的区别是？&quot;">​</a></h3><h3 id="_18、python中的闭包是什么" tabindex="-1">18、Python中的闭包是什么？ <a class="header-anchor" href="#_18、python中的闭包是什么" aria-label="Permalink to &quot;18、Python中的闭包是什么？&quot;">​</a></h3><h3 id="_19、python中使用的zip函数是什么" tabindex="-1">19、Python中使用的zip函数是什么？ <a class="header-anchor" href="#_19、python中使用的zip函数是什么" aria-label="Permalink to &quot;19、Python中使用的zip函数是什么？&quot;">​</a></h3><h3 id="_20、元组的解封装是什么" tabindex="-1">20、元组的解封装是什么？ <a class="header-anchor" href="#_20、元组的解封装是什么" aria-label="Permalink to &quot;20、元组的解封装是什么？&quot;">​</a></h3><h3 id="_21、什么是python-为什么它会如此流行" tabindex="-1">21、什么是Python？为什么它会如此流行？ <a class="header-anchor" href="#_21、什么是python-为什么它会如此流行" aria-label="Permalink to &quot;21、什么是Python？为什么它会如此流行？&quot;">​</a></h3><h3 id="_22、logging模块的作用以及应用场景" tabindex="-1">22、logging模块的作用以及应用场景 <a class="header-anchor" href="#_22、logging模块的作用以及应用场景" aria-label="Permalink to &quot;22、logging模块的作用以及应用场景&quot;">​</a></h3><h3 id="_23、为什么基于tcp协议的通信比基于udp协议的通信更可靠" tabindex="-1">23、为什么基于tcp协议的通信比基于udp协议的通信更可靠 <a class="header-anchor" href="#_23、为什么基于tcp协议的通信比基于udp协议的通信更可靠" aria-label="Permalink to &quot;23、为什么基于tcp协议的通信比基于udp协议的通信更可靠&quot;">​</a></h3><h3 id="_24、将下面列表中的元素根据位数合并成字典" tabindex="-1">24、将下面列表中的元素根据位数合并成字典： <a class="header-anchor" href="#_24、将下面列表中的元素根据位数合并成字典" aria-label="Permalink to &quot;24、将下面列表中的元素根据位数合并成字典：&quot;">​</a></h3><h3 id="_25、关于python程序的运行方面-有什么手段能提升性能" tabindex="-1">25、关于Python程序的运行方面，有什么手段能提升性能？ <a class="header-anchor" href="#_25、关于python程序的运行方面-有什么手段能提升性能" aria-label="Permalink to &quot;25、关于Python程序的运行方面，有什么手段能提升性能？&quot;">​</a></h3><h3 id="_26、双下划线和单下划线的区别" tabindex="-1">26、双下划线和单下划线的区别 <a class="header-anchor" href="#_26、双下划线和单下划线的区别" aria-label="Permalink to &quot;26、双下划线和单下划线的区别&quot;">​</a></h3><h3 id="_27、什么是arp协议" tabindex="-1">27、什么是arp协议 <a class="header-anchor" href="#_27、什么是arp协议" aria-label="Permalink to &quot;27、什么是arp协议&quot;">​</a></h3><h3 id="_28、redis中sentinel的作用" tabindex="-1">28、Redis中sentinel的作用 <a class="header-anchor" href="#_28、redis中sentinel的作用" aria-label="Permalink to &quot;28、Redis中sentinel的作用&quot;">​</a></h3><h3 id="_29、以下代码输出什么" tabindex="-1">29、以下代码输出什么？ <a class="header-anchor" href="#_29、以下代码输出什么" aria-label="Permalink to &quot;29、以下代码输出什么？&quot;">​</a></h3><h3 id="_30、进程之间如何进行通信" tabindex="-1">30、进程之间如何进行通信？ <a class="header-anchor" href="#_30、进程之间如何进行通信" aria-label="Permalink to &quot;30、进程之间如何进行通信？&quot;">​</a></h3>`,69),p=[l];function t(r,c,E,y,h,i){return a(),o("div",null,p)}const B=s(e,[["render",t]]);export{d as __pageData,B as default};
