import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/rumen-20230404151539.e68d5e4f.png",o="/docs/assets/rumen-20230404152253.f70ca392.png",e="/docs/assets/rumen-20230404152445.b35b743e.png",t="/docs/assets/rumen-20230404153844.ee9d3f84.png",c="/docs/assets/rumen-20230404155658.2fc50d64.png",r="/docs/assets/rumen-20230404160130.030b7a1f.png",y="/docs/assets/rumen-20230404160412.838b45ab.png",F="/docs/assets/buffer-channel-selector-20230406183808.be6ab342.png",i="/docs/assets/buffer-channel-selector-20230406182921.69515529.png",A=JSON.parse('{"title":"详解Java NIO的Buffer缓冲区和Channel通道","description":"Java NIO 中的 Buffer 和 Channel 是 NIO 系统的核心组件。Buffer 负责存储数据，提供了对数据的读写操作。Channel 代表了与 I/O 设备（如文件或套接字）之间的连接。它提供了从源设备到 Buffer 的数据读取能力和从 Buffer 到目标设备的数据写入能力。","frontmatter":{"title":"详解Java NIO的Buffer缓冲区和Channel通道","shortTitle":"Buffer和Channel","category":["Java核心"],"tag":["Java NIO"],"description":"Java NIO 中的 Buffer 和 Channel 是 NIO 系统的核心组件。Buffer 负责存储数据，提供了对数据的读写操作。Channel 代表了与 I/O 设备（如文件或套接字）之间的连接。它提供了从源设备到 Buffer 的数据读取能力和从 Buffer 到目标设备的数据写入能力。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"java,Channel,Buffer,nio"}]]},"headers":[],"relativePath":"backend/tobetter/nio/buffer-channel.md","filePath":"backend/tobetter/nio/buffer-channel.md"}'),E={name:"backend/tobetter/nio/buffer-channel.md"},f=l('<h1 id="_12-3-buffer和channel" tabindex="-1">12.3 Buffer和Channel <a class="header-anchor" href="#_12-3-buffer和channel" aria-label="Permalink to &quot;12.3 Buffer和Channel&quot;">​</a></h1><p>首先我们再来回顾一下 <a href="https://tobebetterjavaer.com/nio/nio-better-io.html" target="_blank" rel="noreferrer">IO 和 NIO 的区别</a>：</p><ul><li>可简单认为：<strong>IO 是面向流的处理，NIO 是面向块(缓冲区)的处理</strong></li><li>面向流的 I/O 系统<strong>一次一个字节地处理数据</strong>。</li><li>一个面向块(缓冲区)的 I/O 系统<strong>以块的形式处理数据</strong>。</li></ul><p>NIO 主要有<strong>两个核心部分组成</strong>：</p><ul><li><strong>Buffer 缓冲区</strong></li><li><strong>Channel 通道</strong></li></ul><p>在 NIO 中，并不是以流的方式来处理数据的，而是以 buffer 缓冲区和 Channel 通道<strong>配合使用</strong>来处理数据的。</p><p>简单理解一下：</p><p>可以把 Channel 通道比作铁路，buffer 缓冲区比作成火车(运载着货物)</p><p>而我们的 NIO 就是<strong>通过 Channel 通道运输着存储数据的 Buffer 缓冲区的来实现数据的处理</strong>！</p><p>要时刻记住：Channel 不与数据打交道，它只负责运输数据。与数据打交道的是 Buffer 缓冲区</p><ul><li><strong>Channel--&gt;运输</strong></li><li><strong>Buffer--&gt;数据</strong></li></ul><p>相对于传统 IO 而言，<strong>流是单向的</strong>。对于 NIO 而言，有了 Channel 通道这个概念，我们的<strong>读写都是双向</strong>的(铁路上的火车能从广州去北京、自然就能从北京返还到广州)！</p><h3 id="buffer-缓冲区" tabindex="-1">Buffer 缓冲区 <a class="header-anchor" href="#buffer-缓冲区" aria-label="Permalink to &quot;Buffer 缓冲区&quot;">​</a></h3><p>我们来看看 Buffer 缓冲区有什么值得我们注意的地方。</p><p>Buffer 是缓冲区的抽象类：</p><img src="'+p+'"><p>其中 ByteBuffer 是<strong>用得最多的实现类</strong>(在通道中读写字节数据)。</p><img src="'+o+'"><p>拿到一个缓冲区我们往往会做什么？很简单，就是<strong>读取缓冲区的数据/写数据到缓冲区中</strong>。所以，缓冲区的核心方法就是 put 和 get：</p><img src="'+e+`"><p>Buffer 类维护了 4 个核心变量来提供<strong>关于其所包含的数组信息</strong>。它们是：</p><ul><li>容量 Capacity <strong>缓冲区能够容纳的数据元素的最大数量</strong>。容量在缓冲区创建时被设定，并且永远不能被改变。(不能被改变的原因也很简单，底层是数组嘛)</li><li>上界 Limit <strong>缓冲区里的数据的总数</strong>，代表了当前缓冲区中一共有多少数据。</li><li>位置 Position <strong>下一个要被读或写的元素的位置</strong>。Position 会自动由相应的 <code>get()</code>和 <code>put()</code>函数更新。</li><li>标记 Mark 一个备忘位置。<strong>用于记录上一次读写的位置</strong>。</li></ul><p>首先展示一下<strong>是如何创建缓冲区的，核心变量的值是怎么变化的</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个缓冲区</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> byteBuffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 看一下初始时4个核心变量的值</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">初始时--&gt;limit---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">limit</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">初始时--&gt;position---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">position</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">初始时--&gt;capacity---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">capacity</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">初始时--&gt;mark---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> byteBuffer.</span><span style="color:#62E884;">mark</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">--------------------------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 添加一些数据到缓冲区中</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(s.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 看一下初始时4个核心变量的值</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">put完之后--&gt;limit---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">limit</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">put完之后--&gt;position---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">position</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">put完之后--&gt;capacity---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">capacity</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">put完之后--&gt;mark---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> byteBuffer.</span><span style="color:#62E884;">mark</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个缓冲区</span></span>
<span class="line"><span style="color:#24292E;">ByteBuffer byteBuffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 看一下初始时4个核心变量的值</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;初始时--&gt;limit---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;初始时--&gt;position---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;初始时--&gt;capacity---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;初始时--&gt;mark---&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> byteBuffer.</span><span style="color:#6F42C1;">mark</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;--------------------------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 添加一些数据到缓冲区中</span></span>
<span class="line"><span style="color:#24292E;">String s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 看一下初始时4个核心变量的值</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;put完之后--&gt;limit---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;put完之后--&gt;position---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;put完之后--&gt;capacity---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;put完之后--&gt;mark---&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> byteBuffer.</span><span style="color:#6F42C1;">mark</span><span style="color:#24292E;">());</span></span></code></pre></div><p>运行结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">初始时--&gt;limit---&gt;1024</span></span>
<span class="line"><span style="color:#f6f6f4;">初始时--&gt;position---&gt;0</span></span>
<span class="line"><span style="color:#f6f6f4;">初始时--&gt;capacity---&gt;1024</span></span>
<span class="line"><span style="color:#f6f6f4;">初始时--&gt;mark---&gt;java.nio.HeapByteBuffer[pos=0 lim=1024 cap=1024]</span></span>
<span class="line"><span style="color:#f6f6f4;">--------------------------------------</span></span>
<span class="line"><span style="color:#f6f6f4;">put完之后--&gt;limit---&gt;1024</span></span>
<span class="line"><span style="color:#f6f6f4;">put完之后--&gt;position---&gt;12</span></span>
<span class="line"><span style="color:#f6f6f4;">put完之后--&gt;capacity---&gt;1024</span></span>
<span class="line"><span style="color:#f6f6f4;">put完之后--&gt;mark---&gt;java.nio.HeapByteBuffer[pos=12 lim=1024 cap=1024]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">初始时--&gt;limit---&gt;1024</span></span>
<span class="line"><span style="color:#24292e;">初始时--&gt;position---&gt;0</span></span>
<span class="line"><span style="color:#24292e;">初始时--&gt;capacity---&gt;1024</span></span>
<span class="line"><span style="color:#24292e;">初始时--&gt;mark---&gt;java.nio.HeapByteBuffer[pos=0 lim=1024 cap=1024]</span></span>
<span class="line"><span style="color:#24292e;">--------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">put完之后--&gt;limit---&gt;1024</span></span>
<span class="line"><span style="color:#24292e;">put完之后--&gt;position---&gt;12</span></span>
<span class="line"><span style="color:#24292e;">put完之后--&gt;capacity---&gt;1024</span></span>
<span class="line"><span style="color:#24292e;">put完之后--&gt;mark---&gt;java.nio.HeapByteBuffer[pos=12 lim=1024 cap=1024]</span></span></code></pre></div><p>现在<strong>我想要从缓存区拿数据</strong>，怎么拿呀？？NIO 给了我们一个<code>flip()</code>方法。这个方法可以<strong>改动 position 和 limit 的位置</strong>！</p><p>在之前代码的基础上，我们<code>flip()</code>一下。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// flip()方法</span></span>
<span class="line"><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">flip()方法之后--&gt;limit---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">limit</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">flip()方法之后--&gt;position---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">position</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">flip()方法之后--&gt;capacity---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">capacity</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">flip()方法之后--&gt;mark---&gt;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> byteBuffer.</span><span style="color:#62E884;">mark</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// flip()方法</span></span>
<span class="line"><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;flip()方法之后--&gt;limit---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;flip()方法之后--&gt;position---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">position</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;flip()方法之后--&gt;capacity---&gt;&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">capacity</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;flip()方法之后--&gt;mark---&gt;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> byteBuffer.</span><span style="color:#6F42C1;">mark</span><span style="color:#24292E;">());</span></span></code></pre></div><p>再看看 4 个核心属性的值会发生什么变化：</p><img src="`+t+`"><p>在调用 <code>flip()</code> 之后，limit 变为当前 position 的值（12），position 重置为 0。这意味着你可以从缓冲区的开始位置读取刚刚写入的数据，直到 limit 指定的位置。capacity 保持不变（1024）。</p><p>假设我们有一个初始容量为 1024 的 ByteBuffer。</p><p><strong>初始状态</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">position = 0</span></span>
<span class="line"><span style="color:#f6f6f4;">limit = 1024</span></span>
<span class="line"><span style="color:#f6f6f4;">capacity = 1024</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">position = 0</span></span>
<span class="line"><span style="color:#24292e;">limit = 1024</span></span>
<span class="line"><span style="color:#24292e;">capacity = 1024</span></span></code></pre></div><p><strong>添加数据 &quot;沉默王二&quot; 后</strong>:</p><p>由于 &quot;沉默王二&quot; 为 UTF-8 编码，一个汉字占 3 个字节，共有 4 个汉字，所以占用 12 个字节。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">position = 12</span></span>
<span class="line"><span style="color:#f6f6f4;">limit = 1024</span></span>
<span class="line"><span style="color:#f6f6f4;">capacity = 1024</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">position = 12</span></span>
<span class="line"><span style="color:#24292e;">limit = 1024</span></span>
<span class="line"><span style="color:#24292e;">capacity = 1024</span></span></code></pre></div><p><strong>调用 <code>flip()</code> 方法后</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">position = 0</span></span>
<span class="line"><span style="color:#f6f6f4;">limit = 12</span></span>
<span class="line"><span style="color:#f6f6f4;">capacity = 1024</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">position = 0</span></span>
<span class="line"><span style="color:#24292e;">limit = 12</span></span>
<span class="line"><span style="color:#24292e;">capacity = 1024</span></span></code></pre></div><p>用一幅图来表示就是。</p><img src="`+c+`"><p>当切换成读模式之后，我们就可以读取缓冲区的数据了：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个limit()大小的字节数组(因为就只有limit这么多个数据可读)</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] bytes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[byteBuffer.</span><span style="color:#62E884;">limit</span><span style="color:#F6F6F4;">()];</span></span>
<span class="line"><span style="color:#7B7F8B;">// 将读取的数据装进我们的字节数组中</span></span>
<span class="line"><span style="color:#F6F6F4;">byteBuffer.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(bytes);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 输出数据</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(bytes, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, bytes.length));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个limit()大小的字节数组(因为就只有limit这么多个数据可读)</span></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[byteBuffer.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#6A737D;">// 将读取的数据装进我们的字节数组中</span></span>
<span class="line"><span style="color:#24292E;">byteBuffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(bytes);</span></span>
<span class="line"><span style="color:#6A737D;">// 输出数据</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(bytes, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bytes.length));</span></span></code></pre></div><p>输出后的结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">沉默王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">沉默王二</span></span></code></pre></div><p>随后输出一下核心变量的值看看：</p><img src="`+r+'"><p><strong>读完如何还想写数据到缓冲区</strong>，那就使用<code>clear()</code> 方法，这个方法会“清空”缓冲区，数据没有真正被清空，只是被<strong>遗忘</strong>掉了</p><img src="'+y+`"><h3 id="channel-通道" tabindex="-1">Channel 通道 <a class="header-anchor" href="#channel-通道" aria-label="Permalink to &quot;Channel 通道&quot;">​</a></h3><p>Channel 通道<strong>只负责传输数据、不直接操作数据</strong>。操作数据都是通过 Buffer 缓冲区来进行操作！通常，通道可以分为两大类：文件通道和套接字通道。</p><p>FileChannel：用于文件 I/O 的通道，支持文件的读、写和追加操作。FileChannel 允许在文件的任意位置进行数据传输，支持文件锁定以及内存映射文件等高级功能。FileChannel 无法设置为非阻塞模式，因此它只适用于阻塞式文件操作。</p><p>SocketChannel：用于 TCP 套接字 I/O 的通道。SocketChannel 支持非阻塞模式，可以与 Selector（下文会讲）一起使用，实现高效的网络通信。SocketChannel 允许连接到远程主机，进行数据传输。</p><p>与之匹配的有ServerSocketChannel：用于监听 TCP 套接字连接的通道。与 SocketChannel 类似，ServerSocketChannel 也支持非阻塞模式，并可以与 Selector 一起使用。ServerSocketChannel 负责监听新的连接请求，接收到连接请求后，可以创建一个新的 SocketChannel 以处理数据传输。</p><p>DatagramChannel：用于 UDP 套接字 I/O 的通道。DatagramChannel 支持非阻塞模式，可以发送和接收数据报包，适用于无连接的、不可靠的网络通信。</p><p>这篇我们主要来讲 FileChannel，SocketChannel、ServerSocketChannel 和 DatagramChannel 会放到<a href="https://tobebetterjavaer.com/nio/network-connect.html" target="_blank" rel="noreferrer">后面的章节中</a>讲解。</p><h4 id="文件通道-filechannel" tabindex="-1">文件通道 FileChannel <a class="header-anchor" href="#文件通道-filechannel" aria-label="Permalink to &quot;文件通道 FileChannel&quot;">​</a></h4><p>可以通过下面的方式打开一个通道。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">docs/配套教程.md</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.WRITE);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;docs/配套教程.md&quot;</span><span style="color:#24292E;">), StandardOpenOption.WRITE);</span></span></code></pre></div><p>这里我们用到了 <a href="https://tobebetterjavaer.com/nio/paths-files.html" target="_blank" rel="noreferrer">Paths</a>，这个后面也会讲到。</p><p>①、使用<strong>FileChannel 配合 ByteBuffer 缓冲区</strong>实现文件复制的功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> sourceChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> destinationChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger1.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.WRITE, StandardOpenOption.CREATE)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (sourceChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      buffer.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">      destinationChannel.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">      buffer.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileChannel sourceChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger.txt&quot;</span><span style="color:#24292E;">), StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">    FileChannel destinationChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger1.txt&quot;</span><span style="color:#24292E;">), StandardOpenOption.WRITE, StandardOpenOption.CREATE)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (sourceChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      destinationChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">      buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们创建一个容量为 1024 的 ByteBuffer 作为缓冲区。在循环中，我们从源文件的 FileChannel 读取数据到缓冲区。当 <code>read()</code> 方法返回 -1 时，表示已经到达文件末尾。</p><p>读取数据后，我们调用 <code>flip()</code> 方法，以便在缓冲区中准备好要写入的数据。然后，我们将缓冲区的内容写入目标文件的 FileChannel（<code>write()</code> 方法）。在写入完成后，我们调用 <code>clear()</code> 方法重置缓冲区，以便在下一次迭代中重用它。</p><p>②、使用<strong>内存映射文件（MappedByteBuffer）<strong>的方式实现</strong>文件复制</strong>的功能(直接操作缓冲区)：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> sourceChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> destinationChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger2.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.READ)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> fileSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sourceChannel.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">MappedByteBuffer</span><span style="color:#F6F6F4;"> sourceMappedBuffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sourceChannel.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(FileChannel.MapMode.READ_ONLY, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, fileSize);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">MappedByteBuffer</span><span style="color:#F6F6F4;"> destinationMappedBuffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> destinationChannel.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(FileChannel.MapMode.READ_WRITE, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, fileSize);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> fileSize; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sourceMappedBuffer.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        destinationMappedBuffer.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(i, b);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileChannel sourceChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger.txt&quot;</span><span style="color:#24292E;">), StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel destinationChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger2.txt&quot;</span><span style="color:#24292E;">), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.READ)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> fileSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceChannel.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    MappedByteBuffer sourceMappedBuffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceChannel.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(FileChannel.MapMode.READ_ONLY, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fileSize);</span></span>
<span class="line"><span style="color:#24292E;">    MappedByteBuffer destinationMappedBuffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> destinationChannel.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(FileChannel.MapMode.READ_WRITE, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fileSize);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> fileSize; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceMappedBuffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        destinationMappedBuffer.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(i, b);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>MappedByteBuffer 是 Java NIO 中的一个类，它继承自 <code>java.nio.ByteBuffer</code>。MappedByteBuffer 用于表示一个内存映射文件，即将文件的一部分或全部映射到内存中，以便通过直接操作内存来实现对文件的读写。这种方式可以提高文件 I/O 的性能，因为操作系统可以直接在内存和磁盘之间传输数据，无需通过 Java 应用程序进行额外的数据拷贝。</p><p>通常与 FileChannel 一起使用，可以通过调用 FileChannel 的 <code>map()</code> 方法创建 MappedByteBuffer 对象。<code>map()</code> 方法接受三个参数：映射模式（FileChannel.MapMode）映射起始位置和映射的长度。</p><p>映射模式包括只读模式（READ_ONLY）、读写模式（READ_WRITE）和专用模式（PRIVATE）。</p><p>我们设置源文件的 MappedByteBuffer 为只读模式（READ_ONLY），目标文件的 MappedByteBuffer 为读写模式（READ_WRITE）。</p><p>在循环中，我们逐字节地从源文件的 MappedByteBuffer 读取数据并将其写入目标文件的 MappedByteBuffer。这样就实现了文件复制功能。利用内存映射文件（MappedByteBuffer）实现的文件复制，可能会比使用 ByteBuffer 的方法更快。</p><p>需要注意的是，使用 MappedByteBuffer 进行文件操作时，数据的修改可能不会立即写入磁盘。可以通过调用 MappedByteBuffer 的 <code>force()</code> 方法将数据立即写回磁盘。</p><p>③、通道之间通过<code>transfer()</code>实现数据的传输(直接操作缓冲区)：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> sourceChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> destinationChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger3.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.READ)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    sourceChannel.</span><span style="color:#62E884;">transferTo</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, sourceChannel.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">(), destinationChannel);</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RuntimeException</span><span style="color:#F6F6F4;">(e);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileChannel sourceChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger.txt&quot;</span><span style="color:#24292E;">), StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">      FileChannel destinationChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger3.txt&quot;</span><span style="color:#24292E;">), StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.READ)) {</span></span>
<span class="line"><span style="color:#24292E;">    sourceChannel.</span><span style="color:#6F42C1;">transferTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, sourceChannel.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(), destinationChannel);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>FileChannel 的 <code>transferTo()</code> 方法是一个高效的文件传输方法，它允许将文件的一部分或全部内容直接从源文件通道传输到目标通道（通常是另一个文件通道或网络通道）。这种传输方式可以避免将文件数据在用户空间和内核空间之间进行多次拷贝，提高了文件传输的性能。</p><p><code>transferTo()</code> 方法接受以下三个参数：</p><ul><li>position：源文件中开始传输的位置。</li><li>count：要传输的字节数。</li><li>target：接收数据的目标通道。</li></ul><p>需要注意的是，<code>transferTo()</code> 方法可能无法一次传输所有请求的字节。在实际应用中，你可能需要使用循环来确保所有字节都被传输。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FileChannelTransferToLoopExampleWithPaths</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> sourcePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> destinationPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/itwanger/paicoding_copy.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用 try-with-resources 语句确保通道资源被正确关闭</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> sourceChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(sourcePath, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> destinationChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(destinationPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> position </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sourceChannel.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 循环传输，直到所有字节都被传输</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (position </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> count) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> transferred </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sourceChannel.</span><span style="color:#62E884;">transferTo</span><span style="color:#F6F6F4;">(position, count </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> position, destinationChannel);</span></span>
<span class="line"><span style="color:#F6F6F4;">                position </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> transferred;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileChannelTransferToLoopExampleWithPaths</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Path sourcePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/itwanger/paicoding.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Path destinationPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/itwanger/paicoding_copy.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用 try-with-resources 语句确保通道资源被正确关闭</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileChannel sourceChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(sourcePath, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">             FileChannel destinationChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(destinationPath, StandardOpenOption.CREATE, StandardOpenOption.WRITE)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceChannel.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 循环传输，直到所有字节都被传输</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (position </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> count) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> transferred </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sourceChannel.</span><span style="color:#6F42C1;">transferTo</span><span style="color:#24292E;">(position, count </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> position, destinationChannel);</span></span>
<span class="line"><span style="color:#24292E;">                position </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> transferred;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此外，<code>transferTo()</code> 方法在底层使用了操作系统提供的零拷贝功能（如 Linux 的 <code>sendfile()</code> 系统调用），可以大幅提高文件传输性能。但是，不同操作系统和 JVM 实现可能会影响零拷贝的可用性和性能，因此实际性能可能因环境而异。</p><p>零拷贝（Zero-Copy）是一种优化数据传输性能的技术，它最大限度地减少了在数据传输过程中的 CPU 和内存开销。在传统的数据传输过程中，数据通常需要在用户空间和内核空间之间进行多次拷贝，这会导致额外的 CPU 和内存开销。零拷贝技术通过避免这些多余的拷贝操作，实现了更高效的数据传输。</p><p>在 Java 中，零拷贝技术主要应用于文件和网络 I/O。FileChannel 类的 <code>transferTo()</code> 和 <code>transferFrom()</code> 方法就利用了零拷贝技术，可以在文件和网络通道之间高效地传输数据。详细参考：<a href="https://zhuanlan.zhihu.com/p/83398714" target="_blank" rel="noreferrer">深入剖析Linux IO原理和几种零拷贝机制的实现</a></p><h4 id="直接与非直接缓冲区" tabindex="-1">直接与非直接缓冲区 <a class="header-anchor" href="#直接与非直接缓冲区" aria-label="Permalink to &quot;直接与非直接缓冲区&quot;">​</a></h4><p>直接缓冲区和非直接缓冲区的差别主要在于它们在内存中的存储方式。这里给出了直接缓冲区和非直接缓冲区的简要概述和区别：</p><p>非直接缓冲区：</p><ul><li>分配在 JVM 堆内存中</li><li>受到垃圾回收的管理</li><li>在读写操作时，需要将数据从堆内存复制到操作系统的本地内存，再进行 I/O 操作</li><li>创建： <code>ByteBuffer.allocate(int capacity)</code></li></ul><p>直接缓冲区：</p><ul><li>分配在操作系统的本地内存中</li><li>不受垃圾回收的管理</li><li>在读写操作时，直接在本地内存中进行，避免了数据复制，提高了性能</li><li>创建： <code>ByteBuffer.allocateDirect(int capacity)</code></li><li>还有前面提到的 <code>FileChannel.map()</code> 方法，会返回一个类型为 MappedByteBuffer 的直接缓冲区。</li></ul><p>ByteBuffer.allocate和ByteBuffer.allocateDirect直接的差异。</p><img src="`+F+'"><p>直接缓冲区和非直接缓冲区之间的差异。</p><img src="'+i+`"><p>非直接缓冲区存储在JVM内部，数据需要从应用程序（Java）复制到非直接缓冲区，再复制到内核缓冲区，最后发送到设备（磁盘/网络）。而对于直接缓冲区，数据可以直接从应用程序（Java）复制到内核缓冲区，无需经过JVM的非直接缓冲区。</p><h4 id="异步文件通道-asynchronousfilechannel" tabindex="-1">异步文件通道 AsynchronousFileChannel <a class="header-anchor" href="#异步文件通道-asynchronousfilechannel" aria-label="Permalink to &quot;异步文件通道 AsynchronousFileChannel&quot;">​</a></h4><p>AsynchronousFileChannel 是 Java 7 引入的一个异步文件通道类，提供了对文件的异步读、写、打开和关闭等操作。</p><p>可以通过 <code>AsynchronousFileChannel.open()</code> 方法打开一个异步文件通道，该方法接受一个 <a href="https://tobebetterjavaer.com/nio/paths-files.html" target="_blank" rel="noreferrer">Path 对象</a>和一组打开选项（如 StandardOpenOption.READ、StandardOpenOption.WRITE 等）作为参数。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> file </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">example.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">AsynchronousFileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> AsynchronousFileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(file, StandardOpenOption.READ, StandardOpenOption.WRITE);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;example.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">AsynchronousFileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsynchronousFileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(file, StandardOpenOption.READ, StandardOpenOption.WRITE);</span></span></code></pre></div><p>AsynchronousFileChannel 提供了两种异步操作的方式：</p><p><strong>①、Future 方式</strong>：使用 <a href="https://tobebetterjavaer.com/thread/callable-future-futuretask.html" target="_blank" rel="noreferrer">Future</a> 对象来跟踪异步操作的完成情况。当我们调用一个异步操作（如 <code>read()</code> 或 <code>write()</code>）时，它会立即返回一个 Future 对象。可以使用这个对象来检查操作是否完成，以及获取操作的结果。这种方式适用于不需要在操作完成时立即执行其他操作的场景。</p><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> position </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;Integer&gt; result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer, position);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">result.</span><span style="color:#62E884;">isDone</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 执行其他操作</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> bytesRead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> result.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Bytes read: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> bytesRead);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Future&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, position);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">isDone</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 执行其他操作</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bytes read: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> bytesRead);</span></span></code></pre></div><p><strong>②、CompletionHandler 方式</strong>，使用一个实现了 CompletionHandler 接口的对象来处理异步操作的完成。我们需要提供一个 CompletionHandler 实现类，重写 <code>completed()</code> 和 <code>failed()</code> 方法，分别处理操作成功和操作失败的情况。当异步操作完成时，系统会自动调用相应的方法。这种方式适用于需要在操作完成时立即执行其他操作的场景。</p><p>举个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> position </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer, position, buffer, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CompletionHandler</span><span style="color:#F6F6F4;">&lt;Integer, ByteBuffer&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> completed(</span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">result</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">attachment</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Bytes read: </span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> result);</span></span>
<span class="line"><span style="color:#62E884;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> failed(</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">exc</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">attachment</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">err</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Read failed</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">        </span><span style="color:#F6F6F4;">exc</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, position, buffer, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> CompletionHandler&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">ByteBuffer</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">completed</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">result</span><span style="color:#24292E;">, ByteBuffer </span><span style="color:#E36209;">attachment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Bytes read: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">exc</span><span style="color:#24292E;">, ByteBuffer </span><span style="color:#E36209;">attachment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Read failed&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        exc.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>来看完整的示例，采用 Future 的形式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">docs/配套教程.md</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">AsynchronousFileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> AsynchronousFileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(path, StandardOpenOption.READ)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> position </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Future</span><span style="color:#F6F6F4;">&lt;Integer&gt; result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer, position);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">result.</span><span style="color:#62E884;">isDone</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 在这里可以执行其他任务，例如处理其他 I/O 操作</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> bytesRead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> result.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (bytesRead </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        position </span><span style="color:#F286C4;">+=</span><span style="color:#F6F6F4;"> bytesRead;</span></span>
<span class="line"><span style="color:#F6F6F4;">        buffer.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[buffer.</span><span style="color:#62E884;">limit</span><span style="color:#F6F6F4;">()];</span></span>
<span class="line"><span style="color:#F6F6F4;">        buffer.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(data));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        buffer.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;docs/配套教程.md&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (AsynchronousFileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsynchronousFileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(path, StandardOpenOption.READ)) {</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Future&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, position);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">result.</span><span style="color:#6F42C1;">isDone</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 在这里可以执行其他任务，例如处理其他 I/O 操作</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bytesRead </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        position </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> bytesRead;</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[buffer.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(data));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个示例中，我们使用 <code>AsynchronousFileChannel.read()</code> 方法发起异步读取操作。这个方法会返回一个 <code>Future&lt;Integer&gt;</code> 对象，表示读取操作的结果。我们可以通过调用 <code>isDone()</code> 方法来检查异步操作是否完成。完成后，我们可以通过调用 <code>get()</code> 方法获取实际读取的字节数。</p><p>然后我们来看 CompletionHandler 接口的形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">readAllBytes</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path) throws IOException, InterruptedException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">AsynchronousFileChannel</span><span style="color:#F6F6F4;"> fileChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> AsynchronousFileChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(path, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">AtomicLong</span><span style="color:#F6F6F4;"> position </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AtomicLong</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">CountDownLatch</span><span style="color:#F6F6F4;"> latch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">CountDownLatch</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    fileChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer, position.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(), </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">CompletionHandler</span><span style="color:#F6F6F4;">&lt;Integer, Object&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> completed(</span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">bytesRead</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">attachment</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F286C4;">if</span><span style="color:#62E884;"> (bytesRead </span><span style="color:#F286C4;">&gt;</span><span style="color:#62E884;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">position</span><span style="color:#62E884;">.addAndGet(bytesRead);</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">buffer</span><span style="color:#62E884;">.flip();</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#62E884;">[] </span><span style="color:#F6F6F4;">data</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#62E884;">[</span><span style="color:#F6F6F4;">buffer</span><span style="color:#62E884;">.limit()];</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">buffer</span><span style="color:#62E884;">.get(data);</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.print(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> String</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">data</span><span style="color:#F6F6F4;">)</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">buffer</span><span style="color:#62E884;">.clear();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">fileChannel</span><span style="color:#62E884;">.read(buffer, </span><span style="color:#F6F6F4;">position</span><span style="color:#62E884;">.get(), attachment, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">            } </span><span style="color:#F286C4;">else</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">latch</span><span style="color:#62E884;">.countDown();</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">try</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">fileChannel</span><span style="color:#62E884;">.close();</span></span>
<span class="line"><span style="color:#62E884;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F6F6F4;">e</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#62E884;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> failed(</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">exc</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">attachment</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Error: </span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">exc</span><span style="color:#62E884;">.getMessage());</span></span>
<span class="line"><span style="color:#62E884;">            </span><span style="color:#F6F6F4;">latch</span><span style="color:#62E884;">.countDown();</span></span>
<span class="line"><span style="color:#62E884;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    latch.</span><span style="color:#62E884;">await</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">readAllBytes</span><span style="color:#24292E;">(Path path) throws IOException, InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    AsynchronousFileChannel fileChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AsynchronousFileChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(path, StandardOpenOption.READ);</span></span>
<span class="line"><span style="color:#24292E;">    ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    AtomicLong position </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicLong</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    CountDownLatch latch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, position.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> CompletionHandler&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">completed</span><span style="color:#24292E;">(Integer </span><span style="color:#E36209;">bytesRead</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">attachment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (bytesRead </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                position.</span><span style="color:#6F42C1;">addAndGet</span><span style="color:#24292E;">(bytesRead);</span></span>
<span class="line"><span style="color:#24292E;">                buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[buffer.</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#24292E;">                buffer.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(data));</span></span>
<span class="line"><span style="color:#24292E;">                buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                fileChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, position.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), attachment, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                latch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    fileChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failed</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">exc</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">attachment</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> exc.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            latch.</span><span style="color:#6F42C1;">countDown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    latch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1、在 readAllBytes 方法中，我们使用 <code>AsynchronousFileChannel.open()</code> 方法以读取模式打开异步文件通道。</p><p>2、创建一个大小为 1024 的 ByteBuffer 来存储从文件中读取的数据。</p><p>3、使用 <a href="https://tobebetterjavaer.com/thread/atomic.html" target="_blank" rel="noreferrer">AtomicLong</a> 类型的 position 变量来记录当前读取的文件位置。初始值为 0。</p><p>4、创建一个 <a href="https://tobebetterjavaer.com/thread/CountDownLatch.html" target="_blank" rel="noreferrer">CountDownLatch</a> 对象，用于在异步操作完成时通知主线程。初始值为 1。</p><p>5、使用 <code>fileChannel.read()</code> 方法启动异步读取操作。这个方法的参数包括：用于存储数据的缓冲区、当前读取位置、附加对象（在这个例子中不需要，所以传递 null）以及一个实现了 CompletionHandler 接口的对象，用于在读取操作完成时回调。</p><p>6、CompletionHandler 接口有两个方法：<code>completed()</code> 和 <code>failed()</code>。在读取操作成功完成时调用 <code>completed()</code> 方法；如果读取操作失败，调用 <code>failed()</code> 方法。</p><p>7、在 <code>completed()</code> 方法中，我们首先检查 bytesRead（本次读取的字节数）是否大于 0。如果大于 0，说明还有数据需要读取。</p><ul><li>更新 position 变量，将其增加 bytesRead。</li><li>将缓冲区翻转（<code>flip()</code>），以便我们可以从中读取数据。</li><li>创建一个新的字节数组，其大小等于缓冲区的限制（<code>limit()</code>）。</li><li>从缓冲区中获取数据并将其存储在新创建的字节数组中。</li><li>将字节数组转换为字符串并输出。</li><li>清除缓冲区，以便我们可以继续读取更多数据。</li><li>再次调用 fileChannel.read() 方法，以继续从文件中读取数据。</li></ul><p>8、如果 bytesRead 等于或小于 0，说明我们已经读取完文件中的所有数据。此时，我们需要：调用 <code>latch.countDown()</code> 方法，以通知主线程异步操作已完成。关闭 fileChannel。</p><p>9、如果读取操作失败，我们将在 <code>failed()</code> 方法中输出错误信息并调用 <code>latch.countDown()</code> 方法通知主线程。</p><p>10、最后，我们调用 <code>latch.await()</code> 方法来等待异步操作完成。主线程将在此处阻塞，直到 latch 的计数变为 0。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>Java NIO 中的 Buffer 和 Channel 是 NIO 系统的核心组件。Buffer 负责存储数据，提供了对数据的读写操作。它有多种类型，如 ByteBuffer、CharBuffer、IntBuffer 等，以支持不同的数据类型。</p><p>Channel 代表了与 I/O 设备（如文件或套接字）之间的连接。它提供了从源设备到 Buffer 的数据读取能力和从 Buffer 到目标设备的数据写入能力。Channel 可以是可读、可写或同时可读写的，我们详细介绍了文件通道 FileChannel 和异步文件通道 AsynchronousFileChannel。</p><p>总之，NIO 使用 Buffer 和 Channel 这两个组件来进行高效的数据传输，以提高 I/O 操作的性能。</p>`,125),u=[f];function d(C,h,g,b,B,D){return n(),a("div",null,u)}const v=s(E,[["render",d]]);export{A as __pageData,v as default};
