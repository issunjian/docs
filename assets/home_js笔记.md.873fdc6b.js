import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"home/js笔记.md","filePath":"home/js笔记.md"}'),o={name:"home/js笔记.md"},p=l(`<h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h2><h3 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h3><ul><li>调用栈，后进先出</li><li>队列，先进先出</li><li><strong>macro-task(宏任务 Task)</strong><ul><li>script(整体代码)</li><li>setTimeout/setinterval</li><li>setlmmediate</li><li>I/O 操作</li><li>UI rendering</li></ul></li><li><strong>micro-task (微任务 Job)</strong><ul><li>process.nextTick</li><li>Promise.then</li><li>MutationObserve</li><li>async/await</li></ul></li></ul><p>Javscript 的执行机制是: 首先事件循环从宏任务队列开始, 这个时候宏任务队列中, 只有一个script(整体代码)任务. 每一个任务的执行顺序, 都依靠<strong>函数调用栈</strong>来搞定, 而当遇到任务源时, 则会先分发任务到对应的队列中去, 先执行调用栈中的函数, 当调用栈中的执行上下文全部被弹出, <strong>只剩下全局执行上下文的时候, 就开始执行 Job 执行队列</strong>, Job 执行队列执行完成后就开始执行 Task 执行队列, 先进入的先执行, 后进入的后执行, 无论是 Task 还是 Job 都是通过函数调用栈来执行. Task 执行完一个, JavaScript 引擎会继续检查是否有 Job 需要执行. 就形成了 Task--Job--Task--Job 的循环, 这就行形成了事件循环 ( Event Loop).</p><p>所以大概就是<code>调用栈</code>-&gt;<code>微任务</code>-&gt;<code>宏任务</code>-&gt;<code>微任务</code>-&gt;<code>宏任务</code>-&gt;<code>微、宏一直重复</code></p><p>其中重点是在执行微任务的时候遇到<strong>微任务，会加入到微任务队列中并执行</strong></p><h3 id="isnan" tabindex="-1">isNaN() <a class="header-anchor" href="#isnan" aria-label="Permalink to &quot;isNaN()&quot;">​</a></h3><blockquote><p><code>isNaN()</code> 函数用于检查其参数是否是非数字值。</p><p>如果参数值为 <code>NaN</code> 或字符串、对象、undefined 等非数字值则返回 true, 否则返回 false。</p><p><strong>如果参数是字符串，且内容是数字，会进行类型转换,使用的是<code>Number()</code>方法转换，转换为数字，所以返回 false</strong></p><p>0 是<code>false</code>，1 是<code>true</code></p></blockquote><ul><li><strong>1、数字形式的字符串</strong>。例如 &quot;123&quot;、&quot;-3.14&quot;，虽然是字符串型，但被 isNaN() 判为数，返回 false。（&quot;12,345,678&quot;，&quot;1.2.3&quot; 这些返回 true）</li><li><strong>2、空值</strong>。null、空字符串&quot;&quot;、空数组[]，都可被 Number()合法的转为 0，于是被 isNaN 认为是数字，返回 false。（undefined、空对象{}、空函数等无法转数字，返回 true）</li><li><strong>3、布尔值</strong>。Number(true)=1,Number(false)=0，所以 isNaN 对布尔值也返回 false。</li><li><strong>4、长度为 1 的数组</strong>。结果取决于其中元素，即：isNaN([a])=isNaN(a)，可递归。例如 isNaN([[&quot;1.5&quot;]])=false。</li><li><strong>5、数字特殊形式</strong>。例如&quot;0xabc&quot;、&quot;2.5e+7&quot;，这样的十六进制和科学计数法，即使是字符串也能转数字，所以也返回 false</li></ul><h3 id="urlsearchparams" tabindex="-1">URLSearchParams <a class="header-anchor" href="#urlsearchparams" aria-label="Permalink to &quot;URLSearchParams&quot;">​</a></h3><p>假设浏览器的 url 参数是<code> &quot;?name=蜘蛛侠&amp;age=16&quot;</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URLSearchParams</span><span style="color:#F6F6F4;">(location.search).</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 蜘蛛侠</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(location.search).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 蜘蛛侠</span></span></code></pre></div><h3 id="clientwidth-、offsetwidth、scrollwidth" tabindex="-1">clientWidth 、offsetWidth、scrollWidth <a class="header-anchor" href="#clientwidth-、offsetwidth、scrollwidth" aria-label="Permalink to &quot;clientWidth 、offsetWidth、scrollWidth&quot;">​</a></h3><blockquote><p>scrollWidth：对象的实际内容的宽度，不包边线宽度，会随对象中内容超过可视区后而变大。 clientWidth：对象内容的可视区的宽度，不包滚动条等边线，会随对象显示大小的变化而改变。 offsetWidth：对象整体的实际宽度，包滚动条等边线，会随对象显示大小的变化而改变。</p></blockquote><ol><li>clientWidth = content + padding</li><li>offsetWidth = content + border + padding+ 垂直滚动条宽度</li><li>scrollWidth = content + padding</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getViewport</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (document.compatMode </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">backCompat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.body.clientWidth,</span></span>
<span class="line"><span style="color:#F6F6F4;">      height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.body.clientHeight,</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.documentElement.clientWidth,</span></span>
<span class="line"><span style="color:#F6F6F4;">      height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.documentElement.clientHeight,</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*document.compatMode:判断当前浏览器采用的渲染方式</span></span>
<span class="line"><span style="color:#7B7F8B;"> * BackCompat：标准兼容模式关闭。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *CSS1Compat：标准兼容模式开启。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 当document.compatMode等于BackCompat时，浏览器客户区宽度是document.body.clientWidth；</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 当document.compatMode等于CSS1Compat时，浏览器客户区宽度是document.documentElement.clientWidth。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getViewport</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (document.compatMode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;backCompat&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      width: document.body.clientWidth,</span></span>
<span class="line"><span style="color:#24292E;">      height: document.body.clientHeight,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      width: document.documentElement.clientWidth,</span></span>
<span class="line"><span style="color:#24292E;">      height: document.documentElement.clientHeight,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*document.compatMode:判断当前浏览器采用的渲染方式</span></span>
<span class="line"><span style="color:#6A737D;"> * BackCompat：标准兼容模式关闭。</span></span>
<span class="line"><span style="color:#6A737D;"> *CSS1Compat：标准兼容模式开启。</span></span>
<span class="line"><span style="color:#6A737D;"> * 当document.compatMode等于BackCompat时，浏览器客户区宽度是document.body.clientWidth；</span></span>
<span class="line"><span style="color:#6A737D;"> * 当document.compatMode等于CSS1Compat时，浏览器客户区宽度是document.documentElement.clientWidth。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div><h3 id="js-窗口属性" tabindex="-1">js 窗口属性 <a class="header-anchor" href="#js-窗口属性" aria-label="Permalink to &quot;js 窗口属性&quot;">​</a></h3><p>网页可见区域宽：document.body.clientWidth 网页可见区域高：document.body.clientHeight 网页可见区域宽：document.body.offsetWidth (包括边线的宽) 网页可见区域高：document.body.offsetHeight (包括边线的宽) 网页正文全文宽：document.body.scrollWidth 网页正文全文高：document.body.scrollHeight 网页被卷去的高：document.body.scrollTop 网页被卷去的左：document.body.scrollLeft 网页正文部分上：window.screenTop 网页正文部分左：window.screenLeft 屏幕分辨率的高：window.screen.height 屏幕分辨率的宽：window.screen.width 屏幕可用工作区高度：window.screen.availHeight 屏幕可用工作区宽度：window.screen.availWidth</p><h3 id="offsetleft、offsetparent、offsettop" tabindex="-1">offsetLeft、offsetParent、offsetTop <a class="header-anchor" href="#offsetleft、offsetparent、offsettop" aria-label="Permalink to &quot;offsetLeft、offsetParent、offsetTop&quot;">​</a></h3><p>offsetLeft 是一个只读属性，返回当前元素<em>左上角</em>相对于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" target="_blank" rel="noreferrer"><code>HTMLElement.offsetParent</code></a> 节点的左边界偏移的像素值。</p><p><strong>HTMLElement.offsetParent</strong> 是一个只读属性，返回一个指向最近的（closest，指包含层级上的最近）包含该元素的<strong>定位</strong>元素。<strong>如果没有定位的元素</strong>，则 <code>offsetParent</code> 为<strong>最近的 <code>table</code>, <code>table cell</code> 或<code>body</code>元素</strong>。当元素的 <code>style.display</code> 设置为 &quot;none&quot; 时，<code>offsetParent</code> 返回 <code>null</code>。<code>offsetParent</code> 很有用，因为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetTop" target="_blank" rel="noreferrer"><code>offsetTop</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft" target="_blank" rel="noreferrer"><code>offsetLeft</code></a> 都是相对于其内边距边界的。</p><p><strong>HTMLElement.offsetTop</strong> 为只读属性，它返回当前元素相对于其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" target="_blank" rel="noreferrer"><code>offsetParent</code></a> 元素的顶部内边距的距离。</p><h3 id="clientx" tabindex="-1">clientX <a class="header-anchor" href="#clientx" aria-label="Permalink to &quot;clientX&quot;">​</a></h3><p>一般用于鼠标点击时触发的鼠标相对于可视化区域的水平距离，Y 则是垂直距离</p><h3 id="csstext" tabindex="-1">cssText <a class="header-anchor" href="#csstext" aria-label="Permalink to &quot;cssText&quot;">​</a></h3><p>cssText 属性设置或返回作为字符串的样式声明的内容，可批量设置行内样式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Object.style.cssText </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.style.cssText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="arguments-对象" tabindex="-1">arguments 对象 <a class="header-anchor" href="#arguments-对象" aria-label="Permalink to &quot;arguments 对象&quot;">​</a></h3><blockquote><p>不是数组，是类数组对象，只有 length 属性和索引元素，但可以通过<code>Array.from()</code>转换为数组</p><p>函数的参数的集合</p><p>可以用 <code>arguments.length</code> 检测函数的实参的个数</p><p><code>函数名.length</code> 检测函数的形参个数</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// Arguments(2) [&quot;1&quot;, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.toString.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// [object Arguments]</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Arguments(2) [&quot;1&quot;, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// [object Arguments]</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="tofixed-2" tabindex="-1">toFixed(2) <a class="header-anchor" href="#tofixed-2" aria-label="Permalink to &quot;toFixed(2)&quot;">​</a></h3><blockquote><p>保留小数点后两位</p></blockquote><h3 id="空字符串-是false-空对象-和空数组-是true" tabindex="-1">空字符串<code>&#39;&#39;</code>是<code>false</code> 空对象<code>{}</code>和空数组<code>[]</code>是<code>true</code> <a class="header-anchor" href="#空字符串-是false-空对象-和空数组-是true" aria-label="Permalink to &quot;空字符串\`&#39;&#39;\`是\`false\` 空对象\`{}\`和空数组\`[]\`是\`true\`&quot;">​</a></h3><h2 id="filter" tabindex="-1">filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter&quot;">​</a></h2><p>**filter 的 callback 函数需要返回布尔值 true 或 false. **</p><p><strong>如果为 true 则表示通过啦！如果为 false 则失败。</strong></p><h2 id="cookie、session、localstorage" tabindex="-1">cookie、session、localStorage <a class="header-anchor" href="#cookie、session、localstorage" aria-label="Permalink to &quot;cookie、session、localStorage&quot;">​</a></h2><blockquote><p>区别</p></blockquote><ol><li>cookie 数据始终在同源的 http 请求中携带（即使不需要）,数据不能超过 4k</li><li>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</li><li>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</li><li>cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。</li><li><strong>作用域不同</strong>，sessionStorage<strong>不在</strong>不同的<strong>浏览器窗口</strong>中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的。</li><li>session 存储在服务端</li></ol><h2 id="数组的-every-方法" tabindex="-1">数组的 every 方法 <a class="header-anchor" href="#数组的-every-方法" aria-label="Permalink to &quot;数组的 every 方法&quot;">​</a></h2><p>every 需要所有的循环项都为 true 时才返回 true，否则返回 false。相当于全选状态</p><h2 id="数组的-some-方法" tabindex="-1">数组的 some 方法 <a class="header-anchor" href="#数组的-some-方法" aria-label="Permalink to &quot;数组的 some 方法&quot;">​</a></h2><p>some 只要有一个为 true 那么就会返回 true。</p><h2 id="数组的-sort-方法" tabindex="-1">数组的 sort 方法 <a class="header-anchor" href="#数组的-sort-方法" aria-label="Permalink to &quot;数组的 sort 方法&quot;">​</a></h2><p><strong>浏览器根据回调函数的返回值来决定元素的排序：（重要）</strong></p><ul><li>如果返回一个大于 0 的值，则元素会交换位置</li><li>如果返回一个小于 0 的值，则元素位置不变</li><li>如果返回一个 0，则认为两个元素相等，则不交换位置</li></ul><h3 id="实现冒泡排序" tabindex="-1">实现冒泡排序 <a class="header-anchor" href="#实现冒泡排序" aria-label="Permalink to &quot;实现冒泡排序&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 冒泡排序</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">99</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> b; </span><span style="color:#7B7F8B;">// 如果a &gt; b 则交换位置</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr); </span><span style="color:#7B7F8B;">// [1,2,5,6,7,99]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 冒泡排序</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b; </span><span style="color:#6A737D;">// 如果a &gt; b 则交换位置</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span><span style="color:#6A737D;">// [1,2,5,6,7,99]</span></span></code></pre></div><h2 id="数组的-reduce-方法" tabindex="-1">数组的 reduce 方法 <a class="header-anchor" href="#数组的-reduce-方法" aria-label="Permalink to &quot;数组的 reduce 方法&quot;">​</a></h2><blockquote><p>为数组中的每一个元素，依次执行回调函数。</p></blockquote><p><strong>语法:</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">callback</span><span style="color:#F6F6F4;">(accumulator, currentValue[, index[, array]])[, initialValue])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(accumulator, currentValue[, index[, array]])[, initialValue])</span></span></code></pre></div><p>参数解释：</p><ul><li>accumulator：上一次调用回调函数时的返回值，或者初始值</li><li>currentValue：当前正在处理的数组元素</li><li>index：当前正在处理的数组元素下标</li><li>array：调用 reduce()方法的数组</li><li>initialValue：可选的初始值（作为第一次调用回调函数时传给 accumulator 的值）[如果不传值的话，默认是数组第一个元素]</li></ul><p>例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">m</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">y</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">m</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">e</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> is gauhar</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> person </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> item;</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(person); </span><span style="color:#7B7F8B;">// my name is gauhar</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;m&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;y&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; n&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;m&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot; is gauhar&quot;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">value</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(person); </span><span style="color:#6A737D;">// my name is gauhar</span></span></code></pre></div><h2 id="对象转换为数组" tabindex="-1">对象转换为数组 <a class="header-anchor" href="#对象转换为数组" aria-label="Permalink to &quot;对象转换为数组&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">values</span><span style="color:#F6F6F4;">(对象);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">values</span><span style="color:#24292E;">(对象);</span></span></code></pre></div><h2 id="focus-和-focusin-的区别" tabindex="-1">focus 和 focusin 的区别 <a class="header-anchor" href="#focus-和-focusin-的区别" aria-label="Permalink to &quot;focus 和 focusin 的区别&quot;">​</a></h2><blockquote><p>blur 和 focusout 同理</p></blockquote><p>当元素即将接收 <code>focus</code> 事件时，<code>focusin </code>事件被触发。 这个事件和 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/focus" target="_blank" rel="noreferrer">focus</a> 事件的主要区别在于后者不会冒泡。</p><h2 id="js-计算当前时间点所在的周一和周日的时间戳" tabindex="-1">js 计算当前时间点所在的周一和周日的时间戳 <a class="header-anchor" href="#js-计算当前时间点所在的周一和周日的时间戳" aria-label="Permalink to &quot;js 计算当前时间点所在的周一和周日的时间戳&quot;">​</a></h2><blockquote><p>精髓在于利用<code>相差的天数</code>*一天的时间戳计算</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> today </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> date.</span><span style="color:#62E884;">getTime</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 获取今天的时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> todayWeek </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> date.</span><span style="color:#62E884;">getDay</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">//获取今天是星期几</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> oneDayTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">//一天的时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> mon </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> today </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> (todayWeek </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> oneDayTime; </span><span style="color:#7B7F8B;">// 今天的时间戳 - 相差天数的时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sun </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> today </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> todayWeek) </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> oneDayTime; </span><span style="color:#7B7F8B;">// 今天的时间戳 + 相差天数的时间戳</span></span>
<span class="line"><span style="color:#7B7F8B;">// 获取年月日再转时间戳</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">(mon);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDateDay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDate.</span><span style="color:#62E884;">getDate</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDateMonth </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDate.</span><span style="color:#62E884;">getMonth</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> monDateYear </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDate.</span><span style="color:#62E884;">getFullYear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> monDateYear </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> monDateMonth </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> monDateDay;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Date.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(start)); </span><span style="color:#7B7F8B;">//周一的时间戳</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">(sun);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDateDay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDate.</span><span style="color:#62E884;">getDate</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDateMonth </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDate.</span><span style="color:#62E884;">getMonth</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> sunDateYear </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDate.</span><span style="color:#62E884;">getFullYear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> end </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sunDateYear </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> sunDateMonth </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> sunDateDay;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Date.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(end)); </span><span style="color:#7B7F8B;">//周日的时间戳</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.</span><span style="color:#6F42C1;">getTime</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取今天的时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> todayWeek </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date.</span><span style="color:#6F42C1;">getDay</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">//获取今天是星期几</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> oneDayTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">24</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//一天的时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mon </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> (todayWeek </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> oneDayTime; </span><span style="color:#6A737D;">// 今天的时间戳 - 相差天数的时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sun </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> today </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> todayWeek) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> oneDayTime; </span><span style="color:#6A737D;">// 今天的时间戳 + 相差天数的时间戳</span></span>
<span class="line"><span style="color:#6A737D;">// 获取年月日再转时间戳</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(mon);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDateDay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDate.</span><span style="color:#6F42C1;">getDate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDateMonth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDate.</span><span style="color:#6F42C1;">getMonth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> monDateYear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDate.</span><span style="color:#6F42C1;">getFullYear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> monDateYear </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> monDateMonth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> monDateDay;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Date.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(start)); </span><span style="color:#6A737D;">//周一的时间戳</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(sun);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDateDay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDate.</span><span style="color:#6F42C1;">getDate</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDateMonth </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDate.</span><span style="color:#6F42C1;">getMonth</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sunDateYear </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDate.</span><span style="color:#6F42C1;">getFullYear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sunDateYear </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sunDateMonth </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> sunDateDay;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Date.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(end)); </span><span style="color:#6A737D;">//周日的时间戳</span></span></code></pre></div><h2 id="最简单的深拷贝" tabindex="-1">最简单的深拷贝 <a class="header-anchor" href="#最简单的深拷贝" aria-label="Permalink to &quot;最简单的深拷贝&quot;">​</a></h2><blockquote><p>不能拷贝函数</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(变量));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(变量));</span></span></code></pre></div><h2 id="json-stringify-不能把函数转换" tabindex="-1">Json.stringify()不能把<strong>函数</strong>转换 ！！ <a class="header-anchor" href="#json-stringify-不能把函数转换" aria-label="Permalink to &quot;Json.stringify()不能把**函数**转换 ！！&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fun</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(fun)); </span><span style="color:#7B7F8B;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fun</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">111</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(fun)); </span><span style="color:#6A737D;">//undefined</span></span></code></pre></div><h2 id="js-执行顺序" tabindex="-1">js 执行顺序 <a class="header-anchor" href="#js-执行顺序" aria-label="Permalink to &quot;js 执行顺序&quot;">​</a></h2><blockquote><p><code>macrotask</code>宏任务队列</p><p><code>microtask</code>微任务队列</p></blockquote><ul><li>macrotask：主代码块、setTimeout、setInterval 等（可以看到，事件队列中的每一个事件都是一个 macrotask，现在称之为宏任务队列）</li><li>microtask：Promise、process.nextTick 等</li><li>在某一个<strong>宏任务队列执行完后</strong>，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有<code>微任务</code>都执行完毕（在渲染前）。</li></ul><p>promise 的 resolve 和 reject 是才是异步的回调。</p><p>创建了一个 promise 实例对象的时候，钻进去回调函数中，执行输出<code>2</code>，for 循环，调用 resolve 函数(异步，微任务)，执行输出<code>3</code>，代码往下面走，执行输出<code>5</code>，在渲染宏任务之前，完成微任务输出<code>4</code>，最后输出<code>1</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    i </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">9999</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 2 3 5 4 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9999</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 2 3 5 4 1</span></span></code></pre></div><h2 id="js-定义变量时使用-var-关键字与不使用的区别" tabindex="-1">js 定义变量时使用 var 关键字与不使用的区别 <a class="header-anchor" href="#js-定义变量时使用-var-关键字与不使用的区别" aria-label="Permalink to &quot;js 定义变量时使用 var 关键字与不使用的区别&quot;">​</a></h2><p>在全局作用域下，两者都是定义为全局变量。for 循环的使用 var 定义的变量也是全局的，在局部作用域下(function,class...)，</p><p>如果不使用关键字定义，则变量时全局变量。使用关键字定义，就是局部变量。</p><blockquote><p>特别注意的是：函数身上有一个 name 属性，是函数名</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 由于这个函数里面没有用关键字定义变量，所以当Foo函数被调用的时候，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 这个函数是变量</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.say </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">  name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 谁调用Foo函数，this就指向谁</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 函数也是对象，这里是给Foo函数对象定义了getName属性</span></span>
<span class="line"><span style="color:#F6F6F4;">Foo.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">bar</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">bar.rrr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 函数也是对象，这里是给bar函数定义了getName属性</span></span>
<span class="line"><span style="color:#7B7F8B;">// 这里是给Foo函数对象的原型身上绑定了一个getName属性，它是一个函数</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Foo</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">     下面这两个函数都是全局作用域下的，都会变量提升</span></span>
<span class="line"><span style="color:#7B7F8B;">     区别在于，function关键字定义的，提升的优先级较高，而var在后</span></span>
<span class="line"><span style="color:#7B7F8B;">     所以var定义的函数会覆盖function定义的函数</span></span>
<span class="line"><span style="color:#7B7F8B;">*/</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> () {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">dir</span><span style="color:#F6F6F4;">(Foo); </span><span style="color:#7B7F8B;">//可以查看Foo函数对象，特别注意的是：函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(window.a); </span><span style="color:#7B7F8B;">//undefined 因为这个时候Foo函数还没有被调用</span></span>
<span class="line"><span style="color:#F6F6F4;">Foo.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 调用了Foo函数对象的getName方法</span></span>
<span class="line"><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 全局作用域下的函数，var最后覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 首先这里调用Foo函数之前，代码已经跑完，</span></span>
<span class="line"><span style="color:#7B7F8B;">// 所以Foo()执行之后，里面的getName方法覆盖了全局的var定义的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> Foo.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">//调用了Foo函数对象的getName方法，执行了方法，然后实例化了对象。所以这里是Foo.getName对象</span></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// new关键字创建了一个实例对象，然后调用了原型身上的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Foo</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">//new关键字创建了一个实例对象，然后调用了console.log(tt.say);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 然后在通过new关键字，实例化了Foo原型身上的getName方法</span></span>
<span class="line"><span style="color:#7B7F8B;">// 所以这里是Foo.getName对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">window.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 和上面的getName()一样; 1 // 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(Foo.name); </span><span style="color:#7B7F8B;">// Foo 函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">dir</span><span style="color:#F6F6F4;">(bar); </span><span style="color:#7B7F8B;">// 查看bar函数对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(window.name); </span><span style="color:#7B7F8B;">// 上面的代码调用了Foo函数，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(window.a);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 由于这个函数里面没有用关键字定义变量，所以当Foo函数被调用的时候，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个函数是变量</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.say </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dd&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 谁调用Foo函数，this就指向谁</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 函数也是对象，这里是给Foo函数对象定义了getName属性</span></span>
<span class="line"><span style="color:#24292E;">Foo.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">bar.rrr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 函数也是对象，这里是给bar函数定义了getName属性</span></span>
<span class="line"><span style="color:#6A737D;">// 这里是给Foo函数对象的原型身上绑定了一个getName属性，它是一个函数</span></span>
<span class="line"><span style="color:#005CC5;">Foo</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     下面这两个函数都是全局作用域下的，都会变量提升</span></span>
<span class="line"><span style="color:#6A737D;">     区别在于，function关键字定义的，提升的优先级较高，而var在后</span></span>
<span class="line"><span style="color:#6A737D;">     所以var定义的函数会覆盖function定义的函数</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">dir</span><span style="color:#24292E;">(Foo); </span><span style="color:#6A737D;">//可以查看Foo函数对象，特别注意的是：函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.a); </span><span style="color:#6A737D;">//undefined 因为这个时候Foo函数还没有被调用</span></span>
<span class="line"><span style="color:#24292E;">Foo.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 调用了Foo函数对象的getName方法</span></span>
<span class="line"><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">4</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 全局作用域下的函数，var最后覆盖</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 首先这里调用Foo函数之前，代码已经跑完，</span></span>
<span class="line"><span style="color:#6A737D;">// 所以Foo()执行之后，里面的getName方法覆盖了全局的var定义的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Foo.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">2</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//调用了Foo函数对象的getName方法，执行了方法，然后实例化了对象。所以这里是Foo.getName对象</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// new关键字创建了一个实例对象，然后调用了原型身上的getName方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Foo</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">3</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//new关键字创建了一个实例对象，然后调用了console.log(tt.say);</span></span>
<span class="line"><span style="color:#6A737D;">// 然后在通过new关键字，实例化了Foo原型身上的getName方法</span></span>
<span class="line"><span style="color:#6A737D;">// 所以这里是Foo.getName对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 和上面的getName()一样; 1 // 上面的一句代码改变了全局作用域下的变量</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Foo.name); </span><span style="color:#6A737D;">// Foo 函数身上有一个name属性，是函数名</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">dir</span><span style="color:#24292E;">(bar); </span><span style="color:#6A737D;">// 查看bar函数对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.name); </span><span style="color:#6A737D;">// 上面的代码调用了Foo函数，里面的变量变成了全局变量</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(window.a);</span></span></code></pre></div><h2 id="element-attributes" tabindex="-1">Element.attributes <a class="header-anchor" href="#element-attributes" aria-label="Permalink to &quot;Element.attributes&quot;">​</a></h2><p>attributes 返回 dom 元素设置的属性，返回的是一个\`\`NamedNodeMap\`</p><blockquote><p>NamedNodeMap，一个类数组对象</p></blockquote><p><strong>NamedNodeMap</strong> 接口表示属性节点 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Attr" target="_blank" rel="noreferrer"><code>Attr</code></a> 对象的集合。尽管在 <code>NamedNodeMap</code> 里面的对象可以像数组一样通过索引来访问，但是它和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noreferrer"><code>NodeList</code></a> 不一样，对象的顺序没有指定。</p><h2 id="scroll-滚动" tabindex="-1">scroll 滚动 <a class="header-anchor" href="#scroll-滚动" aria-label="Permalink to &quot;scroll 滚动&quot;">​</a></h2><blockquote><p>behavior: smooth，一下方法都有的参数，设置平滑滑动的过渡</p></blockquote><p>scrollTo()方法，设置滚动到某一位置，相对于浏览器。</p><p>scrollBy()方法，相对于自己移动滚动条，<code>scrollBy(0,-100)</code>，表示相对于自己往上滚动 100</p><p>scrollIntoView()方法，可以指定位置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// start出现在视口顶部、center出现在视口中央、end出现在视口底部</span></span>
<span class="line"><span style="color:#F6F6F4;">document.</span><span style="color:#62E884;">querySelector</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.box</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">scrollIntoView</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  block</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">start</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">center</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">end</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// start出现在视口顶部、center出现在视口中央、end出现在视口底部</span></span>
<span class="line"><span style="color:#24292E;">document.</span><span style="color:#6F42C1;">querySelector</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.box&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">scrollIntoView</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  block: </span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p><strong>css 设置平滑过渡</strong></p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">scroll-behavior</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">smooth</span><span style="color:#F6F6F4;">; // 全局滚动具有平滑效果</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">// </span><span style="color:#F286C4;">或者所有</span></span>
<span class="line"><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;">scroll-behavior</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">smooth</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">html</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">scroll-behavior</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">smooth</span><span style="color:#24292E;">; // 全局滚动具有平滑效果</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">// 或者所有</span></span>
<span class="line"><span style="color:#22863A;">*</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">scroll-behavior</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">smooth</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="scrollingelement" tabindex="-1">scrollingElement <a class="header-anchor" href="#scrollingelement" aria-label="Permalink to &quot;scrollingElement&quot;">​</a></h3><p>该对象可以非常<code>兼容</code>地获取<code>scrollTop</code>、<code>scrollHeight</code>等属性，在<code>移动端</code>跟<code>PC端</code>都屡试不爽</p><h3 id="urlsearchparams-1" tabindex="-1">URLSearchParams <a class="header-anchor" href="#urlsearchparams-1" aria-label="Permalink to &quot;URLSearchParams&quot;">​</a></h3><p>假设浏览器的 url 参数是<code> &quot;?name=蜘蛛侠&amp;age=16&quot;</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">URLSearchParams</span><span style="color:#F6F6F4;">(location.search).</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 蜘蛛侠</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">URLSearchParams</span><span style="color:#24292E;">(location.search).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 蜘蛛侠</span></span></code></pre></div><h3 id="clientwidth-、offsetwidth、scrollwidth-1" tabindex="-1">clientWidth 、offsetWidth、scrollWidth <a class="header-anchor" href="#clientwidth-、offsetwidth、scrollwidth-1" aria-label="Permalink to &quot;clientWidth 、offsetWidth、scrollWidth&quot;">​</a></h3><blockquote><p>scrollWidth：对象的实际内容的宽度，不包边线宽度，会随对象中内容超过可视区后而变大。 clientWidth：对象内容的可视区的宽度，不包滚动条等边线，会随对象显示大小的变化而改变。 offsetWidth：对象整体的实际宽度，包滚动条等边线，会随对象显示大小的变化而改变。</p></blockquote><ol><li>clientWidth = content + padding</li><li>offsetWidth = content + border + padding+ 垂直滚动条宽度</li><li>scrollWidth = content + padding</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getViewport</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (document.compatMode </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">backCompat</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.body.clientWidth,</span></span>
<span class="line"><span style="color:#F6F6F4;">      height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.body.clientHeight,</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      width</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.documentElement.clientWidth,</span></span>
<span class="line"><span style="color:#F6F6F4;">      height</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> document.documentElement.clientHeight,</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/*document.compatMode:判断当前浏览器采用的渲染方式</span></span>
<span class="line"><span style="color:#7B7F8B;"> * BackCompat：标准兼容模式关闭。</span></span>
<span class="line"><span style="color:#7B7F8B;"> *CSS1Compat：标准兼容模式开启。</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 当document.compatMode等于BackCompat时，浏览器客户区宽度是document.body.clientWidth；</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 当document.compatMode等于CSS1Compat时，浏览器客户区宽度是document.documentElement.clientWidth。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getViewport</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (document.compatMode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;backCompat&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      width: document.body.clientWidth,</span></span>
<span class="line"><span style="color:#24292E;">      height: document.body.clientHeight,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      width: document.documentElement.clientWidth,</span></span>
<span class="line"><span style="color:#24292E;">      height: document.documentElement.clientHeight,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/*document.compatMode:判断当前浏览器采用的渲染方式</span></span>
<span class="line"><span style="color:#6A737D;"> * BackCompat：标准兼容模式关闭。</span></span>
<span class="line"><span style="color:#6A737D;"> *CSS1Compat：标准兼容模式开启。</span></span>
<span class="line"><span style="color:#6A737D;"> * 当document.compatMode等于BackCompat时，浏览器客户区宽度是document.body.clientWidth；</span></span>
<span class="line"><span style="color:#6A737D;"> * 当document.compatMode等于CSS1Compat时，浏览器客户区宽度是document.documentElement.clientWidth。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div><h3 id="js-窗口属性-1" tabindex="-1">js 窗口属性 <a class="header-anchor" href="#js-窗口属性-1" aria-label="Permalink to &quot;js 窗口属性&quot;">​</a></h3><p>网页可见区域宽：document.body.clientWidth 网页可见区域高：document.body.clientHeight 网页可见区域宽：document.body.offsetWidth (包括边线的宽) 网页可见区域高：document.body.offsetHeight (包括边线的宽) 网页正文全文宽：document.body.scrollWidth 网页正文全文高：document.body.scrollHeight 网页被卷去的高：document.body.scrollTop 网页被卷去的左：document.body.scrollLeft 网页正文部分上：window.screenTop 网页正文部分左：window.screenLeft 屏幕分辨率的高：window.screen.height 屏幕分辨率的宽：window.screen.width 屏幕可用工作区高度：window.screen.availHeight 屏幕可用工作区宽度：window.screen.availWidth</p><h3 id="csstext-1" tabindex="-1">cssText <a class="header-anchor" href="#csstext-1" aria-label="Permalink to &quot;cssText&quot;">​</a></h3><p>cssText 属性设置或返回作为字符串的样式声明的内容，可批量设置行内样式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Object.style.cssText </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">string</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object.style.cssText </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="arguments-对象-1" tabindex="-1">arguments 对象 <a class="header-anchor" href="#arguments-对象-1" aria-label="Permalink to &quot;arguments 对象&quot;">​</a></h3><blockquote><p>不是数组，是类数组对象，只有 length 属性和索引元素，但可以通过<code>Array.from()</code>转换为数组</p><p>函数的参数的集合</p><p>可以用 <code>arguments.length</code> 检测函数的参数个数</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// Arguments(2) [&quot;1&quot;, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.toString.</span><span style="color:#62E884;">call</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// [object Arguments]</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// Arguments(2) [&quot;1&quot;, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.toString.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// [object Arguments]</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="tofixed-2-1" tabindex="-1">toFixed(2) <a class="header-anchor" href="#tofixed-2-1" aria-label="Permalink to &quot;toFixed(2)&quot;">​</a></h3><blockquote><p>保留小数点后两位</p></blockquote><h2 id="jquery" tabindex="-1">jQuery <a class="header-anchor" href="#jquery" aria-label="Permalink to &quot;jQuery&quot;">​</a></h2><p><code>$(window).height()</code>：屏幕的高度(可视化区域的高度)</p><p><code>$(window).scrollTop()</code>：滚动的距离</p><p><code>$(document).height()</code>：页面的实际高度</p><p>可用于判断滚动触底</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">$</span><span style="color:#F6F6F4;">(document).</span><span style="color:#62E884;">height</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">$</span><span style="color:#F6F6F4;">(window).</span><span style="color:#62E884;">height</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">$</span><span style="color:#F6F6F4;">(window).</span><span style="color:#62E884;">scollTop</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(document).</span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(window).</span><span style="color:#6F42C1;">height</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$</span><span style="color:#24292E;">(window).</span><span style="color:#6F42C1;">scollTop</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="谷歌浏览器快捷键-🔑" tabindex="-1">谷歌浏览器快捷键 🔑 <a class="header-anchor" href="#谷歌浏览器快捷键-🔑" aria-label="Permalink to &quot;谷歌浏览器快捷键 🔑&quot;">​</a></h2><p><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans" target="_blank" rel="noreferrer">官网链接</a></p><p>常用按键</p><table><thead><tr><th>功能</th><th>按键</th><th></th></tr></thead><tbody><tr><td>打开新的标签页</td><td>ctrl + t</td><td></td></tr><tr><td>关闭当前标签页</td><td>ctrl + w</td><td></td></tr><tr><td>搜索栏获取焦点</td><td>ctrl + l</td><td></td></tr><tr><td>当前页面的历史浏览记录</td><td>alt + (+ -)</td><td></td></tr></tbody></table><h2 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h2><h3 id="generator-函数" tabindex="-1">Generator 函数 <a class="header-anchor" href="#generator-函数" aria-label="Permalink to &quot;Generator 函数&quot;">​</a></h3><blockquote><p><code>yield</code>读音：u 的</p></blockquote><p>执行 Generator 函数返回的是一个遍历器对象，必须调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态。</p><p>Generator 函数是分段执行的，<code>yield</code>表达式是暂停执行的标记，而<code>next</code>方法可以恢复执行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function*</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helloworld</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">end</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> h </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helloworld</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(h.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// {value: &quot;hello&quot;, done: false}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(h.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// {value: &quot;world&quot;, done: false}</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(h.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// {value: &quot;end&quot;, done: true}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helloworld</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;end&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helloworld</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(h.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// {value: &quot;hello&quot;, done: false}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(h.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// {value: &quot;world&quot;, done: false}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(h.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// {value: &quot;end&quot;, done: true}</span></span></code></pre></div><p>总结一下，调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的<code>next</code>方法，就会返回一个有着<code>value</code>和<code>done</code>两个属性的对象。<code>value</code>属性表示当前的内部状态的值，是<code>yield</code>表达式后面那个表达式的值；<code>done</code>属性是一个布尔值，表示是否遍历结束。</p><p>在普通函数中不可以使用<code>yield</code>关键字，<code>yield</code>表达式如果用在另一个表达式之中，<strong>必须放在圆括号里面</strong>。</p><p><code>yield</code>表达式用作函数参数或放在赋值表达式的右边，可以不加括号</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function*</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">demo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">foo</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> input </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// OK</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// OK</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,131),e=[p];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const h=s(o,[["render",t]]);export{u as __pageData,h as default};
