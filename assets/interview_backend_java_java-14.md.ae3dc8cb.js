import{_ as a,o as e,c as s,V as n}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-14.md","filePath":"interview/backend/java/java-14.md"}'),o={name:"interview/backend/java/java-14.md"},t=n(`<h3 id="_1、如何写一段简单的死锁代码" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E6%AE%B5%E7%AE%80%E5%8D%95%E7%9A%84%E6%AD%BB%E9%94%81%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">1、如何写一段简单的死锁代码？</a> <a class="header-anchor" href="#_1、如何写一段简单的死锁代码" aria-label="Permalink to &quot;[1、如何写一段简单的死锁代码？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#1如何写一段简单的死锁代码)&quot;">​</a></h3><p>这个笔试的话频率也挺高（遇见笔试的公司要三思啊），所以这里直接给出一个答案（有很多版本的）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class DeadLockDemo {</span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        Object object1 = new Object();</span></span>
<span class="line"><span style="color:#f6f6f4;">        Object object2 = new Object();</span></span>
<span class="line"><span style="color:#f6f6f4;">        Thread t1 = new Thread(() -&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">            synchronized (object1) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                try {</span></span>
<span class="line"><span style="color:#f6f6f4;">                    Thread.sleep(200);</span></span>
<span class="line"><span style="color:#f6f6f4;">                } catch (InterruptedException e) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                    e.printStackTrace();</span></span>
<span class="line"><span style="color:#f6f6f4;">                }</span></span>
<span class="line"><span style="color:#f6f6f4;">                synchronized (object2) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                }</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">        }, &quot;deadlock-demo-1&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        t1.start();</span></span>
<span class="line"><span style="color:#f6f6f4;">        Thread t2 = new Thread(() -&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">            synchronized (object2) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                synchronized (object1) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                }</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">        }, &quot;deadlock-demo-2&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        t2.start();</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class DeadLockDemo {</span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        Object object1 = new Object();</span></span>
<span class="line"><span style="color:#24292e;">        Object object2 = new Object();</span></span>
<span class="line"><span style="color:#24292e;">        Thread t1 = new Thread(() -&gt; {</span></span>
<span class="line"><span style="color:#24292e;">            synchronized (object1) {</span></span>
<span class="line"><span style="color:#24292e;">                try {</span></span>
<span class="line"><span style="color:#24292e;">                    Thread.sleep(200);</span></span>
<span class="line"><span style="color:#24292e;">                } catch (InterruptedException e) {</span></span>
<span class="line"><span style="color:#24292e;">                    e.printStackTrace();</span></span>
<span class="line"><span style="color:#24292e;">                }</span></span>
<span class="line"><span style="color:#24292e;">                synchronized (object2) {</span></span>
<span class="line"><span style="color:#24292e;">                }</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">        }, &quot;deadlock-demo-1&quot;);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        t1.start();</span></span>
<span class="line"><span style="color:#24292e;">        Thread t2 = new Thread(() -&gt; {</span></span>
<span class="line"><span style="color:#24292e;">            synchronized (object2) {</span></span>
<span class="line"><span style="color:#24292e;">                synchronized (object1) {</span></span>
<span class="line"><span style="color:#24292e;">                }</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">        }, &quot;deadlock-demo-2&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        t2.start();</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_2、栈帧都有哪些数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E6%A0%88%E5%B8%A7%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">2、栈帧都有哪些数据？</a> <a class="header-anchor" href="#_2、栈帧都有哪些数据" aria-label="Permalink to &quot;[2、栈帧都有哪些数据？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#2栈帧都有哪些数据)&quot;">​</a></h3><p>JVM的运行是基于栈的，和C语言的栈类似，它的大多数数据都是在堆里面的，只有少部分运行时的数据存在于栈上。</p><p>在JVM中，每个线程栈里面的元素，就叫<code>栈帧</code>。</p><p>栈帧包含：局部变量表、操作数栈、动态连接、返回地址等。</p><h3 id="_3、float-f-3-4-是否正确" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3float-f=34;%E6%98%AF%E5%90%A6%E6%AD%A3%E7%A1%AE" target="_blank" rel="noreferrer">3、float f=3.4;是否正确？</a> <a class="header-anchor" href="#_3、float-f-3-4-是否正确" aria-label="Permalink to &quot;[3、float f=3.4;是否正确？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#3float-f=34;是否正确)&quot;">​</a></h3><p>答:不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F;。</p><h3 id="_4、形参与实参" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82" target="_blank" rel="noreferrer">4、形参与实参</a> <a class="header-anchor" href="#_4、形参与实参" aria-label="Permalink to &quot;[4、形参与实参](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#4形参与实参)&quot;">​</a></h3><p>形参：全称为“形式参数”，是在定义方法名和方法体的时候使用的参数，用于接收调用该方法时传入的实际值；实参：全称为“实际参数”，是在调用方法时传递给该方法的实际值。</p><h3 id="_5、bio、nio、aio-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5bionioaio-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">5、BIO、NIO、AIO 有什么区别？</a> <a class="header-anchor" href="#_5、bio、nio、aio-有什么区别" aria-label="Permalink to &quot;[5、BIO、NIO、AIO 有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#5bionioaio-有什么区别)&quot;">​</a></h3><p>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</p><p>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p><p>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</p><h3 id="_6、什么是自旋" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E6%97%8B" target="_blank" rel="noreferrer">6、什么是自旋</a> <a class="header-anchor" href="#_6、什么是自旋" aria-label="Permalink to &quot;[6、什么是自旋](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#6什么是自旋)&quot;">​</a></h3><p>很多synchronized里面的代码只是一些很简单的代码，执行时间非常快，此时等待的线程都加锁可能是一种不太值得的操作，因为线程阻塞涉及到用户态和内核态切换的问题。既然synchronized里面的代码执行得非常快，不妨让等待锁的线程不要被阻塞，而是在synchronized的边界做忙循环，这就是自旋。如果做了多次忙循环发现还没有获得锁，再阻塞，这样可能是一种更好的策略。</p><h3 id="_7、我们可以在-hashcode-中使用随机数字吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%9C%A8-hashcode-%E4%B8%AD%E4%BD%BF%E7%94%A8%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E5%90%97" target="_blank" rel="noreferrer">7、我们可以在 hashcode() 中使用随机数字吗？</a> <a class="header-anchor" href="#_7、我们可以在-hashcode-中使用随机数字吗" aria-label="Permalink to &quot;[7、我们可以在 hashcode() 中使用随机数字吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#7我们可以在-hashcode-中使用随机数字吗)&quot;">​</a></h3><p>答案</p><p><a href="http://javarevisited.blogspot.sg/2011/10/override-hashcode-in-java-example.html" target="_blank" rel="noreferrer">http://javarevisited.blogspot.sg/2011/10/override-hashcode-in-java-example.html</a></p><p>不行，因为对象的 hashcode 值必须是相同的。参见答案获取更多关于 Java 中重写 hashCode() 方法的知识。</p><h3 id="_8、你所知道网络协议有那些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E4%BD%A0%E6%89%80%E7%9F%A5%E9%81%93%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%9C%89%E9%82%A3%E4%BA%9B" target="_blank" rel="noreferrer">8、你所知道网络协议有那些？</a> <a class="header-anchor" href="#_8、你所知道网络协议有那些" aria-label="Permalink to &quot;[8、你所知道网络协议有那些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#8你所知道网络协议有那些)&quot;">​</a></h3><p><strong>1、</strong> HTTP：超文本传输协议</p><p><strong>2、</strong> FTP：文件传输协议</p><p><strong>3、</strong> SMPT：简单邮件协议</p><p><strong>4、</strong> TELNET：远程终端协议</p><p><strong>5、</strong> POP3：邮件读取协议</p><h3 id="_9、构造器constructor是否可被override" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9%E6%9E%84%E9%80%A0%E5%99%A8constructor%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A2%ABoverride" target="_blank" rel="noreferrer">9、构造器Constructor是否可被override</a> <a class="header-anchor" href="#_9、构造器constructor是否可被override" aria-label="Permalink to &quot;[9、构造器Constructor是否可被override](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#9构造器constructor是否可被override)&quot;">​</a></h3><p>在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承，所以Constructor也就不能被override,但是可以overload,所以你可以看到一个类中有多个构造函数的情况。</p><h3 id="_10、什么是双亲委派机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C2021%E5%B9%B4%E6%9C%80%E6%96%B0%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">10、什么是双亲委派机制？</a> <a class="header-anchor" href="#_10、什么是双亲委派机制" aria-label="Permalink to &quot;[10、什么是双亲委派机制？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题及答案整理，2021年最新，汇总版.md#10什么是双亲委派机制)&quot;">​</a></h3><p>双亲委派机制的意思是除了顶层的启动类加载器以外，其余的类加载器，在加载之前，都会委派给它的父加载器进行加载。这样一层层向上传递，直到祖先们都无法胜任，它才会真正的加载。</p><h3 id="_11、jdbc中如何进行事务处理" tabindex="-1">11、JDBC中如何进行事务处理？ <a class="header-anchor" href="#_11、jdbc中如何进行事务处理" aria-label="Permalink to &quot;11、JDBC中如何进行事务处理？&quot;">​</a></h3><h3 id="_12、程序的结构有那些" tabindex="-1">12、程序的结构有那些？ <a class="header-anchor" href="#_12、程序的结构有那些" aria-label="Permalink to &quot;12、程序的结构有那些？&quot;">​</a></h3><h3 id="_13、怎么打出线程栈信息" tabindex="-1">13、怎么打出线程栈信息？ <a class="header-anchor" href="#_13、怎么打出线程栈信息" aria-label="Permalink to &quot;13、怎么打出线程栈信息？&quot;">​</a></h3><h3 id="_14、抽象类-abstract-class-和接口-interface-有什么异同" tabindex="-1">14、抽象类（abstract class）和接口（interface）有什么异同？ <a class="header-anchor" href="#_14、抽象类-abstract-class-和接口-interface-有什么异同" aria-label="Permalink to &quot;14、抽象类（abstract class）和接口（interface）有什么异同？&quot;">​</a></h3><h3 id="_15、怎么打破双亲委派模型" tabindex="-1">15、怎么打破双亲委派模型？ <a class="header-anchor" href="#_15、怎么打破双亲委派模型" aria-label="Permalink to &quot;15、怎么打破双亲委派模型？&quot;">​</a></h3><h3 id="_16、你知道哪些垃圾收集器" tabindex="-1">16、你知道哪些垃圾收集器？ <a class="header-anchor" href="#_16、你知道哪些垃圾收集器" aria-label="Permalink to &quot;16、你知道哪些垃圾收集器？&quot;">​</a></h3><h3 id="_17、什么是多线程中的上下文切换" tabindex="-1">17、什么是多线程中的上下文切换？ <a class="header-anchor" href="#_17、什么是多线程中的上下文切换" aria-label="Permalink to &quot;17、什么是多线程中的上下文切换？&quot;">​</a></h3><h3 id="_18、sleep-和-wait-有什么区别" tabindex="-1">18、sleep() 和 wait() 有什么区别？ <a class="header-anchor" href="#_18、sleep-和-wait-有什么区别" aria-label="Permalink to &quot;18、sleep() 和 wait() 有什么区别？&quot;">​</a></h3><h3 id="_19、构造方法能不能重载-能不能重写" tabindex="-1">19、构造方法能不能重载？能不能重写？ <a class="header-anchor" href="#_19、构造方法能不能重载-能不能重写" aria-label="Permalink to &quot;19、构造方法能不能重载？能不能重写？&quot;">​</a></h3><h3 id="_20、什么是游标" tabindex="-1">20、什么是游标？ <a class="header-anchor" href="#_20、什么是游标" aria-label="Permalink to &quot;20、什么是游标？&quot;">​</a></h3><h3 id="_21、在异常捕捉时-如果发生异常-那么try-catch-finally块外的return语句会执行吗" tabindex="-1">21、在异常捕捉时，如果发生异常，那么try.catch.finally块外的return语句会执行吗？ <a class="header-anchor" href="#_21、在异常捕捉时-如果发生异常-那么try-catch-finally块外的return语句会执行吗" aria-label="Permalink to &quot;21、在异常捕捉时，如果发生异常，那么try.catch.finally块外的return语句会执行吗？&quot;">​</a></h3><h3 id="_22、cas-的会产生什么问题" tabindex="-1">22、CAS 的会产生什么问题？ <a class="header-anchor" href="#_22、cas-的会产生什么问题" aria-label="Permalink to &quot;22、CAS 的会产生什么问题？&quot;">​</a></h3><h3 id="_23、list-set-map三者的区别" tabindex="-1">23、List，Set，Map三者的区别？ <a class="header-anchor" href="#_23、list-set-map三者的区别" aria-label="Permalink to &quot;23、List，Set，Map三者的区别？&quot;">​</a></h3><h3 id="_24、什么是面向对象" tabindex="-1">24、什么是面向对象？ <a class="header-anchor" href="#_24、什么是面向对象" aria-label="Permalink to &quot;24、什么是面向对象？&quot;">​</a></h3><h3 id="_25、在没有使用临时变量的情况如何交换两个整数变量的值" tabindex="-1">25、在没有使用临时变量的情况如何交换两个整数变量的值？ <a class="header-anchor" href="#_25、在没有使用临时变量的情况如何交换两个整数变量的值" aria-label="Permalink to &quot;25、在没有使用临时变量的情况如何交换两个整数变量的值？&quot;">​</a></h3><h3 id="_26、jvm-数据运行区-哪些会造成-oom-的情况" tabindex="-1">26、JVM 数据运行区，哪些会造成 OOM 的情况？ <a class="header-anchor" href="#_26、jvm-数据运行区-哪些会造成-oom-的情况" aria-label="Permalink to &quot;26、JVM 数据运行区，哪些会造成 OOM 的情况？&quot;">​</a></h3><h3 id="_27、描述一下jvm加载class文件的原理机制" tabindex="-1">27、描述一下JVM加载class文件的原理机制？ <a class="header-anchor" href="#_27、描述一下jvm加载class文件的原理机制" aria-label="Permalink to &quot;27、描述一下JVM加载class文件的原理机制？&quot;">​</a></h3><h3 id="_28、什么是线程池-为什么要使用它" tabindex="-1">28、什么是线程池？ 为什么要使用它？ <a class="header-anchor" href="#_28、什么是线程池-为什么要使用它" aria-label="Permalink to &quot;28、什么是线程池？ 为什么要使用它？&quot;">​</a></h3><h3 id="_29、什么情况下会违反迪米特法则-为什么会有这个问题" tabindex="-1">29、什么情况下会违反迪米特法则？为什么会有这个问题？ <a class="header-anchor" href="#_29、什么情况下会违反迪米特法则-为什么会有这个问题" aria-label="Permalink to &quot;29、什么情况下会违反迪米特法则？为什么会有这个问题？&quot;">​</a></h3><h3 id="_30、java中的包装类都是那些" tabindex="-1">30、Java中的包装类都是那些？ <a class="header-anchor" href="#_30、java中的包装类都是那些" aria-label="Permalink to &quot;30、Java中的包装类都是那些？&quot;">​</a></h3><h3 id="_31、string-类的常用方法都有那些" tabindex="-1">31、String 类的常用方法都有那些？ <a class="header-anchor" href="#_31、string-类的常用方法都有那些" aria-label="Permalink to &quot;31、String 类的常用方法都有那些？&quot;">​</a></h3><h3 id="_32、string-s-new-string-xyz-创建了几个字符串对象" tabindex="-1">32、String s = new String(“xyz”);创建了几个字符串对象？ <a class="header-anchor" href="#_32、string-s-new-string-xyz-创建了几个字符串对象" aria-label="Permalink to &quot;32、String s = new String(“xyz”);创建了几个字符串对象？&quot;">​</a></h3><h3 id="_33、copyonwritearraylist-的缺点" tabindex="-1">33、CopyOnWriteArrayList 的缺点? <a class="header-anchor" href="#_33、copyonwritearraylist-的缺点" aria-label="Permalink to &quot;33、CopyOnWriteArrayList 的缺点?&quot;">​</a></h3><h3 id="_34、什么是线程池-有哪几种创建方式" tabindex="-1">34、什么是线程池？有哪几种创建方式？ <a class="header-anchor" href="#_34、什么是线程池-有哪几种创建方式" aria-label="Permalink to &quot;34、什么是线程池？有哪几种创建方式？&quot;">​</a></h3><h3 id="_35、什么是观察者模式" tabindex="-1">35、什么是观察者模式 <a class="header-anchor" href="#_35、什么是观察者模式" aria-label="Permalink to &quot;35、什么是观察者模式&quot;">​</a></h3><h3 id="_36、使用jdbc操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能" tabindex="-1">36、使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？ <a class="header-anchor" href="#_36、使用jdbc操作数据库时-如何提升读取数据的性能-如何提升更新数据的性能" aria-label="Permalink to &quot;36、使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？&quot;">​</a></h3><h3 id="_37、java-中会存在内存泄漏-简述一下" tabindex="-1">37、Java 中会存在内存泄漏?简述一下 <a class="header-anchor" href="#_37、java-中会存在内存泄漏-简述一下" aria-label="Permalink to &quot;37、Java 中会存在内存泄漏?简述一下&quot;">​</a></h3><h3 id="_38、什么是多线程中的上下文切换" tabindex="-1">38、什么是多线程中的上下文切换？ <a class="header-anchor" href="#_38、什么是多线程中的上下文切换" aria-label="Permalink to &quot;38、什么是多线程中的上下文切换？&quot;">​</a></h3><h3 id="_39、谈谈永久代" tabindex="-1">39、谈谈永久代 <a class="header-anchor" href="#_39、谈谈永久代" aria-label="Permalink to &quot;39、谈谈永久代&quot;">​</a></h3><h3 id="_40、hashmap-与-hashtable-有什么区别" tabindex="-1">40、HashMap 与 HashTable 有什么区别？ <a class="header-anchor" href="#_40、hashmap-与-hashtable-有什么区别" aria-label="Permalink to &quot;40、HashMap 与 HashTable 有什么区别？&quot;">​</a></h3>`,61),r=[t];function l(c,i,p,h,d,E){return e(),s("div",null,r)}const f=a(o,[["render",l]]);export{u as __pageData,f as default};
