import{_ as s,o as a,c as n,V as o}from"./chunks/framework.c6d8cbec.js";const l="/docs/assets/sources.78ab842f.png",m=JSON.parse('{"title":"流处理器","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/分布式/spark.md","filePath":"java/其它/分布式/spark.md"}'),p={name:"java/其它/分布式/spark.md"},e=o(`<h1 id="流处理器" tabindex="-1">流处理器 <a class="header-anchor" href="#流处理器" aria-label="Permalink to &quot;流处理器&quot;">​</a></h1><hr><h2 id="spark-streaming" tabindex="-1">Spark Streaming <a class="header-anchor" href="#spark-streaming" aria-label="Permalink to &quot;Spark Streaming&quot;">​</a></h2><p>Spark 是一种快速、通用、可扩展的大数据分析引擎，已经发展成为一个包含多个子项目的集合。 Spark Streaming 是 Spark 的流处理部分。</p><p>Spark 的流处理是基于所谓微批处理的思想，把流处理看作是批处理的一种特殊形式，每次接收到一个时间间隔的数据才会去处理，所以天生很难在实时性上有所提升。</p><p>虽然在 Spark2.3 中提出了连续处理模型( Continuous Processing Model),但是现在只支持很有限的功能,并不能在大的项目中使用。 Spark还需要做出很大的努力才能改进现有的流处理模型想要在流处理的实时性上提升,就不能継续用微批处理的模式,而要想办法实现真正的流处理即每当有一条数据输入就立刻处理,不做等待。</p><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><p>在内部，每个数据块就是一个 RDD，所以 spark streaming 有 RDD 所有优点，处理速度快，容错性好，支持高度并行计算。</p><h3 id="操作流程" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程" aria-label="Permalink to &quot;操作流程&quot;">​</a></h3><p>第一，我们将Spark Streaming类名和StreamingContext的一些隐式转换导入到我们的环境中，以便将有用的方法添加到我们需要的其他类（如DStream）中。StreamingContext是所有流功能的主要入口点。我们创建一个带有两个执行线程的本地StreamingContext，批处理间隔为1秒。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 工作环境</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">SparkConf</span><span style="color:#F6F6F4;"> conf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SparkConf</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">setMaster</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">local[2]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">setAppName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NetworkWordCount</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);     </span><span style="color:#7B7F8B;">// 定义双线程 / APP 名称</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">JavaStreamingContext</span><span style="color:#F6F6F4;"> jssc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">JavaStreamingContext</span><span style="color:#F6F6F4;">(conf, Durations.</span><span style="color:#62E884;">seconds</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">));          </span><span style="color:#7B7F8B;">// 定义批处理时间间隔 1s</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 流创建（从源导入）</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">JavaReceiverInputDStream</span><span style="color:#F6F6F4;">&lt;String&gt; lines </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> jssc.</span><span style="color:#62E884;">socketTextStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">9999</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 流处理（数据分离、统计并打印）</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">JavaDStream</span><span style="color:#F6F6F4;">&lt;String&gt; words </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lines.</span><span style="color:#62E884;">flatMap</span><span style="color:#F6F6F4;">(x </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">asList</span><span style="color:#F6F6F4;">(x.</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)).</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">());    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">JavaPairDStream</span><span style="color:#F6F6F4;">&lt;String, Integer&gt; pairs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> words.</span><span style="color:#62E884;">mapToPair</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Tuple2</span><span style="color:#F6F6F4;">&lt;&gt;(s, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">JavaPairDStream</span><span style="color:#F6F6F4;">&lt;String, Integer&gt; wordCounts </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pairs.</span><span style="color:#62E884;">reduceByKey</span><span style="color:#F6F6F4;">((i1, i2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> i1 </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i2);</span></span>
<span class="line"><span style="color:#F6F6F4;">    wordCounts.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 启动流运算</span></span>
<span class="line"><span style="color:#F6F6F4;">    jssc.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    jssc.</span><span style="color:#62E884;">awaitTermination</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 工作环境</span></span>
<span class="line"><span style="color:#24292E;">    SparkConf conf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SparkConf</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">setMaster</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;local[2]&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">setAppName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NetworkWordCount&quot;</span><span style="color:#24292E;">);     </span><span style="color:#6A737D;">// 定义双线程 / APP 名称</span></span>
<span class="line"><span style="color:#24292E;">    JavaStreamingContext jssc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavaStreamingContext</span><span style="color:#24292E;">(conf, Durations.</span><span style="color:#6F42C1;">seconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));          </span><span style="color:#6A737D;">// 定义批处理时间间隔 1s</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 流创建（从源导入）</span></span>
<span class="line"><span style="color:#24292E;">    JavaReceiverInputDStream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lines </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jssc.</span><span style="color:#6F42C1;">socketTextStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9999</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 流处理（数据分离、统计并打印）</span></span>
<span class="line"><span style="color:#24292E;">    JavaDStream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; words </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lines.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">());    </span></span>
<span class="line"><span style="color:#24292E;">    JavaPairDStream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; pairs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> words.</span><span style="color:#6F42C1;">mapToPair</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Tuple2&lt;&gt;(s, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    JavaPairDStream&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; wordCounts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pairs.</span><span style="color:#6F42C1;">reduceByKey</span><span style="color:#24292E;">((i1, i2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> i1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i2);</span></span>
<span class="line"><span style="color:#24292E;">    wordCounts.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 启动流运算</span></span>
<span class="line"><span style="color:#24292E;">    jssc.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    jssc.</span><span style="color:#6F42C1;">awaitTermination</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="dstream-对象" tabindex="-1">DStream 对象 <a class="header-anchor" href="#dstream-对象" aria-label="Permalink to &quot;DStream 对象&quot;">​</a></h4><p>Spark Streaming 提供一个对于流数据的抽象 DStream。DStream 可以由来自 Apache Kafka、Flume 或者 HDFS 中的流数据生成，也可以由别的 DStream 经过各种转换操作得来。</p><p>底层 DStream 也是由很多个序列化的 RDD 构成，按时间片（比如一秒）切分成的每个数据单位都是一个 RDD。然后，Spark 核心引擎将对 DStream 的 Transformation 操作变为针对 Spark 中对 RDD 的 Transformation 操作，将 RDD 经过操作变成中间结果保存在内存中。</p><p>由于 Spark Streaming 将底层的细节封装起来了，所以对于开发者来说，只需要操作 DStream 就行。接下来，让我们一起学习 DStream 的结构以及它支持的转换操作。</p><h4 id="streamingcontext-对象" tabindex="-1">StreamingContext 对象 <a class="header-anchor" href="#streamingcontext-对象" aria-label="Permalink to &quot;StreamingContext 对象&quot;">​</a></h4><p>任何 Spark Streaming 的程序都要首先创建一个 StreamingContext 的对象，它是所有 Streaming 操作的入口。StreamingContext 中最重要的参数是批处理的时间间隔，即把流数据细分成数据块的粒度。</p><p>用 <code>streamingContext.start()</code> 来开始接收数据并处理它 用 <code>streamingContext.awaitTermination()</code> 等待处理停止（手动停止或由于任何错误） 用 <code>streamingContext.stop()</code> 可以手动停止</p><p>一旦启动上下文，就无法设置新的流计算或将其添加到该流计算中 上下文一旦停止，就无法重新启动 一个JVM中只能同时激活一个StreamingContext StreamingContext中的stop()也会停止SparkContext。但如果要仅停止StreamingContext的话，设置stop(false) 只要在创建下一个StreamingContext之前停止了上一个StreamingContext（不停止SparkContext），就可以将SparkContext重用于创建多个StreamingContext</p><h2 id="spark-操作-kafka" tabindex="-1">Spark 操作 kafka <a class="header-anchor" href="#spark-操作-kafka" aria-label="Permalink to &quot;Spark 操作 kafka&quot;">​</a></h2><p>Spark Streaming提供了两类内置的streaming源：</p><p>Basic sources ：直接在StreamingContext API中可用的源。例如，文件系统和socket连接 Advanced sources ：像Kafka，Flume，Kinesis等这样的源，可通过额外的程序类获得</p><h3 id="消费" tabindex="-1">消费 <a class="header-anchor" href="#消费" aria-label="Permalink to &quot;消费&quot;">​</a></h3><ol><li>先把数据接收过来，转换为spark streaming中的数据结构Dstream。接收数据的方式有两种：1.利用Receiver接收数据，2.直接从kafka读取数据。</li></ol><p>在spark1.3之后，引入了Direct方式。不同于Receiver的方式，Direct方式没有receiver这一层，其会周期性的获取Kafka中每个topic的每个partition中的最新offsets，之后根据设定的maxRatePerPartition来处理每个batch。</p><p>0.10以后只保留了direct模式(Reveiver模式不适合生产环境)，并且0.10版本API有变化（更加强大）</p><h3 id="生产" tabindex="-1">生产 <a class="header-anchor" href="#生产" aria-label="Permalink to &quot;生产&quot;">​</a></h3><p>与读数据不同，Spark并没有提供统一的接口用于写入Kafka，所以我们需要使用底层Kafka接口进行包装。 最直接的做法我们可以想到如下这种方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">input.</span><span style="color:#62E884;">foreachRDD</span><span style="color:#F6F6F4;">(rdd </span><span style="color:#F286C4;">=&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 不能在这里创建KafkaProducer</span></span>
<span class="line"><span style="color:#F6F6F4;">  rdd.</span><span style="color:#62E884;">foreachPartition</span><span style="color:#F6F6F4;">(partition </span><span style="color:#F286C4;">=&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    partition.foreach{</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">String</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">        val props </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">[String, Object]()</span></span>
<span class="line"><span style="color:#F6F6F4;">        props.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers)</span></span>
<span class="line"><span style="color:#F6F6F4;">        props.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.apache.kafka.common.serialization.StringSerializer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        props.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">org.apache.kafka.common.serialization.StringSerializer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(x)</span></span>
<span class="line"><span style="color:#F6F6F4;">        val producer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">KafkaProducer</span><span style="color:#F6F6F4;">[String,String](props)</span></span>
<span class="line"><span style="color:#F6F6F4;">        val message</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ProducerRecord</span><span style="color:#F6F6F4;">[String, String](&quot;output&quot;,</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,x)</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(message)</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  )</span></span>
<span class="line"><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">input.</span><span style="color:#6F42C1;">foreachRDD</span><span style="color:#24292E;">(rdd </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 不能在这里创建KafkaProducer</span></span>
<span class="line"><span style="color:#24292E;">  rdd.</span><span style="color:#6F42C1;">foreachPartition</span><span style="color:#24292E;">(partition </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    partition.foreach{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        val props </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">HashMap</span><span style="color:#24292E;">[String, Object]()</span></span>
<span class="line"><span style="color:#24292E;">        props.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers)</span></span>
<span class="line"><span style="color:#24292E;">        props.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        props.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(x)</span></span>
<span class="line"><span style="color:#24292E;">        val producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">KafkaProducer</span><span style="color:#24292E;">[String,String](props)</span></span>
<span class="line"><span style="color:#24292E;">        val message</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ProducerRecord</span><span style="color:#24292E;">[String, String](&quot;output&quot;,</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,x)</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(message)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre></div><p>但是这种方式缺点很明显，对于每个partition的每条记录，我们都需要创建KafkaProducer，然后利用producer进行输出操作，注意这里我们并不能将KafkaProducer的新建任务放在foreachPartition外边，因为KafkaProducer是不可序列化的（not serializable）。显然这种做法是不灵活且低效的，因为每条记录都需要建立一次连接。如何解决呢？</p><p>首先，我们需要将KafkaProducer利用lazy val的方式进行包装如下：</p><hr><h2 id="flink" tabindex="-1">Flink <a class="header-anchor" href="#flink" aria-label="Permalink to &quot;Flink&quot;">​</a></h2><p>目前唯一同时支持高吞吐、低延迟、高性能的分布式流式数据处理框架。像Apache Spark也只能兼顾高吞吐和高性能特性，主要因为在Spark Streaming流式计算中无法做到低延迟保障。</p><p><strong>优势</strong></p><ol><li><p>支持事件事件概念。</p></li><li><p>支持有状态计算，保持了事件原本产生的时序性，避免网络传输带来的影响。</p></li><li><p>支持高度灵活的窗口操作，Flink将窗口分为Time、Count、Session以及Data-driven等类型的窗口操作，可以灵活的处罚条件定制化来达到对复杂的流传输模式的支持。</p></li><li><p>基于轻量级分布式快照实现容错，将大型计算任务的流程拆解成小的计算过程，分布到并行节点上处理。并通过 Checkpoints 将执行过程中的状态信息进行持久化存储，可以自动恢复出现异常的任务。</p></li><li><p>基于 JVM 实现独立的内存管理。</p></li></ol><p><strong>运行环境</strong></p><ul><li>JDK 版本必须在 1.8 及以上</li><li>Maven 版本必须在 3.0.4 及以上</li><li>Hadoop 环境支持 hadoop 2.4、2.6、2.7、2.8 等主要版本</li></ul><p>Flink 支持使用 Java/Scala 开发，以下示例代码全部使用 Java .</p><h3 id="基本组件" tabindex="-1">基本组件 <a class="header-anchor" href="#基本组件" aria-label="Permalink to &quot;基本组件&quot;">​</a></h3><ol><li><p>Flink 架构体系基本上分三层（自顶向下）：</p><ul><li><p><strong>API &amp; Libraries 层</strong>： 提供支撑流计算和批计算的接口，，同时在此基础上抽象出不同的应用类型的组件库。</p></li><li><p><strong>Runtime 核心层</strong>：Flink分布式计算框架的核心实现层，负责分布式作业的执行、映射转换、任务调度等。将 DataStream 和 DataSet 转成同意的可执行的 Task Operator 。</p></li><li><p><strong>物理部署层</strong>：目前Flink支持本地、集群、云、容器部署，Flink通过盖层能够支持不同平台的部署，用户可以根据需要选择使用对应的部署模式。</p></li></ul></li><li><p>Flink 基本架构</p><ul><li><p><strong>Client 客户端</strong>：负责将任务提交到集群，与JobManager构建Akka连接，然后将任务提交到JobManager，通过和JobManager之间进行交互获取任务执行状态。</p></li><li><p><strong>JobManager</strong>：负责整个Flink集群任务的调度以及资源的管理</p></li><li><p><strong>TaskManager</strong>：相当于整个集群的Slave节点，负责具体的任务执行和对应任务在每个节点上的资源申请与管理。</p></li></ul></li></ol><h3 id="编程模型" tabindex="-1">编程模型 <a class="header-anchor" href="#编程模型" aria-label="Permalink to &quot;编程模型&quot;">​</a></h3><ol><li>BasicTypeInfo 数据类型：支持任意 Java 原生基本类型或 String 类型。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 直接获取</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">DataSource</span><span style="color:#F6F6F4;">&lt;String&gt; inputStream</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> environment.</span><span style="color:#62E884;">fromElements</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">6</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 从集合获取</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;String&gt; list </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;(list2);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">DataSource</span><span style="color:#F6F6F4;">&lt;String&gt; inputStream</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> environment.</span><span style="color:#62E884;">fromCollection</span><span style="color:#F6F6F4;">(list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 直接获取</span></span>
<span class="line"><span style="color:#24292E;">DataSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; inputStream</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">fromElements</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;6&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 从集合获取</span></span>
<span class="line"><span style="color:#24292E;">ArrayList&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;(list2);</span></span>
<span class="line"><span style="color:#24292E;">DataSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; inputStream</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">fromCollection</span><span style="color:#24292E;">(list);</span></span></code></pre></div><ol start="2"><li>TupleTypeInfo 数据类型：标识 Tuple 类型数据。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">DataSource</span><span style="color:#F6F6F4;">&lt;Tuple2&gt; inputStreamTuple </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> environment.</span><span style="color:#62E884;">fromElements</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Tuple2</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fangpc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">), </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Tuple2</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fangpengcheng</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DataSource&lt;</span><span style="color:#D73A49;">Tuple2</span><span style="color:#24292E;">&gt; inputStreamTuple </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">fromElements</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tuple2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fangpc&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tuple2</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fangpengcheng&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span></code></pre></div><ol start="3"><li>PojoTypeInfo 数据类型：描述任意的 POJOs ，字段类型必须是上述基础类型，拥有默认构造方法和 getter/setter 方法</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">var</span><span style="color:#F6F6F4;"> personStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> environment.</span><span style="color:#62E884;">fromElements</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fangpc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;">), </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fangpengcheng</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">25</span><span style="color:#F6F6F4;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> personStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">fromElements</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fangpc&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">), </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fangpengcheng&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">));</span></span></code></pre></div><ol start="4"><li><p>Value 数据类型：实现了org.apache.flink.types.Value，其中包括 read() 和 write() 两个方法完成序列化和反序列化操作，有着比较高效的性能。Flink 提供的内建 Value 类型有 IntValue、DoubleValue、StringValue 等。</p></li><li><p>特殊数据类型：</p><ul><li>Scala中的List、Map、Either、Option、Try数据类型</li><li>Java中Either</li><li>Hadoop的Writable数据类型</li></ul></li></ol><h3 id="操作流程-1" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程-1" aria-label="Permalink to &quot;操作流程&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">StreamingJob</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建执行环境</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">StreamExecutionEnvironment</span><span style="color:#F6F6F4;"> env </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StreamExecutionEnvironment.</span><span style="color:#62E884;">getExecutionEnvironment</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">/******** 配置流过程 *********/</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">addSource</span><span style="color:#F6F6F4;">();         </span><span style="color:#7B7F8B;">// 流创建</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                             </span><span style="color:#7B7F8B;">// 流转化</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">/******** 配置流过程 *********/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 执行</span></span>
<span class="line"><span style="color:#F6F6F4;">        env.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Flink Streaming Java API Skeleton</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StreamingJob</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建执行环境</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/******** 配置流过程 *********/</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">addSource</span><span style="color:#24292E;">();         </span><span style="color:#6A737D;">// 流创建</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#6A737D;">// 流转化</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/******** 配置流过程 *********/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行</span></span>
<span class="line"><span style="color:#24292E;">        env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Flink Streaming Java API Skeleton&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>DataStreamSource 对象</strong>是 DataStream 类的子类，代表着数据流的起始点。必须通过 addSource 方法生成, fromCollection/readTextFile 方法底层也会调用 addSource 方法。</p><p><strong>DataStream 对象</strong>代表着相同类型元素的流，可以通过转换（transformation）来实现转换为另一个 DataStream 对象。DataStrem 对象内部持有当前的 StreamExecutionEnvironment 对象和 DataTransformation 对象。</p><p><strong>StreamExecutionEnvironment 对象</strong>代表着当前流计算执行环境以及相关配置。每个 DataStream 类在做转换的时候，会首先创建转换对应的 DataTransformation 对象，最终形成一个 DataTransformation 链表被 StreamExecutionEnvironment 对象维护。</p><blockquote><p>Flink 在执行时，会把流拓扑（Source、Transformation、Sink）都转换为 DataFlow：由 Stream 和 Operator 组成，让 Stream在 Operator 中流动。</p></blockquote><h3 id="一致性" tabindex="-1">一致性 <a class="header-anchor" href="#一致性" aria-label="Permalink to &quot;一致性&quot;">​</a></h3><p>当在分布式系统中引入状态时，自然也引入了一致性问题。</p><p>在流处理中，一致性分为 3 个级别。</p><ul><li><p><strong>at-most-once</strong>：故障发生之后，计数结果可能丢失。</p></li><li><p><strong>at-least-once</strong>：这表示计数结果可能大于正确值，但绝不会小于正确值。也就是说，计数程序在发生故障后可能多算，但是绝不会少算。</p></li><li><p><strong>exactly-once</strong>：这指的是系统保证在发生故障后得到的计数结果与正确值一致。</p></li></ul><p>第一代流处理器（如 Storm 和 Samza）刚问世时只保证 at-least-once。最先保证 exactly-once 的系统（Storm Trident 和 Spark Streaming）在性能和表现力这两个方面付出了很大的代价。</p><hr><h2 id="flink-操作-kafka" tabindex="-1">Flink 操作 kafka <a class="header-anchor" href="#flink-操作-kafka" aria-label="Permalink to &quot;Flink 操作 kafka&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/92289771" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/92289771</a></p><p>flink 提供了一个特有的 kafka connector 去读写 kafka topic 的数据。这样在 flink 消费 kafka 数据时，就可以通过 flink 内部去跟踪 offset 和设定 checkpoint 去实现 exactly-once 的语义。</p><p>在 Flink 中，我们作为 Consumer 时需要用 Source Connectors 代表连接数据源的连接器，作为 Producer 时需要用 Sink Connector 代表连接数据输出的连接器。</p><h3 id="source-connector" tabindex="-1">Source Connector <a class="header-anchor" href="#source-connector" aria-label="Permalink to &quot;Source Connector&quot;">​</a></h3><p>Flink Kafka connector 以并行的方式读入事件流，每个并行的 source task 都可以从一个或多个 partition 读入数据。Task 对于每个它当前正在读的 partition 都会追踪当前的 offset ，并将这些 offset 数据存储到它的 checkpoint 中。当发生故障进行恢复时，offset 被取出并重置，使得数据可以在上次检查点时的 offset 继续读数据。<em>Flink Kafka connector 并不依赖于 Kafka 本身的 offset-tracking 机制（也就是consumer groups机制）。</em></p><p><img src="`+l+`" alt="source"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">StreamExecutionEnvironment</span><span style="color:#F6F6F4;"> env </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StreamExecutionEnvironment.</span><span style="color:#62E884;">getExecutionEnvironment</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 设定配置</span></span>
<span class="line"><span style="color:#F6F6F4;">val properties </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Properties</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">properties.</span><span style="color:#62E884;">setProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">bootstrap.servers</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost:9092</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">properties.</span><span style="color:#62E884;">setProperty</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">group.id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 设置消费者并添加源</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FlinkKafkaConsumer</span><span style="color:#F6F6F4;">&lt;String&gt; myConsumer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FlinkKafkaConsumer</span><span style="color:#F6F6F4;">&lt;String&gt;(</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                                 </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SimpleStringSchema</span><span style="color:#F6F6F4;">(),                </span></span>
<span class="line"><span style="color:#F6F6F4;">    properties))   </span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">DataStream</span><span style="color:#F6F6F4;">[String] stream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> env.</span><span style="color:#62E884;">addSource</span><span style="color:#F6F6F4;">(myConsumer);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设定配置</span></span>
<span class="line"><span style="color:#24292E;">val properties </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Properties</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bootstrap.servers&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;localhost:9092&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">properties.</span><span style="color:#6F42C1;">setProperty</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;group.id&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置消费者并添加源</span></span>
<span class="line"><span style="color:#24292E;">FlinkKafkaConsumer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; myConsumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> FlinkKafkaConsumer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;">,                                 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleStringSchema</span><span style="color:#24292E;">(),                </span></span>
<span class="line"><span style="color:#24292E;">    properties))   </span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">DataStream</span><span style="color:#24292E;">[String] stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">addSource</span><span style="color:#24292E;">(myConsumer);</span></span></code></pre></div><p><strong>初始化 FlinkKafkaConsumer 参数</strong></p><ol><li><strong>topic 名字</strong>，用来指定消费一个或者多个topic的数据，也可以是正则表达式。</li><li><strong>反序列化器(schema)</strong>，对消费数据进行反序列化，转换成自定义的数据结构。</li><li><strong>kafka 配置信息</strong>：如 zk 地址端口，kafka 地址端口等。此对象至少要包含两个条目 <code>bootstrap.servers</code> 与 <code>group.id</code>。</li></ol><p>反序列化器主要通过实现 KeyedDeserializationSchema 或者 DeserializationSchema 接口来完成，flink 内置，也可以自定义。</p><ul><li>转化为 String 类型 <code>SimpleStringSchema</code></li><li>转化为其它类型 <code>TypeInformationSerializationSchema&lt;T&gt;</code></li><li>转化为键值对类型 <code>TypeInformationKeyValueSerializationSchema&lt;K, V&gt;</code></li><li>转化为 JSON 类型 <code>JSONKeyValueDeserializationSchema</code></li></ul><p><strong>消费起始位置</strong></p><p>Flink Kafka Consumer 可以配置指定的 Kafka Partition 的起始位置。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">myConsumer.</span><span style="color:#62E884;">setStartFromEarliest</span><span style="color:#F6F6F4;">()             </span><span style="color:#7B7F8B;">// start from the earliest record possible（默认）</span></span>
<span class="line"><span style="color:#F6F6F4;">myConsumer.</span><span style="color:#62E884;">setStartFromLatest</span><span style="color:#F6F6F4;">()               </span><span style="color:#7B7F8B;">// start from the latest record</span></span>
<span class="line"><span style="color:#F6F6F4;">myConsumer.</span><span style="color:#62E884;">setStartFromTimestamp</span><span style="color:#F6F6F4;">(...)         </span><span style="color:#7B7F8B;">// start from specified epoch timestamp (milliseconds)</span></span>
<span class="line"><span style="color:#F6F6F4;">myConsumer.</span><span style="color:#62E884;">setStartFromGroupOffsets</span><span style="color:#F6F6F4;">()         </span><span style="color:#7B7F8B;">// the default behaviour</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">myConsumer.</span><span style="color:#6F42C1;">setStartFromEarliest</span><span style="color:#24292E;">()             </span><span style="color:#6A737D;">// start from the earliest record possible（默认）</span></span>
<span class="line"><span style="color:#24292E;">myConsumer.</span><span style="color:#6F42C1;">setStartFromLatest</span><span style="color:#24292E;">()               </span><span style="color:#6A737D;">// start from the latest record</span></span>
<span class="line"><span style="color:#24292E;">myConsumer.</span><span style="color:#6F42C1;">setStartFromTimestamp</span><span style="color:#24292E;">(...)         </span><span style="color:#6A737D;">// start from specified epoch timestamp (milliseconds)</span></span>
<span class="line"><span style="color:#24292E;">myConsumer.</span><span style="color:#6F42C1;">setStartFromGroupOffsets</span><span style="color:#24292E;">()         </span><span style="color:#6A737D;">// the default behaviour</span></span></code></pre></div><h3 id="sink-connector" tabindex="-1">Sink Connector <a class="header-anchor" href="#sink-connector" aria-label="Permalink to &quot;Sink Connector&quot;">​</a></h3><p>Flink 提供为 Kafka 0.8 版本后所有 Kafka 版本的 sink connectors。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 设定数据流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">DataStream</span><span style="color:#F6F6F4;">[String] stream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> environment.</span><span style="color:#62E884;">fromElements</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">6</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#7B7F8B;">// 设置生产者并添加到 sink</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FlinkKafkaProducer</span><span style="color:#F6F6F4;">&lt;String&gt; myProducer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FlinkKafkaProducer</span><span style="color:#F6F6F4;">&lt;String&gt;(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost:9092</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                            </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                                     </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> SimpleStringSchema)                    </span></span>
<span class="line"><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">stream.</span><span style="color:#62E884;">addSink</span><span style="color:#F6F6F4;">(myProducer)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设定数据流</span></span>
<span class="line"><span style="color:#D73A49;">DataStream</span><span style="color:#24292E;">[String] stream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> environment.</span><span style="color:#6F42C1;">fromElements</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;4&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;6&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// 设置生产者并添加到 sink</span></span>
<span class="line"><span style="color:#24292E;">FlinkKafkaProducer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; myProducer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> FlinkKafkaProducer&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;localhost:9092&quot;</span><span style="color:#24292E;">,                            </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;">,                                     </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> SimpleStringSchema)                    </span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">stream.</span><span style="color:#6F42C1;">addSink</span><span style="color:#24292E;">(myProducer)</span></span></code></pre></div><p><strong>初始化 FlinkKafkaProducer 参数</strong></p><ol><li><strong>broker 列表</strong>，要发往的 brokers , 用逗号分割。</li><li><strong>topic 名字</strong>，用来指定生产一个或者多个 topic 的数据，也可以是正则表达式。</li><li><strong>序列化器(schema)</strong>，对消费数据进行序列化，将目标类型转换成字节数组。</li></ol><p>序列化器类比于反序列化器实现：</p><ul><li>转化为 String 类型 <code>SimpleStringSchema</code></li><li>转化为其它类型 <code>TypeInformationSerializationSchema&lt;T&gt;</code></li><li>转化为键值对类型 <code>TypeInformationKeyValueSerializationSchema&lt;K, V&gt;</code></li><li>转化为 JSON 类型 <code>JSONKeyValueDeserializationSchema</code></li></ul><h3 id="kakfa-容错机制" tabindex="-1">Kakfa 容错机制 <a class="header-anchor" href="#kakfa-容错机制" aria-label="Permalink to &quot;Kakfa 容错机制&quot;">​</a></h3><p>在 Kafka 0.9 之前不提供任何机制去保证 at-least-once 或 exactly-once 的语义。 但后续版本的 Kafka 可以通过以下方式来实现出错后恢复且不丢失数据：</p><ol><li><strong>启用 Checkpoint</strong></li></ol><p>在默认启用 Checkpoint 的状况下， FlinkKafkaConsumer 将消费来自 Topic 的记录，并以一致的方式周期性地 Checkpoint 其所有 Kafka Offset 以及其它操作的状态。万一作业失败，Flink 将把流失程序恢复到最新 Checkpoint的状态，并且重新消费 Kafka 中的数据。这确保了在 Kafka Broker 中所提交的 Offset 和 Checkpointed State 中的 Offset 是一致的。此时 FlinkKafkaProducer 可以提供 exactly-once 的投递语义。</p><p>如果 Checkpointing 没有启用，KafkaFlinkConsumer 将会周期性的提交 Offset 到 Zookeeper 中去。</p><ul><li><strong>配置 Semantic 参数</strong></li></ul><p>除了启用 Flink 的 Checkpointing，还可以通过传递恰当的 semantic 参数给 FlinkKafkaProducer 选择 3 种不同的操作模式:</p><ul><li><code>emantic.None</code> : Flink 什么也不会保证，所产生的记录可能会被丢失或者重复。</li><li><code>Semantic.AT_LEASET_ONCE</code>（默认）: Flink 保证 at-least-once ，没有记录会被丢失，但可能会重复。</li><li><code>Semantic.EXACTLY_ONCE</code> : 使用 Kafka 的事务机制来保证 exactly-once。</li></ul><p>Semantic.EXACTLY_ONCE 模式依赖于提交事务的能力，这些事务是在 taking a checkpoint 之前，从该 Checkpoint 恢复之后启动的。如果 Flink 应用崩溃且完成重启的时间比 Kafka 事务超时的时间大，则数据将会丢失（Kafka 将自动的终止超过超时时间的事务）。请务必根据预期的故障时间来配置你的事务超时。</p><h3 id="kafka-分区发现" tabindex="-1">kafka 分区发现 <a class="header-anchor" href="#kafka-分区发现" aria-label="Permalink to &quot;kafka 分区发现&quot;">​</a></h3><p>FlinkKafkaConsumer 支持发现动态创建的 Kafka Partition，并且以 exactly-once 语义保证来消费其中的数据。默认情况下分区发现是禁用的，要启用该特性在提供的属性配置中为参数 flink.partition-discovery.interval-millis 设置一个非负数的值，表示发现间隔（以毫秒为单位）。</p>`,94),t=[e];function r(c,i,y,F,E,u){return a(),n("div",null,t)}const g=s(p,[["render",r]]);export{m as __pageData,g as default};
