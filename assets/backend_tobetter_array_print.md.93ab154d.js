import{_ as s,o as a,c as n,V as p}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/print-01.a290e215.png",l="/docs/assets/print-02.dc74b5de.png",e="/docs/assets/print-03.df35ba8a.png",v=JSON.parse('{"title":"如何优雅地打印Java数组？","description":"本文将向您展示如何在Java中优雅地打印数组内容。我们将介绍不同的方法来输出数组，包括使用for循环、增强型for循环以及Java内置的Arrays.toString()和Arrays.deepToString()方法。通过本文，您将学会如何简便快捷地打印Java数组，提高编程效率和代码可读性。","frontmatter":{"title":"如何优雅地打印Java数组？","shortTitle":"打印Java数组","category":["Java核心"],"tag":["数组&字符串"],"description":"本文将向您展示如何在Java中优雅地打印数组内容。我们将介绍不同的方法来输出数组，包括使用for循环、增强型for循环以及Java内置的Arrays.toString()和Arrays.deepToString()方法。通过本文，您将学会如何简便快捷地打印Java数组，提高编程效率和代码可读性。","head":[["meta",{"name":"keywords","content":"Java, 数组打印, 输出数组, Arrays.toString, Arrays.deepToString"}]]},"headers":[],"relativePath":"backend/tobetter/array/print.md","filePath":"backend/tobetter/array/print.md"}'),t={name:"backend/tobetter/array/print.md"},r=p(`<h1 id="_4-3-打印java数组" tabindex="-1">4.3 打印Java数组 <a class="header-anchor" href="#_4-3-打印java数组" aria-label="Permalink to &quot;4.3 打印Java数组&quot;">​</a></h1><p>“哥，<a href="https://tobebetterjavaer.com/array/array.html" target="_blank" rel="noreferrer">之前听你说，数组也是一个对象</a>，但 Java 中并未明确的定义这样一个类。”看来三妹有在用心地学习。</p><p>“是的，因此数组也就没有机会覆盖 <code>Object.toString()</code> 方法。如果尝试直接打印数组的话，输出的结果并不是我们预期的结果。”我接着三妹的话继续说。</p><p>“那怎么打印数组呢？”三妹心有灵犀地把今天的核心问题提了出来。</p><h3 id="为什么不能直接打印数组" tabindex="-1">为什么不能直接打印数组 <a class="header-anchor" href="#为什么不能直接打印数组" aria-label="Permalink to &quot;为什么不能直接打印数组&quot;">​</a></h3><p>“首先，我们来看一下，为什么不能直接打印数组，直接打印的话，会出现什么问题。”</p><p>来看这样一个例子。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">String [] cmowers = {&quot;沉默&quot;,&quot;王二&quot;,&quot;一枚有趣的程序员&quot;};</span></span>
<span class="line"><span style="color:#f6f6f4;">System.out.println(cmowers);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">String [] cmowers = {&quot;沉默&quot;,&quot;王二&quot;,&quot;一枚有趣的程序员&quot;};</span></span>
<span class="line"><span style="color:#24292e;">System.out.println(cmowers);</span></span></code></pre></div><p>程序打印的结果是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[Ljava.lang.String;@3d075dc0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[Ljava.lang.String;@3d075dc0</span></span></code></pre></div><p><code>[Ljava.lang.String;</code> 表示字符串数组的 Class 名，@ 后面的是十六进制的 hashCode——这样的打印结果太“人性化”了，一般人表示看不懂！为什么会这样显示呢？查看一下 <code>java.lang.Object</code> 类的 <code>toString()</code> 方法就明白了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getClass</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">@</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> Integer.</span><span style="color:#62E884;">toHexString</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">hashCode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> Integer.</span><span style="color:#6F42C1;">toHexString</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hashCode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再次证明，数组虽然没有显式定义成一个类，但它的确是一个对象，继承了祖先类 Object 的所有方法。</p><p>“哥，那为什么数组不单独定义一个类来表示呢？就像字符串 String 类那样呢？”三妹这个问题让人头大，但也好解释。</p><p>“一个合理的说法是 Java 将其隐藏了。假如真的存在这么一个类，就叫 Array.java 吧，我们假想一下它真实的样子，必须得有一个容器来存放数组的每一个元素，就像 String 类那样。”一边回答三妹，我一边打开了 String 类的源码。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">String</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> java.io.</span><span style="color:#97E1F1;font-style:italic;">Serializable</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Comparable</span><span style="color:#F6F6F4;">&lt;String&gt;, </span><span style="color:#97E1F1;font-style:italic;">CharSequence</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /** The value is used for character storage. */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> value[];</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;, </span><span style="color:#6F42C1;">CharSequence</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /** The value is used for character storage. */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> value[];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“最终还是要用类似一种数组的形式来存放数组的元素，对吧？这就变得很没有必要了，不妨就把数组当做是一个没有形体的对象吧！”</p><p>“好了，不讨论这个了。”我怕话题扯远了，扯到我自己也答不出来就尴尬了，赶紧把三妹的思路拽了回来。</p><h3 id="stream-流打印-java-数组" tabindex="-1">stream 流打印 Java 数组 <a class="header-anchor" href="#stream-流打印-java-数组" aria-label="Permalink to &quot;stream 流打印 Java 数组&quot;">​</a></h3><p>“我们来看第一种打印数组的方法，使用时髦一点的<a href="https://tobebetterjavaer.com/java8/stream.html" target="_blank" rel="noreferrer">Stream 流</a>。”</p><p>第一种形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">asList</span><span style="color:#F6F6F4;">(cmowers).</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(s </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(cmowers).</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s));</span></span></code></pre></div><p>第二种形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Stream.</span><span style="color:#62E884;">of</span><span style="color:#F6F6F4;">(cmowers).</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(cmowers).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>第三种形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">stream</span><span style="color:#F6F6F4;">(cmowers).</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(cmowers).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>打印的结果如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">沉默</span></span>
<span class="line"><span style="color:#f6f6f4;">王二</span></span>
<span class="line"><span style="color:#f6f6f4;">一枚有趣的程序员</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">沉默</span></span>
<span class="line"><span style="color:#24292e;">王二</span></span>
<span class="line"><span style="color:#24292e;">一枚有趣的程序员</span></span></code></pre></div><p>没错，这三种方式都可以轻松胜任本职工作，并且显得有点高大上，毕竟用到了 Stream，以及 <a href="https://tobebetterjavaer.com/java8/Lambda.html" target="_blank" rel="noreferrer">lambda 表达式</a>。</p><h3 id="for-循环打印-java-数组" tabindex="-1">for 循环打印 Java 数组 <a class="header-anchor" href="#for-循环打印-java-数组" aria-label="Permalink to &quot;for 循环打印 Java 数组&quot;">​</a></h3><p>“当然了，也可以使用传统的方式，for 循环。甚至 for-each 也行。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> cmowers.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(cmowers[i]);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> cmowers) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> cmowers.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(cmowers[i]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String s </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> cmowers) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="arrays-工具类打印-java-数组" tabindex="-1">Arrays 工具类打印 Java 数组 <a class="header-anchor" href="#arrays-工具类打印-java-数组" aria-label="Permalink to &quot;Arrays 工具类打印 Java 数组&quot;">​</a></h3><p>“哥，你难道忘了<a href="https://tobebetterjavaer.com/common-tool/arrays.html" target="_blank" rel="noreferrer">上一篇</a>在讲 Arrays 工具类的时候，提到过另外一种方法 <code>Arrays.toString()</code> 吗？”三妹看我一直说不到点子上，有点着急了。</p><p>“当然没有了，我认为 <code>Arrays.toString()</code> 是打印数组的最佳方式，没有之一。”我的情绪有点激动。</p><p><code>Arrays.toString()</code> 可以将任意类型的数组转成字符串，包括基本类型数组和引用类型数组。该方法有多种重载形式。</p><img src="`+o+'"><p>使用 <code>Arrays.toString()</code> 方法来打印数组再优雅不过了，就像，就像，就像蒙娜丽莎的微笑。</p><img src="'+l+`"><p>（三妹看到这么一副图的时候忍不住地笑了）</p><p>“三妹，你不要笑，来，怀揣着愉快的心情看一下代码示例。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> [] cmowers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(cmowers));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;"> [] cmowers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;一枚有趣的程序员&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(cmowers));</span></span></code></pre></div><p>程序打印结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[沉默, 王二, 一枚有趣的程序员]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[沉默, 王二, 一枚有趣的程序员]</span></span></code></pre></div><p>哇，打印格式不要太完美，不多不少！完全是我们预期的结果：<code>[]</code> 表明是一个数组，<code>,</code> 点和空格用来分割元素。</p><h3 id="arrays工具类打印二维数组" tabindex="-1">Arrays工具类打印二维数组 <a class="header-anchor" href="#arrays工具类打印二维数组" aria-label="Permalink to &quot;Arrays工具类打印二维数组&quot;">​</a></h3><p>“哥，那如果我想打印二维数组呢？”</p><p>“可以使用 <code>Arrays.deepToString()</code> 方法。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[][] deepArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[][] {{</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">}, {</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">}};</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">deepToString</span><span style="color:#F6F6F4;">(deepArray));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">String</span><span style="color:#24292E;">[][] deepArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[][] {{</span><span style="color:#032F62;">&quot;沉默&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王二&quot;</span><span style="color:#24292E;">}, {</span><span style="color:#032F62;">&quot;一枚有趣的程序员&quot;</span><span style="color:#24292E;">}};</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">deepToString</span><span style="color:#24292E;">(deepArray));</span></span></code></pre></div><p>打印结果如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[[沉默, 王二], [一枚有趣的程序员]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[[沉默, 王二], [一枚有趣的程序员]]</span></span></code></pre></div><h3 id="pojo-的打印规约" tabindex="-1">POJO 的打印规约 <a class="header-anchor" href="#pojo-的打印规约" aria-label="Permalink to &quot;POJO 的打印规约&quot;">​</a></h3><p>“说到打印，三妹，哥给你提醒一点。阿里巴巴的 Java 开发手册上有这样一条规约，你看。”</p><img src="`+e+'"><p>“什么是 POJO 呢，就是 Plain Ordinary Java Object 的缩写，一般在 Web 应用程序中建立一个数据库的映射对象时，我们称它为 POJO，这类对象不继承或不实现任何其它 Java 框架的类或接口。”</p><p>“对于这样的类，最好是重写一下它的 <code>toString()</code> 方法，方便查看这个对象到底包含了什么字段，好排查问题。”</p><p>“如果不重写的话，打印出来的 Java 对象就像直接打印数组的那样，一串谁也看不懂的字符序列。”</p><p>“可以借助 Intellij IDEA 生成重写的 <code>toString()</code> 方法，特别方便。”</p><p>“好的，哥，我记住了。以后遇到的话，我注意下。你去休息吧，我来敲一下你提到的这些代码，练一练。”</p><p>“OK，我走，我走。”</p><hr>',61),c=[r];function y(i,F,d,E,h,g){return a(),n("div",null,c)}const m=s(t,[["render",y]]);export{v as __pageData,m as default};
