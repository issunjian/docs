import{_ as s,o as a,c as n,V as o}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/python/python-09.md","filePath":"interview/backend/python/python-09.md"}'),l={name:"interview/backend/python/python-09.md"},p=o(`<h3 id="_1、什么是python中的猴子补丁" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E4%BB%80%E4%B9%88%E6%98%AFpython%E4%B8%AD%E7%9A%84%E7%8C%B4%E5%AD%90%E8%A1%A5%E4%B8%81" target="_blank" rel="noreferrer">1、什么是Python中的猴子补丁？</a> <a class="header-anchor" href="#_1、什么是python中的猴子补丁" aria-label="Permalink to &quot;[1、什么是Python中的猴子补丁？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#1什么是python中的猴子补丁)&quot;">​</a></h3><p>猴子补丁(monkey patching)，是指在运行时动态修改类或模块。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">from SomeOtherProduct.SomeModule import SomeClass</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">def speak(self):</span></span>
<span class="line"><span style="color:#f6f6f4;">    return &quot;Hello!&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">SomeClass.speak = speak</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">from SomeOtherProduct.SomeModule import SomeClass</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">def speak(self):</span></span>
<span class="line"><span style="color:#24292e;">    return &quot;Hello!&quot;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">SomeClass.speak = speak</span></span></code></pre></div><h3 id="_2、实现99乘法表-使用两种方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E5%AE%9E%E7%8E%B099%E4%B9%98%E6%B3%95%E8%A1%A8%E4%BD%BF%E7%94%A8%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">2、实现99乘法表（使用两种方法）</a> <a class="header-anchor" href="#_2、实现99乘法表-使用两种方法" aria-label="Permalink to &quot;[2、实现99乘法表（使用两种方法）](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#2实现99乘法表使用两种方法)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.join([</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\t</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.join([</span><span style="color:#DEE492;">&#39;</span><span style="color:#BF9EEE;">{}</span><span style="color:#E7EE98;">*</span><span style="color:#BF9EEE;">{}</span><span style="color:#E7EE98;">=</span><span style="color:#BF9EEE;">{}</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">.format(x,y,x</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">y) </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> x </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">range</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,y</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)]) </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> y </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">range</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">)]))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.join([</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.join([</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">*</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">=</span><span style="color:#005CC5;">{}</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">.format(x,y,x</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">y) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,y</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)]) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)]))</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">range</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">range</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,i</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#BF9EEE;">%s</span><span style="color:#E7EE98;">*</span><span style="color:#BF9EEE;">%s</span><span style="color:#E7EE98;">=</span><span style="color:#BF9EEE;">%s</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;">(i,j,i</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">j),</span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\t</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">:</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,i</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">*</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">=</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&#39;</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">(i,j,i</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">j),</span><span style="color:#E36209;">end</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\t</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="_3、什么是负索引" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E7%B4%A2%E5%BC%95" target="_blank" rel="noreferrer">3、什么是负索引？</a> <a class="header-anchor" href="#_3、什么是负索引" aria-label="Permalink to &quot;[3、什么是负索引？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#3什么是负索引)&quot;">​</a></h3><p>我们先创建这样一个列表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; mylist=[0,1,2,3,4,5,6,7,8]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; mylist=[0,1,2,3,4,5,6,7,8]</span></span></code></pre></div><p>负索引和正索引不同，它是从右边开始检索。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; mylist[-3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; mylist[-3]</span></span></code></pre></div><p>运行结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">6</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">6</span></span></code></pre></div><p>它也能用于列表中的切片：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; mylist[-6:-1]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; mylist[-6:-1]</span></span></code></pre></div><p>结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[3, 4, 5, 6, 7]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[3, 4, 5, 6, 7]</span></span></code></pre></div><h3 id="_4、实现一个装饰器-通过一次调用-使函数重复执行5次" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%A3%85%E9%A5%B0%E5%99%A8%E9%80%9A%E8%BF%87%E4%B8%80%E6%AC%A1%E8%B0%83%E7%94%A8%E4%BD%BF%E5%87%BD%E6%95%B0%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C5%E6%AC%A1" target="_blank" rel="noreferrer">4、实现一个装饰器，通过一次调用，使函数重复执行5次</a> <a class="header-anchor" href="#_4、实现一个装饰器-通过一次调用-使函数重复执行5次" aria-label="Permalink to &quot;[4、实现一个装饰器，通过一次调用，使函数重复执行5次](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#4实现一个装饰器通过一次调用使函数重复执行5次)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> functools </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> wraps</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dec</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#62E884;">@wraps</span><span style="color:#F6F6F4;">(func)</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">inner</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">,</span><span style="color:#F286C4;">**</span><span style="color:#FFB86C;font-style:italic;">kwargs</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F6F6F4;">result</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[func(</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">args,</span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;">kwargs) </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">range</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">)]</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> inner</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">@dec</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">y</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(add(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">from</span><span style="color:#24292E;"> functools </span><span style="color:#D73A49;">import</span><span style="color:#24292E;"> wraps</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dec</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#6F42C1;">@wraps</span><span style="color:#24292E;">(func)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inner</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#24292E;">result</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inner</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@dec</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(x,y):</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">y</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(add(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="_5、如何高效的找到redis中所有以felix开头的key" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E6%89%BE%E5%88%B0redis%E4%B8%AD%E6%89%80%E6%9C%89%E4%BB%A5felix%E5%BC%80%E5%A4%B4%E7%9A%84key" target="_blank" rel="noreferrer">5、如何高效的找到Redis中所有以felix开头的key</a> <a class="header-anchor" href="#_5、如何高效的找到redis中所有以felix开头的key" aria-label="Permalink to &quot;[5、如何高效的找到Redis中所有以felix开头的key](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#5如何高效的找到redis中所有以felix开头的key)&quot;">​</a></h3><p><strong>1、</strong> scan 0 match felixcount 5</p><p><strong>2、</strong> 表示从游标0开始查询felix开头的key，每次返回5条，但是这个5条不一定</p><h3 id="_6、列表中保留顺序和不保留顺序去重" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%88%97%E8%A1%A8%E4%B8%AD%E4%BF%9D%E7%95%99%E9%A1%BA%E5%BA%8F%E5%92%8C%E4%B8%8D%E4%BF%9D%E7%95%99%E9%A1%BA%E5%BA%8F%E5%8E%BB%E9%87%8D" target="_blank" rel="noreferrer">6、列表中保留顺序和不保留顺序去重</a> <a class="header-anchor" href="#_6、列表中保留顺序和不保留顺序去重" aria-label="Permalink to &quot;[6、列表中保留顺序和不保留顺序去重](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#6列表中保留顺序和不保留顺序去重)&quot;">​</a></h3><p><strong>不保留顺序</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">lis</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">list</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">set</span><span style="color:#F6F6F4;">(lis)))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lis</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">list</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(lis)))</span></span></code></pre></div><p><strong>保留顺序</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">lis</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[]</span></span>
<span class="line"><span style="color:#F6F6F4;">[T.append(i) </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> lis </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">not</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> T])</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(T)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;"># 或者</span></span>
<span class="line"><span style="color:#F6F6F4;">T</span><span style="color:#F286C4;">=</span><span style="color:#97E1F1;">sorted</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">set</span><span style="color:#F6F6F4;">(lis), </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">lis.index)</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(T)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">lis</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">T</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">[T.append(i) </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> lis </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">not</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> T])</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(T)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 或者</span></span>
<span class="line"><span style="color:#24292E;">T</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">sorted</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">set</span><span style="color:#24292E;">(lis), </span><span style="color:#E36209;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">lis.index)</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(T)</span></span></code></pre></div><h3 id="_7、python的底层网络交互模块有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7python%E7%9A%84%E5%BA%95%E5%B1%82%E7%BD%91%E7%BB%9C%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%9D%97%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">7、python的底层网络交互模块有哪些</a> <a class="header-anchor" href="#_7、python的底层网络交互模块有哪些" aria-label="Permalink to &quot;[7、python的底层网络交互模块有哪些](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#7python的底层网络交互模块有哪些)&quot;">​</a></h3><p>socket，urllib，requests，pycurl</p><h3 id="_8、一个大小为100g的文件etl-log-txt-要读取文件的内容-写出具体过程代码" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E4%B8%80%E4%B8%AA%E5%A4%A7%E5%B0%8F%E4%B8%BA100g%E7%9A%84%E6%96%87%E4%BB%B6etl_logtxt%E8%A6%81%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%E5%86%99%E5%87%BA%E5%85%B7%E4%BD%93%E8%BF%87%E7%A8%8B%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">8、一个大小为100G的文件etl_log.txt，要读取文件的内容，写出具体过程代码</a> <a class="header-anchor" href="#_8、一个大小为100g的文件etl-log-txt-要读取文件的内容-写出具体过程代码" aria-label="Permalink to &quot;[8、一个大小为100G的文件etl_log.txt，要读取文件的内容，写出具体过程代码](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#8一个大小为100g的文件etl_logtxt要读取文件的内容写出具体过程代码)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">with</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">etl_log.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">r</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">encoding</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">utf8</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> f:</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> line </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> f:</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(line,</span><span style="color:#FFB86C;font-style:italic;">end</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&#39;&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">with</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;etl_log.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">encoding</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;utf8&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> line </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> f:</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(line,</span><span style="color:#E36209;">end</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_9、axios的作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9axios%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">9、axios的作用</a> <a class="header-anchor" href="#_9、axios的作用" aria-label="Permalink to &quot;[9、axios的作用](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#9axios的作用)&quot;">​</a></h3><p><strong>axios是基于promise的用于浏览器和nodejs的HTTP客户端，本身有以下特征：</strong></p><p><strong>1、</strong> 从浏览器中创建XMLHttpRequest；</p><p><strong>2、</strong> 从nodejs发出http请求</p><p><strong>3、</strong> 支持promiseAPI</p><p><strong>4、</strong> 拦截 请求和响应</p><p><strong>5、</strong> 转换请求和响应数据</p><p><strong>6、</strong> 取消请求</p><p><strong>7、</strong> 自动转换JSON数据</p><p><strong>8、</strong> 客户端支持防止CSRF/XSRF攻击</p><h3 id="_10、解释一下python中的-和-运算符" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8Bpython%E4%B8%AD%E7%9A%84//%25%E5%92%8C-**-%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">10、解释一下Python中的//，%和 ** 运算符</a> <a class="header-anchor" href="#_10、解释一下python中的-和-运算符" aria-label="Permalink to &quot;[10、解释一下Python中的//，%和 ** 运算符](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题2021年，常见面试题及答案汇总.md#10解释一下python中的//%和-**-运算符)&quot;">​</a></h3><p>//运算符执行地板除法（向下取整除），它会返回整除结果的整数部分。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; 7//2</span></span>
<span class="line"><span style="color:#f6f6f4;">3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; 7//2</span></span>
<span class="line"><span style="color:#24292e;">3</span></span></code></pre></div><p>这里整除后会返回3.5。</p><p>同样地，<strong>执行取幂运算。a</strong>b会返回a的b次方。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; 2**10</span></span>
<span class="line"><span style="color:#f6f6f4;">1024</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; 2**10</span></span>
<span class="line"><span style="color:#24292e;">1024</span></span></code></pre></div><p>最后，%执行取模运算，返回除法的余数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; 13%7</span></span>
<span class="line"><span style="color:#f6f6f4;">6</span></span>
<span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; 3.5%1.5</span></span>
<span class="line"><span style="color:#f6f6f4;">0.5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; 13%7</span></span>
<span class="line"><span style="color:#24292e;">6</span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;&gt; 3.5%1.5</span></span>
<span class="line"><span style="color:#24292e;">0.5</span></span></code></pre></div><h3 id="_11、列举常见的关系型数据库和非关系型数据库。" tabindex="-1">11、列举常见的关系型数据库和非关系型数据库。 <a class="header-anchor" href="#_11、列举常见的关系型数据库和非关系型数据库。" aria-label="Permalink to &quot;11、列举常见的关系型数据库和非关系型数据库。&quot;">​</a></h3><h3 id="_12、css如何隐藏一个元素" tabindex="-1">12、css如何隐藏一个元素 <a class="header-anchor" href="#_12、css如何隐藏一个元素" aria-label="Permalink to &quot;12、css如何隐藏一个元素&quot;">​</a></h3><h3 id="_13、如何基于redis实现发布和订阅" tabindex="-1">13、如何基于Redis实现发布和订阅 <a class="header-anchor" href="#_13、如何基于redis实现发布和订阅" aria-label="Permalink to &quot;13、如何基于Redis实现发布和订阅&quot;">​</a></h3><h3 id="_14、sys-path-append-xxx-的作用" tabindex="-1">14、sys.path.append(&#39;xxx&#39;)的作用 <a class="header-anchor" href="#_14、sys-path-append-xxx-的作用" aria-label="Permalink to &quot;14、sys.path.append(&#39;xxx&#39;)的作用&quot;">​</a></h3><h3 id="_15、怎样将字符串转换为小写" tabindex="-1">15、怎样将字符串转换为小写？ <a class="header-anchor" href="#_15、怎样将字符串转换为小写" aria-label="Permalink to &quot;15、怎样将字符串转换为小写？&quot;">​</a></h3><h3 id="_16、解释一下python中的赋值运算符" tabindex="-1">16、解释一下Python中的赋值运算符 <a class="header-anchor" href="#_16、解释一下python中的赋值运算符" aria-label="Permalink to &quot;16、解释一下Python中的赋值运算符&quot;">​</a></h3><h3 id="_17、re的match和search的区别" tabindex="-1">17、re的match和search的区别 <a class="header-anchor" href="#_17、re的match和search的区别" aria-label="Permalink to &quot;17、re的match和search的区别&quot;">​</a></h3><h3 id="_18、举例说明python中的range函数" tabindex="-1">18、举例说明Python中的range函数? <a class="header-anchor" href="#_18、举例说明python中的range函数" aria-label="Permalink to &quot;18、举例说明Python中的range函数?&quot;">​</a></h3><h3 id="_19、输入一个字符串-输出该字符串的字符的所有组合。如输入-abc-输出a-b-c-ab-ac-bc-abc" tabindex="-1">19、输入一个字符串，输出该字符串的字符的所有组合。如输入&#39;abc&#39;,输出a,b,c,ab,ac,bc,abc. <a class="header-anchor" href="#_19、输入一个字符串-输出该字符串的字符的所有组合。如输入-abc-输出a-b-c-ab-ac-bc-abc" aria-label="Permalink to &quot;19、输入一个字符串，输出该字符串的字符的所有组合。如输入&#39;abc&#39;,输出a,b,c,ab,ac,bc,abc.&quot;">​</a></h3><h3 id="_20、解释-args和-kwargs" tabindex="-1">20、解释*args和**kwargs？ <a class="header-anchor" href="#_20、解释-args和-kwargs" aria-label="Permalink to &quot;20、解释*args和**kwargs？&quot;">​</a></h3><h3 id="_21、实现一个单例模式。-尽可能多的方法" tabindex="-1">21、实现一个单例模式。(尽可能多的方法) <a class="header-anchor" href="#_21、实现一个单例模式。-尽可能多的方法" aria-label="Permalink to &quot;21、实现一个单例模式。(尽可能多的方法)&quot;">​</a></h3><h3 id="_22、在python中如何实现多线程" tabindex="-1">22、在Python中如何实现多线程？ <a class="header-anchor" href="#_22、在python中如何实现多线程" aria-label="Permalink to &quot;22、在Python中如何实现多线程？&quot;">​</a></h3><h3 id="_23、简述jsonp及其原理" tabindex="-1">23、简述jsonp及其原理 <a class="header-anchor" href="#_23、简述jsonp及其原理" aria-label="Permalink to &quot;23、简述jsonp及其原理&quot;">​</a></h3><h3 id="_24、什么是flask" tabindex="-1">24、什么是Flask？ <a class="header-anchor" href="#_24、什么是flask" aria-label="Permalink to &quot;24、什么是Flask？&quot;">​</a></h3><h3 id="_25、解释python中reduce函数的用法" tabindex="-1">25、解释Python中reduce函数的用法？ <a class="header-anchor" href="#_25、解释python中reduce函数的用法" aria-label="Permalink to &quot;25、解释Python中reduce函数的用法？&quot;">​</a></h3><h3 id="_26、深拷贝和浅拷贝之间的区别是什么" tabindex="-1">26、深拷贝和浅拷贝之间的区别是什么？ <a class="header-anchor" href="#_26、深拷贝和浅拷贝之间的区别是什么" aria-label="Permalink to &quot;26、深拷贝和浅拷贝之间的区别是什么？&quot;">​</a></h3><h3 id="_27、在什么情况下y-x-x-y-会成立" tabindex="-1">27、在什么情况下y!=x-(x-y)会成立？ <a class="header-anchor" href="#_27、在什么情况下y-x-x-y-会成立" aria-label="Permalink to &quot;27、在什么情况下y!=x-(x-y)会成立？&quot;">​</a></h3><h3 id="_28、一个数如果恰好等于它的因子之和-这个数就称为-完数-比如6-1-2-3-编程找出1000以内的所有的完数。" tabindex="-1">28、一个数如果恰好等于它的因子之和，这个数就称为‘完数’，比如6=1+2+3，编程找出1000以内的所有的完数。 <a class="header-anchor" href="#_28、一个数如果恰好等于它的因子之和-这个数就称为-完数-比如6-1-2-3-编程找出1000以内的所有的完数。" aria-label="Permalink to &quot;28、一个数如果恰好等于它的因子之和，这个数就称为‘完数’，比如6=1+2+3，编程找出1000以内的所有的完数。&quot;">​</a></h3><h3 id="_29、python中如何使用进程池和线程池" tabindex="-1">29、python中如何使用进程池和线程池 <a class="header-anchor" href="#_29、python中如何使用进程池和线程池" aria-label="Permalink to &quot;29、python中如何使用进程池和线程池&quot;">​</a></h3><h3 id="_30、编写程序-计算文件中单词的出现频率" tabindex="-1">30、编写程序，计算文件中单词的出现频率 <a class="header-anchor" href="#_30、编写程序-计算文件中单词的出现频率" aria-label="Permalink to &quot;30、编写程序，计算文件中单词的出现频率&quot;">​</a></h3>`,69),e=[p];function t(r,c,y,i,E,F){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{d as __pageData,u as default};
