import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/paths-files-20230404181334.2100477f.png",o="/docs/assets/paths-files-20230404190926.a1320736.png",g=JSON.parse('{"title":"聊聊 Java NIO 中的Paths 和 Files","description":"Paths 和 Files 是 Java NIO 中的两个核心类。Paths 提供了一系列静态方法，用于操作路径（Path 对象）。Files 类提供了丰富的文件操作方法，如文件的创建、删除、移动、复制、读取和写入等。Files 还支持文件遍历（如 walkFileTree 方法），可以处理文件目录树。","frontmatter":{"title":"聊聊 Java NIO 中的Paths 和 Files","shortTitle":"Paths和Files","category":["Java核心"],"tag":["Java IO"],"description":"Paths 和 Files 是 Java NIO 中的两个核心类。Paths 提供了一系列静态方法，用于操作路径（Path 对象）。Files 类提供了丰富的文件操作方法，如文件的创建、删除、移动、复制、读取和写入等。Files 还支持文件遍历（如 walkFileTree 方法），可以处理文件目录树。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"Java,nio,paths,files,path"}]]},"headers":[],"relativePath":"backend/tobetter/nio/paths-files.md","filePath":"backend/tobetter/nio/paths-files.md"}'),e={name:"backend/tobetter/nio/paths-files.md"},t=l(`<h1 id="_12-4-paths-和-files" tabindex="-1">12.4 Paths 和 Files <a class="header-anchor" href="#_12-4-paths-和-files" aria-label="Permalink to &quot;12.4 Paths 和 Files&quot;">​</a></h1><p>Paths 和 Files 在 Java 7 的时候引入，作为对 <a href="https://tobebetterjavaer.com/io/file-path.html" target="_blank" rel="noreferrer"><code>java.io.File</code> 类</a>的补充和改进。</p><h3 id="paths-类" tabindex="-1">Paths 类 <a class="header-anchor" href="#paths-类" aria-label="Permalink to &quot;Paths 类&quot;">​</a></h3><p>Paths 类主要用于操作文件和目录路径。它提供了一些静态方法，用于创建<code>java.nio.file.Path</code>实例，代表文件系统中的路径。</p><p>下面是 Paths 的一个示例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个Path实例，表示当前目录下的一个文件</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">example.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个绝对路径</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> absolutePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/home/user/example.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个Path实例，表示当前目录下的一个文件</span></span>
<span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;example.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个绝对路径</span></span>
<span class="line"><span style="color:#24292E;">Path absolutePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/home/user/example.txt&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>java.nio.file.Path 接口在 Java NIO.2 中代表一个文件系统中的路径。它提供了一系列方法来操作和查询路径。</p><img src="`+p+`"><p>下面是 Paths 和 Path 一起使用的实例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">docs/配套教程.md</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 获取文件名</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">File name: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">getFileName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 获取父目录</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Parent: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">getParent</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 获取根目录</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Root: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">getRoot</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将路径与另一个路径结合</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> newPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">config/app.properties</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Resolved path: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> newPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 简化路径</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> normalizedPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newPath.</span><span style="color:#62E884;">normalize</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Normalized path: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> normalizedPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 将相对路径转换为绝对路径</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> absolutePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> path.</span><span style="color:#62E884;">toAbsolutePath</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Absolute path: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> absolutePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 计算两个路径之间的相对路径</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> basePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/docs/</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> targetPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">/docs/imgs/itwanger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> relativePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> basePath.</span><span style="color:#62E884;">relativize</span><span style="color:#F6F6F4;">(targetPath);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Relative path: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> relativePath);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;docs/配套教程.md&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取文件名</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File name: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">getFileName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取父目录</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Parent: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">getParent</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取根目录</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Root: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">getRoot</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将路径与另一个路径结合</span></span>
<span class="line"><span style="color:#24292E;">Path newPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;config/app.properties&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Resolved path: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> newPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 简化路径</span></span>
<span class="line"><span style="color:#24292E;">Path normalizedPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newPath.</span><span style="color:#6F42C1;">normalize</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Normalized path: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> normalizedPath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将相对路径转换为绝对路径</span></span>
<span class="line"><span style="color:#24292E;">Path absolutePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> path.</span><span style="color:#6F42C1;">toAbsolutePath</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Absolute path: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> absolutePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 计算两个路径之间的相对路径</span></span>
<span class="line"><span style="color:#24292E;">Path basePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/docs/&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Path targetPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/docs/imgs/itwanger&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Path relativePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> basePath.</span><span style="color:#6F42C1;">relativize</span><span style="color:#24292E;">(targetPath);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Relative path: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> relativePath);</span></span></code></pre></div><h3 id="files-类" tabindex="-1">Files 类 <a class="header-anchor" href="#files-类" aria-label="Permalink to &quot;Files 类&quot;">​</a></h3><p><code>java.nio.file.Files</code>类提供了大量静态方法，用于处理文件系统中的文件和目录。这些方法包括文件的创建、删除、复制、移动等操作，以及读取和设置文件属性。</p><p>下面展示一个 Files 和 Paths 一起使用的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 创建一个Path实例</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs/javabetter/itwanger4.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建一个新文件</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">createFile</span><span style="color:#F6F6F4;">(path);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 检查文件是否存在</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> exists </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Files.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">(path);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">File exists: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> exists);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 删除文件</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(path);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建一个Path实例</span></span>
<span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs/javabetter/itwanger4.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个新文件</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">createFile</span><span style="color:#24292E;">(path);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 检查文件是否存在</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> exists </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File exists: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> exists);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除文件</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(path);</span></span></code></pre></div><p>以下是一些常用方法及其示例：</p><p>1、<code>exists(Path path, LinkOption... options)</code>：检查文件或目录是否存在。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> exists </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Files.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">(path);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">File exists: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> exists);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> exists </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">(path);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;File exists: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> exists);</span></span></code></pre></div><p>LinkOption 是一个枚举类，它定义了如何处理文件系统链接的选项。它位于 java.nio.file 包中。LinkOption 主要在与文件或目录的路径操作相关的方法中使用，以控制这些方法如何处理符号链接。符号链接是一种特殊类型的文件，它在 Unix 和类 Unix 系统（如 Linux 和 macOS）上很常见。在 Windows 上，类似的概念被称为快捷方式。</p><p>2、<code>createFile(Path path, FileAttribute&lt;?&gt;... attrs)</code>：创建一个新的空文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> newPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">newFile.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">createFile</span><span style="color:#F6F6F4;">(newPath);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path newPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;newFile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">createFile</span><span style="color:#24292E;">(newPath);</span></span></code></pre></div><p>FileAttribute 是一个泛型接口，用于处理各种不同类型的属性。在使用 FileAttribute 时，你需要为其提供一个特定的实现。<code>java.nio.file.attribute</code> 包中的 PosixFileAttributes 类提供了 POSIX（Portable Operating System Interface，定义了许多与文件系统相关的操作，包括文件和目录的创建、删除、读取和修改。）文件属性的实现。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fileWithPermissions.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;PosixFilePermission&gt; permissions </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> PosixFilePermissions.</span><span style="color:#62E884;">fromString</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">rw-r-----</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileAttribute</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;PosixFilePermission&gt;&gt; fileAttribute </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> PosixFilePermissions.</span><span style="color:#62E884;">asFileAttribute</span><span style="color:#F6F6F4;">(permissions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">createFile</span><span style="color:#F6F6F4;">(path, fileAttribute);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fileWithPermissions.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Set&lt;</span><span style="color:#D73A49;">PosixFilePermission</span><span style="color:#24292E;">&gt; permissions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PosixFilePermissions.</span><span style="color:#6F42C1;">fromString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rw-r-----&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">FileAttribute&lt;Set&lt;</span><span style="color:#D73A49;">PosixFilePermission</span><span style="color:#24292E;">&gt;&gt; fileAttribute </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PosixFilePermissions.</span><span style="color:#6F42C1;">asFileAttribute</span><span style="color:#24292E;">(permissions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">createFile</span><span style="color:#24292E;">(path, fileAttribute);</span></span></code></pre></div><p>PosixFileAttributes 接口提供了获取 POSIX 文件属性的方法，如文件所有者、文件所属的组以及文件的访问权限。以上示例会创建一个读写属性的文件。</p><p>3、<code>createDirectory(Path dir, FileAttribute&lt;?&gt;... attrs)</code>：创建一个新的目录。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> newDir </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">newDirectory</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">createDirectory</span><span style="color:#F6F6F4;">(newDir);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path newDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;newDirectory&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">createDirectory</span><span style="color:#24292E;">(newDir);</span></span></code></pre></div><p>4、<code>delete(Path path)</code>：删除文件或目录。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> pathToDelete </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fileToDelete.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(pathToDelete);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path pathToDelete </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fileToDelete.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(pathToDelete);</span></span></code></pre></div><p>5、<code>copy(Path source, Path target, CopyOption... options)</code>：复制文件或目录。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> sourcePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sourceFile.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> targetPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">targetFile.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">copy</span><span style="color:#F6F6F4;">(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path sourcePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sourceFile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Path targetPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;targetFile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);</span></span></code></pre></div><p>在 Java NIO 中，有两个实现了 CopyOption 接口的枚举类：StandardCopyOption 和 LinkOption。</p><p>StandardCopyOption 枚举类提供了以下两个选项：</p><ul><li>REPLACE_EXISTING：如果目标文件已经存在，该选项会使 <code>Files.copy()</code> 方法替换目标文件。如果不指定此选项，<code>Files.copy()</code> 方法在目标文件已存在时将抛出 FileAlreadyExistsException。</li><li>COPY_ATTRIBUTES：此选项表示在复制文件时，尽可能地复制文件的属性（如文件时间戳、权限等）。如果不指定此选项，那么目标文件将具有默认的属性。</li></ul><p>6、<code>move(Path source, Path target, CopyOption... options)</code>：移动或重命名文件或目录。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> sourcePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sourceFile.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> targetPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">targetFile.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">move</span><span style="color:#F6F6F4;">(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path sourcePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sourceFile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Path targetPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;targetFile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">move</span><span style="color:#24292E;">(sourcePath, targetPath, StandardCopyOption.REPLACE_EXISTING);</span></span></code></pre></div><p>7、<code>readAllLines(Path path, Charset cs)</code>：读取文件的所有行到一个字符串列表。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; lines </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Files.</span><span style="color:#62E884;">readAllLines</span><span style="color:#F6F6F4;">(path, StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="color:#F6F6F4;">lines.</span><span style="color:#62E884;">forEach</span><span style="color:#F6F6F4;">(System.out</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">println);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lines </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">readAllLines</span><span style="color:#24292E;">(path, StandardCharsets.UTF_8);</span></span>
<span class="line"><span style="color:#24292E;">lines.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(System.out</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">println);</span></span></code></pre></div><p>8、<code>write(Path path, Iterable&lt;? extends CharSequence&gt; lines, Charset cs, OpenOption... options)</code>：将字符串列表写入文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;String&gt; lines </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">asList</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二 1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二 2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二 3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Files.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(path, lines, StandardCharsets.UTF_8);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lines </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二 1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二 2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二 3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Files.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(path, lines, StandardCharsets.UTF_8);</span></span></code></pre></div><p>OpenOption 是 Java NIO 中一个用于配置文件操作的接口。它提供了在使用 <code>Files.newByteChannel()</code>、<code>Files.newInputStream()</code>、<code>Files.newOutputStream()</code>、<code>AsynchronousFileChannel.open()</code> 和 <code>FileChannel.open()</code> 方法时定制行为的选项。</p><p>在 Java NIO 中，有两个实现了 OpenOption 接口的枚举类：StandardOpenOption 和 LinkOption。</p><p>StandardOpenOption 枚举类提供了以下几个选项：</p><ul><li>READ：以读取模式打开文件。</li><li>WRITE：以写入模式打开文件。</li><li>APPEND：以追加模式打开文件。</li><li>TRUNCATE_EXISTING：在打开文件时，截断文件的内容，使其长度为 0。仅适用于 WRITE 或 APPEND 模式。</li><li>CREATE：当文件不存在时创建文件。如果文件已存在，则打开文件。</li><li>CREATE_NEW：当文件不存在时创建文件。如果文件已存在，抛出 FileAlreadyExistsException。</li><li>DELETE_ON_CLOSE：在关闭通道时删除文件。</li><li>SPARSE：提示文件系统创建一个稀疏文件。</li><li>SYNC：要求每次更新文件的内容或元数据时都进行同步。</li><li>DSYNC：要求每次更新文件内容时都进行同步。</li></ul><p>8、<code>newBufferedReader(Path path, Charset cs) 和 newBufferedWriter(Path path, Charset cs, OpenOption... options)</code>：创建 BufferedReader 和 BufferedWriter 对象以读取和写入文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> path </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">file.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Read file</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> reader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Files.</span><span style="color:#62E884;">newBufferedReader</span><span style="color:#F6F6F4;">(path, StandardCharsets.UTF_8)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reader.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(line);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Write file</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> outputPath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">outputFile.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> writer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Files.</span><span style="color:#62E884;">newBufferedWriter</span><span style="color:#F6F6F4;">(outputPath, StandardCharsets.UTF_8)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    writer.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;file.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Read file</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (BufferedReader reader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">newBufferedReader</span><span style="color:#24292E;">(path, StandardCharsets.UTF_8)) {</span></span>
<span class="line"><span style="color:#24292E;">    String line;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reader.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(line);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Write file</span></span>
<span class="line"><span style="color:#24292E;">Path outputPath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;outputFile.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (BufferedWriter writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Files.</span><span style="color:#6F42C1;">newBufferedWriter</span><span style="color:#24292E;">(outputPath, StandardCharsets.UTF_8)) {</span></span>
<span class="line"><span style="color:#24292E;">    writer.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="files-walkfiletree-静态方法" tabindex="-1">Files.walkFileTree() 静态方法 <a class="header-anchor" href="#files-walkfiletree-静态方法" aria-label="Permalink to &quot;Files.walkFileTree() 静态方法&quot;">​</a></h4><p>这个方法可以递归地访问目录结构中的所有文件和目录，并允许您对这些文件和目录执行自定义操作。使用 walkFileTree 方法时，需要提供一个起始路径（起始目录）和一个实现了 FileVisitor 接口的对象。FileVisitor 接口包含四个方法，它们在遍历过程中的不同阶段被调用：</p><ul><li>preVisitDirectory：在访问目录之前调用。</li><li>postVisitDirectory：在访问目录之后调用。</li><li>visitFile：在访问文件时调用。</li><li>visitFileFailed：在访问文件失败时调用。</li></ul><p>来看下面这个示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">WalkFileTreeExample</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> startingDir </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">docs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">MyFileVisitor</span><span style="color:#F6F6F4;"> fileVisitor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyFileVisitor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            Files.</span><span style="color:#62E884;">walkFileTree</span><span style="color:#F6F6F4;">(startingDir, fileVisitor);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">MyFileVisitor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SimpleFileVisitor</span><span style="color:#F6F6F4;">&lt;Path&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FileVisitResult</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">preVisitDirectory</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">dir</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">BasicFileAttributes</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">attrs</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">准备访问目录: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> dir);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FileVisitResult</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">postVisitDirectory</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">dir</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">exc</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">正在访问目录: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> dir);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FileVisitResult</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">visitFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">file</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">BasicFileAttributes</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">attrs</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">访问文件: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> file);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FileVisitResult</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">visitFileFailed</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">file</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">exc</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.err.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">访问文件失败: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> file);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WalkFileTreeExample</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Path startingDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;docs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        MyFileVisitor fileVisitor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyFileVisitor</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Files.</span><span style="color:#6F42C1;">walkFileTree</span><span style="color:#24292E;">(startingDir, fileVisitor);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyFileVisitor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleFileVisitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Path</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> FileVisitResult </span><span style="color:#6F42C1;">preVisitDirectory</span><span style="color:#24292E;">(Path </span><span style="color:#E36209;">dir</span><span style="color:#24292E;">, BasicFileAttributes </span><span style="color:#E36209;">attrs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;准备访问目录: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dir);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> FileVisitResult </span><span style="color:#6F42C1;">postVisitDirectory</span><span style="color:#24292E;">(Path </span><span style="color:#E36209;">dir</span><span style="color:#24292E;">, IOException </span><span style="color:#E36209;">exc</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;正在访问目录: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> dir);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> FileVisitResult </span><span style="color:#6F42C1;">visitFile</span><span style="color:#24292E;">(Path </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, BasicFileAttributes </span><span style="color:#E36209;">attrs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;访问文件: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> file);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> FileVisitResult </span><span style="color:#6F42C1;">visitFileFailed</span><span style="color:#24292E;">(Path </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, IOException </span><span style="color:#E36209;">exc</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            System.err.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;访问文件失败: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> file);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>运行结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">准备访问目录: docs</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/安装环境.md</span></span>
<span class="line"><span style="color:#f6f6f4;">准备访问目录: docs/imgs</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/init_03.jpg</span></span>
<span class="line"><span style="color:#f6f6f4;">准备访问目录: docs/imgs/itwanger</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/itwanger/tongzhishu.jpeg</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/itwanger/tongzhishu1.jpeg</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/itwanger/tongzhishu1.pdf</span></span>
<span class="line"><span style="color:#f6f6f4;">正在访问目录: docs/imgs/itwanger</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/init_02.jpg</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/init_00.jpg</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/init_01.jpg</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/imgs/init_04.jpg</span></span>
<span class="line"><span style="color:#f6f6f4;">正在访问目录: docs/imgs</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/服务器启动教程.md</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/配套教程.md</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/约定.md</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/本地开发环境配置教程.md</span></span>
<span class="line"><span style="color:#f6f6f4;">访问文件: docs/前端工程结构说明.md</span></span>
<span class="line"><span style="color:#f6f6f4;">正在访问目录: docs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">准备访问目录: docs</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/安装环境.md</span></span>
<span class="line"><span style="color:#24292e;">准备访问目录: docs/imgs</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/init_03.jpg</span></span>
<span class="line"><span style="color:#24292e;">准备访问目录: docs/imgs/itwanger</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/itwanger/tongzhishu.jpeg</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/itwanger/tongzhishu1.jpeg</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/itwanger/tongzhishu1.pdf</span></span>
<span class="line"><span style="color:#24292e;">正在访问目录: docs/imgs/itwanger</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/init_02.jpg</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/init_00.jpg</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/init_01.jpg</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/imgs/init_04.jpg</span></span>
<span class="line"><span style="color:#24292e;">正在访问目录: docs/imgs</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/服务器启动教程.md</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/配套教程.md</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/约定.md</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/本地开发环境配置教程.md</span></span>
<span class="line"><span style="color:#24292e;">访问文件: docs/前端工程结构说明.md</span></span>
<span class="line"><span style="color:#24292e;">正在访问目录: docs</span></span></code></pre></div><p>在这个示例中，我们创建了一个名为 MyFileVisitor 的自定义 FileVisitor 类，它扩展了 SimpleFileVisitor 类。SimpleFileVisitor 是 FileVisitor 接口的一个实现，它提供了一些默认的行为。我们可以覆盖 SimpleFileVisitor 中的方法以实现自己的逻辑。在这个例子中，我们只是打印出了访问的文件和目录。然后，我们使用 Files.walkFileTree 方法遍历文件树。这个方法会遍历整个目录结构，并调用 MyFileVisitor 中的相应方法。</p><p>其中，FileVisitResult 枚举包含以下四个选项：</p><ul><li>CONTINUE ： 继续</li><li>TERMINATE ： 终止</li><li>SKIP_SIBLINGS ： 跳过兄弟节点，然后继续</li><li>SKIP_SUBTREE ： 跳过子树（不访问此目录的条目），然后继续，仅在 preVisitDirectory 方法返回时才有意义，除此以外和 CONTINUE 相同。</li></ul><h4 id="搜索文件" tabindex="-1">搜索文件 <a class="header-anchor" href="#搜索文件" aria-label="Permalink to &quot;搜索文件&quot;">​</a></h4><p><code>walkFileTree()</code> 方法还可以用于搜索文件，下面这个例子扩展了 SimpleFileVisitor 来查找一个名为 itwanger.txt 的文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FindFileWithWalkFileTree</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> startingDir </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Paths.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">logs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> targetFileName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">itwanger.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FindFileVisitor</span><span style="color:#F6F6F4;"> findFileVisitor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FindFileVisitor</span><span style="color:#F6F6F4;">(targetFileName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            Files.</span><span style="color:#62E884;">walkFileTree</span><span style="color:#F6F6F4;">(startingDir, findFileVisitor);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (findFileVisitor.</span><span style="color:#62E884;">isFileFound</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">找到文件了: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> findFileVisitor.</span><span style="color:#62E884;">getFoundFilePath</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ooh，文件没找到</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">FindFileVisitor</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SimpleFileVisitor</span><span style="color:#F6F6F4;">&lt;Path&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> targetFileName;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> foundFilePath;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FindFileVisitor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">targetFileName</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.targetFileName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> targetFileName;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isFileFound</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> foundFilePath </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getFoundFilePath</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> foundFilePath;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FileVisitResult</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">visitFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Path</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">file</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">BasicFileAttributes</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">attrs</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> fileName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> file.</span><span style="color:#62E884;">getFileName</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fileName.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(targetFileName)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                foundFilePath </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> file;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> FileVisitResult.TERMINATE;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FindFileWithWalkFileTree</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Path startingDir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Paths.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;logs&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String targetFileName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;itwanger.txt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        FindFileVisitor findFileVisitor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FindFileVisitor</span><span style="color:#24292E;">(targetFileName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Files.</span><span style="color:#6F42C1;">walkFileTree</span><span style="color:#24292E;">(startingDir, findFileVisitor);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (findFileVisitor.</span><span style="color:#6F42C1;">isFileFound</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;找到文件了: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> findFileVisitor.</span><span style="color:#6F42C1;">getFoundFilePath</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ooh，文件没找到&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FindFileVisitor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleFileVisitor</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Path</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String targetFileName;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Path foundFilePath;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FindFileVisitor</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">targetFileName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.targetFileName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> targetFileName;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isFileFound</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> foundFilePath </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Path </span><span style="color:#6F42C1;">getFoundFilePath</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> foundFilePath;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> FileVisitResult </span><span style="color:#6F42C1;">visitFile</span><span style="color:#24292E;">(Path </span><span style="color:#E36209;">file</span><span style="color:#24292E;">, BasicFileAttributes </span><span style="color:#E36209;">attrs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">            String fileName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file.</span><span style="color:#6F42C1;">getFileName</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fileName.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(targetFileName)) {</span></span>
<span class="line"><span style="color:#24292E;">                foundFilePath </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> file;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> FileVisitResult.TERMINATE;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> FileVisitResult.CONTINUE;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在主方法中，我们使用 Files.walkFileTree 方法遍历文件树，并传递一个起始目录和 FindFileVisitor 实例。遍历完成后，我们检查是否找到了目标文件，如果找到了，就打印出它的路径。</p><p>搜索结果如下所示：</p><img src="`+o+'"><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>Paths 和 Files 是 Java NIO 中的两个核心类。Paths 提供了一系列静态方法，用于操作路径（Path 对象）。它可以将字符串或 URI 转换为 Path 对象，方便后续操作。Files 类提供了丰富的文件操作方法，如文件的创建、删除、移动、复制、读取和写入等。这些方法支持各种选项和属性，如覆盖、保留属性和符号链接处理。Files 还支持文件遍历（如 walkFileTree 方法），可以处理文件目录树。总之，Paths 和 Files 为文件和目录操作提供了简洁、高效的方法。</p>',62),c=[t];function r(F,y,i,E,h,d){return a(),n("div",null,c)}const f=s(e,[["render",r]]);export{g as __pageData,f as default};
