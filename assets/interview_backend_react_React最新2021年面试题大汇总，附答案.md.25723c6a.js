import{_ as a,o as s,c as e,V as n}from"./chunks/framework.c6d8cbec.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/react/React最新2021年面试题大汇总，附答案.md","filePath":"interview/backend/react/React最新2021年面试题大汇总，附答案.md"}'),t={name:"interview/backend/react/React最新2021年面试题大汇总，附答案.md"},o=n(`<h3 id="_1、你的接口请求一般放在哪个生命周期中" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1%E4%BD%A0%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82%E4%B8%80%E8%88%AC%E6%94%BE%E5%9C%A8%E5%93%AA%E4%B8%AA%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%B8%AD" target="_blank" rel="noreferrer">1、你的接口请求一般放在哪个生命周期中？</a> <a class="header-anchor" href="#_1、你的接口请求一般放在哪个生命周期中" aria-label="Permalink to &quot;[1、你的接口请求一般放在哪个生命周期中？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#1你的接口请求一般放在哪个生命周期中)&quot;">​</a></h3><p>接口请求一般放在<code>mounted</code>中，但需要注意的是服务端渲染时不支持mounted，需要放到<code>created</code>中。</p><h3 id="_2、如何在-redux-中定义-action" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E5%A6%82%E4%BD%95%E5%9C%A8-redux-%E4%B8%AD%E5%AE%9A%E4%B9%89-action" target="_blank" rel="noreferrer">2、如何在 Redux 中定义 Action？</a> <a class="header-anchor" href="#_2、如何在-redux-中定义-action" aria-label="Permalink to &quot;[2、如何在 Redux 中定义 Action？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#2如何在-redux-中定义-action)&quot;">​</a></h3><p>React 中的 Action 必须具有 type 属性，该属性指示正在执行的 ACTION 的类型。必须将它们定义为字符串常量，并且还可以向其添加更多的属性。在 Redux 中，action 被名为 Action Creators 的函数所创建。以下是 Action 和Action Creator 的示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function addTodo(text) {</span></span>
<span class="line"><span style="color:#f6f6f4;">       return {</span></span>
<span class="line"><span style="color:#f6f6f4;">                type: ADD_TODO,</span></span>
<span class="line"><span style="color:#f6f6f4;">                 text</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function addTodo(text) {</span></span>
<span class="line"><span style="color:#24292e;">       return {</span></span>
<span class="line"><span style="color:#24292e;">                type: ADD_TODO,</span></span>
<span class="line"><span style="color:#24292e;">                 text</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_3、如何在-react-中创建表单" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E5%A6%82%E4%BD%95%E5%9C%A8-react-%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%A1%A8%E5%8D%95" target="_blank" rel="noreferrer">3、如何在 React 中创建表单</a> <a class="header-anchor" href="#_3、如何在-react-中创建表单" aria-label="Permalink to &quot;[3、如何在 React 中创建表单](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#3如何在-react-中创建表单)&quot;">​</a></h3><p>React 表单类似于 HTML 表单。但是在 React 中，状态包含在组件的 state 属性中，并且只能通过 <code>setState()</code> 更新。因此元素不能直接更新它们的状态，它们的提交是由 JavaScript 函数处理的。此函数可以完全访问用户输入到表单的数据。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">handleSubmit(event) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    alert(&#39;A name was submitted: &#39; + this.state.value);</span></span>
<span class="line"><span style="color:#f6f6f4;">    event.preventDefault();</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">render() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    return (</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;form onSubmit={this.handleSubmit}&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">            &lt;label&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">                Name:</span></span>
<span class="line"><span style="color:#f6f6f4;">                &lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleSubmit} /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">            &lt;/label&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;/form&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    );</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">handleSubmit(event) {</span></span>
<span class="line"><span style="color:#24292e;">    alert(&#39;A name was submitted: &#39; + this.state.value);</span></span>
<span class="line"><span style="color:#24292e;">    event.preventDefault();</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">render() {</span></span>
<span class="line"><span style="color:#24292e;">    return (</span></span>
<span class="line"><span style="color:#24292e;">        &lt;form onSubmit={this.handleSubmit}&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;label&gt;</span></span>
<span class="line"><span style="color:#24292e;">                Name:</span></span>
<span class="line"><span style="color:#24292e;">                &lt;input type=&quot;text&quot; value={this.state.value} onChange={this.handleSubmit} /&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;/label&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;/form&gt;</span></span>
<span class="line"><span style="color:#24292e;">    );</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_4、你对-react-的-refs-有什么了解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E4%BD%A0%E5%AF%B9-react-%E7%9A%84-refs-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BA%86%E8%A7%A3" target="_blank" rel="noreferrer">4、你对 React 的 refs 有什么了解？</a> <a class="header-anchor" href="#_4、你对-react-的-refs-有什么了解" aria-label="Permalink to &quot;[4、你对 React 的 refs 有什么了解？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#4你对-react-的-refs-有什么了解)&quot;">​</a></h3><p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render() 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">class ReferenceDemo extends React.Component{</span></span>
<span class="line"><span style="color:#f6f6f4;">     display() {</span></span>
<span class="line"><span style="color:#f6f6f4;">         const name = this.inputDemo.value;</span></span>
<span class="line"><span style="color:#f6f6f4;">         document.getElementById(&#39;disp&#39;).innerHTML = name;</span></span>
<span class="line"><span style="color:#f6f6f4;">     }</span></span>
<span class="line"><span style="color:#f6f6f4;">render() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    return(</span></span>
<span class="line"><span style="color:#f6f6f4;">          &lt;div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">            Name: &lt;input type=&quot;text&quot; ref={input =&gt; this.inputDemo = input} /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">            &lt;button name=&quot;Click&quot; onClick={this.display}&gt;Click&lt;/button&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">            &lt;h2&gt;Hello &lt;span id=&quot;disp&quot;&gt;&lt;/span&gt; !!!&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">          &lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    );</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">class ReferenceDemo extends React.Component{</span></span>
<span class="line"><span style="color:#24292e;">     display() {</span></span>
<span class="line"><span style="color:#24292e;">         const name = this.inputDemo.value;</span></span>
<span class="line"><span style="color:#24292e;">         document.getElementById(&#39;disp&#39;).innerHTML = name;</span></span>
<span class="line"><span style="color:#24292e;">     }</span></span>
<span class="line"><span style="color:#24292e;">render() {</span></span>
<span class="line"><span style="color:#24292e;">    return(</span></span>
<span class="line"><span style="color:#24292e;">          &lt;div&gt;</span></span>
<span class="line"><span style="color:#24292e;">            Name: &lt;input type=&quot;text&quot; ref={input =&gt; this.inputDemo = input} /&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;button name=&quot;Click&quot; onClick={this.display}&gt;Click&lt;/button&gt;</span></span>
<span class="line"><span style="color:#24292e;">            &lt;h2&gt;Hello &lt;span id=&quot;disp&quot;&gt;&lt;/span&gt; !!!&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#24292e;">          &lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">    );</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;"> }</span></span></code></pre></div><h3 id="_5、我现在有一个button要用react在上面绑定点击事件要怎么做" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E6%88%91%E7%8E%B0%E5%9C%A8%E6%9C%89%E4%B8%80%E4%B8%AAbutton%E8%A6%81%E7%94%A8react%E5%9C%A8%E4%B8%8A%E9%9D%A2%E7%BB%91%E5%AE%9A%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E8%A6%81%E6%80%8E%E4%B9%88%E5%81%9A" target="_blank" rel="noreferrer">5、我现在有一个button要用react在上面绑定点击事件要怎么做</a> <a class="header-anchor" href="#_5、我现在有一个button要用react在上面绑定点击事件要怎么做" aria-label="Permalink to &quot;[5、我现在有一个button要用react在上面绑定点击事件要怎么做](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#5我现在有一个button要用react在上面绑定点击事件要怎么做)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">class Demo {</span></span>
<span class="line"><span style="color:#f6f6f4;">  render() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    return &lt;button onClick={(e) =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">      alert(&#39;我点击了按钮&#39;)</span></span>
<span class="line"><span style="color:#f6f6f4;">    }}&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">      按钮</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;/button&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">class Demo {</span></span>
<span class="line"><span style="color:#24292e;">  render() {</span></span>
<span class="line"><span style="color:#24292e;">    return &lt;button onClick={(e) =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">      alert(&#39;我点击了按钮&#39;)</span></span>
<span class="line"><span style="color:#24292e;">    }}&gt;</span></span>
<span class="line"><span style="color:#24292e;">      按钮</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/button&gt;</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>你觉得你这样设置点击事件会有什么问题吗</p><p>由于<code>onClick</code>使用的是匿名函数所有每次重渲染的时候会把该<code>onClick</code>当做一个新的prop来处理会将内部缓存的<code>onClick</code>事件进行重新赋值所以相对直接使用函数来说可能有一点的性能下降</p><p>修改</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">class Demo {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  onClick = (e) =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">    alert(&#39;我点击了按钮&#39;)</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  render() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    return &lt;button onClick={this.onClick}&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">      按钮</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;/button&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">class Demo {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  onClick = (e) =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">    alert(&#39;我点击了按钮&#39;)</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  render() {</span></span>
<span class="line"><span style="color:#24292e;">    return &lt;button onClick={this.onClick}&gt;</span></span>
<span class="line"><span style="color:#24292e;">      按钮</span></span>
<span class="line"><span style="color:#24292e;">    &lt;/button&gt;</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span></code></pre></div><h3 id="_6、说说你用react有什么坑点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%94%A8react%E6%9C%89%E4%BB%80%E4%B9%88%E5%9D%91%E7%82%B9" target="_blank" rel="noreferrer">6、说说你用react有什么坑点</a> <a class="header-anchor" href="#_6、说说你用react有什么坑点" aria-label="Permalink to &quot;[6、说说你用react有什么坑点](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#6说说你用react有什么坑点)&quot;">​</a></h3><p><strong>1、</strong> JSX做表达式判断时候需要强转为boolean类型</p><p>如果不使用 !!b 进行强转数据类型会在页面里面输出 0。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">render() {</span></span>
<span class="line"><span style="color:#f6f6f4;">  const b = 0;</span></span>
<span class="line"><span style="color:#f6f6f4;">  return &lt;div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    {</span></span>
<span class="line"><span style="color:#f6f6f4;">      !!b &amp;&amp; &lt;div&gt;这是一段文本&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">render() {</span></span>
<span class="line"><span style="color:#24292e;">  const b = 0;</span></span>
<span class="line"><span style="color:#24292e;">  return &lt;div&gt;</span></span>
<span class="line"><span style="color:#24292e;">    {</span></span>
<span class="line"><span style="color:#24292e;">      !!b &amp;&amp; &lt;div&gt;这是一段文本&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p><strong>1、</strong> 尽量不要在 <code>componentWillReviceProps</code> 里使用 <code>setState</code>如果一定要使用那么需要判断结束条件不然会出现无限重渲染导致页面崩溃</p><p><strong>2、</strong> 给组件添加ref时候尽量不要使用匿名函数因为当组件更新的时候匿名函数会被当做新的<code>prop</code>处理让<code>ref</code>属性接受到新函数的时候<code>react</code>内部会先清空<code>ref</code>也就是会以<code>null</code>为回调参数先执行一次<code>ref</code>这个<code>props</code>然后在以该组件的实例执行一次<code>ref</code>所以用匿名函数做ref的时候有的时候去<code>ref</code>赋值后的属性会取到<code>null</code></p><p><strong>3、</strong> 遍历子节点的时候不要用 index 作为组件的 key 进行传入</p><h3 id="_7、setstate" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7setstate" target="_blank" rel="noreferrer">7、setState</a> <a class="header-anchor" href="#_7、setstate" aria-label="Permalink to &quot;[7、setState](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#7setstate)&quot;">​</a></h3><p>在了解<code>setState</code>之前我们先来简单了解下 <code>React</code> 一个包装结构: <code>Transaction</code>:</p><p><strong>事务 (Transaction)</strong></p><p>是 <code>React</code> 中的一个调用结构用于包装一个方法结构为: <code>initialize</code> - <code>perform(method)</code> - <code>close</code>。通过事务可以统一管理一个方法的开始与结束处于事务流中表示进程正在执行一些操作</p><h3 id="_8、为什么需要-react-中的路由" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81-react-%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1" target="_blank" rel="noreferrer">8、为什么需要 React 中的路由？</a> <a class="header-anchor" href="#_8、为什么需要-react-中的路由" aria-label="Permalink to &quot;[8、为什么需要 React 中的路由？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#8为什么需要-react-中的路由)&quot;">​</a></h3><p>Router 用于定义多个路由，当用户定义特定的 URL 时，如果此 URL 与 Router 内定义的任何 “路由” 的路径匹配，则用户将重定向到该特定路由。所以基本上我们需要在自己的应用中添加一个 Router 库，允许创建多个路由，每个路由都会向我们提供一个独特的视图</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;switch&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;route exact path=’/’ component={Home}/&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;route path=’/posts/:id’ component={Newpost}/&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;route path=’/posts’   component={Post}/&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/switch&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;switch&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;route exact path=’/’ component={Home}/&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;route path=’/posts/:id’ component={Newpost}/&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;route path=’/posts’   component={Post}/&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/switch&gt;</span></span></code></pre></div><h3 id="_9、purecomponent和functioncomponent区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9purecomponent%E5%92%8Cfunctioncomponent%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、pureComponent和FunctionComponent区别</a> <a class="header-anchor" href="#_9、purecomponent和functioncomponent区别" aria-label="Permalink to &quot;[9、pureComponent和FunctionComponent区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#9purecomponent和functioncomponent区别)&quot;">​</a></h3><p><code>PureComponent</code>和<code>Component</code>完全相同但是在<code>shouldComponentUpdate</code>实现中<code>PureComponent</code>使用了<code>props</code>和<code>state</code>的浅比较。主要作用是用来提高某些特定场景的性能</p><h3 id="_10、react旧版生命周期函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10react%E6%97%A7%E7%89%88%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">10、react旧版生命周期函数</a> <a class="header-anchor" href="#_10、react旧版生命周期函数" aria-label="Permalink to &quot;[10、react旧版生命周期函数](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新2021年面试题大汇总，附答案.md#10react旧版生命周期函数)&quot;">​</a></h3><p>初始化阶段</p><p><strong>1、</strong> <code>getDefaultProps</code>:获取实例的默认属性</p><p><strong>2、</strong> <code>getInitialState</code>:获取每个实例的初始化状态</p><p><strong>3、</strong> <code>componentWillMount</code>组件即将被装载、渲染到页面上</p><p><strong>4、</strong> <code>render</code>:组件在这里生成虚拟的DOM节点</p><p><strong>5、</strong> <code>componentDidMount</code>:组件真正在被装载之后</p><p>运行中状态</p><p><strong>1、</strong> <code>componentWillReceiveProps</code>:组件将要接收到属性的时候调用</p><p><strong>2、</strong> <code>shouldComponentUpdate</code>:组件接受到新属性或者新状态的时候可以返回 <code>false</code>接收数据后不更新阻止 <code>render</code>调用后面的函数不会被继续执行了</p><p><strong>3、</strong> <code>componentWillUpdate</code>:组件即将更新不能修改属性和状态</p><p><strong>4、</strong> <code>render</code>:组件重新描绘</p><p><strong>5、</strong> <code>componentDidUpdate</code>:组件已经更新</p><h3 id="_11、diff算法" tabindex="-1">11、diff算法? <a class="header-anchor" href="#_11、diff算法" aria-label="Permalink to &quot;11、diff算法?&quot;">​</a></h3><h3 id="_12、mixin、hoc、render-props、react-hooks的优劣如何" tabindex="-1">12、mixin、hoc、render props、react-hooks的优劣如何？ <a class="header-anchor" href="#_12、mixin、hoc、render-props、react-hooks的优劣如何" aria-label="Permalink to &quot;12、mixin、hoc、render props、react-hooks的优劣如何？&quot;">​</a></h3><h3 id="_13、react与angular有何不同" tabindex="-1">13、React与Angular有何不同？ <a class="header-anchor" href="#_13、react与angular有何不同" aria-label="Permalink to &quot;13、React与Angular有何不同？&quot;">​</a></h3><h3 id="_14、列出react的一些主要优点。" tabindex="-1">14、列出React的一些主要优点。 <a class="header-anchor" href="#_14、列出react的一些主要优点。" aria-label="Permalink to &quot;14、列出React的一些主要优点。&quot;">​</a></h3><h3 id="_15、如何在react中创建一个事件" tabindex="-1">15、如何在React中创建一个事件？ <a class="header-anchor" href="#_15、如何在react中创建一个事件" aria-label="Permalink to &quot;15、如何在React中创建一个事件？&quot;">​</a></h3><h3 id="_16、createelement-与-cloneelement-的区别是什么" tabindex="-1">16、createElement 与 cloneElement 的区别是什么 <a class="header-anchor" href="#_16、createelement-与-cloneelement-的区别是什么" aria-label="Permalink to &quot;16、createElement 与 cloneElement 的区别是什么&quot;">​</a></h3><h3 id="_17、再说一下computed和watch" tabindex="-1">17、再说一下Computed和Watch <a class="header-anchor" href="#_17、再说一下computed和watch" aria-label="Permalink to &quot;17、再说一下Computed和Watch&quot;">​</a></h3><h3 id="_18、react-router里的标签和-a-标签有什么区别" tabindex="-1">18、react-router里的标签和<code>&lt;a&gt;</code>标签有什么区别 <a class="header-anchor" href="#_18、react-router里的标签和-a-标签有什么区别" aria-label="Permalink to &quot;18、react-router里的标签和\`&lt;a&gt;\`标签有什么区别&quot;">​</a></h3><h3 id="_19、简述flux-思想" tabindex="-1">19、简述flux 思想 <a class="header-anchor" href="#_19、简述flux-思想" aria-label="Permalink to &quot;19、简述flux 思想&quot;">​</a></h3><h3 id="_20、传入-setstate-函数的第二个参数的作用是什么" tabindex="-1">20、传入 setState 函数的第二个参数的作用是什么 <a class="header-anchor" href="#_20、传入-setstate-函数的第二个参数的作用是什么" aria-label="Permalink to &quot;20、传入 setState 函数的第二个参数的作用是什么&quot;">​</a></h3><h3 id="_21、什么是-props" tabindex="-1">21、什么是 Props? <a class="header-anchor" href="#_21、什么是-props" aria-label="Permalink to &quot;21、什么是 Props?&quot;">​</a></h3><h3 id="_22、react如何进行组件-逻辑复用" tabindex="-1">22、React如何进行组件/逻辑复用? <a class="header-anchor" href="#_22、react如何进行组件-逻辑复用" aria-label="Permalink to &quot;22、React如何进行组件/逻辑复用?&quot;">​</a></h3><h3 id="_23、为什么浏览器无法读取jsx" tabindex="-1">23、为什么浏览器无法读取JSX？ <a class="header-anchor" href="#_23、为什么浏览器无法读取jsx" aria-label="Permalink to &quot;23、为什么浏览器无法读取JSX？&quot;">​</a></h3><h3 id="_24、setstate到底是异步还是同步" tabindex="-1">24、setState到底是异步还是同步? <a class="header-anchor" href="#_24、setstate到底是异步还是同步" aria-label="Permalink to &quot;24、setState到底是异步还是同步?&quot;">​</a></h3><h3 id="_25、redux设计理念" tabindex="-1">25、Redux设计理念 <a class="header-anchor" href="#_25、redux设计理念" aria-label="Permalink to &quot;25、Redux设计理念&quot;">​</a></h3><h3 id="_26、什么是纯组件" tabindex="-1">26、什么是纯组件？ <a class="header-anchor" href="#_26、什么是纯组件" aria-label="Permalink to &quot;26、什么是纯组件？&quot;">​</a></h3><h3 id="_27、react有哪些优化性能是手段" tabindex="-1">27、React有哪些优化性能是手段? <a class="header-anchor" href="#_27、react有哪些优化性能是手段" aria-label="Permalink to &quot;27、React有哪些优化性能是手段?&quot;">​</a></h3><h3 id="_28、react-的虚拟dom是怎么实现的" tabindex="-1">28、react 的虚拟dom是怎么实现的 <a class="header-anchor" href="#_28、react-的虚拟dom是怎么实现的" aria-label="Permalink to &quot;28、react 的虚拟dom是怎么实现的&quot;">​</a></h3>`,64),l=[o];function p(c,r,i,d,f,u){return s(),e("div",null,l)}const m=a(t,[["render",p]]);export{E as __pageData,m as default};
