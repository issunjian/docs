import{_ as a,o as s,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-05.md","filePath":"interview/backend/java/java-05.md"}'),l={name:"interview/backend/java/java-05.md"},o=e(`<h3 id="_1、什么是-class-文件-class-文件主要的信息结构有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#1%E4%BB%80%E4%B9%88%E6%98%AF-class-%E6%96%87%E4%BB%B6-class-%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">1、什么是 Class 文件？ Class 文件主要的信息结构有哪些？</a> <a class="header-anchor" href="#_1、什么是-class-文件-class-文件主要的信息结构有哪些" aria-label="Permalink to &quot;[1、什么是 Class 文件？ Class 文件主要的信息结构有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#1什么是-class-文件-class-文件主要的信息结构有哪些)&quot;">​</a></h3><p>Class 文件是一组以 8 位字节为基础单位的二进制流。各个数据项严格按顺序排列。</p><p>Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储数据。这样的伪结构仅仅有两种数据类型：无符号数和表。</p><p>无符号数：是基本数据类型。以 u1、u2、u4、u8 分别代表 1 个字节、2 个字节、4 个字节、8 个字节的无符号数，能够用来描写叙述数字、索引引用、数量值或者依照 UTF-8 编码构成的字符串值。</p><p>表：由多个无符号数或者其它表作为数据项构成的复合数据类型。全部表都习惯性地以 _info 结尾。</p><h3 id="_2、并发编程三个必要因素是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#2%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E4%B8%AA%E5%BF%85%E8%A6%81%E5%9B%A0%E7%B4%A0%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">2、并发编程三个必要因素是什么？</a> <a class="header-anchor" href="#_2、并发编程三个必要因素是什么" aria-label="Permalink to &quot;[2、并发编程三个必要因素是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#2并发编程三个必要因素是什么)&quot;">​</a></h3><p><strong>原子性：</strong></p><p>原子，即一个不可再被分割的颗粒。原子性指的是一个或多个操作要么全部执行成功要么全部执行失败。</p><p><strong>可见性：</strong></p><p>一个线程对共享变量的修改,另一个线程能够立刻看到。（synchronized,volatile）</p><p><strong>有序性：</strong></p><p>程序执行的顺序按照代码的先后顺序执行。（处理器可能会对指令进行重排序）</p><h3 id="_3、说下有哪些类加载器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#3%E8%AF%B4%E4%B8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8" target="_blank" rel="noreferrer">3、说下有哪些类加载器？</a> <a class="header-anchor" href="#_3、说下有哪些类加载器" aria-label="Permalink to &quot;[3、说下有哪些类加载器？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#3说下有哪些类加载器)&quot;">​</a></h3><p>Bootstrap ClassLoader（启动类加载器） Extention ClassLoader（扩展类加载器） App ClassLoader（应用类加载器）</p><h3 id="_4、线程的调度策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#4%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5" target="_blank" rel="noreferrer">4、线程的调度策略</a> <a class="header-anchor" href="#_4、线程的调度策略" aria-label="Permalink to &quot;[4、线程的调度策略](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#4线程的调度策略)&quot;">​</a></h3><p><strong>线程调度器选择优先级最高的线程运行，但是，如果发生以下情况，就会终止线程的运行：</strong></p><p><strong>1、</strong> 线程体中调用了yield方法让出了对cpu的占用权利</p><p><strong>2、</strong> 线程体中调用了sleep方法使线程进入睡眠状态</p><p><strong>3、</strong> 线程由于IO操作受到阻塞</p><p><strong>4、</strong> 另外一个更高优先级线程出现</p><p>5）在支持时间片的系统中，该线程的时间片用完</p><h3 id="_5、用java写一个冒泡排序。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#5%E7%94%A8java%E5%86%99%E4%B8%80%E4%B8%AA%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%82" target="_blank" rel="noreferrer">5、用Java写一个冒泡排序。</a> <a class="header-anchor" href="#_5、用java写一个冒泡排序。" aria-label="Permalink to &quot;[5、用Java写一个冒泡排序。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#5用java写一个冒泡排序。)&quot;">​</a></h3><p>冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到，下面提供一个参考代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">import java.util.Comparator;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">/</span></span>
<span class="line"><span style="color:#f6f6f4;"> * 排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可以相互替换)</span></span>
<span class="line"><span style="color:#f6f6f4;"> * @author骆昊</span></span>
<span class="line"><span style="color:#f6f6f4;"> *</span></span>
<span class="line"><span style="color:#f6f6f4;"> */</span></span>
<span class="line"><span style="color:#f6f6f4;">public interface Sorter {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">   /</span></span>
<span class="line"><span style="color:#f6f6f4;">    * 排序</span></span>
<span class="line"><span style="color:#f6f6f4;">    * @param list 待排序的数组</span></span>
<span class="line"><span style="color:#f6f6f4;">    */</span></span>
<span class="line"><span style="color:#f6f6f4;">   public &lt;T extends Comparable&lt;T&gt;&gt; void sort(T[] list);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">   /</span></span>
<span class="line"><span style="color:#f6f6f4;">    * 排序</span></span>
<span class="line"><span style="color:#f6f6f4;">    * @param list 待排序的数组</span></span>
<span class="line"><span style="color:#f6f6f4;">    * @param comp 比较两个对象的比较器</span></span>
<span class="line"><span style="color:#f6f6f4;">    */</span></span>
<span class="line"><span style="color:#f6f6f4;">   public &lt;T&gt; void sort(T[] list, Comparator&lt;T&gt; comp);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import java.util.Comparator;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">/</span></span>
<span class="line"><span style="color:#24292e;"> * 排序器接口(策略模式: 将算法封装到具有共同接口的独立的类中使得它们可以相互替换)</span></span>
<span class="line"><span style="color:#24292e;"> * @author骆昊</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> */</span></span>
<span class="line"><span style="color:#24292e;">public interface Sorter {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   /</span></span>
<span class="line"><span style="color:#24292e;">    * 排序</span></span>
<span class="line"><span style="color:#24292e;">    * @param list 待排序的数组</span></span>
<span class="line"><span style="color:#24292e;">    */</span></span>
<span class="line"><span style="color:#24292e;">   public &lt;T extends Comparable&lt;T&gt;&gt; void sort(T[] list);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   /</span></span>
<span class="line"><span style="color:#24292e;">    * 排序</span></span>
<span class="line"><span style="color:#24292e;">    * @param list 待排序的数组</span></span>
<span class="line"><span style="color:#24292e;">    * @param comp 比较两个对象的比较器</span></span>
<span class="line"><span style="color:#24292e;">    */</span></span>
<span class="line"><span style="color:#24292e;">   public &lt;T&gt; void sort(T[] list, Comparator&lt;T&gt; comp);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">import java.util.Comparator;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">/</span></span>
<span class="line"><span style="color:#f6f6f4;"> * 冒泡排序</span></span>
<span class="line"><span style="color:#f6f6f4;"> * </span></span>
<span class="line"><span style="color:#f6f6f4;"> * @author骆昊</span></span>
<span class="line"><span style="color:#f6f6f4;"> *</span></span>
<span class="line"><span style="color:#f6f6f4;"> */</span></span>
<span class="line"><span style="color:#f6f6f4;">public class BubbleSorter implements Sorter {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    @Override</span></span>
<span class="line"><span style="color:#f6f6f4;">    public &lt;T extends Comparable&lt;T&gt;&gt; void sort(T[] list) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        boolean swapped = true;</span></span>
<span class="line"><span style="color:#f6f6f4;">        for (int i = 1, len = list.length; i &lt; len &amp;&amp; swapped; ++i) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            swapped = false;</span></span>
<span class="line"><span style="color:#f6f6f4;">            for (int j = 0; j &lt; len - i; ++j) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                if (list[j].compareTo(list[j + 1]) &gt; 0) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                    T temp = list[j];</span></span>
<span class="line"><span style="color:#f6f6f4;">                    list[j] = list[j + 1];</span></span>
<span class="line"><span style="color:#f6f6f4;">                    list[j + 1] = temp;</span></span>
<span class="line"><span style="color:#f6f6f4;">                    swapped = true;</span></span>
<span class="line"><span style="color:#f6f6f4;">                }</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    @Override</span></span>
<span class="line"><span style="color:#f6f6f4;">    public &lt;T&gt; void sort(T[] list, Comparator&lt;T&gt; comp) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        boolean swapped = true;</span></span>
<span class="line"><span style="color:#f6f6f4;">        for (int i = 1, len = list.length; i &lt; len &amp;&amp; swapped; ++i) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            swapped = false;</span></span>
<span class="line"><span style="color:#f6f6f4;">            for (int j = 0; j &lt; len - i; ++j) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                if (comp.compare(list[j], list[j + 1]) &gt; 0) {</span></span>
<span class="line"><span style="color:#f6f6f4;">                    T temp = list[j];</span></span>
<span class="line"><span style="color:#f6f6f4;">                    list[j] = list[j + 1];</span></span>
<span class="line"><span style="color:#f6f6f4;">                    list[j + 1] = temp;</span></span>
<span class="line"><span style="color:#f6f6f4;">                    swapped = true;</span></span>
<span class="line"><span style="color:#f6f6f4;">                }</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import java.util.Comparator;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">/</span></span>
<span class="line"><span style="color:#24292e;"> * 冒泡排序</span></span>
<span class="line"><span style="color:#24292e;"> * </span></span>
<span class="line"><span style="color:#24292e;"> * @author骆昊</span></span>
<span class="line"><span style="color:#24292e;"> *</span></span>
<span class="line"><span style="color:#24292e;"> */</span></span>
<span class="line"><span style="color:#24292e;">public class BubbleSorter implements Sorter {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    @Override</span></span>
<span class="line"><span style="color:#24292e;">    public &lt;T extends Comparable&lt;T&gt;&gt; void sort(T[] list) {</span></span>
<span class="line"><span style="color:#24292e;">        boolean swapped = true;</span></span>
<span class="line"><span style="color:#24292e;">        for (int i = 1, len = list.length; i &lt; len &amp;&amp; swapped; ++i) {</span></span>
<span class="line"><span style="color:#24292e;">            swapped = false;</span></span>
<span class="line"><span style="color:#24292e;">            for (int j = 0; j &lt; len - i; ++j) {</span></span>
<span class="line"><span style="color:#24292e;">                if (list[j].compareTo(list[j + 1]) &gt; 0) {</span></span>
<span class="line"><span style="color:#24292e;">                    T temp = list[j];</span></span>
<span class="line"><span style="color:#24292e;">                    list[j] = list[j + 1];</span></span>
<span class="line"><span style="color:#24292e;">                    list[j + 1] = temp;</span></span>
<span class="line"><span style="color:#24292e;">                    swapped = true;</span></span>
<span class="line"><span style="color:#24292e;">                }</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    @Override</span></span>
<span class="line"><span style="color:#24292e;">    public &lt;T&gt; void sort(T[] list, Comparator&lt;T&gt; comp) {</span></span>
<span class="line"><span style="color:#24292e;">        boolean swapped = true;</span></span>
<span class="line"><span style="color:#24292e;">        for (int i = 1, len = list.length; i &lt; len &amp;&amp; swapped; ++i) {</span></span>
<span class="line"><span style="color:#24292e;">            swapped = false;</span></span>
<span class="line"><span style="color:#24292e;">            for (int j = 0; j &lt; len - i; ++j) {</span></span>
<span class="line"><span style="color:#24292e;">                if (comp.compare(list[j], list[j + 1]) &gt; 0) {</span></span>
<span class="line"><span style="color:#24292e;">                    T temp = list[j];</span></span>
<span class="line"><span style="color:#24292e;">                    list[j] = list[j + 1];</span></span>
<span class="line"><span style="color:#24292e;">                    list[j + 1] = temp;</span></span>
<span class="line"><span style="color:#24292e;">                    swapped = true;</span></span>
<span class="line"><span style="color:#24292e;">                }</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_6、java对象的布局了解过吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#6java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%83%E5%B1%80%E4%BA%86%E8%A7%A3%E8%BF%87%E5%90%97" target="_blank" rel="noreferrer">6、Java对象的布局了解过吗？</a> <a class="header-anchor" href="#_6、java对象的布局了解过吗" aria-label="Permalink to &quot;[6、Java对象的布局了解过吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#6java对象的布局了解过吗)&quot;">​</a></h3><p>对象头区域此处存储的信息包括两部分：1、对象自身的运行时数据( MarkWord )，占8字节 存储 hashCode、GC 分代年龄、锁类型标记、偏向锁线程 ID 、 CAS 锁指向线程 LockRecord 的指针等， synconized 锁的机制与这个部分( markwork )密切相关，用 markword 中最低的三位代表锁的状态，其中一位是偏向锁位，另外两位是普通锁位。2、对象类型指针( Class Pointer )，占4字节 对象指向它的类元数据的指针、 JVM 就是通过它来确定是哪个 Class 的实例。</p><p>实例数据区域 此处存储的是对象真正有效的信息，比如对象中所有字段的内容</p><p>对齐填充区域 JVM 的实现 HostSpot 规定对象的起始地址必须是 8 字节的整数倍，换句话来说，现在 64 位的 OS 往外读取数据的时候一次性读取 64bit 整数倍的数据，也就是 8 个字节，所以 HotSpot 为了高效读取对象，就做了&quot;对齐&quot;，如果一个对象实际占的内存大小不是 8byte 的整数倍时，就&quot;补位&quot;到 8byte 的整数倍。所以对齐填充区域的大小不是固定的。</p><h3 id="_7、解释什么是tomcat-valve" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#7%E8%A7%A3%E9%87%8A%E4%BB%80%E4%B9%88%E6%98%AFtomcat-valve" target="_blank" rel="noreferrer">7、解释什么是Tomcat Valve?</a> <a class="header-anchor" href="#_7、解释什么是tomcat-valve" aria-label="Permalink to &quot;[7、解释什么是Tomcat Valve?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#7解释什么是tomcat-valve)&quot;">​</a></h3><p>Tomcat Valve——Tomcat 4引入的新技术，它允许您将Java类的实例链接到一个特定的Catalina容器。</p><h3 id="_8、同步方法和同步块-哪个是更好的选择" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#8%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95%E5%92%8C%E5%90%8C%E6%AD%A5%E5%9D%97%E5%93%AA%E4%B8%AA%E6%98%AF%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="noreferrer">8、同步方法和同步块，哪个是更好的选择？</a> <a class="header-anchor" href="#_8、同步方法和同步块-哪个是更好的选择" aria-label="Permalink to &quot;[8、同步方法和同步块，哪个是更好的选择？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#8同步方法和同步块哪个是更好的选择)&quot;">​</a></h3><p>同步块是更好的选择，因为它不会锁住整个对象（当然你也可以让它锁住整个对象）。同步方法会锁住整个对象，哪怕这个类中有多个不相关联的同步块，这通常会导致他们停止执行并需要等待获得这个对象上的锁。</p><p>同步块更要符合开放调用的原则，只在需要锁住的代码块锁住相应的对象，这样从侧面来说也可以避免死锁。</p><h3 id="_9、运行时常量池的作用是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#9%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、运行时常量池的作用是什么?</a> <a class="header-anchor" href="#_9、运行时常量池的作用是什么" aria-label="Permalink to &quot;[9、运行时常量池的作用是什么?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#9运行时常量池的作用是什么)&quot;">​</a></h3><p>运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表，用于存放编译器生成的各种字面量与符号引用，这部分内容在类加载后存放到运行时常量池。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。</p><p>运行时常量池相对于 Class 文件常量池的一个重要特征是动态性，Java 不要求常量只有编译期才能产生，运行期间也可以将新的常量放入池中，这种特性利用较多的是 String 的 <code>intern</code> 方法。</p><p>运行时常量池是方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError。</p><h3 id="_10、如果你提交任务时-线程池队列已满-这时会发生什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#10%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1%E6%97%B6%E7%BA%BF%E7%A8%8B%E6%B1%A0%E9%98%9F%E5%88%97%E5%B7%B2%E6%BB%A1%E8%BF%99%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">10、如果你提交任务时，线程池队列已满，这时会发生什么</a> <a class="header-anchor" href="#_10、如果你提交任务时-线程池队列已满-这时会发生什么" aria-label="Permalink to &quot;[10、如果你提交任务时，线程池队列已满，这时会发生什么](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java高级面试题及答案，2021版.md#10如果你提交任务时线程池队列已满这时会发生什么)&quot;">​</a></h3><p><strong>有俩种可能：</strong></p><p><strong>1、</strong> 如果使用的是无界队列 LinkedBlockingQueue，也就是无界队列的话，没关系，继续添加任务到阻塞队列中等待执行，因为 LinkedBlockingQueue 可以近乎认为是一个无穷大的队列，可以无限存放任务</p><p><strong>2、</strong> 如果使用的是有界队列比如 ArrayBlockingQueue，任务首先会被添加到ArrayBlockingQueue 中，ArrayBlockingQueue 满了，会根据maximumPoolSize 的值增加线程数量，如果增加了线程数量还是处理不过来，ArrayBlockingQueue 继续满，那么则会使用拒绝策略RejectedExecutionHandler 处理满了的任务，默认是 AbortPolicy</p><h3 id="_11、session与cookie的区别" tabindex="-1">11、Session与cookie的区别？ <a class="header-anchor" href="#_11、session与cookie的区别" aria-label="Permalink to &quot;11、Session与cookie的区别？&quot;">​</a></h3><h3 id="_12、如何实现数组和-list-之间的转换" tabindex="-1">12、如何实现数组和 List 之间的转换？ <a class="header-anchor" href="#_12、如何实现数组和-list-之间的转换" aria-label="Permalink to &quot;12、如何实现数组和 List 之间的转换？&quot;">​</a></h3><h3 id="_13、动态改变构造" tabindex="-1">13、动态改变构造 <a class="header-anchor" href="#_13、动态改变构造" aria-label="Permalink to &quot;13、动态改变构造&quot;">​</a></h3><h3 id="_14、说一下-hashset-的实现原理" tabindex="-1">14、说一下 HashSet 的实现原理？ <a class="header-anchor" href="#_14、说一下-hashset-的实现原理" aria-label="Permalink to &quot;14、说一下 HashSet 的实现原理？&quot;">​</a></h3><h3 id="_15、单例优缺点" tabindex="-1">15、单例优缺点 <a class="header-anchor" href="#_15、单例优缺点" aria-label="Permalink to &quot;15、单例优缺点&quot;">​</a></h3><h3 id="_16、标记清除算法-mark-sweep" tabindex="-1">16、标记清除算法（ Mark-Sweep） <a class="header-anchor" href="#_16、标记清除算法-mark-sweep" aria-label="Permalink to &quot;16、标记清除算法（ Mark-Sweep）&quot;">​</a></h3><h3 id="_17、在进行数据库编程时-连接池有什么作用" tabindex="-1">17、在进行数据库编程时，连接池有什么作用？ <a class="header-anchor" href="#_17、在进行数据库编程时-连接池有什么作用" aria-label="Permalink to &quot;17、在进行数据库编程时，连接池有什么作用？&quot;">​</a></h3><h3 id="_18、创建线程的四种方式" tabindex="-1">18、创建线程的四种方式 <a class="header-anchor" href="#_18、创建线程的四种方式" aria-label="Permalink to &quot;18、创建线程的四种方式&quot;">​</a></h3><h3 id="_19、多线程场景下如何使用-arraylist" tabindex="-1">19、多线程场景下如何使用 ArrayList？ <a class="header-anchor" href="#_19、多线程场景下如何使用-arraylist" aria-label="Permalink to &quot;19、多线程场景下如何使用 ArrayList？&quot;">​</a></h3><h3 id="_20、线程的调度策略" tabindex="-1">20、线程的调度策略 <a class="header-anchor" href="#_20、线程的调度策略" aria-label="Permalink to &quot;20、线程的调度策略&quot;">​</a></h3><h3 id="_21、乐观锁和悲观锁的理解及如何实现-有哪些实现方式" tabindex="-1">21、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？ <a class="header-anchor" href="#_21、乐观锁和悲观锁的理解及如何实现-有哪些实现方式" aria-label="Permalink to &quot;21、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？&quot;">​</a></h3><h3 id="_22、栈溢出的原因" tabindex="-1">22、栈溢出的原因？ <a class="header-anchor" href="#_22、栈溢出的原因" aria-label="Permalink to &quot;22、栈溢出的原因？&quot;">​</a></h3><h3 id="_23、jvm-中一次完整的-gc-流程-从-ygc-到-fgc-是怎样的" tabindex="-1">23、JVM 中一次完整的 GC 流程（从 ygc 到 fgc）是怎样的 <a class="header-anchor" href="#_23、jvm-中一次完整的-gc-流程-从-ygc-到-fgc-是怎样的" aria-label="Permalink to &quot;23、JVM 中一次完整的 GC 流程（从 ygc 到 fgc）是怎样的&quot;">​</a></h3><h3 id="_24、-和-的区别" tabindex="-1">24、&amp;和&amp;&amp;的区别？ <a class="header-anchor" href="#_24、-和-的区别" aria-label="Permalink to &quot;24、&amp;和&amp;&amp;的区别？&quot;">​</a></h3><h3 id="_25、怎样将gb2312编码的字符串转换为iso-8859-1编码的字符串" tabindex="-1">25、怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？ <a class="header-anchor" href="#_25、怎样将gb2312编码的字符串转换为iso-8859-1编码的字符串" aria-label="Permalink to &quot;25、怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？&quot;">​</a></h3><h3 id="_26、强引用、软引用、弱引用、虚引用是什么-有什么区别" tabindex="-1">26、强引用、软引用、弱引用、虚引用是什么，有什么区别？ <a class="header-anchor" href="#_26、强引用、软引用、弱引用、虚引用是什么-有什么区别" aria-label="Permalink to &quot;26、强引用、软引用、弱引用、虚引用是什么，有什么区别？&quot;">​</a></h3><h3 id="_27、string-是最基本的数据类型吗" tabindex="-1">27、String 是最基本的数据类型吗？ <a class="header-anchor" href="#_27、string-是最基本的数据类型吗" aria-label="Permalink to &quot;27、String 是最基本的数据类型吗？&quot;">​</a></h3><h3 id="_28、使用sql写出一个分页程序" tabindex="-1">28、使用sql写出一个分页程序？ <a class="header-anchor" href="#_28、使用sql写出一个分页程序" aria-label="Permalink to &quot;28、使用sql写出一个分页程序？&quot;">​</a></h3><h3 id="_29、说一下-jvm-调优的工具" tabindex="-1">29、说一下 JVM 调优的工具？ <a class="header-anchor" href="#_29、说一下-jvm-调优的工具" aria-label="Permalink to &quot;29、说一下 JVM 调优的工具？&quot;">​</a></h3><h3 id="_30、react-redux是如何工作的" tabindex="-1">30、react-redux是如何工作的? <a class="header-anchor" href="#_30、react-redux是如何工作的" aria-label="Permalink to &quot;30、react-redux是如何工作的?&quot;">​</a></h3><h3 id="_31、java中有几种数据类型" tabindex="-1">31、Java中有几种数据类型 <a class="header-anchor" href="#_31、java中有几种数据类型" aria-label="Permalink to &quot;31、Java中有几种数据类型&quot;">​</a></h3><h3 id="_32、java线程数过多会造成什么异常" tabindex="-1">32、Java线程数过多会造成什么异常？ <a class="header-anchor" href="#_32、java线程数过多会造成什么异常" aria-label="Permalink to &quot;32、Java线程数过多会造成什么异常？&quot;">​</a></h3><h3 id="_33、分代回收" tabindex="-1">33、分代回收 <a class="header-anchor" href="#_33、分代回收" aria-label="Permalink to &quot;33、分代回收&quot;">​</a></h3><h3 id="_34、调优命令有哪些" tabindex="-1">34、调优命令有哪些？ <a class="header-anchor" href="#_34、调优命令有哪些" aria-label="Permalink to &quot;34、调优命令有哪些？&quot;">​</a></h3><h3 id="_35、object类常用方法有那些" tabindex="-1">35、Object类常用方法有那些？ <a class="header-anchor" href="#_35、object类常用方法有那些" aria-label="Permalink to &quot;35、Object类常用方法有那些？&quot;">​</a></h3><h3 id="_36、java-中-serializable-与-externalizable-的区别" tabindex="-1">36、Java 中，Serializable 与 Externalizable 的区别？ <a class="header-anchor" href="#_36、java-中-serializable-与-externalizable-的区别" aria-label="Permalink to &quot;36、Java 中，Serializable 与 Externalizable 的区别？&quot;">​</a></h3><h3 id="_37、executors类是什么" tabindex="-1">37、Executors类是什么？ <a class="header-anchor" href="#_37、executors类是什么" aria-label="Permalink to &quot;37、Executors类是什么？&quot;">​</a></h3><h3 id="_38、请解释一下什么时候可以使用-什么时候可以使用" tabindex="-1">38、请解释一下什么时候可以使用“.”，什么时候可以使用“[]”? <a class="header-anchor" href="#_38、请解释一下什么时候可以使用-什么时候可以使用" aria-label="Permalink to &quot;38、请解释一下什么时候可以使用“.”，什么时候可以使用“[]”?&quot;">​</a></h3><h3 id="_39、创建一个对象用什么运算符-对象实体与对象引用有何不同" tabindex="-1">39、创建一个对象用什么运算符？对象实体与对象引用有何不同？ <a class="header-anchor" href="#_39、创建一个对象用什么运算符-对象实体与对象引用有何不同" aria-label="Permalink to &quot;39、创建一个对象用什么运算符？对象实体与对象引用有何不同？&quot;">​</a></h3><h3 id="_40、列出-5-个应该遵循的-jdbc-最佳实践" tabindex="-1">40、列出 5 个应该遵循的 JDBC 最佳实践 <a class="header-anchor" href="#_40、列出-5-个应该遵循的-jdbc-最佳实践" aria-label="Permalink to &quot;40、列出 5 个应该遵循的 JDBC 最佳实践&quot;">​</a></h3>`,72),p=[o];function t(r,c,i,f,h,d){return s(),n("div",null,p)}const m=a(l,[["render",t]]);export{u as __pageData,m as default};
