import{_ as a,o as e,c as o,V as t}from"./chunks/framework.c6d8cbec.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-10.md","filePath":"interview/backend/java/java-10.md"}'),r={name:"interview/backend/java/java-10.md"},s=t(`<h3 id="_1、在java中守护线程和本地线程区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1%E5%9C%A8java%E4%B8%AD%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%E5%92%8C%E6%9C%AC%E5%9C%B0%E7%BA%BF%E7%A8%8B%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、在java中守护线程和本地线程区别？</a> <a class="header-anchor" href="#_1、在java中守护线程和本地线程区别" aria-label="Permalink to &quot;[1、在java中守护线程和本地线程区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#1在java中守护线程和本地线程区别)&quot;">​</a></h3><p>java中的线程分为两种：守护线程（Daemon）和用户线程（User）。</p><p>任何线程都可以设置为守护线程和用户线程，通过方法Thread.setDaemon(bool on)；true则把该线程设置为守护线程，反之则为用户线程。Thread.setDaemon()必须在Thread.start()之前调用，否则运行时会抛出异常。</p><p><strong>两者的区别</strong>：</p><p>唯一的区别是判断虚拟机(JVM)何时离开，Daemon是为其他线程提供服务，如果全部的User Thread已经撤离，Daemon 没有可服务的线程，JVM撤离。也可以理解为守护线程是JVM自动创建的线程（但不一定），用户线程是程序创建的线程；比如JVM的垃圾回收线程是一个守护线程，当所有线程已经撤离，不再产生垃圾，守护线程自然就没事可干了，当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动离开。</p><p><strong>扩展</strong>：</p><p>Thread Dump打印出来的线程信息，含有daemon字样的线程即为守护进程，可能会有：服务守护进程、编译守护进程、windows下的监听Ctrl+break的守护进程、Finalizer守护进程、引用处理守护进程、GC守护进程。</p><h3 id="_2、cms分为哪几个阶段" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2cms%E5%88%86%E4%B8%BA%E5%93%AA%E5%87%A0%E4%B8%AA%E9%98%B6%E6%AE%B5" target="_blank" rel="noreferrer">2、CMS分为哪几个阶段?</a> <a class="header-anchor" href="#_2、cms分为哪几个阶段" aria-label="Permalink to &quot;[2、CMS分为哪几个阶段?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#2cms分为哪几个阶段)&quot;">​</a></h3><p>CMS已经弃用。生活美好，时间有限，不建议再深入研究了。如果碰到问题，直接祭出回收过程即可。</p><p><strong>1、</strong> 初始标记</p><p><strong>2、</strong> 并发标记</p><p><strong>3、</strong> 并发预清理</p><p><strong>4、</strong> 并发可取消的预清理</p><p><strong>5、</strong> 重新标记</p><p><strong>6、</strong> 并发清理</p><p>由于《深入理解java虚拟机》一书的流行，面试时省略3、4步一般也是没问题的。</p><h3 id="_3、抽象的关键字是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E6%8A%BD%E8%B1%A1%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">3、抽象的关键字是什么？</a> <a class="header-anchor" href="#_3、抽象的关键字是什么" aria-label="Permalink to &quot;[3、抽象的关键字是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#3抽象的关键字是什么)&quot;">​</a></h3><p>Abstract</p><h3 id="_4、如何判断对象可以被回收" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%9B%9E%E6%94%B6" target="_blank" rel="noreferrer">4、如何判断对象可以被回收</a> <a class="header-anchor" href="#_4、如何判断对象可以被回收" aria-label="Permalink to &quot;[4、如何判断对象可以被回收](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#4如何判断对象可以被回收)&quot;">​</a></h3><p>判断对象是否存活一般有两种方式：</p><p>引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。</p><p>可达性分析（Reachability Analysis）：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，不可达对象。</p><h3 id="_5、如何通过反射调用对象的方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">5、如何通过反射调用对象的方法？</a> <a class="header-anchor" href="#_5、如何通过反射调用对象的方法" aria-label="Permalink to &quot;[5、如何通过反射调用对象的方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#5如何通过反射调用对象的方法)&quot;">​</a></h3><p>请看下面的代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">import java.lang.reflect.Method;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">class MethodInvokeTest {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) throws Exception {</span></span>
<span class="line"><span style="color:#f6f6f4;">        String str = &quot;hello&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">        Method m = str.getClass().getMethod(&quot;toUpperCase&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(m.invoke(str));  // HELLO</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import java.lang.reflect.Method;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">class MethodInvokeTest {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) throws Exception {</span></span>
<span class="line"><span style="color:#24292e;">        String str = &quot;hello&quot;;</span></span>
<span class="line"><span style="color:#24292e;">        Method m = str.getClass().getMethod(&quot;toUpperCase&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(m.invoke(str));  // HELLO</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_6、如何进行单元测试" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" target="_blank" rel="noreferrer">6、如何进行单元测试</a> <a class="header-anchor" href="#_6、如何进行单元测试" aria-label="Permalink to &quot;[6、如何进行单元测试](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#6如何进行单元测试)&quot;">​</a></h3><p>使用junit</p><h3 id="_7、什么情况下会发生栈内存溢出" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%8F%91%E7%94%9F%E6%A0%88%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA" target="_blank" rel="noreferrer">7、什么情况下会发生栈内存溢出？</a> <a class="header-anchor" href="#_7、什么情况下会发生栈内存溢出" aria-label="Permalink to &quot;[7、什么情况下会发生栈内存溢出？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#7什么情况下会发生栈内存溢出)&quot;">​</a></h3><p>栈是线程私有的，他的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口等信息。局部变量表又包含基本数据类型，对象引用类型。如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，方法递归调用产生这种结果。如果Java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是无法申请到足够的内存去完成扩展，或者在新建立线程的时候没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将抛出一个OutOfMemory 异常。(线程启动过多)。</p><h3 id="_8、什么是hash算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E4%BB%80%E4%B9%88%E6%98%AFhash%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">8、什么是Hash算法</a> <a class="header-anchor" href="#_8、什么是hash算法" aria-label="Permalink to &quot;[8、什么是Hash算法](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#8什么是hash算法)&quot;">​</a></h3><p>哈希算法是指把任意长度的二进制映射为固定长度的较小的二进制值，这个较小的二进制值叫做哈希值。</p><h3 id="_9、什么是上下文切换" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2" target="_blank" rel="noreferrer">9、什么是上下文切换?</a> <a class="header-anchor" href="#_9、什么是上下文切换" aria-label="Permalink to &quot;[9、什么是上下文切换?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#9什么是上下文切换)&quot;">​</a></h3><p><strong>1、</strong> 多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p><p><strong>2、</strong> 概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p><p><strong>3、</strong> 上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。</p><p><strong>4、</strong> Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。</p><h3 id="_10、列举一些你知道的打破双亲委派机制的例子。为什么要打破" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%952021%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10%E5%88%97%E4%B8%BE%E4%B8%80%E4%BA%9B%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E6%89%93%E7%A0%B4%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E7%9A%84%E4%BE%8B%E5%AD%90%E3%80%82%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%89%93%E7%A0%B4" target="_blank" rel="noreferrer">10、列举一些你知道的打破双亲委派机制的例子。为什么要打破？</a> <a class="header-anchor" href="#_10、列举一些你知道的打破双亲委派机制的例子。为什么要打破" aria-label="Permalink to &quot;[10、列举一些你知道的打破双亲委派机制的例子。为什么要打破？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试2021秋招面试问题，附答案.md#10列举一些你知道的打破双亲委派机制的例子。为什么要打破)&quot;">​</a></h3><p><strong>1、</strong> JNDI 通过引入线程上下文类加载器，可以在 Thread.setContextClassLoader 方法设置，默认是应用程序类加载器，来加载 SPI 的代码。有了线程上下文类加载器，就可以完成父类加载器请求子类加载器完成类加载的行为。打破的原因，是为了 JNDI 服务的类加载器是启动器类加载，为了完成高级类加载器请求子类加载器（即上文中的线程上下文加载器）加载类。</p><p><strong>2、</strong> Tomcat，应用的类加载器优先自行加载应用目录下的 class，并不是先委派给父加载器，加载不了才委派给父加载器。打破的目的是为了完成应用间的类隔离。</p><p><strong>3、</strong> OSGi，实现模块化热部署，为每个模块都自定义了类加载器，需要更换模块时，模块与类加载器一起更换。其类加载的过程中，有平级的类加载器加载行为。打破的原因是为了实现模块热替换。</p><p><strong>4、</strong> JDK 9，Extension ClassLoader 被 Platform ClassLoader 取代，当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器完成加载。打破的原因，是为了添加模块化的特性。</p><h3 id="_11、什么时候使用模板方法" tabindex="-1">11、什么时候使用模板方法 <a class="header-anchor" href="#_11、什么时候使用模板方法" aria-label="Permalink to &quot;11、什么时候使用模板方法&quot;">​</a></h3><h3 id="_12、为什么我们调用start-方法时会执行run-方法-为什么我们不能直接调用run-方法" tabindex="-1">12、为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？ <a class="header-anchor" href="#_12、为什么我们调用start-方法时会执行run-方法-为什么我们不能直接调用run-方法" aria-label="Permalink to &quot;12、为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用run()方法？&quot;">​</a></h3><h3 id="_13、什么是threadlocal变量" tabindex="-1">13、什么是ThreadLocal变量？ <a class="header-anchor" href="#_13、什么是threadlocal变量" aria-label="Permalink to &quot;13、什么是ThreadLocal变量？&quot;">​</a></h3><h3 id="_14、如何检查出两个给定的字符串是反序的" tabindex="-1">14、如何检查出两个给定的字符串是反序的？ <a class="header-anchor" href="#_14、如何检查出两个给定的字符串是反序的" aria-label="Permalink to &quot;14、如何检查出两个给定的字符串是反序的？&quot;">​</a></h3><h3 id="_15、用哪两种方式来实现集合的排序" tabindex="-1">15、用哪两种方式来实现集合的排序？ <a class="header-anchor" href="#_15、用哪两种方式来实现集合的排序" aria-label="Permalink to &quot;15、用哪两种方式来实现集合的排序？&quot;">​</a></h3><h3 id="_16、html中a标签的target属性有哪些值" tabindex="-1">16、Html中a标签的target属性有哪些值？ <a class="header-anchor" href="#_16、html中a标签的target属性有哪些值" aria-label="Permalink to &quot;16、Html中a标签的target属性有哪些值？&quot;">​</a></h3><h3 id="_17、说出至少-5-点在-java-中使用线程的最佳实践。" tabindex="-1">17、说出至少 5 点在 Java 中使用线程的最佳实践。 <a class="header-anchor" href="#_17、说出至少-5-点在-java-中使用线程的最佳实践。" aria-label="Permalink to &quot;17、说出至少 5 点在 Java 中使用线程的最佳实践。&quot;">​</a></h3><h3 id="_18、java-中会存在内存泄漏吗-请简单描述。" tabindex="-1">18、Java 中会存在内存泄漏吗，请简单描述。 <a class="header-anchor" href="#_18、java-中会存在内存泄漏吗-请简单描述。" aria-label="Permalink to &quot;18、Java 中会存在内存泄漏吗，请简单描述。&quot;">​</a></h3><h3 id="_19、hashmap-和-concurrenthashmap-的区别" tabindex="-1">19、HashMap 和 ConcurrentHashMap 的区别 <a class="header-anchor" href="#_19、hashmap-和-concurrenthashmap-的区别" aria-label="Permalink to &quot;19、HashMap 和 ConcurrentHashMap 的区别&quot;">​</a></h3><h3 id="_20、你如何在java中获取线程堆栈" tabindex="-1">20、你如何在Java中获取线程堆栈？ <a class="header-anchor" href="#_20、你如何在java中获取线程堆栈" aria-label="Permalink to &quot;20、你如何在Java中获取线程堆栈？&quot;">​</a></h3><h3 id="_21、标记整理算法-mark-compact" tabindex="-1">21、标记整理算法(Mark-Compact) <a class="header-anchor" href="#_21、标记整理算法-mark-compact" aria-label="Permalink to &quot;21、标记整理算法(Mark-Compact)&quot;">​</a></h3><h3 id="_22、面向对象的语言有那些特征" tabindex="-1">22、面向对象的语言有那些特征？ <a class="header-anchor" href="#_22、面向对象的语言有那些特征" aria-label="Permalink to &quot;22、面向对象的语言有那些特征？&quot;">​</a></h3><h3 id="_23、spring中自动装配的方式有哪些" tabindex="-1">23、Spring中自动装配的方式有哪些？ <a class="header-anchor" href="#_23、spring中自动装配的方式有哪些" aria-label="Permalink to &quot;23、Spring中自动装配的方式有哪些？&quot;">​</a></h3><h3 id="_24、说出-5-个-jdk-1-8-引入的新特性" tabindex="-1">24、说出 5 个 JDK 1.8 引入的新特性？ <a class="header-anchor" href="#_24、说出-5-个-jdk-1-8-引入的新特性" aria-label="Permalink to &quot;24、说出 5 个 JDK 1.8 引入的新特性？&quot;">​</a></h3><h3 id="_25、hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现" tabindex="-1">25、HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现 <a class="header-anchor" href="#_25、hashmap在jdk1-7和jdk1-8中有哪些不同-hashmap的底层实现" aria-label="Permalink to &quot;25、HashMap在JDK1.7和JDK1.8中有哪些不同？HashMap的底层实现&quot;">​</a></h3><h3 id="_26、指出下面程序的运行结果" tabindex="-1">26、指出下面程序的运行结果 <a class="header-anchor" href="#_26、指出下面程序的运行结果" aria-label="Permalink to &quot;26、指出下面程序的运行结果&quot;">​</a></h3><h3 id="_27、线程类的构造方法、静态块是被哪个线程调用的" tabindex="-1">27、线程类的构造方法、静态块是被哪个线程调用的 <a class="header-anchor" href="#_27、线程类的构造方法、静态块是被哪个线程调用的" aria-label="Permalink to &quot;27、线程类的构造方法、静态块是被哪个线程调用的&quot;">​</a></h3><h3 id="_28、jvm-的内存模型以及分区情况和作用" tabindex="-1">28、JVM 的内存模型以及分区情况和作用 <a class="header-anchor" href="#_28、jvm-的内存模型以及分区情况和作用" aria-label="Permalink to &quot;28、JVM 的内存模型以及分区情况和作用&quot;">​</a></h3><h3 id="_29、数组实例化有几种方式" tabindex="-1">29、数组实例化有几种方式？ <a class="header-anchor" href="#_29、数组实例化有几种方式" aria-label="Permalink to &quot;29、数组实例化有几种方式？&quot;">​</a></h3><h3 id="_30、重定向和请求转发的区别" tabindex="-1">30、重定向和请求转发的区别？ <a class="header-anchor" href="#_30、重定向和请求转发的区别" aria-label="Permalink to &quot;30、重定向和请求转发的区别？&quot;">​</a></h3><h3 id="_31、uml中有哪些常用的图" tabindex="-1">31、UML中有哪些常用的图？ <a class="header-anchor" href="#_31、uml中有哪些常用的图" aria-label="Permalink to &quot;31、UML中有哪些常用的图？&quot;">​</a></h3><h3 id="_32、多线程中-synchronized-锁升级的原理是什么" tabindex="-1">32、多线程中 synchronized 锁升级的原理是什么？ <a class="header-anchor" href="#_32、多线程中-synchronized-锁升级的原理是什么" aria-label="Permalink to &quot;32、多线程中 synchronized 锁升级的原理是什么？&quot;">​</a></h3><h3 id="_33、抽象类必须要有抽象方法吗" tabindex="-1">33、抽象类必须要有抽象方法吗 <a class="header-anchor" href="#_33、抽象类必须要有抽象方法吗" aria-label="Permalink to &quot;33、抽象类必须要有抽象方法吗&quot;">​</a></h3><h3 id="_34、notify-和notifyall-有什么区别" tabindex="-1">34、notify()和notifyAll()有什么区别？ <a class="header-anchor" href="#_34、notify-和notifyall-有什么区别" aria-label="Permalink to &quot;34、notify()和notifyAll()有什么区别？&quot;">​</a></h3><h3 id="_35、redux与mobx的区别" tabindex="-1">35、redux与mobx的区别? <a class="header-anchor" href="#_35、redux与mobx的区别" aria-label="Permalink to &quot;35、redux与mobx的区别?&quot;">​</a></h3><h3 id="_36、用-java-写一个线程安全的单例模式-singleton" tabindex="-1">36、用 Java 写一个线程安全的单例模式（Singleton）？ <a class="header-anchor" href="#_36、用-java-写一个线程安全的单例模式-singleton" aria-label="Permalink to &quot;36、用 Java 写一个线程安全的单例模式（Singleton）？&quot;">​</a></h3><h3 id="_37、访问修饰符public-private-protected-以及不写-默认-时的区别" tabindex="-1">37、访问修饰符public,private,protected,以及不写（默认）时的区别？ <a class="header-anchor" href="#_37、访问修饰符public-private-protected-以及不写-默认-时的区别" aria-label="Permalink to &quot;37、访问修饰符public,private,protected,以及不写（默认）时的区别？&quot;">​</a></h3><h3 id="_38、如何边遍历边移除-collection-中的元素" tabindex="-1">38、如何边遍历边移除 Collection 中的元素？ <a class="header-anchor" href="#_38、如何边遍历边移除-collection-中的元素" aria-label="Permalink to &quot;38、如何边遍历边移除 Collection 中的元素？&quot;">​</a></h3><h3 id="_39、synchronizedmap-和-concurrenthashmap-有什么区别" tabindex="-1">39、SynchronizedMap 和 ConcurrentHashMap 有什么区别？ <a class="header-anchor" href="#_39、synchronizedmap-和-concurrenthashmap-有什么区别" aria-label="Permalink to &quot;39、SynchronizedMap 和 ConcurrentHashMap 有什么区别？&quot;">​</a></h3><h3 id="_40、java-中-抽象类与接口之间有什么不同" tabindex="-1">40、Java 中，抽象类与接口之间有什么不同？ <a class="header-anchor" href="#_40、java-中-抽象类与接口之间有什么不同" aria-label="Permalink to &quot;40、Java 中，抽象类与接口之间有什么不同？&quot;">​</a></h3>`,71),n=[s];function l(h,i,E,c,p,d){return e(),o("div",null,n)}const A=a(r,[["render",l]]);export{m as __pageData,A as default};
