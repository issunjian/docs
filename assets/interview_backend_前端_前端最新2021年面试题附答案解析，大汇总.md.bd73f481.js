import{_ as a,o as s,c as e,V as n}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端最新2021年面试题附答案解析，大汇总.md","filePath":"interview/backend/前端/前端最新2021年面试题附答案解析，大汇总.md"}'),o={name:"interview/backend/前端/前端最新2021年面试题附答案解析，大汇总.md"},l=n(`<h3 id="_1、promise" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1promise###" target="_blank" rel="noreferrer">1、promise###</a> <a class="header-anchor" href="#_1、promise" aria-label="Permalink to &quot;[1、promise###](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#1promise###)&quot;">​</a></h3><p>Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。</p><h3 id="_2、display-inline-block-什么时候会显示间隙" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2display:inline-block-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%98%BE%E7%A4%BA%E9%97%B4%E9%9A%99" target="_blank" rel="noreferrer">2、display:inline-block 什么时候会显示间隙？</a> <a class="header-anchor" href="#_2、display-inline-block-什么时候会显示间隙" aria-label="Permalink to &quot;[2、display:inline-block 什么时候会显示间隙？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#2display:inline-block-什么时候会显示间隙)&quot;">​</a></h3><p><strong>1、</strong> 有空格时候会有间隙 解决：移除空格</p><p><strong>2、</strong> margin正值的时候 解决：margin使用负值</p><p><strong>3、</strong> 使用font-size时候 解决：font-size:0、letter-spacing、word-spacing</p><h3 id="_3、如何实现浏览器内多个标签页之间的通信" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1**" target="_blank" rel="noreferrer">3、如何实现浏览器内多个标签页之间的通信?**</a> <a class="header-anchor" href="#_3、如何实现浏览器内多个标签页之间的通信" aria-label="Permalink to &quot;[3、如何实现浏览器内多个标签页之间的通信?**](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#3如何实现浏览器内多个标签页之间的通信**)&quot;">​</a></h3><p><strong>1、</strong> WebSocket SharedWorker</p><p><strong>2、</strong> 也可以调用 localstorge、cookies 等本地存储方式。 localstorge 在另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，我们通过监听事件，控制它的值来进行页面信息通信。</p><p>注意：Safari 在无痕模式下设置 localstorge 值时会抛出QuotaExceededError 的异常</p><h3 id="_4、谈谈this对象的理解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4%E8%B0%88%E8%B0%88this%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3" target="_blank" rel="noreferrer">4、谈谈This对象的理解</a> <a class="header-anchor" href="#_4、谈谈this对象的理解" aria-label="Permalink to &quot;[4、谈谈This对象的理解](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#4谈谈this对象的理解)&quot;">​</a></h3><p><strong>1、</strong> <code>this</code>总是指向函数的直接调用者（而非间接调用者）</p><p><strong>2、</strong> 如果有<code>new</code>关键字，<code>this</code>指向<code>new</code>出来的那个对象</p><p><strong>3、</strong> 在事件中，<code>this</code>指向触发这个事件的对象，特殊的是，<code>IE</code>中的<code>attachEvent</code>中的<code>this</code>总是指向全局对象<code>Window</code></p><h3 id="_5、水平垂直居中" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD" target="_blank" rel="noreferrer">5、水平垂直居中</a> <a class="header-anchor" href="#_5、水平垂直居中" aria-label="Permalink to &quot;[5、水平垂直居中](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#5水平垂直居中)&quot;">​</a></h3><p><strong>Flex布局</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">display: flex  //设置Flex模式</span></span>
<span class="line"><span style="color:#f6f6f4;">flex-direction: column  //决定元素是横排还是竖着排</span></span>
<span class="line"><span style="color:#f6f6f4;">flex-wrap: wrap     //决定元素换行格式</span></span>
<span class="line"><span style="color:#f6f6f4;">justify-content: space-between  //同一排下对齐方式，空格如何隔开各个元素</span></span>
<span class="line"><span style="color:#f6f6f4;">align-items: center     //同一排下元素如何对齐</span></span>
<span class="line"><span style="color:#f6f6f4;">align-content: space-between    //多行对齐方式</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">display: flex  //设置Flex模式</span></span>
<span class="line"><span style="color:#24292e;">flex-direction: column  //决定元素是横排还是竖着排</span></span>
<span class="line"><span style="color:#24292e;">flex-wrap: wrap     //决定元素换行格式</span></span>
<span class="line"><span style="color:#24292e;">justify-content: space-between  //同一排下对齐方式，空格如何隔开各个元素</span></span>
<span class="line"><span style="color:#24292e;">align-items: center     //同一排下元素如何对齐</span></span>
<span class="line"><span style="color:#24292e;">align-content: space-between    //多行对齐方式</span></span></code></pre></div><p><strong>水平居中</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">行内元素：display: inline-block;</span></span>
<span class="line"><span style="color:#f6f6f4;">块级元素：margin: 0 auto;</span></span>
<span class="line"><span style="color:#f6f6f4;">Flex: display: flex; justify-content: center</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">行内元素：display: inline-block;</span></span>
<span class="line"><span style="color:#24292e;">块级元素：margin: 0 auto;</span></span>
<span class="line"><span style="color:#24292e;">Flex: display: flex; justify-content: center</span></span></code></pre></div><p><strong>垂直居中</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">行高 = 元素高：line-height: height</span></span>
<span class="line"><span style="color:#f6f6f4;">flex: display: flex; align-item: center</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">行高 = 元素高：line-height: height</span></span>
<span class="line"><span style="color:#24292e;">flex: display: flex; align-item: center</span></span></code></pre></div><h3 id="_6、为什么要初始化css样式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%9D%E5%A7%8B%E5%8C%96css%E6%A0%B7%E5%BC%8F" target="_blank" rel="noreferrer">6、为什么要初始化CSS样式</a> <a class="header-anchor" href="#_6、为什么要初始化css样式" aria-label="Permalink to &quot;[6、为什么要初始化CSS样式](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#6为什么要初始化css样式)&quot;">​</a></h3><p>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。</p><h3 id="_7、bfc" tabindex="-1">7、BFC <a class="header-anchor" href="#_7、bfc" aria-label="Permalink to &quot;7、BFC&quot;">​</a></h3><p><strong>什么是BFC?</strong></p><p>BFC格式化上下文，它是一个独立的渲染区域，让处于 BFC 内部的元素和外部的元素相互隔离，使内外元素的定位不会相互影响</p><p><strong>如何产生BFC?</strong></p><p>display: inline-block</p><p>position: absolute/fixed</p><p><strong>BFC作用</strong></p><p>BFC最大的一个作用就是：在页面上有一个独立隔离容器，容器内的元素和容器外的元素布局不会相互影响</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">解决上外边距重叠;重叠的两个box都开启bfc;</span></span>
<span class="line"><span style="color:#f6f6f4;">解决浮动引起高度塌陷;容器盒子开启bfc</span></span>
<span class="line"><span style="color:#f6f6f4;">解决文字环绕图片;左边图片div,右边文字容器p,将p容器开启bfc</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">解决上外边距重叠;重叠的两个box都开启bfc;</span></span>
<span class="line"><span style="color:#24292e;">解决浮动引起高度塌陷;容器盒子开启bfc</span></span>
<span class="line"><span style="color:#24292e;">解决文字环绕图片;左边图片div,右边文字容器p,将p容器开启bfc</span></span></code></pre></div><h3 id="_8、http状态码" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8http%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="noreferrer">8、HTTP状态码</a> <a class="header-anchor" href="#_8、http状态码" aria-label="Permalink to &quot;[8、HTTP状态码](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#8http状态码)&quot;">​</a></h3><p><strong>区分状态码</strong></p><p>1××开头 - 信息提示</p><p>2××开头 - 请求成功</p><p>3××开头 - 请求被重定向</p><p>4××开头 - 请求错误</p><p>5××开头 - 服务器错误</p><p><strong>常见状态码</strong></p><p>200 - 请求成功，Ajax 接受到信息了</p><p>400 - 服务器不理解请求</p><p>403 - 服务器拒绝请求</p><p>404 - 请求页面错误</p><p>500 - 服务器内部错误，无法完成请求</p><h3 id="_9、function-prototype-bind-的用途是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9functionprototypebind-%E7%9A%84%E7%94%A8%E9%80%94%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">9、Function.prototype.bind 的用途是什么？</a> <a class="header-anchor" href="#_9、function-prototype-bind-的用途是什么" aria-label="Permalink to &quot;[9、Function.prototype.bind 的用途是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#9functionprototypebind-的用途是什么)&quot;">​</a></h3><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">import React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#f6f6f4;">class MyComponent extends React.Component {</span></span>
<span class="line"><span style="color:#f6f6f4;">   constructor(props){</span></span>
<span class="line"><span style="color:#f6f6f4;">      super(props); </span></span>
<span class="line"><span style="color:#f6f6f4;">      this.state = {</span></span>
<span class="line"><span style="color:#f6f6f4;">         value : &quot;&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">      }  </span></span>
<span class="line"><span style="color:#f6f6f4;">      this.handleChange = this.handleChange.bind(this); </span></span>
<span class="line"><span style="color:#f6f6f4;">      // 将 “handleChange” 方法绑定到 “MyComponent” 组件</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">   handleChange(e){</span></span>
<span class="line"><span style="color:#f6f6f4;">     //do something amazing here</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">   render(){</span></span>
<span class="line"><span style="color:#f6f6f4;">    return (</span></span>
<span class="line"><span style="color:#f6f6f4;">      &lt;&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">        &lt;input type={this.props.type}</span></span>
<span class="line"><span style="color:#f6f6f4;">                value={this.state.value}</span></span>
<span class="line"><span style="color:#f6f6f4;">             onChange={this.handleChange}                      </span></span>
<span class="line"><span style="color:#f6f6f4;">          /&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">      &lt;/&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    )</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import React from &#39;react&#39;;</span></span>
<span class="line"><span style="color:#24292e;">class MyComponent extends React.Component {</span></span>
<span class="line"><span style="color:#24292e;">   constructor(props){</span></span>
<span class="line"><span style="color:#24292e;">      super(props); </span></span>
<span class="line"><span style="color:#24292e;">      this.state = {</span></span>
<span class="line"><span style="color:#24292e;">         value : &quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">      }  </span></span>
<span class="line"><span style="color:#24292e;">      this.handleChange = this.handleChange.bind(this); </span></span>
<span class="line"><span style="color:#24292e;">      // 将 “handleChange” 方法绑定到 “MyComponent” 组件</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   handleChange(e){</span></span>
<span class="line"><span style="color:#24292e;">     //do something amazing here</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">   render(){</span></span>
<span class="line"><span style="color:#24292e;">    return (</span></span>
<span class="line"><span style="color:#24292e;">      &lt;&gt;</span></span>
<span class="line"><span style="color:#24292e;">        &lt;input type={this.props.type}</span></span>
<span class="line"><span style="color:#24292e;">                value={this.state.value}</span></span>
<span class="line"><span style="color:#24292e;">             onChange={this.handleChange}                      </span></span>
<span class="line"><span style="color:#24292e;">          /&gt;</span></span>
<span class="line"><span style="color:#24292e;">      &lt;/&gt;</span></span>
<span class="line"><span style="color:#24292e;">    )</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_10、css优化、提高性能的方法有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10css%E4%BC%98%E5%8C%96%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">10、CSS优化、提高性能的方法有哪些？</a> <a class="header-anchor" href="#_10、css优化、提高性能的方法有哪些" aria-label="Permalink to &quot;[10、CSS优化、提高性能的方法有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题附答案解析，大汇总.md#10css优化提高性能的方法有哪些)&quot;">​</a></h3><p><strong>1、</strong> 避免过度约束</p><p><strong>2、</strong> 避免后代选择符</p><p><strong>3、</strong> 避免链式选择符</p><p><strong>4、</strong> 使用紧凑的语法</p><p><strong>5、</strong> 避免不必要的命名空间</p><p><strong>6、</strong> 避免不必要的重复</p><p><strong>7、</strong> 最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</p><p><strong>8、</strong> 避免！important，可以选择其他选择器</p><p><strong>9、</strong> 尽可能的精简规则，你可以合并不同类里的重复规则</p><h3 id="_11、什么是闭包-堆栈溢出有什么区别-内存泄漏-那些操作会造成内存泄漏-怎么样防止内存泄漏" tabindex="-1">11、什么是闭包? 堆栈溢出有什么区别？ 内存泄漏? 那些操作会造成内存泄漏？怎么样防止内存泄漏？ <a class="header-anchor" href="#_11、什么是闭包-堆栈溢出有什么区别-内存泄漏-那些操作会造成内存泄漏-怎么样防止内存泄漏" aria-label="Permalink to &quot;11、什么是闭包? 堆栈溢出有什么区别？ 内存泄漏? 那些操作会造成内存泄漏？怎么样防止内存泄漏？&quot;">​</a></h3><h3 id="_12、事件流-事件捕获-事件冒泡" tabindex="-1">12、事件流?事件捕获？事件冒泡？ <a class="header-anchor" href="#_12、事件流-事件捕获-事件冒泡" aria-label="Permalink to &quot;12、事件流?事件捕获？事件冒泡？&quot;">​</a></h3><h3 id="_13、介绍js的基本数据类型" tabindex="-1">13、介绍js的基本数据类型 <a class="header-anchor" href="#_13、介绍js的基本数据类型" aria-label="Permalink to &quot;13、介绍js的基本数据类型&quot;">​</a></h3><h3 id="_14、前端需要注意哪些-seo" tabindex="-1">14、前端需要注意哪些 SEO ？ <a class="header-anchor" href="#_14、前端需要注意哪些-seo" aria-label="Permalink to &quot;14、前端需要注意哪些 SEO ？&quot;">​</a></h3><h3 id="_15、flash、ajax-各自的优缺点-在使用中如何取舍" tabindex="-1">15、Flash、Ajax 各自的优缺点，在使用中如何取舍？ <a class="header-anchor" href="#_15、flash、ajax-各自的优缺点-在使用中如何取舍" aria-label="Permalink to &quot;15、Flash、Ajax 各自的优缺点，在使用中如何取舍？&quot;">​</a></h3><h3 id="_16、ajax中-get-和-post-有什么区别" tabindex="-1">16、ajax中 get 和 post 有什么区别? <a class="header-anchor" href="#_16、ajax中-get-和-post-有什么区别" aria-label="Permalink to &quot;16、ajax中 get 和 post 有什么区别?&quot;">​</a></h3><h3 id="_17、vue、react、angular" tabindex="-1">17、vue、react、angular <a class="header-anchor" href="#_17、vue、react、angular" aria-label="Permalink to &quot;17、vue、react、angular&quot;">​</a></h3><h3 id="_18、微信小程序原理" tabindex="-1">18、微信小程序原理 <a class="header-anchor" href="#_18、微信小程序原理" aria-label="Permalink to &quot;18、微信小程序原理&quot;">​</a></h3><h3 id="_19、常见的兼容性问题" tabindex="-1">19、常见的兼容性问题？ <a class="header-anchor" href="#_19、常见的兼容性问题" aria-label="Permalink to &quot;19、常见的兼容性问题？&quot;">​</a></h3><h3 id="_20、webpack打包原理" tabindex="-1">20、webpack打包原理 <a class="header-anchor" href="#_20、webpack打包原理" aria-label="Permalink to &quot;20、webpack打包原理&quot;">​</a></h3><h3 id="_21、什么是闭包" tabindex="-1">21、什么是闭包？ <a class="header-anchor" href="#_21、什么是闭包" aria-label="Permalink to &quot;21、什么是闭包？&quot;">​</a></h3><h3 id="_22、网页验证码是做什么的-是为了解决什么安全问题。" tabindex="-1">22、网页验证码是做什么的，是为了解决什么安全问题。 <a class="header-anchor" href="#_22、网页验证码是做什么的-是为了解决什么安全问题。" aria-label="Permalink to &quot;22、网页验证码是做什么的，是为了解决什么安全问题。&quot;">​</a></h3><h3 id="_23、javascript有哪些方法定义对象" tabindex="-1">23、javascript有哪些方法定义对象 <a class="header-anchor" href="#_23、javascript有哪些方法定义对象" aria-label="Permalink to &quot;23、javascript有哪些方法定义对象&quot;">​</a></h3><h3 id="_24、mvvm" tabindex="-1">24、MVVM <a class="header-anchor" href="#_24、mvvm" aria-label="Permalink to &quot;24、MVVM&quot;">​</a></h3><h3 id="_25、标准模式与兼容模式各有什么区别" tabindex="-1">25、标准模式与兼容模式各有什么区别？ <a class="header-anchor" href="#_25、标准模式与兼容模式各有什么区别" aria-label="Permalink to &quot;25、标准模式与兼容模式各有什么区别？&quot;">​</a></h3><h3 id="_26、用纯css创建一个三角形的原理是什么" tabindex="-1">26、用纯CSS创建一个三角形的原理是什么？ <a class="header-anchor" href="#_26、用纯css创建一个三角形的原理是什么" aria-label="Permalink to &quot;26、用纯CSS创建一个三角形的原理是什么？&quot;">​</a></h3><h3 id="_27、html全局属性-global-attribute-有哪些" tabindex="-1">27、HTML全局属性(global attribute)有哪些 <a class="header-anchor" href="#_27、html全局属性-global-attribute-有哪些" aria-label="Permalink to &quot;27、HTML全局属性(global attribute)有哪些&quot;">​</a></h3><h3 id="_28、html5的离线储存怎么使用-工作原理能不能解释一下" tabindex="-1">28、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？ <a class="header-anchor" href="#_28、html5的离线储存怎么使用-工作原理能不能解释一下" aria-label="Permalink to &quot;28、\`HTML5\`的离线储存怎么使用，工作原理能不能解释一下？&quot;">​</a></h3><h3 id="_29、gc机制是什么-为什么闭包不会被回收变量和函数" tabindex="-1">29、Gc机制是什么？为什么闭包不会被回收变量和函数？ <a class="header-anchor" href="#_29、gc机制是什么-为什么闭包不会被回收变量和函数" aria-label="Permalink to &quot;29、Gc机制是什么？为什么闭包不会被回收变量和函数？&quot;">​</a></h3><h3 id="_30、回调函数" tabindex="-1">30、回调函数? <a class="header-anchor" href="#_30、回调函数" aria-label="Permalink to &quot;30、回调函数?&quot;">​</a></h3><h3 id="_31、javascript-中的虚值是什么" tabindex="-1">31、JavaScript 中的虚值是什么？ <a class="header-anchor" href="#_31、javascript-中的虚值是什么" aria-label="Permalink to &quot;31、JavaScript 中的虚值是什么？&quot;">​</a></h3>`,79),t=[l];function p(r,c,i,h,d,E){return s(),e("div",null,t)}const b=a(o,[["render",p]]);export{u as __pageData,b as default};
