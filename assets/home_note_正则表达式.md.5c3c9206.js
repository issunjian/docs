import{_ as a,H as n,o,c as l,J as p,V as e}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"home/note/正则表达式.md","filePath":"home/note/正则表达式.md"}'),t={name:"home/note/正则表达式.md"},c=e(`<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><blockquote><p>一般用在表单验证</p></blockquote><p><a href="https://www.runoob.com/regexp/regexp-metachar.html" target="_blank" rel="noreferrer">按住 ctrl 点我啊</a></p><h2 id="作用" tabindex="-1">作用： <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用：&quot;">​</a></h2><p>​ 用来匹配字符串是否满足一定的规则。</p><h2 id="用法" tabindex="-1">用法： <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法：&quot;">​</a></h2><p>1.先创建一个正则对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 用构造函数实现</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RegExp</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">规则</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 另外一种简单的写法 ---&gt; 以字面量的方式创建对象</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">规则</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 用构造函数实现</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;规则&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 另外一种简单的写法 ---&gt; 以字面量的方式创建对象</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /规则/</span><span style="color:#24292E;">;</span></span></code></pre></div><p>2.调用方法，看是否满足条件（规律）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// test方法返回一个布尔值</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> flag </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">需要判断的字符串</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test方法返回一个布尔值</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;需要判断的字符串&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h2><p><img src="https://s2.ax1x.com/2019/09/03/nkCZxe.png" alt=""></p><p>在匹配以什么开头，什么结尾的时候，中间要加个<code>.</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">^</span><span style="color:#E7EE98;">1</span><span style="color:#FFB86C;">(</span><span style="color:#E7EE98;">aa</span><span style="color:#FFB86C;">)</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">12aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">1(aa)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12aa&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回false</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">^</span><span style="color:#E7EE98;">1</span><span style="color:#BF9EEE;">.</span><span style="color:#FFB86C;">(</span><span style="color:#E7EE98;">aa</span><span style="color:#FFB86C;">)</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">12aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">1</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">(aa)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12aa&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回true</span></span></code></pre></div><p><strong>注意一个<code>.</code>只代表一个字符</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">^</span><span style="color:#E7EE98;">1</span><span style="color:#BF9EEE;">.</span><span style="color:#FFB86C;">(</span><span style="color:#E7EE98;">aa</span><span style="color:#FFB86C;">)</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">122aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">1</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">(aa)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;122aa&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回false</span></span></code></pre></div><h3 id="数量限定" tabindex="-1">数量限定 <a class="header-anchor" href="#数量限定" aria-label="Permalink to &quot;数量限定&quot;">​</a></h3><blockquote><p>一般要配合其他规则一起使用</p></blockquote><h4 id="预定义个数" tabindex="-1">预定义个数 <a class="header-anchor" href="#预定义个数" aria-label="Permalink to &quot;预定义个数&quot;">​</a></h4><p><code>*</code> : 可以出现任意次 (0-n)</p><p><code>+</code> : 至少出现一次 (1-n)</p><p><code>?</code> : 出现<strong>0 次</strong>或者<strong>1 次</strong> (0-1)</p><p>使用<code>*</code> : 匹配以 1 开头，aa 结尾，中间可以有任意的字符</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">^</span><span style="color:#E7EE98;">1</span><span style="color:#BF9EEE;">.</span><span style="color:#F286C4;">*</span><span style="color:#FFB86C;">(</span><span style="color:#E7EE98;">aa</span><span style="color:#FFB86C;">)</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1 4564hfrthuaa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">1</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">(aa)</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1 4564hfrthuaa&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回true</span></span></code></pre></div><p>下面这个例子为什么返回 true?</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">?</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1234</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// 返回true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1234&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// 返回true</span></span></code></pre></div><p><strong>再次强调一下，正则表达式的作用是用来匹配字符串是否满足一定的规律，并不是要求字符串是什么样子的</strong></p><p>可以简单的理解为，有还是没有。上面的例子，被验证的字符串中有出现一次或者零次的数字，所以返回 true。</p><h4 id="非贪婪匹配模式" tabindex="-1">非贪婪匹配模式 <a class="header-anchor" href="#非贪婪匹配模式" aria-label="Permalink to &quot;非贪婪匹配模式&quot;">​</a></h4><blockquote><p>当<code>?</code>紧跟着其他的限制符时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#97E1F1;">[</span><span style="color:#E7EE98;">0</span><span style="color:#97E1F1;">]</span><span style="color:#F286C4;">+?</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 匹配一次</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg1 </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#97E1F1;">[</span><span style="color:#E7EE98;">0</span><span style="color:#97E1F1;">]</span><span style="color:#F286C4;">+</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// 匹配多次</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10000aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">match</span><span style="color:#F6F6F4;">(reg);</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10000aa</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">match</span><span style="color:#F6F6F4;">(reg1);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s); </span><span style="color:#7B7F8B;">// [&quot;0&quot;, index: 1, input: &quot;10000aa&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(s1); </span><span style="color:#7B7F8B;">// // [&quot;0000&quot;, index: 1, input: &quot;10000aa&quot;, groups: undefined]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">[0]</span><span style="color:#D73A49;">+?</span><span style="color:#032F62;">/</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 匹配一次</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg1 </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">[0]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 匹配多次</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;10000aa&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(reg);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;10000aa&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(reg1);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s); </span><span style="color:#6A737D;">// [&quot;0&quot;, index: 1, input: &quot;10000aa&quot;, groups: undefined]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(s1); </span><span style="color:#6A737D;">// // [&quot;0000&quot;, index: 1, input: &quot;10000aa&quot;, groups: undefined]</span></span></code></pre></div><h4 id="自定义个数" tabindex="-1">自定义个数 <a class="header-anchor" href="#自定义个数" aria-label="Permalink to &quot;自定义个数&quot;">​</a></h4><p><code>{n}</code> : 表示匹配出现 n 次</p><p><code>{n,}</code> : 表示匹配至少出现 n 次</p><p><code>{n,m}</code> : 表示匹配出现 n-m 次</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">a</span><span style="color:#F286C4;">{1}</span><span style="color:#EE6666;">/</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">1a56</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">这里和上面一样，只会关心他有没有出现1次，具体字符串是在怎么样的不管</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">1aaaaa56</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">));</span><span style="color:#7B7F8B;">//返回true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /a</span><span style="color:#D73A49;">{1}</span><span style="color:#032F62;">/</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1a56&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">这里和上面一样，只会关心他有没有出现1次，具体字符串是在怎么样的不管</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1aaaaa56&#39;</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">//返回true</span></span></code></pre></div><p>通常也要联合其他一起用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#F286C4;">^</span><span style="color:#E7EE98;">a</span><span style="color:#BF9EEE;">\\d</span><span style="color:#F286C4;">{2}</span><span style="color:#E7EE98;">b</span><span style="color:#F286C4;">$</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a123b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">a</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">b</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a123b&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//false</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">a</span><span style="color:#F286C4;">{1,}</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1aaaaa56</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回true</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">156</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /a</span><span style="color:#D73A49;">{1,}</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1aaaaa56&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回true</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;156&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回false</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> reg </span><span style="color:#F286C4;">=</span><span style="color:#E7EE98;"> </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">a</span><span style="color:#F286C4;">{1,2}</span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(reg.</span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">1aa56</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//返回true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> reg </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> /a</span><span style="color:#D73A49;">{1,2}</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(reg.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1aa56&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//返回true</span></span></code></pre></div><h3 id="其他常用元字符" tabindex="-1">其他常用元字符 <a class="header-anchor" href="#其他常用元字符" aria-label="Permalink to &quot;其他常用元字符&quot;">​</a></h3><p><img src="https://s2.ax1x.com/2019/09/03/nkCAPK.png" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>正则表达式，只能用于验证字符串是否满足条件(有还是没有)，并不是要求字符串是什么样子的。</p><p><code>\\w</code> 和 <code>\\W</code>通常用于用户名的验证，注意：<code>\\w</code>只要出现 字母、数字、下划线 其中的一种，都会返回 true。</p><p>空白字符包括 空格、回车(<code>\\r</code>) 或者 换行(<code>\\n</code>) 、缩进(<code>\\t</code>)。</p><p><code>$</code> 验证特定的字符串的时候记得加(), <code>let reg = /(aa)$/</code> 这表示验证以 aa 结尾。</p><p><code>.</code>可以匹配空格，但不能匹配<code>\\r</code> <code>\\n</code></p><p>匹配不是中文：<code>/[^\\u4e00-\\u9fa5]/</code></p><p><code>()</code>用于提升优先级，分组</p><p>在正则表达式中对空格是敏感的</p>`,52);function r(y,F,E,i,d,u){const s=n("Banner");return o(),l("div",null,[p(s),c])}const C=a(t,[["render",r]]);export{h as __pageData,C as default};
