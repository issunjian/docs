import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/rmqa.7e21baa8.png",o="/docs/assets/consumeModel.6bf79540.png",e="/docs/assets/dleger.ea7618f4.png",h=JSON.parse('{"title":"Rocket MQ","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/分布式/消息队列2.md","filePath":"java/其它/分布式/消息队列2.md"}'),t={name:"java/其它/分布式/消息队列2.md"},c=l('<h1 id="rocket-mq" tabindex="-1">Rocket MQ <a class="header-anchor" href="#rocket-mq" aria-label="Permalink to &quot;Rocket MQ&quot;">​</a></h1><p><a href="https://www.jianshu.com/p/0b4b1147366f" target="_blank" rel="noreferrer">https://www.jianshu.com/p/0b4b1147366f</a></p><hr><h2 id="rocket-mq-1" tabindex="-1">Rocket MQ <a class="header-anchor" href="#rocket-mq-1" aria-label="Permalink to &quot;Rocket MQ&quot;">​</a></h2><h3 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to &quot;基本介绍&quot;">​</a></h3><p>阿里使用 Java 开发的开源消息中间件。被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。</p><ul><li><p><strong>优势</strong>：集群和 HA 实现都很简单。在保持一定的吞吐情况下，在发生宕机和其它故障时消息丢失率更低。因为无论是同步还是异步发送，生产者都会收到实时响应。适合处理高可靠性的数据。</p></li><li><p><strong>劣势</strong>：跟 kafka 相比吞吐率稍低。</p></li></ul><h3 id="整体架构" tabindex="-1">整体架构 <a class="header-anchor" href="#整体架构" aria-label="Permalink to &quot;整体架构&quot;">​</a></h3><p><img src="'+p+'" alt="rmqa"></p><ul><li><p><code>Producer</code>: 数据生产者，向 RMQ 集群生产数据。</p></li><li><p><code>Consumer</code>：数据消费者，连接 Broker 读取生产者生产的消息。</p></li><li><p><code>Broker</code>: Kafka 的服务节点，负责接收 Producer 生产的数据，在本地磁盘对数据进行备份，并提供数据给 Consumer。为最大化吞吐量 Broker 往往只起到中转和存储的作用而不处理业务逻辑。</p></li><li><p><code>NameServer</code>: 所有机器定时向 NameServer 上报自己的状态（超时未发送被剔除），NameServer 内部通过 5 个 HashMap 保存全局信息，提供给其它机器查询。NameServer 可以部署多个，相互独立。机器需同时向多个 NameServer 上报状态信息，从而达到热备份的目的。因为结构简单，无需使用专门的 zookeeper 注册中心来提供协调服务。</p></li></ul><h3 id="消费模型" tabindex="-1">消费模型 <a class="header-anchor" href="#消费模型" aria-label="Permalink to &quot;消费模型&quot;">​</a></h3><p><img src="'+o+'" alt="rmqa"></p><p>RocketMQ 消息按照 <code>Topic</code> 和 <code>Tag</code> (可选)进行二级数据的组织和隔离，Producer/Consumer 会向指定的 Topic 甚至 Tag 收发数据。</p><p>Topic 可拥有若干个 <code>Queue</code> ，散落在不同的 Broker 上，从而达到了数据分布式存储的目的，具有水平扩展的能力。</p><p>消息均使用 message ID 唯一识别。 Rocket MQ 不对消息的格式做限制，消息 body 是二进制，需要用户完成序列化操作。用户在发送时可以设置 messageKey ，便于之后查询和跟踪。</p><p>在 RMQ 中消息的生产/消费均通过 Group （组）来完成，用来标记同一类生产/消费者，一般是集群部署。一个 Group 内可包含多个 Client （客户端）。</p><p>每个 <code>Consumer Group</code> 都会消费一个 Topic 全量的数据，彼此之间互不干扰。同一个 Consumer Group 下的 Consumer 只能消费到其中一部分 Partition ，通过多个 Consumer 可以达到并行消费的目的。Partition 数量推荐设为 Consumer 数量的整数倍，便于均分。</p><p><em>Consumer 获取消息后，只有在消息消费完成时才会向服务器返回 ack 。如果没有消费完成，则一定不会 ack 消息。</em></p><h3 id="多副本模式" tabindex="-1">多副本模式 <a class="header-anchor" href="#多副本模式" aria-label="Permalink to &quot;多副本模式&quot;">​</a></h3><p><img src="'+e+`" alt="rmqa"></p><p>RMQ 采用多副本模式，将集群分为多个 <code>dleger-group</code> ，每个 group 由 3 台或以上 broker 组成。默认使用同步复制同步刷盘，master 要将消息同步到 slave 才会返回成功，保证 master-slave 的 commitlog 一致性。</p><p>定时线程会检测各 broker 状态，当前 master 挂掉后，会触发自动选主保证集群的读写能力不受影响。选主基于 raft 协议，默认会选择 offset 较大的 slave 为主节点，防止消息丢失。</p><p>Broker部署相对复杂，Broker分为Master与Slave，一个Master可以对应多个Slave，但是一个Slave只能对应一个Master，Master与Slave的对应关系通过指定相同的Broker Name，不同的Broker Id来定义，BrokerId为0表示Master，非0表示Slave。Master也可以部署多个。</p><p>每个Broker与Name Server集群中的所有节点建立长连接，定时(每隔30s)注册Topic信息到所有Name Server。Name Server定时(每隔10s)扫描所有存活broker的连接，如果Name Server超过2分钟没有收到心跳，则Name Server断开与Broker的连接。</p><h3 id="导入依赖" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖" aria-label="Permalink to &quot;导入依赖&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">&lt;!-- 生产/消费客户端导入依赖--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#F286C4;">groupId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;rocketmq-client&lt;/</span><span style="color:#F286C4;">artifactId</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;4.3.1&lt;/</span><span style="color:#F286C4;">version</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">dependency</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 生产/消费客户端导入依赖--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.rocketmq&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;rocketmq-client&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.3.1&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><hr><h2 id="生产者" tabindex="-1">生产者 <a class="header-anchor" href="#生产者" aria-label="Permalink to &quot;生产者&quot;">​</a></h2><h3 id="生产架构" tabindex="-1">生产架构 <a class="header-anchor" href="#生产架构" aria-label="Permalink to &quot;生产架构&quot;">​</a></h3><p>在 RMQ 中消息的生产通过 ProduceGroup （生产组）完成。用来标记同一类生产者，一般是集群部署。</p><p>一个 ProduceGroup 内可包含多个 Client （客户端）。这是一个逻辑上的概念，使用唯一标识 ClientID （ClientIP + InstanceName）来相互区分，默认为 IP 地址 + 端口号。</p><p>用户创建的 Producer 类，如果 ClientID 相同将被视为同一个 Client ，在 Broker 上共用一个内部实例处理。</p><h3 id="参数配置" tabindex="-1">参数配置 <a class="header-anchor" href="#参数配置" aria-label="Permalink to &quot;参数配置&quot;">​</a></h3><p>在 DefaultMQProducer 类内，提供了以下参数给配置。</p><ol><li>继承 ClientConfig 类，和 Consumer 类互用。</li></ol><table><thead><tr><th>字段</th><th>含义</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>String namesrvAddr</td><td>nameServer 地址列表</td><td>无</td><td>必填</td></tr><tr><td>String clientIP</td><td>Client IP</td><td>本机 IP</td><td></td></tr><tr><td>String instanceName</td><td>client 名称</td><td>当前进程号</td><td></td></tr><tr><td>int clientCallbackExecutorThreads</td><td>客户端收到请求处理线程数</td><td>CPU 核数</td><td>没什么用</td></tr><tr><td>int pollNameServerInterval</td><td>轮询 nameServer 时间</td><td>30000(ms)</td><td></td></tr><tr><td>int heartbeatBrokerInterval</td><td>向 broker 发送心跳时间</td><td>30000(ms)</td><td></td></tr><tr><td>int persistConsumerOffsetInterval</td><td>持久化消费进度间隔时间</td><td>5000(ms)</td><td></td></tr><tr><td>String groupName</td><td>组名</td><td></td><td></td></tr><tr><td>String token</td><td>broker 认证 Client 身份</td><td></td><td></td></tr></tbody></table><ol start="2"><li>DefaultMQProducer 类独有</li></ol><table><thead><tr><th>字段</th><th>含义</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>String producerGroup</td><td>生产组名</td><td></td><td>只在事务消息中有用</td></tr><tr><td>String createTopicKey</td><td>如果未找到 topic 需要自动创建，所用 topic key</td><td>&quot;TBW102&quot;</td><td>没什么用</td></tr><tr><td>int defaultTopicQueueNums</td><td>如果未找到 topic 需要自动创建，默认 queue 数量</td><td>4</td><td>没什么用</td></tr><tr><td>int sendMsgTimeout</td><td>发送超时时间，超出后抛出异常</td><td>3000(ms)</td><td></td></tr><tr><td>int compressMsgBodyOverHowmuch</td><td>超出大小对消息压缩</td><td>4096(B)</td><td></td></tr><tr><td>int retryTimesWhenSendFailed</td><td>普通消息重试次数</td><td>2</td><td></td></tr><tr><td>int retryTimesWhenSendAsyncFailed</td><td>异步消息重试次数</td><td>2</td><td></td></tr><tr><td>boolean retryAnotherBrokerWhenNotStoreOK</td><td>结果不是 SEND_OK 是否当作失败重发</td><td>false</td><td></td></tr><tr><td>int maxMessageSize</td><td>最大消息尺寸</td><td>4194304(128K)</td><td></td></tr></tbody></table><h3 id="生产方式" tabindex="-1">生产方式 <a class="header-anchor" href="#生产方式" aria-label="Permalink to &quot;生产方式&quot;">​</a></h3><p>生产者生产消息通常分为同步发送、异步发送、单向发送三种方式：</p><ol><li><strong>同步生产 SYNC</strong></li></ol><p>可靠性最强，但性能最低的发送方式。应用在发送消息后将等待返回值，再进行之后的处理。</p><p>常用于重要通知邮件、报名短信通知、营销短信系统等。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JavaProducerExampleRMQ</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设定生产者</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DefaultMQProducer</span><span style="color:#F6F6F4;"> producer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQProducer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">produceGroupName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);               </span><span style="color:#7B7F8B;">// 设定生产组名</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">setNamesrvAddr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nameServer_1:9876;nameServer_2:9876</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                       </span><span style="color:#7B7F8B;">// 设定 NameServer 地址</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">setToken</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                                           </span><span style="color:#7B7F8B;">// 设定 Token</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 消息设定</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#F6F6F4;">&lt;Message&gt; messageList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ArrayList</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Message</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Message</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ,                                               </span><span style="color:#7B7F8B;">// 设定 Topic </span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tag</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                                                                    </span><span style="color:#7B7F8B;">// 设定 Tag（可选）</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ORDER-20170101-XXX</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                                                               </span><span style="color:#7B7F8B;">// 设定 Key ，用于消息查询（可选）</span></span>
<span class="line"><span style="color:#F6F6F4;">                    (</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello RocketMQ </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i).</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)                                 </span><span style="color:#7B7F8B;">// 设定 Message body </span></span>
<span class="line"><span style="color:#F6F6F4;">            );</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 可以设定消息延迟发送，如超时未支付关闭订单</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// Level 从 1 - 18 依次为 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span>
<span class="line"><span style="color:#F6F6F4;">            message.</span><span style="color:#62E884;">setDelayTimeLevel</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">);                   </span></span>
<span class="line"><span style="color:#F6F6F4;">            messageList.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(msg);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 发送消息并接收结果</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SendResult</span><span style="color:#F6F6F4;"> sendResult </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(messageList);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">%s%n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, sendResult);</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavaProducerExampleRMQ</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设定生产者</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;produceGroupName&quot;</span><span style="color:#24292E;">);               </span><span style="color:#6A737D;">// 设定生产组名</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nameServer_1:9876;nameServer_2:9876&quot;</span><span style="color:#24292E;">);                       </span><span style="color:#6A737D;">// 设定 NameServer 地址</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setToken</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">);                                                           </span><span style="color:#6A737D;">// 设定 Token</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 消息设定</span></span>
<span class="line"><span style="color:#24292E;">        List&lt;</span><span style="color:#D73A49;">Message</span><span style="color:#24292E;">&gt; messageList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;"> ,                                               </span><span style="color:#6A737D;">// 设定 Topic </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;tag&quot;</span><span style="color:#24292E;">,                                                                    </span><span style="color:#6A737D;">// 设定 Tag（可选）</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;ORDER-20170101-XXX&quot;</span><span style="color:#24292E;">,                                                               </span><span style="color:#6A737D;">// 设定 Key ，用于消息查询（可选）</span></span>
<span class="line"><span style="color:#24292E;">                    (</span><span style="color:#032F62;">&quot;Hello RocketMQ &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">)                                 </span><span style="color:#6A737D;">// 设定 Message body </span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 可以设定消息延迟发送，如超时未支付关闭订单</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// Level 从 1 - 18 依次为 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span>
<span class="line"><span style="color:#24292E;">            message.</span><span style="color:#6F42C1;">setDelayTimeLevel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);                   </span></span>
<span class="line"><span style="color:#24292E;">            messageList.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 发送消息并接收结果</span></span>
<span class="line"><span style="color:#24292E;">        SendResult sendResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(messageList);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;%s%n&quot;</span><span style="color:#24292E;">, sendResult);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li><strong>异步生产 ASYNC</strong></li></ol><p>如果希望获取更好的性能，可以通过异步实现高并发。应用将不再等待返回值，而是通过回调触发相对应的业务。异步生产一旦发送失败，将不支持重试。且不保证消息发送严格有序。</p><p>可用于注册成功后通知积分系统发放优惠券。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">AsyncProducer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DefaultMQProducer</span><span style="color:#F6F6F4;"> producer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQProducer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">producerGroupName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">setNamesrvAddr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nameServer:9876</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">setToken</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Message</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Message</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tag</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ORDER-20170101-XXX</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span></span>
<span class="line"><span style="color:#F6F6F4;">            (</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello RocketMQ </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i).</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 异步生产，发送但没有返回值，需要在回调函数上做业务处理</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(msg, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SendCallback</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> onSuccess(</span><span style="color:#97E1F1;font-style:italic;">SendResult</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">sendResult</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.printf(</span><span style="color:#F6F6F4;">sendResult</span><span style="color:#62E884;">.getMsgId());</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#62E884;"> onException(</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F6F6F4;">e</span><span style="color:#62E884;">.printStackTrace();</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;producerGroupName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nameServer:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setToken</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;token&quot;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;tag&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;ORDER-20170101-XXX&quot;</span><span style="color:#24292E;">, </span></span>
<span class="line"><span style="color:#24292E;">            (</span><span style="color:#032F62;">&quot;Hello RocketMQ &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 异步生产，发送但没有返回值，需要在回调函数上做业务处理</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(msg, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendCallback</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSuccess</span><span style="color:#24292E;">(SendResult </span><span style="color:#E36209;">sendResult</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(sendResult.</span><span style="color:#6F42C1;">getMsgId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onException</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="3"><li><strong>一次发送 ONEWAY</strong></li></ol><p>如果对于性能十分敏感，且不需要消息回复。可以发送单向消息而不返回任何结果，不能保障可靠性。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">OnewayProducer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#97E1F1;font-style:italic;">DefaultMQProducer</span><span style="color:#F6F6F4;"> producer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQProducer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">producerGroupName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">       producer.</span><span style="color:#62E884;">setNamesrvAddr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nameServer:9876</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">       producer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#97E1F1;font-style:italic;">Message</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Message</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tag</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, (</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">rocketMQ</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i).</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(RemotingHelper.DEFAULT_CHARSET));</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#7B7F8B;">// 发送单向消息，没有返回值</span></span>
<span class="line"><span style="color:#F6F6F4;">           producer.</span><span style="color:#62E884;">sendOneway</span><span style="color:#F6F6F4;">(msg);</span></span>
<span class="line"><span style="color:#F6F6F4;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">       producer.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">   }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnewayProducer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;producerGroupName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nameServer:9876&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">       producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">           Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tag&quot;</span><span style="color:#24292E;">, (</span><span style="color:#032F62;">&quot;rocketMQ&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(RemotingHelper.DEFAULT_CHARSET));</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 发送单向消息，没有返回值</span></span>
<span class="line"><span style="color:#24292E;">           producer.</span><span style="color:#6F42C1;">sendOneway</span><span style="color:#24292E;">(msg);</span></span>
<span class="line"><span style="color:#24292E;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">       producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="消费者" tabindex="-1">消费者 <a class="header-anchor" href="#消费者" aria-label="Permalink to &quot;消费者&quot;">​</a></h2><h3 id="消费架构" tabindex="-1">消费架构 <a class="header-anchor" href="#消费架构" aria-label="Permalink to &quot;消费架构&quot;">​</a></h3><p>在 RMQ 中消息的消费通过 ConsumeGroup （消费组）完成。Broker 要求同组的 Consumer 参数设置必须要一致，要不然会造成数据混乱。</p><p>一个 ConsumeGroup 内可包含多个 Client （客户端）。这是一个逻辑上的概念，使用唯一标识 ClientID （ClientIP + InstanceName）来相互区分，默认为 IP 地址 + 端口号。</p><p>用户创建的 Consumer 类，如果 ClientID 相同将视为同一个 Client ，在 Broker 上共用一个内部实例。</p><h3 id="参数配置-1" tabindex="-1">参数配置 <a class="header-anchor" href="#参数配置-1" aria-label="Permalink to &quot;参数配置&quot;">​</a></h3><p>在 DefaultMQPushConsumer 类内，提供了以下参数给配置。</p><ol><li>继承 ClientConfig 类，和 Consumer 类互用。</li></ol><table><thead><tr><th>字段</th><th>含义</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td>String namesrvAddr</td><td>nameServer 地址列表</td><td>无</td><td>必填</td></tr><tr><td>String clientIP</td><td>Client IP</td><td>本机 IP</td><td></td></tr><tr><td>String instanceName</td><td>client 名称</td><td>当前进程号</td><td></td></tr><tr><td>int clientCallbackExecutorThreads</td><td>客户端收到请求处理线程数</td><td>CPU 核数</td><td>没什么用</td></tr><tr><td>int pollNameServerInterval</td><td>轮询 nameServer 时间</td><td>30000(ms)</td><td></td></tr><tr><td>int heartbeatBrokerInterval</td><td>向 broker 发送心跳时间</td><td>30000(ms)</td><td></td></tr><tr><td>int persistConsumerOffsetInterval</td><td>持久化消费进度间隔时间</td><td>5000(ms)</td><td></td></tr><tr><td>String groupName</td><td>组名</td><td></td><td></td></tr><tr><td>String token</td><td>broker 认证 Client 身份</td><td></td><td></td></tr></tbody></table><ol start="2"><li>DefaultMQPushConsumer 类独有</li></ol><table><thead><tr><th>字段</th><th>含义</th><th>默认值</th><th>备注</th></tr></thead></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/* DefaultMQPushConsumer 类默认配置（源码） */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQPushConsumer</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> consumerGroup) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">(consumerGroup, (RPCHook)</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AllocateMessageQueueAveragely</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQPushConsumer</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> consumerGroup, </span><span style="color:#97E1F1;font-style:italic;">RPCHook</span><span style="color:#F6F6F4;"> rpcHook, </span><span style="color:#97E1F1;font-style:italic;">AllocateMessageQueueStrategy</span><span style="color:#F6F6F4;"> allocateMessageQueueStrategy) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 消费方式： </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 1. CLUSTERING 集群，组内所有消费者平均消费一组消息(支持消费失败重发，从而保证消息一定被消费；但消费者配置应一致)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 2. BROADCASTING 广播，组内所有消费者消费同样的消息</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.messageModel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> MessageModel.CLUSTERING;           </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 消费者开始消费的位置：</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 1. CONSUME_FROM_LAST_OFFSET：第一次启动从队列最后位置消费</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 2. CONSUME_FROM_FIRST_OFFSET：第一次启动从队列初始位置消费</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 3. CONSUME_FROM_TIMESTAMP：第一次启动从指定时间点位置消费</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeFromWhere </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 时间戳</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeTimestamp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> UtilAll.</span><span style="color:#62E884;">timeMillisToHumanString3</span><span style="color:#F6F6F4;">(System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1800000L</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 订阅 topic &amp; tag</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.subscription </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">HashMap</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 线程池</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeThreadMin </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeThreadMax </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">64</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.adjustThreadPoolNumsThreshold </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100000L</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 流量控制                             </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeConcurrentlyMaxSpan </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2000</span><span style="color:#F6F6F4;">;                     </span><span style="color:#7B7F8B;">// 单队列并行消费最大跨度</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullThresholdForQueue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">;                          </span><span style="color:#7B7F8B;">// 单队列最大消费消息个数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullThresholdSizeForQueue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullThresholdForTopic </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullThresholdSizeForTopic </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullInterval </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;">;                                     </span><span style="color:#7B7F8B;">// 消息拉取时间间隔</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeMessageBatchMaxSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;                        </span><span style="color:#7B7F8B;">// 线程从 consumer 单次拉取数量（顺序消费必须设为1）</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullBatchSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">;                                    </span><span style="color:#7B7F8B;">// consumer 从 broker 单次拉取数量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.postSubscriptionWhenPull </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.unitMode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.maxReconsumeTimes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.suspendCurrentQueueTimeMillis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000L</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeTimeout </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">15L</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 消费组</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumerGroup </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> consumerGroup;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.groupName </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> consumerGroup;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 集群模式下消息分配策略，默认平均分配</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.allocateMessageQueueStrategy </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> allocateMessageQueueStrategy;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 实现类，负责具体功能实现</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumerImpl </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQPushConsumerImpl</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, rpcHook);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.asyncTrackReporter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AsyncTrackReporter</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* DefaultMQPushConsumer 类默认配置（源码） */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(String consumerGroup) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">(consumerGroup, (RPCHook)</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AllocateMessageQueueAveragely</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(String consumerGroup, RPCHook rpcHook, AllocateMessageQueueStrategy allocateMessageQueueStrategy) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 消费方式： </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. CLUSTERING 集群，组内所有消费者平均消费一组消息(支持消费失败重发，从而保证消息一定被消费；但消费者配置应一致)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. BROADCASTING 广播，组内所有消费者消费同样的消息</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.messageModel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MessageModel.CLUSTERING;           </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 消费者开始消费的位置：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. CONSUME_FROM_LAST_OFFSET：第一次启动从队列最后位置消费</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. CONSUME_FROM_FIRST_OFFSET：第一次启动从队列初始位置消费</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. CONSUME_FROM_TIMESTAMP：第一次启动从指定时间点位置消费</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeFromWhere </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 时间戳</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeTimestamp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> UtilAll.</span><span style="color:#6F42C1;">timeMillisToHumanString3</span><span style="color:#24292E;">(System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1800000L</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 订阅 topic &amp; tag</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.subscription </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 线程池</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeThreadMin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeThreadMax </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">64</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.adjustThreadPoolNumsThreshold </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100000L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 流量控制                             </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeConcurrentlyMaxSpan </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">;                     </span><span style="color:#6A737D;">// 单队列并行消费最大跨度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullThresholdForQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">;                          </span><span style="color:#6A737D;">// 单队列最大消费消息个数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullThresholdSizeForQueue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullThresholdForTopic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullThresholdSizeForTopic </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullInterval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">;                                     </span><span style="color:#6A737D;">// 消息拉取时间间隔</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeMessageBatchMaxSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;                        </span><span style="color:#6A737D;">// 线程从 consumer 单次拉取数量（顺序消费必须设为1）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullBatchSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">;                                    </span><span style="color:#6A737D;">// consumer 从 broker 单次拉取数量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.postSubscriptionWhenPull </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.unitMode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.maxReconsumeTimes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.suspendCurrentQueueTimeMillis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeTimeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">15L</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 消费组</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumerGroup </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> consumerGroup;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.groupName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> consumerGroup;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 集群模式下消息分配策略，默认平均分配</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.allocateMessageQueueStrategy </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> allocateMessageQueueStrategy;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 实现类，负责具体功能实现</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumerImpl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumerImpl</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, rpcHook);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.asyncTrackReporter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncTrackReporter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="消费方式" tabindex="-1">消费方式 <a class="header-anchor" href="#消费方式" aria-label="Permalink to &quot;消费方式&quot;">​</a></h3><p>RocketMQ消息订阅有两种模式，一种是 Push 模式（MQPushConsumer），即 MQServer 主动向消费端推送；另外一种是 Pull 模式（MQPullConsumer），即消费端在需要时主动到 MQServer 拉取。</p><p>但在具体实现时，Push 和 Pull 模式都是采用消费端主动拉取的方式，即 consumer 轮询从 broker 拉取消息。</p><ol><li><strong>Push 方式</strong></li></ol><p>实现 DefaultMQPushConsumer 接口。客户端应用向 Consumer 对象注册一个 Listener 接口，Consumer 对象向 Broker 的轮询过程被封装，在收到消息后立刻回调 Listener 接口方法唤醒客户端应用来消费。对用户而言，感觉消息是被推送过来的，使用起来非常便捷。</p><p>Push 模式最大的问题是慢消费。如果消费者的速度比发送者的速度慢很多，势必造成消息在 Broker 的堆积。尤其是消息无法被 Consumer 处理时。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JavaConsumerExampleRMQ</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 设定消费者</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DefaultMQPushConsumer</span><span style="color:#F6F6F4;"> consumer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQPushConsumer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">CG-consumer_test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">// 设定消费组名</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setNamesrvAddr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nameServer:9876;nameServer_2:9876</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                           </span><span style="color:#7B7F8B;">// 设定 NameServer 地址</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setToken</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                                             </span><span style="color:#7B7F8B;">// 设定 Token</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setConsumeFromWhere</span><span style="color:#F6F6F4;">(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);               </span><span style="color:#7B7F8B;">// 设定从最开始处消费</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setConsumeMessageBatchMaxSize</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);                                             </span><span style="color:#7B7F8B;">// 设定线程最大消费数量，默认为 1 （50 条消息将分给 5 个线程处理）</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">subscribe</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">stream_rmq_topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                                         </span><span style="color:#7B7F8B;">// 设定订阅的 topic 和 tag（ * 表示全部）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 注册消息监听，输入参数类型</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1. MessageListenerConcurrently 接口：不保证顺序消费</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2. MessageListenerOrderly 接口：保证分区内消息被顺序消费</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">registerMessageListener</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MessageListenerConcurrently</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">ConsumeConcurrentlyStatus</span><span style="color:#62E884;"> consumeMessage(</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#62E884;">&lt;</span><span style="color:#F6F6F4;">MessageExt</span><span style="color:#62E884;">&gt; </span><span style="color:#FFB86C;font-style:italic;">msgs</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">ConsumeConcurrentlyContext</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">for</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">MessageExt</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">msg</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">:</span><span style="color:#62E884;"> msgs) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F286C4;">try</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#F6F6F4;">Thread</span><span style="color:#62E884;">.currentThread().getName() </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> Receive New Messages: </span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> String</span><span style="color:#F6F6F4;">(msg.</span><span style="color:#62E884;">getBody</span><span style="color:#F6F6F4;">())</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                    }</span><span style="color:#F286C4;">catch</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">throwable</span><span style="color:#62E884;">){</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exception happened</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">logger</span><span style="color:#62E884;">.error(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">failed to process,msg:{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">,msg,throwable);</span></span>
<span class="line"><span style="color:#62E884;">                    }</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// 返回成功，消息会被ACK</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">ConsumeConcurrentlyStatus</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">CONSUME_SUCCESS</span><span style="color:#62E884;">;</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 启动订阅</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Consumer Started.%n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavaConsumerExampleRMQ</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 设定消费者</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQPushConsumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CG-consumer_test&quot;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">// 设定消费组名</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nameServer:9876;nameServer_2:9876&quot;</span><span style="color:#24292E;">);                           </span><span style="color:#6A737D;">// 设定 NameServer 地址</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setToken</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Token&quot;</span><span style="color:#24292E;">);                                                             </span><span style="color:#6A737D;">// 设定 Token</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setConsumeFromWhere</span><span style="color:#24292E;">(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);               </span><span style="color:#6A737D;">// 设定从最开始处消费</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setConsumeMessageBatchMaxSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);                                             </span><span style="color:#6A737D;">// 设定线程最大消费数量，默认为 1 （50 条消息将分给 5 个线程处理）</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stream_rmq_topic&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">);                                         </span><span style="color:#6A737D;">// 设定订阅的 topic 和 tag（ * 表示全部）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 注册消息监听，输入参数类型</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1. MessageListenerConcurrently 接口：不保证顺序消费</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2. MessageListenerOrderly 接口：保证分区内消息被顺序消费</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">registerMessageListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListenerConcurrently</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConsumeConcurrentlyStatus </span><span style="color:#6F42C1;">consumeMessage</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">MessageExt</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">msgs</span><span style="color:#24292E;">, ConsumeConcurrentlyContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MessageExt msg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> msgs) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; Receive New Messages: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">throwable</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exception happened&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to process,msg:{}&quot;</span><span style="color:#24292E;">,msg,throwable);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 返回成功，消息会被ACK</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 启动订阅</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Consumer Started.%n&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li><strong>Pull 方式</strong></li></ol><p>实现 DefaultMQPullConsumer 接口。应用主动调用 Consumer 的 pull 方法从 Broker 获取消息。需要自己维护 MessageQueue 与 Offset ，建议只有必要时使用。</p><p>Pull 方式下 Consumer 可以按需消费，不用频繁接收无法处理的消息。而 Broker 堆积消息也会相对简单，无需记录每一个要发送消息的状态，只需要维护所有消息的队列和偏移量就可以。所以对于慢消费，消息量有限且到来的速度不均匀的情况比较合适。</p><p>消息延迟与忙等是 Pull 模式最大的短板。业界较成熟的做法是从短时间开始（不会对 broker 有太大负担），然后指数级增长等待。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">PullConsumer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Map</span><span style="color:#F6F6F4;">&lt;MessageQueue, Long&gt; OFFSET_TABLE </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;MessageQueue, Long&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">MQClientException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DefaultMQPullConsumer</span><span style="color:#F6F6F4;"> consumer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQPullConsumer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ConsumerGroupName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Set</span><span style="color:#F6F6F4;">&lt;MessageQueue&gt; mqs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> consumer.</span><span style="color:#62E884;">fetchSubscribeMessageQueues</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">TopicTest</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">MessageQueue</span><span style="color:#F6F6F4;"> mq </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> mqs) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Consume from the queue: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> mq);</span></span>
<span class="line"><span style="color:#F6F6F4;">            SINGLE_MQ</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">PullResult</span><span style="color:#F6F6F4;"> pullResult </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">                        consumer.</span><span style="color:#62E884;">pullBlockIfNotFound</span><span style="color:#F6F6F4;">(mq, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#62E884;">getMessageQueueOffset</span><span style="color:#F6F6F4;">(mq), </span><span style="color:#BF9EEE;">32</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Result: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> pullResult);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#62E884;">putMessageQueueOffset</span><span style="color:#F6F6F4;">(mq, pullResult.</span><span style="color:#62E884;">getNextBeginOffset</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (pullResult.</span><span style="color:#62E884;">getPullStatus</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> FOUND</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> NO_MATCHED_MSG</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> NO_NEW_MSG</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;"> SINGLE_MQ;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> OFFSET_ILLEGAL</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">default:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMessageQueueOffset</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">MessageQueue</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">mq</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Long</span><span style="color:#F6F6F4;"> offset </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> OFFSET_TABLE.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(mq);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (offset </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> offset;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">putMessageQueueOffset</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">MessageQueue</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">mq</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">offset</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        OFFSET_TABLE.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(mq, offset);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PullConsumer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">MessageQueue</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt; OFFSET_TABLE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">MessageQueue</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> MQClientException {</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQPullConsumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPullConsumer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ConsumerGroupName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Set&lt;</span><span style="color:#D73A49;">MessageQueue</span><span style="color:#24292E;">&gt; mqs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> consumer.</span><span style="color:#6F42C1;">fetchSubscribeMessageQueues</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;TopicTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MessageQueue mq </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> mqs) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Consume from the queue: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> mq);</span></span>
<span class="line"><span style="color:#24292E;">            SINGLE_MQ</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    PullResult pullResult </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                        consumer.</span><span style="color:#6F42C1;">pullBlockIfNotFound</span><span style="color:#24292E;">(mq, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">getMessageQueueOffset</span><span style="color:#24292E;">(mq), </span><span style="color:#005CC5;">32</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> pullResult);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">putMessageQueueOffset</span><span style="color:#24292E;">(mq, pullResult.</span><span style="color:#6F42C1;">getNextBeginOffset</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (pullResult.</span><span style="color:#6F42C1;">getPullStatus</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> FOUND</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NO_MATCHED_MSG</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> NO_NEW_MSG</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> SINGLE_MQ;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> OFFSET_ILLEGAL</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMessageQueueOffset</span><span style="color:#24292E;">(MessageQueue </span><span style="color:#E36209;">mq</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Long offset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> OFFSET_TABLE.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(mq);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (offset </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> offset;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">putMessageQueueOffset</span><span style="color:#24292E;">(MessageQueue </span><span style="color:#E36209;">mq</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#E36209;">offset</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        OFFSET_TABLE.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(mq, offset);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>参考资料</p><p><a href="https://dbaplus.cn/news-21-1123-1.html" target="_blank" rel="noreferrer">https://dbaplus.cn/news-21-1123-1.html</a></p></blockquote><h3 id="执行流程" tabindex="-1">执行流程 <a class="header-anchor" href="#执行流程" aria-label="Permalink to &quot;执行流程&quot;">​</a></h3><p>Consumer 启动后主要执行以下流程：</p><ol><li>初始化一个 RebalanceImpl 对象做 rebalance 操作：确认 consumer 负责处理哪些 queue 的消息，默认采用平均分配策略(AVG)。</li><li>RebalanceImpl 到 broker 拉取指定 queue 的消息，然后把消息按照 queueId 放到对应的本地的 ProcessQueue 缓存中。拉取消息实际是调用 DefaultMQPushConsumerImpl 类下的 pullMessage 方法进行消息的拉取。</li><li>ConsumeMessageService 调用 listener 处理消息，处理成功后清除掉。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">() throws MQClientException {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.serviceState) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> CREATE_JUST</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.serviceState </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ServiceState.START_FAILED;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//1、基本的参数检查，group name不能是DEFAULT_CONSUMER</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">checkConfig</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//2、将DefaultMQPushConsumer的订阅信息copy到RebalanceService中</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//如果是cluster模式，如果订阅了topic,则自动订阅%RETRY%topic</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">copySubscription</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//3、修改InstanceName参数值为PID</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getMessageModel</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> MessageModel.CLUSTERING) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">changeInstanceNameToPID</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//4、新建一个MQClientInstance,客户端管理类，所有的i/o类操作由它管理</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//缓存客户端和topic信息，各种service</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//一个进程只有一个实例</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> MQClientManager.</span><span style="color:#62E884;">getInstance</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getAndCreateMQClientInstance</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.rpcHook);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.rebalanceImpl.</span><span style="color:#62E884;">setConsumerGroup</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.rebalanceImpl.</span><span style="color:#62E884;">setMessageModel</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getMessageModel</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//5、Queue分配策略，默认AVG</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.rebalanceImpl.</span><span style="color:#62E884;">setAllocateMessageQueueStrategy</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getAllocateMessageQueueStrategy</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.rebalanceImpl.</span><span style="color:#62E884;">setmQClientFactory</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//6、PullRequest封装实现类，封装了和broker的通信接口</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullAPIWrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">PullAPIWrapper</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">                    mQClientFactory,</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">(), </span><span style="color:#62E884;">isUnitMode</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//7、消息被客户端过滤时会回调hook</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.pullAPIWrapper.</span><span style="color:#62E884;">registerFilterMessageHook</span><span style="color:#F6F6F4;">(filterMessageHookList);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//8、consumer客户端消费offset持久化接口</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getOffsetStore</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.offsetStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getOffsetStore</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">switch</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getMessageModel</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> BROADCASTING</span><span style="color:#F286C4;">:</span><span style="color:#7B7F8B;">//广播消息本地持久化offset</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.offsetStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">LocalFileOffsetStore</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> CLUSTERING</span><span style="color:#F286C4;">:</span><span style="color:#7B7F8B;">//集群模式持久化到broker</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.offsetStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RemoteBrokerOffsetStore</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">default:</span></span>
<span class="line"><span style="color:#F6F6F4;">                            </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">setOffsetStore</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.offsetStore);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//9、如果是本地持久化会从文件中load</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.offsetStore.</span><span style="color:#62E884;">load</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//10、消费服务，顺序和并发消息逻辑不同,接收消息并调用listener消费，处理消费结果</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getMessageListenerInner</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> MessageListenerOrderly) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeOrderly </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeMessageService </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ConsumeMessageOrderlyService</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, (MessageListenerOrderly) </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getMessageListenerInner</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getMessageListenerInner</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> MessageListenerConcurrently) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeOrderly </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeMessageService </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ConsumeMessageConcurrentlyService</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, (MessageListenerConcurrently) </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getMessageListenerInner</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//11、只启动了清理等待处理消息服务</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeMessageService.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//12、注册（缓存）consumer，保证CID单例</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> registerOK </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mQClientFactory.</span><span style="color:#62E884;">registerConsumer</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">(), </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">registerOK) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.serviceState </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ServiceState.CREATE_JUST;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.consumeMessageService.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MQClientException</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The consumer group[</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">] has been created before, specify another name please.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> FAQUrl.</span><span style="color:#62E884;">suggestTodo</span><span style="color:#F6F6F4;">(FAQUrl.GROUP_NAME_DUPLICATE_URL),</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">//13、启动MQClientInstance，会启动PullMessageService和RebalanceService</span></span>
<span class="line"><span style="color:#F6F6F4;">                mQClientFactory.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                log.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">the consumer [{}] start OK.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.defaultMQPushConsumer.</span><span style="color:#62E884;">getConsumerGroup</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.serviceState </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ServiceState.RUNNING;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> RUNNING</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> START_FAILED</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">case</span><span style="color:#F6F6F4;"> SHUTDOWN_ALREADY</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                ...</span></span>
<span class="line"><span style="color:#F6F6F4;">                ...</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">default:</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//14、从NameServer更新topic路由和订阅信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">updateTopicSubscribeInfoWhenSubscriptionChanged</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory.</span><span style="color:#62E884;">checkClientInBroker</span><span style="color:#F6F6F4;">();</span><span style="color:#7B7F8B;">//如果是SQL过滤，检查broker是否支持SQL过滤</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//15、发送心跳，同步consumer配置到broker,同步FilterClass到FilterServer(PushConsumer)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory.</span><span style="color:#62E884;">sendHeartbeatToAllBrokerWithLock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//16、做一次re-balance</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mQClientFactory.</span><span style="color:#62E884;">rebalanceImmediately</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">() throws MQClientException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceState) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CREATE_JUST</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceState.START_FAILED;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//1、基本的参数检查，group name不能是DEFAULT_CONSUMER</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">checkConfig</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//2、将DefaultMQPushConsumer的订阅信息copy到RebalanceService中</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//如果是cluster模式，如果订阅了topic,则自动订阅%RETRY%topic</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">copySubscription</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//3、修改InstanceName参数值为PID</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getMessageModel</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> MessageModel.CLUSTERING) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">changeInstanceNameToPID</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//4、新建一个MQClientInstance,客户端管理类，所有的i/o类操作由它管理</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//缓存客户端和topic信息，各种service</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//一个进程只有一个实例</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> MQClientManager.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getAndCreateMQClientInstance</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rpcHook);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rebalanceImpl.</span><span style="color:#6F42C1;">setConsumerGroup</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rebalanceImpl.</span><span style="color:#6F42C1;">setMessageModel</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getMessageModel</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//5、Queue分配策略，默认AVG</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rebalanceImpl.</span><span style="color:#6F42C1;">setAllocateMessageQueueStrategy</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getAllocateMessageQueueStrategy</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.rebalanceImpl.</span><span style="color:#6F42C1;">setmQClientFactory</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//6、PullRequest封装实现类，封装了和broker的通信接口</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullAPIWrapper </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PullAPIWrapper</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                    mQClientFactory,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">isUnitMode</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//7、消息被客户端过滤时会回调hook</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pullAPIWrapper.</span><span style="color:#6F42C1;">registerFilterMessageHook</span><span style="color:#24292E;">(filterMessageHookList);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//8、consumer客户端消费offset持久化接口</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getOffsetStore</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.offsetStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getOffsetStore</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getMessageModel</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> BROADCASTING</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//广播消息本地持久化offset</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.offsetStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LocalFileOffsetStore</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> CLUSTERING</span><span style="color:#D73A49;">:</span><span style="color:#6A737D;">//集群模式持久化到broker</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.offsetStore </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RemoteBrokerOffsetStore</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">setOffsetStore</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.offsetStore);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//9、如果是本地持久化会从文件中load</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.offsetStore.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//10、消费服务，顺序和并发消息逻辑不同,接收消息并调用listener消费，处理消费结果</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getMessageListenerInner</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> MessageListenerOrderly) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeOrderly </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeMessageService </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConsumeMessageOrderlyService</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, (MessageListenerOrderly) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getMessageListenerInner</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getMessageListenerInner</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> MessageListenerConcurrently) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeOrderly </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeMessageService </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConsumeMessageConcurrentlyService</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, (MessageListenerConcurrently) </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getMessageListenerInner</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//11、只启动了清理等待处理消息服务</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeMessageService.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//12、注册（缓存）consumer，保证CID单例</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> registerOK </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mQClientFactory.</span><span style="color:#6F42C1;">registerConsumer</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">registerOK) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceState.CREATE_JUST;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.consumeMessageService.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MQClientException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The consumer group[&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;] has been created before, specify another name please.&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> FAQUrl.</span><span style="color:#6F42C1;">suggestTodo</span><span style="color:#24292E;">(FAQUrl.GROUP_NAME_DUPLICATE_URL),</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//13、启动MQClientInstance，会启动PullMessageService和RebalanceService</span></span>
<span class="line"><span style="color:#24292E;">                mQClientFactory.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;the consumer [{}] start OK.&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.defaultMQPushConsumer.</span><span style="color:#6F42C1;">getConsumerGroup</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.serviceState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServiceState.RUNNING;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> RUNNING</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> START_FAILED</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> SHUTDOWN_ALREADY</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                ...</span></span>
<span class="line"><span style="color:#24292E;">                ...</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">default:</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//14、从NameServer更新topic路由和订阅信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">updateTopicSubscribeInfoWhenSubscriptionChanged</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory.</span><span style="color:#6F42C1;">checkClientInBroker</span><span style="color:#24292E;">();</span><span style="color:#6A737D;">//如果是SQL过滤，检查broker是否支持SQL过滤</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//15、发送心跳，同步consumer配置到broker,同步FilterClass到FilterServer(PushConsumer)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory.</span><span style="color:#6F42C1;">sendHeartbeatToAllBrokerWithLock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//16、做一次re-balance</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mQClientFactory.</span><span style="color:#6F42C1;">rebalanceImmediately</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><blockquote><p>参考资料</p><ol><li>参数：<a href="https://blog.csdn.net/a417930422/article/details/50700281" target="_blank" rel="noreferrer">https://blog.csdn.net/a417930422/article/details/50700281</a></li><li>过程：<a href="https://blog.csdn.net/meilong_whpu/article/details/77076298" target="_blank" rel="noreferrer">https://blog.csdn.net/meilong_whpu/article/details/77076298</a></li></ol></blockquote><h2 id="顺序消费" tabindex="-1">顺序消费 <a class="header-anchor" href="#顺序消费" aria-label="Permalink to &quot;顺序消费&quot;">​</a></h2><h3 id="消费方式-1" tabindex="-1">消费方式 <a class="header-anchor" href="#消费方式-1" aria-label="Permalink to &quot;消费方式&quot;">​</a></h3><p>顺序消费场景：在网购的时候，我们需要下单，那么下单需要假如有三个顺序，第一、创建订单 ，第二：订单付款，第三：订单完成。也就是这个三个环节要有顺序，这个订单才有意义。</p><p>消费端消费的时候，会分配到多个 queue 同时拉取消费。RocketMQ 只能保证同一个 queue 内顺序消费，因此想要实现顺序消费，必须实现以下过程：</p><ol><li><strong>生产者</strong></li></ol><p>Producer 在发送消息的时候，通过选择器把应当按照顺序的消息发到同一个 Queue 中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JavaProducerExampleRMQ2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DefaultMQProducer</span><span style="color:#F6F6F4;"> producer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQProducer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">PG-stream_test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">setNamesrvAddr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nameServer:9876;nameServer_2:9876</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);    </span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">setToken</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> orderId </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Message</span><span style="color:#F6F6F4;"> msg </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Message</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">stream_rmq_topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ,</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">20200727</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                    (</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello RocketMQ </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i).</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            );</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// send 参数分别为 消息/选择器/ID</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">SendResult</span><span style="color:#F6F6F4;"> sendResult </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> producer.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">(msg, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MessageQueueSelector</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">MessageQueue</span><span style="color:#62E884;"> select(</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#62E884;">&lt;</span><span style="color:#F6F6F4;">MessageQueue</span><span style="color:#62E884;">&gt; </span><span style="color:#FFB86C;font-style:italic;">mqs</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Message</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">msg</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#97E1F1;font-style:italic;">Integer</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">id</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> (Integer) arg;</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">index</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">=</span><span style="color:#62E884;"> id </span><span style="color:#F286C4;">%</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">mqs</span><span style="color:#62E884;">.size();</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">mqs</span><span style="color:#62E884;">.get(index);</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }, orderId);</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">返回结果：%s%n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, sendResult);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        producer.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavaProducerExampleRMQ2</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        DefaultMQProducer producer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQProducer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;PG-stream_test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nameServer:9876;nameServer_2:9876&quot;</span><span style="color:#24292E;">);    </span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">setToken</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Token&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> orderId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            Message msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Message</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stream_rmq_topic&quot;</span><span style="color:#24292E;"> ,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#032F62;">&quot;20200727&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                    (</span><span style="color:#032F62;">&quot;Hello RocketMQ &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i).</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// send 参数分别为 消息/选择器/ID</span></span>
<span class="line"><span style="color:#24292E;">            SendResult sendResult </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> producer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(msg, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageQueueSelector</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> MessageQueue </span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">MessageQueue</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">mqs</span><span style="color:#24292E;">, Message </span><span style="color:#E36209;">msg</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    Integer id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Integer) arg;</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> index </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> mqs.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> mqs.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(index);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }, orderId);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;返回结果：%s%n&quot;</span><span style="color:#24292E;">, sendResult);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        producer.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li><strong>消费者</strong></li></ol><p>消费者注册消息监听器为 MessageListenerOrderly ，即使有多个线程也保证消费端只有一个线程去消费消息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">JavaConsumerExampleRMQ2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DefaultMQPushConsumer</span><span style="color:#F6F6F4;"> consumer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DefaultMQPushConsumer</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">consumeGroupName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setNamesrvAddr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nameServer:9876;nameServer_2:9876</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);   </span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setToken</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Token</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 必须设定为集群，广播本身就失去顺序保障</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setMessageModel</span><span style="color:#F6F6F4;">(MessageModel.CLUSTERING);</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setConsumeFromWhere</span><span style="color:#F6F6F4;">(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 必须设定为 1，保证有序不能一次性拉取多个</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">setConsumeMessageBatchMaxSize</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);       </span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">subscribe</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">topic</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">tag</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 消息监听设定，MessageListenerOrderly 对象在有消费者读取时锁死队列</span></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">registerMessageListener</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MessageListenerOrderly</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">ConsumeOrderlyStatus</span><span style="color:#62E884;"> consumeMessage(</span><span style="color:#97E1F1;font-style:italic;">List</span><span style="color:#62E884;">&lt;</span><span style="color:#F6F6F4;">MessageExt</span><span style="color:#62E884;">&gt; </span><span style="color:#FFB86C;font-style:italic;">msgs</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">ConsumeOrderlyContext</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">for</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">MessageExt</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">msg</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">:</span><span style="color:#62E884;"> msgs) {</span></span>
<span class="line"><span style="color:#62E884;">                    </span><span style="color:#F286C4;">try</span><span style="color:#62E884;"> {</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#F6F6F4;">Thread</span><span style="color:#62E884;">.currentThread().getName() </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> Receive New Messages: </span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;"> </span><span style="color:#F286C4;">+</span><span style="color:#62E884;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#62E884;"> String</span><span style="color:#F6F6F4;">(msg.</span><span style="color:#62E884;">getBody</span><span style="color:#F6F6F4;">())</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                    }</span><span style="color:#F286C4;">catch</span><span style="color:#62E884;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">throwable</span><span style="color:#62E884;">){</span></span>
<span class="line"><span style="color:#62E884;">                        </span><span style="color:#F6F6F4;">System</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">out</span><span style="color:#62E884;">.println(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exception happened</span><span style="color:#DEE492;">&quot;</span><span style="color:#62E884;">);</span></span>
<span class="line"><span style="color:#62E884;">                    }</span></span>
<span class="line"><span style="color:#62E884;">                }</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">ConsumeOrderlyStatus</span><span style="color:#62E884;">.</span><span style="color:#F6F6F4;">SUCCESS</span><span style="color:#62E884;">;</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        consumer.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Consumer Started.%n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavaConsumerExampleRMQ2</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        DefaultMQPushConsumer consumer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultMQPushConsumer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;consumeGroupName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setNamesrvAddr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nameServer:9876;nameServer_2:9876&quot;</span><span style="color:#24292E;">);   </span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setToken</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Token&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 必须设定为集群，广播本身就失去顺序保障</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setMessageModel</span><span style="color:#24292E;">(MessageModel.CLUSTERING);</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setConsumeFromWhere</span><span style="color:#24292E;">(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 必须设定为 1，保证有序不能一次性拉取多个</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">setConsumeMessageBatchMaxSize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);       </span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;tag&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 消息监听设定，MessageListenerOrderly 对象在有消费者读取时锁死队列</span></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">registerMessageListener</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageListenerOrderly</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ConsumeOrderlyStatus </span><span style="color:#6F42C1;">consumeMessage</span><span style="color:#24292E;">(List&lt;</span><span style="color:#D73A49;">MessageExt</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">msgs</span><span style="color:#24292E;">, ConsumeOrderlyContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (MessageExt msg </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> msgs) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; Receive New Messages: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(msg.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">                    }</span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">throwable</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;exception happened&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ConsumeOrderlyStatus.SUCCESS;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        consumer.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Consumer Started.%n&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="上锁机制" tabindex="-1">上锁机制 <a class="header-anchor" href="#上锁机制" aria-label="Permalink to &quot;上锁机制&quot;">​</a></h3><ol><li><strong>Broker 端</strong></li></ol><p>维护全局队列锁 ConcurrentHashMap mqLockTable , 对 ConsumeQueue 上锁。</p><p>Cosumer 会周期性的发送 lock queue 的命令给 Broker。顺序消费时 consumer 会在锁定 queue 成功后才开始消费，并且默认每 20 秒就会刷新一下锁。Broker 如果发现锁超过 1 分钟没有刷新，则会自动释放。</p><ol start="2"><li><strong>Consumer 端</strong></li></ol><p>维护当前 consumer 端的本地队列锁 MessageQueueLock messageQueueLock ，对本地缓存队列 ProcessQueue 上锁。</p><p>消息到达 consumer 后回被放进缓存队列 ProcessQueue 中。而对于顺序消息集群模式下，检查一下当前 ProcessQueue 是否仍然持有 queue 的锁，保障同一时间同一个 queue 只会有一个线程在处理。</p><p><em>顺序消息处理也必须在同一个 consumer 上，且同一个 queue 的消息只能单线程处理，存在消息堆积的可能。</em></p><h3 id="消息处理" tabindex="-1">消息处理 <a class="header-anchor" href="#消息处理" aria-label="Permalink to &quot;消息处理&quot;">​</a></h3><p>普通消息会有两种情况导致消息重新返还给 Broker 重新投递，一种是消息在 consumer 的缓存中等待时间过长，还有一种就是用户代码逻辑中处理失败。</p><p>顺序消息用户处理完毕后，只会返回两种结果：</p><ul><li><code>ConsumeOrderlyStatus.SUCCESS</code> （成功，准备提交）</li><li><code>ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT</code> （挂起，准备重试）</li></ul><p>因为对于顺序消息，消费处理失败不会返回给 Broker 重新投递，而是会放到本地的缓存队列中重新处理。直到到达重试次数之后，返回并放入 Broker 中的死信队列。不再会因为长时间在缓存中等待而重投，因为重投也不会再交给其它 Consumer 处理。</p><p>成功后（默认）会调用 ProcessQueue 的 commit 方法，把获取消息时创建的临时 map 清空，然后记录当前消费的 offset。最后把进度同步给 Broker。</p><p>失败后首先检查是否超过最大重试的次数，没超过会放回到 ProcessQueue 的 msgTreeMap 中重试。如果超过了则直接放入 Broker 的死信队列，清空本地缓存。</p><p><strong>AutoCommit</strong></p><p>可以通过 ConsumeOrderlyContext 类的 setAutoCommit 方法设定是否自动提交（默认为自动提交）。</p><ol><li><p>当结果为失败时，autoCommit 设置为 true 或者 false 没有区别。</p></li><li><p>当结果为成功时，autoCommit 设置为 true 时比设置为 false 多做了 2 个动作：</p><ul><li>删除 msgTreeMapTemp 里的消息，这是在上面消费时从 msgTreeMap 转移过来的。</li><li>把拉消息的偏移量更新到本地内存中，然后定时更新到 broker。</li></ul></li></ol><p>否则随着消息的消费进行，msgTreeMapTemp 里的消息堆积越来越多，而消费消息的偏移量一直没有更新到 broker 导致 consumer 每次重新启动后都要从头开始重复消费。</p><hr><h2 id="事务信息" tabindex="-1">事务信息 <a class="header-anchor" href="#事务信息" aria-label="Permalink to &quot;事务信息&quot;">​</a></h2><p>rocketMQ 从 4.1.3 版本开始支持事务信息，由 TransactionMQProducer 类提供</p><hr><h2 id="broker" tabindex="-1">Broker <a class="header-anchor" href="#broker" aria-label="Permalink to &quot;Broker&quot;">​</a></h2><p>Broker收到消息后的处理线程只负责消息存储，不负责通知consumer或者其它逻辑，最大化消息吞吐量</p><p>每条消息存储时都会有一个offset，通过offset是定位到消息位置并获取消息详情的唯一办法，所有的消息查询操作最终都是转化成通过offset查询消息详情</p><h3 id="消息存储" tabindex="-1">消息存储 <a class="header-anchor" href="#消息存储" aria-label="Permalink to &quot;消息存储&quot;">​</a></h3><p>RocketMQ 的在 Broker 中的消息存储是由 consume queue 和 commit log 配合完成的。</p><p>consume queue 是消息的逻辑队列，相当于字典的目录，用来指定消息在物理文件commit log上的位置。</p><p>commit log 是存储的物理文件。</p><p><strong>ConsumeQueue</strong></p><p>Broker 在收到消息后，通过 MessageStore 将消息存储到 commitLog 中，但是 consumer 在消费消息的时候是按照 topic+queue 的维度来拉取消息的。为了方便读取，MessageStore 将 CommitLog 中消息的 offset 按照 topic+queueId 划分后，存储到不同的文件中，这就是 ConsumeQueue.</p><p>consumer来读取文件的时候，只要指定要读的topic和queueId，以及开始offset。因为每个CQUnit的大小是固定的，所以很容易就可以在文件中定位到。找到开始的位置后，只需要连续读取后面指定数量的Unit，然后根据Unit中存的CommitLog的offset就可以到CommitLog中读取消息详情了。</p><h3 id="消费" tabindex="-1">消费 <a class="header-anchor" href="#消费" aria-label="Permalink to &quot;消费&quot;">​</a></h3><p>Consumer 的时候说到消费消息分为 Pull 和 Push 两种模式，底层其实都是依靠 Pull 实现的。在 Broker 这端处理 PushConsumer 的 Pull 请求的时候，如果消息不存在，会 hold 住请求直到超时或者有新的消息到达Broker。</p><h3 id="处理流程" tabindex="-1">处理流程 <a class="header-anchor" href="#处理流程" aria-label="Permalink to &quot;处理流程&quot;">​</a></h3><ol><li>接收消息</li></ol><p>Broker提供的消息发送的接口有：单条消息、批量消息、RETRY消息。Retry消息即consumer消费失败，要求broker重发的消息。</p><p>消息重发是有次数限制的，默认是16次。这里会检查是否已经超过最大次数，超过的话将topic设置成DeadQueue会放入死信队列。</p><p>Producer或者consumer发送消息后，Broker通过SendMessageProcessor做接收和处理。一个消息的包可以只包含了一条消息，也可以包含多条消息。</p><ol start="2"><li>存储消息</li></ol><p>首先判断broker是否是master，并且master当前是可写的。然后判断commitLog上次flush的时候是否超时，如果超时则返回OS_PAGECACHE_BUSY的错误。最终调用commitLog.putMessage()方法保存消息。下面看下CommitLog的方法实现</p><p>每条消息存储前都会产生一个Message ID，通过这个id可以快速的得到消息存储的broker和它在CommitLog中的offset</p><p>所有的消息在存储时都是按顺序存在一起的，不会按topic和queueId做物理隔离 每条消息存储时都会有一个offset，通过offset是定位到消息位置并获取消息详情的唯一办法，所有的消息查询操作最终都是转化成通过offset查询消息详情 每条消息存储前都会产生一个Message ID，通过这个id可以快速的得到消息存储的broker和它在CommitLog中的offset Broker收到消息后的处理线程只负责消息存储，不负责通知consumer或者其它逻辑，最大化消息吞吐量 Broker返回成功不代表消息已经写入磁盘，如果对消息的可靠性要求高的话，可以将FlushDiskType设置成SYNC_FLUSH，这样每次收到消息写入文件后都会做flush操作。</p><p><a href="https://blog.csdn.net/guolong1983811/article/details/78821926" target="_blank" rel="noreferrer">https://blog.csdn.net/guolong1983811/article/details/78821926</a></p>`,137),r=[c];function y(F,i,E,u,C,d){return n(),a("div",null,r)}const g=s(t,[["render",y]]);export{h as __pageData,g as default};
