import{_ as a,o as e,c as n,V as r}from"./chunks/framework.c6d8cbec.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/spring/spring-03.md","filePath":"interview/backend/spring/spring-03.md"}'),s={name:"interview/backend/spring/spring-03.md"},o=r(`<h3 id="_1、-qualifier-注解有什么用-https-gitee-com-souyunku-devbooks-blob-master-docs-spring-spring高级面试题及答案-2021版-md-1-qualifier-qualifier-注解有什么用" tabindex="-1">[1、<a href="/docs/Qualifier.html">@Qualifier </a> 注解有什么用？](<a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#1%5B@qualifier-%5D/qualifier--%E6%B3%A8%E8%A7%A3%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8" target="_blank" rel="noreferrer">https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#1[@qualifier-]/qualifier--注解有什么用</a>) <a class="header-anchor" href="#_1、-qualifier-注解有什么用-https-gitee-com-souyunku-devbooks-blob-master-docs-spring-spring高级面试题及答案-2021版-md-1-qualifier-qualifier-注解有什么用" aria-label="Permalink to &quot;[1、[@Qualifier ](/Qualifier ) 注解有什么用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#1[@qualifier-]/qualifier--注解有什么用)&quot;">​</a></h3><p>当您创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，您可以使用<a href="/docs/Qualifier.html">@Qualifier </a> 注解和 <a href="/docs/Autowired.html">@Autowired </a> 通过指定应该装配哪个确切的 bean 来消除歧义。</p><p>例如，这里我们分别有两个类，Employee 和 EmpAccount。在 EmpAccount 中，使用<a href="/docs/Qualifier.html">@Qualifier </a> 指定了必须装配 id 为 emp1 的 bean。</p><p>Employee.java</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class Employee {</span></span>
<span class="line"><span style="color:#f6f6f4;">    private String name;</span></span>
<span class="line"><span style="color:#f6f6f4;">    @Autowired</span></span>
<span class="line"><span style="color:#f6f6f4;">    public void setName(String name) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        this.name=name;</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">    public string getName() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        return name;</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class Employee {</span></span>
<span class="line"><span style="color:#24292e;">    private String name;</span></span>
<span class="line"><span style="color:#24292e;">    @Autowired</span></span>
<span class="line"><span style="color:#24292e;">    public void setName(String name) {</span></span>
<span class="line"><span style="color:#24292e;">        this.name=name;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    public string getName() {</span></span>
<span class="line"><span style="color:#24292e;">        return name;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>EmpAccount.java</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class EmpAccount {</span></span>
<span class="line"><span style="color:#f6f6f4;">    private Employee emp;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    @Autowired</span></span>
<span class="line"><span style="color:#f6f6f4;">    @Qualifier(emp1)</span></span>
<span class="line"><span style="color:#f6f6f4;">    public void showName() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(“Employee name : ”+emp.getName);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class EmpAccount {</span></span>
<span class="line"><span style="color:#24292e;">    private Employee emp;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    @Autowired</span></span>
<span class="line"><span style="color:#24292e;">    @Qualifier(emp1)</span></span>
<span class="line"><span style="color:#24292e;">    public void showName() {</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(“Employee name : ”+emp.getName);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_2、dispatcherservlet" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#2dispatcherservlet" target="_blank" rel="noreferrer">2、DispatcherServlet</a> <a class="header-anchor" href="#_2、dispatcherservlet" aria-label="Permalink to &quot;[2、DispatcherServlet](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#2dispatcherservlet)&quot;">​</a></h3><p>Spring的MVC框架是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。</p><h3 id="_3、springcloud有几种调用接口方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#3springcloud%E6%9C%89%E5%87%A0%E7%A7%8D%E8%B0%83%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">3、SpringCloud有几种调用接口方式</a> <a class="header-anchor" href="#_3、springcloud有几种调用接口方式" aria-label="Permalink to &quot;[3、SpringCloud有几种调用接口方式](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#3springcloud有几种调用接口方式)&quot;">​</a></h3><p><strong>1、</strong> Feign</p><p><strong>2、</strong> RestTemplate</p><h3 id="_4、什么是-spring-data" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#4%E4%BB%80%E4%B9%88%E6%98%AF-spring-data" target="_blank" rel="noreferrer">4、什么是 Spring Data？</a> <a class="header-anchor" href="#_4、什么是-spring-data" aria-label="Permalink to &quot;[4、什么是 Spring Data？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#4什么是-spring-data)&quot;">​</a></h3><p>来自：<a href="/docs/projects.spring.io/spring-.html">//projects.spring.io/spring-</a> data/</p><p>Spring Data 的使命是在保证底层数据存储特殊性的前提下，为数据访问提供一个熟悉的，一致性的，基于 Spring 的编程模型。这使得使用数据访问技术，关系数据库和非关系数据库，map-reduce 框架以及基于云的数据服务变得很容易。</p><p>为了让它更简单一些，Spring Data 提供了不受底层数据源限制的 Abstractions 接口。</p><p>你可以定义一简单的库，用来插入，更新，删除和检索代办事项，而不需要编写大量的代码。</p><h3 id="_5、创建一个-springboot-project-的最简单的方法是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#5%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-springboot-project-%E7%9A%84%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">5、创建一个 SpringBoot Project 的最简单的方法是什么？</a> <a class="header-anchor" href="#_5、创建一个-springboot-project-的最简单的方法是什么" aria-label="Permalink to &quot;[5、创建一个 SpringBoot Project 的最简单的方法是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#5创建一个-springboot-project-的最简单的方法是什么)&quot;">​</a></h3><p>Spring Initializer 是创建 SpringBoot Projects 的一个很好的工具</p><h3 id="_6、解释spring支持的几种bean的作用域。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#6%E8%A7%A3%E9%87%8Aspring%E6%94%AF%E6%8C%81%E7%9A%84%E5%87%A0%E7%A7%8Dbean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%82" target="_blank" rel="noreferrer">6、解释Spring支持的几种bean的作用域。</a> <a class="header-anchor" href="#_6、解释spring支持的几种bean的作用域。" aria-label="Permalink to &quot;[6、解释Spring支持的几种bean的作用域。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#6解释spring支持的几种bean的作用域。)&quot;">​</a></h3><p><strong>Spring框架支持以下五种bean的作用域：</strong></p><p><strong>1、</strong> singleton : bean在每个Spring ioc 容器中只有一个实例。</p><p><strong>2、</strong> prototype：一个bean的定义可以有多个实例。</p><p><strong>3、</strong> request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</p><p><strong>4、</strong> session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p><p><strong>5、</strong> global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p><p>缺省的Spring bean 的作用域是Singleton.</p><h3 id="_7、列举-spring-dao-抛出的异常。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#7%E5%88%97%E4%B8%BE-spring-dao-%E6%8A%9B%E5%87%BA%E7%9A%84%E5%BC%82%E5%B8%B8%E3%80%82" target="_blank" rel="noreferrer">7、列举 Spring DAO 抛出的异常。</a> <a class="header-anchor" href="#_7、列举-spring-dao-抛出的异常。" aria-label="Permalink to &quot;[7、列举 Spring DAO 抛出的异常。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#7列举-spring-dao-抛出的异常。)&quot;">​</a></h3><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0816/02/img_4.png#alt=img%5C_4.png" alt=""></p><h3 id="_8、什么是微服务中的反应性扩展" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#8%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%94%E6%80%A7%E6%89%A9%E5%B1%95" target="_blank" rel="noreferrer">8、什么是微服务中的反应性扩展？</a> <a class="header-anchor" href="#_8、什么是微服务中的反应性扩展" aria-label="Permalink to &quot;[8、什么是微服务中的反应性扩展？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#8什么是微服务中的反应性扩展)&quot;">​</a></h3><p>Reactive Extensions也称为Rx。这是一种设计方法，我们通过调用多个服务来收集结果，然后编译组合响应。这些调用可以是同步或异步，阻塞或非阻塞。Rx是分布式系统中非常流行的工具，与传统流程相反。</p><p>希望这些微服务面试问题可以帮助您进行微服务架构师访谈。</p><p>翻译来源：<a href="https://www.edureka.co/blog/interview-questions/microservices-interview-questions/" target="_blank" rel="noreferrer">https://www.edureka.co/blog/interview-questions/microservices-interview-questions/</a></p><h3 id="_9、比较一下-spring-security-和-shiro-各自的优缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#9%E6%AF%94%E8%BE%83%E4%B8%80%E4%B8%8B-spring-security-%E5%92%8C-shiro-%E5%90%84%E8%87%AA%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9-" target="_blank" rel="noreferrer">9、比较一下 Spring Security 和 Shiro 各自的优缺点 ?</a> <a class="header-anchor" href="#_9、比较一下-spring-security-和-shiro-各自的优缺点" aria-label="Permalink to &quot;[9、比较一下 Spring Security 和 Shiro 各自的优缺点 ?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#9比较一下-spring-security-和-shiro-各自的优缺点-)&quot;">​</a></h3><p>由于 SpringBoot 官方提供了大量的非常方便的开箱即用的 Starter ，包括 Spring Security 的 Starter ，使得在 SpringBoot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是 SpringBoot 项目，一般选择 Spring Security 。当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro 和 Spring Security 相比，主要有如下一些特点：</p><p>Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架</p><p>Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单</p><p>Spring Security 功能强大；Shiro 功能简单</p><h3 id="_10、使用-spring-访问-hibernate-的方法有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C2021%E7%89%88.md#10%E4%BD%BF%E7%94%A8-spring-%E8%AE%BF%E9%97%AE-hibernate-%E7%9A%84%E6%96%B9%E6%B3%95%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">10、使用 Spring 访问 Hibernate 的方法有哪些？</a> <a class="header-anchor" href="#_10、使用-spring-访问-hibernate-的方法有哪些" aria-label="Permalink to &quot;[10、使用 Spring 访问 Hibernate 的方法有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题及答案，2021版.md#10使用-spring-访问-hibernate-的方法有哪些)&quot;">​</a></h3><p>我们可以通过两种方式使用 Spring 访问 Hibernate：</p><p><strong>1、</strong> 使用 Hibernate 模板和回调进行控制反转</p><p><strong>2、</strong> 扩展 HibernateDAOSupport 并应用 AOP 拦截器节点</p><h3 id="_11、bootstrap-yml和application-yml有什么区别" tabindex="-1">11、bootstrap.yml和application.yml有什么区别? <a class="header-anchor" href="#_11、bootstrap-yml和application-yml有什么区别" aria-label="Permalink to &quot;11、bootstrap.yml和application.yml有什么区别?&quot;">​</a></h3><h3 id="_12、springboot有哪些优点" tabindex="-1">12、SpringBoot有哪些优点？ <a class="header-anchor" href="#_12、springboot有哪些优点" aria-label="Permalink to &quot;12、SpringBoot有哪些优点？&quot;">​</a></h3><h3 id="_13、为什么需要学习spring-cloud" tabindex="-1">13、为什么需要学习Spring Cloud <a class="header-anchor" href="#_13、为什么需要学习spring-cloud" aria-label="Permalink to &quot;13、为什么需要学习Spring Cloud&quot;">​</a></h3><h3 id="_14、springboot和springcloud认识" tabindex="-1">14、SpringBoot和springcloud认识 <a class="header-anchor" href="#_14、springboot和springcloud认识" aria-label="Permalink to &quot;14、SpringBoot和springcloud认识&quot;">​</a></h3><h3 id="_15、spring-boot-核心配置文件是什么-bootstrap-properties-和-application-properties-有何区别" tabindex="-1">15、spring boot 核心配置文件是什么？bootstrap.properties 和 application.properties 有何区别 ? <a class="header-anchor" href="#_15、spring-boot-核心配置文件是什么-bootstrap-properties-和-application-properties-有何区别" aria-label="Permalink to &quot;15、spring boot 核心配置文件是什么？bootstrap.properties 和 application.properties 有何区别 ?&quot;">​</a></h3><h3 id="_16、列举微服务技术栈" tabindex="-1">16、列举微服务技术栈 <a class="header-anchor" href="#_16、列举微服务技术栈" aria-label="Permalink to &quot;16、列举微服务技术栈&quot;">​</a></h3><h3 id="_17、21、在spring-mvc应用程序中使用webmvctest注释有什么用处" tabindex="-1">17、21、在Spring MVC应用程序中使用WebMvcTest注释有什么用处？ <a class="header-anchor" href="#_17、21、在spring-mvc应用程序中使用webmvctest注释有什么用处" aria-label="Permalink to &quot;17、21、在Spring MVC应用程序中使用WebMvcTest注释有什么用处？&quot;">​</a></h3><h3 id="_18、您对微服务架构中的语义监控有何了解" tabindex="-1">18、您对微服务架构中的语义监控有何了解？ <a class="header-anchor" href="#_18、您对微服务架构中的语义监控有何了解" aria-label="Permalink to &quot;18、您对微服务架构中的语义监控有何了解？&quot;">​</a></h3><h3 id="_19、springboot-中如何实现定时任务" tabindex="-1">19、SpringBoot 中如何实现定时任务 ? <a class="header-anchor" href="#_19、springboot-中如何实现定时任务" aria-label="Permalink to &quot;19、SpringBoot 中如何实现定时任务 ?&quot;">​</a></h3><h3 id="_20、在微服务中-如何保护服务" tabindex="-1">20、在微服务中，如何保护服务? <a class="header-anchor" href="#_20、在微服务中-如何保护服务" aria-label="Permalink to &quot;20、在微服务中，如何保护服务?&quot;">​</a></h3><h3 id="_21、-controller-注解" tabindex="-1">21、<a href="/docs/Controller.html">@Controller </a> 注解 <a class="header-anchor" href="#_21、-controller-注解" aria-label="Permalink to &quot;21、[@Controller ](/Controller ) 注解&quot;">​</a></h3><h3 id="_22、springboot-starter的工作原理" tabindex="-1">22、SpringBoot Starter的工作原理 <a class="header-anchor" href="#_22、springboot-starter的工作原理" aria-label="Permalink to &quot;22、SpringBoot Starter的工作原理&quot;">​</a></h3><h3 id="_23、如何集成-springboot-和-activemq" tabindex="-1">23、如何集成 SpringBoot 和 ActiveMQ？ <a class="header-anchor" href="#_23、如何集成-springboot-和-activemq" aria-label="Permalink to &quot;23、如何集成 SpringBoot 和 ActiveMQ？&quot;">​</a></h3><h3 id="_24、如何重新加载-springboot-上的更改-而无需重新启动服务器-springboot项目如何热部署" tabindex="-1">24、如何重新加载 SpringBoot 上的更改，而无需重新启动服务器？SpringBoot项目如何热部署？ <a class="header-anchor" href="#_24、如何重新加载-springboot-上的更改-而无需重新启动服务器-springboot项目如何热部署" aria-label="Permalink to &quot;24、如何重新加载 SpringBoot 上的更改，而无需重新启动服务器？SpringBoot项目如何热部署？&quot;">​</a></h3><h3 id="_25、什么是-aop切点" tabindex="-1">25、什么是 AOP切点 <a class="header-anchor" href="#_25、什么是-aop切点" aria-label="Permalink to &quot;25、什么是 AOP切点&quot;">​</a></h3><h3 id="_26、如何集成springboot和activemq" tabindex="-1">26、如何集成SpringBoot和ActiveMQ？ <a class="header-anchor" href="#_26、如何集成springboot和activemq" aria-label="Permalink to &quot;26、如何集成SpringBoot和ActiveMQ？&quot;">​</a></h3><h3 id="_27、什么是消费者驱动的合同-cdc" tabindex="-1">27、什么是消费者驱动的合同（CDC）？ <a class="header-anchor" href="#_27、什么是消费者驱动的合同-cdc" aria-label="Permalink to &quot;27、什么是消费者驱动的合同（CDC）？&quot;">​</a></h3><h3 id="_28、在spring框架中如何更有效地使用jdbc" tabindex="-1">28、在Spring框架中如何更有效地使用JDBC? <a class="header-anchor" href="#_28、在spring框架中如何更有效地使用jdbc" aria-label="Permalink to &quot;28、在Spring框架中如何更有效地使用JDBC?&quot;">​</a></h3><h3 id="_29、什么是领域驱动设计" tabindex="-1">29、什么是领域驱动设计？ <a class="header-anchor" href="#_29、什么是领域驱动设计" aria-label="Permalink to &quot;29、什么是领域驱动设计？&quot;">​</a></h3><h3 id="_30、springboot-2-x-有什么新特性-与-1-x-有什么区别" tabindex="-1">30、SpringBoot 2.X 有什么新特性？与 1.X 有什么区别？ <a class="header-anchor" href="#_30、springboot-2-x-有什么新特性-与-1-x-有什么区别" aria-label="Permalink to &quot;30、SpringBoot 2.X 有什么新特性？与 1.X 有什么区别？&quot;">​</a></h3><h3 id="_31、springcloud-和-dubbo-有哪些区别" tabindex="-1">31、SpringCloud 和 Dubbo 有哪些区别? <a class="header-anchor" href="#_31、springcloud-和-dubbo-有哪些区别" aria-label="Permalink to &quot;31、SpringCloud 和 Dubbo 有哪些区别?&quot;">​</a></h3>`,63),t=[o];function i(p,l,c,g,h,u){return e(),n("div",null,t)}const E=a(s,[["render",i]]);export{b as __pageData,E as default};
