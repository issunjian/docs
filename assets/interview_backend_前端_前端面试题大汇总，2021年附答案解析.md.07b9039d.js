import{_ as a,o as s,c as e,V as n}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端面试题大汇总，2021年附答案解析.md","filePath":"interview/backend/前端/前端面试题大汇总，2021年附答案解析.md"}'),o={name:"interview/backend/前端/前端面试题大汇总，2021年附答案解析.md"},l=n(`<h3 id="_1、何为防抖和节流-如何实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E4%BD%95%E4%B8%BA%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">1、何为防抖和节流？如何实现？</a> <a class="header-anchor" href="#_1、何为防抖和节流-如何实现" aria-label="Permalink to &quot;[1、何为防抖和节流？如何实现？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#1何为防抖和节流如何实现)&quot;">​</a></h3><p><strong>1、</strong> 防抖和节流都是防止短时间内高频触发事件的方案。</p><p><strong>2、</strong> 防抖的原理是：如果一定时间内多次执行了某事件，则只执行其中的最后一次。</p><p><strong>3、</strong> 节流的原理是：要执行的事件每隔一段时间会被冷却，无法执行。</p><p><strong>4、</strong> 应用场景有：搜索框实时搜索，滚动改变相关的事件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//@fn: 要执行的函数</span></span>
<span class="line"><span style="color:#f6f6f4;">//@delay: 设定的时限</span></span>
<span class="line"><span style="color:#f6f6f4;">//防抖函数</span></span>
<span class="line"><span style="color:#f6f6f4;">function debunce(fn, delay) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    let flag = null;</span></span>
<span class="line"><span style="color:#f6f6f4;">    return function() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        if (flag) clearTimeout(flag)</span></span>
<span class="line"><span style="color:#f6f6f4;">        //利用apply改变函数指向，使得封装后的函数可以接收event本身</span></span>
<span class="line"><span style="color:#f6f6f4;">        flag = setTimeout(() = &gt; fn.apply(this, arguments), delay)</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;">//节流函数</span></span>
<span class="line"><span style="color:#f6f6f4;">function throttle(fn, delay) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    let flag = true;</span></span>
<span class="line"><span style="color:#f6f6f4;">    return function() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        if (!flag) return false;</span></span>
<span class="line"><span style="color:#f6f6f4;">        flag = false;</span></span>
<span class="line"><span style="color:#f6f6f4;">        setTimeout(() = &gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">            fn.apply(this, arguments)</span></span>
<span class="line"><span style="color:#f6f6f4;">            flag = true</span></span>
<span class="line"><span style="color:#f6f6f4;">        }, delay)</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//@fn: 要执行的函数</span></span>
<span class="line"><span style="color:#24292e;">//@delay: 设定的时限</span></span>
<span class="line"><span style="color:#24292e;">//防抖函数</span></span>
<span class="line"><span style="color:#24292e;">function debunce(fn, delay) {</span></span>
<span class="line"><span style="color:#24292e;">    let flag = null;</span></span>
<span class="line"><span style="color:#24292e;">    return function() {</span></span>
<span class="line"><span style="color:#24292e;">        if (flag) clearTimeout(flag)</span></span>
<span class="line"><span style="color:#24292e;">        //利用apply改变函数指向，使得封装后的函数可以接收event本身</span></span>
<span class="line"><span style="color:#24292e;">        flag = setTimeout(() = &gt; fn.apply(this, arguments), delay)</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;">//节流函数</span></span>
<span class="line"><span style="color:#24292e;">function throttle(fn, delay) {</span></span>
<span class="line"><span style="color:#24292e;">    let flag = true;</span></span>
<span class="line"><span style="color:#24292e;">    return function() {</span></span>
<span class="line"><span style="color:#24292e;">        if (!flag) return false;</span></span>
<span class="line"><span style="color:#24292e;">        flag = false;</span></span>
<span class="line"><span style="color:#24292e;">        setTimeout(() = &gt; {</span></span>
<span class="line"><span style="color:#24292e;">            fn.apply(this, arguments)</span></span>
<span class="line"><span style="color:#24292e;">            flag = true</span></span>
<span class="line"><span style="color:#24292e;">        }, delay)</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_2、vue插槽" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2vue%E6%8F%92%E6%A7%BD" target="_blank" rel="noreferrer">2、vue插槽</a> <a class="header-anchor" href="#_2、vue插槽" aria-label="Permalink to &quot;[2、vue插槽](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#2vue插槽)&quot;">​</a></h3><p><strong>单个插槽</strong></p><p><strong>1、</strong> 当子组件模板只有一个没有属性的插槽时，</p><p><strong>2、</strong> 父组件传入的整个内容片段将插入到插槽所在的 DOM 位置，</p><p><strong>3、</strong> 并替换掉插槽标签本身</p><p><strong>命名插槽</strong></p><p><strong>1、</strong> solt元素可以用一个特殊的特性name来进一步配置如何分发内容。</p><p><strong>2、</strong> 多个插槽可以有不同的名字。 这样可以将父组件模板中 slot 位置，</p><p><strong>3、</strong> 和子组件 slot 元素产生关联，便于插槽内容对应传递</p><p><strong>作用域插槽</strong></p><p><strong>1、</strong> 可以访问组件内部数据的可复用插槽(reusable slot)</p><p><strong>2、</strong> 在父级中，具有特殊特性 slot-scope 的 元素必须存在，</p><p><strong>3、</strong> 表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，</p><p><strong>4、</strong> 此变量接收从子组件传递过来的 prop 对象</p><h3 id="_3、h5新特性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3h5%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9A" target="_blank" rel="noreferrer">3、H5新特性：</a> <a class="header-anchor" href="#_3、h5新特性" aria-label="Permalink to &quot;[3、H5新特性：](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#3h5新特性：)&quot;">​</a></h3><p><strong>1、</strong> <code>Canvas绘图</code></p><p><strong>2、</strong> <code>SVG绘图</code></p><p><strong>3、</strong> <code>地理定位</code></p><p><strong>4、</strong> <code>Web Worker</code></p><p><code>web worker</code> 是运行在后台的 JS，独立于其他脚本，不会影响页面的性能。</p><p><code>Web Storage</code></p><p><strong>1、</strong> Cookie技术 （ 兼容性好,数据不能超4kb,操作复杂）</p><p><strong>2、</strong> （兼容性差,数据8MB,操作简单）sessionStorage</p><p><strong>3、</strong> localStorage</p><p><code>Web Socket</code></p><p>WebSocket协议是基于TCP的一种新的网络协议。它实现了浏览器与服务器全双工(full-duplex)通信——允许服务器主动发送信息给客户端。</p><h3 id="_4、路由跳转方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">4、路由跳转方式</a> <a class="header-anchor" href="#_4、路由跳转方式" aria-label="Permalink to &quot;[4、路由跳转方式](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#4路由跳转方式)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;router-link to=&#39;home&#39;&gt; router-link标签会渲染为&lt;a&gt;标签，咋填template中的跳转都是这种；</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">另一种是编程是导航 也就是通过js跳转 比如 router.push(&#39;/home&#39;)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;router-link to=&#39;home&#39;&gt; router-link标签会渲染为&lt;a&gt;标签，咋填template中的跳转都是这种；</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">另一种是编程是导航 也就是通过js跳转 比如 router.push(&#39;/home&#39;)</span></span></code></pre></div><h3 id="_5、iframe的作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5iframe%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">5、Iframe的作用？</a> <a class="header-anchor" href="#_5、iframe的作用" aria-label="Permalink to &quot;[5、Iframe的作用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#5iframe的作用)&quot;">​</a></h3><p><strong>用法：</strong></p><p>Iframe是用来在网页中插入第三方页面，早期的页面使用 iframe 主要是用于导航栏这种很多页面都相同的部分，这样可以在切换页面的时候避免重复下载。</p><p>优点：便于修改，模块分离，像一些信息管理系统会用到。但现在基本上不推荐使用。除非特殊需要，一般不推荐使用。</p><p><strong>缺点 :</strong></p><p><strong>1、</strong> iframe 的创建比一般的 DOM 元素慢了 1-2 个数量级</p><p><strong>2、</strong> iframe 标签会阻塞页面的加载，如果页面的onload 事件不能及时触发，会让用户觉得网页加载很慢，用户体验不好.在 Safari 和 Chrome 中可以通过 js 动态设置 iframe 的 src 属性来避免阻塞.</p><p><strong>3、</strong> iframe 对于 SEO 不友好，替代方案一般就是动态语言的 Incude 机制和 ajax 动态填充内容等.</p><h3 id="_6、keep-alive" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6keep-alive" target="_blank" rel="noreferrer">6、keep-alive</a> <a class="header-anchor" href="#_6、keep-alive" aria-label="Permalink to &quot;[6、keep-alive](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#6keep-alive)&quot;">​</a></h3><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</p><p><strong>1、</strong> 一般结合路由和动态组件一起使用，用于缓存组件；</p><p><strong>2、</strong> 提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</p><p><strong>3、</strong> 对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</p><h3 id="_7、微信小程序与原生app、vue、h5差异" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8E%E5%8E%9F%E7%94%9Fappvueh5%E5%B7%AE%E5%BC%82" target="_blank" rel="noreferrer">7、微信小程序与原生APP、Vue、H5差异</a> <a class="header-anchor" href="#_7、微信小程序与原生app、vue、h5差异" aria-label="Permalink to &quot;[7、微信小程序与原生APP、Vue、H5差异](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#7微信小程序与原生appvueh5差异)&quot;">​</a></h3><p><strong>微信小程序优势</strong></p><p><strong>1、</strong> 无需下载</p><p><strong>2、</strong> 打开速度较快</p><p><strong>3、</strong> 开发成本低于原生APP</p><p><strong>微信小程序劣势</strong></p><p><strong>1、</strong> 限制多。页面大小不能超过 1M，不能打开超过 5 个层级的页面</p><p><strong>2、</strong> 样式单一。小程序内部组件已经成宿，样式不可以修改</p><p><strong>3、</strong> 推广面窄。跑不出微信，还不能跑入朋友圈</p><p><strong>微信小程序 VS 原生APP</strong></p><p>微信小程序有着低开发成本、低获客成本、无需下载的优势</p><p><strong>微信小程序 VS H5</strong></p><p><strong>1、</strong> 依赖环境不同。一个能在多种手机浏览器运行。一个只能在微信中的非完整的浏览器</p><p><strong>2、</strong> 开发成本不同。一个可能在各种浏览器出问题。一个只能在微信中运行</p><p><strong>微信小程序 VS Vue</strong></p><p>微信小程序看似就是阉割版的 Vue</p><h3 id="_8、介绍一下你对浏览器内核的理解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%BD%A0%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%A7%A3" target="_blank" rel="noreferrer">8、介绍一下你对浏览器内核的理解？</a> <a class="header-anchor" href="#_8、介绍一下你对浏览器内核的理解" aria-label="Permalink to &quot;[8、介绍一下你对浏览器内核的理解？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#8介绍一下你对浏览器内核的理解)&quot;">​</a></h3><p><strong>1、</strong> 主要分成两部分：渲染引擎(<code>layout engineer</code>或<code>Rendering Engine</code>)和<code>JS</code>引擎</p><p><strong>2、</strong> 渲染引擎：负责取得网页的内容（<code>HTML</code>、<code>XML</code>、图像等等）、整理讯息（例如加入<code>CSS</code>等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p><p><strong>3、</strong> <code>JS</code>引擎则：解析和执行<code>javascript</code>来实现网页的动态效果</p><p><strong>4、</strong> 最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</p><h3 id="_9、为什么在-js-中比较两个相似的对象时返回-false" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-js-%E4%B8%AD%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E7%9B%B8%E4%BC%BC%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%97%B6%E8%BF%94%E5%9B%9E-false" target="_blank" rel="noreferrer">9、为什么在 JS 中比较两个相似的对象时返回 false？</a> <a class="header-anchor" href="#_9、为什么在-js-中比较两个相似的对象时返回-false" aria-label="Permalink to &quot;[9、为什么在 JS 中比较两个相似的对象时返回 false？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#9为什么在-js-中比较两个相似的对象时返回-false)&quot;">​</a></h3><p>先看下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">let a = { a: 1 };</span></span>
<span class="line"><span style="color:#f6f6f4;">let b = { a: 1 };</span></span>
<span class="line"><span style="color:#f6f6f4;">let c = a;</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(a === b); // 打印 false，即使它们有相同的属性</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(a === c); // true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">let a = { a: 1 };</span></span>
<span class="line"><span style="color:#24292e;">let b = { a: 1 };</span></span>
<span class="line"><span style="color:#24292e;">let c = a;</span></span>
<span class="line"><span style="color:#24292e;">console.log(a === b); // 打印 false，即使它们有相同的属性</span></span>
<span class="line"><span style="color:#24292e;">console.log(a === c); // true</span></span></code></pre></div><p>JS 以不同的方式比较对象和基本类型。在基本类型中，JS 通过值对它们进行比较，而在对象中，JS 通过引用或存储变量的内存中的地址对它们进行比较。这就是为什么第一个<code>console.log</code>语句返回<code>false</code>，而第二个<code>console.log</code>语句返回<code>true</code>。<code>a</code>和<code>c</code>有相同的引用地址，而<code>a</code>和<code>b</code>没有。</p><h3 id="_10、li与li之间有看不见的空白间隔是什么原因引起的-有什么解决办法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C2021%E5%B9%B4%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10li%E4%B8%8Eli%E4%B9%8B%E9%97%B4%E6%9C%89%E7%9C%8B%E4%B8%8D%E8%A7%81%E7%9A%84%E7%A9%BA%E7%99%BD%E9%97%B4%E9%9A%94%E6%98%AF%E4%BB%80%E4%B9%88%E5%8E%9F%E5%9B%A0%E5%BC%95%E8%B5%B7%E7%9A%84%E6%9C%89%E4%BB%80%E4%B9%88%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" target="_blank" rel="noreferrer">10、li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</a> <a class="header-anchor" href="#_10、li与li之间有看不见的空白间隔是什么原因引起的-有什么解决办法" aria-label="Permalink to &quot;[10、li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端面试题大汇总，2021年附答案解析.md#10li与li之间有看不见的空白间隔是什么原因引起的有什么解决办法)&quot;">​</a></h3><p>行框的排列会受到中间空白（回车空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。</p><p>解决方法：</p><p><strong>1、</strong> 可以将</p><ul><li>代码全部写在一排</li></ul><p><strong>2、</strong> 浮动li中float：left</p><p><strong>3、</strong> 在ul中用font-size：0（谷歌不支持）；可以使用letter-space：-3px</p><h3 id="_11、label的作用是什么-是怎么用的" tabindex="-1">11、label的作用是什么? 是怎么用的?** <a class="header-anchor" href="#_11、label的作用是什么-是怎么用的" aria-label="Permalink to &quot;11、label的作用是什么? 是怎么用的?**&quot;">​</a></h3><h3 id="_12、从浏览器地址栏输入url到显示页面的步骤" tabindex="-1">12、从浏览器地址栏输入url到显示页面的步骤 <a class="header-anchor" href="#_12、从浏览器地址栏输入url到显示页面的步骤" aria-label="Permalink to &quot;12、从浏览器地址栏输入url到显示页面的步骤&quot;">​</a></h3><h3 id="_13、你有对-vue-项目进行哪些优化" tabindex="-1">13、你有对 Vue 项目进行哪些优化？ <a class="header-anchor" href="#_13、你有对-vue-项目进行哪些优化" aria-label="Permalink to &quot;13、你有对 Vue 项目进行哪些优化？&quot;">​</a></h3><h3 id="_14、v-model-的原理" tabindex="-1">14、v-model 的原理 <a class="header-anchor" href="#_14、v-model-的原理" aria-label="Permalink to &quot;14、v-model 的原理&quot;">​</a></h3><h3 id="_15、浏览器是怎么对-html5-的离线储存资源进行管理和加载的呢" tabindex="-1">15、浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？ <a class="header-anchor" href="#_15、浏览器是怎么对-html5-的离线储存资源进行管理和加载的呢" aria-label="Permalink to &quot;15、浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？&quot;">​</a></h3><h3 id="_16、26-移动端上什么是点击穿透" tabindex="-1">16、26.移动端上什么是点击穿透? <a class="header-anchor" href="#_16、26-移动端上什么是点击穿透" aria-label="Permalink to &quot;16、26.移动端上什么是点击穿透?&quot;">​</a></h3><h3 id="_17、javascript提供了哪几种-异步模式" tabindex="-1">17、JavaScript提供了哪几种“异步模式”？ <a class="header-anchor" href="#_17、javascript提供了哪几种-异步模式" aria-label="Permalink to &quot;17、JavaScript提供了哪几种“异步模式”？&quot;">​</a></h3><h3 id="_18、介绍一下你对浏览器内核的理解" tabindex="-1">18、介绍一下你对浏览器内核的理解？ <a class="header-anchor" href="#_18、介绍一下你对浏览器内核的理解" aria-label="Permalink to &quot;18、介绍一下你对浏览器内核的理解？&quot;">​</a></h3><h3 id="_19、javascript优化" tabindex="-1">19、JavaScript优化 <a class="header-anchor" href="#_19、javascript优化" aria-label="Permalink to &quot;19、JavaScript优化&quot;">​</a></h3><h3 id="_20、简述下-this-和定义属性和方法的时候有什么区别-prototype" tabindex="-1">20、简述下 this 和定义属性和方法的时候有什么区别?Prototype？ <a class="header-anchor" href="#_20、简述下-this-和定义属性和方法的时候有什么区别-prototype" aria-label="Permalink to &quot;20、简述下 this 和定义属性和方法的时候有什么区别?Prototype？&quot;">​</a></h3><h3 id="_21、js的基本数据类型" tabindex="-1">21、JS的基本数据类型 <a class="header-anchor" href="#_21、js的基本数据类型" aria-label="Permalink to &quot;21、JS的基本数据类型&quot;">​</a></h3><h3 id="_22、如何对登录的账号密码进行加密" tabindex="-1">22、如何对登录的账号密码进行加密? <a class="header-anchor" href="#_22、如何对登录的账号密码进行加密" aria-label="Permalink to &quot;22、如何对登录的账号密码进行加密?&quot;">​</a></h3><h3 id="_23、实现继承的方法有哪些" tabindex="-1">23、实现继承的方法有哪些？？？ <a class="header-anchor" href="#_23、实现继承的方法有哪些" aria-label="Permalink to &quot;23、实现继承的方法有哪些？？？&quot;">​</a></h3><h3 id="_24、什么是跨域-怎么解决跨域问题" tabindex="-1">24、什么是跨域？怎么解决跨域问题？ <a class="header-anchor" href="#_24、什么是跨域-怎么解决跨域问题" aria-label="Permalink to &quot;24、什么是跨域？怎么解决跨域问题？&quot;">​</a></h3><h3 id="_25、常见兼容性问题" tabindex="-1">25、常见兼容性问题？ <a class="header-anchor" href="#_25、常见兼容性问题" aria-label="Permalink to &quot;25、常见兼容性问题？&quot;">​</a></h3><h3 id="_26、谈谈以前端角度出发做好seo-搜索引擎-需要考虑什么" tabindex="-1">26、谈谈以前端角度出发做好SEO（搜索引擎）需要考虑什么？ <a class="header-anchor" href="#_26、谈谈以前端角度出发做好seo-搜索引擎-需要考虑什么" aria-label="Permalink to &quot;26、谈谈以前端角度出发做好SEO（搜索引擎）需要考虑什么？&quot;">​</a></h3><h3 id="_27、position的值-relative和absolute定位原点是" tabindex="-1">27、position的值， relative和absolute定位原点是 <a class="header-anchor" href="#_27、position的值-relative和absolute定位原点是" aria-label="Permalink to &quot;27、position的值， relative和absolute定位原点是&quot;">​</a></h3><h3 id="_28、网页验证码是干嘛的-是为了解决什么安全问题" tabindex="-1">28、网页验证码是干嘛的，是为了解决什么安全问题？ <a class="header-anchor" href="#_28、网页验证码是干嘛的-是为了解决什么安全问题" aria-label="Permalink to &quot;28、网页验证码是干嘛的，是为了解决什么安全问题？&quot;">​</a></h3><h3 id="_29、html5-的-form-的自动完成功能是什么" tabindex="-1">29、HTML5 的 form 的自动完成功能是什么？ <a class="header-anchor" href="#_29、html5-的-form-的自动完成功能是什么" aria-label="Permalink to &quot;29、HTML5 的 form 的自动完成功能是什么？&quot;">​</a></h3><h3 id="_30、描述一下渐进增强和优雅降级之间的不同" tabindex="-1">30、描述一下渐进增强和优雅降级之间的不同? <a class="header-anchor" href="#_30、描述一下渐进增强和优雅降级之间的不同" aria-label="Permalink to &quot;30、描述一下渐进增强和优雅降级之间的不同?&quot;">​</a></h3>`,99),t=[l];function r(p,c,i,E,d,h){return s(),e("div",null,t)}const g=a(o,[["render",r]]);export{u as __pageData,g as default};
