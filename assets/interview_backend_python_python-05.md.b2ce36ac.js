import{_ as s,o as a,c as n,V as o}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/python/python-05.md","filePath":"interview/backend/python/python-05.md"}'),l={name:"interview/backend/python/python-05.md"},e=o(`<h3 id="_1、redis中默认有多少个哈希槽" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1redis%E4%B8%AD%E9%BB%98%E8%AE%A4%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%93%88%E5%B8%8C%E6%A7%BD" target="_blank" rel="noreferrer">1、Redis中默认有多少个哈希槽</a> <a class="header-anchor" href="#_1、redis中默认有多少个哈希槽" aria-label="Permalink to &quot;[1、Redis中默认有多少个哈希槽](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#1redis中默认有多少个哈希槽)&quot;">​</a></h3><p><strong>1、</strong> 2^14个</p><p><strong>2、</strong> Redis 集群没有使用一致性hash, 而是引入了哈希槽的概念。</p><h3 id="_2、实例变量和类变量的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、实例变量和类变量的区别</a> <a class="header-anchor" href="#_2、实例变量和类变量的区别" aria-label="Permalink to &quot;[2、实例变量和类变量的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#2实例变量和类变量的区别)&quot;">​</a></h3><p><strong>1、</strong> 实例变量是对于每个实例都独有的数据</p><p><strong>2、</strong> 类变量是该类所有实例共享的属性和方法</p><h3 id="_3、解释一下python中的身份运算符" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8Bpython%E4%B8%AD%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">3、解释一下Python中的身份运算符</a> <a class="header-anchor" href="#_3、解释一下python中的身份运算符" aria-label="Permalink to &quot;[3、解释一下Python中的身份运算符](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#3解释一下python中的身份运算符)&quot;">​</a></h3><p>这也是一个在Python面试中常问的问题。</p><p>通过身份运算符‘is’和‘is not’，我们可以确认两个值是否相同。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; 10 is &#39;10&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">False</span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; True is not False</span></span>
<span class="line"><span style="color:#f6f6f4;">True</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; 10 is &#39;10&#39;</span></span>
<span class="line"><span style="color:#24292e;">False</span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;&gt; True is not False</span></span>
<span class="line"><span style="color:#24292e;">True</span></span></code></pre></div><h3 id="_4、yield-from-和-yield-的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4yield-from-%E5%92%8C-yield-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">4、yield from 和 yield 的区别</a> <a class="header-anchor" href="#_4、yield-from-和-yield-的区别" aria-label="Permalink to &quot;[4、yield from 和 yield 的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#4yield-from-和-yield-的区别)&quot;">​</a></h3><p><a href="https://blog.csdn.net/lamusique/article/details/85845225" target="_blank" rel="noreferrer">简述yield和yield from</a></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;"># 下面a()和b()是等价的</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">a</span><span style="color:#F6F6F4;">():</span></span>
<span class="line"><span style="color:#F286C4;">yield from</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">b</span><span style="color:#F6F6F4;">():</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">]:</span></span>
<span class="line"><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> i</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> a():</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(i)</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> b():</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(i)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 下面a()和b()是等价的</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#D73A49;">yield from</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">b</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]:</span></span>
<span class="line"><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> i</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> a():</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> b():</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(i)</span></span></code></pre></div><p>yield将一个函数变成一个生成器</p><p>yield 返回一个值</p><p>yield from后面接可迭代对象，一个一个返回值。</p><h3 id="_5、py2项目如何迁移成py3" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5py2%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E8%BF%81%E7%A7%BB%E6%88%90py3" target="_blank" rel="noreferrer">5、py2项目如何迁移成py3</a> <a class="header-anchor" href="#_5、py2项目如何迁移成py3" aria-label="Permalink to &quot;[5、py2项目如何迁移成py3](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#5py2项目如何迁移成py3)&quot;">​</a></h3><p><strong>1、</strong> 先备份原文件，然后使用python3自带工具2to3.py将py2文件转换位py3文件</p><p><strong>2、</strong> 手动将不兼容的代码改写成兼容py3的代码</p><h3 id="_6、生产者消费者模型的应用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">6、生产者消费者模型的应用场景</a> <a class="header-anchor" href="#_6、生产者消费者模型的应用场景" aria-label="Permalink to &quot;[6、生产者消费者模型的应用场景](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#6生产者消费者模型的应用场景)&quot;">​</a></h3><p><strong>说明</strong></p><p>生产者只在仓库未满时进行生产，仓库满时生产者进程被阻塞；消费者只在仓库非空时进行消费，仓库为空时消费者进程被阻塞；</p><p>应用场景：处理数据比较消耗时间，线程独占，生产数据不需要即时的反馈等。比如说写入日志，将多线程产生的日志放在队列中，然后写入。</p><h3 id="_7、简述数据库的读写分离" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E7%AE%80%E8%BF%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" target="_blank" rel="noreferrer">7、简述数据库的读写分离</a> <a class="header-anchor" href="#_7、简述数据库的读写分离" aria-label="Permalink to &quot;[7、简述数据库的读写分离](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#7简述数据库的读写分离)&quot;">​</a></h3><p>读写分离就是在主服务器上修改，数据会同步到从服务器，从服务器只能提供读取数据，不能写入，实现备份的同时也实现了数据库性能的优化，以及提升了服务器安全。</p><h3 id="_8、解释-、-、-运算符" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E8%A7%A3%E9%87%8A//%EF%BC%85*-*%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">8、解释//、％、* *运算符？</a> <a class="header-anchor" href="#_8、解释-、-、-运算符" aria-label="Permalink to &quot;[8、解释//、％、* *运算符？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#8解释//％*-*运算符)&quot;">​</a></h3><p>//(Floor Division)-这是一个除法运算符，它返回除法的整数部分。</p><p>例如：5 // 2 = 2</p><p>％(模数)-返回除法的余数。</p><p>例如：5 ％ 2 = 1</p><p>**(幂)-它对运算符执行指数计算。a ** b表示a的b次方。</p><p>例如：5 ** 2 = 25、5 ** 3 = 125</p><h3 id="_9、什么是轮询和长轮询" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AE%E8%AF%A2%E5%92%8C%E9%95%BF%E8%BD%AE%E8%AF%A2" target="_blank" rel="noreferrer">9、什么是轮询和长轮询</a> <a class="header-anchor" href="#_9、什么是轮询和长轮询" aria-label="Permalink to &quot;[9、什么是轮询和长轮询](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#9什么是轮询和长轮询)&quot;">​</a></h3><p>轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#62E884;">setInterval</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">/user</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    xhr.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {};</span></span>
<span class="line"><span style="color:#F6F6F4;">    xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}, </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/user&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {};</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span></code></pre></div><p>长轮询是ajax实现:在发送ajax后,服务器端会阻塞请求直到有数据传递或超时才返回。 客户端JavaScript响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ajax</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> xhr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">XMLHttpRequest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    xhr.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">GET</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">/user</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    xhr.</span><span style="color:#62E884;">onreadystatechange</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">ajax</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    };</span></span>
<span class="line"><span style="color:#F6F6F4;">    xhr.</span><span style="color:#62E884;">send</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ajax</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;GET&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/user&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">ajax</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_10、如果redis中的某个列表中的数据量非常大-如何实现循环显示每一个值" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10%E5%A6%82%E6%9E%9Credis%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8F%E9%9D%9E%E5%B8%B8%E5%A4%A7%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BE%AA%E7%8E%AF%E6%98%BE%E7%A4%BA%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%80%BC" target="_blank" rel="noreferrer">10、如果Redis中的某个列表中的数据量非常大，如何实现循环显示每一个值？</a> <a class="header-anchor" href="#_10、如果redis中的某个列表中的数据量非常大-如何实现循环显示每一个值" aria-label="Permalink to &quot;[10、如果Redis中的某个列表中的数据量非常大，如何实现循环显示每一个值？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题及答案，汇总版.md#10如果redis中的某个列表中的数据量非常大如何实现循环显示每一个值)&quot;">​</a></h3><p>使用生成器一个一个取</p><h3 id="_11、简述生成器-迭代器-装饰器以及应用场景" tabindex="-1">11、简述生成器，迭代器，装饰器以及应用场景 <a class="header-anchor" href="#_11、简述生成器-迭代器-装饰器以及应用场景" aria-label="Permalink to &quot;11、简述生成器，迭代器，装饰器以及应用场景&quot;">​</a></h3><h3 id="_12、比较-a-1-2-3-和b-1-2-3-以及c-1-2-3-的区别" tabindex="-1">12、比较：a=[1,2,3]和b=[(1),(2),(3)]以及c=[(1,),(2,),(3,)]的区别 <a class="header-anchor" href="#_12、比较-a-1-2-3-和b-1-2-3-以及c-1-2-3-的区别" aria-label="Permalink to &quot;12、比较：a=[1,2,3]和b=[(1),(2),(3)]以及c=[(1,),(2,),(3,)]的区别&quot;">​</a></h3><h3 id="_13、什么是c3算法" tabindex="-1">13、什么是c3算法？ <a class="header-anchor" href="#_13、什么是c3算法" aria-label="Permalink to &quot;13、什么是c3算法？&quot;">​</a></h3><h3 id="_14、字节码和机器码的区别" tabindex="-1">14、字节码和机器码的区别 <a class="header-anchor" href="#_14、字节码和机器码的区别" aria-label="Permalink to &quot;14、字节码和机器码的区别&quot;">​</a></h3><h3 id="_15、mysql执行计划的作用和使用方法" tabindex="-1">15、MySQL执行计划的作用和使用方法 <a class="header-anchor" href="#_15、mysql执行计划的作用和使用方法" aria-label="Permalink to &quot;15、MySQL执行计划的作用和使用方法&quot;">​</a></h3><h3 id="_16、简述left-join和right-join的区别" tabindex="-1">16、简述left join和right join的区别 <a class="header-anchor" href="#_16、简述left-join和right-join的区别" aria-label="Permalink to &quot;16、简述left join和right join的区别&quot;">​</a></h3><h3 id="_17、什么是lvs" tabindex="-1">17、什么是LVS <a class="header-anchor" href="#_17、什么是lvs" aria-label="Permalink to &quot;17、什么是LVS&quot;">​</a></h3><h3 id="_18、求下面代码结果" tabindex="-1">18、求下面代码结果 <a class="header-anchor" href="#_18、求下面代码结果" aria-label="Permalink to &quot;18、求下面代码结果&quot;">​</a></h3><h3 id="_19、python中enumerate的意思是什么" tabindex="-1">19、python中enumerate的意思是什么？ <a class="header-anchor" href="#_19、python中enumerate的意思是什么" aria-label="Permalink to &quot;19、python中enumerate的意思是什么？&quot;">​</a></h3><h3 id="_20、常用字符串格式化有哪几种" tabindex="-1">20、常用字符串格式化有哪几种？ <a class="header-anchor" href="#_20、常用字符串格式化有哪几种" aria-label="Permalink to &quot;20、常用字符串格式化有哪几种？&quot;">​</a></h3><h3 id="_21、列举字符串、列表、元组、字典每个常用的5个方法" tabindex="-1">21、列举字符串、列表、元组、字典每个常用的5个方法 <a class="header-anchor" href="#_21、列举字符串、列表、元组、字典每个常用的5个方法" aria-label="Permalink to &quot;21、列举字符串、列表、元组、字典每个常用的5个方法&quot;">​</a></h3><h3 id="_22、如何更改列表的数据类型" tabindex="-1">22、如何更改列表的数据类型？ <a class="header-anchor" href="#_22、如何更改列表的数据类型" aria-label="Permalink to &quot;22、如何更改列表的数据类型？&quot;">​</a></h3><h3 id="_23、什么是一致性哈希" tabindex="-1">23、什么是一致性哈希 <a class="header-anchor" href="#_23、什么是一致性哈希" aria-label="Permalink to &quot;23、什么是一致性哈希&quot;">​</a></h3><h3 id="_24、曾经使用过哪些前端框架" tabindex="-1">24、曾经使用过哪些前端框架 <a class="header-anchor" href="#_24、曾经使用过哪些前端框架" aria-label="Permalink to &quot;24、曾经使用过哪些前端框架&quot;">​</a></h3><h3 id="_25、简述osi七层协议" tabindex="-1">25、简述OSI七层协议 <a class="header-anchor" href="#_25、简述osi七层协议" aria-label="Permalink to &quot;25、简述OSI七层协议&quot;">​</a></h3><h3 id="_26、python递归的最大层数" tabindex="-1">26、python递归的最大层数？ <a class="header-anchor" href="#_26、python递归的最大层数" aria-label="Permalink to &quot;26、python递归的最大层数？&quot;">​</a></h3><h3 id="_27、如何用一行代码生成-1-4-9-16-25-36-49-64-81-100" tabindex="-1">27、如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]? <a class="header-anchor" href="#_27、如何用一行代码生成-1-4-9-16-25-36-49-64-81-100" aria-label="Permalink to &quot;27、如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]?&quot;">​</a></h3><h3 id="_28、query作为sql模板-args为将要传入的参数" tabindex="-1">28、query作为sql模板，args为将要传入的参数 <a class="header-anchor" href="#_28、query作为sql模板-args为将要传入的参数" aria-label="Permalink to &quot;28、query作为sql模板，args为将要传入的参数&quot;">​</a></h3><h3 id="_29、使用with语句的好处是什么" tabindex="-1">29、使用with语句的好处是什么 <a class="header-anchor" href="#_29、使用with语句的好处是什么" aria-label="Permalink to &quot;29、使用with语句的好处是什么&quot;">​</a></h3><h3 id="_30、什么是lambda函数" tabindex="-1">30、什么是lambda函数？ <a class="header-anchor" href="#_30、什么是lambda函数" aria-label="Permalink to &quot;30、什么是lambda函数？&quot;">​</a></h3>`,59),p=[e];function t(r,c,E,y,i,h){return a(),n("div",null,p)}const u=s(l,[["render",t]]);export{d as __pageData,u as default};
