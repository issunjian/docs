import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/rabbitmq-rumen-d416cab5-69bd-46a6-b65c-8cf3b6667136.73326bb6.jpg",p="/docs/assets/rabbitmq-rumen-0e8d83f8-fdf0-4755-9131-1f5c775ca010.f2190198.jpg",e="/docs/assets/rabbitmq-rumen-9012f7d7-01bf-437a-ac98-f6a71390105e.359975d2.jpg",t="/docs/assets/rabbitmq-rumen-644fafa4-a4bc-45a2-831a-12deda958122.58bef598.jpg",c="/docs/assets/rabbitmq-rumen-43268557-1240-4ed4-9883-de93668f1f04.761dacd0.jpg",r="/docs/assets/rabbitmq-rumen-b3343075-f9a8-441f-b266-0750df82a1c6.1c1d0d09.jpg",y="/docs/assets/rabbitmq-rumen-6f185cbd-b3ab-432a-85df-be3a93450533.b99c0791.jpg",F="/docs/assets/rabbitmq-rumen-d9407f52-3585-4c3c-af2f-7b7c4ec45461.4d7ce39c.jpg",i="/docs/assets/rabbitmq-rumen-3479f2b1-5089-4d73-a6fa-f673989766b7.83821580.jpg",E="/docs/assets/rabbitmq-rumen-cbad5128-e675-4da7-a5dd-fe9bb303f5f0.e7fd2e34.jpg",b="/docs/assets/rabbitmq-rumen-3ce8cf20-76f0-4192-88d4-f40d9a23233e.fef579d6.jpg",d="/docs/assets/rabbitmq-rumen-0dcb67b3-521f-4d91-9e46-590e93631b35.fa2f477a.jpg",k=JSON.parse('{"title":"RabbitMQ入门教程（概念、应用场景、安装、使用）","description":"","frontmatter":{"category":["Java企业级开发"],"tag":["消息队列"]},"headers":[],"relativePath":"backend/tobetter/mq/rabbitmq-rumen.md","filePath":"backend/tobetter/mq/rabbitmq-rumen.md"}'),u={name:"backend/tobetter/mq/rabbitmq-rumen.md"},g=l('<h1 id="rabbitmq入门教程-概念、应用场景、安装、使用" tabindex="-1">RabbitMQ入门教程（概念、应用场景、安装、使用） <a class="header-anchor" href="#rabbitmq入门教程-概念、应用场景、安装、使用" aria-label="Permalink to &quot;RabbitMQ入门教程（概念、应用场景、安装、使用）&quot;">​</a></h1><p>人一辈子最值得炫耀的不应该是你的财富有多少（虽然这话说得有点违心，呵呵），而是你的学习能力。技术更新迭代的速度非常快，那作为程序员，我们就应该拥有一颗拥抱变化的心，积极地跟进。</p><p>在 RabbitMQ 入门之前，我已经入门了 <a href="https://mp.weixin.qq.com/s/NPJkMy5RppyFk9QhzHxhrw" target="_blank" rel="noreferrer">Redis</a>、<a href="https://mp.weixin.qq.com/s/ZjsZxle7m_dfmVwVkq2ayg" target="_blank" rel="noreferrer">Elasticsearch</a> 和 <a href="https://mp.weixin.qq.com/s/qz0sNOFeS0GTW-H9cdnbJg" target="_blank" rel="noreferrer">MongoDB</a>，这让我感觉自己富有极客精神，非常良好。</p><img src="'+o+'"><p>小伙伴们在继续阅读之前，我必须要声明一点，我对 RabbitMQ 并没有进行很深入的研究，仅仅是因为要用，就学一下。但作为一名负责任的技术博主，我是动了心的，这篇入门教程，小伙伴们读完后绝对会感到满意，忍不住无情地点赞，以及赤裸裸地转发。</p><p>当然了，小伙伴们遇到文章中有错误的地方，不要手下留情，可以组团过来捶我，但要保证一点，不要打脸，我怕毁容。</p><h3 id="_01、rabbitmq-是什么" tabindex="-1">01、RabbitMQ 是什么 <a class="header-anchor" href="#_01、rabbitmq-是什么" aria-label="Permalink to &quot;01、RabbitMQ 是什么&quot;">​</a></h3><p>首先，我知道，Rabbit 是一只兔子（哎呀妈呀，忍不住秀了一波自己的英语功底），可爱的形象已经跃然于我的脑海中了。那 MQ 又是什么呢？是 Message Queue 的首字母缩写，也就是说 RabbitMQ 是一款开源的消息队列系统。</p><p>RabbitMQ 的主要特点在于健壮性好、易于使用、高性能、高并发、集群易扩展，以及强大的开源社区支持。反正就是很牛逼的样子。</p><p>九年前我做大宗期货交易的时候，也需要消息推送，那时候还不知道去找这种现成的中间件，就用自定义的队列实现，结果搞了不少 bug，有些到现在还没有解决，真的是不堪回首的往事啊。</p><p>下图是 RabbitMQ 的消息模型图（来源于网络，侵删），小伙伴们来感受下。</p><img src="'+p+'"><p>1）P 是 Producer，代表生产者，也就是消息的发送者，可以将消息发送到 X</p><p>2）X 是 Exchange（为啥不是 E，我也很好奇），代表交换机，可以接受生产者发送的消息，并根据路由将消息发送给指定的队列</p><p>3）Q 是 Queue，也就是队列，存放交换机发送来的消息</p><p>4）C 是 Consumer，代表消费者，也就是消息的接受者，从队列中获取消息</p><p>听我这样一解释，是不是对 RabbitMQ 的印象就很具象化了？小伙伴们，学起来吧！</p><h3 id="_02、安装-erlang" tabindex="-1">02、安装 Erlang <a class="header-anchor" href="#_02、安装-erlang" aria-label="Permalink to &quot;02、安装 Erlang&quot;">​</a></h3><p>咦，怎么不是安装 RabbitMQ 啊？先来看看官方的解释。</p><img src="'+e+'"><p>英文看不太懂，没关系，我来补充两句人话。RabbitMQ 服务器是用 Erlang 语言编写的，它的安装包里并没有集成 Erlang 的环境，因此需要先安装 Erlang。小伙伴们不要担心，Erlang 安装起来没有任何难度。</p><p>Erlang 下载地址如下：</p><p><a href="https://erlang.org/download/otp_versions_tree.html" target="_blank" rel="noreferrer">https://erlang.org/download/otp_versions_tree.html</a></p><p>最新的版本是 23.0.1，我选择的是 64 位的版本，104M 左右。下载完就可以双击运行安装，傻瓜式的。</p><img src="'+t+'"><p>需要注意的是，我安装的过程中，电脑重启了一次，好像要安装一个什么库，重启之前忘记保存图片了（sorry）。重启后，重新双击运行 otp_win64_23.0.1.exe 文件完成 Erlang 安装。</p><h3 id="_03、安装-rabbitmq" tabindex="-1">03、安装 RabbitMQ <a class="header-anchor" href="#_03、安装-rabbitmq" aria-label="Permalink to &quot;03、安装 RabbitMQ&quot;">​</a></h3><p>Erlang 安装成功后，就可以安装 RabbitMQ 了。下载地址如下所示：</p><p><a href="https://www.rabbitmq.com/install-windows.html" target="_blank" rel="noreferrer">https://www.rabbitmq.com/install-windows.html</a></p><p>找到下图中的位置，选择红色框中的文件进行下载。</p><img src="'+c+'"><p>安装包只有 16.5M 大小，还是非常轻量级的。下载完后直接双击运行 exe 文件就可以傻瓜式地安装了。</p><img src="'+r+'"><p>安装成功后，就可以将 RabbitMQ 作为 Windows 服务启动，可以从“开始”菜单管理 RabbitMQ Windows 服务。</p><img src="'+y+'"><p>点击「RabbitMQ Command Prompt (sbin dir)」，进入命令行，输入 <code>rabbitmqctl.bat status</code> 可确认 RabbitMQ 的启动状态。</p><img src="'+F+'"><p>可以看到 RabbitMQ 一些状态信息：</p><ul><li>进程 ID，也就是 PID 为 2816</li><li>操作系统为 Windows</li><li>当前的版本号为 3.8.4</li><li>Erlang 的配置信息</li></ul><p>命令行界面看起来不够优雅，因此我们可以输入以下命令来启用客户端管理 UI 插件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">rabbitmq-plugins enable rabbitmq_management</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">rabbitmq-plugins enable rabbitmq_management</span></span></code></pre></div><p>看到以下信息就可以确认插件启用成功了。</p><img src="'+i+'"><p>在浏览器地址栏输入 <a href="http://localhost:15672/" target="_blank" rel="noreferrer">http://localhost:15672/</a> 可以进入管理端界面，如下图所示：</p><img src="'+E+`"><h3 id="_04、在-java-中使用-rabbitmq" tabindex="-1">04、在 Java 中使用 RabbitMQ <a class="header-anchor" href="#_04、在-java-中使用-rabbitmq" aria-label="Permalink to &quot;04、在 Java 中使用 RabbitMQ&quot;">​</a></h3><p>有些小伙伴可能会问，“二哥，我是一名 Java 程序员，我该如何在 Java 中使用 RabbitMQ 呢？”这个问题问得好，这就来，这就来。</p><p>第一步，在项目中添加 RabbitMQ 客户端依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;5.9.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;amqp-client&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;5.9.0&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>第二步，我们来模拟一个最简单的场景，一个生产者发送消息到队列中，一个消费者从队列中读取消息并打印。</p><img src="`+b+`"><p>官方对 RabbitMQ 有一个很好的解释，我就“拿来主义”的用一下。在我上高中的年代，同学们之间最流行的交流方式不是 QQ、微信，甚至短信这些，而是书信。因为那时候还没有智能手机，况且上学期间学校也是命令禁用手机的，所以书信是情感表达的最好方式。好怀念啊。</p><p>假如我向女朋友小巷写了一封情书，内容如下所示：</p><blockquote><p>致小巷 你好呀，小巷。 你走了以后我每天都感到很闷，就像堂吉诃德一样，每天想念托波索的达辛妮亚。我现在已经养成了一种习惯，就是每两三天就要找你说几句不想对别人说的话。 。。。。。。 王二，5月20日</p></blockquote><p>那这封情书要寄给小巷，我就需要跑到邮局，买上邮票，投递到邮箱当中。女朋友要收到这封情书，就需要邮递员尽心尽力，不要弄丢了。</p><p>RabbitMQ 就像邮局一样，只不过处理的不是邮件，而是消息。之前解释过了，P 就是生产者，C 就是消费者。</p><p>新建生产者类 Wanger ：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Wanger</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> QUEUE_NAME </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">love</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">TimeoutException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ConnectionFactory</span><span style="color:#F6F6F4;"> factory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ConnectionFactory</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Connection</span><span style="color:#F6F6F4;"> connection </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> factory.</span><span style="color:#62E884;">newConnection</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#97E1F1;font-style:italic;">Channel</span><span style="color:#F6F6F4;"> channel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> connection.</span><span style="color:#62E884;">createChannel</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            channel.</span><span style="color:#62E884;">queueDeclare</span><span style="color:#F6F6F4;">(QUEUE_NAME, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">小巷，我喜欢你。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            channel.</span><span style="color:#62E884;">basicPublish</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">, QUEUE_NAME, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, message.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">(StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> [王二] 发送 &#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Wanger</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String QUEUE_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;love&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, TimeoutException {</span></span>
<span class="line"><span style="color:#24292E;">        ConnectionFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">newConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">createChannel</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">            channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;小巷，我喜欢你。&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            channel.</span><span style="color:#6F42C1;">basicPublish</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, QUEUE_NAME, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, message.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">(StandardCharsets.UTF_8));</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; [王二] 发送 &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1）QUEUE_NAME 为队列名，也就是说，生产者发送的消息会放到 love 队列中。</p><p>2）通过以下方式创建服务器连接：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ConnectionFactory</span><span style="color:#F6F6F4;"> factory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ConnectionFactory</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Connection</span><span style="color:#F6F6F4;"> connection </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> factory.</span><span style="color:#62E884;">newConnection</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#97E1F1;font-style:italic;">Channel</span><span style="color:#F6F6F4;"> channel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> connection.</span><span style="color:#62E884;">createChannel</span><span style="color:#F6F6F4;">()) {</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ConnectionFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">newConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">createChannel</span><span style="color:#24292E;">()) {</span></span></code></pre></div><p>ConnectionFactory 是一个非常方便的工厂类，可用来创建到 RabbitMQ 的默认连接（主机名为“localhost”）。然后，创建一个通道（ Channel）来发送消息。</p><p>Connection 和 Channel 类都实现了 Closeable 接口，所以可以使用 try-with-resource 语句，如果有小伙伴对 try-with-resource 语句不太熟悉，可以查看我之前写的<a href="https://mp.weixin.qq.com/s/fbTzH5B7mSr5v0tQ8mV2wA" target="_blank" rel="noreferrer">我去</a>文章。</p><p>3）在发送消息的时候，必须设置队列名称，通过 <code>queueDeclare()</code> 方法设置。</p><p>4）<code>basicPublish()</code> 方法用于发布消息：</p><ul><li>第一个参数为交换机（exchange），当前场景不需要，因此设置为空字符串；</li><li>第二个参数为路由关键字（routingKey），暂时使用队列名填充；</li><li>第三个参数为消息的其他参数（BasicProperties），暂时不配置；</li><li>第四个参数为消息的主体，这里为 UTF-8 格式的字节数组，可以有效地杜绝中文乱码。</li></ul><p>生产者类有了，接下来新建消费者类 XiaoXiang：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">XiaoXiang</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> QUEUE_NAME </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">love</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">TimeoutException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ConnectionFactory</span><span style="color:#F6F6F4;"> factory </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ConnectionFactory</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Connection</span><span style="color:#F6F6F4;"> connection </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> factory.</span><span style="color:#62E884;">newConnection</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Channel</span><span style="color:#F6F6F4;"> channel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> connection.</span><span style="color:#62E884;">createChannel</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        channel.</span><span style="color:#62E884;">queueDeclare</span><span style="color:#F6F6F4;">(QUEUE_NAME, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">等待接收消息</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">DeliverCallback</span><span style="color:#F6F6F4;"> deliverCallback </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (consumerTag, delivery) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(delivery.</span><span style="color:#62E884;">getBody</span><span style="color:#F6F6F4;">(), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> [小巷] 接收到的消息 &#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        };</span></span>
<span class="line"><span style="color:#F6F6F4;">        channel.</span><span style="color:#62E884;">basicConsume</span><span style="color:#F6F6F4;">(QUEUE_NAME, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">, deliverCallback, consumerTag </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> { });</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XiaoXiang</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String QUEUE_NAME </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;love&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException, TimeoutException {</span></span>
<span class="line"><span style="color:#24292E;">        ConnectionFactory factory </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConnectionFactory</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Connection connection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> factory.</span><span style="color:#6F42C1;">newConnection</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Channel channel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> connection.</span><span style="color:#6F42C1;">createChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">queueDeclare</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;等待接收消息&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        DeliverCallback deliverCallback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (consumerTag, delivery) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(delivery.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; [小巷] 接收到的消息 &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        channel.</span><span style="color:#6F42C1;">basicConsume</span><span style="color:#24292E;">(QUEUE_NAME, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, deliverCallback, consumerTag </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>1）创建通道的代码和生产者差不多，只不过没有使用 try-with-resource 语句来自动关闭连接和通道，因为我们希望消费者能够一直保持连接，直到我们强制关闭它。</p><p>2）在接收消息的时候，必须设置队列名称，通过 queueDeclare() 方法设置。</p><p>3）由于 RabbitMQ 将会通过异步的方式向我们推送消息，因此我们需要提供了一个回调，该回调将对消息进行缓冲，直到我们做好准备接收它们为止。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">DeliverCallback</span><span style="color:#F6F6F4;"> deliverCallback </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (consumerTag, delivery) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(delivery.</span><span style="color:#62E884;">getBody</span><span style="color:#F6F6F4;">(), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> [小巷] 接收到的消息 &#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> message </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">DeliverCallback deliverCallback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (consumerTag, delivery) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    String message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(delivery.</span><span style="color:#6F42C1;">getBody</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; [小巷] 接收到的消息 &#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&#39;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p><code>basicConsume()</code> 方法用于接收消息：</p><ul><li><p>第一个参数为队列名（queue），和生产者相匹配（love）。</p></li><li><p>第二个参数为 autoAck，如果为 true 的话，表明服务器要一次性交付消息。怎么理解这个概念呢？小伙伴们可以在运行消费者类 XiaoXiang 类之前，先多次运行生产者类 Wanger，向队列中发送多个消息，等到消费者类启动后，你就会看到多条消息一次性接收到了，就像下面这样。</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">等待接收消息</span></span>
<span class="line"><span style="color:#f6f6f4;"> [小巷] 接收到的消息 &#39;小巷，我喜欢你。&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;"> [小巷] 接收到的消息 &#39;小巷，我喜欢你。&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;"> [小巷] 接收到的消息 &#39;小巷，我喜欢你。&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">等待接收消息</span></span>
<span class="line"><span style="color:#24292e;"> [小巷] 接收到的消息 &#39;小巷，我喜欢你。&#39;</span></span>
<span class="line"><span style="color:#24292e;"> [小巷] 接收到的消息 &#39;小巷，我喜欢你。&#39;</span></span>
<span class="line"><span style="color:#24292e;"> [小巷] 接收到的消息 &#39;小巷，我喜欢你。&#39;</span></span></code></pre></div><ul><li><p>第三个参数为 DeliverCallback，也就是消息的回调函数。</p></li><li><p>第四个参数为 CancelCallback，我暂时没搞清楚是干嘛的。</p></li></ul><p>在消息发送的过程中，也可以使用 RabbitMQ 的管理面板查看到消息的走势图，如下所示。</p><img src="`+d+'">',78),C=[g];function f(m,h,q,v,D,_){return a(),n("div",null,C)}const w=s(u,[["render",f]]);export{k as __pageData,w as default};
