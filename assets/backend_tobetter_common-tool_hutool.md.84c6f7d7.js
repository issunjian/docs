import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/hutool-01.6497a9cd.png",o="/docs/assets/hutool-02.8125dad4.png",t="/docs/assets/hutool-03.85b640d3.png",e="/docs/assets/hutool-04.2e63b6d3.png",c="/docs/assets/hutool-05.02979c49.png",r="/docs/assets/hutool-06.44822a2e.png",y="/docs/assets/hutool-07.c77b9a78.png",f=JSON.parse('{"title":"Hutool：国产良心工具包，让你的Java变得更甜","description":"本文详细介绍了国产Java工具包Hutool，阐述了它在简化Java编程中的实际应用和优势。通过具体的代码示例，展示了如何使用Hutool解决字符串处理、集合操作、日期时间处理等常见问题。学习Hutool的技巧，让您在Java编程中更加轻松、高效，享受编程的乐趣。","frontmatter":{"title":"Hutool：国产良心工具包，让你的Java变得更甜","shortTitle":"Hutool工具类库","category":["Java核心"],"tag":["常用工具类"],"description":"本文详细介绍了国产Java工具包Hutool，阐述了它在简化Java编程中的实际应用和优势。通过具体的代码示例，展示了如何使用Hutool解决字符串处理、集合操作、日期时间处理等常见问题。学习Hutool的技巧，让您在Java编程中更加轻松、高效，享受编程的乐趣。","head":[["meta",{"name":"keywords","content":"Java,Java SE,Java基础,Java教程,Java程序员进阶之路,Java进阶之路,Java入门,教程,java,Hutool,java hutool"}]]},"headers":[],"relativePath":"backend/tobetter/common-tool/hutool.md","filePath":"backend/tobetter/common-tool/hutool.md"}'),F={name:"backend/tobetter/common-tool/hutool.md"},i=l('<h1 id="_9-6-hutool工具类库" tabindex="-1">9.6 Hutool工具类库 <a class="header-anchor" href="#_9-6-hutool工具类库" aria-label="Permalink to &quot;9.6 Hutool工具类库&quot;">​</a></h1><p>读者群里有个小伙伴感慨说，“Hutool 这款开源类库太厉害了，基本上该有该的工具类，它里面都有。”讲真的，我平常工作中也经常用 Hutool，它确实可以帮助我们简化每一行代码，使 Java 拥有函数式语言般的优雅，让 Java 语言变得“甜甜的”。</p><p>Hutool 的作者在<a href="https://hutool.cn/" target="_blank" rel="noreferrer">官网</a>上说，Hutool 是 Hu+tool 的自造词（好像不用说，我们也能猜得到），“Hu”用来致敬他的“前任”公司，“tool”就是工具的意思，谐音就有意思了，“糊涂”，寓意追求“万事都作糊涂观，无所谓失，无所谓得”（一个开源类库，上升到了哲学的高度，作者厉害了）。</p><p>看了一下开发团队的一个成员介绍，一个 Java 后端工具的作者竟然爱前端、爱数码，爱美女，嗯嗯嗯，确实“难得糊涂”（手动狗头）。</p><img src="'+p+`"><p>废话就说到这，来吧，实操走起！</p><h3 id="_01、引入-hutool" tabindex="-1">01、引入 Hutool <a class="header-anchor" href="#_01、引入-hutool" aria-label="Permalink to &quot;01、引入 Hutool&quot;">​</a></h3><p>Maven 项目只需要在 pom.xml 文件中添加以下依赖即可。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;5.4.3&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;5.4.3&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><p>Hutool 的设计思想是尽量减少重复的定义，让项目中的 util 包尽量少。一个好的轮子可以在很大程度上避免“复制粘贴”，从而节省我们开发人员对项目中公用类库和公用工具方法的封装时间。同时呢，成熟的开源库也可以最大限度的避免封装不完善带来的 bug。</p><p>就像作者在官网上说的那样：</p><ul><li>以前，我们打开搜索引擎 -&gt; 搜“Java MD5 加密” -&gt; 打开某篇博客 -&gt; 复制粘贴 -&gt; 改改，变得好用些</li><li>有了 Hutool 以后呢，引入 Hutool -&gt; 直接 <code>SecureUtil.md5()</code></li></ul><p>Hutool 对不仅对 JDK 底层的文件、流、加密解密、转码、正则、线程、XML等做了封装，还提供了以下这些组件：</p><img src="`+o+`"><p>非常多，非常全面，鉴于此，我只挑选一些我喜欢的来介绍下（偷偷地告诉你，我就是想偷懒）。</p><h3 id="_02、类型转换" tabindex="-1">02、类型转换 <a class="header-anchor" href="#_02、类型转换" aria-label="Permalink to &quot;02、类型转换&quot;">​</a></h3><p>类型转换在 Java 开发中很常见，尤其是从 HttpRequest 中获取参数的时候，前端传递的是整型，但后端只能先获取到字符串，然后再调用 <code>parseXXX()</code> 方法进行转换，还要加上判空，很繁琐。</p><p>Hutool 的 Convert 类可以简化这个操作，可以将任意可能的类型转换为指定类型，同时第二个参数 defaultValue 可用于在转换失败时返回一个默认值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> param </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">10</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> paramInt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Convert.</span><span style="color:#62E884;">toInt</span><span style="color:#F6F6F4;">(param);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> paramIntDefault </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Convert.</span><span style="color:#62E884;">toInt</span><span style="color:#F6F6F4;">(param, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String param </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> paramInt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Convert.</span><span style="color:#6F42C1;">toInt</span><span style="color:#24292E;">(param);</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> paramIntDefault </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Convert.</span><span style="color:#6F42C1;">toInt</span><span style="color:#24292E;">(param, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span></code></pre></div><p>把字符串转换成日期：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> dateStr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2020年09月29日</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Convert.</span><span style="color:#62E884;">toDate</span><span style="color:#F6F6F4;">(dateStr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String dateStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020年09月29日&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Date date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Convert.</span><span style="color:#6F42C1;">toDate</span><span style="color:#24292E;">(dateStr);</span></span></code></pre></div><p>把字符串转成 Unicode：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> unicodeStr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> unicode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Convert.</span><span style="color:#62E884;">strToUnicode</span><span style="color:#F6F6F4;">(unicodeStr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String unicodeStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String unicode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Convert.</span><span style="color:#6F42C1;">strToUnicode</span><span style="color:#24292E;">(unicodeStr);</span></span></code></pre></div><h3 id="_03、日期时间" tabindex="-1">03、日期时间 <a class="header-anchor" href="#_03、日期时间" aria-label="Permalink to &quot;03、日期时间&quot;">​</a></h3><p>JDK 自带的 Date 和 Calendar 不太好用，Hutool 封装的 DateUtil 用起来就舒服多了！</p><p>获取当前日期：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">date</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Date date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">date</span><span style="color:#24292E;">();</span></span></code></pre></div><p><code>DateUtil.date()</code> 返回的其实是 DateTime，它继承自 Date 对象，重写了 <code>toString()</code> 方法，返回 <code>yyyy-MM-dd HH:mm:ss</code> 格式的字符串。</p><p>有些小伙伴是不是想看看我写这篇文章的时间，输出一下给大家看看：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">System.out.println(date);// 2020-09-29 04:28:02</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">System.out.println(date);// 2020-09-29 04:28:02</span></span></code></pre></div><p>字符串转日期：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> dateStr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2020-09-29</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(dateStr);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String dateStr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-09-29&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Date date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(dateStr);</span></span></code></pre></div><p><code>DateUtil.parse()</code> 会自动识别一些常用的格式，比如说：</p><ul><li>yyyy-MM-dd HH:mm:ss</li><li>yyyy-MM-dd</li><li>HH:mm:ss</li><li>yyyy-MM-dd HH:mm</li><li>yyyy-MM-dd HH:mm:ss.SSS</li></ul><p>还可以识别带中文的：</p><ul><li>年月日时分秒</li></ul><p>格式化时间差：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> dateStr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2020-09-29 22:33:23</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> date1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(dateStr1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> dateStr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2020-10-01 23:34:27</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> date2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(dateStr2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> betweenDay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">between</span><span style="color:#F6F6F4;">(date1, date2, DateUnit.MS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 输出：2天1小时1分4秒</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> formatBetween </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">formatBetween</span><span style="color:#F6F6F4;">(betweenDay, BetweenFormater.Level.SECOND);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String dateStr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-09-29 22:33:23&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Date date1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(dateStr1);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">String dateStr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2020-10-01 23:34:27&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">Date date2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(dateStr2);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> betweenDay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">between</span><span style="color:#24292E;">(date1, date2, DateUnit.MS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 输出：2天1小时1分4秒</span></span>
<span class="line"><span style="color:#24292E;">String formatBetween </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">formatBetween</span><span style="color:#24292E;">(betweenDay, BetweenFormater.Level.SECOND);</span></span></code></pre></div><p>星座和属相：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 射手座</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> zodiac </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">getZodiac</span><span style="color:#F6F6F4;">(Month.DECEMBER.</span><span style="color:#62E884;">getValue</span><span style="color:#F6F6F4;">(), </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 蛇</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> chineseZodiac </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> DateUtil.</span><span style="color:#62E884;">getChineseZodiac</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1989</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 射手座</span></span>
<span class="line"><span style="color:#24292E;">String zodiac </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">getZodiac</span><span style="color:#24292E;">(Month.DECEMBER.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 蛇</span></span>
<span class="line"><span style="color:#24292E;">String chineseZodiac </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateUtil.</span><span style="color:#6F42C1;">getChineseZodiac</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1989</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_04、io-流相关" tabindex="-1">04、IO 流相关 <a class="header-anchor" href="#_04、io-流相关" aria-label="Permalink to &quot;04、IO 流相关&quot;">​</a></h3><p><a href="https://tobebetterjavaer.com/io/shangtou.html" target="_blank" rel="noreferrer">IO 操作包括读和写</a>，应用的场景主要包括网络操作和文件操作，原生的 Java 类库区分<a href="https://tobebetterjavaer.com/io/reader-writer.html" target="_blank" rel="noreferrer">字符流</a>和<a href="https://tobebetterjavaer.com/io/stream.html" target="_blank" rel="noreferrer">字节流</a>，字节流 InputStream 和 OutputStream 就有很多很多种，使用起来让人头皮发麻。</p><p>Hutool 封装了流操作工具类 IoUtil、文件读写操作工具类 FileUtil、文件类型判断工具类 FileTypeUtil 等等。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedInputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileUtil.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/origin.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">BufferedOutputStream</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> FileUtil.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/to.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> copySize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> IoUtil.</span><span style="color:#62E884;">copy</span><span style="color:#F6F6F4;">(in, out, IoUtil.DEFAULT_BUFFER_SIZE);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BufferedInputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileUtil.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/origin.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">BufferedOutputStream out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileUtil.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/to.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">long</span><span style="color:#24292E;"> copySize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IoUtil.</span><span style="color:#6F42C1;">copy</span><span style="color:#24292E;">(in, out, IoUtil.DEFAULT_BUFFER_SIZE);</span></span></code></pre></div><p>在 IO 操作中，文件的操作相对来说是比较复杂的，但使用频率也很高，几乎所有的项目中都躺着一个叫 FileUtil 或者 FileUtils 的工具类。Hutool 的 FileUtil 类包含以下几类操作：</p><ul><li>文件操作：包括文件目录的新建、删除、复制、移动、改名等</li><li>文件判断：判断文件或目录是否非空，是否为目录，是否为文件等等</li><li>绝对路径：针对 ClassPath 中的文件转换为绝对路径文件</li><li>文件名：主文件名，扩展名的获取</li><li>读操作：包括 getReader、readXXX 操作</li><li>写操作：包括 getWriter、writeXXX 操作</li></ul><p>顺带说说 classpath。</p><p>在实际编码当中，我们通常需要从某些文件里面读取一些数据，比如配置文件、文本文件、图片等等，那这些文件通常放在什么位置呢？</p><img src="`+t+'"><p>放在项目结构图中的 resources 目录下，当项目编译后，会出现在 classes 目录下。对应磁盘上的目录如下图所示：</p><img src="'+e+`"><p>当我们要读取文件的时候，我是不建议使用绝对路径的，因为操作系统不一样的话，文件的路径标识符也是不一样的。最好使用相对路径。</p><p>假设在 <code>src/resources</code> 下放了一个文件 origin.txt，文件的路径参数如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">FileUtil.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">origin.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FileUtil.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;origin.txt&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>假设文件放在 <code>src/resources/hutool</code> 目录下，则路径参数改为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">FileUtil.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/origin.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FileUtil.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/origin.txt&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="_05、字符串工具" tabindex="-1">05、字符串工具 <a class="header-anchor" href="#_05、字符串工具" aria-label="Permalink to &quot;05、字符串工具&quot;">​</a></h3><p>Hutool 封装的字符串工具类 StrUtil 和 Apache Commons Lang 包中的 StringUtils 类似，作者认为优势在于 Str 比 String 短，尽管我不觉得。不过，我倒是挺喜欢其中的一个方法的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> template </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">{}，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索{}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StrUtil.</span><span style="color:#62E884;">format</span><span style="color:#F6F6F4;">(template, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 沉默王二，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索沉默王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String template </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;{}，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索{}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StrUtil.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(template, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 沉默王二，一枚沉默但有趣的程序员，喜欢他的文章的话，请微信搜索沉默王二</span></span></code></pre></div><h3 id="_06、反射工具" tabindex="-1">06、反射工具 <a class="header-anchor" href="#_06、反射工具" aria-label="Permalink to &quot;06、反射工具&quot;">​</a></h3><p>反射机制可以让 Java 变得更加灵活，因此在某些情况下，反射可以做到事半功倍的效果。Hutool 封装的反射工具 ReflectUtil 包括：</p><ul><li>获取构造方法</li><li>获取字段</li><li>获取字段值</li><li>获取方法</li><li>执行方法（对象方法和静态方法）</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">package</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">com.itwanger.hutool.reflect</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> cn.hutool.core.util.ReflectUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.lang.reflect.Constructor;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.lang.reflect.Field;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.lang.reflect.Method;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ReflectDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReflectDemo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">构造方法</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我是沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IllegalAccessException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 构建对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ReflectDemo</span><span style="color:#F6F6F4;"> reflectDemo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectUtil.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(ReflectDemo.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取构造方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;">[] constructors </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectUtil.</span><span style="color:#62E884;">getConstructors</span><span style="color:#F6F6F4;">(ReflectDemo.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> constructors) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(constructor.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取字段</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> field </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectUtil.</span><span style="color:#62E884;">getField</span><span style="color:#F6F6F4;">(ReflectDemo.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">id</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        field.</span><span style="color:#62E884;">setInt</span><span style="color:#F6F6F4;">(reflectDemo, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取字段值</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(ReflectUtil.</span><span style="color:#62E884;">getFieldValue</span><span style="color:#F6F6F4;">(reflectDemo, field));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取所有方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;">[] methods </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectUtil.</span><span style="color:#62E884;">getMethods</span><span style="color:#F6F6F4;">(ReflectDemo.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> m </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> methods) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(m.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取指定方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> method </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectUtil.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(ReflectDemo.class, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">print</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(method.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 执行方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        ReflectUtil.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(reflectDemo, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">print</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> com.itwanger.hutool.reflect;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> cn.hutool.core.util.ReflectUtil;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.Constructor;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.Field;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.lang.reflect.Method;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> id;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectDemo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;构造方法&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我是沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IllegalAccessException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 构建对象</span></span>
<span class="line"><span style="color:#24292E;">        ReflectDemo reflectDemo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectUtil.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(ReflectDemo.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取构造方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Constructor</span><span style="color:#24292E;">[] constructors </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectUtil.</span><span style="color:#6F42C1;">getConstructors</span><span style="color:#24292E;">(ReflectDemo.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Constructor constructor </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> constructors) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(constructor.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取字段</span></span>
<span class="line"><span style="color:#24292E;">        Field field </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectUtil.</span><span style="color:#6F42C1;">getField</span><span style="color:#24292E;">(ReflectDemo.class, </span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        field.</span><span style="color:#6F42C1;">setInt</span><span style="color:#24292E;">(reflectDemo, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取字段值</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(ReflectUtil.</span><span style="color:#6F42C1;">getFieldValue</span><span style="color:#24292E;">(reflectDemo, field));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取所有方法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectUtil.</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">(ReflectDemo.class);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Method m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> methods) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(m.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取指定方法</span></span>
<span class="line"><span style="color:#24292E;">        Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectUtil.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(ReflectDemo.class, </span><span style="color:#032F62;">&quot;print&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(method.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行方法</span></span>
<span class="line"><span style="color:#24292E;">        ReflectUtil.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(reflectDemo, </span><span style="color:#032F62;">&quot;print&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_07、压缩工具" tabindex="-1">07、压缩工具 <a class="header-anchor" href="#_07、压缩工具" aria-label="Permalink to &quot;07、压缩工具&quot;">​</a></h3><p>在 Java 中，对文件、文件夹打包压缩是一件很繁琐的事情，Hutool 封装的 ZipUtil 针对 java.util.zip 包做了优化，可以使用一个方法搞定压缩和解压，并且自动处理文件和目录的问题，不再需要用户判断，大大简化的压缩解压的复杂度。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ZipUtil.</span><span style="color:#62E884;">zip</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool.zip</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> unzip </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ZipUtil.</span><span style="color:#62E884;">unzip</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool.zip</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutoolzip</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ZipUtil.</span><span style="color:#6F42C1;">zip</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hutool.zip&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">File unzip </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ZipUtil.</span><span style="color:#6F42C1;">unzip</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool.zip&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hutoolzip&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_08、身份证工具" tabindex="-1">08、身份证工具 <a class="header-anchor" href="#_08、身份证工具" aria-label="Permalink to &quot;08、身份证工具&quot;">​</a></h3><p>Hutool 封装的 IdcardUtil 可以用来对身份证进行验证，支持大陆 15 位、18 位身份证，港澳台 10 位身份证。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> ID_18 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">321083197812162119</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> ID_15 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">150102880730303</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> valid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> IdcardUtil.</span><span style="color:#62E884;">isValidCard</span><span style="color:#F6F6F4;">(ID_18);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> valid15 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> IdcardUtil.</span><span style="color:#62E884;">isValidCard</span><span style="color:#F6F6F4;">(ID_15);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String ID_18 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;321083197812162119&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">String ID_15 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;150102880730303&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> valid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IdcardUtil.</span><span style="color:#6F42C1;">isValidCard</span><span style="color:#24292E;">(ID_18);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> valid15 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IdcardUtil.</span><span style="color:#6F42C1;">isValidCard</span><span style="color:#24292E;">(ID_15);</span></span></code></pre></div><h3 id="_09、扩展-hashmap" tabindex="-1">09、扩展 HashMap <a class="header-anchor" href="#_09、扩展-hashmap" aria-label="Permalink to &quot;09、扩展 HashMap&quot;">​</a></h3><p>Java 中的 HashMap 是强类型的，而 Hutool 封装的 Dict 对键的类型要求没那么严格。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Dict</span><span style="color:#F6F6F4;"> dict </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Dict.</span><span style="color:#62E884;">create</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">age</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">18</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        .</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">birthday</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, DateTime.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dict.</span><span style="color:#62E884;">getInt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">age</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> dict.</span><span style="color:#62E884;">getStr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Dict dict </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Dict.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;birthday&quot;</span><span style="color:#24292E;">, DateTime.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dict.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dict.</span><span style="color:#6F42C1;">getStr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_10、控制台打印" tabindex="-1">10、控制台打印 <a class="header-anchor" href="#_10、控制台打印" aria-label="Permalink to &quot;10、控制台打印&quot;">​</a></h3><p>本地编码的过程中，经常需要使用 <code>System.out</code> 打印结果，但是往往一些复杂的对象不支持直接打印，比如说数组，需要调用 <code>Arrays.toString</code>。Hutool 封装的 Console 类借鉴了 JavaScript 中的 <code>console.log()</code>，使得打印变成了一个非常便捷的方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ConsoleDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 打印字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">        Console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二，一枚有趣的程序员</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 打印字符串模板</span></span>
<span class="line"><span style="color:#F6F6F4;">        Console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">洛阳是{}朝古都</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> [] ints </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 打印数组</span></span>
<span class="line"><span style="color:#F6F6F4;">        Console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(ints);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConsoleDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印字符串</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二，一枚有趣的程序员&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印字符串模板</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;洛阳是{}朝古都&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> [] ints </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印数组</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ints);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_11、字段验证器" tabindex="-1">11、字段验证器 <a class="header-anchor" href="#_11、字段验证器" aria-label="Permalink to &quot;11、字段验证器&quot;">​</a></h3><p>做 Web 开发的时候，后端通常需要对表单提交过来的数据进行验证。Hutool 封装的 Validator 可以进行很多有效的条件验证：</p><ul><li>是不是邮箱</li><li>是不是 IP V4、V6</li><li>是不是电话号码</li><li>等等</li></ul><img src="`+c+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Validator.</span><span style="color:#62E884;">isEmail</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">Validator.</span><span style="color:#62E884;">isMobile</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">itwanger.com</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Validator.</span><span style="color:#6F42C1;">isEmail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Validator.</span><span style="color:#6F42C1;">isMobile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;itwanger.com&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_12、双向查找-map" tabindex="-1">12、双向查找 Map <a class="header-anchor" href="#_12、双向查找-map" aria-label="Permalink to &quot;12、双向查找 Map&quot;">​</a></h3><p><a href="https://tobebetterjavaer.com/common-tool/guava.html" target="_blank" rel="noreferrer">Guava</a> 中提供了一种特殊的 Map 结构，叫做 BiMap，实现了一种双向查找的功能，可以根据 key 查找 value，也可以根据 value 查找 key，Hutool 也提供这种 Map 结构。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">BiMap</span><span style="color:#F6F6F4;">&lt;String, String&gt; biMap </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">BiMap</span><span style="color:#F6F6F4;">&lt;&gt;(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HashMap</span><span style="color:#F6F6F4;">&lt;&gt;());</span></span>
<span class="line"><span style="color:#F6F6F4;">biMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wanger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">biMap.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wangsan</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// get value by key</span></span>
<span class="line"><span style="color:#F6F6F4;">biMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wanger</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">biMap.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">wangsan</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// get key by value</span></span>
<span class="line"><span style="color:#F6F6F4;">biMap.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">biMap.</span><span style="color:#62E884;">getKey</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">BiMap&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; biMap </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> BiMap&lt;&gt;(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;&gt;());</span></span>
<span class="line"><span style="color:#24292E;">biMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wanger&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">biMap.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wangsan&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// get value by key</span></span>
<span class="line"><span style="color:#24292E;">biMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wanger&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">biMap.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;wangsan&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// get key by value</span></span>
<span class="line"><span style="color:#24292E;">biMap.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">biMap.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>在实际的开发工作中，其实我更倾向于使用 Guava 的 BiMap，而不是 Hutool 的。这里提一下，主要是我发现了 Hutool 在线文档上的一处错误，提了个 issue（从中可以看出我一颗一丝不苟的心和一双清澈明亮的大眼睛啊）。</p><img src="`+r+`"><h3 id="_13、图片工具" tabindex="-1">13、图片工具 <a class="header-anchor" href="#_13、图片工具" aria-label="Permalink to &quot;13、图片工具&quot;">​</a></h3><p>Hutool 封装的 ImgUtil 可以对图片进行缩放、裁剪、转为黑白、加水印等操作。</p><p>缩放图片：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ImgUtil.</span><span style="color:#62E884;">scale</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        FileUtil.</span><span style="color:#62E884;">file</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/wangsan.jpg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        FileUtil.</span><span style="color:#62E884;">file</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/wangsan_small.jpg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">0.5f</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ImgUtil.</span><span style="color:#6F42C1;">scale</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        FileUtil.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/wangsan.jpg&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        FileUtil.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/wangsan_small.jpg&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0.5f</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>裁剪图片：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ImgUtil.</span><span style="color:#62E884;">cut</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        FileUtil.</span><span style="color:#62E884;">file</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/wangsan.jpg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        FileUtil.</span><span style="color:#62E884;">file</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/wangsan_cut.jpg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Rectangle</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">200</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ImgUtil.</span><span style="color:#6F42C1;">cut</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        FileUtil.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/wangsan.jpg&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        FileUtil.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/wangsan_cut.jpg&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Rectangle</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>添加水印：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ImgUtil.</span><span style="color:#62E884;">pressText</span><span style="color:#F6F6F4;">(</span><span style="color:#7B7F8B;">//</span></span>
<span class="line"><span style="color:#F6F6F4;">        FileUtil.</span><span style="color:#62E884;">file</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/wangsan.jpg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        FileUtil.</span><span style="color:#62E884;">file</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/wangsan_logo.jpg</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, Color.WHITE,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Font</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">黑体</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, Font.BOLD, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">0.8f</span></span>
<span class="line"><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ImgUtil.</span><span style="color:#6F42C1;">pressText</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">        FileUtil.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/wangsan.jpg&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        FileUtil.</span><span style="color:#6F42C1;">file</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hutool/wangsan_logo.jpg&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">, Color.WHITE,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Font</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;黑体&quot;</span><span style="color:#24292E;">, Font.BOLD, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">0.8f</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>趁机让大家欣赏一下二哥帅气的真容。</p><img src="`+y+`"><h3 id="_14、配置文件" tabindex="-1">14、配置文件 <a class="header-anchor" href="#_14、配置文件" aria-label="Permalink to &quot;14、配置文件&quot;">​</a></h3><blockquote><p>众所周知，Java 中广泛应用的配置文件 Properties 存在一个特别大的诟病：不支持中文。每次使用时，如果想存放中文字符，就必须借助 IDE 相关插件才能转为 Unicode 符号，而这种反人类的符号在命令行下根本没法看。</p></blockquote><p>于是，Hutool 的 Setting 运用而生。Setting 除了兼容 Properties 文件格式外，还提供了一些特有功能，这些功能包括：</p><ul><li>各种编码方式支持</li><li>变量支持</li><li>分组支持</li></ul><p>先整个配置文件 example.setting，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">name=沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">age=18</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">name=沉默王二</span></span>
<span class="line"><span style="color:#24292e;">age=18</span></span></code></pre></div><p>再来读取和更新配置文件：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SettingDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> SETTING </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hutool/example.setting</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 初始化 Setting</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Setting</span><span style="color:#F6F6F4;"> setting </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Setting</span><span style="color:#F6F6F4;">(SETTING);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 读取</span></span>
<span class="line"><span style="color:#F6F6F4;">        setting.</span><span style="color:#62E884;">getStr</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 在配置文件变更时自动加载</span></span>
<span class="line"><span style="color:#F6F6F4;">        setting.</span><span style="color:#62E884;">autoLoad</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 通过代码方式增加键值对</span></span>
<span class="line"><span style="color:#F6F6F4;">        setting.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">birthday</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2020年09月29日</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        setting.</span><span style="color:#62E884;">store</span><span style="color:#F6F6F4;">(SETTING);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SettingDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String SETTING </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hutool/example.setting&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 初始化 Setting</span></span>
<span class="line"><span style="color:#24292E;">        Setting setting </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Setting</span><span style="color:#24292E;">(SETTING);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 读取</span></span>
<span class="line"><span style="color:#24292E;">        setting.</span><span style="color:#6F42C1;">getStr</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 在配置文件变更时自动加载</span></span>
<span class="line"><span style="color:#24292E;">        setting.</span><span style="color:#6F42C1;">autoLoad</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过代码方式增加键值对</span></span>
<span class="line"><span style="color:#24292E;">        setting.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;birthday&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;2020年09月29日&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        setting.</span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(SETTING);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_15、日志工厂" tabindex="-1">15、日志工厂 <a class="header-anchor" href="#_15、日志工厂" aria-label="Permalink to &quot;15、日志工厂&quot;">​</a></h3><p>Hutool 封装的日志工厂 LogFactory 兼容了各大日志框架，使用起来也非常简便。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LogDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Log</span><span style="color:#F6F6F4;"> log </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> LogFactory.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        log.</span><span style="color:#62E884;">debug</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">难得糊涂</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LogDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Log log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogFactory.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;难得糊涂&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>先通过 <code>LogFactory.get()</code> 自动识别引入的日志框架，从而创建对应日志框架的门面 Log 对象，然后调用 <code>debug()</code>、<code>info()</code> 等方法输出日志。</p><p>如果不想创建 Log 对象的话，可以使用 StaticLog，顾名思义，一个提供了静态方法的日志类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">StaticLog.</span><span style="color:#62E884;">info</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">爽啊 {}.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二的文章</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StaticLog.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;爽啊 {}.&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二的文章&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="_16、缓存工具" tabindex="-1">16、缓存工具 <a class="header-anchor" href="#_16、缓存工具" aria-label="Permalink to &quot;16、缓存工具&quot;">​</a></h3><p>CacheUtil 是 Hutool 封装的创建缓存的快捷工具类，可以创建不同的缓存对象：</p><ul><li>FIFOCache：先入先出，元素不停的加入缓存直到缓存满为止，当缓存满时，清理过期缓存对象，清理后依旧满则删除先入的缓存。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Cache</span><span style="color:#F6F6F4;">&lt;String, String&gt; fifoCache </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CacheUtil.</span><span style="color:#62E884;">newFIFOCache</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">fifoCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王一</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">fifoCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">fifoCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">fifoCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 大小为 3，所以 key3 放入后 key1 被清除</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fifoCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Cache&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; fifoCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheUtil.</span><span style="color:#6F42C1;">newFIFOCache</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">fifoCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王一&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">fifoCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">fifoCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key3&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">fifoCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key4&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 大小为 3，所以 key3 放入后 key1 被清除</span></span>
<span class="line"><span style="color:#24292E;">String value1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fifoCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>LFUCache，最少使用，根据使用次数来判定对象是否被持续缓存，当缓存满时清理过期对象，清理后依旧满的情况下清除最少访问的对象并将其他对象的访问数减去这个最少访问数，以便新对象进入后可以公平计数。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Cache</span><span style="color:#F6F6F4;">&lt;String, String&gt; lfuCache </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CacheUtil.</span><span style="color:#62E884;">newLFUCache</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">lfuCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王一</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 使用次数+1</span></span>
<span class="line"><span style="color:#F6F6F4;">lfuCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">lfuCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">lfuCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">lfuCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 由于缓存容量只有 3，当加入第 4 个元素的时候，最少使用的将被移除（2,3被移除）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lfuCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lfuCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Cache&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lfuCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheUtil.</span><span style="color:#6F42C1;">newLFUCache</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lfuCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王一&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 使用次数+1</span></span>
<span class="line"><span style="color:#24292E;">lfuCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lfuCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lfuCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key3&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lfuCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key4&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于缓存容量只有 3，当加入第 4 个元素的时候，最少使用的将被移除（2,3被移除）</span></span>
<span class="line"><span style="color:#24292E;">String value2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lfuCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String value3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lfuCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key3&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><ul><li>LRUCache，最近最久未使用，根据使用时间来判定对象是否被持续缓存，当对象被访问时放入缓存，当缓存满了，最久未被使用的对象将被移除。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Cache</span><span style="color:#F6F6F4;">&lt;String, String&gt; lruCache </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> CacheUtil.</span><span style="color:#62E884;">newLRUCache</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">lruCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王一</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">lruCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">lruCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 使用时间近了</span></span>
<span class="line"><span style="color:#F6F6F4;">lruCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">lruCache.</span><span style="color:#62E884;">put</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key4</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王四</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 由于缓存容量只有 3，当加入第 4 个元素的时候，最久使用的将被移除（2）</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> value2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> lruCache.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(value2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Cache&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; lruCache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CacheUtil.</span><span style="color:#6F42C1;">newLRUCache</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">lruCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王一&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lruCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key2&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lruCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key3&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 使用时间近了</span></span>
<span class="line"><span style="color:#24292E;">lruCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">lruCache.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key4&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;沉默王四&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 由于缓存容量只有 3，当加入第 4 个元素的时候，最久使用的将被移除（2）</span></span>
<span class="line"><span style="color:#24292E;">String value2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lruCache.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(value2);</span></span></code></pre></div><h3 id="_17、加密解密" tabindex="-1">17、加密解密 <a class="header-anchor" href="#_17、加密解密" aria-label="Permalink to &quot;17、加密解密&quot;">​</a></h3><p>加密分为三种：</p><ul><li>对称加密（symmetric），例如：AES、DES 等</li><li>非对称加密（asymmetric），例如：RSA、DSA 等</li><li>摘要加密（digest），例如：MD5、SHA-1、SHA-256、HMAC 等</li></ul><p>Hutool 针对这三种情况都做了封装：</p><ul><li>对称加密 SymmetricCrypto</li><li>非对称加密 AsymmetricCrypto</li><li>摘要加密 Digester</li></ul><p>快速加密工具类 SecureUtil 有以下这些方法：</p><p>1）对称加密</p><ul><li>SecureUtil.aes</li><li>SecureUtil.des</li></ul><p>2）非对称加密</p><ul><li>SecureUtil.rsa</li><li>SecureUtil.dsa</li></ul><p>3）摘要加密</p><ul><li>SecureUtil.md5</li><li>SecureUtil.sha1</li><li>SecureUtil.hmac</li><li>SecureUtil.hmacMd5</li><li>SecureUtil.hmacSha1</li></ul><p>只写一个简单的例子作为参考：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SecureUtilDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AES</span><span style="color:#F6F6F4;"> aes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> SecureUtil.</span><span style="color:#62E884;">aes</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> encry </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> aes.</span><span style="color:#62E884;">encryptHex</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(encry);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> oo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> aes.</span><span style="color:#62E884;">decryptStr</span><span style="color:#F6F6F4;">(encry);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(oo);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SecureUtilDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AES aes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SecureUtil.</span><span style="color:#6F42C1;">aes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String encry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aes.</span><span style="color:#6F42C1;">encryptHex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(encry);</span></span>
<span class="line"><span style="color:#24292E;">        String oo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> aes.</span><span style="color:#6F42C1;">decryptStr</span><span style="color:#24292E;">(encry);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(oo);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_18、其他类库" tabindex="-1">18、其他类库 <a class="header-anchor" href="#_18、其他类库" aria-label="Permalink to &quot;18、其他类库&quot;">​</a></h3><p>Hutool 中的类库还有很多，尤其是一些对第三方类库的进一步封装，比如邮件工具 MailUtil，二维码工具 QrCodeUtil，Emoji 工具 EmojiUtil，小伙伴们可以参考 Hutool 的官方文档：<a href="https://www.hutool.cn/" target="_blank" rel="noreferrer">https://www.hutool.cn/</a></p><p>项目源码地址：<a href="https://github.com/looly/hutool" target="_blank" rel="noreferrer">https://github.com/looly/hutool</a></p><hr>`,135),E=[i];function u(d,g,h,C,D,q){return a(),n("div",null,E)}const m=s(F,[["render",u]]);export{f as __pageData,m as default};
