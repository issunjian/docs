import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"I/O","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/IO/IO.md","filePath":"java/javase/IO/IO.md"}'),p={name:"java/javase/IO/IO.md"},o=l(`<h1 id="i-o" tabindex="-1">I/O <a class="header-anchor" href="#i-o" aria-label="Permalink to &quot;I/O&quot;">​</a></h1><hr><h2 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h2><h3 id="对象持久化" tabindex="-1">对象持久化 <a class="header-anchor" href="#对象持久化" aria-label="Permalink to &quot;对象持久化&quot;">​</a></h3><p>在 Java 程序中所创建的对象都保存在内存中，一旦 JVM 停止运行，这些对象都将会消失。因此以下两种情况必须通过序列化实现：</p><ol><li>需要把对象持久化保存在文件中，在 JVM 重启后能够继续使用。</li><li>通过网络传送对象信息，在多个 JVM 间共享对象。</li></ol><h3 id="serializable-接口" tabindex="-1">Serializable 接口 <a class="header-anchor" href="#serializable-接口" aria-label="Permalink to &quot;Serializable 接口&quot;">​</a></h3><p>在类中声明实现 Serializable 接口，表示允许 Java 程序对这个类的对象序列化：JVM 会将对象的成员变量保存为一组字节，这些字节可以再被 JVM 组装成对象。对象序列化只保存的对象的成员变量，且不会关注类中的静态变量。</p><ol><li><strong>transient 字段</strong>：默认序列化机制就会被忽略。</li><li><strong>private 字段</strong>：序列化后不会被保护，任何 JVM 都可读取。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//person类的读入读出</span></span>
<span class="line"><span style="color:#7B7F8B;">//对于 class Person implements Serializable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ObjectOutputStream</span><span style="color:#F6F6F4;"> oout </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ObjectOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(file));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Person</span><span style="color:#F6F6F4;"> person </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">John</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">101</span><span style="color:#F6F6F4;">, Gender.MALE);</span></span>
<span class="line"><span style="color:#F6F6F4;">        oout.</span><span style="color:#62E884;">writeObject</span><span style="color:#F6F6F4;">(person);</span></span>
<span class="line"><span style="color:#F6F6F4;">        oout.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ObjectInputStream</span><span style="color:#F6F6F4;"> oin </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ObjectInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(file));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> newPerson </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> oin.</span><span style="color:#62E884;">readObject</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 没有强制转换到Person类型</span></span>
<span class="line"><span style="color:#F6F6F4;">        oin.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//person类的读入读出</span></span>
<span class="line"><span style="color:#6A737D;">//对于 class Person implements Serializable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ObjectOutputStream oout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(file));</span></span>
<span class="line"><span style="color:#24292E;">        Person person </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">101</span><span style="color:#24292E;">, Gender.MALE);</span></span>
<span class="line"><span style="color:#24292E;">        oout.</span><span style="color:#6F42C1;">writeObject</span><span style="color:#24292E;">(person);</span></span>
<span class="line"><span style="color:#24292E;">        oout.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        ObjectInputStream oin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ObjectInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(file));</span></span>
<span class="line"><span style="color:#24292E;">        Object newPerson </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oin.</span><span style="color:#6F42C1;">readObject</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 没有强制转换到Person类型</span></span>
<span class="line"><span style="color:#24292E;">        oin.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><hr><h2 id="标准输入-输出" tabindex="-1">标准输入/输出 <a class="header-anchor" href="#标准输入-输出" aria-label="Permalink to &quot;标准输入/输出&quot;">​</a></h2><h3 id="标准输入流-system-in" tabindex="-1">标准输入流 System.in <a class="header-anchor" href="#标准输入流-system-in" aria-label="Permalink to &quot;标准输入流 System.in&quot;">​</a></h3><p>读取标准输入设备数据（键盘），每次输入将以换行符结束。数据类型为 InputStream。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)System.in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">();   </span><span style="color:#7B7F8B;">// 读取单个输入字符，返回其 ASCII 值(int)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">System.in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(b);                 </span><span style="color:#7B7F8B;">// 读取输入定长字符组，返回字符个数(int)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();   </span><span style="color:#6A737D;">// 读取单个输入字符，返回其 ASCII 值(int)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">System.in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(b);                 </span><span style="color:#6A737D;">// 读取输入定长字符组，返回字符个数(int)</span></span></code></pre></div><h3 id="标准输出流-system-out" tabindex="-1">标准输出流 System.out <a class="header-anchor" href="#标准输出流-system-out" aria-label="Permalink to &quot;标准输出流 System.out&quot;">​</a></h3><p>向标准输出设备输出数据（控制台）。数据类型为 PrintStream。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                         </span><span style="color:#7B7F8B;">// 输出数据</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                       </span><span style="color:#7B7F8B;">// 输出数据并换行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);                         </span><span style="color:#6A737D;">// 输出数据</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">);                       </span><span style="color:#6A737D;">// 输出数据并换行</span></span></code></pre></div><p><strong>格式化输出</strong></p><p>通过 printf 方法可以输出指定格式数据：其中 <code>%d</code> 表示整型数字， <code>%f</code> 表示浮点型数字， <code>%%</code> 表示百分号。</p><p>在百分号后加入特殊符号，可以指定数据的显示类型。</p><table><thead><tr><th>符号</th><th>作用</th><th>示例</th><th>效果</th></tr></thead><tbody><tr><td>+</td><td>为正数或者负数添加符号</td><td>(&quot;%+d&quot;,99)</td><td>+99</td></tr><tr><td>2</td><td>位数（默认右对齐）</td><td>(&quot;%4d&quot;, 99)</td><td>__99</td></tr><tr><td>−</td><td>左对齐</td><td>(&quot;%-4d&quot;, 99)</td><td>99__</td></tr><tr><td>0</td><td>数字前补0</td><td>(&quot;%04d&quot;, 9999)</td><td>0099</td></tr><tr><td>,</td><td>以“,”对数字分组</td><td>(&quot;%,d&quot;, 9999)</td><td>9,999</td></tr><tr><td>.2</td><td>小数点后精确位数</td><td>(&quot;%5.2f&quot;, 9.999)</td><td>_9.99</td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">printf</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">The number is %+,9.3f</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, PI);  </span><span style="color:#7B7F8B;">// 输出指定格式数据</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The number is %+,9.3f&quot;</span><span style="color:#24292E;">, PI);  </span><span style="color:#6A737D;">// 输出指定格式数据</span></span></code></pre></div><hr><h2 id="流输入输出" tabindex="-1">流输入输出 <a class="header-anchor" href="#流输入输出" aria-label="Permalink to &quot;流输入输出&quot;">​</a></h2><p>java.io 文件夹内提供了 Java 程序中 I/O 操作使用的类，使用时需要进行导入。</p><h3 id="字节流" tabindex="-1">字节流 <a class="header-anchor" href="#字节流" aria-label="Permalink to &quot;字节流&quot;">​</a></h3><h4 id="inputstream-outputstream-类" tabindex="-1">InputStream/OutputStream 类 <a class="header-anchor" href="#inputstream-outputstream-类" aria-label="Permalink to &quot;InputStream/OutputStream 类&quot;">​</a></h4><p>以字节为单位进行读取的数据流。常用来处理二进制数据的输入输出，如键盘输入、网络通信。但字节流不能正确显示 Unicode 字符。</p><p><strong>输入流</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStream</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getIntputStream</span><span style="color:#F6F6F4;">());        </span><span style="color:#7B7F8B;">// 创建输入对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">available</span><span style="color:#F6F6F4;">();                                          </span><span style="color:#7B7F8B;">// 读取输入对象长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">();                                          </span><span style="color:#7B7F8B;">// 读取输入字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[len];                                          </span><span style="color:#7B7F8B;">// 连续读取输入字节</span></span>
<span class="line"><span style="color:#F6F6F4;">in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">in.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();                                                        </span><span style="color:#7B7F8B;">// 关闭输入对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStream</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getIntputStream</span><span style="color:#24292E;">());        </span><span style="color:#6A737D;">// 创建输入对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">available</span><span style="color:#24292E;">();                                          </span><span style="color:#6A737D;">// 读取输入对象长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">char</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">();                                          </span><span style="color:#6A737D;">// 读取输入字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[len];                                          </span><span style="color:#6A737D;">// 连续读取输入字节</span></span>
<span class="line"><span style="color:#24292E;">in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">in.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();                                                        </span><span style="color:#6A737D;">// 关闭输入对象</span></span></code></pre></div><p><strong>输出流</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStream</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">());     </span><span style="color:#7B7F8B;">// 创建输出对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">};                                                </span><span style="color:#7B7F8B;">// 导入输出字节          </span></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();                                                       </span><span style="color:#7B7F8B;">// 刷新输出对象，输出字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();                                                       </span><span style="color:#7B7F8B;">// 关闭输出对象，输出字节</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">OutputStream out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStream</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">());     </span><span style="color:#6A737D;">// 创建输出对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">};                                                </span><span style="color:#6A737D;">// 导入输出字节          </span></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();                                                       </span><span style="color:#6A737D;">// 刷新输出对象，输出字节</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();                                                       </span><span style="color:#6A737D;">// 关闭输出对象，输出字节</span></span></code></pre></div><h3 id="字符流" tabindex="-1">字符流 <a class="header-anchor" href="#字符流" aria-label="Permalink to &quot;字符流&quot;">​</a></h3><h4 id="reader-writer-类" tabindex="-1">Reader/Writer 类 <a class="header-anchor" href="#reader-writer-类" aria-label="Permalink to &quot;Reader/Writer 类&quot;">​</a></h4><p>以字符为单位进行读取的数据流。只能用于处理文本数据。且所有文本数据，即经过 Unicode 编码的数据都必须以字符流的形式呈现。</p><p>我们在 Java 程序中处理数据往往需要用到字符流，但在通信中却需要使用字节流。这就需要进行数据格式转化。</p><h4 id="inputstreamreader-类" tabindex="-1">InputStreamReader 类 <a class="header-anchor" href="#inputstreamreader-类" aria-label="Permalink to &quot;InputStreamReader 类&quot;">​</a></h4><p>Reader 类子类。将字节流数据转换成字符流，常用于读取控制台输入或读取网络通信。可指定编码方式，否则使用 IDE 默认编码方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 读取键盘输入</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">InputStreamReader</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 读取套接字通信，并指定编码格式</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">InputStreamReader</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">(), </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 读取键盘输入</span></span>
<span class="line"><span style="color:#24292E;">InputStreamReader in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"><span style="color:#6A737D;">// 读取套接字通信，并指定编码格式</span></span>
<span class="line"><span style="color:#24292E;">InputStreamReader in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="outputstreamwriter-类" tabindex="-1">OutputStreamWriter 类 <a class="header-anchor" href="#outputstreamwriter-类" aria-label="Permalink to &quot;OutputStreamWriter 类&quot;">​</a></h4><p>Writer 类子类。将字符流数据转换成字节流，常用于发送网络通信。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 数据转化为字节流发送</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">OutputStreamWriter</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">OutputStreamWriter</span><span style="color:#F6F6F4;">(socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 数据转化为字节流发送</span></span>
<span class="line"><span style="color:#24292E;">OutputStreamWriter out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OutputStreamWriter</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">());</span></span></code></pre></div><h3 id="文件流" tabindex="-1">文件流 <a class="header-anchor" href="#文件流" aria-label="Permalink to &quot;文件流&quot;">​</a></h3><h4 id="file-类" tabindex="-1">File 类 <a class="header-anchor" href="#file-类" aria-label="Permalink to &quot;File 类&quot;">​</a></h4><p>用于文件或者目录的描述信息，默认加载当前目录。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">FileTest.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                </span><span style="color:#7B7F8B;">// 读取当前目录文件</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> f2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D://file//FileTest.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);      </span><span style="color:#7B7F8B;">// 读取指定目录文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">File f1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;FileTest.txt&quot;</span><span style="color:#24292E;">);                </span><span style="color:#6A737D;">// 读取当前目录文件</span></span>
<span class="line"><span style="color:#24292E;">File f2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D://file//FileTest.txt&quot;</span><span style="color:#24292E;">);      </span><span style="color:#6A737D;">// 读取指定目录文件</span></span></code></pre></div><h4 id="fileinputstream-filereader-类" tabindex="-1">FileInputStream/FileReader 类 <a class="header-anchor" href="#fileinputstream-filereader-类" aria-label="Permalink to &quot;FileInputStream/FileReader 类&quot;">​</a></h4><p>FileInputStream 类读取字节流文件信息，FileReader 类读取字符流文件信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TestFileReader</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReadFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">textName</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 连接文件</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">D:</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">Workspaces</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> textName);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 执行操作</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">((</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)c);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            fr.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileNotFoundException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">找不到指定文件</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件读取错误</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFileReader</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadFile</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">textName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 连接文件</span></span>
<span class="line"><span style="color:#24292E;">            FileReader fr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D:</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">Workspaces&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> textName);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 执行操作</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)c);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            fr.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (FileNotFoundException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;找不到指定文件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件读取错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="fileoutputstream-filewriter-类" tabindex="-1">FileOutputStream/FileWriter 类 <a class="header-anchor" href="#fileoutputstream-filewriter-类" aria-label="Permalink to &quot;FileOutputStream/FileWriter 类&quot;">​</a></h4><p>FileOutputStream 写入字节流文件信息，FileWriter 类写入字符流文件信息。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TestFileWriter</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ReadFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">textName</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 追加模式，写入文本信息会添加到文本尾部</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(textName);            </span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 覆盖模式，写入文本信息会覆盖原有数据</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">data.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 执行操作</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello world！欢迎来到 java 世界</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                 </span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">append</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我是下一行</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);                            </span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();                                       </span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件编码为</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> fw.</span><span style="color:#62E884;">getEncoding</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();                    </span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileNotFoundException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">找不到指定文件</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">文件写入错误</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFileWriter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadFile</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">textName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 追加模式，写入文本信息会添加到文本尾部</span></span>
<span class="line"><span style="color:#24292E;">            FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(textName);            </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 覆盖模式，写入文本信息会覆盖原有数据</span></span>
<span class="line"><span style="color:#24292E;">            FileWriter fw2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;data.txt&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 执行操作</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world！欢迎来到 java 世界</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);                 </span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">append</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我是下一行&quot;</span><span style="color:#24292E;">);                            </span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();                                       </span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件编码为&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> fw.</span><span style="color:#6F42C1;">getEncoding</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();                    </span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (FileNotFoundException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;找不到指定文件&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;文件写入错误&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="缓冲流" tabindex="-1">缓冲流 <a class="header-anchor" href="#缓冲流" aria-label="Permalink to &quot;缓冲流&quot;">​</a></h3><h4 id="bufferedinputstream-bufferedreader-类" tabindex="-1">BufferedInputStream/BufferedReader 类 <a class="header-anchor" href="#bufferedinputstream-bufferedreader-类" aria-label="Permalink to &quot;BufferedInputStream/BufferedReader 类&quot;">​</a></h4><p>BufferedInputStream 类将输入字节数据暂存到缓冲区数组，BufferedReader 类将输入字符流数据暂存到缓冲区数组。</p><p>JVM 在缓冲区数组满后一次性获取缓冲区内的数据，减少了对 CPU 的频繁请求。</p><h4 id="bufferedoutputstream-bufferedwriter-类" tabindex="-1">BufferedOutputStream/BufferedWriter 类 <a class="header-anchor" href="#bufferedoutputstream-bufferedwriter-类" aria-label="Permalink to &quot;BufferedOutputStream/BufferedWriter 类&quot;">​</a></h4><p>BufferedOutputStream 类将输出字节数据暂存到缓冲区数组，BufferedWriter 类将输出字符流数据暂存到缓冲区数组。</p><p>JVM 在刷新时一次性将缓冲区内的数据输出到外部设备，减少了对 CPU 的频繁请求。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TestBuffer</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">bufferUse</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 通过缓冲区读取键盘输入</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedReader</span><span style="color:#F6F6F4;"> br </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedReader</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InputStreamReader</span><span style="color:#F6F6F4;">(System.in));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 通过缓冲区输出到文件</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedWriter</span><span style="color:#F6F6F4;"> bw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 执行操作</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">((line </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> br.</span><span style="color:#62E884;">readLine</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">){     </span><span style="color:#7B7F8B;">// readLine 缓冲流特有方法，一次性读取一行</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">over</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">equals</span><span style="color:#F6F6F4;">(line)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            bw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(line);</span></span>
<span class="line"><span style="color:#F6F6F4;">            bw.</span><span style="color:#62E884;">newLine</span><span style="color:#F6F6F4;">();                          </span><span style="color:#7B7F8B;">// newLine 缓冲流特有方法，写入换行符</span></span>
<span class="line"><span style="color:#F6F6F4;">            bw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        bw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        br.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestBuffer</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bufferUse</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过缓冲区读取键盘输入</span></span>
<span class="line"><span style="color:#24292E;">        BufferedReader br </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedReader</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InputStreamReader</span><span style="color:#24292E;">(System.in));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过缓冲区输出到文件</span></span>
<span class="line"><span style="color:#24292E;">        BufferedWriter bw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedWriter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行操作</span></span>
<span class="line"><span style="color:#24292E;">        String line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((line </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> br.</span><span style="color:#6F42C1;">readLine</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){     </span><span style="color:#6A737D;">// readLine 缓冲流特有方法，一次性读取一行</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;over&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(line)){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            bw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(line);</span></span>
<span class="line"><span style="color:#24292E;">            bw.</span><span style="color:#6F42C1;">newLine</span><span style="color:#24292E;">();                          </span><span style="color:#6A737D;">// newLine 缓冲流特有方法，写入换行符</span></span>
<span class="line"><span style="color:#24292E;">            bw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        bw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        br.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="扫描器" tabindex="-1">扫描器 <a class="header-anchor" href="#扫描器" aria-label="Permalink to &quot;扫描器&quot;">​</a></h2><h3 id="scanner-类" tabindex="-1">Scanner 类 <a class="header-anchor" href="#scanner-类" aria-label="Permalink to &quot;Scanner 类&quot;">​</a></h3><p>包装输入并自动分割数据，调用 next 方法捕获，可以自动转换数据类型。位于 java.util 包内，使用时需进行导入。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);                             </span><span style="color:#7B7F8B;">// 读取键盘输入，返回 String 数据类型                  </span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">example.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));     </span><span style="color:#7B7F8B;">// 读取文件信息，返回 String 数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">sc.</span><span style="color:#62E884;">hasNextInt</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextInt</span><span style="color:#F6F6F4;">();                                            </span><span style="color:#7B7F8B;">// 截取数据并自动转化数据类型</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextLine</span><span style="color:#F6F6F4;">();                                      </span><span style="color:#7B7F8B;">// 取出行内全部数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">sc.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();                                                      </span><span style="color:#7B7F8B;">// 关闭 Scanner 类</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);                             </span><span style="color:#6A737D;">// 读取键盘输入，返回 String 数据类型                  </span></span>
<span class="line"><span style="color:#24292E;">Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;example.txt&quot;</span><span style="color:#24292E;">));     </span><span style="color:#6A737D;">// 读取文件信息，返回 String 数据类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sc.</span><span style="color:#6F42C1;">hasNextInt</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">();                                            </span><span style="color:#6A737D;">// 截取数据并自动转化数据类型</span></span>
<span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextLine</span><span style="color:#24292E;">();                                      </span><span style="color:#6A737D;">// 取出行内全部数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">sc.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();                                                      </span><span style="color:#6A737D;">// 关闭 Scanner 类</span></span></code></pre></div>`,66),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
