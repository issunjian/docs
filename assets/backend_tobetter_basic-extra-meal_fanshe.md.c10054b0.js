import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/fanshe-01.79289fe2.png",o="/docs/assets/fanshe-02.b2caf87a.png",e="/docs/assets/fanshe-03.e15d1397.png",t="/docs/assets/fanshe-04.80149ab4.png",v=JSON.parse('{"title":"Java 反射详解：动态创建实例、调用方法和访问字段","description":"Java 反射机制允许在运行时检查和操作类、对象、方法和字段。通过反射，我们可以动态创建对象实例、调用方法、访问字段和获取类的元数据。本文介绍了 Java 反射的基本概念、应用场景和示例。","frontmatter":{"title":"Java 反射详解：动态创建实例、调用方法和访问字段","shortTitle":"掌握 Java 反射","category":["Java核心"],"tag":["Java重要知识点"],"description":"Java 反射机制允许在运行时检查和操作类、对象、方法和字段。通过反射，我们可以动态创建对象实例、调用方法、访问字段和获取类的元数据。本文介绍了 Java 反射的基本概念、应用场景和示例。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"Java,java 反射, 运行时, 类, 对象, 方法, 字段, 反射,动态调用"}]]},"headers":[],"relativePath":"backend/tobetter/basic-extra-meal/fanshe.md","filePath":"backend/tobetter/basic-extra-meal/fanshe.md"}'),c={name:"backend/tobetter/basic-extra-meal/fanshe.md"},r=l(`<h1 id="_12-8-掌握-java-反射" tabindex="-1">12.8 掌握 Java 反射 <a class="header-anchor" href="#_12-8-掌握-java-反射" aria-label="Permalink to &quot;12.8 掌握 Java 反射&quot;">​</a></h1><p>“二哥，什么是反射呀？”三妹开门见山地问。</p><p>“要想知道什么是反射，就需要先来了解什么是‘正射’。”我笑着对三妹说，“一般情况下，我们在使用某个类之前已经确定它到底是个什么类了，拿到手就直接可以使用 <code>new</code> 关键字来调用构造方法进行初始化，之后使用这个类的对象来进行操作。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Writer</span><span style="color:#F6F6F4;"> writer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Writer</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">writer.</span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Writer writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">writer.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>像上面这个例子，就可以理解为“正射”。而反射就意味着一开始我们不知道要初始化的类到底是什么，也就没法直接使用 <code>new</code> 关键字创建对象了。</p><p>我们只知道这个类的一些基本信息，就好像我们看电影的时候，为了抓住一个犯罪嫌疑人，警察就会问一些目击证人，根据这些证人提供的信息，找专家把犯罪嫌疑人的样貌给画出来——这个过程，就可以称之为<strong>反射</strong>。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> clazz </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itwanger.s39.Writer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> method </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, String.class);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> object </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">method.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(object,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itwanger.s39.Writer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setName&quot;</span><span style="color:#24292E;">, String.class);</span></span>
<span class="line"><span style="color:#24292E;">Constructor constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Object object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">method.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(object,</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>像上面这个例子，就可以理解为“反射”。</p><p>“反射的写法比正射复杂得多啊！”三妹感慨地说。</p><p>“是的，反射的成本是要比正射的高得多。”我说，“反射的缺点主要有两个。”</p><ul><li><strong>破坏封装</strong>：由于反射允许访问私有字段和私有方法，所以可能会破坏封装而导致安全问题。</li><li><strong>性能开销</strong>：由于反射涉及到动态解析，因此无法执行 Java 虚拟机优化，再加上反射的写法的确要复杂得多，所以性能要比“正射”差很多，在一些性能敏感的程序中应该避免使用反射。</li></ul><p>“那反射有哪些好处呢？”三妹问。</p><p>反射的主要应用场景有：</p><ul><li><strong>开发通用框架</strong>：像 Spring，为了保持通用性，通过配置文件来加载不同的对象，调用不同的方法。</li><li><strong>动态代理</strong>：在面向切面编程中，需要拦截特定的方法，就会选择动态代理的方式，而动态代理的底层技术就是反射。</li><li><strong>注解</strong>：注解本身只是起到一个标记符的作用，它需要利用发射机制，根据标记符去执行特定的行为。</li></ul><p>“好了，来看一下完整的例子吧。”我对三妹说。</p><p>Writer 类，有两个字段，然后还有对应的 getter/setter。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Writer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setAge</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>测试类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ReflectionDemo1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ClassNotFoundException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">NoSuchMethodException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IllegalAccessException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">InvocationTargetException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">InstantiationException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Writer</span><span style="color:#F6F6F4;"> writer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Writer</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        writer.</span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(writer.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> clazz </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itwanger.s39.Writer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> object </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> setNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, String.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        setNameMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(object, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> getNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(getNameMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(object));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectionDemo1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {</span></span>
<span class="line"><span style="color:#24292E;">        Writer writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writer</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        writer.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(writer.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Class clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itwanger.s39.Writer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Constructor constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Object object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Method setNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setName&quot;</span><span style="color:#24292E;">, String.class);</span></span>
<span class="line"><span style="color:#24292E;">        setNameMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(object, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Method getNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(getNameMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(object));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来看一下输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">沉默王二</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">沉默王二</span></span>
<span class="line"><span style="color:#24292e;">沉默王二</span></span></code></pre></div><p>只不过，反射的过程略显曲折了一些。</p><p>第一步，获取反射类的 Class 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> clazz </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itwanger.s39.Writer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itwanger.s39.Writer&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>第二步，通过 Class 对象获取构造方法 Constructor 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Constructor constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span></code></pre></div><p>第三步，通过 Constructor 对象初始化反射类对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> object </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Object object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span></code></pre></div><p>第四步，获取要调用的方法的 Method 对象：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> setNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, String.class);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> getNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method setNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setName&quot;</span><span style="color:#24292E;">, String.class);</span></span>
<span class="line"><span style="color:#24292E;">Method getNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getName&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>第五步，通过 <code>invoke()</code> 方法执行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">setNameMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(object, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">getNameMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(object)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">setNameMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(object, </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">getNameMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(object)</span></span></code></pre></div><p>“三妹，你看，经过这五个步骤，基本上就掌握了反射的使用方法。”我说。</p><p>“好像反射也没什么复杂的啊！”三妹说。</p><p>我先对三妹点点头，然后说：“是的，掌握反射的基本使用方法确实不难，但要理解整个反射机制还是需要花一点时间去了解一下 Java 虚拟机的类加载机制的。”</p><p>要想使用反射，首先需要获得反射类的 Class 对象，每一个类，不管它最终生成了多少个对象，这些对象只会对应一个 Class 对象，这个 Class 对象是由 Java 虚拟机生成的，由它来获悉整个类的结构信息。</p><p>也就是说，<code>java.lang.Class</code> 是所有反射 API 的入口。</p><p>而方法的反射调用，最终是由 Method 对象的 <code>invoke()</code> 方法完成的，来看一下源码（JDK 8 环境下）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> obj, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">... args)</span></span>
<span class="line"><span style="color:#F6F6F4;">        throws IllegalAccessException, IllegalArgumentException,</span></span>
<span class="line"><span style="color:#F6F6F4;">        InvocationTargetException {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 如果方法不允许被覆盖，进行权限检查</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">override) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">Reflection.</span><span style="color:#62E884;">quickCheckMemberAccess</span><span style="color:#F6F6F4;">(clazz, modifiers)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; caller </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Reflection.</span><span style="color:#62E884;">getCallerClass</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 检查调用者是否具有访问权限</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">checkAccess</span><span style="color:#F6F6F4;">(caller, clazz, obj, modifiers);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 获取方法访问器（从 volatile 变量中读取）</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">MethodAccessor</span><span style="color:#F6F6F4;"> ma </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> methodAccessor;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (ma </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果访问器为空，尝试获取方法访问器</span></span>
<span class="line"><span style="color:#F6F6F4;">        ma </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">acquireMethodAccessor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用方法访问器调用方法，并返回结果</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> ma.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(obj, args);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(Object obj, Object... args)</span></span>
<span class="line"><span style="color:#24292E;">        throws IllegalAccessException, IllegalArgumentException,</span></span>
<span class="line"><span style="color:#24292E;">        InvocationTargetException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果方法不允许被覆盖，进行权限检查</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">override) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Reflection.</span><span style="color:#6F42C1;">quickCheckMemberAccess</span><span style="color:#24292E;">(clazz, modifiers)) {</span></span>
<span class="line"><span style="color:#24292E;">            Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; caller </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Reflection.</span><span style="color:#6F42C1;">getCallerClass</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 检查调用者是否具有访问权限</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">checkAccess</span><span style="color:#24292E;">(caller, clazz, obj, modifiers);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取方法访问器（从 volatile 变量中读取）</span></span>
<span class="line"><span style="color:#24292E;">    MethodAccessor ma </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> methodAccessor;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ma </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果访问器为空，尝试获取方法访问器</span></span>
<span class="line"><span style="color:#24292E;">        ma </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">acquireMethodAccessor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用方法访问器调用方法，并返回结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ma.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(obj, args);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>两个嵌套的 if 语句是用来进行权限检查的。</p><p><code>invoke()</code> 方法实际上是委派给 MethodAccessor 接口来完成的。</p><img src="`+p+'"><p>MethodAccessor 接口有三个实现类，其中的 MethodAccessorImpl 是一个抽象类，另外两个具体的实现类继承了这个抽象类。</p><img src="'+o+'"><ul><li>NativeMethodAccessorImpl：通过本地方法来实现反射调用；</li><li>DelegatingMethodAccessorImpl：通过委派模式来实现反射调用；</li></ul><p>通过 debug 的方式进入 <code>invoke()</code> 方法后，可以看到第一次反射调用会生成一个委派实现 DelegatingMethodAccessorImpl，它在生成的时候会传递一个本地实现 NativeMethodAccessorImpl。</p><img src="'+e+`"><p>也就是说，<code>invoke()</code> 方法在执行的时候，会先调用 DelegatingMethodAccessorImpl，然后调用 NativeMethodAccessorImpl，最后再调用实际的方法。</p><p>“为什么不直接调用本地实现呢？”三妹问。</p><p>“之所以采用委派实现，是为了能够在本地实现和动态实现之间切换。动态实现是另外一种反射调用机制，它是通过生成字节码的形式来实现的。如果反射调用的次数比较多，动态实现的效率就会更高，因为本地实现需要经过 Java 到 C/C++ 再到 Java 之间的切换过程，而动态实现不需要；但如果反射调用的次数比较少，反而本地实现更快一些。”我说。</p><p>“那临界点是多少呢？”三妹问。</p><p>“默认是 15 次。”我说，“可以通过 <code>-Dsun.reflect.inflationThreshold</code> 参数类调整。”</p><p>来看下面这个例子。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> setAgeMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setAge</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, int.class);</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    setAgeMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(object, </span><span style="color:#BF9EEE;">18</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method setAgeMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setAge&quot;</span><span style="color:#24292E;">, int.class);</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    setAgeMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(object, </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 <code>invoke()</code> 方法处加断点进入 debug 模式，当 i = 15 的时候，也就是第 16 次执行的时候，会进入到 if 条件分支中，改变 DelegatingMethodAccessorImpl 的委派模式 delegate 为 <code>(MethodAccessorImpl)(new MethodAccessorGenerator()).generateMethod()</code>，而之前的委派模式 delegate 为 NativeMethodAccessorImpl。</p><img src="`+t+`"><p>“这下明白了吧？三妹。”我说，“接下来，我们再来熟悉一下反射当中常用的 API。”</p><p><strong>1）获取反射类的 Class 对象</strong></p><p><code>Class.forName()</code>，参数为反射类的完全限定名。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itwanger.s39.ReflectionDemo3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c1.</span><span style="color:#62E884;">getCanonicalName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[D</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c2.</span><span style="color:#62E884;">getCanonicalName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[[Ljava.lang.String;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c3.</span><span style="color:#62E884;">getCanonicalName</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itwanger.s39.ReflectionDemo3&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c1.</span><span style="color:#6F42C1;">getCanonicalName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Class c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[D&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c2.</span><span style="color:#6F42C1;">getCanonicalName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Class c3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[[Ljava.lang.String;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c3.</span><span style="color:#6F42C1;">getCanonicalName</span><span style="color:#24292E;">());</span></span></code></pre></div><p>来看一下输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">com.itwanger.s39.ReflectionDemo3</span></span>
<span class="line"><span style="color:#f6f6f4;">double[]</span></span>
<span class="line"><span style="color:#f6f6f4;">java.lang.String[][]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">com.itwanger.s39.ReflectionDemo3</span></span>
<span class="line"><span style="color:#24292e;">double[]</span></span>
<span class="line"><span style="color:#24292e;">java.lang.String[][]</span></span></code></pre></div><p>类名 + <code>.class</code>，只适合在编译前就知道操作的 Class。。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ReflectionDemo3.class;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c1.</span><span style="color:#62E884;">getCanonicalName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.class;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c2.</span><span style="color:#62E884;">getCanonicalName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][][].class;</span></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c3.</span><span style="color:#62E884;">getCanonicalName</span><span style="color:#F6F6F4;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectionDemo3.class;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c1.</span><span style="color:#6F42C1;">getCanonicalName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Class c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.class;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c2.</span><span style="color:#6F42C1;">getCanonicalName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Class c3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][][].class;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c3.</span><span style="color:#6F42C1;">getCanonicalName</span><span style="color:#24292E;">());</span></span></code></pre></div><p>来看一下输出结果：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">com.itwanger.s39.ReflectionDemo3</span></span>
<span class="line"><span style="color:#F6F6F4;">java.lang.String</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][][]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">com.itwanger.s39.ReflectionDemo3</span></span>
<span class="line"><span style="color:#24292E;">java.lang.String</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][][]</span></span></code></pre></div><p><strong>2）创建反射类的对象</strong></p><p>通过反射来创建对象的方式有两种：</p><ul><li>用 Class 对象的 <code>newInstance()</code> 方法。</li><li>用 Constructor 对象的 <code>newInstance()</code> 方法。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Writer.class;</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Writer</span><span style="color:#F6F6F4;"> writer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (Writer) c1.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itwanger.s39.Writer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c2.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> object </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class c1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Writer.class;</span></span>
<span class="line"><span style="color:#24292E;">Writer writer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (Writer) c1.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Class c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itwanger.s39.Writer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Constructor constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c2.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Object object </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span></code></pre></div><p><strong>3）获取构造方法</strong></p><p>Class 对象提供了以下方法来获取构造方法 Constructor 对象：</p><ul><li><code>getConstructor()</code>：返回反射类的特定 public 构造方法，可以传递参数，参数为构造方法参数对应 Class 对象；缺省的时候返回默认构造方法。</li><li><code>getDeclaredConstructor()</code>：返回反射类的特定构造方法，不限定于 public 的。</li><li><code>getConstructors()</code>：返回类的所有 public 构造方法。</li><li><code>getDeclaredConstructors()</code>：返回类的所有构造方法，不限定于 public 的。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;"> c2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.itwanger.s39.Writer</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> c2.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;">[] constructors1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> String.class.</span><span style="color:#62E884;">getDeclaredConstructors</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> constructors1) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class c2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.itwanger.s39.Writer&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Constructor constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c2.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">Constructor</span><span style="color:#24292E;">[] constructors1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.class.</span><span style="color:#6F42C1;">getDeclaredConstructors</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Constructor c </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> constructors1) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(c);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>4）获取字段</strong></p><p>大体上和获取构造方法类似，把关键字 Constructor 换成 Field 即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> setNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, String.class);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> getNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> clazz.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Method setNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setName&quot;</span><span style="color:#24292E;">, String.class);</span></span>
<span class="line"><span style="color:#24292E;">Method getNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getName&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>5）获取方法</strong></p><p>大体上和获取构造方法类似，把关键字 Constructor 换成 Method 即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;">[] methods1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.class.</span><span style="color:#62E884;">getDeclaredMethods</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;">[] methods2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.class.</span><span style="color:#62E884;">getMethods</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.class.</span><span style="color:#6F42C1;">getDeclaredMethods</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">Method</span><span style="color:#24292E;">[] methods2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.class.</span><span style="color:#6F42C1;">getMethods</span><span style="color:#24292E;">();</span></span></code></pre></div><p>“注意，三妹，如果你想反射访问私有字段和（构造）方法的话，需要使用 <code>Constructor/Field/Method.setAccessible(true)</code> 来绕开 Java 语言的访问限制。”我说。</p><p>“好的，二哥。还有资料可以参考吗？”三妹问。</p><p>“有的，有两篇文章写得非常不错，你在学习反射的时候可以作为参考。”我说。</p><p>第一篇：深入理解 Java 反射和动态代理</p><blockquote><p>链接：<a href="https://dunwu.github.io/javacore/basics/java-reflection.html" target="_blank" rel="noreferrer">https://dunwu.github.io/javacore/basics/java-reflection.html</a></p></blockquote><p>第二篇：大白话说Java反射：入门、使用、原理：</p><blockquote><p>链接：<a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p></blockquote><p>这里简单总结下。</p><p>反射是 Java 中的一个强大特性，它允许在运行时检查和操作<a href="https://tobebetterjavaer.com/oo/object-class.html" target="_blank" rel="noreferrer">类</a>、<a href="https://tobebetterjavaer.com/oo/interface.html" target="_blank" rel="noreferrer">接口</a>、<a href="https://tobebetterjavaer.com/oo/var.html" target="_blank" rel="noreferrer">字段</a>和<a href="https://tobebetterjavaer.com/oo/method.html" target="_blank" rel="noreferrer">方法</a>。反射是 Java 的核心组件，支持各种框架和库的实现，如 Spring、Hibernate 等。使用反射，可以在运行时动态地创建对象、调用方法和访问字段，而无需在编译时了解这些对象的具体实现。</p><p>反射的主要类位于 <code>java.lang.reflect</code> 包中，主要包括以下几个关键类：</p><ul><li>Class：代表一个类或接口，包含了类的结构信息（如名称、构造函数、方法、字段等）。通过 Class 对象，可以获取类的元数据并操作类的实例。</li><li>Constructor：代表类的<a href="https://tobebetterjavaer.com/oo/construct.html" target="_blank" rel="noreferrer">构造方法</a>，用于创建类的实例。</li><li>Method：代表类的方法，可以通过它调用类的实例方法。</li><li>Field：代表类的字段，可以获取或修改字段的值。</li><li>Modifier：包含方法、字段和类的<a href="https://tobebetterjavaer.com/oo/access-control.html" target="_blank" rel="noreferrer">访问修饰符（如 public、private 等）</a>。</li></ul><p>使用反射时，需要注意以下几点：</p><ul><li>性能：反射操作通常比直接操作对象的方法和字段慢，因为涉及到额外的间接调用和动态解析。因此，在关注性能的场景中，慎用反射。</li><li>安全性：通过反射，可以访问和操作类的私有字段和方法，这可能导致安全问题。因此，使用反射时要确保代码的安全性。</li><li>维护性：反射使代码变得更加复杂，可能导致难以维护。在使用反射时要确保代码的可读性和可维护性。</li></ul><p>尽管反射存在上述问题，但在某些场景下（如框架开发、动态代理等），它仍然是非常有用的工具。</p><p>来一个完整的 demo 示例吧。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Person</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Person</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setAge</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">privateMethod</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">私有方法</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ReflectionDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ClassNotFoundException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">NoSuchMethodException</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">IllegalAccessException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">InvocationTargetException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">InstantiationException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">NoSuchFieldException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取 Person 类的 Class 对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Class</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; personClass </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Class.</span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">com.github.paicoding.forum.test.javabetter.importance.Person</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取并打印类名</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">类名: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> personClass.</span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取构造函数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Constructor</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; constructor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personClass.</span><span style="color:#62E884;">getConstructor</span><span style="color:#F6F6F4;">(String.class, int.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用构造函数创建 Person 对象实例</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> personInstance </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> constructor.</span><span style="color:#62E884;">newInstance</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取并调用 getName 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> getNameMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personClass.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">getName</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (String) getNameMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(personInstance);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">名字: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取并调用 setAge 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> setAgeMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personClass.</span><span style="color:#62E884;">getMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">setAge</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, int.class);</span></span>
<span class="line"><span style="color:#F6F6F4;">        setAgeMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(personInstance, </span><span style="color:#BF9EEE;">35</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取并访问 age 字段</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Field</span><span style="color:#F6F6F4;"> ageField </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personClass.</span><span style="color:#62E884;">getDeclaredField</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">age</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        ageField.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ageField.</span><span style="color:#62E884;">getInt</span><span style="color:#F6F6F4;">(personInstance);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">年纪: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> age);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取并调用私有方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Method</span><span style="color:#F6F6F4;"> privateMethod </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> personClass.</span><span style="color:#62E884;">getDeclaredMethod</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">privateMethod</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        privateMethod.</span><span style="color:#62E884;">setAccessible</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        privateMethod.</span><span style="color:#62E884;">invoke</span><span style="color:#F6F6F4;">(personInstance);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setAge</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">privateMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;私有方法&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectionDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ClassNotFoundException, NoSuchMethodException,</span></span>
<span class="line"><span style="color:#24292E;">            IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 Person 类的 Class 对象</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; personClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.github.paicoding.forum.test.javabetter.importance.Person&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取并打印类名</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;类名: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> personClass.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取构造函数</span></span>
<span class="line"><span style="color:#24292E;">        Constructor&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personClass.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">(String.class, int.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用构造函数创建 Person 对象实例</span></span>
<span class="line"><span style="color:#24292E;">        Object personInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取并调用 getName 方法</span></span>
<span class="line"><span style="color:#24292E;">        Method getNameMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personClass.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;getName&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (String) getNameMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(personInstance);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;名字: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取并调用 setAge 方法</span></span>
<span class="line"><span style="color:#24292E;">        Method setAgeMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personClass.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;setAge&quot;</span><span style="color:#24292E;">, int.class);</span></span>
<span class="line"><span style="color:#24292E;">        setAgeMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(personInstance, </span><span style="color:#005CC5;">35</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取并访问 age 字段</span></span>
<span class="line"><span style="color:#24292E;">        Field ageField </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personClass.</span><span style="color:#6F42C1;">getDeclaredField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;age&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ageField.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ageField.</span><span style="color:#6F42C1;">getInt</span><span style="color:#24292E;">(personInstance);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;年纪: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> age);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取并调用私有方法</span></span>
<span class="line"><span style="color:#24292E;">        Method privateMethod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> personClass.</span><span style="color:#6F42C1;">getDeclaredMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;privateMethod&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        privateMethod.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        privateMethod.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(personInstance);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个示例中，我们首先通过 <code>Class.forName()</code> 方法获取 Person 类的 Class 对象。接着，我们获取了 Person 类的构造方法、方法和字段，并使用这些反射对象来创建实例、调用方法和访问字段。注意，在访问私有方法和字段时，我们需要调用 <code>setAccessible(true)</code> 方法来允许访问。</p><p>“好了，三妹，关于反射，就先讲到这里吧。”</p><hr>`,99),y=[r];function F(i,E,d,g,u,C){return a(),n("div",null,y)}const m=s(c,[["render",F]]);export{v as __pageData,m as default};
