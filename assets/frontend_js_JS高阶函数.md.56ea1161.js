import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/JS高阶函数.md","filePath":"frontend/js/JS高阶函数.md"}'),p={name:"frontend/js/JS高阶函数.md"},o=l(`<h2 id="高阶函数之filter" tabindex="-1">高阶函数之filter <a class="header-anchor" href="#高阶函数之filter" aria-label="Permalink to &quot;高阶函数之filter&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><blockquote><ul><li>通过提供函数实现的依次测试的所有元素，true 则表示通过，如果为 false 则失败。</li><li>返回值是一个新数组，由通过测试为 true 的所有元素组成</li><li>如果没有任何数组元素通过测试，则返回空数组。</li></ul></blockquote><p>::: tip</p><ol><li><strong>原始数组不发生改变</strong></li><li><strong>不会对空数组进行检测</strong></li><li><strong>满足条件的留下，是对原数组的过滤。</strong></li></ol><p>:::</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">array.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">currentValue</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">), </span><span style="color:#62E884;">thisValue</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#7B7F8B;">//currentValue  必须，遍历到的当前元素值</span></span>
<span class="line"><span style="color:#7B7F8B;">//index         可选，当前元素的索引值</span></span>
<span class="line"><span style="color:#7B7F8B;">//arr           可选，当前元素属于的数组对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">array.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">currentValue</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#24292E;">,</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">thisValue</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//currentValue  必须，遍历到的当前元素值</span></span>
<span class="line"><span style="color:#6A737D;">//index         可选，当前元素的索引值</span></span>
<span class="line"><span style="color:#6A737D;">//arr           可选，当前元素属于的数组对象</span></span></code></pre></div><h3 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h3><h5 id="过滤小于-100" tabindex="-1">过滤小于 100 <a class="header-anchor" href="#过滤小于-100" aria-label="Permalink to &quot;过滤小于 100&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> nums </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">110</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">190</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newNums </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">nums.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(newNums)</span><span style="color:#7B7F8B;">//[20,30,60,50]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nums</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">110</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">60</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">190</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newNums </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">nums.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newNums)</span><span style="color:#6A737D;">//[20,30,60,50]</span></span></code></pre></div><h5 id="返回奇数元素" tabindex="-1">返回奇数元素 <a class="header-anchor" href="#返回奇数元素" aria-label="Permalink to &quot;返回奇数元素&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> res </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">%</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">!==</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(res)</span><span style="color:#7B7F8B;">//[1,3,5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">!==</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res)</span><span style="color:#6A737D;">//[1,3,5]</span></span></code></pre></div><h5 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;">  arr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">apple</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">strawberry</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">banana</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pear</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">apple</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">orange</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">orange</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">strawberry</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，</span></span>
<span class="line"><span style="color:#7B7F8B;">//后续的重复元素位置与indexOf返回的位置相等,表示是同一个元素</span></span>
<span class="line"><span style="color:#7B7F8B;">//后续的重复元素位置与indexOf返回的位置不相等，表示元素重复并且过滤。</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> filterArr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">(value)</span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;">index;)</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(filterArr);</span><span style="color:#7B7F8B;">//[&quot;apple&quot;, &quot;strawberry&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;">  arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;apple&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;strawberry&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;banana&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pear&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;apple&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;orange&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;orange&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;strawberry&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，</span></span>
<span class="line"><span style="color:#6A737D;">//后续的重复元素位置与indexOf返回的位置相等,表示是同一个元素</span></span>
<span class="line"><span style="color:#6A737D;">//后续的重复元素位置与indexOf返回的位置不相等，表示元素重复并且过滤。</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> filterArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">value</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#24292E;">,</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(value)</span><span style="color:#D73A49;">===</span><span style="color:#24292E;">index;)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(filterArr);</span><span style="color:#6A737D;">//[&quot;apple&quot;, &quot;strawberry&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;orange&quot;]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr1.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">( (</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">self</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> self.</span><span style="color:#62E884;">indexOf</span><span style="color:#F6F6F4;">( element ) </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> index;</span></span>
<span class="line"><span style="color:#F6F6F4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">( arr2 );</span></span>
<span class="line"><span style="color:#7B7F8B;">// [1, 2, 3, 5, 4]</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">( arr1 );</span></span>
<span class="line"><span style="color:#7B7F8B;">// [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr1.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">( (</span><span style="color:#E36209;">element</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">self</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> self.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">( element ) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> index;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">( arr2 );</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 2, 3, 5, 4]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">( arr1 );</span></span>
<span class="line"><span style="color:#6A737D;">// [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4]</span></span></code></pre></div><h5 id="找出素数" tabindex="-1">找出素数 <a class="header-anchor" href="#找出素数" aria-label="Permalink to &quot;找出素数&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//除了1和自身,不能被其他数整除的</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">37</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">filter</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(value </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;"> 	</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(value </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">; </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">sqrt</span><span style="color:#F6F6F4;">(value) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(value </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//除了1和自身,不能被其他数整除的</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">37</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> 	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">sqrt</span><span style="color:#24292E;">(value) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> });</span></span></code></pre></div><h2 id="高阶函数之map" tabindex="-1">高阶函数之map <a class="header-anchor" href="#高阶函数之map" aria-label="Permalink to &quot;高阶函数之map&quot;">​</a></h2><h3 id="定义-1" tabindex="-1">定义 <a class="header-anchor" href="#定义-1" aria-label="Permalink to &quot;定义&quot;">​</a></h3><blockquote><p>原数组中的每个元素依次调用一个指定方法后，</p><p>返回值组成的新数组</p></blockquote><p>::: tip</p><ol><li><strong>原始数组不发生改变</strong></li><li><strong>不会对空数组进行检测</strong></li><li><strong>对原数组的加工，返回加工后新数组</strong></li></ol><p>:::</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">array.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">currentValue</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">), </span><span style="color:#62E884;">thisValue</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#7B7F8B;">//currentValue  数组中正在处理的当前元素。</span></span>
<span class="line"><span style="color:#7B7F8B;">//index可选  数组中正在处理的当前元素的索引。</span></span>
<span class="line"><span style="color:#7B7F8B;">//array可选  map 方法被调用的数组。</span></span>
<span class="line"><span style="color:#7B7F8B;">//thisArg可选 执行 callback 函数时使用的this 值。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">array.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">currentValue</span><span style="color:#24292E;">,</span><span style="color:#E36209;">index</span><span style="color:#24292E;">,</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">), </span><span style="color:#6F42C1;">thisValue</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">//currentValue  数组中正在处理的当前元素。</span></span>
<span class="line"><span style="color:#6A737D;">//index可选  数组中正在处理的当前元素的索引。</span></span>
<span class="line"><span style="color:#6A737D;">//array可选  map 方法被调用的数组。</span></span>
<span class="line"><span style="color:#6A737D;">//thisArg可选 执行 callback 函数时使用的this 值。</span></span></code></pre></div><h3 id="用法-1" tabindex="-1">用法 <a class="header-anchor" href="#用法-1" aria-label="Permalink to &quot;用法&quot;">​</a></h3><h5 id="返回数组元素平方后的新数组" tabindex="-1">返回数组元素平方后的新数组 <a class="header-anchor" href="#返回数组元素平方后的新数组" aria-label="Permalink to &quot;返回数组元素平方后的新数组&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">pow</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">){  </span><span style="color:#7B7F8B;">//定义一个平方函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">x;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(pow);  </span><span style="color:#7B7F8B;">//map()传入的是函数对象本身</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(result);       </span><span style="color:#7B7F8B;">//结果：[1,4,9,16,25,36,49,64,81];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">){  </span><span style="color:#6A737D;">//定义一个平方函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">x;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(pow);  </span><span style="color:#6A737D;">//map()传入的是函数对象本身</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);       </span><span style="color:#6A737D;">//结果：[1,4,9,16,25,36,49,64,81];</span></span></code></pre></div><h5 id="用给定函数创建新字符串" tabindex="-1">用给定函数创建新字符串 <a class="header-anchor" href="#用给定函数创建新字符串" aria-label="Permalink to &quot;用给定函数创建新字符串&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapString</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  str</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">(c, i, str))</span></span>
<span class="line"><span style="color:#F6F6F4;">    .</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">mapString</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">lorem ipsum</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">c</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> c.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// &#39;LOREM IPSUM&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">str</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  str</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">c</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(c, i, str))</span></span>
<span class="line"><span style="color:#24292E;">    .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">mapString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;lorem ipsum&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// &#39;LOREM IPSUM&#39;</span></span></code></pre></div><h5 id="把二维数组变字符串" tabindex="-1">把二维数组变字符串 <a class="header-anchor" href="#把二维数组变字符串" aria-label="Permalink to &quot;把二维数组变字符串&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">]];</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">row</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> row.</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)).</span><span style="color:#62E884;">join</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(str); </span><span style="color:#7B7F8B;">// &quot;1,2;3,4&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">row</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> row.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;;&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str); </span><span style="color:#6A737D;">// &quot;1,2;3,4&quot;</span></span></code></pre></div><h5 id="数字序列转为数组-删除符号" tabindex="-1">数字序列转为数组，删除符号 <a class="header-anchor" href="#数字序列转为数组-删除符号" aria-label="Permalink to &quot;数字序列转为数组，删除符号&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">digitize</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#E7EE98;">\`</span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">Math.</span><span style="color:#62E884;">abs</span><span style="color:#F6F6F4;">(n)</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">\`</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(i));</span></span>
<span class="line"><span style="color:#62E884;">digitize</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#62E884;">digitize</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// [1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">digitize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">Math</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">abs</span><span style="color:#032F62;">(</span><span style="color:#24292E;">n</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">i</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(i));</span></span>
<span class="line"><span style="color:#6F42C1;">digitize</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#6F42C1;">digitize</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre></div><h5 id="拿到所有图片的图片名称并以数组形式返回" tabindex="-1">拿到所有图片的图片名称并以数组形式返回 <a class="header-anchor" href="#拿到所有图片的图片名称并以数组形式返回" aria-label="Permalink to &quot;拿到所有图片的图片名称并以数组形式返回&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getImages</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">el</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">includeDuplicates</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> images </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">el.</span><span style="color:#62E884;">getElementsByTagName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">img</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)]</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> srcList </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> images.</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">img</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    img.</span><span style="color:#62E884;">getAttribute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">src</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  );</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> includeDuplicates </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> srcList </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">(srcList)];</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">getImages</span><span style="color:#F6F6F4;">(document, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">); </span></span>
<span class="line"><span style="color:#7B7F8B;">// [&#39;image1.jpg&#39;, &#39;image2.png&#39;, &#39;image1.png&#39;, &#39;...&#39;]</span></span>
<span class="line"><span style="color:#62E884;">getImages</span><span style="color:#F6F6F4;">(document, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// [&#39;image1.jpg&#39;, &#39;image2.png&#39;, &#39;...&#39;] 名字去重</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getImages</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">el</span><span style="color:#24292E;">, </span><span style="color:#E36209;">includeDuplicates</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">images</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">el.</span><span style="color:#6F42C1;">getElementsByTagName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;img&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">srcList</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> images.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">img</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    img.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> includeDuplicates </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> srcList </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(srcList)];</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">getImages</span><span style="color:#24292E;">(document, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;image1.jpg&#39;, &#39;image2.png&#39;, &#39;image1.png&#39;, &#39;...&#39;]</span></span>
<span class="line"><span style="color:#6F42C1;">getImages</span><span style="color:#24292E;">(document, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// [&#39;image1.jpg&#39;, &#39;image2.png&#39;, &#39;...&#39;] 名字去重</span></span></code></pre></div><h5 id="vue中循环注册组件" tabindex="-1">vue中循环注册组件 <a class="header-anchor" href="#vue中循环注册组件" aria-label="Permalink to &quot;vue中循环注册组件&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Vue.</span><span style="color:#62E884;">component</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ele</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,{</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#62E884;">render</span><span style="color:#F286C4;">:function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">createElement</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">div</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">			    Array.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">,{ length</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;"> }).</span><span style="color:#62E884;">map</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createElement</span><span style="color:#F6F6F4;">(Child))</span></span>
<span class="line"><span style="color:#F6F6F4;">			);</span></span>
<span class="line"><span style="color:#F6F6F4;">		}</span></span>
<span class="line"><span style="color:#F6F6F4;">	});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ele&#39;</span><span style="color:#24292E;">,{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">createElement</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			    Array.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,{ length:</span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> }).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(Child))</span></span>
<span class="line"><span style="color:#24292E;">			);</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	});</span></span></code></pre></div><h2 id="高阶函数之-reduce" tabindex="-1">高阶函数之 reduce <a class="header-anchor" href="#高阶函数之-reduce" aria-label="Permalink to &quot;高阶函数之 reduce&quot;">​</a></h2><h3 id="定义-2" tabindex="-1">定义 <a class="header-anchor" href="#定义-2" aria-label="Permalink to &quot;定义&quot;">​</a></h3><blockquote><p><strong>原始数组不发生改变</strong></p><p><strong>对于空数组是不会执行回调函数的</strong></p></blockquote><h3 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(callback , [initialValue])</span></span>
<span class="line"><span style="color:#7B7F8B;">//callback （执行数组中每个值的函数，包含四个参数）</span></span>
<span class="line"><span style="color:#7B7F8B;">//initialValue （作为第一次调用 callback 的第一个参数。）</span></span>
<span class="line"><span style="color:#7B7F8B;">//如果没有提供initialValue，从索引1的地方开始执行callback方法，跳过第一个索引。</span></span>
<span class="line"><span style="color:#7B7F8B;">//如果提供initialValue，从索引0开始</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(callback , [initialValue])</span></span>
<span class="line"><span style="color:#6A737D;">//callback （执行数组中每个值的函数，包含四个参数）</span></span>
<span class="line"><span style="color:#6A737D;">//initialValue （作为第一次调用 callback 的第一个参数。）</span></span>
<span class="line"><span style="color:#6A737D;">//如果没有提供initialValue，从索引1的地方开始执行callback方法，跳过第一个索引。</span></span>
<span class="line"><span style="color:#6A737D;">//如果提供initialValue，从索引0开始</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//执行数组中每个值的callback 函数，包含四个参数</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">previousValue</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">currentValue</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">array</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> previousValue </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> currentValue;</span></span>
<span class="line"><span style="color:#F6F6F4;">}，</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//执行数组中每个值的callback 函数，包含四个参数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">previousValue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">currentValue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">array</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> previousValue </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> currentValue;</span></span>
<span class="line"><span style="color:#24292E;">}，</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><p>::: tip</p><p>1、<strong>previousValue</strong> ：上一次调用回调返回的值，或者是提供的初始值（initialValue）</p><p>2、<strong>currentValue</strong> ：数组中当前被处理的元素</p><p>3、<strong>index</strong> ：当前元素在数组中的索引</p><p>4、<strong>array</strong> ：调用 reduce 函数 的数组</p><p>:::</p><h3 id="用法-2" tabindex="-1">用法 <a class="header-anchor" href="#用法-2" aria-label="Permalink to &quot;用法&quot;">​</a></h3><h5 id="数组求和" tabindex="-1">数组求和 <a class="header-anchor" href="#数组求和" aria-label="Permalink to &quot;数组求和&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sum</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr].</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">acc</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> acc </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> val, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">sum</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 10</span></span>
<span class="line"><span style="color:#62E884;">sum</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// 10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr].</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">acc</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> acc </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 10</span></span></code></pre></div><h5 id="数组去重-1" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重-1" aria-label="Permalink to &quot;数组去重&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newArr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">pre</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">cur</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> pre.</span><span style="color:#62E884;">includes</span><span style="color:#F6F6F4;">(cur) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> pre </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">pre,cur],[])</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(newArr);</span><span style="color:#7B7F8B;">// [1, 2, 3, 4]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pre</span><span style="color:#24292E;">,</span><span style="color:#E36209;">cur</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> pre.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(cur) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> pre </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">pre,cur],[])</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(newArr);</span><span style="color:#6A737D;">// [1, 2, 3, 4]</span></span></code></pre></div><h5 id="计算两个或多个数字的平均值" tabindex="-1">计算两个或多个数字的平均值 <a class="header-anchor" href="#计算两个或多个数字的平均值" aria-label="Permalink to &quot;计算两个或多个数字的平均值&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">average</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">nums</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  nums.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">acc</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> acc </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> val, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> nums.length;</span></span>
<span class="line"><span style="color:#62E884;">average</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]); </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#62E884;">average</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">average</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">nums</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  nums.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">acc</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> acc </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> val, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> nums.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">average</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#6F42C1;">average</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 2</span></span></code></pre></div><h5 id="将多维数组转化为一维" tabindex="-1">将多维数组转化为一维 <a class="header-anchor" href="#将多维数组转化为一维" aria-label="Permalink to &quot;将多维数组转化为一维&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">], [</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">,[</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">]]]</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">convertArr</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">pre</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">cur</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(cur) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">pre,</span><span style="color:#F286C4;">...</span><span style="color:#62E884;">convertArr</span><span style="color:#F6F6F4;">(cur)] </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">pre,cur],[])</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">convertArr</span><span style="color:#F6F6F4;">(arr)); </span><span style="color:#7B7F8B;">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">]]]</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convertArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pre</span><span style="color:#24292E;">,</span><span style="color:#E36209;">cur</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(cur) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">pre,</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">convertArr</span><span style="color:#24292E;">(cur)] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">pre,cur],[])</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">convertArr</span><span style="color:#24292E;">(arr)); </span><span style="color:#6A737D;">//[0, 1, 2, 3, 4, 5, 6, 7]</span></span></code></pre></div><h5 id="对象里的属性求和" tabindex="-1">对象里的属性求和 <a class="header-anchor" href="#对象里的属性求和" aria-label="Permalink to &quot;对象里的属性求和&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"><span style="color:#F6F6F4;">        subject</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">math</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        score</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"><span style="color:#F6F6F4;">        subject</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">chinese</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        score</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">    {</span></span>
<span class="line"><span style="color:#F6F6F4;">        subject</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">english</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        score</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">30</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> result.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">prev</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">cur</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> cur.score </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> prev, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(sum) </span><span style="color:#7B7F8B;">//60</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        subject: </span><span style="color:#032F62;">&#39;math&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        score: </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        subject: </span><span style="color:#032F62;">&#39;chinese&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        score: </span><span style="color:#005CC5;">20</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        subject: </span><span style="color:#032F62;">&#39;english&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        score: </span><span style="color:#005CC5;">30</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">prev</span><span style="color:#24292E;">, </span><span style="color:#E36209;">cur</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> cur.score </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> prev, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(sum) </span><span style="color:#6A737D;">//60</span></span></code></pre></div><h5 id="统计数组中每个元素出现的次数" tabindex="-1">统计数组中每个元素出现的次数 <a class="header-anchor" href="#统计数组中每个元素出现的次数" aria-label="Permalink to &quot;统计数组中每个元素出现的次数&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">arr11 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">22</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">234</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">999</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">999</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr11.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">pre</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    pre[item] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pre[item] </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> pre[item] </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> pre</span></span>
<span class="line"><span style="color:#F6F6F4;">}, {})</span></span>
<span class="line"><span style="color:#7B7F8B;">//{ &#39;22&#39;: 1, &#39;111&#39;: 3, &#39;234&#39;: 1, &#39;999&#39;: 2 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr11 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">234</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">999</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">999</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">111</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr11.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pre</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    pre[item] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre[item] </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> pre[item] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pre</span></span>
<span class="line"><span style="color:#24292E;">}, {})</span></span>
<span class="line"><span style="color:#6A737D;">//{ &#39;22&#39;: 1, &#39;111&#39;: 3, &#39;234&#39;: 1, &#39;999&#39;: 2 }</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Alice</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Bob</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Tiff</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Bruce</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Alice</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> nameNum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> names.</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">pre</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">cur</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(cur </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> pre){</span></span>
<span class="line"><span style="color:#F6F6F4;">    pre[cur]</span><span style="color:#F286C4;">++</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    pre[cur] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> pre</span></span>
<span class="line"><span style="color:#F6F6F4;">},{})</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(nameNum); </span><span style="color:#7B7F8B;">//{Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;Alice&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Bob&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Tiff&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Bruce&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Alice&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> nameNum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> names.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">((</span><span style="color:#E36209;">pre</span><span style="color:#24292E;">,</span><span style="color:#E36209;">cur</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(cur </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> pre){</span></span>
<span class="line"><span style="color:#24292E;">    pre[cur]</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">  }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    pre[cur] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> pre</span></span>
<span class="line"><span style="color:#24292E;">},{})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(nameNum); </span><span style="color:#6A737D;">//{Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}</span></span></code></pre></div><h2 id="高阶函数之-sort" tabindex="-1">高阶函数之 sort <a class="header-anchor" href="#高阶函数之-sort" aria-label="Permalink to &quot;高阶函数之 sort&quot;">​</a></h2><h3 id="定义-3" tabindex="-1">定义 <a class="header-anchor" href="#定义-3" aria-label="Permalink to &quot;定义&quot;">​</a></h3><blockquote><p><code>sort() </code>方法用原地算法对数组的元素进行排序，并返回数组，</p><p>该排序方法会在原数组上直接进行排序，并<strong>不会生成一个排好序的新数组</strong>。</p><p>排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p></blockquote><h3 id="语法-3" tabindex="-1">语法 <a class="header-anchor" href="#语法-3" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(sortby)</span></span>
<span class="line"><span style="color:#7B7F8B;">//sort() 在没有参数时，返回的结果是按升序来排列的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//sortby	可选。规定排序顺序。必须是函数。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(sortby)</span></span>
<span class="line"><span style="color:#6A737D;">//sort() 在没有参数时，返回的结果是按升序来排列的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//sortby	可选。规定排序顺序。必须是函数。</span></span></code></pre></div><p>::: tip</p><p><strong>function(a, b)(return a- b)</strong></p><ul><li>如果指明了参数：compare (a, b) ，（a, b 是两个要比较的元素，a 在 b 前面）那么数组会按照该函数的返回值排序</li><li>如果 compare (a, b) 返回值 &lt; 0 ，a 会被排列到 b 之前，即参数 a, b 的顺序保存原样；</li><li>如果 compare (a, b) 返回值 = 0 ，a 和 b 的相对位置不变。（ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守）</li><li>如果 compare (a, b) 返回值 &gt; 0 ，b 会被排列到 a 之前。即交换参数 a, b 的顺序</li></ul><p>:::</p><h3 id="用法-3" tabindex="-1">用法 <a class="header-anchor" href="#用法-3" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">sortby</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> koala</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(sortby)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(koala);</span></span>
<span class="line"><span style="color:#7B7F8B;">// [1 , 2 , 10 , 20]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sortby</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> koala</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(sortby)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(koala);</span></span>
<span class="line"><span style="color:#6A737D;">// [1 , 2 , 10 , 20]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    arr.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> y) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (x </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> y) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    });</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(arr); </span><span style="color:#7B7F8B;">// [1, 2, 10, 20]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    arr.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">, </span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (x </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> y) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arr); </span><span style="color:#6A737D;">// [1, 2, 10, 20]</span></span></code></pre></div><h2 id="自定义高阶函数" tabindex="-1">自定义高阶函数 <a class="header-anchor" href="#自定义高阶函数" aria-label="Permalink to &quot;自定义高阶函数&quot;">​</a></h2><h4 id="字符串数组每项长度、并转换为整数数组" tabindex="-1">字符串数组每项长度、并转换为整数数组 <a class="header-anchor" href="#字符串数组每项长度、并转换为整数数组" aria-label="Permalink to &quot;字符串数组每项长度、并转换为整数数组&quot;">​</a></h4><h3 id="语法-4" tabindex="-1">语法 <a class="header-anchor" href="#语法-4" aria-label="Permalink to &quot;语法&quot;">​</a></h3><blockquote><ul><li>创建了一个高阶函数 mapForEach ，它接受一个数组和一个回调函数 fn。</li><li>它循环遍历传入的数组，并在每次迭代时在 newArray.push 方法调用回调函数 fn 。</li><li>回调函数 fn 接收数组的当前元素并返回该元素的长度，该元素存储在 newArray 中。</li><li>for 循环完成后，newArray 被返回并赋值给 lenArray。</li></ul></blockquote><h3 id="用法-4" tabindex="-1">用法 <a class="header-anchor" href="#用法-4" aria-label="Permalink to &quot;用法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> strArray</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">JavaScript</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">PHP</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">JAVA</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">C</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Python</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapForEach</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> newArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length;i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        newArray.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">(arr[i]));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> newArray;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> lenArray </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mapForEach</span><span style="color:#F6F6F4;">(strArray,(</span><span style="color:#FFB86C;font-style:italic;">str</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">  str.length);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(lenArray);</span><span style="color:#7B7F8B;">//[10,3,4,1,6]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">strArray</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;JavaScript&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;PHP&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;JAVA&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;Python&#39;</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapForEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">,</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">newArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        newArray.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(arr[i]));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newArray;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lenArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapForEach</span><span style="color:#24292E;">(strArray,(</span><span style="color:#E36209;">str</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">  str.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(lenArray);</span><span style="color:#6A737D;">//[10,3,4,1,6]</span></span></code></pre></div>`,83),e=[o];function t(c,r,y,F,E,i){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{d as __pageData,u as default};
