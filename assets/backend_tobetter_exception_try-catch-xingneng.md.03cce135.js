import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/try-catch-xingneng-20230326204136.0369337c.png",o="/docs/assets/try-catch-xingneng-20230326200811.867721d5.png",c="/docs/assets/try-catch-xingneng-20230326200922.690c7657.png",e="/docs/assets/try-catch-xingneng-20230326202911.922abcd8.png",t="/docs/assets/try-catch-xingneng-20230326203005.2f2d4041.png",r="/docs/assets/try-catch-xingneng-20230326203449.688496aa.png",y="/docs/assets/try-catch-xingneng-20230326210303.adfd7e5e.png",b=JSON.parse('{"title":"Java try-catch 捕获异常真的会影响性能吗？","description":"本文详细探讨了try-catch捕获异常在Java编程中是否会影响性能。通过对比实验和性能测试，分析了异常处理与性能的关系，解答了关于try-catch对性能影响的常见疑问。阅读本文，将帮助您在编写代码时更加明智地使用异常处理机制，同时确保程序性能的稳定和优越。","frontmatter":{"title":"Java try-catch 捕获异常真的会影响性能吗？","shortTitle":"try-catch会影响性能吗？","category":["Java核心"],"tag":["异常处理"],"description":"本文详细探讨了try-catch捕获异常在Java编程中是否会影响性能。通过对比实验和性能测试，分析了异常处理与性能的关系，解答了关于try-catch对性能影响的常见疑问。阅读本文，将帮助您在编写代码时更加明智地使用异常处理机制，同时确保程序性能的稳定和优越。","head":[["meta",{"name":"keywords","content":"Java,异常处理,java try-catch,捕获异常, 性能影响"}]]},"headers":[],"relativePath":"backend/tobetter/exception/try-catch-xingneng.md","filePath":"backend/tobetter/exception/try-catch-xingneng.md"}'),F={name:"backend/tobetter/exception/try-catch-xingneng.md"},i=l(`<h1 id="_8-5-try-catch会影响性能吗" tabindex="-1">8.5 try-catch会影响性能吗？ <a class="header-anchor" href="#_8-5-try-catch会影响性能吗" aria-label="Permalink to &quot;8.5 try-catch会影响性能吗？&quot;">​</a></h1><p>“二哥，你看着这鬼代码，竟然在 for 循环里面搞了个 <code>try-catch</code>，不知道<code>try-catch</code>有性能损耗吗？” 老王煞有其事地指着屏幕里的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">5000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">         dosth</span></span>
<span class="line"><span style="color:#F6F6F4;">     } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">         e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">         dosth</span></span>
<span class="line"><span style="color:#24292E;">     } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">         e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div><p>我探过头去看了眼代码，“那 老王你觉得该怎么改？”</p><p>“当然是把 <code>try-catch</code> 提到外面啊！” 老王脑子都不转一下，脱口而出。</p><p>“你是不是傻？且不说性能，这代码的目的明显是让循环内部单次调用出错不影响循环的运行，你移到外面，业务逻辑不就变了吗！”</p><p>老王挠了挠他的地中海，“好像也是啊！”</p><p>“回过头来，catch 整个 for 循环和在循环内部 catch，在不出错的情况下，其实性能差不多。” 我喝一口咖啡不经意地提到，准备在 老王前面秀一下。</p><p>“啥意思？” 老王有点懵地看着我，“<code>try-catch</code>是有性能损耗的，我可是看过网上资料的！”</p><p>果然， 老王上钩了，我二话不说直接打开 idea，一顿操作敲了以下代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TryCatchTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 用 @Benchmark 注解标记一个方法作为基准测试方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Benchmark</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tryfor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Blackhole</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">blackhole</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用 try-catch 语句包装一个 for 循环</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 在循环中调用 Blackhole.consume() 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">                blackhole.</span><span style="color:#62E884;">consume</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 捕获异常并打印堆栈跟踪信息</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 用 @Benchmark 注解标记另一个方法作为基准测试方法</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Benchmark</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fortry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Blackhole</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">blackhole</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用 for 循环包装一个 try-catch 语句</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 在 try 块中调用 Blackhole.consume() 方法</span></span>
<span class="line"><span style="color:#F6F6F4;">                blackhole.</span><span style="color:#62E884;">consume</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 捕获异常并打印堆栈跟踪信息</span></span>
<span class="line"><span style="color:#F6F6F4;">                e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TryCatchTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用 @Benchmark 注解标记一个方法作为基准测试方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryfor</span><span style="color:#24292E;">(Blackhole </span><span style="color:#E36209;">blackhole</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用 try-catch 语句包装一个 for 循环</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 在循环中调用 Blackhole.consume() 方法</span></span>
<span class="line"><span style="color:#24292E;">                blackhole.</span><span style="color:#6F42C1;">consume</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 捕获异常并打印堆栈跟踪信息</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用 @Benchmark 注解标记另一个方法作为基准测试方法</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fortry</span><span style="color:#24292E;">(Blackhole </span><span style="color:#E36209;">blackhole</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用 for 循环包装一个 try-catch 语句</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 在 try 块中调用 Blackhole.consume() 方法</span></span>
<span class="line"><span style="color:#24292E;">                blackhole.</span><span style="color:#6F42C1;">consume</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 捕获异常并打印堆栈跟踪信息</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这里，请允许我补充一些概念，以便大家能更好的理解这段代码。</p><blockquote><p>第一个：<code>@Benchmark</code> 是一个来自于 JMH（Java Microbenchmark Harness）库的注解，用来标记一个方法作为基准测试方法。JMH 是一个专门用于编写 <a href="https://hezhiqiang8909.gitbook.io/java/docs/javalib/jmh" target="_blank" rel="noreferrer">Java 微基准测试</a>的工具包，包含了一些用于测试 Java 代码性能和微调 JVM 的工具和库。使用 <code>@Benchmark</code> 注解标记的方法将被 JMH 自动识别为基准测试方法，并在运行时进行基准测试。在基准测试期间，JMH 会运行被标记的方法多次，并测量方法的执行时间、吞吐量、延迟等指标，并生成统计结果。</p></blockquote><blockquote><p>第二个：在 JMH 进行基准测试时，为了避免 JIT 编译器优化掉测试代码中的某些操作，我们需要在测试代码中使用一些占位符，以便让编译器认为这些操作是有意义的，不应该被优化掉。<code>Blackhole.consume()</code> 方法就是这样的一个占位符。它用来占用一些 CPU 时间和内存空间，以确保测试结果的准确性和可靠性。</p></blockquote><p>“BB 不如 show code，看到没， 老王，我把 <code>try-catch</code> 从 for 循环里面提出来跟在for循环里面做个对比跑一下，你猜猜两个差多少？”</p><p>“切，肯定 tryfor 性能好，想都不用想，不是的话我倒立洗头！” 老王信誓旦旦道。</p><p>我懒得跟他BB，直接开始了 benchmark，跑的结果如下：</p><img src="`+p+`"><p>可以看到，两者的性能（数字越大越好）其实差不多：551063.024 VS 551525.861。</p><p>在这里，简单普及一下 JMH 的使用指南。</p><blockquote><p>第一步，在 pom.xml 文件中加入依赖。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;!-- 引入 JMH 工具包 --&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;1.35&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;version&gt;1.35&lt;/version&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/dependency&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;!-- 引入 JMH 工具包 --&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;1.35&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;version&gt;1.35&lt;/version&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/dependency&gt;</span></span></code></pre></div><blockquote><p>第二步，Intellij IDEA 中安装 JMH 插件。</p></blockquote><img src="`+o+'"><blockquote><p>第三步，在代码编辑器中点击这个带有时间和运行的图标。然后静静等待结果就可以了，我本机（32G 内存 Intel i7 跑了 16 分钟，贼慢，因为 JMH 比较喜欢追求公平公正😂）</p></blockquote><img src="'+c+'"><p>老王一看傻了：“说好的性能影响呢？怎么没了？”</p><p>我直接一个javap，让 老王看看，其实两个实现在字节码层面没啥区别：</p><blockquote><p>tryfor 的字节码</p></blockquote><p>异常表记录的是 0 - 20 行，如果这些行里面的代码出现问题，直接跳到 23 行处理。</p><img src="'+e+'"><blockquote><p>fortry 的字节码</p></blockquote><p>差别也就是异常表的范围小点，包的是 9-14 行，其它跟 tryfor 都差不多。</p><img src="'+t+'"><p>所以从字节码层面来看，没抛错两者的执行效率其实没啥差别。</p><p>“那为什么网上流传着<code>try-catch</code>会有性能问题的说法啊？” 老王觉得非常奇怪。</p><p>这个说法确实有，在《Effective Java》这本书里就提到了 <code>try-catch</code> 性能问题：</p><img src="'+r+`"><p>正所谓听话不能听一半，以前读书时候最怕的就是一知半解，因为完全理解选择题能选对，完全不懂蒙可能蒙对，一知半解必定选到错误的选项！</p><p>《Effective Java》书中说的其实是不要用 <code>try-catch</code> 来代替正常的代码，书中的举例了正常的 for 循环肯定这样实现：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> ( </span><span style="color:#97E1F1;font-style:italic;">Mountain</span><span style="color:#F6F6F4;"> m </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> range )</span></span>
<span class="line"><span style="color:#F6F6F4;">    m.</span><span style="color:#62E884;">climb</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> ( Mountain m </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> range )</span></span>
<span class="line"><span style="color:#24292E;">    m.</span><span style="color:#6F42C1;">climb</span><span style="color:#24292E;">();</span></span></code></pre></div><p>但有个卧龙偏偏不这样实现，要通过  <code>try-catch</code> 拐着弯来实现循环：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/* Horrible abuse of exceptions. Don&#39;t ever do this! */</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ( </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;"> )</span></span>
<span class="line"><span style="color:#F6F6F4;">        range[i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">].</span><span style="color:#62E884;">climb</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> ( </span><span style="color:#97E1F1;font-style:italic;">ArrayIndexOutOfBoundsException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;"> ) {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* Horrible abuse of exceptions. Don&#39;t ever do this! */</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ( </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> )</span></span>
<span class="line"><span style="color:#24292E;">        range[i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">climb</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> ( ArrayIndexOutOfBoundsException </span><span style="color:#E36209;">e</span><span style="color:#24292E;"> ) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这操作我只能说有点逆天，这两个实现的对比就有性能损耗了。</p><p>我们直接再跑下有<code>try-catch</code> 的代码和没 <code>try-catch</code>的 for 循环区别，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TryCatchTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Benchmark</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fornotry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Blackhole</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">blackhole</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            blackhole.</span><span style="color:#62E884;">consume</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Benchmark</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">tryfor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Blackhole</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">blackhole</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                blackhole.</span><span style="color:#62E884;">consume</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Exception</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TryCatchTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fornotry</span><span style="color:#24292E;">(Blackhole </span><span style="color:#E36209;">blackhole</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            blackhole.</span><span style="color:#6F42C1;">consume</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Benchmark</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryfor</span><span style="color:#24292E;">(Blackhole </span><span style="color:#E36209;">blackhole</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                blackhole.</span><span style="color:#6F42C1;">consume</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>结果如下：</p><img src="`+y+'"><p>+-差不多，直接看前面的分数对比，没有 <code>try-catch</code> 的性能确实好些，这也和书中说的 <code>try-catch</code> 会影响 JVM 一些特定的优化说法吻合，但是具体没有说影响哪些优化，我猜测可能是指令重排之类的。</p><p>好了，我再总结下有关 <code>try-catch</code> 性能问题说法：</p><ol><li><code>try-catch</code> 相比较没 <code>try-catch</code>，确实有一定的性能影响，但是旨在不推荐我们用 <code>try-catch</code> 来代替正常能不用 <code>try-catch</code> 的实现，而不是不让用 <code>try-catch</code>。</li><li>for循环内用  <code>try-catch</code> 和用 <code>try-catch</code> 包裹整个 for 循环性能差不多，但是其实两者本质上是业务处理方式的不同，跟性能扯不上关系，关键看你的业务流程处理。</li><li>虽然知道<code>try-catch</code>会有性能影响，但是业务上不需要避讳其使用，业务实现优先（只要不是书中举例的那种逆天代码就行），非特殊情况下性能都是其次，有意识地避免大范围的<code>try-catch</code>，只 catch 需要的部分即可（没把握全 catch 也行，代码安全执行第一）。</li></ol><p>“好了， 老王你懂了没？”</p><p>“行啊二哥，BB是一套一套的，走请你喝燕麦拿铁！” 老王一把拉起我，我直接一个挣脱，“少来，我刚喝过咖啡，你那个倒立洗头，赶紧的！”我立马意识到 老王想岔开话题。</p><p>“洗洗洗，我们先喝个咖啡，晚上回去给你洗！”</p><blockquote><p>转载链接：<a href="https://mp.weixin.qq.com/s/H870jLz32oEI_HCMVt1m5Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/H870jLz32oEI_HCMVt1m5Q</a>，作者：yes，修订和优化：沉默王二</p></blockquote><hr>',56),E=[i];function d(h,f,g,C,k,u){return n(),a("div",null,E)}const v=s(F,[["render",d]]);export{b as __pageData,v as default};
