import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"常见基础面试题","description":"","frontmatter":{},"headers":[],"relativePath":"interview/frontend/js/基础面试题.md","filePath":"interview/frontend/js/基础面试题.md"}'),p={name:"interview/frontend/js/基础面试题.md"},o=l(`<h1 id="常见基础面试题" tabindex="-1">常见基础面试题 <a class="header-anchor" href="#常见基础面试题" aria-label="Permalink to &quot;常见基础面试题&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>原始类型：<code>number,string,boolean,null,undefined,bigint,symbol</code></p><p>引用类型：Object</p><ul><li>标准普通对象：<code>Object</code></li><li>标准准特殊对象：<code>Array,Date,Math,Error,RegExp</code></li><li>非标准特殊对象（包装类型）：<code>Number,String,Boolean</code></li><li>可执行对象：<code>Function</code></li></ul><div class="tip custom-block"><p class="custom-block-title">Symbol应用</p><ol><li>对象<strong>唯一值</strong>属性</li><li>唯一标识统一管理（pinia 中的 storeId）</li><li>iterator底层实现机制</li></ol></div><h3 id="类型检测方式" tabindex="-1">类型检测方式 <a class="header-anchor" href="#类型检测方式" aria-label="Permalink to &quot;类型检测方式&quot;">​</a></h3><ol><li>typeof：所有数据类型，在计算机底层都是按照‘64 位二进制’进行存储的， typeof是按照二进制值进行检测类型的<details class="details custom-block"><summary>详细转换机制</summary></details></li><li>若二进制前三位是‘0’,并且实现了 <code>call</code> 方法，则返回 <code>function</code>，没有实现则返回 <code>object</code></li><li>null是 64 个 ‘0’，<code>typeof null</code> ---&gt; &#39;object&#39;(局限性)</li><li>检测未被声明的变量，返回 <code>undefined</code> :::</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isObj</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">option</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">  option </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> option </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">object</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> option </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">function</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">option</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">  option </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> option </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> option </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><h3 id="其他类型转为数字类型" tabindex="-1">其他类型转为数字类型 <a class="header-anchor" href="#其他类型转为数字类型" aria-label="Permalink to &quot;其他类型转为数字类型&quot;">​</a></h3><p>规则：</p><ol><li><p><strong>宇符串转换为数宇</strong>：空宇符串变为0，如果出现任何非有效数宇宇符，结果都是NaN</p></li><li><p><strong>把布尔转换为数宇</strong>：<code>true-&gt;1 ; false-&gt;0</code></p></li><li><p><code>null-&gt;0 ; undefined-&gt;NaN</code></p></li><li><p><strong>Symbol无法转换为数宇</strong>，会报错：<code>Uncaught TypeError</code></p></li><li><p><strong>BigInt转为数字</strong>，会去除“n”（超过安全数宇的，会按照科学计数法处理）</p></li><li><p><strong>把对象转换为数字</strong>：</p></li></ol><ul><li>先调用对線的 <code>Symbol.toPrimitive</code> 这个方法，如果不存在这个方法</li><li>再调用对泉的 <code>valueof</code> 获取原始值，如果获取的值不是原始值，比如数组</li><li>再调用对線的 <code>toString</code> 把其变为字符串</li><li>最后再把宇符串基于Number方法转换为数字</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(val,radix) </span><span style="color:#62E884;">parseFloat</span><span style="color:#F6F6F4;">(val)</span></span>
<span class="line"><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) 和 </span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">NaN</span></span>
<span class="line"><span style="color:#7B7F8B;">/*  规则：val 必须是字符串，不是则自动转为字符串；</span></span>
<span class="line"><span style="color:#7B7F8B;">      然后再 从左往右 找符合 radix（进制）有效数字，一个没找到则返回 NaN，</span></span>
<span class="line"><span style="color:#7B7F8B;">      遇到一个非有效数字字符，则停止查找，并 parseInt(之前符合的字符串)  parseInt(&#39;12px&#39;) -&gt; 12</span></span>
<span class="line"><span style="color:#7B7F8B;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(val,radix) </span><span style="color:#6F42C1;">parseFloat</span><span style="color:#24292E;">(val)</span></span>
<span class="line"><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) 和 </span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NaN</span></span>
<span class="line"><span style="color:#6A737D;">/*  规则：val 必须是字符串，不是则自动转为字符串；</span></span>
<span class="line"><span style="color:#6A737D;">      然后再 从左往右 找符合 radix（进制）有效数字，一个没找到则返回 NaN，</span></span>
<span class="line"><span style="color:#6A737D;">      遇到一个非有效数字字符，则停止查找，并 parseInt(之前符合的字符串)  parseInt(&#39;12px&#39;) -&gt; 12</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><p><img src="https://zerdocs.oss-cn-shanghai.aliyuncs.com/febasis/2023-03-04-22-31-38.png" alt="2023-03-04-22-31-38"></p><h3 id="其他类型转为字符串" tabindex="-1">其他类型转为字符串 <a class="header-anchor" href="#其他类型转为字符串" aria-label="Permalink to &quot;其他类型转为字符串&quot;">​</a></h3><p>隐式转换：<code>String(val)</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">10</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 10（数字）  ++a / a++ 一定是数字运算</span></span>
<span class="line"><span style="color:#7B7F8B;">//+出现在左边，转换为数字    +&#39;10&#39;-&gt;10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;10&#39;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 10（数字）  ++a / a++ 一定是数字运算</span></span>
<span class="line"><span style="color:#6A737D;">//+出现在左边，转换为数字    +&#39;10&#39;-&gt;10</span></span></code></pre></div><p><img src="https://zerdocs.oss-cn-shanghai.aliyuncs.com/febasis/2023-03-04-22-57-17.png" alt="2023-03-04-22-57-17"></p><h3 id="其他类型转为布尔类型" tabindex="-1">其他类型转为布尔类型 <a class="header-anchor" href="#其他类型转为布尔类型" aria-label="Permalink to &quot;其他类型转为布尔类型&quot;">​</a></h3><p>除了falsy值： <code>0、-0、NaN、null、undefined、空串</code>，其余都是 <code>true</code></p><h2 id="相等与全等区别" tabindex="-1">相等与全等区别 <a class="header-anchor" href="#相等与全等区别" aria-label="Permalink to &quot;相等与全等区别&quot;">​</a></h2><blockquote><p>相等(==)：两边数据类型不同，会先进行类型转换，再进行比较</p></blockquote><ol><li><strong>对象与字符串</strong>：对象转字符串 <code>Symbol.toPrimitive -&gt; valueOf -&gt; toString</code>，再比较</li><li><code>null == undefined --&gt; true </code> ；null/undefined 与其他任何值都不相等</li><li><strong>对象与对象</strong>，比较的是内存地址是否相同</li><li><strong>NaN 与其他</strong>，NaN 不与任何值相等，<code>NaN == NaN --&gt; false</code></li><li><strong>除了以上情况</strong>，只要两边类型不一致，剩下的都是转为数字，再进行比较</li></ol><blockquote><p>全等(===)：两个操作数类型相同，值也需相同才返回 true</p></blockquote><p><strong>可用==的情况</strong>：使用时相当于 <code>obj.a === null || obj.a === undefined</code></p><ol><li>判断对象的属性是否存在 <code>obj.a == null</code></li><li>判断函数的参数是否存在 <code>arg == null</code></li></ol><details class="details custom-block"><summary>面试题</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//题1：</span></span>
<span class="line"><span style="color:#F6F6F4;">[] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span></span>
<span class="line"><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">[] </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//题2：</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#62E884;">if</span><span style="color:#F6F6F4;">(a </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.log(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">OK</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">//解法一：利用==会进行类型转换，对象转为数字会经历:</span></span>
<span class="line"><span style="color:#7B7F8B;">//Symbol.toPrimitive -&gt; valueOf -&gt; toString</span></span>
<span class="line"><span style="color:#F6F6F4;">var a = {</span></span>
<span class="line"><span style="color:#F6F6F4;">  i</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  [Symbol.toPrimitive](){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">++</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.i</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">//解法二：重写 toString</span></span>
<span class="line"><span style="color:#F6F6F4;">var a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">a.toString </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> a.shift</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//解法三： 数据劫持</span></span>
<span class="line"><span style="color:#F6F6F4;">var i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">defineProperty</span><span style="color:#F6F6F4;">(window, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">i</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//题1：</span></span>
<span class="line"><span style="color:#24292E;">[] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//题2：</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  console.log(</span><span style="color:#032F62;">&#39;OK&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//解法一：利用==会进行类型转换，对象转为数字会经历:</span></span>
<span class="line"><span style="color:#6A737D;">//Symbol.toPrimitive -&gt; valueOf -&gt; toString</span></span>
<span class="line"><span style="color:#24292E;">var a = {</span></span>
<span class="line"><span style="color:#24292E;">  i: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [Symbol.toPrimitive](){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.i</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//解法二：重写 toString</span></span>
<span class="line"><span style="color:#24292E;">var a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">a.toString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.shift</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//解法三： 数据劫持</span></span>
<span class="line"><span style="color:#24292E;">var i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(window, </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div></details><h2 id="怎么解决精度问题" tabindex="-1">怎么解决精度问题 <a class="header-anchor" href="#怎么解决精度问题" aria-label="Permalink to &quot;怎么解决精度问题&quot;">​</a></h2><blockquote><p><strong>根本原因</strong>：所有数据类型在计算机底层都是以<em>64位</em>二进制存储的，可能出现无限循环，超过 64 位部分被丢弃</p></blockquote><ol><li>将数字转为整数【扩大系数法】</li><li>第三方库：Math.js, decimal.js, big.js</li></ol><h2 id="var-let-const-区别" tabindex="-1">var/let/const 区别 <a class="header-anchor" href="#var-let-const-区别" aria-label="Permalink to &quot;var/let/const 区别&quot;">​</a></h2><table><thead><tr><th></th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>变量提升</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>块级作用域</td><td>没有</td><td>有</td><td>有</td></tr><tr><td>暂存性死区</td><td>没有</td><td>存在</td><td>存在</td></tr><tr><td>能否修改</td><td></td><td></td><td>变量的值不能修改</td></tr><tr><td>变量的值不能修改</td><td>允许</td><td>不允许</td><td>不允许</td></tr></tbody></table><blockquote><p>函数声明会覆盖其他的同名的变量声明。如果有多个函数声明，则是由最后的一个函数声明覆盖之前所有的声明。</p></blockquote><h3 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h3><ol><li><p>声明必须初始化</p></li><li><p>只读常量，变量的值不能修改</p><ul><li><p>简单类型 ：值就保存在变量指向的那个内存地址，等同于常量。</p></li><li><p>引用类型：变量指向的内存地址，保存的只是一个指向实际数据的指针；</p><p>const 只能保证指针固定，不能控制指向的数据结构。</p></li></ul></li></ol><h3 id="暂存性死区" tabindex="-1">暂存性死区 <a class="header-anchor" href="#暂存性死区" aria-label="Permalink to &quot;暂存性死区&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">暂存性死区</p><p>暂存性死区：使用 <code>let / const </code> 定义该变量之前的区域，</p><p>不能在声明前访问，作用域内被声明，不受外部影响</p><p>基于 let/const 变量声明，在词法解析阶段就已经明确了未来上下文中必定会有相关变量声明;</p><p>如果在声明前使用，则报错 <code>Uncaught ReferenceError</code></p></div><h2 id="this指向" tabindex="-1">this指向 <a class="header-anchor" href="#this指向" aria-label="Permalink to &quot;this指向&quot;">​</a></h2><ol><li>全局作用域中或者普通函数中指向全局对象window</li><li>立即执行函数必定指向window</li><li>构造函数中指向对象实例</li><li>事件绑定指向事件源对象</li><li>方法中谁调用就指向谁</li><li>定时器回调为普通函数指向window，箭头函数指向声明时所在外部作用域</li><li>forEach等回调函数默认指向<code>window</code>，指定第二个参数存在则指向第二个参数</li><li>严格模式指向<code>window</code>的变为<code>undefined</code></li></ol><h2 id="防抖与节流" tabindex="-1">防抖与节流 <a class="header-anchor" href="#防抖与节流" aria-label="Permalink to &quot;防抖与节流&quot;">​</a></h2><p>防抖：频繁触发某个事件时，在设定的时间内再次触发，会重新清除上一次定时器，重新开启定时器开始计时。</p><p>节流：频繁触发某个事件时，保证设定的时间内只会执行一次，只有等执行完才会打开节流阀执行下一个事件。</p><h3 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//实现原理：每次触发事件时，取消之前的定时器，重新计时</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">debounce</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">500</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(timer) </span><span style="color:#62E884;">clearTimeout</span><span style="color:#F6F6F4;">(timer) </span><span style="color:#7B7F8B;">//清除上一次</span></span>
<span class="line"><span style="color:#F6F6F4;">    timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">      func.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">,args)</span></span>
<span class="line"><span style="color:#F6F6F4;">    },delay)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//实现原理：每次触发事件时，取消之前的定时器，重新计时</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delay</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(timer) </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timer) </span><span style="color:#6A737D;">//清除上一次</span></span>
<span class="line"><span style="color:#24292E;">    timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,args)</span></span>
<span class="line"><span style="color:#24292E;">    },delay)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><details class="details custom-block"><summary>防抖拓展写法</summary><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">debounce</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">500</span><span style="color:#F6F6F4;">，immediate</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//参数判断处理</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> func </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">function</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">TypeError</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">func is not a funciton</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//debounce(func,true)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> delay </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">boolean</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">     immediate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> delay</span></span>
<span class="line"><span style="color:#F6F6F4;">     delay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">isNaN</span><span style="color:#F6F6F4;">(delay </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">delay) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">500</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> delay	</span><span style="color:#7B7F8B;">//若不是数字则默认 500</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> immediate </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">boolean</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) immediate </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//第一次自执行完，timer 已经有值，</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> now </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">timer </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> immediate</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(timer) </span><span style="color:#62E884;">clearTimeout</span><span style="color:#F6F6F4;">(timer) </span><span style="color:#7B7F8B;">//清除上一次</span></span>
<span class="line"><span style="color:#F6F6F4;">    timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//结束边界触发</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">immediate) func.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">,args)</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//清除最后一个定时器</span></span>
<span class="line"><span style="color:#F6F6F4;">      timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">clearTimeout</span><span style="color:#F6F6F4;">(timer)</span></span>
<span class="line"><span style="color:#F6F6F4;">    },delay)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//若为立即执行，则第一次，开启边界触发</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(now) func.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">,args)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delay</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">，immediate</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//参数判断处理</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> func </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TypeError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;func is not a funciton&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//debounce(func,true)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> delay </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;boolean&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">     immediate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> delay</span></span>
<span class="line"><span style="color:#24292E;">     delay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(delay </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">delay) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> delay	</span><span style="color:#6A737D;">//若不是数字则默认 500</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> immediate </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;boolean&#39;</span><span style="color:#24292E;">) immediate </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//第一次自执行完，timer 已经有值，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">timer </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> immediate</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(timer) </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timer) </span><span style="color:#6A737D;">//清除上一次</span></span>
<span class="line"><span style="color:#24292E;">    timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//结束边界触发</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">immediate) func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,args)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//清除最后一个定时器</span></span>
<span class="line"><span style="color:#24292E;">      timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timer)</span></span>
<span class="line"><span style="color:#24292E;">    },delay)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//若为立即执行，则第一次，开启边界触发</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(now) func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,args)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></details><h3 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//实现原理：每次触发事件时，判断当前是否存在等待执行的延时函数</span></span>
<span class="line"><span style="color:#7B7F8B;">//方法一:定时器存在则什么都不做</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">throttle</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(timer) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(()</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">      func.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">,</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">args)</span></span>
<span class="line"><span style="color:#F6F6F4;">      timer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span></span>
<span class="line"><span style="color:#F6F6F4;">    }, delay)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">//方法二:</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">throttle</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> flag </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//节流阀：开启状态</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">flag) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    flag </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//已经在处理：关闭</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">      func.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">,args)</span></span>
<span class="line"><span style="color:#F6F6F4;">      flag </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//处理完：重新打开</span></span>
<span class="line"><span style="color:#F6F6F4;">    },delay)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#7B7F8B;">//实现三：当前时间-上次执行时间 &gt; 设定时间，才执行</span></span>
<span class="line"><span style="color:#F6F6F4;">funtion </span><span style="color:#62E884;">throttle</span><span style="color:#F6F6F4;">(func,delay){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> now </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Data.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(now </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> start </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> delay){</span></span>
<span class="line"><span style="color:#F6F6F4;">       func.</span><span style="color:#62E884;">apply</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">,args)</span></span>
<span class="line"><span style="color:#F6F6F4;">   		 start </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> now</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//实现原理：每次触发事件时，判断当前是否存在等待执行的延时函数</span></span>
<span class="line"><span style="color:#6A737D;">//方法一:定时器存在则什么都不做</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delay</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(timer) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args)</span></span>
<span class="line"><span style="color:#24292E;">      timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    }, delay)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//方法二:</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delay</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//节流阀：开启状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">flag) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//已经在处理：关闭</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">      func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,args)</span></span>
<span class="line"><span style="color:#24292E;">      flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//处理完：重新打开</span></span>
<span class="line"><span style="color:#24292E;">    },delay)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">//实现三：当前时间-上次执行时间 &gt; 设定时间，才执行</span></span>
<span class="line"><span style="color:#24292E;">funtion </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(func,delay){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> now </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Data.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(now </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> delay){</span></span>
<span class="line"><span style="color:#24292E;">       func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,args)</span></span>
<span class="line"><span style="color:#24292E;">   		 start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> now</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">应用</p><p>​ 防抖：输入框搜索、编辑框实时保存，（手机息屏策略，王者荣耀回城操作）</p><p>​ 节流：滚动到底部加载更多、图标跟随鼠标（地铁发车时间，王者荣耀技能冷却）</p></div><h2 id="前端本地存储方式" tabindex="-1">前端本地存储方式 <a class="header-anchor" href="#前端本地存储方式" aria-label="Permalink to &quot;前端本地存储方式&quot;">​</a></h2><h4 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h4><table><thead><tr><th></th><th>存储大小</th><th>存储时间</th><th>同源策略</th><th>在同一浏览器的相同域名、不同端口号下</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer">localStorage</a></td><td>5M</td><td>键值对以字符串形式存储，数据长期保留，不主动删除一直存在</td><td>受限制</td><td>不可以共享</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer">sessionStorage</a></td><td>5M</td><td>会话结束自动清除（浏览器窗口关闭时）</td><td>协议隔离</td><td>跳转的页面可以共享</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank" rel="noreferrer">cookie</a></td><td>4kb</td><td>设置到期时间，过期清除</td><td>受限制</td><td>可以共享</td></tr></tbody></table><h3 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h3><p><strong>localStorage</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">localStorage.</span><span style="color:#62E884;">setItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">value</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);   </span><span style="color:#7B7F8B;">//添加数据</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> localStorage.</span><span style="color:#62E884;">getItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">//读取数据</span></span>
<span class="line"><span style="color:#F6F6F4;">localStorage.</span><span style="color:#62E884;">removeItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);         </span><span style="color:#7B7F8B;">//移除单个</span></span>
<span class="line"><span style="color:#F6F6F4;">localStorage.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();                   </span><span style="color:#7B7F8B;">//移除所有</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">);   </span><span style="color:#6A737D;">//添加数据</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//读取数据</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">removeItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">);         </span><span style="color:#6A737D;">//移除单个</span></span>
<span class="line"><span style="color:#24292E;">localStorage.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();                   </span><span style="color:#6A737D;">//移除所有</span></span></code></pre></div><p><strong>sessionStorage</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">sessionStorage.</span><span style="color:#62E884;">setItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">value</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">// 保存数据到 sessionStorage</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sessionStorage.</span><span style="color:#62E884;">getItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span><span style="color:#7B7F8B;">//获取数据</span></span>
<span class="line"><span style="color:#F6F6F4;">sessionStorage.</span><span style="color:#62E884;">removeItem</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);        </span><span style="color:#7B7F8B;">//删除</span></span>
<span class="line"><span style="color:#F6F6F4;">sessionStorage.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();                  </span><span style="color:#7B7F8B;">//删除所有</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sessionStorage.</span><span style="color:#6F42C1;">setItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 保存数据到 sessionStorage</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sessionStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//获取数据</span></span>
<span class="line"><span style="color:#24292E;">sessionStorage.</span><span style="color:#6F42C1;">removeItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">);        </span><span style="color:#6A737D;">//删除</span></span>
<span class="line"><span style="color:#24292E;">sessionStorage.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();                  </span><span style="color:#6A737D;">//删除所有</span></span></code></pre></div><p><strong>cookie</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> cookies </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> document.cookie           </span><span style="color:#7B7F8B;">//同源下获取所有cookie</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">key=value</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">           </span><span style="color:#7B7F8B;">//添加</span></span>
<span class="line"><span style="color:#F6F6F4;">document.cookie </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">key=; expires=xxx</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">; 	</span><span style="color:#7B7F8B;">//设定到期时间自动清除</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cookies </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.cookie           </span><span style="color:#6A737D;">//同源下获取所有cookie</span></span>
<span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;key=value&#39;</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">//添加</span></span>
<span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;key=; expires=xxx&quot;</span><span style="color:#24292E;">; 	</span><span style="color:#6A737D;">//设定到期时间自动清除</span></span></code></pre></div><p><a href="https://zhuanlan.zhihu.com/p/95076534" target="_blank" rel="noreferrer"><strong>IndexedDB</strong></a></p><h2 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;Generator&quot;">​</a></h2><p>一是，<code>function</code>关键字与函数名之间有一个星号；</p><p>二是，函数体内部使用<code>yield</code>表达式，定义不同的内部状态。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function*</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helloWorldGenerator</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) </span><span style="color:#7B7F8B;">//123</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(b) </span><span style="color:#7B7F8B;">//undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">ending</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> hw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">helloWorldGenerator</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">hw.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">hw.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">//a = 123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helloWorldGenerator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a) </span><span style="color:#6A737D;">//123</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;world&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b) </span><span style="color:#6A737D;">//undefined</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ending&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">helloWorldGenerator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">hw.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">123</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">//a = 123</span></span></code></pre></div><p><code>nex()</code>传参会赋值给上一次<code>yield</code>的的返回值</p><h3 id="异步流程同步化" tabindex="-1">异步流程同步化 <a class="header-anchor" href="#异步流程同步化" aria-label="Permalink to &quot;异步流程同步化&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function*</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">test</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> res1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">第一秒执行</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(res1) </span><span style="color:#7B7F8B;">//第一秒执行</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> res2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">第二秒执行</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span><span style="color:#BF9EEE;">1000</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">generatorRunner</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> generator </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fn</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> step </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> generator.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//定义递归函数</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">stepArg</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">generator</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//获取本次 yield 右侧的结果</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> stepArg.value</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(value </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//如果是 Promise 对象就在 then 函数的回调中获取本次程序结果</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">//并且等待回调执行的时候进入下一次递归</span></span>
<span class="line"><span style="color:#F6F6F4;">      value.</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">((</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">promiseValue</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">stepArg.done){</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(generator.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">(promiseValue),generator)</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }else{</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#7B7F8B;">//判断程序没有执行完就将本次结果传入下一步进入下一次递归</span></span>
<span class="line"><span style="color:#F6F6F4;">  		</span><span style="color:#62E884;">if</span><span style="color:#F6F6F4;">(!stepArg.done) </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(generator.next(stepArg.value),generator)</span></span>
<span class="line"><span style="color:#F6F6F4;"> 	}</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">loop</span><span style="color:#F6F6F4;">(step,generator)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;第一秒执行&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    },</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res1) </span><span style="color:#6A737D;">//第一秒执行</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;第二秒执行&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    },</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generatorRunner</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> generator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> step </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> generator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//定义递归函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loop</span><span style="color:#24292E;">(</span><span style="color:#E36209;">stepArg</span><span style="color:#24292E;">,</span><span style="color:#E36209;">generator</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//获取本次 yield 右侧的结果</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stepArg.value</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(value </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//如果是 Promise 对象就在 then 函数的回调中获取本次程序结果</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//并且等待回调执行的时候进入下一次递归</span></span>
<span class="line"><span style="color:#24292E;">      value.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">promiseValue</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">stepArg.done){</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">loop</span><span style="color:#24292E;">(generator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">(promiseValue),generator)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }else{</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">//判断程序没有执行完就将本次结果传入下一步进入下一次递归</span></span>
<span class="line"><span style="color:#24292E;">  		</span><span style="color:#6F42C1;">if</span><span style="color:#24292E;">(!stepArg.done) </span><span style="color:#6F42C1;">loop</span><span style="color:#24292E;">(generator.next(stepArg.value),generator)</span></span>
<span class="line"><span style="color:#24292E;"> 	}</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">loop</span><span style="color:#24292E;">(step,generator)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="requestanimationframe" tabindex="-1">requestAnimationFrame <a class="header-anchor" href="#requestanimationframe" aria-label="Permalink to &quot;requestAnimationFrame&quot;">​</a></h2><p>60HZ/1000ms = 16.67ms(显示屏每毫秒刷新频率)</p><p><strong>起因</strong>：setTimeout/setInterval是异步 API，设置的时间间隔没办法保证。</p><p><strong>解决</strong>：为了设置更精确动画时间间隔、达到平滑动画效果。用法类似 <code>setTimeout</code> API， 本质采用的是系统时间间隔，而不是 JS 执行时间间隔。</p><p>希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。 该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p><strong>用法</strong>： <img src="https://zerdocs.oss-cn-shanghai.aliyuncs.com/febasis/2023-03-02-15-53-32.png" alt="2023-03-02-15-53-32"></p><h2 id="浅拷贝和深拷贝" tabindex="-1">浅拷贝和深拷贝 <a class="header-anchor" href="#浅拷贝和深拷贝" aria-label="Permalink to &quot;浅拷贝和深拷贝&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">解释</p><p>浅拷贝：只拷贝一层，属性为对象时只复制值，不复制对象本身，指向同一对象 深拷贝：完全拷贝一份新的，新对象更改不会影响到旧对象</p></div><p>浅拷贝</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Object.</span><span style="color:#62E884;">assign</span><span style="color:#F6F6F4;">({},obj) </span><span style="color:#7B7F8B;">//只拷贝对象自身的可枚举的属性</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">obj]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//数组</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Array</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">Array</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  {</span></span>
<span class="line"><span style="color:#F6F6F4;">    name</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">zhan</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    age</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">23</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">456</span></span>
<span class="line"><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newArr1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">slice</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newArr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">concat</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#7B7F8B;">//改变内部的引用类型两者都会有影响</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">({},obj) </span><span style="color:#6A737D;">//只拷贝对象自身的可枚举的属性</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">obj]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//数组</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    name:</span><span style="color:#032F62;">&#39;zhan&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    age:</span><span style="color:#005CC5;">23</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">456</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">//改变内部的引用类型两者都会有影响</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//方式一：</span></span>
<span class="line"><span style="color:#7B7F8B;">//会忽略undefined,function，RegExp,Date</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">JSON</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">stringify</span><span style="color:#F6F6F4;">(obj))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//方式二：</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">deepClone</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(obj </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">!==</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">object</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> obj</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(obj.constructor </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> Date) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">(obj); </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(obj.constructor </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> RegExp) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RegExp</span><span style="color:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newObj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Array.</span><span style="color:#62E884;">isArray</span><span style="color:#F6F6F4;">(obj) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> [] </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> obj){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(obj.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(key)) newObj[key] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">deepClone</span><span style="color:#F6F6F4;">(obj[key])</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> newObj</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方式一：</span></span>
<span class="line"><span style="color:#6A737D;">//会忽略undefined,function，RegExp,Date</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(obj))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//方式二：</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> Date) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">(obj); </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> RegExp) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegExp</span><span style="color:#24292E;">(obj);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newObj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(obj) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> [] </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> obj){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(obj.</span><span style="color:#6F42C1;">hasOwnProperty</span><span style="color:#24292E;">(key)) newObj[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">deepClone</span><span style="color:#24292E;">(obj[key])</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> newObj</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="事件捕获和冒泡机制" tabindex="-1">事件捕获和冒泡机制 <a class="header-anchor" href="#事件捕获和冒泡机制" aria-label="Permalink to &quot;事件捕获和冒泡机制&quot;">​</a></h2><p><strong>事件传播过程</strong>：事件捕获 ---&gt; 目标阶段---&gt; 事件冒泡</p><p><strong>事件捕获</strong>：从根元素(html)向内传播，直到目标元素，途中会触发绑定事件捕获元素的回调。<code>element.addEventListener(event, function, true)</code>。</p><p><strong>事件冒泡</strong>：从目标元素向外传播，直到根元素，途中会触发绑定事件冒泡元素的回调。<code>onclick</code>、<code>addEventListener</code>默认绑定冒泡阶段。</p><p><img src="https://zerdocs.oss-cn-shanghai.aliyuncs.com/interview/202303191147836.png" alt=""></p><p>阻止冒泡：<code>event.stopPropagation()</code></p><p>阻止默认行为：<code>event.preventDefault()</code>,例如：a标签跳转，表单按钮数据提交至服务器。</p><p>阻止同一节点其他后绑定事件执行：<code>event.stopImmediatePropagation()</code></p><h2 id="promise链式调用" tabindex="-1">Promise链式调用 <a class="header-anchor" href="#promise链式调用" aria-label="Permalink to &quot;Promise链式调用&quot;">​</a></h2><p>是指在一个Promise对象上多次调用then方法，每个then方法都可以接收上一个Promise对象的返回值，</p><p>并返回一个新的Promise对象，从而形成一个Promise链 ，从而实现多个异步操作的顺序执行和数据传递。</p><p>如果then方法中抛出了异常，那么后续的then方法会被跳过，直接执行catch方法。</p><p>如果then方法中返回了一个Promise对象，那么后续的then方法会等待该Promise对象的状态发生改变后再执行。</p><p>可以避免回调地狱，使得代码更加清晰易读。</p>`,93),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
