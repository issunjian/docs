import{_ as n,o as s,c as a,V as e}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/nginx/nginx-03.md","filePath":"interview/backend/nginx/nginx-03.md"}'),l={name:"interview/backend/nginx/nginx-03.md"},o=e(`<h3 id="_1、漏桶流算法和令牌桶算法知道-漏桶算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1%E6%BC%8F%E6%A1%B6%E6%B5%81%E7%AE%97%E6%B3%95%E5%92%8C%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95%E7%9F%A5%E9%81%93%E6%BC%8F%E6%A1%B6%E7%AE%97%E6%B3%95#" target="_blank" rel="noreferrer">1、漏桶流算法和令牌桶算法知道，漏桶算法#</a> <a class="header-anchor" href="#_1、漏桶流算法和令牌桶算法知道-漏桶算法" aria-label="Permalink to &quot;[1、漏桶流算法和令牌桶算法知道，漏桶算法#](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#1漏桶流算法和令牌桶算法知道漏桶算法#)&quot;">​</a></h3><p>漏桶算法是网络世界中流量整形或速率限制时经常使用的一种算法，它的主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。漏桶算法提供了一种机制，通过它，突发流量可以被整形以便为网络提供一个稳定的流量。也就是我们刚才所讲的情况。漏桶算法提供的机制实际上就是刚才的案例：<strong>突发流量会进入到一个漏桶，漏桶会按照我们定义的速率依次处理请求，如果水流过大也就是突发流量过大就会直接溢出，则多余的请求会被拒绝。所以漏桶算法能控制数据的传输速率。</strong></p><h3 id="_2、限制并发连接数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E9%99%90%E5%88%B6%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5%E6%95%B0" target="_blank" rel="noreferrer">2、限制并发连接数</a> <a class="header-anchor" href="#_2、限制并发连接数" aria-label="Permalink to &quot;[2、限制并发连接数](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#2限制并发连接数)&quot;">​</a></h3><p>Nginx中的ngx_http_limit_conn_module模块提供了限制并发连接数的功能，可以使用limit_conn_zone指令以及limit_conn执行进行配置。接下来我们可以通过一个简单的例子来看下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">http {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">     limit_conn_zone $binary_remote_addr zone=myip:10m;</span></span>
<span class="line"><span style="color:#f6f6f4;">     limit_conn_zone $server_name zone=myServerName:10m;</span></span>
<span class="line"><span style="color:#f6f6f4;"> }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"> server {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">     location / {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">         limit_conn myip 10;</span></span>
<span class="line"><span style="color:#f6f6f4;">         limit_conn myServerName 100;</span></span>
<span class="line"><span style="color:#f6f6f4;">         rewrite / http://www.lijie.net permanent;</span></span>
<span class="line"><span style="color:#f6f6f4;">     }</span></span>
<span class="line"><span style="color:#f6f6f4;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">http {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">     limit_conn_zone $binary_remote_addr zone=myip:10m;</span></span>
<span class="line"><span style="color:#24292e;">     limit_conn_zone $server_name zone=myServerName:10m;</span></span>
<span class="line"><span style="color:#24292e;"> }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> server {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">     location / {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">         limit_conn myip 10;</span></span>
<span class="line"><span style="color:#24292e;">         limit_conn myServerName 100;</span></span>
<span class="line"><span style="color:#24292e;">         rewrite / http://www.lijie.net permanent;</span></span>
<span class="line"><span style="color:#24292e;">     }</span></span>
<span class="line"><span style="color:#24292e;"> }</span></span></code></pre></div><p>上面配置了单个IP同时并发连接数最多只能10个连接，并且设置了整个虚拟服务器同时最大并发数最多只能100个链接。当然，只有当请求的header被服务器处理后，虚拟服务器的连接数才会计数。刚才有提到过Nginx是基于漏桶算法原理实现的，实际上限流一般都是基于漏桶算法和令牌桶算法实现的。接下来我们来看看两个算法的介绍：</p><h3 id="_3、fastcgi-与-cgi-的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3fastcgi-%E4%B8%8E-cgi-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、fastcgi 与 cgi 的区别？</a> <a class="header-anchor" href="#_3、fastcgi-与-cgi-的区别" aria-label="Permalink to &quot;[3、fastcgi 与 cgi 的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#3fastcgi-与-cgi-的区别)&quot;">​</a></h3><p><strong>cgi</strong></p><p><strong>1、</strong> web 服务器会根据请求的内容，然后会 fork 一个新进程来运行外部 c 程序（或 perl 脚本…）， 这个进程会把处理完的数据返回给 web 服务器，最后 web 服务器把内容发送给用户，刚才 fork 的进程也随之退出。</p><p><strong>2、</strong> 如果下次用户还请求改动态脚本，那么 web 服务器又再次 fork 一个新进程，周而复始的进行。</p><p><strong>fastcgi</strong></p><p>web 服务器收到一个请求时，他不会重新 fork 一个进程（因为这个进程在 web 服务器启动时就开启了，而且不会退出），web 服务器直接把内容传递给这个进程（进程间通信，但 fastcgi 使用了别的方式，tcp 方式通信），这个进程收到请求后进行处理，把结果返回给 web 服务器，最后自己接着等待下一个请求的到来，而不是退出。</p><p>综上，差别在于是否重复 fork 进程，处理请求。</p><h3 id="_4、请解释一下什么是-nginx" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF-nginx" target="_blank" rel="noreferrer">4、请解释一下什么是 Nginx?</a> <a class="header-anchor" href="#_4、请解释一下什么是-nginx" aria-label="Permalink to &quot;[4、请解释一下什么是 Nginx?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#4请解释一下什么是-nginx)&quot;">​</a></h3><p>Nginx 是一个 web 服务器和反向代理服务器，用于 HTTP、HTTPS、SMTP、POP3</p><p>和 IMAP 协议。</p><h3 id="_5、nginx目录结构有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5nginx%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">5、Nginx目录结构有哪些？</a> <a class="header-anchor" href="#_5、nginx目录结构有哪些" aria-label="Permalink to &quot;[5、Nginx目录结构有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#5nginx目录结构有哪些)&quot;">​</a></h3><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[root@localhost ~]# tree /usr/local/nginx</span></span>
<span class="line"><span style="color:#f6f6f4;">/usr/local/nginx</span></span>
<span class="line"><span style="color:#f6f6f4;">├── client_body_temp</span></span>
<span class="line"><span style="color:#f6f6f4;">├── conf                             # Nginx所有配置文件的目录</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── fastcgi.conf                 # fastcgi相关参数的配置文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── fastcgi.conf.default         # fastcgi.conf的原始备份文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── fastcgi_params               # fastcgi的参数文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── fastcgi_params.default       </span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── koi-utf</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── koi-win</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── mime.types                   # 媒体类型</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── mime.types.default</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── nginx.conf                   # Nginx主配置文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── nginx.conf.default</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── scgi_params                  # scgi相关参数文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── scgi_params.default  </span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── uwsgi_params                 # uwsgi相关参数文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── uwsgi_params.default</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── win-utf</span></span>
<span class="line"><span style="color:#f6f6f4;">├── fastcgi_temp                     # fastcgi临时数据目录</span></span>
<span class="line"><span style="color:#f6f6f4;">├── html                             # Nginx默认站点目录</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── 50x.html                     # 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── index.html                   # 默认的首页文件</span></span>
<span class="line"><span style="color:#f6f6f4;">├── logs                             # Nginx日志目录</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── access.log                   # 访问日志文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   ├── error.log                    # 错误日志文件</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── nginx.pid                    # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件</span></span>
<span class="line"><span style="color:#f6f6f4;">├── proxy_temp                       # 临时目录</span></span>
<span class="line"><span style="color:#f6f6f4;">├── sbin                             # Nginx命令目录</span></span>
<span class="line"><span style="color:#f6f6f4;">│   └── nginx                        # Nginx的启动命令</span></span>
<span class="line"><span style="color:#f6f6f4;">├── scgi_temp                        # 临时目录</span></span>
<span class="line"><span style="color:#f6f6f4;">└── uwsgi_temp                       # 临时目录</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[root@localhost ~]# tree /usr/local/nginx</span></span>
<span class="line"><span style="color:#24292e;">/usr/local/nginx</span></span>
<span class="line"><span style="color:#24292e;">├── client_body_temp</span></span>
<span class="line"><span style="color:#24292e;">├── conf                             # Nginx所有配置文件的目录</span></span>
<span class="line"><span style="color:#24292e;">│   ├── fastcgi.conf                 # fastcgi相关参数的配置文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── fastcgi.conf.default         # fastcgi.conf的原始备份文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── fastcgi_params               # fastcgi的参数文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── fastcgi_params.default       </span></span>
<span class="line"><span style="color:#24292e;">│   ├── koi-utf</span></span>
<span class="line"><span style="color:#24292e;">│   ├── koi-win</span></span>
<span class="line"><span style="color:#24292e;">│   ├── mime.types                   # 媒体类型</span></span>
<span class="line"><span style="color:#24292e;">│   ├── mime.types.default</span></span>
<span class="line"><span style="color:#24292e;">│   ├── nginx.conf                   # Nginx主配置文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── nginx.conf.default</span></span>
<span class="line"><span style="color:#24292e;">│   ├── scgi_params                  # scgi相关参数文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── scgi_params.default  </span></span>
<span class="line"><span style="color:#24292e;">│   ├── uwsgi_params                 # uwsgi相关参数文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── uwsgi_params.default</span></span>
<span class="line"><span style="color:#24292e;">│   └── win-utf</span></span>
<span class="line"><span style="color:#24292e;">├── fastcgi_temp                     # fastcgi临时数据目录</span></span>
<span class="line"><span style="color:#24292e;">├── html                             # Nginx默认站点目录</span></span>
<span class="line"><span style="color:#24292e;">│   ├── 50x.html                     # 错误页面优雅替代显示文件，例如当出现502错误时会调用此页面</span></span>
<span class="line"><span style="color:#24292e;">│   └── index.html                   # 默认的首页文件</span></span>
<span class="line"><span style="color:#24292e;">├── logs                             # Nginx日志目录</span></span>
<span class="line"><span style="color:#24292e;">│   ├── access.log                   # 访问日志文件</span></span>
<span class="line"><span style="color:#24292e;">│   ├── error.log                    # 错误日志文件</span></span>
<span class="line"><span style="color:#24292e;">│   └── nginx.pid                    # pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件</span></span>
<span class="line"><span style="color:#24292e;">├── proxy_temp                       # 临时目录</span></span>
<span class="line"><span style="color:#24292e;">├── sbin                             # Nginx命令目录</span></span>
<span class="line"><span style="color:#24292e;">│   └── nginx                        # Nginx的启动命令</span></span>
<span class="line"><span style="color:#24292e;">├── scgi_temp                        # 临时目录</span></span>
<span class="line"><span style="color:#24292e;">└── uwsgi_temp                       # 临时目录</span></span></code></pre></div><h3 id="_6、请解释你如何通过不同于-80-的端口开启-nginx" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E8%AF%B7%E8%A7%A3%E9%87%8A%E4%BD%A0%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E4%B8%8D%E5%90%8C%E4%BA%8E-80-%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%BC%80%E5%90%AF-nginx" target="_blank" rel="noreferrer">6、请解释你如何通过不同于 80 的端口开启 Nginx?</a> <a class="header-anchor" href="#_6、请解释你如何通过不同于-80-的端口开启-nginx" aria-label="Permalink to &quot;[6、请解释你如何通过不同于 80 的端口开启 Nginx?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#6请解释你如何通过不同于-80-的端口开启-nginx)&quot;">​</a></h3><p>为了通过一个不同的端口开启 Nginx，你必须进入/etc/Nginx/sites</p><p>enabled/，如果这是默认文件，那么你必须打开名为“default”的文件。编辑</p><p>文件，并放置在你想要的端口：</p><p><strong>Like server { listen 81; }</strong></p><h3 id="_7、解释如何在-nginx-中获得当前的时间" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7%E8%A7%A3%E9%87%8A%E5%A6%82%E4%BD%95%E5%9C%A8-nginx-%E4%B8%AD%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8D%E7%9A%84%E6%97%B6%E9%97%B4" target="_blank" rel="noreferrer">7、解释如何在 Nginx 中获得当前的时间?</a> <a class="header-anchor" href="#_7、解释如何在-nginx-中获得当前的时间" aria-label="Permalink to &quot;[7、解释如何在 Nginx 中获得当前的时间?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#7解释如何在-nginx-中获得当前的时间)&quot;">​</a></h3><p>要获得 Nginx 的当前时间，必须使用 SSI 模块、$$date_gmt 和$$date_local 的变</p><p>量。</p><p>Proxy_set_header THE-TIME $date_gmt;</p><h3 id="_8、使用-反向代理服务器的优点是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8%E4%BD%BF%E7%94%A8%E2%80%9C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BC%98%E7%82%B9%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、使用“反向代理服务器的优点是什么?</a> <a class="header-anchor" href="#_8、使用-反向代理服务器的优点是什么" aria-label="Permalink to &quot;[8、使用“反向代理服务器的优点是什么?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#8使用“反向代理服务器的优点是什么)&quot;">​</a></h3><p>反向代理服务器可以隐藏源服务器的存在和特征。它充当互联网云和web服务器之间的中间层。这对于安全方面来说是很好的，特别是当您使用web托管服务时。</p><h3 id="_9、请解释-nginx-如何处理-http-请求" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E8%AF%B7%E8%A7%A3%E9%87%8A-nginx-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86-http-%E8%AF%B7%E6%B1%82" target="_blank" rel="noreferrer">9、请解释 Nginx 如何处理 HTTP 请求？</a> <a class="header-anchor" href="#_9、请解释-nginx-如何处理-http-请求" aria-label="Permalink to &quot;[9、请解释 Nginx 如何处理 HTTP 请求？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#9请解释-nginx-如何处理-http-请求)&quot;">​</a></h3><p><strong>1、</strong> 首先，Nginx 在启动时，会解析配置文件，得到需要监听的端口与 IP 地址，然后在 Nginx 的 Master 进程里面先初始化好这个监控的Socket(创建 S ocket，设置 addr、reuse 等选项，绑定到指定的 ip 地址端口，再 listen 监听)。</p><p><strong>2、</strong> 然后，再 fork(一个现有进程可以调用 fork 函数创建一个新进程。由 fork 创建的新进程被称为子进程 )出多个子进程出来。</p><p><strong>3、</strong> 之后，子进程会竞争 accept 新的连接。此时，客户端就可以向 nginx 发起连接了。当客户端与nginx进行三次握手，与 nginx 建立好一个连接后。此时，某一个子进程会 accept 成功，得到这个建立好的连接的 Socket ，然后创建 nginx 对连接的封装，即 ngx_connection_t 结构体。</p><p><strong>4、</strong> 接着，设置读写事件处理函数，并添加读写事件来与客户端进行数据的交换。</p><h3 id="_10、fair-第三方插件" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10fair%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6" target="_blank" rel="noreferrer">10、fair(第三方插件)</a> <a class="header-anchor" href="#_10、fair-第三方插件" aria-label="Permalink to &quot;[10、fair(第三方插件)](https://gitee.com/souyunku/DevBooks/blob/master/docs/Nginx/Nginx最新2021年面试题附答案解析，大汇总.md#10fair第三方插件)&quot;">​</a></h3><p>必须安装upstream_fair模块。</p><p>对比 weight、ip_hash更加智能的负载均衡算法，fair算法可以根据页面大小和加载时间长短智能地进行负载均衡，响应时间短的优先分配。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">upstream backserver {</span></span>
<span class="line"><span style="color:#f6f6f4;"> server server1; </span></span>
<span class="line"><span style="color:#f6f6f4;"> server server2; </span></span>
<span class="line"><span style="color:#f6f6f4;"> fair; </span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">upstream backserver {</span></span>
<span class="line"><span style="color:#24292e;"> server server1; </span></span>
<span class="line"><span style="color:#24292e;"> server server2; </span></span>
<span class="line"><span style="color:#24292e;"> fair; </span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>哪个服务器的响应速度快，就将请求分配到那个服务器上。</p><h3 id="_11、如何用nginx解决前端跨域问题" tabindex="-1">11、如何用Nginx解决前端跨域问题？ <a class="header-anchor" href="#_11、如何用nginx解决前端跨域问题" aria-label="Permalink to &quot;11、如何用Nginx解决前端跨域问题？&quot;">​</a></h3><h3 id="_12、nginx虚拟主机怎么配置" tabindex="-1">12、Nginx虚拟主机怎么配置? <a class="header-anchor" href="#_12、nginx虚拟主机怎么配置" aria-label="Permalink to &quot;12、Nginx虚拟主机怎么配置?&quot;">​</a></h3><h3 id="_13、使用-反向代理服务器-的优点是什么" tabindex="-1">13、使用“反向代理服务器”的优点是什么? <a class="header-anchor" href="#_13、使用-反向代理服务器-的优点是什么" aria-label="Permalink to &quot;13、使用“反向代理服务器”的优点是什么?&quot;">​</a></h3><h3 id="_14、ip-hash-ip绑定" tabindex="-1">14、ip_hash( IP绑定) <a class="header-anchor" href="#_14、ip-hash-ip绑定" aria-label="Permalink to &quot;14、ip_hash( IP绑定)&quot;">​</a></h3><h3 id="_15、请解释-ngx-http-upstream-module-的作用是什么" tabindex="-1">15、请解释 ngx_http_upstream_module 的作用是什么? <a class="header-anchor" href="#_15、请解释-ngx-http-upstream-module-的作用是什么" aria-label="Permalink to &quot;15、请解释 ngx_http_upstream_module 的作用是什么?&quot;">​</a></h3><h3 id="_16、请列举nginx的一些特性" tabindex="-1">16、请列举Nginx的一些特性？ <a class="header-anchor" href="#_16、请列举nginx的一些特性" aria-label="Permalink to &quot;16、请列举Nginx的一些特性？&quot;">​</a></h3><h3 id="_17、基于虚拟主机配置域名" tabindex="-1">17、基于虚拟主机配置域名 <a class="header-anchor" href="#_17、基于虚拟主机配置域名" aria-label="Permalink to &quot;17、基于虚拟主机配置域名&quot;">​</a></h3><h3 id="_18、nginx配置文件nginx-conf有哪些属性模块" tabindex="-1">18、Nginx配置文件nginx.conf有哪些属性模块? <a class="header-anchor" href="#_18、nginx配置文件nginx-conf有哪些属性模块" aria-label="Permalink to &quot;18、Nginx配置文件nginx.conf有哪些属性模块?&quot;">​</a></h3><h3 id="_19、nginx怎么做的动静分离" tabindex="-1">19、Nginx怎么做的动静分离？ <a class="header-anchor" href="#_19、nginx怎么做的动静分离" aria-label="Permalink to &quot;19、Nginx怎么做的动静分离？&quot;">​</a></h3><h3 id="_20、nginx-有哪些优点" tabindex="-1">20、Nginx 有哪些优点？ <a class="header-anchor" href="#_20、nginx-有哪些优点" aria-label="Permalink to &quot;20、Nginx 有哪些优点？&quot;">​</a></h3><h3 id="_21、解释如何在-nginx-服务器上添加模块" tabindex="-1">21、解释如何在 Nginx 服务器上添加模块? <a class="header-anchor" href="#_21、解释如何在-nginx-服务器上添加模块" aria-label="Permalink to &quot;21、解释如何在 Nginx 服务器上添加模块?&quot;">​</a></h3><h3 id="_22、什么是c10k问题" tabindex="-1">22、什么是C10K问题? <a class="header-anchor" href="#_22、什么是c10k问题" aria-label="Permalink to &quot;22、什么是C10K问题?&quot;">​</a></h3><h3 id="_23、nginx-常用配置" tabindex="-1">23、Nginx 常用配置？ <a class="header-anchor" href="#_23、nginx-常用配置" aria-label="Permalink to &quot;23、Nginx 常用配置？&quot;">​</a></h3><h3 id="_24、location的作用是什么" tabindex="-1">24、location的作用是什么？ <a class="header-anchor" href="#_24、location的作用是什么" aria-label="Permalink to &quot;24、location的作用是什么？&quot;">​</a></h3><h3 id="_25、解释如何在nginx服务器上添加模块" tabindex="-1">25、解释如何在Nginx服务器上添加模块? <a class="header-anchor" href="#_25、解释如何在nginx服务器上添加模块" aria-label="Permalink to &quot;25、解释如何在Nginx服务器上添加模块?&quot;">​</a></h3><h3 id="_26、请列举-nginx-的一些特性。" tabindex="-1">26、请列举 Nginx 的一些特性。 <a class="header-anchor" href="#_26、请列举-nginx-的一些特性。" aria-label="Permalink to &quot;26、请列举 Nginx 的一些特性。&quot;">​</a></h3><h3 id="_27、为什么不使用多线程" tabindex="-1">27、为什么不使用多线程？ <a class="header-anchor" href="#_27、为什么不使用多线程" aria-label="Permalink to &quot;27、为什么不使用多线程？&quot;">​</a></h3><h3 id="_28、nginx-如何实现后端服务的健康检查" tabindex="-1">28、Nginx 如何实现后端服务的健康检查？ <a class="header-anchor" href="#_28、nginx-如何实现后端服务的健康检查" aria-label="Permalink to &quot;28、Nginx 如何实现后端服务的健康检查？&quot;">​</a></h3><h3 id="_29、rewrite全局变量是什么" tabindex="-1">29、Rewrite全局变量是什么？ <a class="header-anchor" href="#_29、rewrite全局变量是什么" aria-label="Permalink to &quot;29、Rewrite全局变量是什么？&quot;">​</a></h3><h3 id="_30、location的语法能说出来吗" tabindex="-1">30、location的语法能说出来吗？ <a class="header-anchor" href="#_30、location的语法能说出来吗" aria-label="Permalink to &quot;30、location的语法能说出来吗？&quot;">​</a></h3>`,59),p=[o];function i(t,r,c,g,f,E){return s(),a("div",null,p)}const x=n(l,[["render",i]]);export{d as __pageData,x as default};
