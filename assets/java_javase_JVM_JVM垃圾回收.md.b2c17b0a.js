import{_ as a,o as e,c as r,V as t}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/堆.12a6d3bf.png",f=JSON.parse('{"title":"虚拟机","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/JVM/JVM垃圾回收.md","filePath":"java/javase/JVM/JVM垃圾回收.md"}'),i={name:"java/javase/JVM/JVM垃圾回收.md"},n=t('<h1 id="虚拟机" tabindex="-1">虚拟机 <a class="header-anchor" href="#虚拟机" aria-label="Permalink to &quot;虚拟机&quot;">​</a></h1><hr><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><p>Java 的自动内存管理主要是针对对象内存的回收和对象内存的分配，堆区是垃圾收集器管理的主要区域。</p><p>开发者使用 System.gc() 方法可以提醒 JVM 进行垃圾回收，但不能强制。</p><h3 id="分区回收" tabindex="-1">分区回收 <a class="header-anchor" href="#分区回收" aria-label="Permalink to &quot;分区回收&quot;">​</a></h3><p>现在收集器基本都采用分代垃圾收集算法，所以 Java 堆还可以细分为：新生代和老年代。进一步划分的目的是更好地回收内存，或者更快地分配内存。</p><ul><li>新生代 GC (Minor GC) ：新生代垃圾回收非常频繁，回收速度也比较快。</li></ul><ul><li>老年代 GC (Major GC) ：老年代垃圾回收次数较少，回收速度也明显更慢。</li></ul><p><img src="'+o+'" alt=""></p><h3 id="初次分配对象" tabindex="-1">初次分配对象 <a class="header-anchor" href="#初次分配对象" aria-label="Permalink to &quot;初次分配对象&quot;">​</a></h3><p>新生代分为 eden 区和 survive 区， 其中 eden 区占用内存空间更大。</p><p>大多数情况下，对象在新生代 eden 区分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><h3 id="长期存活对象" tabindex="-1">长期存活对象 <a class="header-anchor" href="#长期存活对象" aria-label="Permalink to &quot;长期存活对象&quot;">​</a></h3><p>虚拟机给每个对象设置一个年龄计数器。如果对象经过一次 Minor GC 后仍然能够存活，将从 eden 移动到 survive 空间中。对象每熬过一次 Minor GC，年龄就增加 1 岁。当它的年龄增加到一定程度（默认为 15 岁），就会晋升到老年代。</p><p>survive 区分为 from 区和 to 区两块大小相等的内存空间。Minor GC 执行时，会将 eden 区和 from 区中的存活对象复制到 to 区，清除 eden 区和 from 区内存。再把这些存活对象从 to 区移动回 from 区。</p><p>当老年代也没有足够空间进行分配时，虚拟机将发起一次 Major GC。</p><h3 id="大对象" tabindex="-1">大对象 <a class="header-anchor" href="#大对象" aria-label="Permalink to &quot;大对象&quot;">​</a></h3><p>需要大量连续内存空间的对象（如字符串、数组）直接进入老年代，可以避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p>',19),s=[n];function l(d,h,c,p,_,u){return e(),r("div",null,s)}const v=a(i,[["render",l]]);export{f as __pageData,v as default};
