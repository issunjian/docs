import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/JavaScriptAdvanced.md","filePath":"frontend/js/JavaScriptAdvanced.md"}'),p={name:"frontend/js/JavaScriptAdvanced.md"},o=l(`<h2 id="javascript进阶" tabindex="-1">JavaScript进阶 <a class="header-anchor" href="#javascript进阶" aria-label="Permalink to &quot;JavaScript进阶&quot;">​</a></h2><h2 id="数字" tabindex="-1">数字 <a class="header-anchor" href="#数字" aria-label="Permalink to &quot;数字&quot;">​</a></h2><ul><li>Number(n: number)与new Number(n: number)分别创建了number与object类型变量（通常没有必要使用Number类型实例）</li><li>toString(radix: number)接受2、8、10、16（2到36），用于转换进制</li><li>toFixed(n: number)可以定义小数点后位数，用于转换格式</li><li>toPrecision()自动应用toFixed()或toExponential()（固定小数位数或科学计数法的系数）</li></ul><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><ul><li>必需参数使用参数列表，可选参数用对象封装</li><li>arguments.callee指向函数本身，可以避免递归调用与函数名耦合（当然其他语言中不存在这问题）</li><li>[function].caller指向调用函数的函数</li><li>this指向调用函数的对象</li><li>函数一定包括length（命名参数个数）与prototype属性</li><li>函数也支持toString方法，返回值是代码字符串（这种行为没有严格规定，不同环境可能不同）</li><li>用func.apply(this,[array])将接受多个参数的函数转换为接受数组</li></ul><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><ul><li>通过设置length，可以动态增长/缩减数组，超过length的项==undefined</li><li>访问array[n]，如果length&lt;n，数组长度自动扩展至n</li></ul><h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><p>this指向调用当前函数的对象，如果没有对象调用，那么this==window。在箭头函数中，this指向与环境中相同。bind、call、reply方法都可以修改this。</p><h3 id="绑定this" tabindex="-1">绑定this <a class="header-anchor" href="#绑定this" aria-label="Permalink to &quot;绑定this&quot;">​</a></h3><p>绑定this的4种方法，按优先级从低到高排序分别是默认绑定、隐式绑定、显式绑定、new绑定。其中apply()与call()属于显式绑定。</p><h4 id="默认绑定" tabindex="-1">默认绑定 <a class="header-anchor" href="#默认绑定" aria-label="Permalink to &quot;默认绑定&quot;">​</a></h4><p>全局环境中、函数独立调用时（即使被嵌套、包括立即执行函数），this指向window。有时候被嵌套的函数想获得上层函数的this，可以使用<code>var that = this</code>语句传递this值。</p><h4 id="隐式绑定-方法调用" tabindex="-1">隐式绑定/方法调用 <a class="header-anchor" href="#隐式绑定-方法调用" aria-label="Permalink to &quot;隐式绑定/方法调用&quot;">​</a></h4><p>this的值是调用该函数的对象。如a.b()中b内部的this指向a。只有直接调用<code>obj.func()</code>时才会传递this，否则this仍指向window。函数虽然可以属于一个对象，但函数不会与对象绑定this。</p><p>这些不能传递this的场景包括赋值、传参、内置函数（如setTimeout）、间接引用（对象的属性赋值时的立即执行函数，如<code>(p.foo = o.foo)()</code>，this为window）等。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> val</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">window</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">func</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.val)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{val</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">obj</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,func</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">func};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">func</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//window</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.</span><span style="color:#62E884;">func</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//赋值会丢失this</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> func1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> obj.func</span></span>
<span class="line"><span style="color:#62E884;">func1</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//作为参数传递也会丢失this</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">func2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">func</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">func2</span><span style="color:#F6F6F4;">(obj.func)</span><span style="color:#7B7F8B;">//window</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> val</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;window&#39;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.val)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{val:</span><span style="color:#032F62;">&#39;obj&#39;</span><span style="color:#24292E;">,func:func};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">func</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//window</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//赋值会丢失this</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> func1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> obj.func</span></span>
<span class="line"><span style="color:#6F42C1;">func1</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//作为参数传递也会丢失this</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">func</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">func2</span><span style="color:#24292E;">(obj.func)</span><span style="color:#6A737D;">//window</span></span></code></pre></div><h4 id="显示绑定" tabindex="-1">显示绑定 <a class="header-anchor" href="#显示绑定" aria-label="Permalink to &quot;显示绑定&quot;">​</a></h4><p>即使用call、apply、bind方法绑定this到对象上。JS还新增了许多内置函数提供thisValue选项，如数组的迭代方法map、forEach、filter、some、every。</p><h4 id="new绑定" tabindex="-1">new绑定 <a class="header-anchor" href="#new绑定" aria-label="Permalink to &quot;new绑定&quot;">​</a></h4><p>new的作用是从构造函数返回新对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">constructorA</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.a</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">constructorA</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">obj.a</span><span style="color:#7B7F8B;">//0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">constructorA</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.a</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">constructorA</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">obj.a</span><span style="color:#6A737D;">//0</span></span></code></pre></div><p>需要注意如果constructor没有返回值，那么构造的对象就是返回值。而其中的this永远指向obj，即新生成的对象，即使<code>let newObj = new obj.constructorA()</code>，this也会指向newObj，而不是obj。</p><h3 id="this与函数" tabindex="-1">this与函数 <a class="header-anchor" href="#this与函数" aria-label="Permalink to &quot;this与函数&quot;">​</a></h3><p>this的四种绑定方法其实也对应函数的四种调用方式，包括函数调用(func)、方法调用（obj.func）、间接调用（call、apply）、构造函数调用（new）。</p><h3 id="实现bind" tabindex="-1">实现bind <a class="header-anchor" href="#实现bind" aria-label="Permalink to &quot;实现bind&quot;">​</a></h3><p><code>Function.prototype.bind(thisArg[,arg1[,arg2[,...]]])</code></p><p>bind提供了两个功能，一个是传递this，另一个是传递参数（之后传参数会位于这些参数后面），它返回绑定后的函数。</p><p>首先，我们要传递this，需要通过方法调用来完成，bind的this是原函数，我们要怎么返回绑定好的函数呢？🤔</p><p>可以想到，我们先把函数绑定到那个环境上去，但这就是bind的功能啊。实际上，我们应该返回一个全新函数，而这个新函数的执行结果与原函数+thisArg一致。</p><p>那么先不考虑传递参数，只考虑this的情况。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myBind</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">thisValue</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  thisValue._func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> thisValue.</span><span style="color:#62E884;">_func</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">thisValue</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  thisValue._func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> thisValue.</span><span style="color:#6F42C1;">_func</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样我们就已经实现了bind最基本的功能——绑定this，但我们向thisValue添加了属性。其实我们只用保证结果正确，因此可以删除添加的属性，用临时变量替代。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myBind</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">thisValue</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getResult</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">thisValue</span><span style="color:#F6F6F4;">)</span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    thisValue._func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> func</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> thisValue.</span><span style="color:#62E884;">_func</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> thisValue._func</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getResult</span><span style="color:#F6F6F4;">(func,thisValue)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">thisValue</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">func</span><span style="color:#24292E;">,</span><span style="color:#E36209;">thisValue</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    thisValue._func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisValue.</span><span style="color:#6F42C1;">_func</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thisValue._func</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">(func,thisValue)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>细心的朋友不难看出，getResult和call、apply有着相似的功能，即返回绑定某个this值后的执行结果。也就是说，bind其实是基于call和apply实现的。但为了方便理解整个概念，我先介绍了bind。</p><h4 id="call和apply" tabindex="-1">call和apply <a class="header-anchor" href="#call和apply" aria-label="Permalink to &quot;call和apply&quot;">​</a></h4><p>明白了基本原理之后，我们来研究如何传入参数。首先，我们应该知道所有参数都可以在aruguments对象中找到，我们先看一下它的结构：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printArguments</span><span style="color:#F6F6F4;">(){</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">arguments</span><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">printArguments</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//[Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printArguments</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">printArguments</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//[Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3 }</span></span></code></pre></div><p>Arguments是一个特殊的对象，它不是数组，但具有数组的许多特征，这里把它当作数组。</p><p>先看<code>function.call(thisArg,arg1,arg2,...)</code>，我们需要把后面的参数传入函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myCall</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [thisValue,</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">parameters] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">arguments</span></span>
<span class="line"><span style="color:#F6F6F4;">  thisValue._func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> thisValue.</span><span style="color:#62E884;">_func</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">parameters)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> thisValue._func</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myCall</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [thisValue,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">parameters] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span></span>
<span class="line"><span style="color:#24292E;">  thisValue._func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisValue.</span><span style="color:#6F42C1;">_func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">parameters)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thisValue._func</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>再看看<code>function.apply(thisArg,[argsArray])</code>，我们转换一下参数形式就行。需要注意我们的argsArray不能为空，如果为空，parameters为undefined，再使用扩展运算符就会报错<code>is not iterable</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myApply</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [thisValue,parameters] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">arguments</span></span>
<span class="line"><span style="color:#F6F6F4;">  thisValue._func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> thisValue.</span><span style="color:#62E884;">_func</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">parameters)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> thisValue._func</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myApply</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [thisValue,parameters] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span></span>
<span class="line"><span style="color:#24292E;">  thisValue._func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisValue.</span><span style="color:#6F42C1;">_func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">parameters)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thisValue._func</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="可以完善的一些地方" tabindex="-1">可以完善的一些地方 <a class="header-anchor" href="#可以完善的一些地方" aria-label="Permalink to &quot;可以完善的一些地方&quot;">​</a></h4><p>如果没有传this值，我们可以让默认值为window，如果没有传argsArray，让默认值为[]，这里拿apply作为例子。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myApply</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [thisValue,parameters] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">arguments</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">thisValue)thisValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> window</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">parameters)parameters </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> []</span></span>
<span class="line"><span style="color:#F6F6F4;">  thisValue._func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> thisValue.</span><span style="color:#62E884;">_func</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">parameters)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> thisValue._func</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myApply</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [thisValue,parameters] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">thisValue)thisValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parameters)parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  thisValue._func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisValue.</span><span style="color:#6F42C1;">_func</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">parameters)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thisValue._func</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们的bind也可以改造成使用apply的模式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myBind</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [thisValue,</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">parameters] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">arguments</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> func.</span><span style="color:#62E884;">myApply</span><span style="color:#F6F6F4;">(thisValue,parameters)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [thisValue,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">parameters] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func.</span><span style="color:#6F42C1;">myApply</span><span style="color:#24292E;">(thisValue,parameters)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在还可以继续考虑两个问题：如果不能使用…运算符怎么办？如果绑定的对象已经有了_func属性或者不能设置属性怎么办？</p><p>先看如何替代…运算符。如果不能使用…运算符，我们就不能方便地向函数传递任意多个参数，可以使用eval()解析生成的字符串，也可以用<code>new Function([arg1[,arg2[,...argN]],]functionBody)</code>结合读取arguments数组读取任意多个参数，也是通过解析生成的字符串。</p><p>使用不重复的属性。ES6提供了symbol()用于标志唯一的事物，它可以以作为对象的属性，我们仍以apply作为例子。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">Function</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">myApply</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [thisValue,parameters] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">arguments</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">thisValue)thisValue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> window</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">parameters)parameters </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> []</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> _func </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  thisValue[_func] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> thisValue[_func](</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">parameters)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">delete</span><span style="color:#F6F6F4;"> thisValue[_func]</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myApply</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [thisValue,parameters] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arguments</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">thisValue)thisValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parameters)parameters </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> _func </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  thisValue[_func] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thisValue[_func](</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">parameters)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thisValue[_func]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>此外还可以用Math.random()生成一个不太可能重复的属性名。</p><h2 id="作用域-scope" tabindex="-1">作用域 Scope <a class="header-anchor" href="#作用域-scope" aria-label="Permalink to &quot;作用域 Scope&quot;">​</a></h2><p>作用域即变量和函数的可访问范围和生命周期。</p><h3 id="变量作用域" tabindex="-1">变量作用域 <a class="header-anchor" href="#变量作用域" aria-label="Permalink to &quot;变量作用域&quot;">​</a></h3><p>可以分为全局作用域、函数内作用域（包括嵌套函数）、块级作用域。局部变量可以在局部覆盖同名全局变量。</p><h3 id="作用域链-scope-chain" tabindex="-1">作用域链 Scope Chain <a class="header-anchor" href="#作用域链-scope-chain" aria-label="Permalink to &quot;作用域链 Scope Chain&quot;">​</a></h3><p>从外层到函数乃至嵌套函数内，多个执行环境形成了一个程序执行栈，同时也形成了一个指向多个环境的链表，即作用域链。作用域链包括VO与所有上级的作用域。</p><p>作用域链决定了函数能访问变量的范围，组织了访问变量的顺序，在解析标识符时一级一级地按顺序查找函数和变量。需要注意的是，JS根据函数定义的位置查找，而非执行的位置。</p><h4 id="执行环境-执行上下文-execution-context" tabindex="-1">执行环境/执行上下文 Execution Context <a class="header-anchor" href="#执行环境-执行上下文-execution-context" aria-label="Permalink to &quot;执行环境/执行上下文 Execution Context&quot;">​</a></h4><p>执行环境定义了变量与函数能访问的数据，包括全局、函数内、eval、块级作用域等。</p><p>执行环境包括至少3个重要的属性：作用域链、变量对象和this（按创建顺序排序）。这里关注前两个。</p><h4 id="变量对象-variable-object" tabindex="-1">变量对象 Variable Object <a class="header-anchor" href="#变量对象-variable-object" aria-label="Permalink to &quot;变量对象 Variable Object&quot;">​</a></h4><p>每个执行环境都有与之关联的变量对象，它包括了环境中所有的变量和函数。全剧环境下的变量对象称为VO。</p><p>所有的变量和函数即函数声明、变量声明、函数形参。不包括匿名函数。</p><h4 id="活动对象-activation-object" tabindex="-1">活动对象 Activation Object <a class="header-anchor" href="#活动对象-activation-object" aria-label="Permalink to &quot;活动对象 Activation Object&quot;">​</a></h4><p>当环境是函数时，活动对象就是变量对象。活动对象至少包含arguments对象（即函数参数）。有很多资料提到函数中不能直接访问VO，而以AO替代，不过反正这两个都是不能用JS代码打印出来的。</p><p>Arguments对象至少包括callee（对当前函数的引用）、length（真正传递参数的个数）、properties-indexs（函数的参数值），注意Arguments并不包含this。</p><p>with语句</p><p><code>with (expression) statement</code></p><p>with语句算是语法糖，statement中的语句可以使用expression中的任意属性而不必加上前缀。你也可以自己实现一个函数，接受一个对象，将其方法的this绑定到对象上，然后定义若干个和对象属性相同的变量，从而用method()访问obj.method()。不过必须要用到eval函数，因为js不能直接动态命名变量。</p><p><strong>with存在性能开销，大型项目不建议使用。</strong></p><h2 id="iterable接口-es6" tabindex="-1">iterable接口 ES6 <a class="header-anchor" href="#iterable接口-es6" aria-label="Permalink to &quot;iterable接口 ES6&quot;">​</a></h2><p>对象的<code>[Symbol.iterator]</code>属性指向其默认的遍历器，其不仅提供了统一的接口，还能按规定的顺序排列。在ES6中，Array、String、Set和Map、arguments等类数组对象都具有iterable接口。而<a href="#解构赋值">解构赋值</a>、<a href="#扩展运算符">扩展运算符</a>、yield和任何与接受数组的场合都调用了Iterator接口。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> myIterable </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {}</span></span>
<span class="line"><span style="color:#F6F6F4;">myIterable[Symbol.iterator] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function*</span><span style="color:#F6F6F4;"> (){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">yield</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">myIterable]</span><span style="color:#7B7F8B;">//[ 1, 2, 3 ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> myIterable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#24292E;">myIterable[Symbol.iterator] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function*</span><span style="color:#24292E;"> (){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">yield</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">myIterable]</span><span style="color:#6A737D;">//[ 1, 2, 3 ]</span></span></code></pre></div><p>借用数组的iterator：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> fakeArray</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#BF9EEE;">0</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">apple</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">peach</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pancake</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,length</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">               [Symbol.iterator]</span><span style="color:#F286C4;">:</span><span style="color:#97E1F1;font-style:italic;">Array</span><span style="color:#F6F6F4;">.prototype[Symbol.iterator]}</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> it </span><span style="color:#F286C4;">of</span><span style="color:#F6F6F4;"> fakeArray){console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(it)}</span><span style="color:#7B7F8B;">//apple peach pancake</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fakeArray</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;apple&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;peach&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;pancake&#39;</span><span style="color:#24292E;">,length:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">               [Symbol.iterator]:</span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">[Symbol.iterator]}</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> it </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> fakeArray){console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(it)}</span><span style="color:#6A737D;">//apple peach pancake</span></span></code></pre></div><p>待填坑 async写法、next()写法</p><h2 id="模块管理" tabindex="-1">模块管理 <a class="header-anchor" href="#模块管理" aria-label="Permalink to &quot;模块管理&quot;">​</a></h2><h3 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h3><p>Node Package Manager。默认安装到项目目录下，-g安装到全局，-save在package.json写入dependencies字段，-save-dev相应写入devDependencies字段。</p><h3 id="yarnrecommend" tabindex="-1">YARNRecommend <a class="header-anchor" href="#yarnrecommend" aria-label="Permalink to &quot;YARNRecommend&quot;">​</a></h3><p>NPM与YARN使用几乎无差异，但YARN是NPM的改进版，主要支持了并行安装、离线模式（从缓存安装）、统一版本。因此不建议再使用NPM。</p><p><code>yarn add &lt;package&gt;</code>添加包，<code>yarn global add &lt;package&gt;</code>添加全局包，<code>yarn add &lt;package&gt; --dev</code>添加dev依赖。yarn添加的依赖会默认保存到package.json里。</p><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h4><p><code>yarn init</code></p><p>init会引导你创建package.json文件。没有init也可以安装依赖，但package.json可以只存储包名和版本，方便git管理、与别人共享代码。</p><p><code>yarn</code>或<code>yarn install</code></p><p>针对已有package.json或yarn.lock的项目，将所需依赖全部安装。</p><h4 id="修改镜像源" tabindex="-1">修改镜像源 <a class="header-anchor" href="#修改镜像源" aria-label="Permalink to &quot;修改镜像源&quot;">​</a></h4><p><code>yarn config set registry https://registry.npm.taobao.org/</code>（全局）</p><p><code>yarn [operation] --reigistry https://registry.npm.taobao.org/</code>（本次操作）</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//.npmrc 项目内</span></span>
<span class="line"><span style="color:#f6f6f4;">registry=https://registry.npm.taobao.org</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//.npmrc 项目内</span></span>
<span class="line"><span style="color:#24292e;">registry=https://registry.npm.taobao.org</span></span></code></pre></div><h4 id="管理依赖包" tabindex="-1">管理依赖包 <a class="header-anchor" href="#管理依赖包" aria-label="Permalink to &quot;管理依赖包&quot;">​</a></h4><p>首先，我们用<code>&lt;package&gt;</code>、<code>&lt;package&gt;@&lt;version&gt;</code>和<code>&lt;package&gt;@&lt;tag&gt;</code>描述一个依赖包。</p><p><code>yarn upgrade &lt;package&gt;</code>（升级）</p><p><code>yarn remove &lt;package&gt;</code>（移除）</p><h3 id="import与require" tabindex="-1">import与require <a class="header-anchor" href="#import与require" aria-label="Permalink to &quot;import与require&quot;">​</a></h3><p>import与require都提供引入一个模块的功能，但require是AMD规范下的引入，在运行时调用，而import是ES6规定的引入，编译时调用（因此实际上最早执行，）。require对应exports，import对应export。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//CommonJS/AMD</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">require</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">module</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> app</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">exports</span><span style="color:#F6F6F4;">.app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//ES6规范,解构要求标识符对应（但可以用as重命名），引入export default这种的可以自定义变量名，一个文件可以同时export default和export xxx</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;">// export default xxx</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> {login,logout} </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&#39;</span><span style="color:#7B7F8B;">//export const xxx or export function xxx or export {login,logout,...} or export * from &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">xxx</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> {</span><span style="color:#FFB86C;font-style:italic;">login</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> logIn} </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> app ,{login} </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">as</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">app</span><span style="color:#DEE492;">&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//CommonJS/AMD</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app</span></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.app </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//ES6规范,解构要求标识符对应（但可以用as重命名），引入export default这种的可以自定义变量名，一个文件可以同时export default和export xxx</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;app&#39;</span><span style="color:#6A737D;">// export default xxx</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {login,logout} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;app&#39;</span><span style="color:#6A737D;">//export const xxx or export function xxx or export {login,logout,...} or export * from &#39;xxx&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {login </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> logIn} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;app&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> app ,{login} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;app&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> app </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;app&#39;</span></span></code></pre></div><h2 id="原型-prototype-✏️" tabindex="-1">原型 Prototype ✏️ <a class="header-anchor" href="#原型-prototype-✏️" aria-label="Permalink to &quot;原型 Prototype ✏️&quot;">​</a></h2><p>JavaScript中的继承。原型法设计的思想是从类A扩展出类B，B以A为原型，具有A的属性与方法。JavaScript中每一个对象都有prototype属性。</p><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">outer</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">inner</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> { a</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">; console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(a) }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> inner</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">outer</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inner</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { a</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">; console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(a) }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inner</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span></code></pre></div><p>闭包利用了函数的执行环境，每次返回的inner都有不同的执行环境，意味着不同的inner分别拥有自己的a值。</p><p>PS：上次面头条，竟然没有写出来emm千万不要像我一样。</p><h2 id="constructor-构造函数" tabindex="-1">constructor 构造函数 <a class="header-anchor" href="#constructor-构造函数" aria-label="Permalink to &quot;constructor 构造函数&quot;">​</a></h2><h2 id="原型链-继承" tabindex="-1">原型链&amp;继承 <a class="header-anchor" href="#原型链-继承" aria-label="Permalink to &quot;原型链&amp;继承&quot;">​</a></h2><h2 id="promise" tabindex="-1"><a href="http://manual.local.guohere.com/JS/ES6.html#promise" target="_blank" rel="noreferrer">Promise</a> <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;[Promise](http://manual.local.guohere.com/JS/ES6.html#promise)&quot;">​</a></h2><h3 id="函数生成器" tabindex="-1">函数生成器 <a class="header-anchor" href="#函数生成器" aria-label="Permalink to &quot;函数生成器&quot;">​</a></h3><h3 id="async-await" tabindex="-1">async...await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;async...await&quot;">​</a></h3><h2 id="并发模型与事件循环" tabindex="-1">并发模型与事件循环 <a class="header-anchor" href="#并发模型与事件循环" aria-label="Permalink to &quot;并发模型与事件循环&quot;">​</a></h2><p>JavaScript的并发模型基于事件循环。</p><p>先同步，后异步。先执行微任务，后执行宏任务。</p><p><img src="https://developer.mozilla.org/files/4617/default.svg" alt="Stack, heap, queue"></p><h3 id="stack-栈" tabindex="-1">Stack 栈 <a class="header-anchor" href="#stack-栈" aria-label="Permalink to &quot;Stack 栈&quot;">​</a></h3><p>这里的栈指函数调用形成的执行栈。函数具有参数和局部变量，如果函数A调用了函数B，并且执行函数A，那么函数A会被先压入栈，调用B时，函数B被压入栈（位于A之上），到函数B返回，其被弹出。</p><p>函数被压入栈的实际过程是压入调用帧。</p><h3 id="heap-堆" tabindex="-1">Heap 堆 <a class="header-anchor" href="#heap-堆" aria-label="Permalink to &quot;Heap 堆&quot;">​</a></h3><p>非结构化的存储区域，其中存储对象。</p><h3 id="queue-队列" tabindex="-1">Queue 队列 <a class="header-anchor" href="#queue-队列" aria-label="Permalink to &quot;Queue 队列&quot;">​</a></h3><p>JavaScript维护一个待处理的消息队列，而每一个消息与处理它的函数关联。在事件循环中的某个环节，JavaScript按顺序处理Queue的消息。</p><p>每当调用处理消息的函数，其形成的调用帧被压入栈。该函数可能会调用其他函数，因此只有当执行栈为空，JavaScript才能继续处理下一个消息。最终，消息队列为空。</p><h3 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (queue.</span><span style="color:#62E884;">waitForMessage</span><span style="color:#F6F6F4;">()){</span></span>
<span class="line"><span style="color:#F6F6F4;">  queue.</span><span style="color:#62E884;">processNextMessage</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (queue.</span><span style="color:#6F42C1;">waitForMessage</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">  queue.</span><span style="color:#6F42C1;">processNextMessage</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>瞧，这就是事件循环，因为它是一个处理消息的循环。其中waitForMessage是同步的，如果没有消息，它就会等。</p><h4 id="不打断地执行" tabindex="-1">不打断地执行 <a class="header-anchor" href="#不打断地执行" aria-label="Permalink to &quot;不打断地执行&quot;">​</a></h4><p>如果你理解了队列的执行方式，那么你会明白这种处理方式意味着函数执行决不会被抢占。（相对于C/C++多线程，你不得不考虑函数被中断的情况）这为编程和分析带来了便利，但代价是消息处理函数可能会长时间阻塞其他事件，如用户的点击、滑动，在这种情况下，浏览器会提示无响应，用户可以选择等待或结束进程。</p><h4 id="不阻塞" tabindex="-1">不阻塞 <a class="header-anchor" href="#不阻塞" aria-label="Permalink to &quot;不阻塞&quot;">​</a></h4><p>MDN声称JavaScript“永不阻塞”，这当然是不对的，例如<code>alert()</code>与同步XHR的场景，但如此声称有它的理由。JavaScript中I/O通常采用事件回调的形式完成，这意味着I/O不会影响其余代码执行。</p><h4 id="添加消息" tabindex="-1">添加消息 <a class="header-anchor" href="#添加消息" aria-label="Permalink to &quot;添加消息&quot;">​</a></h4><p>事件需要绑定监听器以被监听，否则事件将丢失。例如用户点击按钮并被监听到时，消息队列就多了一个消息。</p><p>setTimeout(handler, timeOut)允许向队列添加消息，并且设置最小触发延时。延时可能大于设定的时间，因为预定的时间内JavaScript可能正在处理其他消息（即使延时设置为0也一样，并且H5标准规定最小间隔为4ms）。一个简单的例子是，先设定一个定时执行的函数，再令JavaScript进入无限循环，无论何时被设定的函数都不会执行。</p><h4 id="同步代码" tabindex="-1">同步代码 <a class="header-anchor" href="#同步代码" aria-label="Permalink to &quot;同步代码&quot;">​</a></h4><p>JavaScript的同步执行代码可以理解成第一条消息的处理函数，在它执行完前，不会有其他消息被处理。</p><h3 id="runtime间通信" tabindex="-1">Runtime间通信 <a class="header-anchor" href="#runtime间通信" aria-label="Permalink to &quot;Runtime间通信&quot;">​</a></h3><p>JavaScript虽然是单线程，但跨域iframe和web worker都是独立的runtime。他们能且只能用<code>postMessage()</code>发送消息，并监听<code>message</code>事件。</p><h3 id="宏任务与微任务" tabindex="-1">宏任务与微任务 <a class="header-anchor" href="#宏任务与微任务" aria-label="Permalink to &quot;宏任务与微任务&quot;">​</a></h3><p>微任务和宏任务指的是setTimeout一样需要被加入队列执行的异步代码，而微任务一定位于宏任务之前。</p><p>先祭上这段常见代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">}).</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span></code></pre></div><p>Promise是同步代码，Promise.then才是异步代码，所以1，2的顺序是毫无疑问的。3，4都是异步任务，为什么3在4前面呢？如果以事件队列理解，4应该在3前面，但由于3是微任务，4是宏任务，3应该在4之前被处理。</p><p>宏任务和微任务都存在于事件循环，但微任务尽管添加时间可能比宏任务晚，仍然要在下一个宏任务执行前执行。事件循环处理消息相当于有两个步骤，第一步检查当前是否有微任务（微任务虽然也是异步代码，但可以看作不在消息队列中，因为它会“插队”），如果有先完成，第二步执行宏任务并在队列中寻找下一个消息。</p><p>如果在宏任务执行过程中添加微任务，那么它会在下一个宏任务执行前执行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> { console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Micro</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) });</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Macro</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"><span style="color:#7B7F8B;">//Macro</span></span>
<span class="line"><span style="color:#7B7F8B;">//Micro</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">two</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> { </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (Date.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2000</span><span style="color:#F6F6F4;">) { } }</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">twoWithPromise</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Promise</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">resolve</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">then</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Promise</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (Date.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2000</span><span style="color:#F6F6F4;">) { }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">fdd</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> d </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Date.</span><span style="color:#62E884;">now</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(twoWithPromise, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, d);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(two, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, d);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setTimeout</span><span style="color:#F6F6F4;">(two, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, d)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">//2秒后输出Promise，说明twoWithPromise的确花了2s，之后Promise.then执行，再之后才是下一个setTimeout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Micro&quot;</span><span style="color:#24292E;">) });</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Macro&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">//Macro</span></span>
<span class="line"><span style="color:#6A737D;">//Micro</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">two</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">date</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">) { } }</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">twoWithPromise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">date</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">_</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Promise&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> date </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">) { }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fdd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(twoWithPromise, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, d);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(two, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, d);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(two, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, d)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//2秒后输出Promise，说明twoWithPromise的确花了2s，之后Promise.then执行，再之后才是下一个setTimeout</span></span></code></pre></div><p>我在掘金上看到有人说requestAnimationFrame()的触发要先于setTimeout()，他说这是因为修改DOM属性是同步操作，这显然是不对的，同步只是注册监听器。参考评论，理想情况下requestAnimationFrame对于60Hz的显示器来说每16.6ms执行一次，而setTimeout(handler,0)既可能是4ms执行一次，也可能由于页面重新渲染，最小间隔变为16ms。当屏幕刷新率变高，requestAnimationFrame将在setTimeout()之前。</p><h4 id="宏任务与微任务表格" tabindex="-1">宏任务与微任务表格 <a class="header-anchor" href="#宏任务与微任务表格" aria-label="Permalink to &quot;宏任务与微任务表格&quot;">​</a></h4><table><thead><tr><th>函数/过程</th><th>宏任务</th><th>微任务</th></tr></thead><tbody><tr><td>I/O</td><td>✅</td><td></td></tr><tr><td>setTimeout</td><td>✅</td><td></td></tr><tr><td>setInterval</td><td>✅</td><td></td></tr><tr><td>Promise.then/catch/finally</td><td></td><td>✅</td></tr><tr><td>setImmediate（NodeJS）</td><td>✅</td><td></td></tr><tr><td>requestAnimationFrame（Browser）</td><td>✅</td><td></td></tr><tr><td>process.nextTick（NodeJS）</td><td></td><td>✅</td></tr><tr><td>MutationObserver（Browser）</td><td></td><td>✅</td></tr></tbody></table><h2 id="防抖-节流" tabindex="-1">防抖&amp;节流 <a class="header-anchor" href="#防抖-节流" aria-label="Permalink to &quot;防抖&amp;节流&quot;">​</a></h2><h2 id="ajax-fetch" tabindex="-1">AJAX&amp;Fetch <a class="header-anchor" href="#ajax-fetch" aria-label="Permalink to &quot;AJAX&amp;Fetch&quot;">​</a></h2><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h2><p><code>(arguments)=&gt;{statement}</code></p><p>箭头函数的特性：</p><ol><li>自动绑定初始化环境的this</li><li>没有arguments对象</li><li>不可以作为constructor，亦无prototype</li><li>不可作为generator函数</li></ol><h2 id="垃圾回收" tabindex="-1">垃圾回收 <a class="header-anchor" href="#垃圾回收" aria-label="Permalink to &quot;垃圾回收&quot;">​</a></h2><p>每隔一段时间，系统或虚拟机搜索未被引用的变量，并释放其申请的空间。</p><h2 id="装饰器" tabindex="-1">装饰器 <a class="header-anchor" href="#装饰器" aria-label="Permalink to &quot;装饰器&quot;">​</a></h2><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h2><p>TS话题比较大，这里只做简单介绍。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.cnblogs.com/sunshq/p/7922182.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/sunshq/p/7922182.html</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop</a></p><p><a href="https://juejin.im/post/5b73d7a6518825610072b42b" target="_blank" rel="noreferrer">https://juejin.im/post/5b73d7a6518825610072b42b</a></p>`,164),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
