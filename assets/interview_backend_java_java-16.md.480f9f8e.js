import{_ as a,o as e,c as r,V as t}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-16.md","filePath":"interview/backend/java/java-16.md"}'),o={name:"interview/backend/java/java-16.md"},n=t('<h3 id="_1、stringbuffer-stringbuilder有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#1stringbufferstringbuilder%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、StringBuffer，Stringbuilder有什么区别？</a> <a class="header-anchor" href="#_1、stringbuffer-stringbuilder有什么区别" aria-label="Permalink to &quot;[1、StringBuffer，Stringbuilder有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#1stringbufferstringbuilder有什么区别)&quot;">​</a></h3><p>StringBuffer与StringBuilder都继承了AbstractStringBulder类，而AbtractStringBuilder又实现了CharSequence接口，两个类都是用来进行字符串操作的。</p><p>在做字符串拼接修改删除替换时，效率比string更高。</p><p>StringBuffer是线程安全的，Stringbuilder是非线程安全的。所以Stringbuilder比stringbuffer效率更高，StringBuffer的方法大多都加了synchronized关键字</p><h3 id="_2、什么是分布式垃圾回收-dgc-它是如何工作的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#2%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6dgc%E5%AE%83%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84" target="_blank" rel="noreferrer">2、什么是分布式垃圾回收（DGC）？它是如何工作的？</a> <a class="header-anchor" href="#_2、什么是分布式垃圾回收-dgc-它是如何工作的" aria-label="Permalink to &quot;[2、什么是分布式垃圾回收（DGC）？它是如何工作的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#2什么是分布式垃圾回收dgc它是如何工作的)&quot;">​</a></h3><p>DGC 叫做分布式垃圾回收。RMI 使用 DGC 来做自动垃圾回收。因为 RMI 包含了跨虚拟机的远程对象的引用，垃圾回收是很困难的。DGC 使用引用计数算法来给远程对象提供自动内存管理。</p><h3 id="_3、osgi-动态模型系统" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#3osgi-%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E7%B3%BB%E7%BB%9F" target="_blank" rel="noreferrer">3、OSGI（ 动态模型系统）</a> <a class="header-anchor" href="#_3、osgi-动态模型系统" aria-label="Permalink to &quot;[3、OSGI（ 动态模型系统）](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#3osgi-动态模型系统)&quot;">​</a></h3><p>OSGi(Open Service Gateway Initiative)，是面向 Java 的动态模型系统，是 Java 动态化模块化系统的一系列规范。</p><h3 id="_4、什么是方法的返回值-返回值在类的方法里的作用是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%E8%BF%94%E5%9B%9E%E5%80%BC%E5%9C%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%E9%87%8C%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">4、什么是方法的返回值？返回值在类的方法里的作用是什么？</a> <a class="header-anchor" href="#_4、什么是方法的返回值-返回值在类的方法里的作用是什么" aria-label="Permalink to &quot;[4、什么是方法的返回值？返回值在类的方法里的作用是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#4什么是方法的返回值返回值在类的方法里的作用是什么)&quot;">​</a></h3><p>方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！</p><h3 id="_5、什么是线程死锁" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#5%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E6%AD%BB%E9%94%81" target="_blank" rel="noreferrer">5、什么是线程死锁</a> <a class="header-anchor" href="#_5、什么是线程死锁" aria-label="Permalink to &quot;[5、什么是线程死锁](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#5什么是线程死锁)&quot;">​</a></h3><p><strong>1、</strong> 死锁是指两个或两个以上的进程（线程）在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程（线程）称为死锁进程（线程）。</p><p><strong>2、</strong> 多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。</p><p><strong>3、</strong> 如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</p><p>![87_1.png][87_1.png]</p><h3 id="_6、jvm中一次完整的gc流程是怎样的-对象如何晋升到老年代" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#6jvm%E4%B8%AD%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%95%B4%E7%9A%84gc%E6%B5%81%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E6%99%8B%E5%8D%87%E5%88%B0%E8%80%81%E5%B9%B4%E4%BB%A3" target="_blank" rel="noreferrer">6、JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代？</a> <a class="header-anchor" href="#_6、jvm中一次完整的gc流程是怎样的-对象如何晋升到老年代" aria-label="Permalink to &quot;[6、JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#6jvm中一次完整的gc流程是怎样的对象如何晋升到老年代)&quot;">​</a></h3><p>当 Eden 区的空间满了， Java虚拟机会触发一次 Minor GC，以收集新生代的垃圾，存活下来的对象，则会转移到 Survivor区。大对象（需要大量连续内存空间的Java对象，如那种很长的字符串）直接进入老年态；如果对象在Eden出生，并经过第一次Minor GC后仍然存活，并且被Survivor容纳的话，年龄设为1，每熬过一次Minor GC，年龄+1，若年龄超过一定限制（15），则被晋升到老年态。即长期存活的对象进入老年态。老年代满了而无法容纳更多的对象，Minor GC 之后通常就会进行Full GC，Full GC 清理整个内存堆 – 包括年轻代和年老代。Major GC 发生在老年代的GC，清理老年区，经常会伴随至少一次Minor GC，比Minor GC慢10倍以上。</p><h3 id="_7、为什么使用executor框架比使用应用创建和管理线程好" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#7%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8executor%E6%A1%86%E6%9E%B6%E6%AF%94%E4%BD%BF%E7%94%A8%E5%BA%94%E7%94%A8%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E7%BA%BF%E7%A8%8B%E5%A5%BD" target="_blank" rel="noreferrer">7、为什么使用Executor框架比使用应用创建和管理线程好？</a> <a class="header-anchor" href="#_7、为什么使用executor框架比使用应用创建和管理线程好" aria-label="Permalink to &quot;[7、为什么使用Executor框架比使用应用创建和管理线程好？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#7为什么使用executor框架比使用应用创建和管理线程好)&quot;">​</a></h3><p>为什么要使用Executor线程池框架</p><p><strong>1、</strong> 每次执行任务创建线程 new Thread()比较消耗性能，创建一个线程是比较耗时、耗资源的。</p><p><strong>2、</strong> 调用 new Thread()创建的线程缺乏管理，被称为野线程，而且可以无限制的创建，线程之间的相互竞争会导致过多占用系统资源而导致系统瘫痪，还有线程之间的频繁交替也会消耗很多系统资源。</p><p><strong>3、</strong> 直接使用new Thread() 启动的线程不利于扩展，比如定时执行、定期执行、定时定期执行、线程中断等都不便实现。</p><p>**使用Executor线程池框架的优点 **</p><p><strong>1、</strong> 能复用已存在并空闲的线程从而减少线程对象的创建从而减少了消亡线程的开销。</p><p><strong>2、</strong> 可有效控制最大并发线程数，提高系统资源使用率，同时避免过多资源竞争。</p><p><strong>3、</strong> 框架中已经有定时、定期、单线程、并发数控制等功能。</p><p>综上所述使用线程池框架Executor能更好的管理线程、提供系统资源使用率。</p><h3 id="_8、运行时异常与受检异常有何异同" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#8%E8%BF%90%E8%A1%8C%E6%97%B6%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%8F%97%E6%A3%80%E5%BC%82%E5%B8%B8%E6%9C%89%E4%BD%95%E5%BC%82%E5%90%8C" target="_blank" rel="noreferrer">8、运行时异常与受检异常有何异同？</a> <a class="header-anchor" href="#_8、运行时异常与受检异常有何异同" aria-label="Permalink to &quot;[8、运行时异常与受检异常有何异同？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#8运行时异常与受检异常有何异同)&quot;">​</a></h3><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在_Effective Java_中对异常的使用给出了以下指导原则：</p><p><strong>1、</strong> 不要将异常处理用于正常的控制流（设计良好的API不应该强迫它的调用者为了正常的控制流而使用异常）</p><p><strong>2、</strong> 对可以恢复的情况使用受检异常，对编程错误使用运行时异常</p><p><strong>3、</strong> 避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</p><p><strong>4、</strong> 优先使用标准的异常</p><p><strong>5、</strong> 每个方法抛出的异常都要有文档</p><p><strong>6、</strong> 保持异常的原子性</p><p><strong>7、</strong> 不要在catch中忽略掉捕获到的异常</p><h3 id="_9、字节流与字符流的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#9%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%8E%E5%AD%97%E7%AC%A6%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、字节流与字符流的区别</a> <a class="header-anchor" href="#_9、字节流与字符流的区别" aria-label="Permalink to &quot;[9、字节流与字符流的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#9字节流与字符流的区别)&quot;">​</a></h3><p><strong>1、</strong> 以字节为单位输入输出数据，字节流按照8位传输</p><p><strong>2、</strong> 以字符为单位输入输出数据，字符流按照16位传输</p><h3 id="_10、怎样通过-java-程序来判断-jvm-是-32-位-还是-64位" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.md#10%E6%80%8E%E6%A0%B7%E9%80%9A%E8%BF%87-java-%E7%A8%8B%E5%BA%8F%E6%9D%A5%E5%88%A4%E6%96%AD-jvm-%E6%98%AF-32-%E4%BD%8D-%E8%BF%98%E6%98%AF-64%E4%BD%8D" target="_blank" rel="noreferrer">10、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？</a> <a class="header-anchor" href="#_10、怎样通过-java-程序来判断-jvm-是-32-位-还是-64位" aria-label="Permalink to &quot;[10、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64位？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java面试题目大汇总，附参考答案.md#10怎样通过-java-程序来判断-jvm-是-32-位-还是-64位)&quot;">​</a></h3><p>你可以检查某些系统属性如 sun.arch.data.model 或 os.arch 来获取该信息。</p><h3 id="_11、spring-mvc的工作原理是怎样的" tabindex="-1">11、Spring MVC的工作原理是怎样的？ <a class="header-anchor" href="#_11、spring-mvc的工作原理是怎样的" aria-label="Permalink to &quot;11、Spring MVC的工作原理是怎样的？&quot;">​</a></h3><h3 id="_12、java-中的final关键字有哪些用法" tabindex="-1">12、Java 中的final关键字有哪些用法？ <a class="header-anchor" href="#_12、java-中的final关键字有哪些用法" aria-label="Permalink to &quot;12、Java 中的final关键字有哪些用法？&quot;">​</a></h3><h3 id="_13、阐述spring框架中bean的生命周期" tabindex="-1">13、阐述Spring框架中Bean的生命周期？ <a class="header-anchor" href="#_13、阐述spring框架中bean的生命周期" aria-label="Permalink to &quot;13、阐述Spring框架中Bean的生命周期？&quot;">​</a></h3><h3 id="_14、gc-是什么-为什么要有-gc" tabindex="-1">14、GC 是什么? 为什么要有 GC <a class="header-anchor" href="#_14、gc-是什么-为什么要有-gc" aria-label="Permalink to &quot;14、GC 是什么? 为什么要有 GC&quot;">​</a></h3><h3 id="_15、java中concurrenthashmap的并发度是什么" tabindex="-1">15、Java中ConcurrentHashMap的并发度是什么？ <a class="header-anchor" href="#_15、java中concurrenthashmap的并发度是什么" aria-label="Permalink to &quot;15、Java中ConcurrentHashMap的并发度是什么？&quot;">​</a></h3><h3 id="_16、38、数据类型之间的转换" tabindex="-1">16、38、数据类型之间的转换： <a class="header-anchor" href="#_16、38、数据类型之间的转换" aria-label="Permalink to &quot;16、38、数据类型之间的转换：&quot;">​</a></h3><h3 id="_17、volatile-类型变量提供什么保证" tabindex="-1">17、volatile 类型变量提供什么保证？ <a class="header-anchor" href="#_17、volatile-类型变量提供什么保证" aria-label="Permalink to &quot;17、volatile 类型变量提供什么保证？&quot;">​</a></h3><h3 id="_18、不可变对象对多线程有什么帮助" tabindex="-1">18、不可变对象对多线程有什么帮助 <a class="header-anchor" href="#_18、不可变对象对多线程有什么帮助" aria-label="Permalink to &quot;18、不可变对象对多线程有什么帮助&quot;">​</a></h3><h3 id="_19、分区收集算法" tabindex="-1">19、分区收集算法 <a class="header-anchor" href="#_19、分区收集算法" aria-label="Permalink to &quot;19、分区收集算法&quot;">​</a></h3><h3 id="_20、写一段代码在遍历-arraylist-时移除一个元素" tabindex="-1">20、写一段代码在遍历 ArrayList 时移除一个元素？ <a class="header-anchor" href="#_20、写一段代码在遍历-arraylist-时移除一个元素" aria-label="Permalink to &quot;20、写一段代码在遍历 ArrayList 时移除一个元素？&quot;">​</a></h3><h3 id="_21、分代收集算法" tabindex="-1">21、分代收集算法 <a class="header-anchor" href="#_21、分代收集算法" aria-label="Permalink to &quot;21、分代收集算法&quot;">​</a></h3><h3 id="_22、copyonwritearraylist-的使用场景" tabindex="-1">22、CopyOnWriteArrayList 的使用场景? <a class="header-anchor" href="#_22、copyonwritearraylist-的使用场景" aria-label="Permalink to &quot;22、CopyOnWriteArrayList 的使用场景?&quot;">​</a></h3><h3 id="_23、arraylist-和-hashmap-的默认大小是多数" tabindex="-1">23、ArrayList 和 HashMap 的默认大小是多数？ <a class="header-anchor" href="#_23、arraylist-和-hashmap-的默认大小是多数" aria-label="Permalink to &quot;23、ArrayList 和 HashMap 的默认大小是多数？&quot;">​</a></h3><h3 id="_24、如果使用object作为hashmap的key-应该怎么办呢" tabindex="-1">24、如果使用Object作为HashMap的Key，应该怎么办呢？ <a class="header-anchor" href="#_24、如果使用object作为hashmap的key-应该怎么办呢" aria-label="Permalink to &quot;24、如果使用Object作为HashMap的Key，应该怎么办呢？&quot;">​</a></h3><h3 id="_25、同步方法和同步块-哪个是更好的选择" tabindex="-1">25、同步方法和同步块，哪个是更好的选择? <a class="header-anchor" href="#_25、同步方法和同步块-哪个是更好的选择" aria-label="Permalink to &quot;25、同步方法和同步块，哪个是更好的选择?&quot;">​</a></h3><h3 id="_26、线程的-run-和-start-有什么区别" tabindex="-1">26、线程的 run()和 start()有什么区别？ <a class="header-anchor" href="#_26、线程的-run-和-start-有什么区别" aria-label="Permalink to &quot;26、线程的 run()和 start()有什么区别？&quot;">​</a></h3><h3 id="_27、实际开发中应用场景哪里用到了模板方法" tabindex="-1">27、实际开发中应用场景哪里用到了模板方法 <a class="header-anchor" href="#_27、实际开发中应用场景哪里用到了模板方法" aria-label="Permalink to &quot;27、实际开发中应用场景哪里用到了模板方法&quot;">​</a></h3><h3 id="_28、为什么要学习工厂设计模式" tabindex="-1">28、为什么要学习工厂设计模式 <a class="header-anchor" href="#_28、为什么要学习工厂设计模式" aria-label="Permalink to &quot;28、为什么要学习工厂设计模式&quot;">​</a></h3><h3 id="_29、描述-java-中的重载和重写" tabindex="-1">29、描述 Java 中的重载和重写？ <a class="header-anchor" href="#_29、描述-java-中的重载和重写" aria-label="Permalink to &quot;29、描述 Java 中的重载和重写？&quot;">​</a></h3><h3 id="_30、什么是设计模式" tabindex="-1">30、什么是设计模式 <a class="header-anchor" href="#_30、什么是设计模式" aria-label="Permalink to &quot;30、什么是设计模式&quot;">​</a></h3><h3 id="_31、anonymous-inner-class-匿名内部类-是否可以继承其它类-是否可以实现接口" tabindex="-1">31、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？ <a class="header-anchor" href="#_31、anonymous-inner-class-匿名内部类-是否可以继承其它类-是否可以实现接口" aria-label="Permalink to &quot;31、Anonymous Inner Class(匿名内部类)是否可以继承其它类？是否可以实现接口？&quot;">​</a></h3><h3 id="_32、list接口有什么特点" tabindex="-1">32、List接口有什么特点？ <a class="header-anchor" href="#_32、list接口有什么特点" aria-label="Permalink to &quot;32、List接口有什么特点？&quot;">​</a></h3><h3 id="_33、线程与进程的区别" tabindex="-1">33、线程与进程的区别 <a class="header-anchor" href="#_33、线程与进程的区别" aria-label="Permalink to &quot;33、线程与进程的区别&quot;">​</a></h3><h3 id="_34、java如何实现多线程之间的通讯和协作" tabindex="-1">34、java如何实现多线程之间的通讯和协作？ <a class="header-anchor" href="#_34、java如何实现多线程之间的通讯和协作" aria-label="Permalink to &quot;34、java如何实现多线程之间的通讯和协作？&quot;">​</a></h3><h3 id="_35、concurrenthashmap的并发度是什么" tabindex="-1">35、ConcurrentHashMap的并发度是什么 <a class="header-anchor" href="#_35、concurrenthashmap的并发度是什么" aria-label="Permalink to &quot;35、ConcurrentHashMap的并发度是什么&quot;">​</a></h3><h3 id="_36、常用的集合类有哪些" tabindex="-1">36、常用的集合类有哪些？ <a class="header-anchor" href="#_36、常用的集合类有哪些" aria-label="Permalink to &quot;36、常用的集合类有哪些？&quot;">​</a></h3><h3 id="_37、为什么-java-中的-string-是不可变的-immutable" tabindex="-1">37、为什么 Java 中的 String 是不可变的（Immutable）？ <a class="header-anchor" href="#_37、为什么-java-中的-string-是不可变的-immutable" aria-label="Permalink to &quot;37、为什么 Java 中的 String 是不可变的（Immutable）？&quot;">​</a></h3><h3 id="_38、在老年代-标记整理算法" tabindex="-1">38、在老年代-标记整理算法 <a class="header-anchor" href="#_38、在老年代-标记整理算法" aria-label="Permalink to &quot;38、在老年代-标记整理算法&quot;">​</a></h3><h3 id="_39、阐述arraylist、vector、linkedlist的存储性能和特性。" tabindex="-1">39、阐述ArrayList、Vector、LinkedList的存储性能和特性。 <a class="header-anchor" href="#_39、阐述arraylist、vector、linkedlist的存储性能和特性。" aria-label="Permalink to &quot;39、阐述ArrayList、Vector、LinkedList的存储性能和特性。&quot;">​</a></h3><h3 id="_40、java中异常分为哪两种" tabindex="-1">40、Java中异常分为哪两种？ <a class="header-anchor" href="#_40、java中异常分为哪两种" aria-label="Permalink to &quot;40、Java中异常分为哪两种？&quot;">​</a></h3>',71),s=[n];function i(E,h,l,d,u,c){return e(),r("div",null,s)}const b=a(o,[["render",i]]);export{A as __pageData,b as default};
