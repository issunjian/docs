import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/network-connect-20230407124624.2e0eca24.png",o="/docs/assets/network-connect-20230407130621.58ed173c.png",e="/docs/assets/network-connect-20230407131553.321a4daf.png",t="/docs/assets/network-connect-20230407161351.5022c693.png",c="/docs/assets/network-connect-20230407164326.fe61add8.png",r="/docs/assets/network-connect-20230407164913.4e472c85.png",y="/docs/assets/network-connect-20230407165110.6e6cec78.png",F="/docs/assets/network-connect-20230407180853.10f25287.png",i="/docs/assets/network-connect-20230407181717.af5b7298.png",E="/docs/assets/network-connect-20230407181906.83ae0c02.png",v=JSON.parse('{"title":"Java NIO 网络编程实践聊天室：从入门到精通","description":"Java NIO 网络编程实践涉及 SocketChannel、ServerSocketChannel、阻塞与非阻塞模式、Scatter 和 Gather 数据传输、异步套接字通道（AsynchronousSocketChannel 和 AsynchronousServerSocketChannel），以及简单聊天室实现。NIO 提供了高效、灵活且可扩展的 I/O 处理方式，适用于大型应用程序和高并发场景。","frontmatter":{"title":"Java NIO 网络编程实践聊天室：从入门到精通","shortTitle":"NIO 实现简易版聊天室","category":["Java核心"],"tag":["Java NIO"],"description":"Java NIO 网络编程实践涉及 SocketChannel、ServerSocketChannel、阻塞与非阻塞模式、Scatter 和 Gather 数据传输、异步套接字通道（AsynchronousSocketChannel 和 AsynchronousServerSocketChannel），以及简单聊天室实现。NIO 提供了高效、灵活且可扩展的 I/O 处理方式，适用于大型应用程序和高并发场景。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"java,nio,网络编程,SocketChannel,ServerSocketChannel,AsynchronousSocketChannel,AsynchronousServerSocketChannel,聊天室"}]]},"headers":[],"relativePath":"backend/tobetter/nio/network-connect.md","filePath":"backend/tobetter/nio/network-connect.md"}'),C={name:"backend/tobetter/nio/network-connect.md"},f=l("",127),h=[f];function d(u,S,k,A,g,B){return n(),a("div",null,h)}const b=s(C,[["render",d]]);export{v as __pageData,b as default};
