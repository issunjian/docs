import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/nio-better-io-20230406180538.8eac7de2.png",o="/docs/assets/why-20230331191748.139238db.png",e="/docs/assets/why-20230404141335.264c899a.png",h=JSON.parse('{"title":"Java NIO 比传统 IO 强在哪里？","description":"本篇内容主要讲述了 NIO 和传统 IO 之间的差异。首先，传统 IO 采用阻塞模型，而 NIO 使用非阻塞模型，通过选择器监控多个通道上的 I/O 事件，从而提升性能与可伸缩性。其次，在文件操作方面，传统 IO 依赖字节流或字符流进行文件读写，而 NIO 则利用通道和缓冲区进行操作，性能优势相对较小。最后，在网络传输方面，传统 IO 使用 Socket 和 ServerSocket，而 NIO 提供了 SocketChannel 和 ServerSocketChannel，支持非阻塞网络传输，进一步增强并发处理能力。","frontmatter":{"title":"Java NIO 比传统 IO 强在哪里？","shortTitle":"NIO比IO强在哪？","category":["Java核心"],"tag":["Java NIO"],"description":"本篇内容主要讲述了 NIO 和传统 IO 之间的差异。首先，传统 IO 采用阻塞模型，而 NIO 使用非阻塞模型，通过选择器监控多个通道上的 I/O 事件，从而提升性能与可伸缩性。其次，在文件操作方面，传统 IO 依赖字节流或字符流进行文件读写，而 NIO 则利用通道和缓冲区进行操作，性能优势相对较小。最后，在网络传输方面，传统 IO 使用 Socket 和 ServerSocket，而 NIO 提供了 SocketChannel 和 ServerSocketChannel，支持非阻塞网络传输，进一步增强并发处理能力。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"java,nio,io,Java NIO, 传统IO, 非阻塞模式, 缓冲区, 通道, 选择器"}]]},"headers":[],"relativePath":"backend/tobetter/nio/nio-better-io.md","filePath":"backend/tobetter/nio/nio-better-io.md"}'),t={name:"backend/tobetter/nio/nio-better-io.md"},c=l('<h1 id="_12-1-nio比io强在哪" tabindex="-1">12.1 NIO比IO强在哪？ <a class="header-anchor" href="#_12-1-nio比io强在哪" aria-label="Permalink to &quot;12.1 NIO比IO强在哪？&quot;">​</a></h1><p>我花了几天时间去了解<strong>NIO 的核心知识</strong>，期间看了《Java 编程思想》和《疯狂 Java 讲义》中的 NIO 模块。<strong>但是</strong>，看完之后还是很<strong>迷</strong>，不知道 NIO 是干嘛用的，网上的资料和书上的知识点没有很好地对应上。</p><p>我这里先给大家展示一副传统 IO 和 NIO 的对比图，感受一下。</p><img src="'+p+`"><p><a href="https://tobebetterjavaer.com/io/shangtou.html" target="_blank" rel="noreferrer">传统 IO</a> 基于字节流或字符流（如 FileInputStream、BufferedReader 等）进行文件读写，以及使用 <a href="https://tobebetterjavaer.com/socket/socket.html" target="_blank" rel="noreferrer">Socket 和 ServerSocket</a> 进行网络传输。</p><p>NIO 使用<a href="https://tobebetterjavaer.com/nio/buffer-channel.html" target="_blank" rel="noreferrer">通道（Channel）和缓冲区（Buffer）</a>进行文件操作，以及使用 SocketChannel 和 ServerSocketChannel 进行网络传输。</p><p>传统 IO 采用阻塞式模型，对于每个连接，都需要创建一个独立的线程来处理读写操作。当一个线程在等待 I/O 操作时，无法执行其他任务。这会导致大量线程的创建和销毁，以及上下文切换，降低了系统性能。</p><p>NIO 使用非阻塞模型，允许线程在等待 I/O 时执行其他任务。这种模式通过使用选择器（Selector）来监控多个通道（Channel）上的 I/O 事件，实现了更高的性能和可伸缩性。</p><h3 id="_01、nio-和传统-io-在操作文件时的差异" tabindex="-1">01、NIO 和传统 IO 在操作文件时的差异 <a class="header-anchor" href="#_01、nio-和传统-io-在操作文件时的差异" aria-label="Permalink to &quot;01、NIO 和传统 IO 在操作文件时的差异&quot;">​</a></h3><p>JDK 1.4 中，<code>java.nio.*包</code>引入新的 Java I/O 库，其目的是<strong>提高速度</strong>。实际上，“旧”的 I/O 包已经使用 NIO<strong>重新实现过，即使我们不显式的使用 NIO 编程，也能从中受益</strong>。</p><ul><li>nio 翻译成 no-blocking io 或者 new io 都无所谓啦，都说得通~</li></ul><p>在《Java 编程思想》读到“即使我们不显式的使用 NIO 编程，也能从中受益”的时候，我是挺在意的，所以：我们<strong>测试</strong>一下使用 NIO 复制文件和<a href="https://tobebetterjavaer.com/io/file-path.html" target="_blank" rel="noreferrer">传统 IO 复制文件</a> 的性能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">SimpleFileTransferTest</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用传统的 I/O 方法传输文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">transferFile</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">source</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">des</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">des.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">            des.</span><span style="color:#62E884;">createNewFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建输入输出流</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedInputStream</span><span style="color:#F6F6F4;"> bis </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(source));</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">BufferedOutputStream</span><span style="color:#F6F6F4;"> bos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BufferedOutputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileOutputStream</span><span style="color:#F6F6F4;">(des));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用数组传输数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] bytes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> bis.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(bytes)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            bos.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(bytes, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> endTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> endTime </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> startTime;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 使用 NIO 方法传输文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">transferFileWithNIO</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">source</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">des</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">des.</span><span style="color:#62E884;">exists</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">            des.</span><span style="color:#62E884;">createNewFile</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建随机存取文件对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RandomAccessFile</span><span style="color:#F6F6F4;"> read </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RandomAccessFile</span><span style="color:#F6F6F4;">(source, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">rw</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">RandomAccessFile</span><span style="color:#F6F6F4;"> write </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">RandomAccessFile</span><span style="color:#F6F6F4;">(des, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">rw</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 获取文件通道</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> readChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> read.</span><span style="color:#62E884;">getChannel</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FileChannel</span><span style="color:#F6F6F4;"> writeChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> write.</span><span style="color:#62E884;">getChannel</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 创建并使用 ByteBuffer 传输数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> byteBuffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (readChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(byteBuffer) </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            byteBuffer.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            writeChannel.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(byteBuffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">            byteBuffer.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 关闭文件通道</span></span>
<span class="line"><span style="color:#F6F6F4;">        writeChannel.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        readChannel.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> endTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> endTime </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> startTime;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SimpleFileTransferTest</span><span style="color:#F6F6F4;"> simpleFileTransferTest </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SimpleFileTransferTest</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> sourse </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[电影天堂www.dygod.cn]猜火车-cd1.rmvb</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> des </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">io.avi</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> nio </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">nio.avi</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 比较传统的 I/O 和 NIO 传输文件的时间</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> time </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> simpleFileTransferTest.</span><span style="color:#62E884;">transferFile</span><span style="color:#F6F6F4;">(sourse, des);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(time </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">：普通字节流时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> timeNio </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> simpleFileTransferTest.</span><span style="color:#62E884;">transferFileWithNIO</span><span style="color:#F6F6F4;">(sourse, nio);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(timeNio </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">：NIO时间</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleFileTransferTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用传统的 I/O 方法传输文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transferFile</span><span style="color:#24292E;">(File </span><span style="color:#E36209;">source</span><span style="color:#24292E;">, File </span><span style="color:#E36209;">des</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">des.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            des.</span><span style="color:#6F42C1;">createNewFile</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建输入输出流</span></span>
<span class="line"><span style="color:#24292E;">        BufferedInputStream bis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedInputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(source));</span></span>
<span class="line"><span style="color:#24292E;">        BufferedOutputStream bos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BufferedOutputStream</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileOutputStream</span><span style="color:#24292E;">(des));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用数组传输数据</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> bis.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(bytes)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            bos.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(bytes, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> endTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 NIO 方法传输文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transferFileWithNIO</span><span style="color:#24292E;">(File </span><span style="color:#E36209;">source</span><span style="color:#24292E;">, File </span><span style="color:#E36209;">des</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">des.</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            des.</span><span style="color:#6F42C1;">createNewFile</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建随机存取文件对象</span></span>
<span class="line"><span style="color:#24292E;">        RandomAccessFile read </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(source, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        RandomAccessFile write </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RandomAccessFile</span><span style="color:#24292E;">(des, </span><span style="color:#032F62;">&quot;rw&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取文件通道</span></span>
<span class="line"><span style="color:#24292E;">        FileChannel readChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> read.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        FileChannel writeChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> write.</span><span style="color:#6F42C1;">getChannel</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 创建并使用 ByteBuffer 传输数据</span></span>
<span class="line"><span style="color:#24292E;">        ByteBuffer byteBuffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (readChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(byteBuffer) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            byteBuffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            writeChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(byteBuffer);</span></span>
<span class="line"><span style="color:#24292E;">            byteBuffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 关闭文件通道</span></span>
<span class="line"><span style="color:#24292E;">        writeChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        readChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> endTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        SimpleFileTransferTest simpleFileTransferTest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleFileTransferTest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        File sourse </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[电影天堂www.dygod.cn]猜火车-cd1.rmvb&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        File des </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;io.avi&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        File nio </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nio.avi&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 比较传统的 I/O 和 NIO 传输文件的时间</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> simpleFileTransferTest.</span><span style="color:#6F42C1;">transferFile</span><span style="color:#24292E;">(sourse, des);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(time </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;：普通字节流时间&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> timeNio </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> simpleFileTransferTest.</span><span style="color:#6F42C1;">transferFileWithNIO</span><span style="color:#24292E;">(sourse, nio);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(timeNio </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;：NIO时间&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>先解释一下这段代码，里面出现的 <a href="https://tobebetterjavaer.com/io/file-path.html" target="_blank" rel="noreferrer">RandomAccessFile</a> 我们之前讲过，FileChannel 是 Java NIO（New I/O）库中的一个类，它提供了对文件的高效 I/O 操作，支持随机访问文件，允许在文件的任意位置进行读写操作。</p><p>与 RandomAccessFile 不同，FileChannel 使用了<a href="https://tobebetterjavaer.com/nio/buffer-channel.html" target="_blank" rel="noreferrer">缓冲区（ByteBuffer）</a>进行数据传输。</p><p>好，在我给出实际的结论之前，你是否会有这样的结论：</p><ul><li>对于较小的文件，NIO 和普通 IO 之间的性能差异可能不会非常明显，因为文件本身较小，复制过程较快。</li><li>对于较大的文件，使用 NIO 的性能可能会明显优于普通 IO。因为 NIO 使用了更高效的缓冲区和通道机制，可以在内存中进行更快的数据传输。</li></ul><p>然而实际的结果，却会令你大跌眼镜：</p><img src="`+o+`"><p>文件越大的情况下，竟然普通字节流（传统 IO）的速度更快(当然了，个人测试，或许不是很准)，那还要 NIO 做什么呢？况且 NIO 的学习成本也比传统 IO 要高一些。</p><p>那这意味着我们<strong>可以不使用/学习 NIO 了吗</strong>？</p><p>答案是<strong>否定</strong>的，IO 操作往往在<strong>两个场景</strong>下会用到：</p><ul><li>文件 IO</li><li>网络 IO</li></ul><p>而 NIO 的<strong>魅力主要体现在网络中</strong>！</p><p>NIO（New I/O）的设计目标是解决传统 I/O（BIO，Blocking I/O）在处理大量并发连接时的性能瓶颈。传统 I/O 在网络通信中主要使用阻塞式 I/O，为每个连接分配一个线程。当连接数量增加时，系统性能将受到严重影响，线程资源成为关键瓶颈。而 NIO 提供了非阻塞 I/O 和 I/O 多路复用，可以在单个线程中处理多个并发连接，从而在网络传输中显著提高性能。</p><p>以下是 NIO 在网络传输中优于传统 I/O 的原因：</p><p>①、NIO 支持非阻塞 I/O，这意味着在执行 I/O 操作时，线程不会被阻塞。这使得在网络传输中可以有效地管理大量并发连接（数千甚至数百万）。而在操作文件时，这个优势没有那么明显，因为文件读写通常不涉及大量并发操作。</p><p>②、NIO 支持 I/O 多路复用，这意味着一个线程可以同时监视多个通道（如套接字），并在 I/O 事件（如可读、可写）准备好时处理它们。这大大提高了网络传输中的性能，因为单个线程可以高效地管理多个并发连接。操作文件时这个优势也无法提现出来。</p><p>③、NIO 提供了 <a href="https://tobebetterjavaer.com/nio/buffer-channel.html" target="_blank" rel="noreferrer">ByteBuffer 类</a>，可以高效地管理缓冲区。这在网络传输中很重要，因为数据通常是以字节流的形式传输。操作文件的时候，虽然也有缓冲区，但优势仍然不够明显。</p><h3 id="_02、nio-和传统-io-在网络传输中的差异" tabindex="-1">02、NIO 和传统 IO 在网络传输中的差异 <a class="header-anchor" href="#_02、nio-和传统-io-在网络传输中的差异" aria-label="Permalink to &quot;02、NIO 和传统 IO 在网络传输中的差异&quot;">​</a></h3><p>来看服务器端代码的差别。</p><p>IO，用的<a href="https://tobebetterjavaer.com/socket/socket.html" target="_blank" rel="noreferrer">套接字</a>，代码比较简单，我就不加注释了，之前学过，应该都能看得懂，用 while 循环监听客户端 Socket：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">IOServer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ServerSocket</span><span style="color:#F6F6F4;"> serverSocket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ServerSocket</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">8080</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> client </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> serverSocket.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> client.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> client.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> bytesRead </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, bytesRead);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                in.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                client.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IOServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            ServerSocket serverSocket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServerSocket</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                Socket client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serverSocket.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                OutputStream out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> bytesRead </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, bytesRead);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                in.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                client.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>NIO，这部分我加上注释，主要用到的是 ServerSocketChannel 和 Selector：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">NIOServer</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 创建 ServerSocketChannel</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ServerSocketChannel</span><span style="color:#F6F6F4;"> serverSocketChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ServerSocketChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 绑定端口</span></span>
<span class="line"><span style="color:#F6F6F4;">            serverSocketChannel.</span><span style="color:#62E884;">bind</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InetSocketAddress</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">8081</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 设置为非阻塞模式</span></span>
<span class="line"><span style="color:#F6F6F4;">            serverSocketChannel.</span><span style="color:#62E884;">configureBlocking</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 创建 Selector</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Selector</span><span style="color:#F6F6F4;"> selector </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Selector.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 将 ServerSocketChannel 注册到 Selector，关注 OP_ACCEPT 事件</span></span>
<span class="line"><span style="color:#F6F6F4;">            serverSocketChannel.</span><span style="color:#62E884;">register</span><span style="color:#F6F6F4;">(selector, SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 无限循环，处理事件</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 阻塞直到有事件发生</span></span>
<span class="line"><span style="color:#F6F6F4;">                selector.</span><span style="color:#62E884;">select</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 获取发生事件的 SelectionKey</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">Iterator</span><span style="color:#F6F6F4;">&lt;SelectionKey&gt; iterator </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> selector.</span><span style="color:#62E884;">selectedKeys</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">iterator</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (iterator.</span><span style="color:#62E884;">hasNext</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">SelectionKey</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> iterator.</span><span style="color:#62E884;">next</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 处理完后，从 selectedKeys 集合中移除</span></span>
<span class="line"><span style="color:#F6F6F4;">                    iterator.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 判断事件类型</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key.</span><span style="color:#62E884;">isAcceptable</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 有新的连接请求</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">ServerSocketChannel</span><span style="color:#F6F6F4;"> server </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (ServerSocketChannel) key.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 接受连接</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#F6F6F4;"> client </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> server.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 设置为非阻塞模式</span></span>
<span class="line"><span style="color:#F6F6F4;">                        client.</span><span style="color:#62E884;">configureBlocking</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 将新的 SocketChannel 注册到 Selector，关注 OP_READ 事件</span></span>
<span class="line"><span style="color:#F6F6F4;">                        client.</span><span style="color:#62E884;">register</span><span style="color:#F6F6F4;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (key.</span><span style="color:#62E884;">isReadable</span><span style="color:#F6F6F4;">()) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 有数据可读</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#F6F6F4;"> client </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (SocketChannel) key.</span><span style="color:#62E884;">channel</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 创建 ByteBuffer 缓冲区</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">allocate</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 从 SocketChannel 中读取数据并写入 ByteBuffer</span></span>
<span class="line"><span style="color:#F6F6F4;">                        client.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 翻转 ByteBuffer，准备读取</span></span>
<span class="line"><span style="color:#F6F6F4;">                        buffer.</span><span style="color:#62E884;">flip</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 将数据从 ByteBuffer 写回到 SocketChannel</span></span>
<span class="line"><span style="color:#F6F6F4;">                        client.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#7B7F8B;">// 关闭连接</span></span>
<span class="line"><span style="color:#F6F6F4;">                        client.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    }</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NIOServer</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建 ServerSocketChannel</span></span>
<span class="line"><span style="color:#24292E;">            ServerSocketChannel serverSocketChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ServerSocketChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 绑定端口</span></span>
<span class="line"><span style="color:#24292E;">            serverSocketChannel.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8081</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 设置为非阻塞模式</span></span>
<span class="line"><span style="color:#24292E;">            serverSocketChannel.</span><span style="color:#6F42C1;">configureBlocking</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 创建 Selector</span></span>
<span class="line"><span style="color:#24292E;">            Selector selector </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Selector.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 将 ServerSocketChannel 注册到 Selector，关注 OP_ACCEPT 事件</span></span>
<span class="line"><span style="color:#24292E;">            serverSocketChannel.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, SelectionKey.OP_ACCEPT);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 无限循环，处理事件</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 阻塞直到有事件发生</span></span>
<span class="line"><span style="color:#24292E;">                selector.</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 获取发生事件的 SelectionKey</span></span>
<span class="line"><span style="color:#24292E;">                Iterator&lt;</span><span style="color:#D73A49;">SelectionKey</span><span style="color:#24292E;">&gt; iterator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> selector.</span><span style="color:#6F42C1;">selectedKeys</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (iterator.</span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                    SelectionKey key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 处理完后，从 selectedKeys 集合中移除</span></span>
<span class="line"><span style="color:#24292E;">                    iterator.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 判断事件类型</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">isAcceptable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 有新的连接请求</span></span>
<span class="line"><span style="color:#24292E;">                        ServerSocketChannel server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (ServerSocketChannel) key.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 接受连接</span></span>
<span class="line"><span style="color:#24292E;">                        SocketChannel client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 设置为非阻塞模式</span></span>
<span class="line"><span style="color:#24292E;">                        client.</span><span style="color:#6F42C1;">configureBlocking</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 将新的 SocketChannel 注册到 Selector，关注 OP_READ 事件</span></span>
<span class="line"><span style="color:#24292E;">                        client.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(selector, SelectionKey.OP_READ);</span></span>
<span class="line"><span style="color:#24292E;">                    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (key.</span><span style="color:#6F42C1;">isReadable</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 有数据可读</span></span>
<span class="line"><span style="color:#24292E;">                        SocketChannel client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (SocketChannel) key.</span><span style="color:#6F42C1;">channel</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 创建 ByteBuffer 缓冲区</span></span>
<span class="line"><span style="color:#24292E;">                        ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">allocate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 从 SocketChannel 中读取数据并写入 ByteBuffer</span></span>
<span class="line"><span style="color:#24292E;">                        client.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 翻转 ByteBuffer，准备读取</span></span>
<span class="line"><span style="color:#24292E;">                        buffer.</span><span style="color:#6F42C1;">flip</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 将数据从 ByteBuffer 写回到 SocketChannel</span></span>
<span class="line"><span style="color:#24292E;">                        client.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6A737D;">// 关闭连接</span></span>
<span class="line"><span style="color:#24292E;">                        client.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码创建了一个基于 Java NIO 的简单 TCP 服务器。它使用 <a href="https://tobebetterjavaer.com/nio/buffer-channel.html" target="_blank" rel="noreferrer">ServerSocketChannel 和 Selector（后面会讲）</a> 实现了非阻塞 I/O 和 I/O 多路复用。服务器循环监听事件，当有新的连接请求时，接受连接并将新的 SocketChannel 注册到 Selector，关注 OP_READ 事件。当有数据可读时，从 SocketChannel 中读取数据并写入 ByteBuffer，然后将数据从 ByteBuffer 写回到 SocketChannel。</p><p>这里简单说一下 <a href="https://tobebetterjavaer.com/socket/socket.html" target="_blank" rel="noreferrer">Socket 和 ServerSocket</a>，以及 ServerSocketChannel 和 SocketChannel。</p><p>Socket 和 ServerSocket 是传统的阻塞式 I/O 编程方式，用于建立和管理 TCP 连接。</p><ul><li>Socket：表示客户端套接字，负责与服务器端建立连接并进行数据的读写。</li><li>ServerSocket：表示服务器端套接字，负责监听客户端连接请求。当有新的连接请求时，ServerSocket 会创建一个新的 Socket 实例，用于与客户端进行通信。</li></ul><p>在传统阻塞式 I/O 编程中，每个连接都需要一个单独的线程进行处理，这导致了在高并发场景下的性能问题。在接下来的客户端测试用例中会看到。</p><p>为了解决传统阻塞式 I/O 的性能问题，Java NIO 引入了 <a href="https://tobebetterjavaer.com/nio/network-connect.html" target="_blank" rel="noreferrer">ServerSocketChannel 和 SocketChannel</a>。它们是非阻塞 I/O，可以在单个线程中处理多个连接。</p><ul><li>ServerSocketChannel：类似于 ServerSocket，表示服务器端套接字通道。它负责监听客户端连接请求，并可以设置为非阻塞模式，这意味着在等待客户端连接请求时不会阻塞线程。</li><li>SocketChannel：类似于 Socket，表示客户端套接字通道。它负责与服务器端建立连接并进行数据的读写。SocketChannel 也可以设置为非阻塞模式，在读写数据时不会阻塞线程。</li></ul><p>再来简单说一下 <a href="https://tobebetterjavaer.com/nio/buffer-channel.html" target="_blank" rel="noreferrer">Selector</a>，后面会再细讲。</p><p>Selector 是 Java NIO 中的一个关键组件，用于实现 <a href="https://tobebetterjavaer.com/nio/moxing.html" target="_blank" rel="noreferrer">I/O 多路复用</a>。它允许在单个线程中同时监控多个 ServerSocketChannel 和 SocketChannel，并通过 SelectionKey 标识关注的事件。当某个事件发生时，Selector 会将对应的 SelectionKey 添加到已选择的键集合中。通过使用 Selector，可以在单个线程中同时处理多个连接，从而有效地提高 I/O 操作的性能，特别是在高并发场景下。</p><p>客户端测试用例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">TestClient</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> clientCount </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10000</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> executorServiceIO </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> executorServiceNIO </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用传统 IO 的客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> ioClient </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">Socket</span><span style="color:#F6F6F4;"> socket </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Socket</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8080</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">OutputStream</span><span style="color:#F6F6F4;"> out </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getOutputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">InputStream</span><span style="color:#F6F6F4;"> in </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> socket.</span><span style="color:#62E884;">getInputStream</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                out.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, 沉默王二 IO!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">                in.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                in.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                out.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                socket.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用 NIO 的客户端</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> nioClient </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">SocketChannel</span><span style="color:#F6F6F4;"> socketChannel </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> SocketChannel.</span><span style="color:#62E884;">open</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                socketChannel.</span><span style="color:#62E884;">connect</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">InetSocketAddress</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">localhost</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8081</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">ByteBuffer</span><span style="color:#F6F6F4;"> buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ByteBuffer.</span><span style="color:#62E884;">wrap</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello, 沉默王二 NIO!</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">getBytes</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">                socketChannel.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                buffer.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                socketChannel.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer);</span></span>
<span class="line"><span style="color:#F6F6F4;">                socketChannel.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 分别测试 NIO 和传统 IO 的服务器性能</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> startTime, endTime;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> clientCount; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            executorServiceIO.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(ioClient);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        executorServiceIO.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        executorServiceIO.</span><span style="color:#62E884;">awaitTermination</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, TimeUnit.MINUTES);</span></span>
<span class="line"><span style="color:#F6F6F4;">        endTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">传统 IO 服务器处理 </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> clientCount </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 个客户端耗时: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (endTime </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> startTime) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ms</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        startTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> clientCount; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            executorServiceNIO.</span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(nioClient);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        executorServiceNIO.</span><span style="color:#62E884;">shutdown</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        executorServiceNIO.</span><span style="color:#62E884;">awaitTermination</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, TimeUnit.MINUTES);</span></span>
<span class="line"><span style="color:#F6F6F4;">        endTime </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">currentTimeMillis</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">NIO 服务器处理 </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> clientCount </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 个客户端耗时: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> (endTime </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> startTime) </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ms</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClient</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> clientCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executorServiceIO </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executorServiceNIO </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用传统 IO 的客户端</span></span>
<span class="line"><span style="color:#24292E;">        Runnable ioClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                Socket socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Socket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8080</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                OutputStream out </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getOutputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                InputStream in </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.</span><span style="color:#6F42C1;">getInputStream</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                out.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, 沉默王二 IO!&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                in.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                in.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                out.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                socket.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用 NIO 的客户端</span></span>
<span class="line"><span style="color:#24292E;">        Runnable nioClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                SocketChannel socketChannel </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> SocketChannel.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                socketChannel.</span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InetSocketAddress</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8081</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">                ByteBuffer buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ByteBuffer.</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, 沉默王二 NIO!&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                socketChannel.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                buffer.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                socketChannel.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer);</span></span>
<span class="line"><span style="color:#24292E;">                socketChannel.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 分别测试 NIO 和传统 IO 的服务器性能</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> startTime, endTime;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> clientCount; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            executorServiceIO.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(ioClient);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        executorServiceIO.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        executorServiceIO.</span><span style="color:#6F42C1;">awaitTermination</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, TimeUnit.MINUTES);</span></span>
<span class="line"><span style="color:#24292E;">        endTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;传统 IO 服务器处理 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> clientCount </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 个客户端耗时: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> clientCount; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            executorServiceNIO.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(nioClient);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        executorServiceNIO.</span><span style="color:#6F42C1;">shutdown</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        executorServiceNIO.</span><span style="color:#6F42C1;">awaitTermination</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, TimeUnit.MINUTES);</span></span>
<span class="line"><span style="color:#24292E;">        endTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NIO 服务器处理 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> clientCount </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 个客户端耗时: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime) </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ms&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个简单的性能测试中，我们使用固定线程池（10个线程）来模拟客户端并发请求。分别测试 NIO 和传统 IO 服务器处理 10000 个客户端请求所需的时间。来看一下结果。</p><img src="`+e+'"><p>可以看得出，NIO 比 传统 IO 差不多快一倍的时间。当然了，这是放在我本地测试的，如果服务端放在生产环境下，这个结果会有所不同，但我在本地跑了几次，结果差不多是这样的结果。</p><p>这说明 NIO 在网络传输中的性能确实要优于传统 IO 的。</p><h3 id="_03、小结" tabindex="-1">03、小结 <a class="header-anchor" href="#_03、小结" aria-label="Permalink to &quot;03、小结&quot;">​</a></h3><p>本篇内容主要讲了 NIO（New IO）和传统 IO 之间的差异，包括 IO 模型、操作文件、网络传输等方面。</p><ul><li>传统 I/O 采用阻塞式模型，线程在 I/O 操作期间无法执行其他任务。NIO 使用非阻塞模型，允许线程在等待 I/O 时执行其他任务，通过选择器（Selector）监控多个通道（Channel）上的 I/O 事件，提高性能和可伸缩性。</li><li>传统 I/O 使用基于字节流或字符流的类（如 FileInputStream、BufferedReader 等）进行文件读写。NIO 使用通道（Channel）和缓冲区（Buffer）进行文件操作，NIO 在性能上的优势并不大。</li><li>传统 I/O 使用 Socket 和 ServerSocket 进行网络传输，存在阻塞问题。NIO 提供了 SocketChannel 和 ServerSocketChannel，支持非阻塞网络传输，提高了并发处理能力。</li></ul>',53),r=[c];function F(y,i,E,C,u,f){return n(),a("div",null,r)}const D=s(t,[["render",F]]);export{h as __pageData,D as default};
