import{_ as a,o as e,c as s,V as n}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/java/java-19.md","filePath":"interview/backend/java/java-19.md"}'),t={name:"interview/backend/java/java-19.md"},l=n(`<h3 id="_1、日期和时间" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%EF%BC%9A" target="_blank" rel="noreferrer">1、日期和时间：</a> <a class="header-anchor" href="#_1、日期和时间" aria-label="Permalink to &quot;[1、日期和时间：](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#1日期和时间：)&quot;">​</a></h3><p><strong>1、</strong> 如何取得年月日、小时分钟秒？</p><p><strong>2、</strong> 如何取得从1970年1月1日0时0分0秒到现在的毫秒数？</p><p><strong>3、</strong> 如何取得某月的最后一天？</p><p><strong>4、</strong> 如何格式化日期？</p><p>问题1：创建java.util.Calendar 实例，调用其get()方法传入不同的参数即可获得参数所对应的值。Java 8中可以使用java.time.LocalDateTimel来获取，代码如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class DateTimeTest {</span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        Calendar cal = Calendar.getInstance();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(cal.get(Calendar.YEAR));</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(cal.get(Calendar.MONTH));    // 0 - 11</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(cal.get(Calendar.DATE));</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(cal.get(Calendar.HOUR_OF_DAY));</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(cal.get(Calendar.MINUTE));</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(cal.get(Calendar.SECOND));</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        // Java 8</span></span>
<span class="line"><span style="color:#f6f6f4;">        LocalDateTime dt = LocalDateTime.now();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(dt.getYear());</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(dt.getMonthValue());     // 1 - 12</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(dt.getDayOfMonth());</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(dt.getHour());</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(dt.getMinute());</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(dt.getSecond());</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class DateTimeTest {</span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        Calendar cal = Calendar.getInstance();</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(cal.get(Calendar.YEAR));</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(cal.get(Calendar.MONTH));    // 0 - 11</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(cal.get(Calendar.DATE));</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(cal.get(Calendar.HOUR_OF_DAY));</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(cal.get(Calendar.MINUTE));</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(cal.get(Calendar.SECOND));</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        // Java 8</span></span>
<span class="line"><span style="color:#24292e;">        LocalDateTime dt = LocalDateTime.now();</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(dt.getYear());</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(dt.getMonthValue());     // 1 - 12</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(dt.getDayOfMonth());</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(dt.getHour());</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(dt.getMinute());</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(dt.getSecond());</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>问题2：以下方法均可获得该毫秒数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Calendar.getInstance().getTimeInMillis();</span></span>
<span class="line"><span style="color:#f6f6f4;">System.currentTimeMillis();</span></span>
<span class="line"><span style="color:#f6f6f4;">Clock.systemDefaultZone().millis(); // Java 8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Calendar.getInstance().getTimeInMillis();</span></span>
<span class="line"><span style="color:#24292e;">System.currentTimeMillis();</span></span>
<span class="line"><span style="color:#24292e;">Clock.systemDefaultZone().millis(); // Java 8</span></span></code></pre></div><p>问题3：代码如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Calendar time = Calendar.getInstance();</span></span>
<span class="line"><span style="color:#f6f6f4;">time.getActualMaximum(Calendar.DAY_OF_MONTH);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Calendar time = Calendar.getInstance();</span></span>
<span class="line"><span style="color:#24292e;">time.getActualMaximum(Calendar.DAY_OF_MONTH);</span></span></code></pre></div><p>问题4：利用java.text.DataFormat 的子类（如SimpleDateFormat类）中的format(Date)方法可将日期格式化。Java 8中可以用java.time.format.DateTimeFormatter来格式化时间日期，代码如下所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">import java.text.SimpleDateFormat;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.time.LocalDate;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.time.format.DateTimeFormatter;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.util.Date;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">class DateFormatTest {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        SimpleDateFormat oldFormatter = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        Date date1 = new Date();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(oldFormatter.format(date1));</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        // Java 8</span></span>
<span class="line"><span style="color:#f6f6f4;">        DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        LocalDate date2 = LocalDate.now();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(date2.format(newFormatter));</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import java.text.SimpleDateFormat;</span></span>
<span class="line"><span style="color:#24292e;">import java.time.LocalDate;</span></span>
<span class="line"><span style="color:#24292e;">import java.time.format.DateTimeFormatter;</span></span>
<span class="line"><span style="color:#24292e;">import java.util.Date;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">class DateFormatTest {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        SimpleDateFormat oldFormatter = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        Date date1 = new Date();</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(oldFormatter.format(date1));</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        // Java 8</span></span>
<span class="line"><span style="color:#24292e;">        DateTimeFormatter newFormatter = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        LocalDate date2 = LocalDate.now();</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(date2.format(newFormatter));</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><blockquote><p>补充：Java的时间日期API一直以来都是被诟病的东西，为了解决这一问题，Java 8中引入了新的时间日期API，其中包括LocalDate、LocalTime、LocalDateTime、Clock、Instant等类，这些的类的设计都使用了不变模式，因此是线程安全的设计。</p></blockquote><h3 id="_2、xml文档定义有几种形式-它们之间有何本质区别-解析xml文档有哪几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2xml%E6%96%87%E6%A1%A3%E5%AE%9A%E4%B9%89%E6%9C%89%E5%87%A0%E7%A7%8D%E5%BD%A2%E5%BC%8F%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BD%95%E6%9C%AC%E8%B4%A8%E5%8C%BA%E5%88%AB%E8%A7%A3%E6%9E%90xml%E6%96%87%E6%A1%A3%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">2、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？</a> <a class="header-anchor" href="#_2、xml文档定义有几种形式-它们之间有何本质区别-解析xml文档有哪几种方式" aria-label="Permalink to &quot;[2、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#2xml文档定义有几种形式它们之间有何本质区别解析xml文档有哪几种方式)&quot;">​</a></h3><p>XML文档定义分为DTD和Schema两种形式，二者都是对XML语法的约束，其本质区别在于Schema本身也是一个XML文件，可以被XML解析器解析，而且可以为XML承载的数据定义类型，约束能力较之DTD更强大。对XML的解析主要有DOM（文档对象模型，Document Object Model）、SAX（Simple API for XML）和StAX（Java 6中引入的新的解析XML的方式，Streaming API for XML），其中DOM处理大型文件时其性能下降的非常厉害，这个问题是由DOM树结构占用的内存较多造成的，而且DOM解析方式必须在解析文件之前把整个文档装入内存，适合对XML的随机访问（典型的用空间换取时间的策略）；SAX是事件驱动型的XML解析方式，它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过事件回调代码来处理XML文件，适合对XML的顺序访问；顾名思义，StAX把重点放在流上，实际上StAX与其他解析方式的本质区别就在于应用程序能够把XML作为一个事件流来处理。将XML作为一组事件来处理的想法并不新颖（SAX就是这样做的），但不同之处在于StAX允许应用程序代码把这些事件逐个拉出来，而不用提供在解析器方便时从解析器中接收事件的处理程序。</p><h3 id="_3、依赖注入和工程模式之间有什么不同" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E5%92%8C%E5%B7%A5%E7%A8%8B%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E4%B8%8D%E5%90%8C" target="_blank" rel="noreferrer">3、依赖注入和工程模式之间有什么不同？</a> <a class="header-anchor" href="#_3、依赖注入和工程模式之间有什么不同" aria-label="Permalink to &quot;[3、依赖注入和工程模式之间有什么不同？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#3依赖注入和工程模式之间有什么不同)&quot;">​</a></h3><p>虽然两种模式都是将对象的创建从应用的逻辑中分离，但是依赖注入比工程模式更清晰。通过依赖注入，你的类就是 POJO，它只知道依赖而不关心它们怎么获取。使用工厂模式，你的类需要通过工厂来获取依赖。因此，使用 DI 会比使用工厂模式更容易测试。</p><h3 id="_4、java-堆的结构是什么样子的-什么是堆中的永久代-perm-gen-space" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4java-%E5%A0%86%E7%9A%84%E7%BB%93%E6%9E%84%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E5%AD%90%E7%9A%84%E4%BB%80%E4%B9%88%E6%98%AF%E5%A0%86%E4%B8%AD%E7%9A%84%E6%B0%B8%E4%B9%85%E4%BB%A3perm-gen-space" target="_blank" rel="noreferrer">4、Java 堆的结构是什么样子的？什么是堆中的永久代（Perm Gen space）</a> <a class="header-anchor" href="#_4、java-堆的结构是什么样子的-什么是堆中的永久代-perm-gen-space" aria-label="Permalink to &quot;[4、Java 堆的结构是什么样子的？什么是堆中的永久代（Perm Gen space）](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#4java-堆的结构是什么样子的什么是堆中的永久代perm-gen-space)&quot;">​</a></h3><p>JVM 的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在 JVM 启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。</p><p>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些 对象回收掉之前，他们会一直占据堆内存空间。</p><h3 id="_5、如何修改tomcat的端口号" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9tomcat%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7" target="_blank" rel="noreferrer">5、如何修改tomcat的端口号？</a> <a class="header-anchor" href="#_5、如何修改tomcat的端口号" aria-label="Permalink to &quot;[5、如何修改tomcat的端口号？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#5如何修改tomcat的端口号)&quot;">​</a></h3><p>在tomcat根目录的conf文件夹内打开server.xml文件，修改Connector节点的port属性</p><h3 id="_6、java有没有goto" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6java%E6%9C%89%E6%B2%A1%E6%9C%89goto" target="_blank" rel="noreferrer">6、Java有没有goto？</a> <a class="header-anchor" href="#_6、java有没有goto" aria-label="Permalink to &quot;[6、Java有没有goto？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#6java有没有goto)&quot;">​</a></h3><p>goto 是Java中的保留字，在目前版本的Java中没有使用。（根据James Gosling（Java之父）编写的《The Java Programming Language》一书的附录中给出了一个Java关键字列表，其中有goto和const，但是这两个是目前无法使用的关键字，因此有些地方将其称之为保留字，其实保留字这个词应该有更广泛的意义，因为熟悉C语言的程序员都知道，在系统类库中使用过的有特殊意义的单词或单词的组合都被视为保留字）</p><h3 id="_7、java-内存分配与回收策率以及-minor-gc-和-major-gc" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7java-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%8E%87%E4%BB%A5%E5%8F%8A-minor-gc-%E5%92%8C-major-gc" target="_blank" rel="noreferrer">7、Java 内存分配与回收策率以及 Minor GC 和 Major GC</a> <a class="header-anchor" href="#_7、java-内存分配与回收策率以及-minor-gc-和-major-gc" aria-label="Permalink to &quot;[7、Java 内存分配与回收策率以及 Minor GC 和 Major GC](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#7java-内存分配与回收策率以及-minor-gc-和-major-gc)&quot;">​</a></h3><p><strong>1、</strong> 对象优先在堆的 Eden 区分配</p><p><strong>2、</strong> 大对象直接进入老年代</p><p><strong>3、</strong> 长期存活的对象将直接进入老年代</p><p>当 Eden 区没有足够的空间进行分配时，虚拟机会执行一次 Minor GC。Minor GC 通常发生在新生代的 Eden 区，在这个区的对象生存期短，往往发生 Gc 的频率较高，回收速度比较快；Full GC/Major GC 发生在老年代，一般情况下，触发老年代 GC 的时候不会触发 Minor GC，但是通过配置，可以在 Full GC 之前进行一次 Minor GC 这样可以加快老年代的回收速度。</p><h3 id="_8、简述hibernate常见优化策略。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E7%AE%80%E8%BF%B0hibernate%E5%B8%B8%E8%A7%81%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5%E3%80%82" target="_blank" rel="noreferrer">8、简述Hibernate常见优化策略。</a> <a class="header-anchor" href="#_8、简述hibernate常见优化策略。" aria-label="Permalink to &quot;[8、简述Hibernate常见优化策略。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#8简述hibernate常见优化策略。)&quot;">​</a></h3><p><strong>1、</strong> 制定合理的缓存策略（二级缓存、查询缓存）。</p><p><strong>2、</strong> 采用合理的Session管理机制。</p><p><strong>3、</strong> 尽量使用延迟加载特性。</p><p><strong>4、</strong> 设定合理的批处理参数。</p><p><strong>5、</strong> 如果可以，选用UUID作为主键生成器。</p><p><strong>6、</strong> 如果可以，选用乐观锁替代悲观锁。</p><p><strong>7、</strong> 在开发过程中, 开启hibernate.show_sql选项查看生成的SQL，从而了解底层的状况；开发完成后关闭此选项。</p><p><strong>8、</strong> 考虑数据库本身的优化，合理的索引、恰当的数据分区策略等都会对持久层的性能带来可观的提升，但这些需要专业的DBA（数据库管理员）提供支持。</p><h3 id="_9、statement与preparedstatement区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9statement%E4%B8%8Epreparedstatement%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、Statement与preparedStatement区别</a> <a class="header-anchor" href="#_9、statement与preparedstatement区别" aria-label="Permalink to &quot;[9、Statement与preparedStatement区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#9statement与preparedstatement区别)&quot;">​</a></h3><p>preparedStatement会预编译sql语句，能够提高批量的数据操作的执行效率，Statement执行slq的时候才进行编译</p><p>Preparedstatement在第一次执行sql的时候，比较耗费资源。如果只对数据库进行一次操作，使用statement比较好。</p><p>Statement会出现sql注入的问题，使用preparedstatment可以解决sql注入</p><h3 id="_10、什么是dao模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10%E4%BB%80%E4%B9%88%E6%98%AFdao%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">10、什么是DAO模式？</a> <a class="header-anchor" href="#_10、什么是dao模式" aria-label="Permalink to &quot;[10、什么是DAO模式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Java/Java最新2021年面试题，高级面试题及附答案解析.md#10什么是dao模式)&quot;">​</a></h3><p>DAO（Data Access Object）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共API中。用程序设计语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有事务方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口，在逻辑上该类对应一个特定的数据存储。DAO模式实际上包含了两个模式，一是Data Accessor（数据访问器），二是Data Object（数据对象），前者要解决如何访问数据的问题，而后者要解决的是如何用对象封装数据。</p><h3 id="_11、safepoint是什么" tabindex="-1">11、safepoint是什么？ <a class="header-anchor" href="#_11、safepoint是什么" aria-label="Permalink to &quot;11、safepoint是什么？&quot;">​</a></h3><h3 id="_12、什么是阻塞式方法" tabindex="-1">12、什么是阻塞式方法？ <a class="header-anchor" href="#_12、什么是阻塞式方法" aria-label="Permalink to &quot;12、什么是阻塞式方法？&quot;">​</a></h3><h3 id="_13、解释什么是jasper" tabindex="-1">13、解释什么是Jasper? <a class="header-anchor" href="#_13、解释什么是jasper" aria-label="Permalink to &quot;13、解释什么是Jasper?&quot;">​</a></h3><h3 id="_14、说一下-runnable-和-callable-有什么区别" tabindex="-1">14、说一下 runnable 和 callable 有什么区别 <a class="header-anchor" href="#_14、说一下-runnable-和-callable-有什么区别" aria-label="Permalink to &quot;14、说一下 runnable 和 callable 有什么区别&quot;">​</a></h3><h3 id="_15、抽象类可以使用final修饰吗" tabindex="-1">15、抽象类可以使用final修饰吗？ <a class="header-anchor" href="#_15、抽象类可以使用final修饰吗" aria-label="Permalink to &quot;15、抽象类可以使用final修饰吗？&quot;">​</a></h3><h3 id="_16、双亲委派机制可以被违背吗-请举例说明。" tabindex="-1">16、双亲委派机制可以被违背吗？请举例说明。 <a class="header-anchor" href="#_16、双亲委派机制可以被违背吗-请举例说明。" aria-label="Permalink to &quot;16、双亲委派机制可以被违背吗？请举例说明。&quot;">​</a></h3><h3 id="_17、如何让正在运行的线程暂停一段时间" tabindex="-1">17、如何让正在运行的线程暂停一段时间？ <a class="header-anchor" href="#_17、如何让正在运行的线程暂停一段时间" aria-label="Permalink to &quot;17、如何让正在运行的线程暂停一段时间？&quot;">​</a></h3><h3 id="_18、代理的分类" tabindex="-1">18、代理的分类 <a class="header-anchor" href="#_18、代理的分类" aria-label="Permalink to &quot;18、代理的分类&quot;">​</a></h3><h3 id="_19、多线程的价值" tabindex="-1">19、多线程的价值？ <a class="header-anchor" href="#_19、多线程的价值" aria-label="Permalink to &quot;19、多线程的价值？&quot;">​</a></h3><h3 id="_20、gc-是什么-为什么要有-gc" tabindex="-1">20、GC 是什么？为什么要有 GC？ <a class="header-anchor" href="#_20、gc-是什么-为什么要有-gc" aria-label="Permalink to &quot;20、GC 是什么？为什么要有 GC？&quot;">​</a></h3><h3 id="_21、什么是jdk-什么是jre" tabindex="-1">21、什么是JDK？什么是JRE? <a class="header-anchor" href="#_21、什么是jdk-什么是jre" aria-label="Permalink to &quot;21、什么是JDK？什么是JRE?&quot;">​</a></h3><h3 id="_22、final在java中的作用" tabindex="-1">22、Final在java中的作用 <a class="header-anchor" href="#_22、final在java中的作用" aria-label="Permalink to &quot;22、Final在java中的作用&quot;">​</a></h3><h3 id="_23、请说明nat协议的目的是什么" tabindex="-1">23、请说明NAT协议的目的是什么? <a class="header-anchor" href="#_23、请说明nat协议的目的是什么" aria-label="Permalink to &quot;23、请说明NAT协议的目的是什么?&quot;">​</a></h3><h3 id="_24、抽象类是什么-它与接口有什么区别-你为什么要使用过抽象类" tabindex="-1">24、抽象类是什么？它与接口有什么区别？你为什么要使用过抽象类？ <a class="header-anchor" href="#_24、抽象类是什么-它与接口有什么区别-你为什么要使用过抽象类" aria-label="Permalink to &quot;24、抽象类是什么？它与接口有什么区别？你为什么要使用过抽象类？&quot;">​</a></h3><h3 id="_25、那针对浮点型数据运算出现的误差的问题-你怎么解决" tabindex="-1">25、那针对浮点型数据运算出现的误差的问题，你怎么解决？ <a class="header-anchor" href="#_25、那针对浮点型数据运算出现的误差的问题-你怎么解决" aria-label="Permalink to &quot;25、那针对浮点型数据运算出现的误差的问题，你怎么解决？&quot;">​</a></h3><h3 id="_26、java中集合框架的有几个" tabindex="-1">26、Java中集合框架的有几个？ <a class="header-anchor" href="#_26、java中集合框架的有几个" aria-label="Permalink to &quot;26、Java中集合框架的有几个？&quot;">​</a></h3><h3 id="_27、java-中-dom-和-sax-解析器有什么不同" tabindex="-1">27、Java 中，DOM 和 SAX 解析器有什么不同？ <a class="header-anchor" href="#_27、java-中-dom-和-sax-解析器有什么不同" aria-label="Permalink to &quot;27、Java 中，DOM 和 SAX 解析器有什么不同？&quot;">​</a></h3><h3 id="_28、java中是值传递引用传递" tabindex="-1">28、java中是值传递引用传递？ <a class="header-anchor" href="#_28、java中是值传递引用传递" aria-label="Permalink to &quot;28、java中是值传递引用传递？&quot;">​</a></h3><h3 id="_29、如何理解hibernate的延迟加载机制-在实际应用中-延迟加载与session关闭的矛盾是如何处理的" tabindex="-1">29、如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？ <a class="header-anchor" href="#_29、如何理解hibernate的延迟加载机制-在实际应用中-延迟加载与session关闭的矛盾是如何处理的" aria-label="Permalink to &quot;29、如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？&quot;">​</a></h3><h3 id="_30、final、finalize-、finally-作用" tabindex="-1">30、final、finalize()、finally，作用 <a class="header-anchor" href="#_30、final、finalize-、finally-作用" aria-label="Permalink to &quot;30、final、finalize()、finally，作用&quot;">​</a></h3><h3 id="_31、为什么hashmap中string、integer这样的包装类适合作为k" tabindex="-1">31、为什么HashMap中String、Integer这样的包装类适合作为K？ <a class="header-anchor" href="#_31、为什么hashmap中string、integer这样的包装类适合作为k" aria-label="Permalink to &quot;31、为什么HashMap中String、Integer这样的包装类适合作为K？&quot;">​</a></h3><h3 id="_32、除了使用new创建对象之外-还可以用什么方法创建对象" tabindex="-1">32、除了使用new创建对象之外，还可以用什么方法创建对象？ <a class="header-anchor" href="#_32、除了使用new创建对象之外-还可以用什么方法创建对象" aria-label="Permalink to &quot;32、除了使用new创建对象之外，还可以用什么方法创建对象？&quot;">​</a></h3><h3 id="_33、继承和组合之间有什么不同" tabindex="-1">33、继承和组合之间有什么不同？ <a class="header-anchor" href="#_33、继承和组合之间有什么不同" aria-label="Permalink to &quot;33、继承和组合之间有什么不同？&quot;">​</a></h3><h3 id="_34、数组有没有length-方法-string有没有length-方法" tabindex="-1">34、数组有没有length()方法？String有没有length()方法？ <a class="header-anchor" href="#_34、数组有没有length-方法-string有没有length-方法" aria-label="Permalink to &quot;34、数组有没有length()方法？String有没有length()方法？&quot;">​</a></h3><h3 id="_35、事务的使用场景在什么地方" tabindex="-1">35、事务的使用场景在什么地方？ <a class="header-anchor" href="#_35、事务的使用场景在什么地方" aria-label="Permalink to &quot;35、事务的使用场景在什么地方？&quot;">​</a></h3><h3 id="_36、说一下堆和栈的区别" tabindex="-1">36、说一下堆和栈的区别 <a class="header-anchor" href="#_36、说一下堆和栈的区别" aria-label="Permalink to &quot;36、说一下堆和栈的区别&quot;">​</a></h3><h3 id="_37、除了单例模式-你在生产环境中还用过什么设计模式" tabindex="-1">37、除了单例模式，你在生产环境中还用过什么设计模式？ <a class="header-anchor" href="#_37、除了单例模式-你在生产环境中还用过什么设计模式" aria-label="Permalink to &quot;37、除了单例模式，你在生产环境中还用过什么设计模式？&quot;">​</a></h3><h3 id="_38、什么是工厂模式" tabindex="-1">38、什么是工厂模式 <a class="header-anchor" href="#_38、什么是工厂模式" aria-label="Permalink to &quot;38、什么是工厂模式&quot;">​</a></h3><h3 id="_39、synchronized可重入的原理" tabindex="-1">39、synchronized可重入的原理 <a class="header-anchor" href="#_39、synchronized可重入的原理" aria-label="Permalink to &quot;39、synchronized可重入的原理&quot;">​</a></h3><h3 id="_40、双亲委派" tabindex="-1">40、双亲委派 <a class="header-anchor" href="#_40、双亲委派" aria-label="Permalink to &quot;40、双亲委派&quot;">​</a></h3><h3 id="_41、说出-5-条-io-的最佳实践-答案" tabindex="-1">41、说出 5 条 IO 的最佳实践(答案) <a class="header-anchor" href="#_41、说出-5-条-io-的最佳实践-答案" aria-label="Permalink to &quot;41、说出 5 条 IO 的最佳实践(答案)&quot;">​</a></h3>`,76),o=[l];function r(p,i,c,E,d,h){return e(),s("div",null,o)}const u=a(t,[["render",r]]);export{f as __pageData,u as default};
