import{_ as a,o as e,c as n,V as r}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/spring/spring-02.md","filePath":"interview/backend/spring/spring-02.md"}'),o={name:"interview/backend/spring/spring-02.md"},s=r(`<h3 id="_1、既然nginx可以实现网关-为什么还需要使用zuul框架" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E6%97%A2%E7%84%B6nginx%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E7%BD%91%E5%85%B3%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8zuul%E6%A1%86%E6%9E%B6" target="_blank" rel="noreferrer">1、既然Nginx可以实现网关？为什么还需要使用Zuul框架</a> <a class="header-anchor" href="#_1、既然nginx可以实现网关-为什么还需要使用zuul框架" aria-label="Permalink to &quot;[1、既然Nginx可以实现网关？为什么还需要使用Zuul框架](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#1既然nginx可以实现网关为什么还需要使用zuul框架)&quot;">​</a></h3><p>Zuul是SpringCloud集成的网关，使用Java语言编写，可以对SpringCloud架构提供更灵活的服务。</p><h3 id="_2、jpa-和-hibernate-有哪些区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2jpa-%E5%92%8C-hibernate-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、JPA 和 Hibernate 有哪些区别？</a> <a class="header-anchor" href="#_2、jpa-和-hibernate-有哪些区别" aria-label="Permalink to &quot;[2、JPA 和 Hibernate 有哪些区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#2jpa-和-hibernate-有哪些区别)&quot;">​</a></h3><p>简而言之</p><p>JPA 是一个规范或者接口</p><p>Hibernate 是 JPA 的一个实现</p><p>当我们使用 JPA 的时候，我们使用 javax.persistence 包中的注释和接口时，不需要使用 hibernate 的导入包。</p><p>我们建议使用 JPA 注释，因为哦我们没有将其绑定到 Hibernate 作为实现。后来（我知道 - 小于百分之一的几率），我们可以使用另一种 JPA 实现。</p><h3 id="_3、什么是持续监测" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E4%BB%80%E4%B9%88%E6%98%AF%E6%8C%81%E7%BB%AD%E7%9B%91%E6%B5%8B" target="_blank" rel="noreferrer">3、什么是持续监测？</a> <a class="header-anchor" href="#_3、什么是持续监测" aria-label="Permalink to &quot;[3、什么是持续监测？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#3什么是持续监测)&quot;">​</a></h3><p>持续监控深入监控覆盖范围，从浏览器内前端性能指标，到应用程序性能，再到主机虚拟化基础架构指标。</p><h3 id="_4、spring-应用程序有哪些不同组件" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4spring-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9C%89%E5%93%AA%E4%BA%9B%E4%B8%8D%E5%90%8C%E7%BB%84%E4%BB%B6" target="_blank" rel="noreferrer">4、Spring 应用程序有哪些不同组件？</a> <a class="header-anchor" href="#_4、spring-应用程序有哪些不同组件" aria-label="Permalink to &quot;[4、Spring 应用程序有哪些不同组件？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#4spring-应用程序有哪些不同组件)&quot;">​</a></h3><p><strong>Spring 应用一般有以下组件：</strong></p><p><strong>1、</strong> 接口 - 定义功能。</p><p><strong>2、</strong> Bean 类 - 它包含属性，setter 和 getter 方法，函数等。</p><p><strong>3、</strong> Spring 面向切面编程（AOP） - 提供面向切面编程的功能。</p><p><strong>4、</strong> Bean 配置文件 - 包含类的信息以及如何配置它们。</p><p><strong>5、</strong> 用户程序 - 它使用接口。</p><h3 id="_5、服务注册和发现是什么意思-spring-cloud如何实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9Dspring-cloud%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">5、服务注册和发现是什么意思？Spring Cloud如何实现？</a> <a class="header-anchor" href="#_5、服务注册和发现是什么意思-spring-cloud如何实现" aria-label="Permalink to &quot;[5、服务注册和发现是什么意思？Spring Cloud如何实现？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#5服务注册和发现是什么意思spring-cloud如何实现)&quot;">​</a></h3><p>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。Eureka服务注册和发现可以在这种情况下提供帮助。由于所有服务都在Eureka服务器上注册并通过调用Eureka服务器完成查找，因此无需处理服务地点的任何更改和处理。</p><h3 id="_6、项目中前后端分离部署-所以需要解决跨域的问题。" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%83%A8%E7%BD%B2%E6%89%80%E4%BB%A5%E9%9C%80%E8%A6%81%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82" target="_blank" rel="noreferrer">6、项目中前后端分离部署，所以需要解决跨域的问题。</a> <a class="header-anchor" href="#_6、项目中前后端分离部署-所以需要解决跨域的问题。" aria-label="Permalink to &quot;[6、项目中前后端分离部署，所以需要解决跨域的问题。](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#6项目中前后端分离部署所以需要解决跨域的问题。)&quot;">​</a></h3><p>我们使用cookie存放用户登录的信息，在spring拦截器进行权限控制，当权限不符合时，直接返回给用户固定的json结果。</p><p>当用户登录以后，正常使用；当用户退出登录状态时或者token过期时，由于拦截器和跨域的顺序有问题，出现了跨域的现象。</p><p>我们知道一个http请求，先走filter，到达servlet后才进行拦截器的处理，如果我们把cors放在filter里，就可以优先于权限拦截器执行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">@Configuration</span></span>
<span class="line"><span style="color:#f6f6f4;">public class CorsConfig {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    @Bean</span></span>
<span class="line"><span style="color:#f6f6f4;">    public CorsFilter corsFilter() {</span></span>
<span class="line"><span style="color:#f6f6f4;">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span></span>
<span class="line"><span style="color:#f6f6f4;">        corsConfiguration.addAllowedOrigin(&quot;*&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        corsConfiguration.addAllowedHeader(&quot;*&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        corsConfiguration.addAllowedMethod(&quot;*&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        corsConfiguration.setAllowCredentials(true);</span></span>
<span class="line"><span style="color:#f6f6f4;">        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();</span></span>
<span class="line"><span style="color:#f6f6f4;">        urlBasedCorsConfigurationSource.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);</span></span>
<span class="line"><span style="color:#f6f6f4;">        return new CorsFilter(urlBasedCorsConfigurationSource);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@Configuration</span></span>
<span class="line"><span style="color:#24292e;">public class CorsConfig {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    @Bean</span></span>
<span class="line"><span style="color:#24292e;">    public CorsFilter corsFilter() {</span></span>
<span class="line"><span style="color:#24292e;">        CorsConfiguration corsConfiguration = new CorsConfiguration();</span></span>
<span class="line"><span style="color:#24292e;">        corsConfiguration.addAllowedOrigin(&quot;*&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        corsConfiguration.addAllowedHeader(&quot;*&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        corsConfiguration.addAllowedMethod(&quot;*&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        corsConfiguration.setAllowCredentials(true);</span></span>
<span class="line"><span style="color:#24292e;">        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();</span></span>
<span class="line"><span style="color:#24292e;">        urlBasedCorsConfigurationSource.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);</span></span>
<span class="line"><span style="color:#24292e;">        return new CorsFilter(urlBasedCorsConfigurationSource);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_7、spring-cloud-stream" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7spring-cloud-stream" target="_blank" rel="noreferrer">7、Spring Cloud Stream</a> <a class="header-anchor" href="#_7、spring-cloud-stream" aria-label="Permalink to &quot;[7、Spring Cloud Stream](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#7spring-cloud-stream)&quot;">​</a></h3><p>轻量级事件驱动微服务框架，可以使用简单的声明式模型来发送及接收消息，主要实现为Apache Kafka及RabbitMQ。</p><h3 id="_8、如何设置服务发现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0" target="_blank" rel="noreferrer">8、如何设置服务发现？</a> <a class="header-anchor" href="#_8、如何设置服务发现" aria-label="Permalink to &quot;[8、如何设置服务发现？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#8如何设置服务发现)&quot;">​</a></h3><p>有多种方法可以设置服务发现。我将选择我认为效率最高的那个，Netflix的Eureka。这是一个简单的程序，不会对应用程序造成太大影响。此外，它支持多种类型的Web应用程序。 Eureka配置包括两个步骤 - 客户端配置和服务器配置。</p><p>使用属性文件可以轻松完成客户端配置。在clas spath中，Eureka搜索一个eureka-client.properties文件。它还搜索由特定于环境的属性文件中的环境引起的覆盖。</p><p>对于服务器配置，您必须首先配置客户端。完成后，服务器启动一个客户端，该客户端用于查找其他服务器。。默认情况下，Eureka服务器使用客户端配置来查找对等服务器。</p><h3 id="_9、path-users-collectionresourcerel-users-如何与-spring-data-rest-一起使用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9path=users,-collectionresourcerel=users-%E5%A6%82%E4%BD%95%E4%B8%8E-spring-data-rest-%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">9、path=”users”, collectionResourceRel=”users” 如何与 Spring Data Rest 一起使用？</a> <a class="header-anchor" href="#_9、path-users-collectionresourcerel-users-如何与-spring-data-rest-一起使用" aria-label="Permalink to &quot;[9、path=”users”, collectionResourceRel=”users” 如何与 Spring Data Rest 一起使用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#9path=users,-collectionresourcerel=users-如何与-spring-data-rest-一起使用)&quot;">​</a></h3><p>path- 这个资源要导出的路径段。</p><p>collectionResourceRel- 生成指向集合资源的链接时使用的 rel 值。在生成 HATEOAS 链接时使用。</p><h3 id="_10、spring-cloud-实现服务注册和发现的原理是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10spring-cloud-%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">10、Spring Cloud 实现服务注册和发现的原理是什么？</a> <a class="header-anchor" href="#_10、spring-cloud-实现服务注册和发现的原理是什么" aria-label="Permalink to &quot;[10、Spring Cloud 实现服务注册和发现的原理是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring高级面试题合集，附答案解析.md#10spring-cloud-实现服务注册和发现的原理是什么)&quot;">​</a></h3><p><strong>1、</strong> 服务在发布时指定对应的服务名（服务名包括了 IP 地址和端口）将服务注册到注册中心（Eureka 或者 Zookeeper）这一过程是 Spring Cloud 自动实现的，只需要在 main 方法添加 @EnableDisscoveryClient 即可，同一个服务修改端口就可以启动多个实例。</p><p><strong>2、</strong> 调用方法：传递服务名称通过注册中心获取所有的可用实例，通过负载均衡策略调用（Ribbon 和 Feign）对应的服务。</p><h3 id="_11、我们可以用微服务创建状态机吗" tabindex="-1">11、我们可以用微服务创建状态机吗？ <a class="header-anchor" href="#_11、我们可以用微服务创建状态机吗" aria-label="Permalink to &quot;11、我们可以用微服务创建状态机吗？&quot;">​</a></h3><h3 id="_12、开启-springboot-特性有哪几种方式" tabindex="-1">12、开启 SpringBoot 特性有哪几种方式？ <a class="header-anchor" href="#_12、开启-springboot-特性有哪几种方式" aria-label="Permalink to &quot;12、开启 SpringBoot 特性有哪几种方式？&quot;">​</a></h3><h3 id="_13、spring-mvc怎么样设定重定向和转发的" tabindex="-1">13、Spring MVC怎么样设定重定向和转发的？ <a class="header-anchor" href="#_13、spring-mvc怎么样设定重定向和转发的" aria-label="Permalink to &quot;13、Spring MVC怎么样设定重定向和转发的？&quot;">​</a></h3><h3 id="_14、开启-springboot-特性有哪几种方式" tabindex="-1">14、开启 SpringBoot 特性有哪几种方式？ <a class="header-anchor" href="#_14、开启-springboot-特性有哪几种方式" aria-label="Permalink to &quot;14、开启 SpringBoot 特性有哪几种方式？&quot;">​</a></h3><h3 id="_15、zuul与nginx有什么区别" tabindex="-1">15、Zuul与Nginx有什么区别？ <a class="header-anchor" href="#_15、zuul与nginx有什么区别" aria-label="Permalink to &quot;15、Zuul与Nginx有什么区别？&quot;">​</a></h3><h3 id="_16、spring-mvc用什么对象从后台向前台传递数据的" tabindex="-1">16、Spring MVC用什么对象从后台向前台传递数据的？ <a class="header-anchor" href="#_16、spring-mvc用什么对象从后台向前台传递数据的" aria-label="Permalink to &quot;16、Spring MVC用什么对象从后台向前台传递数据的？&quot;">​</a></h3><h3 id="_17、什么是编织-weaving" tabindex="-1">17、什么是编织（Weaving）？ <a class="header-anchor" href="#_17、什么是编织-weaving" aria-label="Permalink to &quot;17、什么是编织（Weaving）？&quot;">​</a></h3><h3 id="_18、各服务之间通信-对restful和rpc这2种方式如何做选择" tabindex="-1">18、各服务之间通信，对Restful和Rpc这2种方式如何做选择？ <a class="header-anchor" href="#_18、各服务之间通信-对restful和rpc这2种方式如何做选择" aria-label="Permalink to &quot;18、各服务之间通信，对Restful和Rpc这2种方式如何做选择？&quot;">​</a></h3><h3 id="_19、什么是yaml" tabindex="-1">19、什么是YAML? <a class="header-anchor" href="#_19、什么是yaml" aria-label="Permalink to &quot;19、什么是YAML?&quot;">​</a></h3><h3 id="_20、如何使用springboot实现分页和排序" tabindex="-1">20、如何使用SpringBoot实现分页和排序？ <a class="header-anchor" href="#_20、如何使用springboot实现分页和排序" aria-label="Permalink to &quot;20、如何使用SpringBoot实现分页和排序？&quot;">​</a></h3><h3 id="_21、如何在不使用basepackage过滤器的情况下排除程序包" tabindex="-1">21、如何在不使用BasePACKAGE过滤器的情况下排除程序包？ <a class="header-anchor" href="#_21、如何在不使用basepackage过滤器的情况下排除程序包" aria-label="Permalink to &quot;21、如何在不使用BasePACKAGE过滤器的情况下排除程序包？&quot;">​</a></h3><h3 id="_22、是否可以在spring-boot中更改嵌入式tomcat服务器的端口" tabindex="-1">22、是否可以在Spring boot中更改嵌入式Tomcat服务器的端口? <a class="header-anchor" href="#_22、是否可以在spring-boot中更改嵌入式tomcat服务器的端口" aria-label="Permalink to &quot;22、是否可以在Spring boot中更改嵌入式Tomcat服务器的端口?&quot;">​</a></h3><h3 id="_23、什么是feign" tabindex="-1">23、什么是Feign？ <a class="header-anchor" href="#_23、什么是feign" aria-label="Permalink to &quot;23、什么是Feign？&quot;">​</a></h3><h3 id="_24、springboot-是否可以使用-xml-配置" tabindex="-1">24、SpringBoot 是否可以使用 XML 配置 ? <a class="header-anchor" href="#_24、springboot-是否可以使用-xml-配置" aria-label="Permalink to &quot;24、SpringBoot 是否可以使用 XML 配置 ?&quot;">​</a></h3><h3 id="_25、pact如何运作" tabindex="-1">25、PACT如何运作？ <a class="header-anchor" href="#_25、pact如何运作" aria-label="Permalink to &quot;25、PACT如何运作？&quot;">​</a></h3><h3 id="_26、解释aop" tabindex="-1">26、解释AOP <a class="header-anchor" href="#_26、解释aop" aria-label="Permalink to &quot;26、解释AOP&quot;">​</a></h3><h3 id="_27、ribbon和feign的区别" tabindex="-1">27、Ribbon和Feign的区别？ <a class="header-anchor" href="#_27、ribbon和feign的区别" aria-label="Permalink to &quot;27、Ribbon和Feign的区别？&quot;">​</a></h3><h3 id="_28、如何实现-springboot应用程序的安全性" tabindex="-1">28、如何实现 SpringBoot应用程序的安全性? <a class="header-anchor" href="#_28、如何实现-springboot应用程序的安全性" aria-label="Permalink to &quot;28、如何实现 SpringBoot应用程序的安全性?&quot;">​</a></h3><h3 id="_29、您对distributed-transaction有何了解" tabindex="-1">29、您对Distributed Transaction有何了解？ <a class="header-anchor" href="#_29、您对distributed-transaction有何了解" aria-label="Permalink to &quot;29、您对Distributed Transaction有何了解？&quot;">​</a></h3><h3 id="_30、什么是websockets" tabindex="-1">30、什么是WebSockets？ <a class="header-anchor" href="#_30、什么是websockets" aria-label="Permalink to &quot;30、什么是WebSockets？&quot;">​</a></h3>`,56),t=[s];function i(l,p,c,E,u,g){return e(),n("div",null,t)}const A=a(o,[["render",i]]);export{h as __pageData,A as default};
