import{_ as s,o as a,c as e,V as n}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端最新2021年面试题大汇总，附答案.md","filePath":"interview/backend/前端/前端最新2021年面试题大汇总，附答案.md"}'),o={name:"interview/backend/前端/前端最新2021年面试题大汇总，附答案.md"},l=n(`<h3 id="_1、如何理解同步和异步" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5" target="_blank" rel="noreferrer">1、如何理解同步和异步？</a> <a class="header-anchor" href="#_1、如何理解同步和异步" aria-label="Permalink to &quot;[1、如何理解同步和异步？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#1如何理解同步和异步)&quot;">​</a></h3><p>同步：按照代码书写顺序一一执行处理指令的一种模式，上一段代码执行完才能执行下一段代码。</p><p>异步：可以理解为一种并行处理的方式，不必等待一个程序执行完，可以执行其它的任务。</p><p>JS之所以需要异步的原因在于JS是单线程运行的。常用的异步场景有：定时器、ajax请求、事件绑定。</p><h3 id="_2、什么是函数式编程-javascript-的哪些特性使其成为函数式语言的候选语言" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-javascript-%E7%9A%84%E5%93%AA%E4%BA%9B%E7%89%B9%E6%80%A7%E4%BD%BF%E5%85%B6%E6%88%90%E4%B8%BA%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E5%80%99%E9%80%89%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">2、什么是函数式编程? JavaScript 的哪些特性使其成为函数式语言的候选语言？</a> <a class="header-anchor" href="#_2、什么是函数式编程-javascript-的哪些特性使其成为函数式语言的候选语言" aria-label="Permalink to &quot;[2、什么是函数式编程? JavaScript 的哪些特性使其成为函数式语言的候选语言？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#2什么是函数式编程-javascript-的哪些特性使其成为函数式语言的候选语言)&quot;">​</a></h3><p>函数式编程（通常缩写为FP）是通过编写纯函数，避免共享状态、可变数据、副作用 来构建软件的过程。数式编程是声明式 的而不是命令式 的，应用程序的状态是通过纯函数流动的。与面向对象编程形成对比，面向对象中应用程序的状态通常与对象中的方法共享和共处。</p><p>函数式编程是一种编程范式 ，这意味着它是一种基于一些基本的定义原则（如上所列）思考软件构建的方式。当然，编程范示的其他示例也包括面向对象编程和过程编程。</p><p>函数式的代码往往比命令式或面向对象的代码更简洁，更可预测，更容易测试 - 但如果不熟悉它以及与之相关的常见模式，函数式的代码也可能看起来更密集杂乱，并且 相关文献对新人来说是不好理解的。</p><p><strong>JavaScript支持闭包和高阶函数是函数式编程语言的特点。</strong></p><h3 id="_3、说说你对promise的了解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E8%AF%B4%E8%AF%B4%E4%BD%A0%E5%AF%B9promise%E7%9A%84%E4%BA%86%E8%A7%A3" target="_blank" rel="noreferrer">3、说说你对promise的了解</a> <a class="header-anchor" href="#_3、说说你对promise的了解" aria-label="Permalink to &quot;[3、说说你对promise的了解](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#3说说你对promise的了解)&quot;">​</a></h3><p>依照 <code>Promise/A+</code> 的定义，<code>Promise</code> 有四种状态：</p><p><strong>1、</strong> <code>pending:</code> 初始状态, 非 <code>fulfilled</code> 或 <code>rejected.</code></p><p><strong>2、</strong> <code>fulfilled:</code> 成功的操作.</p><p><strong>3、</strong> <code>rejected:</code> 失败的操作.</p><p><strong>4、</strong> <code>settled: Promise</code>已被<code>fulfilled</code>或<code>rejected</code>，且不是<code>pending</code></p><p>另外， <code>fulfilled</code>与 <code>rejected</code>一起合称 <code>settled</code></p><p><code>Promise</code> 对象用来进行延迟(<code>deferred</code>) 和异步(<code>asynchronous</code>) 计算</p><p><strong>Promise 的构造函数</strong></p><p>构造一个 <code>Promise</code>，最基本的用法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">var promise = new Promise(function(resolve, reject) {</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        if (...) {  // succeed</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">            resolve(result);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        } else {   // fails</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">            reject(Error(errMessage));</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var promise = new Promise(function(resolve, reject) {</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        if (...) {  // succeed</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">            resolve(result);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        } else {   // fails</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">            reject(Error(errMessage));</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    });</span></span></code></pre></div><p><code>Promise</code> 实例拥有 <code>then</code> 方法（具有 <code>then</code> 方法的对象，通常被称为<code>thenable</code>）。它的使用方法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">promise.then(onFulfilled, onRejected)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">promise.then(onFulfilled, onRejected)</span></span></code></pre></div><p>接收两个函数作为参数，一个在 <code>fulfilled</code> 的时候被调用，一个在<code>rejected</code>的时候被调用，接收参数就是 <code>future</code>，<code>onFulfilled</code> 对应<code>resolve</code>, <code>onRejected</code>对应 <code>reject</code></p><h3 id="_4、html5的form如何关闭自动完成功能" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4html5%E7%9A%84form%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90%E5%8A%9F%E8%83%BD" target="_blank" rel="noreferrer">4、HTML5的form如何关闭自动完成功能</a> <a class="header-anchor" href="#_4、html5的form如何关闭自动完成功能" aria-label="Permalink to &quot;[4、HTML5的form如何关闭自动完成功能](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#4html5的form如何关闭自动完成功能)&quot;">​</a></h3><p>HTML的输入框可以拥有自动完成的功能，当你往输入框输入内容的时候，浏览器会从你以前的同名输入框的历史记录中查找出类似的内容并列在输入框下面，这样就不用全部输入进去了，直接选择列表中的项目就可以了。但有时候我们希望关闭输入框的自动完成功能，例如当用户输入内容的时候，我们希望使用AJAX技术从数据库搜索并列举而不是在用户的历史记录中搜索。</p><p><strong>方法：</strong></p><p><strong>1、</strong> 在IE的internet选项菜单中里的自动完成里面设置</p><p><strong>2、</strong> 设置form输入框的autocomplete为on或者off来来开启输入框的自动完成功能</p><h3 id="_5、如何自学一门新编程语言" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E5%A6%82%E4%BD%95%E8%87%AA%E5%AD%A6%E4%B8%80%E9%97%A8%E6%96%B0%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">5、如何自学一门新编程语言</a> <a class="header-anchor" href="#_5、如何自学一门新编程语言" aria-label="Permalink to &quot;[5、如何自学一门新编程语言](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#5如何自学一门新编程语言)&quot;">​</a></h3><p><strong>1、</strong> 了解背景知识：历史、现状、特点、应用领域、发展趋势</p><p><strong>2、</strong> 搭建开发环境，编写HelloWorld</p><p><strong>3、</strong> 声明变量和常量</p><p><strong>4、</strong> 数据类型</p><p><strong>5、</strong> 运算符</p><p><strong>6、</strong> 逻辑结构</p><p><strong>7、</strong> 通用小程序</p><p><strong>8、</strong> 函数和对象</p><p><strong>9、</strong> 第三方库、组件、框架</p><p><strong>10、</strong> 实用项目</p><h3 id="_6、元素竖向的百分比设定是相对于容器的高度吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E5%85%83%E7%B4%A0%E7%AB%96%E5%90%91%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94%E8%AE%BE%E5%AE%9A%E6%98%AF%E7%9B%B8%E5%AF%B9%E4%BA%8E%E5%AE%B9%E5%99%A8%E7%9A%84%E9%AB%98%E5%BA%A6%E5%90%97" target="_blank" rel="noreferrer">6、元素竖向的百分比设定是相对于容器的高度吗？</a> <a class="header-anchor" href="#_6、元素竖向的百分比设定是相对于容器的高度吗" aria-label="Permalink to &quot;[6、元素竖向的百分比设定是相对于容器的高度吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#6元素竖向的百分比设定是相对于容器的高度吗)&quot;">​</a></h3><p>当按百分比设定一个元素的宽度时，它是相对于父容器的宽度计算的，但是，对于一些表示竖向距离的属性，例如 padding-top , padding-bottom , margin-top , margin-bottom 等，当按百分比设定它们时，依据的也是父容器的宽度，而不是高度。</p><h3 id="_7、-和-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7-%E5%92%8C-=-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">7、== 和 === 有什么区别？</a> <a class="header-anchor" href="#_7、-和-有什么区别" aria-label="Permalink to &quot;[7、== 和 === 有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#7-和-=-有什么区别)&quot;">​</a></h3><p><code>==</code>用于一般比较，<code>===</code>用于严格比较，<code>==</code>在比较的时候可以转换数据类型<code>，===</code>严格比较，只要类型不匹配就返回<code>flase</code>。</p><p>先来看看 <code>==</code> 这兄弟：</p><p>强制是将值转换为另一种类型的过程。在这种情况下，<code>==</code>会执行隐式强制。在比较两个值之前，<code>==</code>需要执行一些规则。</p><p>假设我们要比较<code>x == y</code>的值。</p><p><strong>1、</strong> 如果<code>x</code>和<code>y</code>的类型相同，则 JS 会换成<code>===</code>操作符进行比较。</p><p><strong>2、</strong> 如果<code>x</code>为<code>null</code>, <code>y</code>为<code>undefined</code>，则返回<code>true</code>。</p><p><strong>3、</strong> 如果<code>x</code>为<code>undefined</code>且<code>y</code>为<code>null</code>，则返回<code>true</code>。</p><p><strong>4、</strong> 如果<code>x</code>的类型是<code>number</code>, <code>y</code>的类型是<code>string</code>，那么返回<code>x == toNumber(y)</code>。</p><p><strong>5、</strong> 如果<code>x</code>的类型是<code>string</code>, <code>y</code>的类型是<code>number</code>，那么返回<code>toNumber(x) == y</code>。</p><p><strong>6、</strong> 如果<code>x</code>为类型是<code>boolean</code>，则返回<code>toNumber(x)== y</code>。</p><p><strong>7、</strong> 如果<code>y</code>为类型是<code>boolean</code>，则返回<code>x == toNumber(y)</code>。</p><p><strong>8、</strong> 如果<code>x</code>是<code>string</code>、<code>symbol</code>或<code>number</code>，而<code>y</code>是<code>object</code>类型，则返回<code>x == toPrimitive(y)</code>。</p><p><strong>9、</strong> 如果<code>x</code>是<code>object</code>，<code>y</code>是<code>string</code>，<code>symbol</code>则返回<code>toPrimitive(x) == y</code>。</p><p><strong>10、</strong> 剩下的 返回 <code>false</code></p><h3 id="_8、box-sizing属性" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8box-sizing%E5%B1%9E%E6%80%A7" target="_blank" rel="noreferrer">8、box-sizing属性？</a> <a class="header-anchor" href="#_8、box-sizing属性" aria-label="Permalink to &quot;[8、box-sizing属性？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#8box-sizing属性)&quot;">​</a></h3><p>用来控制元素的盒子模型的解析模式，默认为content-box</p><p><strong>1、</strong> context-box：W3C的标准盒子模型，设置元素的 height/width 属性指的是content部分的高/宽</p><p><strong>2、</strong> border-box：IE传统盒子模型。设置元素的height/width属性指的是border + padding + content部分的高/宽</p><h3 id="_9、一般使用什么版本控制工具-svn如何对文件加锁" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9%E4%B8%80%E8%88%AC%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7svn%E5%A6%82%E4%BD%95%E5%AF%B9%E6%96%87%E4%BB%B6%E5%8A%A0%E9%94%81###" target="_blank" rel="noreferrer">9、一般使用什么版本控制工具?svn如何对文件加锁###</a> <a class="header-anchor" href="#_9、一般使用什么版本控制工具-svn如何对文件加锁" aria-label="Permalink to &quot;[9、一般使用什么版本控制工具?svn如何对文件加锁###](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#9一般使用什么版本控制工具svn如何对文件加锁###)&quot;">​</a></h3><p>svn加锁目的：为了避免多个人同一时间对同一个文件改动的相互覆盖，版本控制系统就必须有一套冲突处理机制。</p><p>svn加锁两种策略：乐观加锁：所有签出的文件都是可读写的，对文件的修改不必获得文件的锁，当你修改完文件签入时，会首先要求你更新本地文件，版本控制系统不会覆盖你的本地修改，而是会让你自己合并冲突后签入。</p><p>严格加锁：所有签出的文件都是只读的，任何对文件的修改必须要获得文件的锁，如果其他人没有拥有该文件的锁，那么版本控制系统就会授权给你文件的锁，并将文件设置为可编辑的。</p><p>svn两种加锁步骤：乐观加锁：选择你想要获取锁定的文件，然后右键菜单点击TortoiseSVN 选取获取锁定。</p><p>严格加锁：在想要采取严格加锁的文件或目录上点击右键，使用TortoiseSVN 属性菜单，点击新建属性，选择需要锁定。</p><h3 id="_10、30-jq中怎么样编写插件" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1030jq%E4%B8%AD%E6%80%8E%E4%B9%88%E6%A0%B7%E7%BC%96%E5%86%99%E6%8F%92%E4%BB%B6" target="_blank" rel="noreferrer">10、30.Jq中怎么样编写插件?</a> <a class="header-anchor" href="#_10、30-jq中怎么样编写插件" aria-label="Permalink to &quot;[10、30.Jq中怎么样编写插件?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端最新2021年面试题大汇总，附答案.md#1030jq中怎么样编写插件)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//第一种是类级别的插件开发：</span></span>
<span class="line"><span style="color:#f6f6f4;">//1.1 添加一个新的全局函数 添加一个全局函数，我们只需如下定义： </span></span>
<span class="line"><span style="color:#f6f6f4;">jQuery.foo = function() {</span></span>
<span class="line"><span style="color:#f6f6f4;">     alert(&#39;This is a test、This is only a test.&#39;);  };   </span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">//1.2 增加多个全局函数 添加多个全局函数，可采用如下定义： </span></span>
<span class="line"><span style="color:#f6f6f4;">jQuery.foo = function() {</span></span>
<span class="line"><span style="color:#f6f6f4;">       alert(&#39;This is a test、This is only a test.&#39;);  };  </span></span>
<span class="line"><span style="color:#f6f6f4;">jQuery.bar = function(param) {</span></span>
<span class="line"><span style="color:#f6f6f4;">      alert(&#39;This function takes a parameter, which is &quot;&#39; + param + &#39;&quot;.&#39;);  };   调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(&#39;bar&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">//1.3 使用jQuery.extend(object);　 </span></span>
<span class="line"><span style="color:#f6f6f4;">jQuery.extend({</span></span>
<span class="line"><span style="color:#f6f6f4;">      foo: function() {</span></span>
<span class="line"><span style="color:#f6f6f4;">          alert(&#39;This is a test、This is only a test.&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        },</span></span>
<span class="line"><span style="color:#f6f6f4;">      bar: function(param) {</span></span>
<span class="line"><span style="color:#f6f6f4;">          alert(&#39;This function takes a parameter, which is &quot;&#39; + param +&#39;&quot;.&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">     }); </span></span>
<span class="line"><span style="color:#f6f6f4;">//1.4 使用命名空间</span></span>
<span class="line"><span style="color:#f6f6f4;">// 虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。</span></span>
<span class="line"><span style="color:#f6f6f4;">// 但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法</span></span>
<span class="line"><span style="color:#f6f6f4;">// 封装到另一个自定义的命名空间。</span></span>
<span class="line"><span style="color:#f6f6f4;">jQuery.myPlugin = {         </span></span>
<span class="line"><span style="color:#f6f6f4;">foo:function() {         </span></span>
<span class="line"><span style="color:#f6f6f4;">  alert(&#39;This is a test、This is only a test.&#39;);         </span></span>
<span class="line"><span style="color:#f6f6f4;"> },         </span></span>
<span class="line"><span style="color:#f6f6f4;"> bar:function(param) {         </span></span>
<span class="line"><span style="color:#f6f6f4;">  alert(&#39;This function takes a parameter, which is &quot;&#39; + param + &#39;&quot;.&#39;);   </span></span>
<span class="line"><span style="color:#f6f6f4;"> }        </span></span>
<span class="line"><span style="color:#f6f6f4;">}; </span></span>
<span class="line"><span style="color:#f6f6f4;">//采用命名空间的函数仍然是全局函数，调用时采用的方法： </span></span>
<span class="line"><span style="color:#f6f6f4;">$.myPlugin.foo();        </span></span>
<span class="line"><span style="color:#f6f6f4;">$.myPlugin.bar(&#39;baz&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">//通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">//第二种是对象级别的插件开发</span></span>
<span class="line"><span style="color:#f6f6f4;">//形式1： </span></span>
<span class="line"><span style="color:#f6f6f4;">(function($){    </span></span>
<span class="line"><span style="color:#f6f6f4;">  $.fn.extend({    </span></span>
<span class="line"><span style="color:#f6f6f4;">   pluginName:function(opt,callback){    </span></span>
<span class="line"><span style="color:#f6f6f4;">             // Our plugin implementation code goes here、     </span></span>
<span class="line"><span style="color:#f6f6f4;">   }    </span></span>
<span class="line"><span style="color:#f6f6f4;">  })    </span></span>
<span class="line"><span style="color:#f6f6f4;">})(jQuery);  </span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">//形式2：</span></span>
<span class="line"><span style="color:#f6f6f4;">(function($) {      </span></span>
<span class="line"><span style="color:#f6f6f4;">   $.fn.pluginName = function() {    </span></span>
<span class="line"><span style="color:#f6f6f4;">        // Our plugin implementation code goes here、   </span></span>
<span class="line"><span style="color:#f6f6f4;">   };     </span></span>
<span class="line"><span style="color:#f6f6f4;">})(jQuery);</span></span>
<span class="line"><span style="color:#f6f6f4;">//形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。</span></span>
<span class="line"><span style="color:#f6f6f4;">//这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//第一种是类级别的插件开发：</span></span>
<span class="line"><span style="color:#24292e;">//1.1 添加一个新的全局函数 添加一个全局函数，我们只需如下定义： </span></span>
<span class="line"><span style="color:#24292e;">jQuery.foo = function() {</span></span>
<span class="line"><span style="color:#24292e;">     alert(&#39;This is a test、This is only a test.&#39;);  };   </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//1.2 增加多个全局函数 添加多个全局函数，可采用如下定义： </span></span>
<span class="line"><span style="color:#24292e;">jQuery.foo = function() {</span></span>
<span class="line"><span style="color:#24292e;">       alert(&#39;This is a test、This is only a test.&#39;);  };  </span></span>
<span class="line"><span style="color:#24292e;">jQuery.bar = function(param) {</span></span>
<span class="line"><span style="color:#24292e;">      alert(&#39;This function takes a parameter, which is &quot;&#39; + param + &#39;&quot;.&#39;);  };   调用时和一个函数的一样的:jQuery.foo();jQuery.bar();或者$.foo();$.bar(&#39;bar&#39;);</span></span>
<span class="line"><span style="color:#24292e;">//1.3 使用jQuery.extend(object);　 </span></span>
<span class="line"><span style="color:#24292e;">jQuery.extend({</span></span>
<span class="line"><span style="color:#24292e;">      foo: function() {</span></span>
<span class="line"><span style="color:#24292e;">          alert(&#39;This is a test、This is only a test.&#39;);</span></span>
<span class="line"><span style="color:#24292e;">        },</span></span>
<span class="line"><span style="color:#24292e;">      bar: function(param) {</span></span>
<span class="line"><span style="color:#24292e;">          alert(&#39;This function takes a parameter, which is &quot;&#39; + param +&#39;&quot;.&#39;);</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">     }); </span></span>
<span class="line"><span style="color:#24292e;">//1.4 使用命名空间</span></span>
<span class="line"><span style="color:#24292e;">// 虽然在jQuery命名空间中，我们禁止使用了大量的javaScript函数名和变量名。</span></span>
<span class="line"><span style="color:#24292e;">// 但是仍然不可避免某些函数或变量名将于其他jQuery插件冲突，因此我们习惯将一些方法</span></span>
<span class="line"><span style="color:#24292e;">// 封装到另一个自定义的命名空间。</span></span>
<span class="line"><span style="color:#24292e;">jQuery.myPlugin = {         </span></span>
<span class="line"><span style="color:#24292e;">foo:function() {         </span></span>
<span class="line"><span style="color:#24292e;">  alert(&#39;This is a test、This is only a test.&#39;);         </span></span>
<span class="line"><span style="color:#24292e;"> },         </span></span>
<span class="line"><span style="color:#24292e;"> bar:function(param) {         </span></span>
<span class="line"><span style="color:#24292e;">  alert(&#39;This function takes a parameter, which is &quot;&#39; + param + &#39;&quot;.&#39;);   </span></span>
<span class="line"><span style="color:#24292e;"> }        </span></span>
<span class="line"><span style="color:#24292e;">}; </span></span>
<span class="line"><span style="color:#24292e;">//采用命名空间的函数仍然是全局函数，调用时采用的方法： </span></span>
<span class="line"><span style="color:#24292e;">$.myPlugin.foo();        </span></span>
<span class="line"><span style="color:#24292e;">$.myPlugin.bar(&#39;baz&#39;);</span></span>
<span class="line"><span style="color:#24292e;">//通过这个技巧（使用独立的插件名），我们可以避免命名空间内函数的冲突。</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//第二种是对象级别的插件开发</span></span>
<span class="line"><span style="color:#24292e;">//形式1： </span></span>
<span class="line"><span style="color:#24292e;">(function($){    </span></span>
<span class="line"><span style="color:#24292e;">  $.fn.extend({    </span></span>
<span class="line"><span style="color:#24292e;">   pluginName:function(opt,callback){    </span></span>
<span class="line"><span style="color:#24292e;">             // Our plugin implementation code goes here、     </span></span>
<span class="line"><span style="color:#24292e;">   }    </span></span>
<span class="line"><span style="color:#24292e;">  })    </span></span>
<span class="line"><span style="color:#24292e;">})(jQuery);  </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//形式2：</span></span>
<span class="line"><span style="color:#24292e;">(function($) {      </span></span>
<span class="line"><span style="color:#24292e;">   $.fn.pluginName = function() {    </span></span>
<span class="line"><span style="color:#24292e;">        // Our plugin implementation code goes here、   </span></span>
<span class="line"><span style="color:#24292e;">   };     </span></span>
<span class="line"><span style="color:#24292e;">})(jQuery);</span></span>
<span class="line"><span style="color:#24292e;">//形参是$，函数定义完成之后,把jQuery这个实参传递进去.立即调用执行。</span></span>
<span class="line"><span style="color:#24292e;">//这样的好处是,我们在写jQuery插件时,也可以使用$这个别名,而不会与prototype引起冲突</span></span></code></pre></div><h3 id="_11、关于建站安全防护" tabindex="-1">11、关于建站安全防护 <a class="header-anchor" href="#_11、关于建站安全防护" aria-label="Permalink to &quot;11、关于建站安全防护&quot;">​</a></h3><h3 id="_12、解决异步回调地狱" tabindex="-1">12、解决异步回调地狱 <a class="header-anchor" href="#_12、解决异步回调地狱" aria-label="Permalink to &quot;12、解决异步回调地狱&quot;">​</a></h3><h3 id="_13、什么是包装对象-wrapper-object" tabindex="-1">13、什么是包装对象（wrapper object）？ <a class="header-anchor" href="#_13、什么是包装对象-wrapper-object" aria-label="Permalink to &quot;13、什么是包装对象（wrapper object）？&quot;">​</a></h3><h3 id="_14、数组操作" tabindex="-1">14、数组操作 <a class="header-anchor" href="#_14、数组操作" aria-label="Permalink to &quot;14、数组操作&quot;">​</a></h3><h3 id="_15、html5有哪些新特性、移除了那些元素" tabindex="-1">15、html5有哪些新特性、移除了那些元素？ <a class="header-anchor" href="#_15、html5有哪些新特性、移除了那些元素" aria-label="Permalink to &quot;15、html5有哪些新特性、移除了那些元素？&quot;">​</a></h3><h3 id="_16、class-与-style-如何动态绑定" tabindex="-1">16、Class 与 Style 如何动态绑定？ <a class="header-anchor" href="#_16、class-与-style-如何动态绑定" aria-label="Permalink to &quot;16、Class 与 Style 如何动态绑定？&quot;">​</a></h3><h3 id="_17、img的alt与title有何异同-strong与em的异同" tabindex="-1">17、img的alt与title有何异同？ strong与em的异同？ <a class="header-anchor" href="#_17、img的alt与title有何异同-strong与em的异同" aria-label="Permalink to &quot;17、img的alt与title有何异同？ strong与em的异同？&quot;">​</a></h3><h3 id="_18、对bfc规范-块级格式化上下文-block-formatting-context-的理解" tabindex="-1">18、对BFC规范(块级格式化上下文：block formatting context)的理解？ <a class="header-anchor" href="#_18、对bfc规范-块级格式化上下文-block-formatting-context-的理解" aria-label="Permalink to &quot;18、对BFC规范(块级格式化上下文：block formatting context)的理解？&quot;">​</a></h3><h3 id="_19、页面可见性-page-visibility-api-可以有哪些用途" tabindex="-1">19、页面可见性（Page Visibility API） 可以有哪些用途？ <a class="header-anchor" href="#_19、页面可见性-page-visibility-api-可以有哪些用途" aria-label="Permalink to &quot;19、页面可见性（Page Visibility API） 可以有哪些用途？&quot;">​</a></h3><h3 id="_20、如果需要手动写动画-你认为最小时间间隔是多久-为什么" tabindex="-1">20、如果需要手动写动画，你认为最小时间间隔是多久，为什么？ <a class="header-anchor" href="#_20、如果需要手动写动画-你认为最小时间间隔是多久-为什么" aria-label="Permalink to &quot;20、如果需要手动写动画，你认为最小时间间隔是多久，为什么？&quot;">​</a></h3><h3 id="_21、js是如何实现异步的" tabindex="-1">21、JS是如何实现异步的？ <a class="header-anchor" href="#_21、js是如何实现异步的" aria-label="Permalink to &quot;21、JS是如何实现异步的？&quot;">​</a></h3><h3 id="_22、css-如何阻塞文档解析-浏览器解析过程" tabindex="-1">22、CSS 如何阻塞文档解析？（浏览器解析过程） <a class="header-anchor" href="#_22、css-如何阻塞文档解析-浏览器解析过程" aria-label="Permalink to &quot;22、CSS 如何阻塞文档解析？（浏览器解析过程）&quot;">​</a></h3><h3 id="_23、jsonp原理-缺点" tabindex="-1">23、jsonp原理？ 缺点? <a class="header-anchor" href="#_23、jsonp原理-缺点" aria-label="Permalink to &quot;23、jsonp原理？ 缺点?&quot;">​</a></h3><h3 id="_24、为什么利用多个域名来存储网站资源" tabindex="-1">24、为什么利用多个域名来存储网站资源？ <a class="header-anchor" href="#_24、为什么利用多个域名来存储网站资源" aria-label="Permalink to &quot;24、为什么利用多个域名来存储网站资源？&quot;">​</a></h3><h3 id="_25、png-gif-jpg的区别及如何选" tabindex="-1">25、PNG,GIF,JPG的区别及如何选 <a class="header-anchor" href="#_25、png-gif-jpg的区别及如何选" aria-label="Permalink to &quot;25、PNG,GIF,JPG的区别及如何选&quot;">​</a></h3><h3 id="_26、谈谈你对重构的理解" tabindex="-1">26、谈谈你对重构的理解 <a class="header-anchor" href="#_26、谈谈你对重构的理解" aria-label="Permalink to &quot;26、谈谈你对重构的理解&quot;">​</a></h3><h3 id="_27、编写一个-getelementsbyclassname-封装函数" tabindex="-1">27、编写一个 getElementsByClassName 封装函数? <a class="header-anchor" href="#_27、编写一个-getelementsbyclassname-封装函数" aria-label="Permalink to &quot;27、编写一个 getElementsByClassName 封装函数?&quot;">​</a></h3><h3 id="_28、get请求传参长度的误区" tabindex="-1">28、get请求传参长度的误区 <a class="header-anchor" href="#_28、get请求传参长度的误区" aria-label="Permalink to &quot;28、get请求传参长度的误区&quot;">​</a></h3><h3 id="_29、vue的单项数据流" tabindex="-1">29、vue的单项数据流 <a class="header-anchor" href="#_29、vue的单项数据流" aria-label="Permalink to &quot;29、vue的单项数据流&quot;">​</a></h3><h3 id="_30、什么是原型、原型链" tabindex="-1">30、什么是原型、原型链？ <a class="header-anchor" href="#_30、什么是原型、原型链" aria-label="Permalink to &quot;30、什么是原型、原型链？&quot;">​</a></h3><h3 id="_31、让页面里的字体变清晰-变细用css怎么做" tabindex="-1">31、让页面里的字体变清晰，变细用CSS怎么做？ <a class="header-anchor" href="#_31、让页面里的字体变清晰-变细用css怎么做" aria-label="Permalink to &quot;31、让页面里的字体变清晰，变细用CSS怎么做？&quot;">​</a></h3>`,89),p=[l];function t(c,r,i,d,f,E){return a(),e("div",null,p)}const y=s(o,[["render",t]]);export{u as __pageData,y as default};
