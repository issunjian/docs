import{_ as a,o as e,c as o,V as r}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/spring/spring-20.md","filePath":"interview/backend/spring/spring-20.md"}'),n={name:"interview/backend/spring/spring-20.md"},s=r(`<h3 id="_1、springboot-中如何解决跨域问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1springboot-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-" target="_blank" rel="noreferrer">1、SpringBoot 中如何解决跨域问题 ?</a> <a class="header-anchor" href="#_1、springboot-中如何解决跨域问题" aria-label="Permalink to &quot;[1、SpringBoot 中如何解决跨域问题 ?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#1springboot-中如何解决跨域问题-)&quot;">​</a></h3><p>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 SpringBoot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。</p><p><a href="/docs/Configuration.html">@Configuration </a></p><p>public class CorsConfig implements WebMvcConfigurer {</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">@Override</span></span>
<span class="line"><span style="color:#f6f6f4;">public void addCorsMappings(CorsRegistry registry) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    registry.addMapping(&quot;/**&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .allowedOrigins(&quot;*&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .allowCredentials(true)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .maxAge(3600);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@Override</span></span>
<span class="line"><span style="color:#24292e;">public void addCorsMappings(CorsRegistry registry) {</span></span>
<span class="line"><span style="color:#24292e;">    registry.addMapping(&quot;/**&quot;)</span></span>
<span class="line"><span style="color:#24292e;">            .allowedOrigins(&quot;*&quot;)</span></span>
<span class="line"><span style="color:#24292e;">            .allowCredentials(true)</span></span>
<span class="line"><span style="color:#24292e;">            .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)</span></span>
<span class="line"><span style="color:#24292e;">            .maxAge(3600);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>}</p><h3 id="_2、服务注册和发现是什么意思-spring-cloud如何实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9Dspring-cloud%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">2、服务注册和发现是什么意思？Spring Cloud如何实现？</a> <a class="header-anchor" href="#_2、服务注册和发现是什么意思-spring-cloud如何实现" aria-label="Permalink to &quot;[2、服务注册和发现是什么意思？Spring Cloud如何实现？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#2服务注册和发现是什么意思spring-cloud如何实现)&quot;">​</a></h3><p>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 Eureka服务注册和发现可以在这种情况下提供帮助。由于所有服务都在Eureka服务器上注册并通过调用Eureka服务器完成查找，因此无需处理服务地点的任何更改和处理。</p><h3 id="_3、如何集成springboot和activemq" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90springboot%E5%92%8Cactivemq" target="_blank" rel="noreferrer">3、如何集成SpringBoot和ActiveMQ？</a> <a class="header-anchor" href="#_3、如何集成springboot和activemq" aria-label="Permalink to &quot;[3、如何集成SpringBoot和ActiveMQ？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#3如何集成springboot和activemq)&quot;">​</a></h3><p>对于集成SpringBoot和ActiveMQ，我们使用</p><p>依赖关系。 它只需要很少的配置，并且不需要样板代码。</p><h3 id="_4、什么是javaconfig" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E4%BB%80%E4%B9%88%E6%98%AFjavaconfig" target="_blank" rel="noreferrer">4、什么是JavaConfig？</a> <a class="header-anchor" href="#_4、什么是javaconfig" aria-label="Permalink to &quot;[4、什么是JavaConfig？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#4什么是javaconfig)&quot;">​</a></h3><p>Spring JavaConfig是Spring社区的产品，它提供了配置Spring IoC容器的纯Java方法。因此它有助于避免使用XML配置。使用JavaConfig的优点在于：</p><p>面向对象的配置。由于配置被定义为JavaConfig中的类，因此用户可以充分利用Java中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean方法等。</p><p>减少或消除XML配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在XML和Java之间来回切换。</p><p>JavaConfig为开发人员提供了一种纯Java方法来配置与XML配置概念相似的Spring容器。</p><p>从技术角度来讲，只使用JavaConfig配置类来配置容器是可行的，但实际上很多人认为将JavaConfig与XML混合匹配是理想的。</p><p>类型安全和重构友好。JavaConfig提供了一种类型安全的方法来配置Spring容器。由于Java 5.0对泛型的支持，现在可以按类型而不是按名称检索bean，不需要任何强制转换或基于字符串的查找</p><h3 id="_5、什么是自动配置" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E4%BB%80%E4%B9%88%E6%98%AF%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE" target="_blank" rel="noreferrer">5、什么是自动配置？</a> <a class="header-anchor" href="#_5、什么是自动配置" aria-label="Permalink to &quot;[5、什么是自动配置？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#5什么是自动配置)&quot;">​</a></h3><p>Spring 和 SpringMVC 的问题在于需要配置大量的参数。</p><p>我们能否带来更多的智能？当一个 MVC JAR 添加到应用程序中的时候，我们能否自动配置一些 beans？</p><p>Spring 查看（CLASSPATH 上可用的框架）已存在的应用程序的配置。在此基础上，SpringBoot 提供了配置应用程序和框架所需要的基本配置。这就是自动配置。</p><h3 id="_6、container在微服务中的用途是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6container%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E7%9A%84%E7%94%A8%E9%80%94%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">6、Container在微服务中的用途是什么？</a> <a class="header-anchor" href="#_6、container在微服务中的用途是什么" aria-label="Permalink to &quot;[6、Container在微服务中的用途是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#6container在微服务中的用途是什么)&quot;">​</a></h3><p>容器是管理基于微服务的应用程序以便单独开发和部署它们的好方法。您可以将微服务封装在容器映像及其依赖项中，然后可以使用它来滚动按需实例的微服务，而无需任何额外的工作。</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0816/01/img_18.png#alt=img%5C_18.png" alt=""></p><p>图15： 容器的表示及其在微服务中的使用方式 – 微服务访谈问题</p><h3 id="_7、保护-springboot-应用有哪些方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%BF%9D%E6%8A%A4-springboot-%E5%BA%94%E7%94%A8%E6%9C%89%E5%93%AA%E4%BA%9B%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">7、保护 SpringBoot 应用有哪些方法？</a> <a class="header-anchor" href="#_7、保护-springboot-应用有哪些方法" aria-label="Permalink to &quot;[7、保护 SpringBoot 应用有哪些方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#7保护-springboot-应用有哪些方法)&quot;">​</a></h3><p><strong>1、</strong> 在生产中使用HTTPS</p><p><strong>2、</strong> 使用Snyk检查你的依赖关系</p><p><strong>3、</strong> 升级到最新版本</p><p><strong>4、</strong> 启用CSRF保护</p><p><strong>5、</strong> 使用内容安全策略防止XSS攻击</p><h3 id="_8、什么是spring-cloud-bus-我们需要它吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E4%BB%80%E4%B9%88%E6%98%AFspring-cloud-bus%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%AE%83%E5%90%97" target="_blank" rel="noreferrer">8、什么是Spring Cloud Bus？我们需要它吗？</a> <a class="header-anchor" href="#_8、什么是spring-cloud-bus-我们需要它吗" aria-label="Permalink to &quot;[8、什么是Spring Cloud Bus？我们需要它吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#8什么是spring-cloud-bus我们需要它吗)&quot;">​</a></h3><p>考虑以下情况：我们有多个应用程序使用Spring Cloud Config读取属性，而Spring Cloud Config从GIT读取这些属性。</p><p>下面的例子中多个员工生产者模块从Employee Config Module获取Eureka注册的财产。</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0814/02/img_6.png#alt=img%5C_6.png" alt=""></p><p>如果假设GIT中的Eureka注册属性更改为指向另一台Eureka服务器，会发生什么情况。在这种情况下，我们将不得不重新启动服务以获取更新的属性。</p><p>还有另一种使用执行器端点/刷新的方式。但是我们将不得不为每个模块单独调用这个url。例如，如果Employee Producer1部署在端口8080上，则调用 http：// localhost：8080 / refresh。同样对于Employee Producer2 http：// localhost：8081 / refresh等等。这又很麻烦。这就是Spring Cloud Bus发挥作用的地方。</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2019/08/0814/02/img_7.png#alt=img%5C_7.png" alt=""></p><p>Spring Cloud Bus提供了跨多个实例刷新配置的功能。因此，在上面的示例中，如果我们刷新Employee Producer1，则会自动刷新所有其他必需的模块。如果我们有多个微服务启动并运行，这特别有用。这是通过将所有微服务连接到单个消息代理来实现的。无论何时刷新实例，此事件都会订阅到侦听此代理的所有微服务，并且它们也会刷新。可以通过使用端点/总线/刷新来实现对任何单个实例的刷新。</p><h3 id="_9、微服务中如何实现-session-共享" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-session-%E5%85%B1%E4%BA%AB-" target="_blank" rel="noreferrer">9、微服务中如何实现 session 共享 ?</a> <a class="header-anchor" href="#_9、微服务中如何实现-session-共享" aria-label="Permalink to &quot;[9、微服务中如何实现 session 共享 ?](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#9微服务中如何实现-session-共享-)&quot;">​</a></h3><p>在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。</p><h3 id="_10、spring-mvc的异常处理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10spring-mvc%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86" target="_blank" rel="noreferrer">10、Spring MVC的异常处理？</a> <a class="header-anchor" href="#_10、spring-mvc的异常处理" aria-label="Permalink to &quot;[10、Spring MVC的异常处理？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Spring/Spring最新面试题及答案附答案汇总.md#10spring-mvc的异常处理)&quot;">​</a></h3><p>可以将异常抛给Spring框架，由Spring框架来处理；我们只需要配置简单的异常处理器，在异常处理器中添视图页面即可。</p><h3 id="_11、什么是netflix-feign-它的优点是什么" tabindex="-1">11、什么是Netflix Feign？它的优点是什么？ <a class="header-anchor" href="#_11、什么是netflix-feign-它的优点是什么" aria-label="Permalink to &quot;11、什么是Netflix Feign？它的优点是什么？&quot;">​</a></h3><h3 id="_12、web-restful-api在微服务中的作用是什么" tabindex="-1">12、Web，RESTful API在微服务中的作用是什么？ <a class="header-anchor" href="#_12、web-restful-api在微服务中的作用是什么" aria-label="Permalink to &quot;12、Web，RESTful API在微服务中的作用是什么？&quot;">​</a></h3><h3 id="_13、双因素身份验证的凭据类型有哪些" tabindex="-1">13、双因素身份验证的凭据类型有哪些？ <a class="header-anchor" href="#_13、双因素身份验证的凭据类型有哪些" aria-label="Permalink to &quot;13、双因素身份验证的凭据类型有哪些？&quot;">​</a></h3><h3 id="_14、不同版本的-spring-framework-有哪些主要功能" tabindex="-1">14、不同版本的 Spring Framework 有哪些主要功能？ <a class="header-anchor" href="#_14、不同版本的-spring-framework-有哪些主要功能" aria-label="Permalink to &quot;14、不同版本的 Spring Framework 有哪些主要功能？&quot;">​</a></h3><h3 id="_15、spring-framework-有哪些不同的功能" tabindex="-1">15、Spring Framework 有哪些不同的功能？ <a class="header-anchor" href="#_15、spring-framework-有哪些不同的功能" aria-label="Permalink to &quot;15、Spring Framework 有哪些不同的功能？&quot;">​</a></h3><h3 id="_16、什么是-javaconfig" tabindex="-1">16、什么是 JavaConfig？ <a class="header-anchor" href="#_16、什么是-javaconfig" aria-label="Permalink to &quot;16、什么是 JavaConfig？&quot;">​</a></h3><h3 id="_17、-requestmapping-注解" tabindex="-1">17、<a href="/docs/RequestMapping.html">@RequestMapping </a> 注解 <a class="header-anchor" href="#_17、-requestmapping-注解" aria-label="Permalink to &quot;17、[@RequestMapping ](/RequestMapping ) 注解&quot;">​</a></h3><h3 id="_18、使用-spring-有哪些方式" tabindex="-1">18、使用 Spring 有哪些方式？ <a class="header-anchor" href="#_18、使用-spring-有哪些方式" aria-label="Permalink to &quot;18、使用 Spring 有哪些方式？&quot;">​</a></h3><h3 id="_19、springboot-中的-starter-到底是什么" tabindex="-1">19、SpringBoot 中的 starter 到底是什么 ? <a class="header-anchor" href="#_19、springboot-中的-starter-到底是什么" aria-label="Permalink to &quot;19、SpringBoot 中的 starter 到底是什么 ?&quot;">​</a></h3><h3 id="_20、spring-cloud-netflix" tabindex="-1">20、Spring Cloud Netflix <a class="header-anchor" href="#_20、spring-cloud-netflix" aria-label="Permalink to &quot;20、Spring Cloud Netflix&quot;">​</a></h3><h3 id="_21、-autowired-注解有什么用" tabindex="-1">21、<a href="/docs/Autowired.html">@Autowired </a> 注解有什么用？ <a class="header-anchor" href="#_21、-autowired-注解有什么用" aria-label="Permalink to &quot;21、[@Autowired ](/Autowired ) 注解有什么用？&quot;">​</a></h3><h3 id="_22、spring支持的orm" tabindex="-1">22、Spring支持的ORM <a class="header-anchor" href="#_22、spring支持的orm" aria-label="Permalink to &quot;22、Spring支持的ORM&quot;">​</a></h3><h3 id="_23、spring-boot扫描流程" tabindex="-1">23、spring boot扫描流程? <a class="header-anchor" href="#_23、spring-boot扫描流程" aria-label="Permalink to &quot;23、spring boot扫描流程?&quot;">​</a></h3><h3 id="_24、什么是oauth" tabindex="-1">24、什么是OAuth？ <a class="header-anchor" href="#_24、什么是oauth" aria-label="Permalink to &quot;24、什么是OAuth？&quot;">​</a></h3><h3 id="_25、spring-cloud-task" tabindex="-1">25、Spring Cloud Task <a class="header-anchor" href="#_25、spring-cloud-task" aria-label="Permalink to &quot;25、Spring Cloud Task&quot;">​</a></h3><h3 id="_26、如何重新加载springboot上的更改-而无需重新启动服务器" tabindex="-1">26、如何重新加载SpringBoot上的更改，而无需重新启动服务器？ <a class="header-anchor" href="#_26、如何重新加载springboot上的更改-而无需重新启动服务器" aria-label="Permalink to &quot;26、如何重新加载SpringBoot上的更改，而无需重新启动服务器？&quot;">​</a></h3><h3 id="_27、如何在-springboot-中添加通用的-js-代码" tabindex="-1">27、如何在 SpringBoot 中添加通用的 JS 代码？ <a class="header-anchor" href="#_27、如何在-springboot-中添加通用的-js-代码" aria-label="Permalink to &quot;27、如何在 SpringBoot 中添加通用的 JS 代码？&quot;">​</a></h3><h3 id="_28、什么是-spring-ioc-容器" tabindex="-1">28、什么是 Spring IOC 容器？ <a class="header-anchor" href="#_28、什么是-spring-ioc-容器" aria-label="Permalink to &quot;28、什么是 Spring IOC 容器？&quot;">​</a></h3><h3 id="_29、spring配置文件" tabindex="-1">29、Spring配置文件 <a class="header-anchor" href="#_29、spring配置文件" aria-label="Permalink to &quot;29、Spring配置文件&quot;">​</a></h3><h3 id="_30、什么是通知-advice" tabindex="-1">30、什么是通知（Advice）？ <a class="header-anchor" href="#_30、什么是通知-advice" aria-label="Permalink to &quot;30、什么是通知（Advice）？&quot;">​</a></h3><h3 id="_31、如何使用springboot实现分页和排序" tabindex="-1">31、如何使用SpringBoot实现分页和排序？ <a class="header-anchor" href="#_31、如何使用springboot实现分页和排序" aria-label="Permalink to &quot;31、如何使用SpringBoot实现分页和排序？&quot;">​</a></h3>`,65),i=[s];function t(p,l,g,u,E,c){return e(),o("div",null,i)}const b=a(n,[["render",t]]);export{h as __pageData,b as default};
