import{_ as a,o as s,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/javascript/JavaScript最新面试题及答案整理，汇总版.md","filePath":"interview/backend/javascript/JavaScript最新面试题及答案整理，汇总版.md"}'),o={name:"interview/backend/javascript/JavaScript最新面试题及答案整理，汇总版.md"},t=e(`<h3 id="_1、简述下你理解的面向对象" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1%E7%AE%80%E8%BF%B0%E4%B8%8B%E4%BD%A0%E7%90%86%E8%A7%A3%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">1、简述下你理解的面向对象？</a> <a class="header-anchor" href="#_1、简述下你理解的面向对象" aria-label="Permalink to &quot;[1、简述下你理解的面向对象？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#1简述下你理解的面向对象)&quot;">​</a></h3><p>万物皆对象，把一个对象抽象成类,具体上就是把一个对象的静态特征和动态特征抽象成属性和方法,也就是把一类事物的算法和数据结构封装在一个类之中,程序就是多个对象和互相之间的通信组成的、</p><p>面向对象具有封装性,继承性,多态性。</p><p>封装:隐蔽了对象内部不需要暴露的细节,使得内部细节的变动跟外界脱离,只依靠接口进行通信.封装性降低了编程的复杂性、通过继承,使得新建一个类变得容易,一个类从派生类那里获得其非私有的方法和公用属性的繁琐工作交给了编译器、而继承和实现接口和运行时的类型绑定机制 所产生的多态,使得不同的类所产生的对象能够对相同的消息作出不同的反应,极大地提高了代码的通用性、</p><p>总之,面向对象的特性提高了大型程序的重用性和可维护性.</p><h3 id="_2、简述下-this-和定义属性和方法的时候有什么区别-prototype" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E7%AE%80%E8%BF%B0%E4%B8%8B-this-%E5%92%8C%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%ABprototype" target="_blank" rel="noreferrer">2、简述下 this 和定义属性和方法的时候有什么区别?Prototype？</a> <a class="header-anchor" href="#_2、简述下-this-和定义属性和方法的时候有什么区别-prototype" aria-label="Permalink to &quot;[2、简述下 this 和定义属性和方法的时候有什么区别?Prototype？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#2简述下-this-和定义属性和方法的时候有什么区别prototype)&quot;">​</a></h3><p>this表示当前对象，如果在全局作用范围内使用this，则指代当前页面对象window； 如果在函数中使用this，则this指代什么是根据运行时此函数在什么对象上被调用。 我们还可以使用apply和call两个全局方法来改变函数中this的具体指向。</p><p>prototype本质上还是一个JavaScript对象。 并且每个函数都有一个默认的prototype属性。</p><p>在prototype上定义的属性方法为所有实例共享，所有实例皆引用到同一个对象，单一实例对原型上的属性进行修改，也会影响到所有其他实例。</p><h3 id="_3、javascript创建对象的几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3javascript%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">3、javascript创建对象的几种方式？</a> <a class="header-anchor" href="#_3、javascript创建对象的几种方式" aria-label="Permalink to &quot;[3、javascript创建对象的几种方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#3javascript创建对象的几种方式)&quot;">​</a></h3><p><code>javascript</code>创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用<code>JSON</code>；但写法有很多种，也能混合使用</p><p>对象字面量的方式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};</span></span></code></pre></div><p>用<code>function</code>来模拟无参的构造函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function Person(){}</span></span>
<span class="line"><span style="color:#f6f6f4;">    var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class</span></span>
<span class="line"><span style="color:#f6f6f4;">        person.name=&quot;Mark&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">        person.age=&quot;25&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">        person.work=function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">        alert(person.name+&quot; hello...&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">person.work();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function Person(){}</span></span>
<span class="line"><span style="color:#24292e;">    var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class</span></span>
<span class="line"><span style="color:#24292e;">        person.name=&quot;Mark&quot;;</span></span>
<span class="line"><span style="color:#24292e;">        person.age=&quot;25&quot;;</span></span>
<span class="line"><span style="color:#24292e;">        person.work=function(){</span></span>
<span class="line"><span style="color:#24292e;">        alert(person.name+&quot; hello...&quot;);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">person.work();</span></span></code></pre></div><p>用<code>function</code>来模拟参构造函数来实现（用<code>this</code>关键字定义构造的上下文属性）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function Pet(name,age,hobby){</span></span>
<span class="line"><span style="color:#f6f6f4;">       this.name=name;//this作用域：当前对象</span></span>
<span class="line"><span style="color:#f6f6f4;">       this.age=age;</span></span>
<span class="line"><span style="color:#f6f6f4;">       this.hobby=hobby;</span></span>
<span class="line"><span style="color:#f6f6f4;">       this.eat=function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">          alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">       }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">    var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象</span></span>
<span class="line"><span style="color:#f6f6f4;">    maidou.eat();//调用eat方法</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function Pet(name,age,hobby){</span></span>
<span class="line"><span style="color:#24292e;">       this.name=name;//this作用域：当前对象</span></span>
<span class="line"><span style="color:#24292e;">       this.age=age;</span></span>
<span class="line"><span style="color:#24292e;">       this.hobby=hobby;</span></span>
<span class="line"><span style="color:#24292e;">       this.eat=function(){</span></span>
<span class="line"><span style="color:#24292e;">          alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);</span></span>
<span class="line"><span style="color:#24292e;">       }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象</span></span>
<span class="line"><span style="color:#24292e;">    maidou.eat();//调用eat方法</span></span></code></pre></div><p>用工厂方式来创建（内置对象）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">var wcDog =new Object();</span></span>
<span class="line"><span style="color:#f6f6f4;">     wcDog.name=&quot;旺财&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">     wcDog.age=3;</span></span>
<span class="line"><span style="color:#f6f6f4;">     wcDog.work=function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">     }</span></span>
<span class="line"><span style="color:#f6f6f4;">     wcDog.work();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">var wcDog =new Object();</span></span>
<span class="line"><span style="color:#24292e;">     wcDog.name=&quot;旺财&quot;;</span></span>
<span class="line"><span style="color:#24292e;">     wcDog.age=3;</span></span>
<span class="line"><span style="color:#24292e;">     wcDog.work=function(){</span></span>
<span class="line"><span style="color:#24292e;">       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</span></span>
<span class="line"><span style="color:#24292e;">     }</span></span>
<span class="line"><span style="color:#24292e;">     wcDog.work();</span></span></code></pre></div><p>用原型方式来创建</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function Dog(){</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">     }</span></span>
<span class="line"><span style="color:#f6f6f4;">     Dog.prototype.name=&quot;旺财&quot;;</span></span>
<span class="line"><span style="color:#f6f6f4;">     Dog.prototype.eat=function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">     alert(this.name+&quot;是个吃货&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">     }</span></span>
<span class="line"><span style="color:#f6f6f4;">     var wangcai =new Dog();</span></span>
<span class="line"><span style="color:#f6f6f4;">     wangcai.eat();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function Dog(){</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">     }</span></span>
<span class="line"><span style="color:#24292e;">     Dog.prototype.name=&quot;旺财&quot;;</span></span>
<span class="line"><span style="color:#24292e;">     Dog.prototype.eat=function(){</span></span>
<span class="line"><span style="color:#24292e;">     alert(this.name+&quot;是个吃货&quot;);</span></span>
<span class="line"><span style="color:#24292e;">     }</span></span>
<span class="line"><span style="color:#24292e;">     var wangcai =new Dog();</span></span>
<span class="line"><span style="color:#24292e;">     wangcai.eat();</span></span></code></pre></div><p>用混合方式来创建</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function Car(name,price){</span></span>
<span class="line"><span style="color:#f6f6f4;">      this.name=name;</span></span>
<span class="line"><span style="color:#f6f6f4;">      this.price=price; </span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">     Car.prototype.sell=function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">       alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">      }</span></span>
<span class="line"><span style="color:#f6f6f4;">    var camry =new Car(&quot;凯美瑞&quot;,27);</span></span>
<span class="line"><span style="color:#f6f6f4;">    camry.sell();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function Car(name,price){</span></span>
<span class="line"><span style="color:#24292e;">      this.name=name;</span></span>
<span class="line"><span style="color:#24292e;">      this.price=price; </span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">     Car.prototype.sell=function(){</span></span>
<span class="line"><span style="color:#24292e;">       alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</span></span>
<span class="line"><span style="color:#24292e;">      }</span></span>
<span class="line"><span style="color:#24292e;">    var camry =new Car(&quot;凯美瑞&quot;,27);</span></span>
<span class="line"><span style="color:#24292e;">    camry.sell();</span></span></code></pre></div><h3 id="_4、异步加载的方式有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">4、异步加载的方式有哪些？</a> <a class="header-anchor" href="#_4、异步加载的方式有哪些" aria-label="Permalink to &quot;[4、异步加载的方式有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#4异步加载的方式有哪些)&quot;">​</a></h3><p>(1) defer，只支持IE</p><p>(2) async：true</p><p>(3) 创建script，插入到DOM中，加载完毕后callBack</p><h3 id="_5、你有哪些性能优化的方法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5%E4%BD%A0%E6%9C%89%E5%93%AA%E4%BA%9B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">5、你有哪些性能优化的方法？</a> <a class="header-anchor" href="#_5、你有哪些性能优化的方法" aria-label="Permalink to &quot;[5、你有哪些性能优化的方法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#5你有哪些性能优化的方法)&quot;">​</a></h3><p><strong>1、</strong> 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip， CDN托管，data缓存 ，图片服务器。</p><p><strong>2、</strong> 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</p><p><strong>3、</strong> 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p><p><strong>4、</strong> 当需要设置的样式很多时设置className而不是直接操作style。</p><p><strong>5、</strong> 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p><p><strong>6、</strong> 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p><p><strong>7、</strong> 图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。</p><p><strong>8、</strong> 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</p><h3 id="_6、压缩合并目的-http请求的优化方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E5%8E%8B%E7%BC%A9%E5%90%88%E5%B9%B6%E7%9B%AE%E7%9A%84http%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">6、压缩合并目的？http请求的优化方式？</a> <a class="header-anchor" href="#_6、压缩合并目的-http请求的优化方式" aria-label="Permalink to &quot;[6、压缩合并目的？http请求的优化方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#6压缩合并目的http请求的优化方式)&quot;">​</a></h3><p>1）Web性能优化最佳实践中最重要的一条是减少HTTP请求。而减少HTTP请求的最主要的方式就是，合并并压缩JavaScript和CSS文件。</p><p>CSS Sprites（CSS精灵）：把全站的图标都放在一个图像文件中，然后用CSS的background-image和background-position属性定位来显示其中的一小部分。</p><p>合并脚本和样式表; 图片地图：利用image map标签定义一个客户端图像映射，（图像映射指带有可点击区域的一幅图像）具体看： <a href="http://link.zhihu.com/?target=http%3A//club.topsage.com/thread-2527479-1-1.html" target="_blank" rel="noreferrer">http://club.topsage.com/thread-2527479-1-1.html</a></p><p>图片js/css等静态资源放在静态服务器或CDN服时，尽量采用不用的域名，这样能防止cookie不会互相污染，减少每次请求的往返数据。</p><p>css替代图片, 缓存一些数据</p><p>少用location.reload()：使用location.reload() 会刷新页面，刷新页面时页面所有资源 (css，js，img等) 会重新请求服务器。建议使用location.href=&quot;当前页url&quot; 代替location.reload() ，使用location.href 浏览器会读取本地缓存资源。</p><h3 id="_7、你觉得jquery源码有哪些写的好的地方" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E4%BD%A0%E8%A7%89%E5%BE%97jquery%E6%BA%90%E7%A0%81%E6%9C%89%E5%93%AA%E4%BA%9B%E5%86%99%E7%9A%84%E5%A5%BD%E7%9A%84%E5%9C%B0%E6%96%B9" target="_blank" rel="noreferrer">7、你觉得jQuery源码有哪些写的好的地方</a> <a class="header-anchor" href="#_7、你觉得jquery源码有哪些写的好的地方" aria-label="Permalink to &quot;[7、你觉得jQuery源码有哪些写的好的地方](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#7你觉得jquery源码有哪些写的好的地方)&quot;">​</a></h3><p><strong>1、</strong> <code>jquery</code>源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入<code>window</code>对象参数，可以使<code>window</code>对象作为局部变量使用，好处是当<code>jquery</code>中访问<code>window</code>对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问window对象。同样，传入<code>undefined</code>参数，可以缩短查找<code>undefined</code>时的作用域链</p><p><strong>2、</strong> <code>jquery</code>将一些原型属性和方法封装在了<code>jquery.prototype</code>中，为了缩短名称，又赋值给了<code>jquery.fn</code>，这是很形象的写法</p><p><strong>3、</strong> 有一些数组或对象的方法经常能使用到，<code>jQuery</code>将其保存为局部变量以提高访问速度</p><p><strong>4、</strong> <code>jquery</code>实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率</p><h3 id="_8、bootstrap好处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8bootstrap%E5%A5%BD%E5%A4%84" target="_blank" rel="noreferrer">8、bootstrap好处？</a> <a class="header-anchor" href="#_8、bootstrap好处" aria-label="Permalink to &quot;[8、bootstrap好处？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#8bootstrap好处)&quot;">​</a></h3><p>自适应和响应式布局，12栅格系统，统一的界面风格和css样式有利于团队开发。编写灵活、稳定、高质量的 HTML 和 CSS 代码的规范。</p><h3 id="_9、声明函数作用提升-声明变量和声明函数的提升有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E4%BD%9C%E7%94%A8%E6%8F%90%E5%8D%87%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E5%92%8C%E5%A3%B0%E6%98%8E%E5%87%BD%E6%95%B0%E7%9A%84%E6%8F%90%E5%8D%87%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">9、声明函数作用提升?声明变量和声明函数的提升有什么区别</a> <a class="header-anchor" href="#_9、声明函数作用提升-声明变量和声明函数的提升有什么区别" aria-label="Permalink to &quot;[9、声明函数作用提升?声明变量和声明函数的提升有什么区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#9声明函数作用提升声明变量和声明函数的提升有什么区别)&quot;">​</a></h3><p><strong>变量声明提升：</strong></p><p><strong>1、</strong> 变量申明在进入执行上下文就完成了。</p><p><strong>2、</strong> 只要变量在代码中进行了声明，无论它在哪个位置上进行声明， js引擎都会将它的声明放在范围作用域的顶部；</p><p>**函数声明提升</p><h3 id="_10、-function-和window-onload-和-document-ready-function" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10$function%7B%7D%E5%92%8Cwindowonload-%E5%92%8C-$documentreadyfunction%7B%7D" target="_blank" rel="noreferrer">10、$(function(){})和window.onload 和 $(document).ready(function(){})</a> <a class="header-anchor" href="#_10、-function-和window-onload-和-document-ready-function" aria-label="Permalink to &quot;[10、$(function(){})和window.onload 和 $(document).ready(function(){})](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新面试题及答案整理，汇总版.md#10$function{}和windowonload-和-$documentreadyfunction{})&quot;">​</a></h3><p>window.onload:用于当页面的所有元素，包括外部引用文件，图片等都加载完毕时运行函数内的函数。load方法只能执行一次，如果在js文件里写了多个，只能执行最后一个。</p><p>$$(document).ready(function(){})和$$(function(){})都是用于当页面的标准DOM元素被解析成DOM树后就执行内部函数。这个函数是可以在js文件里多次编写的，对于多人共同编写的js就有很大的优势，因为所有行为函数都会执行到。而且$(document).ready()函数在HMTL结构加载完后就可以执行，不需要等大型文件加载或者不存在的连接等耗时工作完成才执行，效率高。</p><h3 id="_11、渐进增强和优雅降级" tabindex="-1">11、渐进增强和优雅降级 <a class="header-anchor" href="#_11、渐进增强和优雅降级" aria-label="Permalink to &quot;11、渐进增强和优雅降级&quot;">​</a></h3><h3 id="_12、事件模型" tabindex="-1">12、事件模型 <a class="header-anchor" href="#_12、事件模型" aria-label="Permalink to &quot;12、事件模型&quot;">​</a></h3><h3 id="_13、说出几个http协议状态码" tabindex="-1">13、说出几个http协议状态码? <a class="header-anchor" href="#_13、说出几个http协议状态码" aria-label="Permalink to &quot;13、说出几个http协议状态码?&quot;">​</a></h3><h3 id="_14、web开发中会话跟踪的方法有哪些" tabindex="-1">14、web开发中会话跟踪的方法有哪些 <a class="header-anchor" href="#_14、web开发中会话跟踪的方法有哪些" aria-label="Permalink to &quot;14、web开发中会话跟踪的方法有哪些&quot;">​</a></h3><h3 id="_15、实现继承的方法有哪些" tabindex="-1">15、实现继承的方法有哪些？？？ <a class="header-anchor" href="#_15、实现继承的方法有哪些" aria-label="Permalink to &quot;15、实现继承的方法有哪些？？？&quot;">​</a></h3><h3 id="_16、js延迟加载的方式有哪些" tabindex="-1">16、js延迟加载的方式有哪些？ <a class="header-anchor" href="#_16、js延迟加载的方式有哪些" aria-label="Permalink to &quot;16、js延迟加载的方式有哪些？&quot;">​</a></h3><h3 id="_17、ajax请求方式有几种-8种" tabindex="-1">17、ajax请求方式有几种（8种）？ <a class="header-anchor" href="#_17、ajax请求方式有几种-8种" aria-label="Permalink to &quot;17、ajax请求方式有几种（8种）？&quot;">​</a></h3><h3 id="_18、谁是c的构造函数" tabindex="-1">18、谁是c的构造函数? <a class="header-anchor" href="#_18、谁是c的构造函数" aria-label="Permalink to &quot;18、谁是c的构造函数?&quot;">​</a></h3><h3 id="_19、基本数据类型和引用数据类型有什么区别" tabindex="-1">19、基本数据类型和引用数据类型有什么区别？ <a class="header-anchor" href="#_19、基本数据类型和引用数据类型有什么区别" aria-label="Permalink to &quot;19、基本数据类型和引用数据类型有什么区别？&quot;">​</a></h3><h3 id="_20、什么是对象解构" tabindex="-1">20、什么是对象解构？ <a class="header-anchor" href="#_20、什么是对象解构" aria-label="Permalink to &quot;20、什么是对象解构？&quot;">​</a></h3><h3 id="_21、对象的-prototype-原型-是什么" tabindex="-1">21、对象的 prototype(原型) 是什么？ <a class="header-anchor" href="#_21、对象的-prototype-原型-是什么" aria-label="Permalink to &quot;21、对象的 prototype(原型) 是什么？&quot;">​</a></h3><h3 id="_22、函数fn1-函数fn2-函数fn3-如果想在三个函数都执行完成后执行某一个事件应该如何实现" tabindex="-1">22、函数fn1 函数fn2 函数fn3，如果想在三个函数都执行完成后执行某一个事件应该如何实现? <a class="header-anchor" href="#_22、函数fn1-函数fn2-函数fn3-如果想在三个函数都执行完成后执行某一个事件应该如何实现" aria-label="Permalink to &quot;22、函数fn1 函数fn2 函数fn3，如果想在三个函数都执行完成后执行某一个事件应该如何实现?&quot;">​</a></h3><h3 id="_23、如何检查值是否虚值" tabindex="-1">23、如何检查值是否虚值？ <a class="header-anchor" href="#_23、如何检查值是否虚值" aria-label="Permalink to &quot;23、如何检查值是否虚值？&quot;">​</a></h3><h3 id="_24、为什么函数被称为一等公民" tabindex="-1">24、为什么函数被称为一等公民？ <a class="header-anchor" href="#_24、为什么函数被称为一等公民" aria-label="Permalink to &quot;24、为什么函数被称为一等公民？&quot;">​</a></h3><h3 id="_25、什么是-es6-模块" tabindex="-1">25、什么是 ES6 模块？ <a class="header-anchor" href="#_25、什么是-es6-模块" aria-label="Permalink to &quot;25、什么是 ES6 模块？&quot;">​</a></h3><h3 id="_26、jquery和zepto有什么区别" tabindex="-1">26、jquery和zepto有什么区别? <a class="header-anchor" href="#_26、jquery和zepto有什么区别" aria-label="Permalink to &quot;26、jquery和zepto有什么区别?&quot;">​</a></h3><h3 id="_27、说说你对amd和commonjs的理解" tabindex="-1">27、说说你对AMD和Commonjs的理解 <a class="header-anchor" href="#_27、说说你对amd和commonjs的理解" aria-label="Permalink to &quot;27、说说你对AMD和Commonjs的理解&quot;">​</a></h3><h3 id="_28、什么是事件冒泡" tabindex="-1">28、什么是事件冒泡？ <a class="header-anchor" href="#_28、什么是事件冒泡" aria-label="Permalink to &quot;28、什么是事件冒泡？&quot;">​</a></h3><h3 id="_29、闭包" tabindex="-1">29、闭包 <a class="header-anchor" href="#_29、闭包" aria-label="Permalink to &quot;29、闭包&quot;">​</a></h3>`,77),p=[t];function l(r,c,i,u,d,h){return s(),n("div",null,p)}const y=a(o,[["render",l]]);export{f as __pageData,y as default};
