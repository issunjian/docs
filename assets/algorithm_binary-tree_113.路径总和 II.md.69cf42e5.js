import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"LeetCode 113. 路径总和 II","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/binary-tree/113.路径总和 II.md","filePath":"algorithm/binary-tree/113.路径总和 II.md"}'),p={name:"algorithm/binary-tree/113.路径总和 II.md"},o=l(`<h1 id="leetcode-113-路径总和-ii" tabindex="-1">LeetCode 113. 路径总和 II <a class="header-anchor" href="#leetcode-113-路径总和-ii" aria-label="Permalink to &quot;LeetCode 113. 路径总和 II&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">给定如下二叉树，以及目标和 sum </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">22</span><span style="color:#F6F6F4;">，</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">              </span><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">8</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">   </span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">4</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">  \\    </span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">给定如下二叉树，以及目标和 sum </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span><span style="color:#24292E;">，</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#032F62;">/   /</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">/  </span><span style="color:#22863A;font-weight:bold;">\\ </span><span style="color:#032F62;">   /</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>返回:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">],</span></span>
<span class="line"><span style="color:#F6F6F4;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/path-sum-ii" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/path-sum-ii</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p><code>dfs</code>，进行深度优先遍历，一直遍历到子节点为止，进行一次判断，如果当前 <code>sum</code>为 0 ，那么就是我们想要的结果，然后注意 <code>js</code> 语法中形参如果是数组，那么我们拿到的是引用值，可以拷贝一份。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{TreeNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">root</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{number}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">sum</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{number[][]}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">pathSum</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">sum</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> res </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [];</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dfs</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">cur</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">root</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">sum</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (root </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 拷贝一份</span></span>
<span class="line"><span style="color:#F6F6F4;">    cur </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">cur, root.val];</span></span>
<span class="line"><span style="color:#F6F6F4;">    sum </span><span style="color:#F286C4;">-=</span><span style="color:#F6F6F4;"> root.val;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">root.right </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> sum </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      res.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(cur);</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 优先遍历左子树</span></span>
<span class="line"><span style="color:#F6F6F4;">    root.left </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dfs</span><span style="color:#F6F6F4;">(cur, root.left, sum);</span></span>
<span class="line"><span style="color:#F6F6F4;">    root.right </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">dfs</span><span style="color:#F6F6F4;">(cur, root.right, sum);</span></span>
<span class="line"><span style="color:#F6F6F4;">  };</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">dfs</span><span style="color:#F6F6F4;">([], root, sum);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> res;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="color:#6A737D;"> * function TreeNode(val) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">sum</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[][]}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pathSum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">cur</span><span style="color:#24292E;">, </span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sum</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 拷贝一份</span></span>
<span class="line"><span style="color:#24292E;">    cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">cur, root.val];</span></span>
<span class="line"><span style="color:#24292E;">    sum </span><span style="color:#D73A49;">-=</span><span style="color:#24292E;"> root.val;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sum </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(cur);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 优先遍历左子树</span></span>
<span class="line"><span style="color:#24292E;">    root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(cur, root.left, sum);</span></span>
<span class="line"><span style="color:#24292E;">    root.right </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">(cur, root.right, sum);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dfs</span><span style="color:#24292E;">([], root, sum);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>不太明白的小伙伴，这里给一个友好的提示，我们可以打印一下拷贝出来的<code>cur</code>，结合图示应该就好理解了，经典的 <code>dfs</code>实现的先序遍历。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#BF9EEE;">5</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">8</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">   </span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">4</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#EE6666;">/</span><span style="color:#E7EE98;">  \\    </span><span style="color:#EE6666;">/</span><span style="color:#F6F6F4;"> \\</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">   </span><span style="color:#BF9EEE;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">5</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">8</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#032F62;">/   /</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">4</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#032F62;">/  </span><span style="color:#22863A;font-weight:bold;">\\ </span><span style="color:#032F62;">   /</span><span style="color:#24292E;"> \\</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">    </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">   </span><span style="color:#005CC5;">1</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">)][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">)][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">)][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">)][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">)][</span></span>
<span class="line"><span style="color:#F6F6F4;">  (</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">)][(</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">)][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">)][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">)][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">)][</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)][(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)];</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">学如逆水行舟，不进则退</span></span></code></pre></div>`,16),e=[o];function c(t,r,y,F,E,i){return a(),n("div",null,e)}const B=s(p,[["render",c]]);export{d as __pageData,B as default};
