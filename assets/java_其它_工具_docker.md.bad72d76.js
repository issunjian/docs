import{_ as e,o as a,c as r,V as o}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"Docker","description":"","frontmatter":{},"headers":[],"relativePath":"java/其它/工具/docker.md","filePath":"java/其它/工具/docker.md"}'),t={name:"java/其它/工具/docker.md"},c=o('<h1 id="docker" tabindex="-1">Docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;Docker&quot;">​</a></h1><hr><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="容器技术" tabindex="-1">容器技术 <a class="header-anchor" href="#容器技术" aria-label="Permalink to &quot;容器技术&quot;">​</a></h3><p>传统应用直接部署在物理服务器的操作系统上，成本高昂、资源闲置、难以迁移和扩展。</p><ul><li><strong>虚拟化技术</strong></li></ul><p>隔离底层硬件和上层应用，使物理服务器上可以部署多个虚拟机，每个虚拟机都是一个单独的操作系统，每个应用运行在一个单独的虚拟机中。</p><p>资源易调配，易扩展，不用考虑底层机器，很容易上云。</p><p>缺点：</p><ol><li>每一个虚拟机都是一个完整的操作系统，需要分配和消耗资源。</li><li>开发和运维使用的语言和工具极多，难以使用和维护。需要打包。</li></ol><ul><li><strong>容器技术</strong></li></ul><p>提供了开发、打包、应用 APP 的平台。</p><p>将软件和依赖整体打包，在操作系统上划分多个容器，实现了应用之间的隔离，能够运行到任何环境上。</p><p>在开发和运维之间搭建了桥梁。</p><p>简化配置，打包到容器运行到不同的环境。 快速部署</p><h3 id="docker-介绍" tabindex="-1">Docker 介绍 <a class="header-anchor" href="#docker-介绍" aria-label="Permalink to &quot;Docker 介绍&quot;">​</a></h3><p>kubernetes(k8s) 容器编排工具 连接 api 和 。。。 docker</p>',17),l=[c];function i(n,s,d,p,h,_){return a(),r("div",null,l)}const m=e(t,[["render",i]]);export{u as __pageData,m as default};
