import{_ as e,o as s,c as a,V as i}from"./chunks/framework.c6d8cbec.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/redis/redis-05.md","filePath":"interview/backend/redis/redis-05.md"}'),r={name:"interview/backend/redis/redis-05.md"},d=i('<h3 id="_1、为什么-edis-需要把所有数据放到内存中" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E4%B8%BA%E4%BB%80%E4%B9%88-edis-%E9%9C%80%E8%A6%81%E6%8A%8A%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E6%94%BE%E5%88%B0%E5%86%85%E5%AD%98%E4%B8%AD" target="_blank" rel="noreferrer">1、为什么 edis 需要把所有数据放到内存中？</a> <a class="header-anchor" href="#_1、为什么-edis-需要把所有数据放到内存中" aria-label="Permalink to &quot;[1、为什么 edis 需要把所有数据放到内存中？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#1为什么-edis-需要把所有数据放到内存中)&quot;">​</a></h3><p>Redis 为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。所以 Redis 具有快速和数据持久化的特征。如果不将数据放在内存中， 磁盘 I/O 速度为严重影响 Redis 的性能。在内存越来越便宜的今天， Redis 将会越来越受欢迎。如果设置了最大使用的内存， 则数据已有记录数达到内存限值后不能继续插入新值。</p><h3 id="_2、mysql里有2000w数据-redis中只存20w的数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2mysql%E9%87%8C%E6%9C%892000w%E6%95%B0%E6%8D%AEredis%E4%B8%AD%E5%8F%AA%E5%AD%9820w%E7%9A%84%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">2、MySQL里有2000w数据，Redis中只存20w的数据</a> <a class="header-anchor" href="#_2、mysql里有2000w数据-redis中只存20w的数据" aria-label="Permalink to &quot;[2、MySQL里有2000w数据，Redis中只存20w的数据](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#2mysql里有2000w数据redis中只存20w的数据)&quot;">​</a></h3><p><strong>如何保证Redis中的数据都是热点数据？</strong></p><p>Redis内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</p><p>其实面试除了考察Redis，不少公司都很重视高并发高可用的技术，特别是一线互联网公司，分布式、JVM、spring源码分析、微服务等知识点已是面试的必考题。我自己整理收集了一套系统的架构技术体系，针对当前互联网公司的技术需求以及结合主流技术，这些东西可能你们平时在工作中接触过，但是缺少的全面系统的学习，加入</p><h3 id="_3、reids6种淘汰策略" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3reids6%E7%A7%8D%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%EF%BC%9A" target="_blank" rel="noreferrer">3、Reids6种淘汰策略：</a> <a class="header-anchor" href="#_3、reids6种淘汰策略" aria-label="Permalink to &quot;[3、Reids6种淘汰策略：](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#3reids6种淘汰策略：)&quot;">​</a></h3><p><strong>noeviction</strong>: 不删除策略, 达到最大内存限制时, 如果需要更多内存, 直接返回错误信息。大多数写命令都会导致占用更多的内存(有极少数会例外。</p><p>**allkeys-lru:**所有key通用; 优先删除最近最少使用(less recently used ,LRU) 的 key。</p><p>**volatile-lru:**只限于设置了 expire 的部分; 优先删除最近最少使用(less recently used ,LRU) 的 key。</p><p>**allkeys-random:**所有key通用; 随机删除一部分 key。</p><p><strong>volatile-random</strong>: 只限于设置了 <strong>expire</strong> 的部分; 随机删除一部分 key。</p><p><strong>volatile-ttl</strong>: 只限于设置了 <strong>expire</strong> 的部分; 优先删除剩余时间(time to live,TTL) 短的key。</p><h3 id="_4、redis还提供的高级工具" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4redis%E8%BF%98%E6%8F%90%E4%BE%9B%E7%9A%84%E9%AB%98%E7%BA%A7%E5%B7%A5%E5%85%B7" target="_blank" rel="noreferrer">4、Redis还提供的高级工具</a> <a class="header-anchor" href="#_4、redis还提供的高级工具" aria-label="Permalink to &quot;[4、Redis还提供的高级工具](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#4redis还提供的高级工具)&quot;">​</a></h3><p>像慢查询分析、性能测试、Pipeline、事务、Lua自定义命令、Bitmaps、HyperLogLog、/订阅、Geo等个性化功能。</p><h3 id="_5、pipeline-有什么好处-为什么要用pipeline" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5pipeline-%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8pipeline" target="_blank" rel="noreferrer">5、Pipeline 有什么好处，为什么要用pipeline？</a> <a class="header-anchor" href="#_5、pipeline-有什么好处-为什么要用pipeline" aria-label="Permalink to &quot;[5、Pipeline 有什么好处，为什么要用pipeline？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#5pipeline-有什么好处为什么要用pipeline)&quot;">​</a></h3><p>可以将多次 IO 往返的时间缩减为一次，前提是 pipeline 执行的指令之间没有因果相关性。使用 Redis-benchmark 进行压测的时候可以发现影响 Redis 的 QPS 峰值的一个重要因素是 pipeline 批次指令的数目。</p><h3 id="_6、redis-集群方案什么情况下会导致整个集群不可用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6redis-%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%AF%BC%E8%87%B4%E6%95%B4%E4%B8%AA%E9%9B%86%E7%BE%A4%E4%B8%8D%E5%8F%AF%E7%94%A8" target="_blank" rel="noreferrer">6、Redis 集群方案什么情况下会导致整个集群不可用？</a> <a class="header-anchor" href="#_6、redis-集群方案什么情况下会导致整个集群不可用" aria-label="Permalink to &quot;[6、Redis 集群方案什么情况下会导致整个集群不可用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#6redis-集群方案什么情况下会导致整个集群不可用)&quot;">​</a></h3><p>有 A， B， C 三个节点的集群,在没有复制模型的情况下,如果节点 B 失败了， 那么整个集群就会以为缺少 5501-11000 这个范围的槽而不可用。</p><h3 id="_7、redis-的内存用完了会发生什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7redis-%E7%9A%84%E5%86%85%E5%AD%98%E7%94%A8%E5%AE%8C%E4%BA%86%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">7、Redis 的内存用完了会发生什么？</a> <a class="header-anchor" href="#_7、redis-的内存用完了会发生什么" aria-label="Permalink to &quot;[7、Redis 的内存用完了会发生什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#7redis-的内存用完了会发生什么)&quot;">​</a></h3><p>如果达到设置的上限，Redis 的写命令会返回错误信息（ 但是读命令还可以正常返回。） 或者你可以将 Redis 当缓存来使用配置淘汰机制， 当 Redis 达到内存上限时会冲刷掉旧的内容。</p><h3 id="_8、删除key" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E5%88%A0%E9%99%A4key" target="_blank" rel="noreferrer">8、删除key</a> <a class="header-anchor" href="#_8、删除key" aria-label="Permalink to &quot;[8、删除key](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#8删除key)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">del key1 key2 ...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">del key1 key2 ...</span></span></code></pre></div><h3 id="_9、redis集群最大节点个数是多少" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9redis%E9%9B%86%E7%BE%A4%E6%9C%80%E5%A4%A7%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0%E6%98%AF%E5%A4%9A%E5%B0%91" target="_blank" rel="noreferrer">9、Redis集群最大节点个数是多少？</a> <a class="header-anchor" href="#_9、redis集群最大节点个数是多少" aria-label="Permalink to &quot;[9、Redis集群最大节点个数是多少？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#9redis集群最大节点个数是多少)&quot;">​</a></h3><p>16384个。</p><h3 id="_10、redis-到底是怎么实现-附近的人" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10redis-%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E2%80%9C%E9%99%84%E8%BF%91%E7%9A%84%E4%BA%BA" target="_blank" rel="noreferrer">10、Redis 到底是怎么实现“附近的人”</a> <a class="header-anchor" href="#_10、redis-到底是怎么实现-附近的人" aria-label="Permalink to &quot;[10、Redis 到底是怎么实现“附近的人”](https://gitee.com/souyunku/DevBooks/blob/master/docs/Redis/Redis最新面试题，2021年面试题及答案汇总.md#10redis-到底是怎么实现“附近的人)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">GEOADD key longitude latitude member [longitude latitude member ...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">GEOADD key longitude latitude member [longitude latitude member ...]</span></span></code></pre></div><p>将给定的位置对象（纬度、经度、名字）添加到指定的key。其中，key为集合名称，member为该经纬度所对应的对象。在实际运用中，当所需存储的对象数量过多时，可通过设置多key(如一个省一个key)的方式对对象集合变相做sharding，避免单集合数量过多。</p><p><strong>成功插入后的返回值：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">(integer) N</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(integer) N</span></span></code></pre></div><p>其中N为成功插入的个数。</p><h3 id="_11、什么是redis" tabindex="-1">11、什么是Redis? <a class="header-anchor" href="#_11、什么是redis" aria-label="Permalink to &quot;11、什么是Redis?&quot;">​</a></h3><h3 id="_12、redis集群方案应该怎么做-都有哪些方案" tabindex="-1">12、Redis集群方案应该怎么做？都有哪些方案？ <a class="header-anchor" href="#_12、redis集群方案应该怎么做-都有哪些方案" aria-label="Permalink to &quot;12、Redis集群方案应该怎么做？都有哪些方案？&quot;">​</a></h3><h3 id="_13、redis官方为什么不提供windows版本" tabindex="-1">13、Redis官方为什么不提供Windows版本？ <a class="header-anchor" href="#_13、redis官方为什么不提供windows版本" aria-label="Permalink to &quot;13、Redis官方为什么不提供Windows版本？&quot;">​</a></h3><h3 id="_14、redis的并发竞争问题如何解决" tabindex="-1">14、Redis的并发竞争问题如何解决? <a class="header-anchor" href="#_14、redis的并发竞争问题如何解决" aria-label="Permalink to &quot;14、Redis的并发竞争问题如何解决?&quot;">​</a></h3><h3 id="_15、memcache-与redis-的区别都有哪些" tabindex="-1">15、Memcache 与Redis 的区别都有哪些？ <a class="header-anchor" href="#_15、memcache-与redis-的区别都有哪些" aria-label="Permalink to &quot;15、Memcache 与Redis 的区别都有哪些？&quot;">​</a></h3><h3 id="_16、redis-是单进程单线程的" tabindex="-1">16、Redis 是单进程单线程的？ <a class="header-anchor" href="#_16、redis-是单进程单线程的" aria-label="Permalink to &quot;16、Redis 是单进程单线程的？&quot;">​</a></h3><h3 id="_17、redis是单线程的-但redis为什么这么快" tabindex="-1">17、Redis是单线程的，但Redis为什么这么快？ <a class="header-anchor" href="#_17、redis是单线程的-但redis为什么这么快" aria-label="Permalink to &quot;17、Redis是单线程的，但Redis为什么这么快？&quot;">​</a></h3><h3 id="_18、redis-回收进程如何工作的" tabindex="-1">18、Redis 回收进程如何工作的? <a class="header-anchor" href="#_18、redis-回收进程如何工作的" aria-label="Permalink to &quot;18、Redis 回收进程如何工作的?&quot;">​</a></h3><h3 id="_19、支持一致性哈希的客户端有哪些" tabindex="-1">19、支持一致性哈希的客户端有哪些？ <a class="header-anchor" href="#_19、支持一致性哈希的客户端有哪些" aria-label="Permalink to &quot;19、支持一致性哈希的客户端有哪些？&quot;">​</a></h3><h3 id="_20、一个字符串类型的值能存储最大容量是多少" tabindex="-1">20、一个字符串类型的值能存储最大容量是多少？ <a class="header-anchor" href="#_20、一个字符串类型的值能存储最大容量是多少" aria-label="Permalink to &quot;20、一个字符串类型的值能存储最大容量是多少？&quot;">​</a></h3><h3 id="_21、redis回收进程如何工作的" tabindex="-1">21、Redis回收进程如何工作的？ <a class="header-anchor" href="#_21、redis回收进程如何工作的" aria-label="Permalink to &quot;21、Redis回收进程如何工作的？&quot;">​</a></h3><h3 id="_22、假如-redis-里面有-1-亿个key-其中有-10w-个key-是以某个固定的已知的前缀开头的-如果将它们全部找出来" tabindex="-1">22、假如 Redis 里面有 1 亿个key，其中有 10w 个key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？ <a class="header-anchor" href="#_22、假如-redis-里面有-1-亿个key-其中有-10w-个key-是以某个固定的已知的前缀开头的-如果将它们全部找出来" aria-label="Permalink to &quot;22、假如 Redis 里面有 1 亿个key，其中有 10w 个key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？&quot;">​</a></h3><h3 id="_23、redis常见性能问题和解决方案" tabindex="-1">23、Redis常见性能问题和解决方案： <a class="header-anchor" href="#_23、redis常见性能问题和解决方案" aria-label="Permalink to &quot;23、Redis常见性能问题和解决方案：&quot;">​</a></h3><h3 id="_24、redis-集群最大节点个数是多少" tabindex="-1">24、Redis 集群最大节点个数是多少？ <a class="header-anchor" href="#_24、redis-集群最大节点个数是多少" aria-label="Permalink to &quot;24、Redis 集群最大节点个数是多少？&quot;">​</a></h3><h3 id="_25、redis-的主从复制" tabindex="-1">25、Redis 的主从复制 <a class="header-anchor" href="#_25、redis-的主从复制" aria-label="Permalink to &quot;25、Redis 的主从复制&quot;">​</a></h3><h3 id="_26、reids工具命令" tabindex="-1">26、Reids工具命令 <a class="header-anchor" href="#_26、reids工具命令" aria-label="Permalink to &quot;26、Reids工具命令&quot;">​</a></h3><h3 id="_27、多节点-redis-分布式锁-redlock-算法" tabindex="-1">27、多节点 Redis 分布式锁：Redlock 算法 <a class="header-anchor" href="#_27、多节点-redis-分布式锁-redlock-算法" aria-label="Permalink to &quot;27、多节点 Redis 分布式锁：Redlock 算法&quot;">​</a></h3><h3 id="_28、redis常见性能问题和解决方案" tabindex="-1">28、Redis常见性能问题和解决方案？ <a class="header-anchor" href="#_28、redis常见性能问题和解决方案" aria-label="Permalink to &quot;28、Redis常见性能问题和解决方案？&quot;">​</a></h3><h3 id="_29、redis-的同步机制了解么" tabindex="-1">29、Redis 的同步机制了解么？ <a class="header-anchor" href="#_29、redis-的同步机制了解么" aria-label="Permalink to &quot;29、Redis 的同步机制了解么？&quot;">​</a></h3>',50),o=[d];function t(l,E,n,h,c,B){return s(),a("div",null,o)}const u=e(r,[["render",t]]);export{A as __pageData,u as default};
