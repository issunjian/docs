import{_ as e,o,c as a,V as r}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/zookeeper/zookeeper-02.md","filePath":"interview/backend/zookeeper/zookeeper-02.md"}'),t={name:"interview/backend/zookeeper/zookeeper-02.md"},s=r('<h3 id="_1、stat记录了哪些版本相关数据" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1stat%E8%AE%B0%E5%BD%95%E4%BA%86%E5%93%AA%E4%BA%9B%E7%89%88%E6%9C%AC%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">1、Stat记录了哪些版本相关数据？</a> <a class="header-anchor" href="#_1、stat记录了哪些版本相关数据" aria-label="Permalink to &quot;[1、Stat记录了哪些版本相关数据？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#1stat记录了哪些版本相关数据)&quot;">​</a></h3><p>version:当前ZNode版本</p><p>cversion:当前ZNode子节点版本</p><p>aversion:当前ZNode的ACL版本</p><h3 id="_2、base理论" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2base%E7%90%86%E8%AE%BA" target="_blank" rel="noreferrer">2、BASE理论？</a> <a class="header-anchor" href="#_2、base理论" aria-label="Permalink to &quot;[2、BASE理论？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#2base理论)&quot;">​</a></h3><p><strong>1、</strong> Basically Available(基本可用)、Soft state(软状态) 和 Eventuanlly consistent （最终一致性）3个短语的简写。</p><p><strong>2、</strong> 基本可用：系统出现不可预知的故障时，允许损失部分可用性。</p><p><strong>3、</strong> 弱（软）状态：数据的中间状态，并认为改状态存在不会一项系统整体可用性，允许不同节点数据副本数据同步过程中的延时。</p><p><strong>4、</strong> 最终一致性：系统中所有数据副本，在一段时间的同步后，最终数据能够到一致性的状态。</p><h3 id="_3、zookeeper-watcher-机制-–-数据变更通知" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3zookeeper-watcher-%E6%9C%BA%E5%88%B6-%E2%80%93-%E6%95%B0%E6%8D%AE%E5%8F%98%E6%9B%B4%E9%80%9A%E7%9F%A5" target="_blank" rel="noreferrer">3、Zookeeper Watcher 机制 – 数据变更通知</a> <a class="header-anchor" href="#_3、zookeeper-watcher-机制-–-数据变更通知" aria-label="Permalink to &quot;[3、Zookeeper Watcher 机制 – 数据变更通知](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#3zookeeper-watcher-机制-–-数据变更通知)&quot;">​</a></h3><p>Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。</p><p><strong>工作机制：</strong></p><p><strong>1、</strong> 客户端注册 watcher</p><p><strong>2、</strong> 服务端处理 watcher</p><p><strong>3、</strong> 客户端回调 watcher</p><h3 id="_4、如何识别请求的先后顺序" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%E8%AF%B7%E6%B1%82%E7%9A%84%E5%85%88%E5%90%8E%E9%A1%BA%E5%BA%8F" target="_blank" rel="noreferrer">4、如何识别请求的先后顺序？</a> <a class="header-anchor" href="#_4、如何识别请求的先后顺序" aria-label="Permalink to &quot;[4、如何识别请求的先后顺序？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#4如何识别请求的先后顺序)&quot;">​</a></h3><p>ZooKeeper会给每个更新请求，分配一个全局唯一的递增编号（zxid)，编号的大小体现事务操作的先后顺序。</p><h3 id="_5、zk的命名服务-文件系统" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5zk%E7%9A%84%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F" target="_blank" rel="noreferrer">5、zk的命名服务（文件系统）</a> <a class="header-anchor" href="#_5、zk的命名服务-文件系统" aria-label="Permalink to &quot;[5、zk的命名服务（文件系统）](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#5zk的命名服务文件系统)&quot;">​</a></h3><p>命名服务是指通过指定的名字来获取资源或者服务的地址，利用zk创建一个全局的路径，即是唯一的路径，这个路径就可以作为一个名字，指向集群中的集群，提供的服务的地址，或者一个远程的对象等等。</p><h3 id="_6、如何查看子节点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8B%E5%AD%90%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">6、如何查看子节点？</a> <a class="header-anchor" href="#_6、如何查看子节点" aria-label="Permalink to &quot;[6、如何查看子节点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#6如何查看子节点)&quot;">​</a></h3><p>ls path [watch]</p><p>path : 节点路径</p><p>[zk: localhost:2181(CONNECTED) 5] ls /app</p><p>[book]</p><h3 id="_7、chubby是什么-和zookeeper比你怎么看" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7chubby%E6%98%AF%E4%BB%80%E4%B9%88%E5%92%8Czookeeper%E6%AF%94%E4%BD%A0%E6%80%8E%E4%B9%88%E7%9C%8B" target="_blank" rel="noreferrer">7、chubby是什么，和zookeeper比你怎么看？</a> <a class="header-anchor" href="#_7、chubby是什么-和zookeeper比你怎么看" aria-label="Permalink to &quot;[7、chubby是什么，和zookeeper比你怎么看？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#7chubby是什么和zookeeper比你怎么看)&quot;">​</a></h3><p>chubby是google的，完全实现paxos算法，不开源。zookeeper是chubby的开源实现，使用zab协议，paxos算法的变种。</p><h3 id="_8、zookeeper-面试题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8zookeeper-%E9%9D%A2%E8%AF%95%E9%A2%98" target="_blank" rel="noreferrer">8、ZooKeeper 面试题？</a> <a class="header-anchor" href="#_8、zookeeper-面试题" aria-label="Permalink to &quot;[8、ZooKeeper 面试题？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#8zookeeper-面试题)&quot;">​</a></h3><p>ZooKeeper是一个开放源码的分布式协调服务，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>分布式应用程序可以基于Zookeeper实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p><p><strong>Zookeeper保证了如下分布式一致性特性：</strong></p><p><strong>1、</strong> 顺序一致性</p><p><strong>2、</strong> 原子性</p><p><strong>3、</strong> 单一视图</p><p><strong>4、</strong> 可靠性</p><p><strong>5、</strong> 实时性（最终一致性）</p><p>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的zookeeper机器来处理。对于写请求，这些请求会同时发给其他zookeeper机器并且达成一致后，请求才会返回成功。因此，随着zookeeper的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</p><p>有序性是zookeeper中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper最新的zxid。</p><h3 id="_9、zookeeper-有哪几种几种部署模式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9zookeeper-%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%87%A0%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%A8%A1%E5%BC%8F" target="_blank" rel="noreferrer">9、Zookeeper 有哪几种几种部署模式？</a> <a class="header-anchor" href="#_9、zookeeper-有哪几种几种部署模式" aria-label="Permalink to &quot;[9、Zookeeper 有哪几种几种部署模式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#9zookeeper-有哪几种几种部署模式)&quot;">​</a></h3><p><strong>Zookeeper 有三种部署模式</strong>：</p><p><strong>1、</strong> 单机部署：一台集群上运行；</p><p><strong>2、</strong> 集群部署：多台集群运行；</p><p><strong>3、</strong> 伪集群部署：一台集群启动多个 Zookeeper 实例运行。</p><h3 id="_10、服务端处理watcher实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%A4%84%E7%90%86watcher%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">10、服务端处理Watcher实现</a> <a class="header-anchor" href="#_10、服务端处理watcher实现" aria-label="Permalink to &quot;[10、服务端处理Watcher实现](https://gitee.com/souyunku/DevBooks/blob/master/docs/ZooKeeper/ZooKeeper最新2021年面试题大汇总，附答案.md#10服务端处理watcher实现)&quot;">​</a></h3><p><strong>1、</strong> 服务端接收Watcher并存储</p><p>接收到客户端请求，处理请求判断是否需要注册Watcher，需要的话将数据节点的节点路径和ServerCnxn（ServerCnxn代表一个客户端和服务端的连接，实现了Watcher的process接口，此时可以看成一个Watcher对象）存储在WatcherManager的WatchTable和watch2Paths中去。</p><p><strong>2、</strong> Watcher触发</p><p>以服务端接收到 setData() 事务请求触发NodeDataChanged事件为例：</p><p>2.1 封装WatchedEvent</p><p>将通知状态（SyncConnected）、事件类型（NodeDataChanged）以及节点路径封装成一个WatchedEvent对象</p><p>2.2 查询Watcher</p><p>从WatchTable中根据节点路径查找Watcher</p><p>2.3 没找到；说明没有客户端在该数据节点上注册过Watcher</p><p>2.4 找到；提取并从WatchTable和Watch2Paths中删除对应Watcher（从这里可以看出Watcher在服务端是一次性的，触发一次就失效了）</p><p><strong>3、</strong> 调用process方法来触发Watcher</p><p>这里process主要就是通过ServerCnxn对应的TCP连接发送Watcher事件通知。</p><h3 id="_11、客户端注册-watcher-实现" tabindex="-1">11、客户端注册 Watcher 实现 <a class="header-anchor" href="#_11、客户端注册-watcher-实现" aria-label="Permalink to &quot;11、客户端注册 Watcher 实现&quot;">​</a></h3><h3 id="_12、客户端回调-watcher" tabindex="-1">12、客户端回调 Watcher <a class="header-anchor" href="#_12、客户端回调-watcher" aria-label="Permalink to &quot;12、客户端回调 Watcher&quot;">​</a></h3><h3 id="_13、为什么叫zookeeper" tabindex="-1">13、为什么叫ZooKeeper? <a class="header-anchor" href="#_13、为什么叫zookeeper" aria-label="Permalink to &quot;13、为什么叫ZooKeeper?&quot;">​</a></h3><h3 id="_14、在sessiontimeout之内的会话-因服务器压力大、网络故障或客户端主动断开情况下-之前的会话还有效吗" tabindex="-1">14、在sessionTimeout之内的会话，因服务器压力大、网络故障或客户端主动断开情况下，之前的会话还有效吗？ <a class="header-anchor" href="#_14、在sessiontimeout之内的会话-因服务器压力大、网络故障或客户端主动断开情况下-之前的会话还有效吗" aria-label="Permalink to &quot;14、在sessionTimeout之内的会话，因服务器压力大、网络故障或客户端主动断开情况下，之前的会话还有效吗？&quot;">​</a></h3><h3 id="_15、zookeeper-的典型应用场景" tabindex="-1">15、Zookeeper 的典型应用场景 <a class="header-anchor" href="#_15、zookeeper-的典型应用场景" aria-label="Permalink to &quot;15、Zookeeper 的典型应用场景&quot;">​</a></h3><h3 id="_16、zookeeper默认端口" tabindex="-1">16、Zookeeper默认端口？ <a class="header-anchor" href="#_16、zookeeper默认端口" aria-label="Permalink to &quot;16、Zookeeper默认端口？&quot;">​</a></h3><h3 id="_17、zookeeper-都有哪些功能" tabindex="-1">17、Zookeeper 都有哪些功能？ <a class="header-anchor" href="#_17、zookeeper-都有哪些功能" aria-label="Permalink to &quot;17、Zookeeper 都有哪些功能？&quot;">​</a></h3><h3 id="_18、zookeeper集群管理-文件系统、通知机制" tabindex="-1">18、Zookeeper集群管理（文件系统、通知机制） <a class="header-anchor" href="#_18、zookeeper集群管理-文件系统、通知机制" aria-label="Permalink to &quot;18、Zookeeper集群管理（文件系统、通知机制）&quot;">​</a></h3><h3 id="_19、删除指定节点-注意" tabindex="-1">19、删除指定节点？注意？ <a class="header-anchor" href="#_19、删除指定节点-注意" aria-label="Permalink to &quot;19、删除指定节点？注意？&quot;">​</a></h3><h3 id="_20、cap理论" tabindex="-1">20、CAP理论？ <a class="header-anchor" href="#_20、cap理论" aria-label="Permalink to &quot;20、CAP理论？&quot;">​</a></h3><h3 id="_21、恢复模式" tabindex="-1">21、恢复模式 <a class="header-anchor" href="#_21、恢复模式" aria-label="Permalink to &quot;21、恢复模式&quot;">​</a></h3><h3 id="_22、quorum" tabindex="-1">22、Quorum? <a class="header-anchor" href="#_22、quorum" aria-label="Permalink to &quot;22、Quorum?&quot;">​</a></h3><h3 id="_23、zookeeper是什么" tabindex="-1">23、ZooKeeper是什么？ <a class="header-anchor" href="#_23、zookeeper是什么" aria-label="Permalink to &quot;23、ZooKeeper是什么？&quot;">​</a></h3><h3 id="_24、zookeeper的java客户端都有哪些" tabindex="-1">24、Zookeeper的java客户端都有哪些？ <a class="header-anchor" href="#_24、zookeeper的java客户端都有哪些" aria-label="Permalink to &quot;24、Zookeeper的java客户端都有哪些？&quot;">​</a></h3><h3 id="_25、znode的类型" tabindex="-1">25、ZNode的类型？ <a class="header-anchor" href="#_25、znode的类型" aria-label="Permalink to &quot;25、ZNode的类型？&quot;">​</a></h3><h3 id="_26、集群最少要几台机器-集群规则是怎样的" tabindex="-1">26、集群最少要几台机器，集群规则是怎样的? <a class="header-anchor" href="#_26、集群最少要几台机器-集群规则是怎样的" aria-label="Permalink to &quot;26、集群最少要几台机器，集群规则是怎样的?&quot;">​</a></h3><h3 id="_27、zookeeper文件系统" tabindex="-1">27、Zookeeper文件系统 <a class="header-anchor" href="#_27、zookeeper文件系统" aria-label="Permalink to &quot;27、Zookeeper文件系统&quot;">​</a></h3><h3 id="_28、zookeeper-提供了什么" tabindex="-1">28、ZooKeeper 提供了什么？ <a class="header-anchor" href="#_28、zookeeper-提供了什么" aria-label="Permalink to &quot;28、ZooKeeper 提供了什么？&quot;">​</a></h3><h3 id="_29、a是根节点-如何表达a子节点下的b节点" tabindex="-1">29、A是根节点，如何表达A子节点下的B节点？ <a class="header-anchor" href="#_29、a是根节点-如何表达a子节点下的b节点" aria-label="Permalink to &quot;29、A是根节点，如何表达A子节点下的B节点？&quot;">​</a></h3><h3 id="_30、zookeeper队列管理-文件系统、通知机制" tabindex="-1">30、Zookeeper队列管理（文件系统、通知机制） <a class="header-anchor" href="#_30、zookeeper队列管理-文件系统、通知机制" aria-label="Permalink to &quot;30、Zookeeper队列管理（文件系统、通知机制）&quot;">​</a></h3>',75),p=[s];function h(n,E,c,l,i,k){return o(),a("div",null,p)}const b=e(t,[["render",h]]);export{u as __pageData,b as default};
