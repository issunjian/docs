import{_ as s,o as n,c as l,V as a}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/servlet.02e65c60.png",d=JSON.parse('{"title":"Servlet","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/Servlet/servlet.md","filePath":"java/javaee/Servlet/servlet.md"}'),o={name:"java/javaee/Servlet/servlet.md"},e=a('<h1 id="servlet" tabindex="-1">Servlet <a class="header-anchor" href="#servlet" aria-label="Permalink to &quot;Servlet&quot;">​</a></h1><hr><h2 id="servlet-介绍" tabindex="-1">Servlet 介绍 <a class="header-anchor" href="#servlet-介绍" aria-label="Permalink to &quot;Servlet 介绍&quot;">​</a></h2><h3 id="servlet-功能" tabindex="-1">Servlet 功能 <a class="header-anchor" href="#servlet-功能" aria-label="Permalink to &quot;Servlet 功能&quot;">​</a></h3><p>Servlet 程序运行在服务器端，处理浏览器带来的 HTTP 请求，并返回响应给浏览器，实现用户交互。</p><p><img src="'+p+`" alt=""></p><p>相比于 CGI（公共网关接口），Servlet 有以下几点优势：</p><ol><li>性能明显更好。</li><li>在 Web 服务器的地址空间内执行，不必单独创建进程来处理每个客户端请求。</li><li>使用 Java 编写，平台无关性。</li><li>进行了一系列限制，可以保护服务器计算机上的资源。</li></ol><p><em>目前主流框架的底层响应都以 Servlet 的方式实现。</em></p><h3 id="servlet-生命周期" tabindex="-1">Servlet 生命周期 <a class="header-anchor" href="#servlet-生命周期" aria-label="Permalink to &quot;Servlet 生命周期&quot;">​</a></h3><ul><li><strong>加载和初始化</strong></li></ul><p>服务器第一次访问 Servlet 时会创建 Servlet 的实例（一个 Servlet 类只有一个实例）。</p><p>之后服务器调用 <code>init</code> 方法初始化 Servlet 对象，创建或加载初始化数据。</p><ul><li><strong>处理服务</strong></li></ul><p>每接收到一个 Http 请求时，服务器会产生一个新的线程并调用 <code>service</code> 方法处理请求。</p><ul><li><strong>销毁和垃圾回收</strong></li></ul><p>当 Servlet 被销毁时，服务器调用 <code>destroy</code> 方法释放 Servlet 对象所占的资源。</p><p>最后由 JVM 对 Servlet 实例进行垃圾回收。</p><hr><h2 id="servlet-开发" tabindex="-1">Servlet 开发 <a class="header-anchor" href="#servlet-开发" aria-label="Permalink to &quot;Servlet 开发&quot;">​</a></h2><h3 id="servlet-接口" tabindex="-1">Servlet 接口 <a class="header-anchor" href="#servlet-接口" aria-label="Permalink to &quot;Servlet 接口&quot;">​</a></h3><p>实现 Serlvet 接口，即可得到 Servlet 的 Java 类。Servlet 接口内定义了以下 5 个方法。</p><ul><li><strong>ServletRequest 类</strong>：用户请求</li><li><strong>ServletResponse 类</strong>：返回信息</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ServletDemo1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Servlet</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 初始化</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">init</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ServletConfig</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">arg0</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Init</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 处理服务</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">service</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">arg0</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">ServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">arg1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Service</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 销毁</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">destroy</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Destroy</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 获取 Servlet 配置</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletConfig</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getServletConfig</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 获取 Servlet 信息</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getServletInfo</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServletDemo1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Servlet</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 初始化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">(ServletConfig </span><span style="color:#E36209;">arg0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Init&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 处理服务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">service</span><span style="color:#24292E;">(ServletRequest </span><span style="color:#E36209;">arg0</span><span style="color:#24292E;">, ServletResponse </span><span style="color:#E36209;">arg1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Service&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 销毁</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">destroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Destroy&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 Servlet 配置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ServletConfig </span><span style="color:#6F42C1;">getServletConfig</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取 Servlet 信息</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getServletInfo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="httpservlet-类" tabindex="-1">HttpServlet 类 <a class="header-anchor" href="#httpservlet-类" aria-label="Permalink to &quot;HttpServlet 类&quot;">​</a></h3><p>在 Java EE 中， HttpServlet 类已经实现了 Servlet 接口。实际开发中我们可以直接使用。</p><p>HttpServlet 类中 service 方法会根据 HTTP 请求类型，选择调用 <code>doGet</code>、<code>doPost</code>、<code>doPut</code>，<code>doDelete</code> 等方法。</p><ul><li><strong>HttpServletRequest 类</strong>：用户请求</li><li><strong>HttpServletResponse 类</strong>：服务器响应</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ServletDemo2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HttpServlet</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 接收 GET 请求</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doGet</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">req</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">resp</span><span style="color:#F6F6F4;">)  </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Get</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 接收 POST 请求</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">doPost</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">req</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">resp</span><span style="color:#F6F6F4;">)  </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ServletException</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Post</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">doGet</span><span style="color:#F6F6F4;">(req,resp);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ServletDemo2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HttpServlet</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收 GET 请求</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doGet</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">req</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">resp</span><span style="color:#24292E;">)  </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Get&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 接收 POST 请求</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doPost</span><span style="color:#24292E;">(HttpServletRequest </span><span style="color:#E36209;">req</span><span style="color:#24292E;">, HttpServletResponse </span><span style="color:#E36209;">resp</span><span style="color:#24292E;">)  </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ServletException, IOException {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Post&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">doGet</span><span style="color:#24292E;">(req,resp);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>HttpServletRequest/HttpServletResponse 对象封装了 HTTP 请求头/响应头中的所有信息，可以通过对象提供的方法获取。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span></code></pre></div><p>通过 request 对象提供的 getRequestDispatche(String path)方法返回一个 RequestDispatcher 对象，调用这个对象的 forward 方法可以实现请求转发。</p><p>request 对象同时也是一个域对象(Map 容器)，开发人员通过 request 对象在实现转发时，可以通过 setAttribute 方法将数据带给其它 web 资源处理。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 拦截器</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">preHandle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">HttpServletRequest</span><span style="color:#F6F6F4;"> request, </span><span style="color:#97E1F1;font-style:italic;">HttpServletResponse</span><span style="color:#F6F6F4;"> response, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> handler) throws Exception {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">HttpSession</span><span style="color:#F6F6F4;"> session </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> request.</span><span style="color:#62E884;">getSession</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (session.</span><span style="color:#62E884;">getAttribute</span><span style="color:#F6F6F4;">(SESSION_KEY) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 通过 ruquest 对象传递一个值</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">setAttribute</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">message</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">登录失败，请先输入用户名和密码。</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 跳转登录页面（重定向）</span></span>
<span class="line"><span style="color:#F6F6F4;">        request.</span><span style="color:#62E884;">getRequestDispatcher</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">login</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">).</span><span style="color:#62E884;">forward</span><span style="color:#F6F6F4;">(request,response);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 拦截器</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">preHandle</span><span style="color:#24292E;">(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">        HttpSession session </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> request.</span><span style="color:#6F42C1;">getSession</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (session.</span><span style="color:#6F42C1;">getAttribute</span><span style="color:#24292E;">(SESSION_KEY) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 通过 ruquest 对象传递一个值</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;message&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;登录失败，请先输入用户名和密码。&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 跳转登录页面（重定向）</span></span>
<span class="line"><span style="color:#24292E;">        request.</span><span style="color:#6F42C1;">getRequestDispatcher</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;login&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">(request,response);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><hr><p>Servlet 可以设置初始化参数，供Servlet内部使用。，在它初始化时调用init()方法，销毁时调用destroy()方法。Servlet需要在web.xml中配置（MyEclipse中创建Servlet会自动配置），一个Servlet可以设置多个URL访问。Servlet不是线程安全，因此要谨慎使用类变量。</p><p>创建 Serlvet 类后，我们在 web.xml 配置。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">servlet</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--创建的servlet 类名--&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">servlet-name</span><span style="color:#F6F6F4;">&gt;default&lt;/</span><span style="color:#F286C4;">servlet-name</span><span style="color:#F6F6F4;">&gt; </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--创建的servlet 包名--&gt;</span><span style="color:#F6F6F4;">     </span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">servlet-class</span><span style="color:#F6F6F4;">&gt;org.apache.catalina.servlets.DefaultServlet&lt;/</span><span style="color:#F286C4;">servlet-class</span><span style="color:#F6F6F4;">&gt;  </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">&lt;!--初始化参数--&gt;</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">init-param</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">param-name</span><span style="color:#F6F6F4;">&gt;debug&lt;/</span><span style="color:#F286C4;">param-name</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">param-value</span><span style="color:#F6F6F4;">&gt;0&lt;/</span><span style="color:#F286C4;">param-value</span><span style="color:#F6F6F4;">&gt;          </span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;/</span><span style="color:#F286C4;">init-param</span><span style="color:#F6F6F4;">&gt;                </span></span>
<span class="line"><span style="color:#F6F6F4;">            &lt;</span><span style="color:#F286C4;">load-on-startup</span><span style="color:#F6F6F4;">&gt;1&lt;/</span><span style="color:#F286C4;">load-on-startup</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">servlet</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">&lt;!--建立映射：通过url访问servlet类--&gt;</span><span style="color:#F6F6F4;"> </span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">servlet-mapping</span><span style="color:#F6F6F4;">&gt;                                  </span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">servlet-name</span><span style="color:#F6F6F4;">&gt;default&lt;/</span><span style="color:#F286C4;">servlet-name</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">        &lt;</span><span style="color:#F286C4;">url-pattern</span><span style="color:#F6F6F4;">&gt;/&lt;/</span><span style="color:#F286C4;">url-pattern</span><span style="color:#F6F6F4;">&gt;         </span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;/</span><span style="color:#F286C4;">servlet-mapping</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">servlet</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--创建的servlet 类名--&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;default&lt;/</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--创建的servlet 包名--&gt;</span><span style="color:#24292E;">     </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">servlet-class</span><span style="color:#24292E;">&gt;org.apache.catalina.servlets.DefaultServlet&lt;/</span><span style="color:#22863A;">servlet-class</span><span style="color:#24292E;">&gt;  </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">&lt;!--初始化参数--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">init-param</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">param-name</span><span style="color:#24292E;">&gt;debug&lt;/</span><span style="color:#22863A;">param-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">param-value</span><span style="color:#24292E;">&gt;0&lt;/</span><span style="color:#22863A;">param-value</span><span style="color:#24292E;">&gt;          </span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">init-param</span><span style="color:#24292E;">&gt;                </span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">load-on-startup</span><span style="color:#24292E;">&gt;1&lt;/</span><span style="color:#22863A;">load-on-startup</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">servlet</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--建立映射：通过url访问servlet类--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">servlet-mapping</span><span style="color:#24292E;">&gt;                                  </span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;default&lt;/</span><span style="color:#22863A;">servlet-name</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;/&lt;/</span><span style="color:#22863A;">url-pattern</span><span style="color:#24292E;">&gt;         </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">servlet-mapping</span><span style="color:#24292E;">&gt;</span></span></code></pre></div>`,38),t=[e];function r(c,F,y,i,E,v){return n(),l("div",null,t)}const g=s(o,[["render",r]]);export{d as __pageData,g as default};
