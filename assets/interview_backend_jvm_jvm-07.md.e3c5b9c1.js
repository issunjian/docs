import{_ as a,o,c as e,V as r}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/jvm/jvm-07.md","filePath":"interview/backend/jvm/jvm-07.md"}'),t={name:"interview/backend/jvm/jvm-07.md"},s=r('<h3 id="_1、谈谈动态年龄判断" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E8%B0%88%E8%B0%88%E5%8A%A8%E6%80%81%E5%B9%B4%E9%BE%84%E5%88%A4%E6%96%AD" target="_blank" rel="noreferrer">1、谈谈动态年龄判断</a> <a class="header-anchor" href="#_1、谈谈动态年龄判断" aria-label="Permalink to &quot;[1、谈谈动态年龄判断](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#1谈谈动态年龄判断)&quot;">​</a></h3><p><strong>1、</strong> 这里涉及到 -XX:TargetSurvivorRatio 参数，Survivor 区的目标使用率默认 50，即 Survivor 区对象目标使用率为 50%。</p><p><strong>2、</strong> Survivor 区相同年龄所有对象大小的总和 (Survivor 区内存大小 * 这个目标使用率)时，大于或等于该年龄的对象直接进入老年代。</p><p><strong>3、</strong> 当然，这里还需要考虑参数 -XX:MaxTenuringThreshold 晋升年龄最大阈值</p><h3 id="_2、类初始化的情况有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E6%83%85%E5%86%B5%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">2、类初始化的情况有哪些？</a> <a class="header-anchor" href="#_2、类初始化的情况有哪些" aria-label="Permalink to &quot;[2、类初始化的情况有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#2类初始化的情况有哪些)&quot;">​</a></h3><ol><li></li></ol><p>遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code> 或 <code>invokestatic</code> 字节码指令时，还未初始化。典型场景包括 new 实例化对象、读取或设置静态字段、调用静态方法。</p><ol start="2"><li></li></ol><p>对类反射调用时，还未初始化。</p><ol start="3"><li></li></ol><p>初始化类时，父类还未初始化。</p><ol start="4"><li></li></ol><p>虚拟机启动时，会先初始化包含 main 方法的主类。</p><ol start="5"><li></li></ol><p>使用 JDK7 的动态语言支持时，如果 MethodHandle 实例的解析结果为指定类型的方法句柄且句柄对应的类还未初始化。</p><ol start="6"><li></li></ol><p>口定义了默认方法，如果接口的实现类初始化，接口要在其之前初始化。</p><ol start="7"><li></li></ol><p>其余所有引用类型的方式都不会触发初始化，称为被动引用。被动引用实例：① 子类使用父类的静态字段时，只有父类被初始化。② 通过数组定义使用类。③ 常量在编译期会存入调用类的常量池，不会初始化定义常量的类。</p><ol start="8"><li></li></ol><p>接口和类加载过程的区别：初始化类时如果父类没有初始化需要初始化父类，但接口初始化时不要求父接口初始化，只有在真正使用父接口时（如引用接口中定义的常量）才会初始化。</p><h3 id="_3、gc-是什么-为什么要有-gc" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3gc-%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89-gc" target="_blank" rel="noreferrer">3、GC 是什么？为什么要有 GC？</a> <a class="header-anchor" href="#_3、gc-是什么-为什么要有-gc" aria-label="Permalink to &quot;[3、GC 是什么？为什么要有 GC？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#3gc-是什么为什么要有-gc)&quot;">​</a></h3><p>GC 是垃 圾收 集的 意思 ，内存 处理 是编 程人 员容 易出 现问 题的 地方 ，忘记 或者 错误的内 存回 收会 导致 程序 或系 统的 不稳 定甚 至崩 溃， Java 提供 的 GC 功能 可以 自动监测 对象 是否 超过 作用 域从 而达 到自 动回 收内 存的 目的 ，Java 语言 没有 提供 释放已分配内存的 显示 操作 方法 。Java 程序 员不 用担 心内 存管 理， 因为 垃圾 收集 器会自动 进行 管理 。要 请求 垃圾 收集 ，可 以调 用下 面的 方法 之一 ：System.gc() 或Runtime.getRuntime().gc() ，但 JVM 可以 屏蔽 掉线 示的 垃圾 回收 调用 。</p><p>垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低优先级的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清除和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。在 Java 诞生初期，垃圾回收是 Java最大的亮点之一，因为服务器端的编程需要有效的防止内存泄露问题，然而时过境迁，如今 Java 的垃圾回收机制已经成为被诟病的东。移动智能终端用户通常觉得 iOS 的系统比 Android 系统有更好的用户体验，其中一个深层次的原因就在于 Android 系统中垃圾回收的不可预知性。</p><h3 id="_4、minorgc-majorgc、fullgc都什么时候发生" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4minorgcmajorgcfullgc%E9%83%BD%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%91%E7%94%9F" target="_blank" rel="noreferrer">4、MinorGC，MajorGC、FullGC都什么时候发生？</a> <a class="header-anchor" href="#_4、minorgc-majorgc、fullgc都什么时候发生" aria-label="Permalink to &quot;[4、MinorGC，MajorGC、FullGC都什么时候发生？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#4minorgcmajorgcfullgc都什么时候发生)&quot;">​</a></h3><p>MinorGC在年轻代空间不足的时候发生，MajorGC指的是老年代的GC，出现MajorGC一般经常伴有MinorGC。</p><p>FullGC有三种情况。</p><p><strong>1、</strong> 当老年代无法再分配内存的时候</p><p><strong>2、</strong> 元空间不足的时候</p><p><strong>3、</strong> 显示调用System.gc的时候。另外，像CMS一类的垃圾回收器，在MinorGC出现promotion failure的时候也会发生FullGC</p><h3 id="_5、java的双亲委托机制是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5java%E7%9A%84%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">5、Java的双亲委托机制是什么？</a> <a class="header-anchor" href="#_5、java的双亲委托机制是什么" aria-label="Permalink to &quot;[5、Java的双亲委托机制是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#5java的双亲委托机制是什么)&quot;">​</a></h3><p>它的意思是，除了顶层的启动类加载器以外，其余的类加载器，在加载之前，都会委派给它的父加载器进行加载。这样一层层向上传递，直到祖先们都无法胜任，它才会真正的加载。</p><p>Java默认是这种行为。当然Java中也有很多打破双亲行为的骚操作，比如SPI（JDBC驱动加载），OSGI等。</p><h3 id="_6、在-java-中-对象什么时候可以被垃圾回收" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E5%9C%A8-java-%E4%B8%AD%E5%AF%B9%E8%B1%A1%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6" target="_blank" rel="noreferrer">6、在 Java 中，对象什么时候可以被垃圾回收？</a> <a class="header-anchor" href="#_6、在-java-中-对象什么时候可以被垃圾回收" aria-label="Permalink to &quot;[6、在 Java 中，对象什么时候可以被垃圾回收？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#6在-java-中对象什么时候可以被垃圾回收)&quot;">​</a></h3><p>当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了。</p><h3 id="_7、有哪些打破了双亲委托机制的案例" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E6%9C%89%E5%93%AA%E4%BA%9B%E6%89%93%E7%A0%B4%E4%BA%86%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6%E7%9A%84%E6%A1%88%E4%BE%8B" target="_blank" rel="noreferrer">7、有哪些打破了双亲委托机制的案例？</a> <a class="header-anchor" href="#_7、有哪些打破了双亲委托机制的案例" aria-label="Permalink to &quot;[7、有哪些打破了双亲委托机制的案例？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#7有哪些打破了双亲委托机制的案例)&quot;">​</a></h3><p><strong>1、</strong> Tomcat可以加载自己目录下的class文件，并不会传递给父类的加载器。</p><p><strong>2、</strong> Java的SPI，发起者是 <code>BootstrapClassLoader</code>， <code>BootstrapClassLoader</code>已经是最上层的了。它直接获取了 <code>AppClassLoader</code>进行驱动加载，和双亲委派是相反的。。</p><h3 id="_8、jvm-年轻代到年老代的晋升过程的判断条件是什么呢" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8jvm-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E5%88%B0%E5%B9%B4%E8%80%81%E4%BB%A3%E7%9A%84%E6%99%8B%E5%8D%87%E8%BF%87%E7%A8%8B%E7%9A%84%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2" target="_blank" rel="noreferrer">8、JVM 年轻代到年老代的晋升过程的判断条件是什么呢？</a> <a class="header-anchor" href="#_8、jvm-年轻代到年老代的晋升过程的判断条件是什么呢" aria-label="Permalink to &quot;[8、JVM 年轻代到年老代的晋升过程的判断条件是什么呢？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#8jvm-年轻代到年老代的晋升过程的判断条件是什么呢)&quot;">​</a></h3><p><strong>1、</strong> 部分对象会在From和To区域中复制来复制去,如此交换15次(由JVM参数MaxTenuringThreshold决定,这个参数默认是15),最终如果还是存活,就存入到老年代。</p><p><strong>2、</strong> 如果对象的大小大于Eden的二分之一会直接分配在old，如果old也分配不下，会做一次majorGC，如果小于eden的一半但是没有足够的空间，就进行minorgc也就是新生代GC。</p><p><strong>3、</strong> minor gc后，survivor仍然放不下，则放到老年代</p><p><strong>4、</strong> 动态年龄判断 ，大于等于某个年龄的对象超过了survivor空间一半 ，大于等于某个年龄的对象直接进入老年代</p><h3 id="_9、jvm-数据运行区-哪些会造成-oom-的情况" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9jvm-%E6%95%B0%E6%8D%AE%E8%BF%90%E8%A1%8C%E5%8C%BA%E5%93%AA%E4%BA%9B%E4%BC%9A%E9%80%A0%E6%88%90-oom-%E7%9A%84%E6%83%85%E5%86%B5" target="_blank" rel="noreferrer">9、JVM 数据运行区，哪些会造成 OOM 的情况？</a> <a class="header-anchor" href="#_9、jvm-数据运行区-哪些会造成-oom-的情况" aria-label="Permalink to &quot;[9、JVM 数据运行区，哪些会造成 OOM 的情况？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#9jvm-数据运行区哪些会造成-oom-的情况)&quot;">​</a></h3><p>除了数据运行区，其他区域均有可能造成 OOM 的情况。</p><p>**堆溢出：**java.lang.OutOfMemoryError: Java heap space</p><p>**栈溢出：**java.lang.StackOverflowError</p><p>**永久代溢出：**java.lang.OutOfMemoryError: PermGen space</p><h3 id="_10、jvm-类加载机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%982021%E5%B9%B4%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10jvm-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">10、JVM 类加载机制</a> <a class="header-anchor" href="#_10、jvm-类加载机制" aria-label="Permalink to &quot;[10、JVM 类加载机制](https://gitee.com/souyunku/DevBooks/blob/master/docs/Jvm/Jvm最新面试题2021年，常见面试题及答案汇总.md#10jvm-类加载机制)&quot;">​</a></h3><p>JVM 类加载机制分为五个部分：加载，验证，准备，解析，初始化。</p><p><strong>加载</strong></p><p>加载是类加载过程中的一个阶段， 这个阶段会在内存中生成一个代表这个类的 java.lang.Class 对象， 作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个 Class 文件获取，这里既可以从 ZIP 包中读取（比如从 jar 包和 war 包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将 JSP 文件转换成对应的 Class 类）。</p><p><strong>验证</strong></p><p>这一阶段的主要目的是为了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><p><strong>准备</strong></p><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：</p><p>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080， 将 v 赋值为 8080 的 put static 指令是程序被编译后， 存放于类构造器方法之中。</p><p><strong>但是注意如果声明为：</strong></p><p>public static final int v = 8080;</p><p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p><p><strong>解析</strong></p><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的</p><p>public static int v = 8080;</p><p>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080， 将 v 赋值为 8080 的 put static 指令是程序被编译后， 存放于类构造器方法之中。但是注意如果声明为：</p><p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p><p><strong>解析</strong></p><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的</p><p>public static final int v = 8080;</p><p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p><p><strong>解析</strong></p><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的：</p><p><strong>1、</strong> CONSTANT_Class_info</p><p><strong>2、</strong> CONSTANT_Field_info</p><p><strong>3、</strong> CONSTANT_Method_info</p><p>等类型的常量。</p><p><strong>符号引用</strong></p><p>符号引用与虚拟机实现的布局无关， 引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在 Java 虚拟机规范的 Class 文件格式中。</p><p><strong>直接引用</strong></p><p>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p><p><strong>初始化</strong></p><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由 JVM 主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p><p><strong>类构造器</strong></p><p>初始化阶段是执行类构造器方法的过程。方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证子方法执行之前，父类的方法已经执行完毕， 如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成()方法。</p><p><strong>注意以下几种情况不会执行类初始化：</strong></p><p><strong>1、</strong> 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</p><p><strong>2、</strong> 定义对象数组，不会触发该类的初始化。</p><p><strong>3、</strong> 常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触发定义常量所在的类。</p><p><strong>4、</strong> 通过类名获取 Class 对象，不会触发类的初始化。</p><p><strong>5、</strong> 通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</p><p><strong>6、</strong> 通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作。</p><h3 id="_11、字符串常量存放在哪个区域" tabindex="-1">11、字符串常量存放在哪个区域？ <a class="header-anchor" href="#_11、字符串常量存放在哪个区域" aria-label="Permalink to &quot;11、字符串常量存放在哪个区域？&quot;">​</a></h3><h3 id="_12、对象的访问方式有哪些" tabindex="-1">12、对象的访问方式有哪些？ <a class="header-anchor" href="#_12、对象的访问方式有哪些" aria-label="Permalink to &quot;12、对象的访问方式有哪些？&quot;">​</a></h3><h3 id="_13、说一下-jvm-调优的工具" tabindex="-1">13、说一下 JVM 调优的工具？ <a class="header-anchor" href="#_13、说一下-jvm-调优的工具" aria-label="Permalink to &quot;13、说一下 JVM 调优的工具？&quot;">​</a></h3><h3 id="_14、对象分配内存是否线程安全" tabindex="-1">14、对象分配内存是否线程安全？ <a class="header-anchor" href="#_14、对象分配内存是否线程安全" aria-label="Permalink to &quot;14、对象分配内存是否线程安全？&quot;">​</a></h3><h3 id="_15、什么时候会造成堆外内存溢出" tabindex="-1">15、什么时候会造成堆外内存溢出？ <a class="header-anchor" href="#_15、什么时候会造成堆外内存溢出" aria-label="Permalink to &quot;15、什么时候会造成堆外内存溢出？&quot;">​</a></h3><h3 id="_16、你都用过g1垃圾回收器的哪几个重要参数" tabindex="-1">16、你都用过G1垃圾回收器的哪几个重要参数？ <a class="header-anchor" href="#_16、你都用过g1垃圾回收器的哪几个重要参数" aria-label="Permalink to &quot;16、你都用过G1垃圾回收器的哪几个重要参数？&quot;">​</a></h3><h3 id="_17、双亲委派" tabindex="-1">17、双亲委派 <a class="header-anchor" href="#_17、双亲委派" aria-label="Permalink to &quot;17、双亲委派&quot;">​</a></h3><h3 id="_18、parallel-old-收集器-多线程标记整理算法" tabindex="-1">18、Parallel Old 收集器（多线程标记整理算法） <a class="header-anchor" href="#_18、parallel-old-收集器-多线程标记整理算法" aria-label="Permalink to &quot;18、Parallel Old 收集器（多线程标记整理算法）&quot;">​</a></h3><h3 id="_19、java-程序是怎样运行的" tabindex="-1">19、Java 程序是怎样运行的？ <a class="header-anchor" href="#_19、java-程序是怎样运行的" aria-label="Permalink to &quot;19、Java 程序是怎样运行的？&quot;">​</a></h3><h3 id="_20、请解释stackoverflowerror和outofmemeryerror的区别" tabindex="-1">20、请解释StackOverflowError和OutOfMemeryError的区别？ <a class="header-anchor" href="#_20、请解释stackoverflowerror和outofmemeryerror的区别" aria-label="Permalink to &quot;20、请解释StackOverflowError和OutOfMemeryError的区别？&quot;">​</a></h3><h3 id="_21、分区收集算法" tabindex="-1">21、分区收集算法 <a class="header-anchor" href="#_21、分区收集算法" aria-label="Permalink to &quot;21、分区收集算法&quot;">​</a></h3><h3 id="_22、串行-serial-收集器和吞吐量-throughput-收集器的区别是什么" tabindex="-1">22、串行（serial）收集器和吞吐量（throughput）收集器的区别是什么？ <a class="header-anchor" href="#_22、串行-serial-收集器和吞吐量-throughput-收集器的区别是什么" aria-label="Permalink to &quot;22、串行（serial）收集器和吞吐量（throughput）收集器的区别是什么？&quot;">​</a></h3><h3 id="_23、栈帧都有哪些数据" tabindex="-1">23、栈帧都有哪些数据？ <a class="header-anchor" href="#_23、栈帧都有哪些数据" aria-label="Permalink to &quot;23、栈帧都有哪些数据？&quot;">​</a></h3><h3 id="_24、对象在哪块内存分配" tabindex="-1">24、对象在哪块内存分配？ <a class="header-anchor" href="#_24、对象在哪块内存分配" aria-label="Permalink to &quot;24、对象在哪块内存分配？&quot;">​</a></h3><h3 id="_25、运行时常量池溢出的原因" tabindex="-1">25、运行时常量池溢出的原因？ <a class="header-anchor" href="#_25、运行时常量池溢出的原因" aria-label="Permalink to &quot;25、运行时常量池溢出的原因？&quot;">​</a></h3><h3 id="_26、safepoint-是什么" tabindex="-1">26、safepoint 是什么？ <a class="header-anchor" href="#_26、safepoint-是什么" aria-label="Permalink to &quot;26、safepoint 是什么？&quot;">​</a></h3><h3 id="_27、jvm调优命令有哪些" tabindex="-1">27、JVM调优命令有哪些？ <a class="header-anchor" href="#_27、jvm调优命令有哪些" aria-label="Permalink to &quot;27、JVM调优命令有哪些？&quot;">​</a></h3><h3 id="_28、你说你做过jvm参数调优和参数配置-请问如何查看jvm系统默认值" tabindex="-1">28、你说你做过JVM参数调优和参数配置，请问如何查看JVM系统默认值 <a class="header-anchor" href="#_28、你说你做过jvm参数调优和参数配置-请问如何查看jvm系统默认值" aria-label="Permalink to &quot;28、你说你做过JVM参数调优和参数配置，请问如何查看JVM系统默认值&quot;">​</a></h3><h3 id="_29、java-中会存在内存泄漏-简述一下" tabindex="-1">29、Java 中会存在内存泄漏?简述一下 <a class="header-anchor" href="#_29、java-中会存在内存泄漏-简述一下" aria-label="Permalink to &quot;29、Java 中会存在内存泄漏?简述一下&quot;">​</a></h3><h3 id="_30、对象是怎么从年轻代进入老年代的" tabindex="-1">30、对象是怎么从年轻代进入老年代的？ <a class="header-anchor" href="#_30、对象是怎么从年轻代进入老年代的" aria-label="Permalink to &quot;30、对象是怎么从年轻代进入老年代的？&quot;">​</a></h3><h3 id="_31、什么情况下会发生栈内存溢出" tabindex="-1">31、什么情况下会发生栈内存溢出？ <a class="header-anchor" href="#_31、什么情况下会发生栈内存溢出" aria-label="Permalink to &quot;31、什么情况下会发生栈内存溢出？&quot;">​</a></h3>',111),E=[s];function l(n,i,h,B,m,p){return o(),e("div",null,E)}const u=a(t,[["render",l]]);export{d as __pageData,u as default};
