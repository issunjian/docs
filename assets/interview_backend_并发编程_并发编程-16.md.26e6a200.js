import{_ as a,o as e,c as s,V as n}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-16.md","filePath":"interview/backend/并发编程/并发编程-16.md"}'),o={name:"interview/backend/并发编程/并发编程-16.md"},r=n(`<h3 id="_1、java内存模型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B" target="_blank" rel="noreferrer">1、Java内存模型</a> <a class="header-anchor" href="#_1、java内存模型" aria-label="Permalink to &quot;[1、Java内存模型](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#1java内存模型)&quot;">​</a></h3><p>共享内存模型指的就是Java内存模型(简称JMM)，JMM决定一个线程对共享变量的写入时,能对另一个线程可见。从抽象的角度来看，JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p><p>从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p><p><strong>1、</strong> 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</p><p><strong>2、</strong> 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</p><p><strong>下面通过示意图来说明线程之间的通信</strong></p><p><strong>总结：什么是Java内存模型：</strong></p><p>java内存模型简称jmm，定义了一个线程对另一个线程可见。共享变量存放在主内存中，每个线程都有自己的本地内存，当多个线程同时访问一个数据的时候，可能本地内存没有及时刷新到主内存，所以就会发生线程安全问题。</p><h3 id="_2、jvm-内存区域" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2jvm-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F" target="_blank" rel="noreferrer">2、JVM 内存区域</a> <a class="header-anchor" href="#_2、jvm-内存区域" aria-label="Permalink to &quot;[2、JVM 内存区域](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#2jvm-内存区域)&quot;">​</a></h3><p>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区域【JAVA 堆、方法区】、直接内存。</p><p>线程私有数据区域生命周期与线程相同, 依赖用户线程的启动/结束 而 创建/销毁(在 Hotspot VM 内, 每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的生/死对应)。</p><p>线程共享区域随虚拟机的启动/关闭而创建/销毁。</p><p>直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提供了基于Channel与 Buffer的IO方式, 它可以使用Native函数库直接分配堆外内存, 然后使用DirectByteBuffer 对象作为这块内存的引用进行操作(详见: Java I/O 扩展), 这样就避免了在 Java堆和 Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</p><h3 id="_3、as-if-serial规则和happens-before规则的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3as-if-serial%E8%A7%84%E5%88%99%E5%92%8Chappens-before%E8%A7%84%E5%88%99%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">3、as-if-serial规则和happens-before规则的区别</a> <a class="header-anchor" href="#_3、as-if-serial规则和happens-before规则的区别" aria-label="Permalink to &quot;[3、as-if-serial规则和happens-before规则的区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#3as-if-serial规则和happens-before规则的区别)&quot;">​</a></h3><p><strong>1、</strong> as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变。</p><p><strong>2、</strong> as-if-serial语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺序来执行的。happens-before关系给编写正确同步的多线程程序的程序员创造了一个幻境：正确同步的多线程程序是按happens-before指定的顺序来执行的。</p><p><strong>3、</strong> as-if-serial语义和happens-before这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。</p><h3 id="_4、什么是栈" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%88" target="_blank" rel="noreferrer">4、什么是栈</a> <a class="header-anchor" href="#_4、什么是栈" aria-label="Permalink to &quot;[4、什么是栈](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#4什么是栈)&quot;">​</a></h3><p>Java 方法执行的内存模型：存储局部变量表，操作数栈，动态链接，方法出口等信息。生命周期与线程相同。</p><h3 id="_5、什么是-class-文件-class-文件主要的信息结构有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5%E4%BB%80%E4%B9%88%E6%98%AF-class-%E6%96%87%E4%BB%B6-class-%E6%96%87%E4%BB%B6%E4%B8%BB%E8%A6%81%E7%9A%84%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">5、什么是 Class 文件？ Class 文件主要的信息结构有哪些？</a> <a class="header-anchor" href="#_5、什么是-class-文件-class-文件主要的信息结构有哪些" aria-label="Permalink to &quot;[5、什么是 Class 文件？ Class 文件主要的信息结构有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#5什么是-class-文件-class-文件主要的信息结构有哪些)&quot;">​</a></h3><p>Class 文件是一组以 8 位字节为基础单位的二进制流。各个数据项严格按顺序排列。</p><p>Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储数据。这样的伪结构仅仅有两种数据类型：无符号数和表。</p><p>无符号数：是基本数据类型。以 u1、u2、u4、u8 分别代表 1 个字节、2 个字节、4 个字节、8 个字节的无符号数，能够用来描写叙述数字、索引引用、数量值或者依照 UTF-8 编码构成的字符串值。</p><p>表：由多个无符号数或者其它表作为数据项构成的复合数据类型。全部表都习惯性地以 _info 结尾。</p><h3 id="_6、java对象创建过程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6java%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">6、Java对象创建过程</a> <a class="header-anchor" href="#_6、java对象创建过程" aria-label="Permalink to &quot;[6、Java对象创建过程](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#6java对象创建过程)&quot;">​</a></h3><p><strong>1、</strong> JVM遇到一条新建对象的指令时首先去检查这个指令的参数是否能在常量池中定义到一个类的符号引用。然后加载这个类（类加载过程在后边讲）</p><p><strong>2、</strong> 为对象分配内存。一种办法“指针碰撞”、一种办法“空闲列表”，最终常用的办法“本地线程缓冲分配(TLAB)”</p><p><strong>3、</strong> 将除对象头外的对象内存空间初始化为0</p><p><strong>4、</strong> 对对象头进行必要设置</p><h3 id="_7、运行时常量池的作用是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">7、运行时常量池的作用是什么?</a> <a class="header-anchor" href="#_7、运行时常量池的作用是什么" aria-label="Permalink to &quot;[7、运行时常量池的作用是什么?](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#7运行时常量池的作用是什么)&quot;">​</a></h3><p>运行时常量池是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池表，用于存放编译器生成的各种字面量与符号引用，这部分内容在类加载后存放到运行时常量池。一般除了保存 Class 文件中描述的符号引用外，还会把符号引用翻译的直接引用也存储在运行时常量池。</p><p>运行时常量池相对于 Class 文件常量池的一个重要特征是动态性，Java 不要求常量只有编译期才能产生，运行期间也可以将新的常量放入池中，这种特性利用较多的是 String 的 <code>intern</code> 方法。</p><p>运行时常量池是方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError。</p><h3 id="_8、代码示例" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%EF%BC%9A" target="_blank" rel="noreferrer">8、代码示例：</a> <a class="header-anchor" href="#_8、代码示例" aria-label="Permalink to &quot;[8、代码示例：](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#8代码示例：)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">package com.lijie;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="color:#f6f6f4;">import java.util.concurrent.Executors;</span></span>
<span class="line"><span style="color:#f6f6f4;">public class TestNewCachedThreadPool {</span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        // 创建无限大小线程池，由jvm自动回收</span></span>
<span class="line"><span style="color:#f6f6f4;">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span></span>
<span class="line"><span style="color:#f6f6f4;">        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            final int temp = i;</span></span>
<span class="line"><span style="color:#f6f6f4;">            newCachedThreadPool.execute(new Runnable() {</span></span>
<span class="line"><span style="color:#f6f6f4;">                public void run() {</span></span>
<span class="line"><span style="color:#f6f6f4;">                    try {</span></span>
<span class="line"><span style="color:#f6f6f4;">                        Thread.sleep(100);</span></span>
<span class="line"><span style="color:#f6f6f4;">                    } catch (Exception e) {}</span></span>
<span class="line"><span style="color:#f6f6f4;">                    System.out.println(Thread.currentThread().getName() + &quot;,i==&quot; + temp);</span></span>
<span class="line"><span style="color:#f6f6f4;">                }</span></span>
<span class="line"><span style="color:#f6f6f4;">            });</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">package com.lijie;</span></span>
<span class="line"><span style="color:#24292e;">import java.util.concurrent.ExecutorService;</span></span>
<span class="line"><span style="color:#24292e;">import java.util.concurrent.Executors;</span></span>
<span class="line"><span style="color:#24292e;">public class TestNewCachedThreadPool {</span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) {</span></span>
<span class="line"><span style="color:#24292e;">        // 创建无限大小线程池，由jvm自动回收</span></span>
<span class="line"><span style="color:#24292e;">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span></span>
<span class="line"><span style="color:#24292e;">        for (int i = 0; i &lt; 10; i++) {</span></span>
<span class="line"><span style="color:#24292e;">            final int temp = i;</span></span>
<span class="line"><span style="color:#24292e;">            newCachedThreadPool.execute(new Runnable() {</span></span>
<span class="line"><span style="color:#24292e;">                public void run() {</span></span>
<span class="line"><span style="color:#24292e;">                    try {</span></span>
<span class="line"><span style="color:#24292e;">                        Thread.sleep(100);</span></span>
<span class="line"><span style="color:#24292e;">                    } catch (Exception e) {}</span></span>
<span class="line"><span style="color:#24292e;">                    System.out.println(Thread.currentThread().getName() + &quot;,i==&quot; + temp);</span></span>
<span class="line"><span style="color:#24292e;">                }</span></span>
<span class="line"><span style="color:#24292e;">            });</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h3 id="_9、为什么你应该在循环中检查等待条件" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E9%99%84%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%B8%AD%E6%A3%80%E6%9F%A5%E7%AD%89%E5%BE%85%E6%9D%A1%E4%BB%B6" target="_blank" rel="noreferrer">9、为什么你应该在循环中检查等待条件?</a> <a class="header-anchor" href="#_9、为什么你应该在循环中检查等待条件" aria-label="Permalink to &quot;[9、为什么你应该在循环中检查等待条件?](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题及答案附答案汇总.md#9为什么你应该在循环中检查等待条件)&quot;">​</a></h3><p>处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。</p><h3 id="_10、堆" tabindex="-1">10、堆 <a class="header-anchor" href="#_10、堆" aria-label="Permalink to &quot;10、堆&quot;">​</a></h3><p>JVM内存管理最大的一块,对被线程共享,目的是存放对象的实例,几乎所欲的对象实例都会放在这里,当堆没有可用空间时,会抛出OOM异常.根据对象的存活周期不同,JVM把对象进行分代管理,由垃圾回收器进行垃圾的回收管理</p><h3 id="_11、如何判断一个常量是废弃常量" tabindex="-1">11、如何判断一个常量是废弃常量 ？ <a class="header-anchor" href="#_11、如何判断一个常量是废弃常量" aria-label="Permalink to &quot;11、如何判断一个常量是废弃常量 ？&quot;">​</a></h3><h3 id="_12、并发队列和并发集合的区别" tabindex="-1">12、并发队列和并发集合的区别： <a class="header-anchor" href="#_12、并发队列和并发集合的区别" aria-label="Permalink to &quot;12、并发队列和并发集合的区别：&quot;">​</a></h3><h3 id="_13、常用的并发工具类有哪些" tabindex="-1">13、常用的并发工具类有哪些？ <a class="header-anchor" href="#_13、常用的并发工具类有哪些" aria-label="Permalink to &quot;13、常用的并发工具类有哪些？&quot;">​</a></h3><h3 id="_14、对象分配内存的方式有哪些" tabindex="-1">14、对象分配内存的方式有哪些？ <a class="header-anchor" href="#_14、对象分配内存的方式有哪些" aria-label="Permalink to &quot;14、对象分配内存的方式有哪些？&quot;">​</a></h3><h3 id="_15、jit-是什么" tabindex="-1">15、JIT 是什么？ <a class="header-anchor" href="#_15、jit-是什么" aria-label="Permalink to &quot;15、JIT 是什么？&quot;">​</a></h3><h3 id="_16、java-内存分配与回收策率以及-minor-gc-和-major-gc" tabindex="-1">16、Java 内存分配与回收策率以及 Minor GC 和 Major GC <a class="header-anchor" href="#_16、java-内存分配与回收策率以及-minor-gc-和-major-gc" aria-label="Permalink to &quot;16、Java 内存分配与回收策率以及 Minor GC 和 Major GC&quot;">​</a></h3><h3 id="_17、什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型" tabindex="-1">17、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？ <a class="header-anchor" href="#_17、什么是阻塞队列-阻塞队列的实现原理是什么-如何使用阻塞队列来实现生产者-消费者模型" aria-label="Permalink to &quot;17、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？&quot;">​</a></h3><h3 id="_18、cms-收集器-多线程标记清除算法" tabindex="-1">18、CMS 收集器（多线程标记清除算法） <a class="header-anchor" href="#_18、cms-收集器-多线程标记清除算法" aria-label="Permalink to &quot;18、CMS 收集器（多线程标记清除算法）&quot;">​</a></h3><h3 id="_19、描述一下jvm加载class文件的原理机制" tabindex="-1">19、描述一下JVM加载class文件的原理机制？ <a class="header-anchor" href="#_19、描述一下jvm加载class文件的原理机制" aria-label="Permalink to &quot;19、描述一下JVM加载class文件的原理机制？&quot;">​</a></h3><h3 id="_20、怎么检测一个线程是否拥有锁" tabindex="-1">20、怎么检测一个线程是否拥有锁？ <a class="header-anchor" href="#_20、怎么检测一个线程是否拥有锁" aria-label="Permalink to &quot;20、怎么检测一个线程是否拥有锁？&quot;">​</a></h3><h3 id="_21、java中用到的线程调度算法是什么" tabindex="-1">21、Java中用到的线程调度算法是什么 <a class="header-anchor" href="#_21、java中用到的线程调度算法是什么" aria-label="Permalink to &quot;21、Java中用到的线程调度算法是什么&quot;">​</a></h3><h3 id="_22、堵塞队列" tabindex="-1">22、堵塞队列： <a class="header-anchor" href="#_22、堵塞队列" aria-label="Permalink to &quot;22、堵塞队列：&quot;">​</a></h3><h3 id="_23、jre、jdk、jvm-及-jit-之间有什么不同" tabindex="-1">23、JRE、JDK、JVM 及 JIT 之间有什么不同？ <a class="header-anchor" href="#_23、jre、jdk、jvm-及-jit-之间有什么不同" aria-label="Permalink to &quot;23、JRE、JDK、JVM 及 JIT 之间有什么不同？&quot;">​</a></h3><h3 id="_24、parnew-垃圾收集器-serial-多线程" tabindex="-1">24、ParNew 垃圾收集器（Serial+多线程） <a class="header-anchor" href="#_24、parnew-垃圾收集器-serial-多线程" aria-label="Permalink to &quot;24、ParNew 垃圾收集器（Serial+多线程）&quot;">​</a></h3><h3 id="_25、如何判断两个类是否相等" tabindex="-1">25、如何判断两个类是否相等？ <a class="header-anchor" href="#_25、如何判断两个类是否相等" aria-label="Permalink to &quot;25、如何判断两个类是否相等？&quot;">​</a></h3><h3 id="_26、copyonwritearraylist-的使用场景" tabindex="-1">26、CopyOnWriteArrayList 的使用场景? <a class="header-anchor" href="#_26、copyonwritearraylist-的使用场景" aria-label="Permalink to &quot;26、CopyOnWriteArrayList 的使用场景?&quot;">​</a></h3><h3 id="_27、什么是-cas" tabindex="-1">27、什么是 CAS <a class="header-anchor" href="#_27、什么是-cas" aria-label="Permalink to &quot;27、什么是 CAS&quot;">​</a></h3><h3 id="_28、什么是原子操作-在java-concurrency-api中有哪些原子类-atomic-classes" tabindex="-1">28、什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？ <a class="header-anchor" href="#_28、什么是原子操作-在java-concurrency-api中有哪些原子类-atomic-classes" aria-label="Permalink to &quot;28、什么是原子操作？在Java Concurrency API中有哪些原子类(atomic classes)？&quot;">​</a></h3><h3 id="_29、如果你提交任务时-线程池队列已满-这时会发生什么" tabindex="-1">29、如果你提交任务时，线程池队列已满，这时会发生什么 <a class="header-anchor" href="#_29、如果你提交任务时-线程池队列已满-这时会发生什么" aria-label="Permalink to &quot;29、如果你提交任务时，线程池队列已满，这时会发生什么&quot;">​</a></h3><h3 id="_30、什么情况发生栈溢出" tabindex="-1">30、什么情况发生栈溢出？ <a class="header-anchor" href="#_30、什么情况发生栈溢出" aria-label="Permalink to &quot;30、什么情况发生栈溢出？&quot;">​</a></h3><h3 id="_31、jvm垃圾回收时候如何确定垃圾-什么是gc-roots" tabindex="-1">31、JVM垃圾回收时候如何确定垃圾？什么是GC Roots？ <a class="header-anchor" href="#_31、jvm垃圾回收时候如何确定垃圾-什么是gc-roots" aria-label="Permalink to &quot;31、JVM垃圾回收时候如何确定垃圾？什么是GC Roots？&quot;">​</a></h3><h3 id="_32、堆和栈的区别" tabindex="-1">32、堆和栈的区别 <a class="header-anchor" href="#_32、堆和栈的区别" aria-label="Permalink to &quot;32、堆和栈的区别&quot;">​</a></h3>`,62),l=[r];function t(i,c,p,E,h,B){return e(),s("div",null,l)}const A=a(o,[["render",t]]);export{u as __pageData,A as default};
