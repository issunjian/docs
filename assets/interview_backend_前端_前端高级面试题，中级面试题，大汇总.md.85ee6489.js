import{_ as e,o as s,c as a,V as o}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/前端/前端高级面试题，中级面试题，大汇总.md","filePath":"interview/backend/前端/前端高级面试题，中级面试题，大汇总.md"}'),n={name:"interview/backend/前端/前端高级面试题，中级面试题，大汇总.md"},l=o(`<h3 id="_1、jq中get和eq有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#1jq%E4%B8%ADget%E5%92%8Ceq%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">1、Jq中get和eq有什么区别？</a> <a class="header-anchor" href="#_1、jq中get和eq有什么区别" aria-label="Permalink to &quot;[1、Jq中get和eq有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#1jq中get和eq有什么区别)&quot;">​</a></h3><p>get() :取得其中一个匹配的元素。num表示取得第几个匹配的元素，get多针对集合元素，返回的是DOM对象组成的数组 eq():获取第N个元素，下标都是从0开始，返回的是一个JQuery对象</p><h3 id="_2、页面可见性-page-visibility-api-可以有哪些用途" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#2%E9%A1%B5%E9%9D%A2%E5%8F%AF%E8%A7%81%E6%80%A7page-visibilityapi-%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%93%AA%E4%BA%9B%E7%94%A8%E9%80%94" target="_blank" rel="noreferrer">2、页面可见性（Page Visibility）API 可以有哪些用途</a> <a class="header-anchor" href="#_2、页面可见性-page-visibility-api-可以有哪些用途" aria-label="Permalink to &quot;[2、页面可见性（Page Visibility）API 可以有哪些用途](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#2页面可见性page-visibilityapi-可以有哪些用途)&quot;">​</a></h3><p><strong>1、</strong> 通过visibility state的值得检测页面当前是否可见，以及打开网页的时间。</p><p><strong>2、</strong> 在页面被切换到其他后台进程时，自动暂停音乐或视频的播放。</p><h3 id="_3、同步异步" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#3%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5" target="_blank" rel="noreferrer">3、同步异步?</a> <a class="header-anchor" href="#_3、同步异步" aria-label="Permalink to &quot;[3、同步异步?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#3同步异步)&quot;">​</a></h3><p><strong>1、</strong> 进程同步：就是在发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事</p><p><strong>2、</strong> 异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p><h3 id="_4、undefined-和-null-有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#4undefined-%E5%92%8C-null-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">4、undefined 和 null 有什么区别？</a> <a class="header-anchor" href="#_4、undefined-和-null-有什么区别" aria-label="Permalink to &quot;[4、undefined 和 null 有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#4undefined-和-null-有什么区别)&quot;">​</a></h3><p>在理解 <code>undefined</code> 和 <code>null</code> 的差异之前，我们先来看看它们的相似点。</p><p><strong>它们都属于 JavaScript 的 7 种基本类型。</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">let primitiveTypes = [&#39;string&#39;,&#39;number&#39;,&#39;null&#39;,&#39;undefined&#39;,&#39;boolean&#39;,&#39;symbol&#39;, &#39;bigint&#39;];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">let primitiveTypes = [&#39;string&#39;,&#39;number&#39;,&#39;null&#39;,&#39;undefined&#39;,&#39;boolean&#39;,&#39;symbol&#39;, &#39;bigint&#39;];</span></span></code></pre></div><p>它们是属于 falsy 值类型，可以使用 <code>Boolean(value)</code> 或 <code>!!value</code> 将其转换为布尔值时，值为<code>false</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">console.log(!!null); // false</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(!!undefined); // false</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(Boolean(null)); // false</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(Boolean(undefined)); // false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">console.log(!!null); // false</span></span>
<span class="line"><span style="color:#24292e;">console.log(!!undefined); // false</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">console.log(Boolean(null)); // false</span></span>
<span class="line"><span style="color:#24292e;">console.log(Boolean(undefined)); // false</span></span></code></pre></div><p>接着来看看它们的区别。</p><p><code>undefined</code> 是未指定特定值的变量的默认值，或者没有显式返回值的函数，如：<code>console.log(1)</code>，还包括对象中不存在的属性，这些 JS 引擎都会为其分配 <code>undefined</code> 值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">let _thisIsUndefined;</span></span>
<span class="line"><span style="color:#f6f6f4;">const doNothing = () =&gt; {};</span></span>
<span class="line"><span style="color:#f6f6f4;">const someObj = {</span></span>
<span class="line"><span style="color:#f6f6f4;">  a : &quot;ay&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">  b : &quot;bee&quot;,</span></span>
<span class="line"><span style="color:#f6f6f4;">  c : &quot;si&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">};</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(_thisIsUndefined); // undefined</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(doNothing()); // undefined</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(someObj[&quot;d&quot;]); // undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">let _thisIsUndefined;</span></span>
<span class="line"><span style="color:#24292e;">const doNothing = () =&gt; {};</span></span>
<span class="line"><span style="color:#24292e;">const someObj = {</span></span>
<span class="line"><span style="color:#24292e;">  a : &quot;ay&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  b : &quot;bee&quot;,</span></span>
<span class="line"><span style="color:#24292e;">  c : &quot;si&quot;</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">console.log(_thisIsUndefined); // undefined</span></span>
<span class="line"><span style="color:#24292e;">console.log(doNothing()); // undefined</span></span>
<span class="line"><span style="color:#24292e;">console.log(someObj[&quot;d&quot;]); // undefined</span></span></code></pre></div><p><code>null</code> 是『不代表任何值的值』。<code>null</code>是已明确定义给变量的值。在此示例中，当<code>fs.readFile</code>方法未引发错误时，我们将获得<code>null</code>值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">fs.readFile(&#39;path/to/file&#39;, (e,data) =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">   console.log(e); // 当没有错误发生时，打印 null</span></span>
<span class="line"><span style="color:#f6f6f4;">   if(e){</span></span>
<span class="line"><span style="color:#f6f6f4;">     console.log(e);</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;">   console.log(data);</span></span>
<span class="line"><span style="color:#f6f6f4;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">fs.readFile(&#39;path/to/file&#39;, (e,data) =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">   console.log(e); // 当没有错误发生时，打印 null</span></span>
<span class="line"><span style="color:#24292e;">   if(e){</span></span>
<span class="line"><span style="color:#24292e;">     console.log(e);</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;">   console.log(data);</span></span>
<span class="line"><span style="color:#24292e;"> });</span></span></code></pre></div><p>在比较<code>null</code>和<code>undefined</code>时，我们使用<code>==</code>时得到<code>true</code>，使用<code>===</code>时得到<code>false</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">console.log(null == undefined); // true</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(null === undefined); // false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">console.log(null == undefined); // true</span></span>
<span class="line"><span style="color:#24292e;">console.log(null === undefined); // false</span></span></code></pre></div><h3 id="_5、你对line-height是如何理解的" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#5%E4%BD%A0%E5%AF%B9line-height%E6%98%AF%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E7%9A%84" target="_blank" rel="noreferrer">5、你对line-height是如何理解的？</a> <a class="header-anchor" href="#_5、你对line-height是如何理解的" aria-label="Permalink to &quot;[5、你对line-height是如何理解的？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#5你对line-height是如何理解的)&quot;">​</a></h3><p><strong>1、</strong> 行高是指一行文字的高度，具体说是两行文字间基线的距离。CSS中起高度作用的是height和line-height，没有定义height属性，最终其表现作用一定是line-height。</p><p><strong>2、</strong> 单行文本垂直居中：把line-height值设置为height一样大小的值可以实现单行文字的垂直居中，其实也可以把height删除。</p><p><strong>3、</strong> 多行文本垂直居中：需要设置display属性为inline-block。</p><h3 id="_6、什么是移动端的300ms延迟-什么是点击穿透-解决方案" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#6%E4%BB%80%E4%B9%88%E6%98%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84300ms%E5%BB%B6%E8%BF%9F%E4%BB%80%E4%B9%88%E6%98%AF%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" target="_blank" rel="noreferrer">6、什么是移动端的300ms延迟？什么是点击穿透？解决方案?</a> <a class="header-anchor" href="#_6、什么是移动端的300ms延迟-什么是点击穿透-解决方案" aria-label="Permalink to &quot;[6、什么是移动端的300ms延迟？什么是点击穿透？解决方案?](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#6什么是移动端的300ms延迟什么是点击穿透解决方案)&quot;">​</a></h3><p>移动端300ms延迟：假定这么一个场景。用户在 浏览器里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作，当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。因此，浏览器 就等待 300 毫秒，以判断用户是否再次点击了屏幕。也就是说，当我们点击页面的时候移动端浏览器并不是立即作出反应，而是会等上一小会儿才会出现点击的效果。</p><p>点击穿透：假如页面上有两个元素A和B。B元素在A元素之上。我们在B元素的touchstart事件上注册了一个回调函数，该回调函数的作用是隐藏B元素。我们发现，当我们点击B元素，B元素被隐藏了，随后，A元素触发了click事件。这是因为在移动端浏览器，事件执行的顺序是touchstart touchend click。而click事件有300ms的延迟，当touchstart事件把B元素隐藏之后，隔了300ms，浏览器触发了click事件，但是此时B元素不见了，所以该事件被派发到了A元素身上。如果A元素是一个链接，那此时页面就会意外地跳转。</p><p>300ms延迟解决方案：</p><p>(1) 禁用缩放，在html文档头部加meta标签如下：</p><p>(4) FastClick为解决移动端浏览器300毫秒延迟开发的一个轻量级的库</p><p>点击穿透解决方案：</p><p>（1）只用touch</p><p>（2）只用click</p><p>（3）tap后延迟350ms再隐藏mask</p><p>（4）pointer-events</p><h3 id="_7、如何在不使用-模运算符的情况下检查一个数字是否是偶数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#7%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%8D%E4%BD%BF%E7%94%A8%25%E6%A8%A1%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E6%98%AF%E5%81%B6%E6%95%B0" target="_blank" rel="noreferrer">7、如何在不使用<code>%</code>模运算符的情况下检查一个数字是否是偶数？</a> <a class="header-anchor" href="#_7、如何在不使用-模运算符的情况下检查一个数字是否是偶数" aria-label="Permalink to &quot;[7、如何在不使用\`%\`模运算符的情况下检查一个数字是否是偶数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#7如何在不使用%模运算符的情况下检查一个数字是否是偶数)&quot;">​</a></h3><p>我们可以对这个问题使用按位<code>&amp;</code>运算符，<code>&amp;</code>对其操作数进行运算，并将其视为二进制值，然后执行与运算。</p><p><code>function isEven(num) { if (num &amp; 1) { return false } else { return true } }</code></p><p><code>0</code> 二进制数是 <code>000</code> <code>1</code> 二进制数是 <code>001</code> <code>2</code> 二进制数是 <code>010</code> <code>3</code> 二进制数是 <code>011</code> <code>4</code> 二进制数是 <code>100</code> <code>5</code> 二进制数是 <code>101</code> <code>6</code> 二进制数是 <code>110</code> <code>7</code> 二进制数是 <code>111</code></p><p>以此类推...</p><p>因此，当我们执行<code>console.log(5&amp;1)</code>这个表达式时，结果为<code>1</code>。首先，<code>&amp;</code>运算符将两个数字都转换为二进制，因此<code>5</code>变为<code>101</code>，<code>1</code>变为<code>001</code>。</p><p>然后，它使用按位怀运算符比较每个位（<code>0</code>和<code>1</code>）。<code>101&amp;001</code>，从表中可以看出，如果<code>a &amp; b</code>为<code>1</code>，所以<code>5&amp;1</code>结果为<code>1</code>。</p><p>101 &amp; 001</p><p>101</p><p>001</p><p>001</p><p><strong>1、</strong> 首先我们比较最左边的<code>1&amp;0</code>，结果是<code>0</code>。</p><p><strong>2、</strong> 然后我们比较中间的<code>0&amp;0</code>，结果是<code>0</code>。</p><p><strong>3、</strong> 然后我们比较最后<code>1&amp;1</code>，结果是<code>1</code>。</p><p><strong>4、</strong> 最后，得到一个二进制数<code>001</code>，对应的十进制数，即<code>1</code>。</p><p>由此我们也可以算出<code>console.log(4 &amp; 1)</code> 结果为<code>0</code>。知道<code>4</code>的最后一位是<code>0</code>，而<code>0 &amp; 1</code> 将是<code>0</code>。如果你很难理解这一点，我们可以使用递归函数来解决此问题。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function isEven(num) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  if (num &lt; 0 || num === 1) return false;</span></span>
<span class="line"><span style="color:#f6f6f4;">  if (num == 0) return true;</span></span>
<span class="line"><span style="color:#f6f6f4;">  return isEven(num - 2);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function isEven(num) {</span></span>
<span class="line"><span style="color:#24292e;">  if (num &lt; 0 || num === 1) return false;</span></span>
<span class="line"><span style="color:#24292e;">  if (num == 0) return true;</span></span>
<span class="line"><span style="color:#24292e;">  return isEven(num - 2);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><h3 id="_8、静态网页和动态网页区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#8%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E5%92%8C%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E5%8C%BA%E5%88%AB%EF%BC%9A" target="_blank" rel="noreferrer">8、静态网页和动态网页区别：</a> <a class="header-anchor" href="#_8、静态网页和动态网页区别" aria-label="Permalink to &quot;[8、静态网页和动态网页区别：](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#8静态网页和动态网页区别：)&quot;">​</a></h3><p><code>静态:</code> 网页内容任何人在任何时间访问都是不变的</p><p><code>动态:</code> 网页内容不同人在不同时间访问可能是不同的</p><h3 id="_9、压缩合并目的-http请求的优化方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#9%E5%8E%8B%E7%BC%A9%E5%90%88%E5%B9%B6%E7%9B%AE%E7%9A%84http%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">9、压缩合并目的？http请求的优化方式？</a> <a class="header-anchor" href="#_9、压缩合并目的-http请求的优化方式" aria-label="Permalink to &quot;[9、压缩合并目的？http请求的优化方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#9压缩合并目的http请求的优化方式)&quot;">​</a></h3><p>1）Web性能优化最佳实践中最重要的一条是减少HTTP请求。而减少HTTP请求的最主要的方式就是，合并并压缩JavaScript和CSS文件。</p><p>CSS Sprites（CSS精灵）：把全站的图标都放在一个图像文件中，然后用CSS的background-image和background-position属性定位来显示其中的一小部分。</p><p>合并脚本和样式表; 图片地图：利用image map标签定义一个客户端图像映射，（图像映射指带有可点击区域的一幅图像）具体看： <a href="http://link.zhihu.com/?target=http%3A//club.topsage.com/thread-2527479-1-1.html" target="_blank" rel="noreferrer">http://club.topsage.com/thread-2527479-1-1.html</a></p><p>图片js/css等静态资源放在静态服务器或CDN服时，尽量采用不用的域名，这样能防止cookie不会互相污染，减少每次请求的往返数据。</p><p>css替代图片, 缓存一些数据</p><p>少用location.reload()：使用location.reload() 会刷新页面，刷新页面时页面所有资源 (css，js，img等) 会重新请求服务器。建议使用location.href=&quot;当前页url&quot; 代替location.reload() ，使用location.href 浏览器会读取本地缓存资源。</p><h3 id="_10、展开-spread-运算符和-剩余-rest-运算符有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E4%B8%AD%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%A4%A7%E6%B1%87%E6%80%BB.md#10%E5%B1%95%E5%BC%80spread-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C-%E5%89%A9%E4%BD%99rest-%E8%BF%90%E7%AE%97%E7%AC%A6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">10、展开(spread )运算符和 剩余(Rest) 运算符有什么区别？</a> <a class="header-anchor" href="#_10、展开-spread-运算符和-剩余-rest-运算符有什么区别" aria-label="Permalink to &quot;[10、展开(spread )运算符和 剩余(Rest) 运算符有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/前端/前端高级面试题，中级面试题，大汇总.md#10展开spread-运算符和-剩余rest-运算符有什么区别)&quot;">​</a></h3><p>展开运算符(spread)是三个点(<code>...</code>)，可以将一个数组转为用逗号分隔的参数序列。说的通俗易懂点，有点像化骨绵掌，把一个大元素给打散成一个个单独的小元素。</p><p>剩余运算符也是用三个点(<code>...</code>)表示，它的样子看起来和展开操作符一样，但是它是用于解构数组和对象。在某种程度上，剩余元素和展开元素相反，展开元素会“展开”数组变成多个元素，剩余元素会收集多个元素和“压缩”成一个单一的元素。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function add(a, b) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return a + b;</span></span>
<span class="line"><span style="color:#f6f6f4;">};</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">const nums = [5, 6];</span></span>
<span class="line"><span style="color:#f6f6f4;">const sum = add(...nums);</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(sum);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function add(a, b) {</span></span>
<span class="line"><span style="color:#24292e;">  return a + b;</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const nums = [5, 6];</span></span>
<span class="line"><span style="color:#24292e;">const sum = add(...nums);</span></span>
<span class="line"><span style="color:#24292e;">console.log(sum);</span></span></code></pre></div><p>在本例中，我们在调用<code>add</code>函数时使用了展开操作符，对<code>nums</code>数组进行展开。所以参数<code>a</code>的值是<code>5</code> ，<code>b</code>的值是<code>6</code>，所以<code>sum</code> 是<code>11</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">function add(...rest) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return rest.reduce((total,current) =&gt; total + current);</span></span>
<span class="line"><span style="color:#f6f6f4;">};</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(add(1, 2)); // 3</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(add(1, 2, 3, 4, 5)); // 15</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function add(...rest) {</span></span>
<span class="line"><span style="color:#24292e;">  return rest.reduce((total,current) =&gt; total + current);</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">console.log(add(1, 2)); // 3</span></span>
<span class="line"><span style="color:#24292e;">console.log(add(1, 2, 3, 4, 5)); // 15</span></span></code></pre></div><p>在本例中，我们有一个<code>add</code>函数，它接受任意数量的参数，并将它们全部相加，然后返回总数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const [first, ...others] = [1, 2, 3, 4, 5];</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(first); // 1</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(others); // [2,3,4,5]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const [first, ...others] = [1, 2, 3, 4, 5];</span></span>
<span class="line"><span style="color:#24292e;">console.log(first); // 1</span></span>
<span class="line"><span style="color:#24292e;">console.log(others); // [2,3,4,5]</span></span></code></pre></div><p>这里，我们使用剩余操作符提取所有剩余的数组值，并将它们放入除第一项之外的其他数组中。</p><h3 id="_11、面试人事面" tabindex="-1">11、面试人事面 <a class="header-anchor" href="#_11、面试人事面" aria-label="Permalink to &quot;11、面试人事面&quot;">​</a></h3><h3 id="_12、什么是重绘和回流-浏览器绘制过程" tabindex="-1">12、什么是重绘和回流？（浏览器绘制过程） <a class="header-anchor" href="#_12、什么是重绘和回流-浏览器绘制过程" aria-label="Permalink to &quot;12、什么是重绘和回流？（浏览器绘制过程）&quot;">​</a></h3><h3 id="_13、vue-router有哪几种导航钩子" tabindex="-1">13、vue-router有哪几种导航钩子 <a class="header-anchor" href="#_13、vue-router有哪几种导航钩子" aria-label="Permalink to &quot;13、vue-router有哪几种导航钩子&quot;">​</a></h3><h3 id="_14、绑定class的数组用法" tabindex="-1">14、绑定class的数组用法 <a class="header-anchor" href="#_14、绑定class的数组用法" aria-label="Permalink to &quot;14、绑定class的数组用法&quot;">​</a></h3><h3 id="_15、cookies-sessionstorage和localstorage的区别" tabindex="-1">15、cookies，sessionStorage和localStorage的区别 <a class="header-anchor" href="#_15、cookies-sessionstorage和localstorage的区别" aria-label="Permalink to &quot;15、cookies，sessionStorage和localStorage的区别&quot;">​</a></h3><h3 id="_16、如何copy一个dom元素" tabindex="-1">16、如何copy一个dom元素？ <a class="header-anchor" href="#_16、如何copy一个dom元素" aria-label="Permalink to &quot;16、如何copy一个dom元素？&quot;">​</a></h3><h3 id="_17、请描述一下-cookies-sessionstorage-和-localstorage-的区别" tabindex="-1">17、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？ <a class="header-anchor" href="#_17、请描述一下-cookies-sessionstorage-和-localstorage-的区别" aria-label="Permalink to &quot;17、请描述一下 \`cookies\`，\`sessionStorage\` 和 \`localStorage\` 的区别？&quot;">​</a></h3><h3 id="_18、函数fn1-函数fn2-函数fn3-如果想在三个函数都执行完成后执行某一个事件应该如何实现" tabindex="-1">18、函数fn1 函数fn2 函数fn3，如果想在三个函数都执行完成后执行某一个事件应该如何实现? <a class="header-anchor" href="#_18、函数fn1-函数fn2-函数fn3-如果想在三个函数都执行完成后执行某一个事件应该如何实现" aria-label="Permalink to &quot;18、函数fn1 函数fn2 函数fn3，如果想在三个函数都执行完成后执行某一个事件应该如何实现?&quot;">​</a></h3><h3 id="_19、微信小程序-加载性能优化方法" tabindex="-1">19、微信小程序，加载性能优化方法 <a class="header-anchor" href="#_19、微信小程序-加载性能优化方法" aria-label="Permalink to &quot;19、微信小程序，加载性能优化方法&quot;">​</a></h3><h3 id="_20、面试常问" tabindex="-1">20、面试常问 <a class="header-anchor" href="#_20、面试常问" aria-label="Permalink to &quot;20、面试常问&quot;">​</a></h3><h3 id="_21、jq中如何实现多库并存" tabindex="-1">21、Jq中如何实现多库并存? <a class="header-anchor" href="#_21、jq中如何实现多库并存" aria-label="Permalink to &quot;21、Jq中如何实现多库并存?&quot;">​</a></h3><h3 id="_22、如何改变this指针的指向" tabindex="-1">22、如何改变this指针的指向？ <a class="header-anchor" href="#_22、如何改变this指针的指向" aria-label="Permalink to &quot;22、如何改变this指针的指向？&quot;">​</a></h3><h3 id="_23、页面导入样式时-使用-link-和-import-有什么区别" tabindex="-1">23、页面导入样式时，使用 link 和 <a href="/docs/import.html">@import </a> 有什么区别？ <a class="header-anchor" href="#_23、页面导入样式时-使用-link-和-import-有什么区别" aria-label="Permalink to &quot;23、页面导入样式时，使用 link 和 [@import ](/import ) 有什么区别？&quot;">​</a></h3><h3 id="_24、浏览器的渲染原理" tabindex="-1">24、浏览器的渲染原理？ <a class="header-anchor" href="#_24、浏览器的渲染原理" aria-label="Permalink to &quot;24、浏览器的渲染原理？&quot;">​</a></h3><h3 id="_25、前端需要注意哪些seo" tabindex="-1">25、前端需要注意哪些SEO <a class="header-anchor" href="#_25、前端需要注意哪些seo" aria-label="Permalink to &quot;25、前端需要注意哪些SEO&quot;">​</a></h3><h3 id="_26、手动实现array-prototype-filter方法" tabindex="-1">26、手动实现<code>Array.prototype.filter</code>方法 <a class="header-anchor" href="#_26、手动实现array-prototype-filter方法" aria-label="Permalink to &quot;26、手动实现\`Array.prototype.filter\`方法&quot;">​</a></h3><h3 id="_27、function-prototype-apply-和-function-prototype-call-之间有什么区别" tabindex="-1">27、Function.prototype.apply 和 Function.prototype.call 之间有什么区别？ <a class="header-anchor" href="#_27、function-prototype-apply-和-function-prototype-call-之间有什么区别" aria-label="Permalink to &quot;27、Function.prototype.apply 和 Function.prototype.call 之间有什么区别？&quot;">​</a></h3><h3 id="_28、http的几种请求方法用途" tabindex="-1">28、HTTP的几种请求方法用途 <a class="header-anchor" href="#_28、http的几种请求方法用途" aria-label="Permalink to &quot;28、HTTP的几种请求方法用途&quot;">​</a></h3><h3 id="_29、iframe框架有那些优缺点" tabindex="-1">29、iframe框架有那些优缺点 <a class="header-anchor" href="#_29、iframe框架有那些优缺点" aria-label="Permalink to &quot;29、iframe框架有那些优缺点&quot;">​</a></h3><h3 id="_30、defer和async" tabindex="-1">30、defer和async <a class="header-anchor" href="#_30、defer和async" aria-label="Permalink to &quot;30、defer和async&quot;">​</a></h3>`,92),t=[l];function c(p,r,i,d,E,u){return s(),a("div",null,t)}const A=e(n,[["render",c]]);export{f as __pageData,A as default};
