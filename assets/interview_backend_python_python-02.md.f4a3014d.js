import{_ as s,o as a,c as n,V as o}from"./chunks/framework.c6d8cbec.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/python/python-02.md","filePath":"interview/backend/python/python-02.md"}'),e={name:"interview/backend/python/python-02.md"},l=o(`<h3 id="_1、什么是twemproxy" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E4%BB%80%E4%B9%88%E6%98%AFtwemproxy" target="_blank" rel="noreferrer">1、什么是Twemproxy</a> <a class="header-anchor" href="#_1、什么是twemproxy" aria-label="Permalink to &quot;[1、什么是Twemproxy](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#1什么是twemproxy)&quot;">​</a></h3><p>Twemproxy是一种代理分片机制，由Twitter开源。Twemproxy作为代理，可接受来自多个程序的访问，按照路由规则，转发给后台的各个Redis服务器，再原路返回。该方案很好的解决了单个Redis实例承载能力的问题。当然，Twemproxy本身也是单点，需要用Keepalived做高可用方案。通过Twemproxy可以使用多台服务器来水平扩张Redis服务，可以有效的避免单点故障问题。虽然使用Twemproxy需要更多的硬件资源和在Redis性能有一定的损失（twitter测试约20%），但是能够提高整个系统的HA也是相当划算的。不熟悉twemproxy的同学，如果玩过nginx反向代理或者MySQL proxy，那么你肯定也懂twemproxy了。其实twemproxy不光实现了Redis协议</p><h3 id="_2、写出如下代码的输出结果" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2%E5%86%99%E5%87%BA%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C" target="_blank" rel="noreferrer">2、写出如下代码的输出结果</a> <a class="header-anchor" href="#_2、写出如下代码的输出结果" aria-label="Permalink to &quot;[2、写出如下代码的输出结果](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#2写出如下代码的输出结果)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decorator_a</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Get in decorator_a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">inner_a</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">**</span><span style="color:#FFB86C;font-style:italic;">kwargs</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Get in inner_a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> func(</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">args, </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;">kwargs)</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> inner_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decorator_b</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Get in decorator_b</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">inner_b</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">*</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">, </span><span style="color:#F286C4;">**</span><span style="color:#FFB86C;font-style:italic;">kwargs</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Get in inner_b</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> func(</span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;">args, </span><span style="color:#F286C4;">**</span><span style="color:#F6F6F4;">kwargs)</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> inner_b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">@decorator_b</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">#f=decorator_b(f)</span></span>
<span class="line"><span style="color:#62E884;">@decorator_a</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">#f=decorator_a(f)</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Get in f</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> x </span><span style="color:#BF9EEE;">2</span></span>
<span class="line"><span style="color:#F6F6F4;">f(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorator_a</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Get in decorator_a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inner_a</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Get in inner_a&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inner_a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decorator_b</span><span style="color:#24292E;">(func):</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Get in decorator_b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inner_b</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs):</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Get in inner_b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> func(</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">args, </span><span style="color:#D73A49;">**</span><span style="color:#24292E;">kwargs)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inner_b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">@decorator_b</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#f=decorator_b(f)</span></span>
<span class="line"><span style="color:#6F42C1;">@decorator_a</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#f=decorator_a(f)</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(x):</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Get in f&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">f(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span></code></pre></div><p>答案</p><blockquote><p>Get in decorator_a</p></blockquote><p>Get in decorator_b</p><p>Get in inner_b</p><p>Get in inner_a</p><p>Get in f</p><p>解释</p><blockquote><p>当我们对f传入参数1进行调用时，inner_b被调用了，他会先打印Get in inner_b,然后在inner_b内部调用了inner_a,所以会再打印Get in inner_a,然后再inner_a内部调用原来的f,并且将结果作为最终的返回总结：装饰器函数在被装饰函数定义好后立即执行从下往上执行函数调用时从上到下执行</p></blockquote><h3 id="_3、如何使用python删除一个文件或者文件夹" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8python%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E6%96%87%E4%BB%B6%E5%A4%B9" target="_blank" rel="noreferrer">3、如何使用python删除一个文件或者文件夹？</a> <a class="header-anchor" href="#_3、如何使用python删除一个文件或者文件夹" aria-label="Permalink to &quot;[3、如何使用python删除一个文件或者文件夹？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#3如何使用python删除一个文件或者文件夹)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> os</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> shutil</span></span>
<span class="line"><span style="color:#F6F6F4;">os.remove(path) </span><span style="color:#7B7F8B;"># 删除文件</span></span>
<span class="line"><span style="color:#F6F6F4;">os.removedirs(path) </span><span style="color:#7B7F8B;"># 删除空文件夹</span></span>
<span class="line"><span style="color:#F6F6F4;">shutil.rmtree(path) </span><span style="color:#7B7F8B;"># 删除文件夹，可以为空也可以不为空</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> os</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> shutil</span></span>
<span class="line"><span style="color:#24292E;">os.remove(path) </span><span style="color:#6A737D;"># 删除文件</span></span>
<span class="line"><span style="color:#24292E;">os.removedirs(path) </span><span style="color:#6A737D;"># 删除空文件夹</span></span>
<span class="line"><span style="color:#24292E;">shutil.rmtree(path) </span><span style="color:#6A737D;"># 删除文件夹，可以为空也可以不为空</span></span></code></pre></div><h3 id="_4、为什么学python" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6python" target="_blank" rel="noreferrer">4、为什么学python</a> <a class="header-anchor" href="#_4、为什么学python" aria-label="Permalink to &quot;[4、为什么学python](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#4为什么学python)&quot;">​</a></h3><p>答题路线：a、python的优点，b、python的应用领域广</p><p><strong>具体：</strong></p><p>优点</p><p><strong>1、</strong> python语法非常优雅，简单易学</p><p><strong>2、</strong> 免费开源</p><p><strong>3、</strong> 跨平台，可以自由移植</p><p><strong>4、</strong> 可扩展，可嵌入性强</p><p><strong>5、</strong> 第三方库丰富</p><p><strong>应用领域</strong></p><p><strong>1、</strong> 在系统编程中应用广泛，比如说shell工具。</p><p><strong>2、</strong> 在网络爬虫方面功能非常强大，常用的库如scrapy，request等</p><p><strong>3、</strong> 在web开发中使用也很广泛，如很多大型网站都用python开发的，如ins，youtube等，常用的框架如django，flask等</p><p><strong>4、</strong> python在系统运维中应用广泛，尤其在linux运维方面，基本上都是自动化运维。</p><p><strong>5、</strong> 在人工智能，云计算，金融等方面也应用非常广泛。</p><h3 id="_5、如何修改本地hosts文件" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E6%9C%AC%E5%9C%B0hosts%E6%96%87%E4%BB%B6" target="_blank" rel="noreferrer">5、如何修改本地hosts文件</a> <a class="header-anchor" href="#_5、如何修改本地hosts文件" aria-label="Permalink to &quot;[5、如何修改本地hosts文件](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#5如何修改本地hosts文件)&quot;">​</a></h3><p>进入c:\\windows\\system32\\drivers\\etc进行修改</p><h3 id="_6、编写程序-查找文本文件中最长的单词" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6%E7%BC%96%E5%86%99%E7%A8%8B%E5%BA%8F%E6%9F%A5%E6%89%BE%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%AD%E6%9C%80%E9%95%BF%E7%9A%84%E5%8D%95%E8%AF%8D" target="_blank" rel="noreferrer">6、编写程序，查找文本文件中最长的单词</a> <a class="header-anchor" href="#_6、编写程序-查找文本文件中最长的单词" aria-label="Permalink to &quot;[6、编写程序，查找文本文件中最长的单词](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#6编写程序查找文本文件中最长的单词)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">def longest_word(filename):</span></span>
<span class="line"><span style="color:#f6f6f4;">    with open(filename, &#39;r&#39;) as infile:</span></span>
<span class="line"><span style="color:#f6f6f4;">              words = infile.read().split()</span></span>
<span class="line"><span style="color:#f6f6f4;">    max_len = len(max(words, key=len))</span></span>
<span class="line"><span style="color:#f6f6f4;">    return [word for word in words if len(word) == max_len]</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">print(longest_word(&#39;test.txt&#39;))</span></span>
<span class="line"><span style="color:#f6f6f4;">----------------------------------------------------</span></span>
<span class="line"><span style="color:#f6f6f4;">[&#39;comprehensions&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">def longest_word(filename):</span></span>
<span class="line"><span style="color:#24292e;">    with open(filename, &#39;r&#39;) as infile:</span></span>
<span class="line"><span style="color:#24292e;">              words = infile.read().split()</span></span>
<span class="line"><span style="color:#24292e;">    max_len = len(max(words, key=len))</span></span>
<span class="line"><span style="color:#24292e;">    return [word for word in words if len(word) == max_len]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">print(longest_word(&#39;test.txt&#39;))</span></span>
<span class="line"><span style="color:#24292e;">----------------------------------------------------</span></span>
<span class="line"><span style="color:#24292e;">[&#39;comprehensions&#39;]</span></span></code></pre></div><h3 id="_7、用一行代码实现数值交换" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7%E7%94%A8%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%80%BC%E4%BA%A4%E6%8D%A2" target="_blank" rel="noreferrer">7、用一行代码实现数值交换</a> <a class="header-anchor" href="#_7、用一行代码实现数值交换" aria-label="Permalink to &quot;[7、用一行代码实现数值交换](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#7用一行代码实现数值交换)&quot;">​</a></h3><p><strong>1、</strong> a=1</p><p><strong>2、</strong> b=2</p><p><strong>3、</strong> 答案：a,b=b,a</p><h3 id="_8、数据库的导入与导出命令" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4" target="_blank" rel="noreferrer">8、数据库的导入与导出命令</a> <a class="header-anchor" href="#_8、数据库的导入与导出命令" aria-label="Permalink to &quot;[8、数据库的导入与导出命令](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#8数据库的导入与导出命令)&quot;">​</a></h3><p><strong>1、</strong> 导出(MySQLdump)</p><p><strong>2、</strong> 导出数据和表结构</p><p><strong>3、</strong> MySQLdump -uroot -p dbname &gt; dbname .sql</p><p><strong>4、</strong> 只导出表结构</p><p><strong>5、</strong> MySQLdump -uroot -p -d dbname &gt; dbname .sql</p><p>6、导入</p><p><strong>7、</strong> MySQL -u用户名 -p密码 数据库名 &lt; 数据库名.sql</p><h3 id="_9、redis中watch的作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9redis%E4%B8%ADwatch%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">9、Redis中watch的作用</a> <a class="header-anchor" href="#_9、redis中watch的作用" aria-label="Permalink to &quot;[9、Redis中watch的作用](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#9redis中watch的作用)&quot;">​</a></h3><p><strong>1、</strong> watch 用于在进行事务操作的最后一步也就是在执行exec 之前对某个key进行监视</p><p><strong>2、</strong> 如果这个被监视的key被改动，那么事务就被取消，否则事务正常执行.</p><p><strong>3、</strong> 一般在MULTI 命令前就用watch命令对某个key进行监控.如果想让key取消被监控，可以用unwatch命令</p><h3 id="_10、mysql常见数据库引擎及区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10mysql%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%95%E6%93%8E%E5%8F%8A%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">10、MySQL常见数据库引擎及区别</a> <a class="header-anchor" href="#_10、mysql常见数据库引擎及区别" aria-label="Permalink to &quot;[10、MySQL常见数据库引擎及区别](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新2021年面试题，高级面试题及附答案解析.md#10mysql常见数据库引擎及区别)&quot;">​</a></h3><p><strong>1、</strong> InnoDB：用于事务处理应用程序，具有众多特性，包括ACID事务支持。(提供行级锁)</p><p><strong>2、</strong> MyISAM：默认的MySQL插件式存储引擎，它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一。注意，通过更改STORAGE_ENGINE配置变量，能够方便地更改MySQL服务器的默认存储引擎。</p><p><strong>3、</strong> Memory：将所有数据保存再RAM中</p><h3 id="_11、求以下代码结果" tabindex="-1">11、求以下代码结果： <a class="header-anchor" href="#_11、求以下代码结果" aria-label="Permalink to &quot;11、求以下代码结果：&quot;">​</a></h3><h3 id="_12、有两个字符串列表a和b-每个字符串是由逗号隔开的一些字符" tabindex="-1">12、有两个字符串列表a和b，每个字符串是由逗号隔开的一些字符 <a class="header-anchor" href="#_12、有两个字符串列表a和b-每个字符串是由逗号隔开的一些字符" aria-label="Permalink to &quot;12、有两个字符串列表a和b，每个字符串是由逗号隔开的一些字符&quot;">​</a></h3><h3 id="_13、怎样获取字典中所有键的列表" tabindex="-1">13、怎样获取字典中所有键的列表？ <a class="header-anchor" href="#_13、怎样获取字典中所有键的列表" aria-label="Permalink to &quot;13、怎样获取字典中所有键的列表？&quot;">​</a></h3><h3 id="_14、解释python的内置数据结构" tabindex="-1">14、解释Python的内置数据结构？ <a class="header-anchor" href="#_14、解释python的内置数据结构" aria-label="Permalink to &quot;14、解释Python的内置数据结构？&quot;">​</a></h3><h3 id="_15、三元运算编写格式" tabindex="-1">15、三元运算编写格式 <a class="header-anchor" href="#_15、三元运算编写格式" aria-label="Permalink to &quot;15、三元运算编写格式&quot;">​</a></h3><h3 id="_16、列表推导式-i-for-i-in-range-10-和生成式表达式-i-for-i-in-range-10-的区别" tabindex="-1">16、列表推导式[i for i in range(10)]和生成式表达式(i for i in range(10))的区别 <a class="header-anchor" href="#_16、列表推导式-i-for-i-in-range-10-和生成式表达式-i-for-i-in-range-10-的区别" aria-label="Permalink to &quot;16、列表推导式[i for i in range(10)]和生成式表达式(i for i in range(10))的区别&quot;">​</a></h3><h3 id="_17、什么是局域网和广域网" tabindex="-1">17、什么是局域网和广域网 <a class="header-anchor" href="#_17、什么是局域网和广域网" aria-label="Permalink to &quot;17、什么是局域网和广域网&quot;">​</a></h3><h3 id="_18、描述以下dict的items和iteritems的区别" tabindex="-1">18、描述以下dict的items和iteritems的区别 <a class="header-anchor" href="#_18、描述以下dict的items和iteritems的区别" aria-label="Permalink to &quot;18、描述以下dict的items和iteritems的区别&quot;">​</a></h3><h3 id="_19、为何不建议以下划线作为标识符的开头" tabindex="-1">19、为何不建议以下划线作为标识符的开头 <a class="header-anchor" href="#_19、为何不建议以下划线作为标识符的开头" aria-label="Permalink to &quot;19、为何不建议以下划线作为标识符的开头&quot;">​</a></h3><h3 id="_20、如何打乱一个排好序的列表" tabindex="-1">20、如何打乱一个排好序的列表 <a class="header-anchor" href="#_20、如何打乱一个排好序的列表" aria-label="Permalink to &quot;20、如何打乱一个排好序的列表&quot;">​</a></h3><h3 id="_21、什么是多态" tabindex="-1">21、什么是多态？ <a class="header-anchor" href="#_21、什么是多态" aria-label="Permalink to &quot;21、什么是多态？&quot;">​</a></h3><h3 id="_22、threading-local的作用" tabindex="-1">22、threading.local的作用 <a class="header-anchor" href="#_22、threading-local的作用" aria-label="Permalink to &quot;22、threading.local的作用&quot;">​</a></h3><h3 id="_23、vuex的作用" tabindex="-1">23、vuex的作用 <a class="header-anchor" href="#_23、vuex的作用" aria-label="Permalink to &quot;23、vuex的作用&quot;">​</a></h3><h3 id="_24、or-和-and" tabindex="-1">24、or 和 and <a class="header-anchor" href="#_24、or-和-and" aria-label="Permalink to &quot;24、or 和 and&quot;">​</a></h3><h3 id="_25、解释python中map-函数" tabindex="-1">25、解释Python中map()函数？ <a class="header-anchor" href="#_25、解释python中map-函数" aria-label="Permalink to &quot;25、解释Python中map()函数？&quot;">​</a></h3><h3 id="_26、通过什么途径学习python" tabindex="-1">26、通过什么途径学习python <a class="header-anchor" href="#_26、通过什么途径学习python" aria-label="Permalink to &quot;26、通过什么途径学习python&quot;">​</a></h3><h3 id="_27、对字典d-a-30-g-17-b-25-c-18-d-50-e-36-f-57-h-25-按照value字段进行排序" tabindex="-1">27、对字典d={&#39;a&#39;:30,&#39;g&#39;:17,&#39;b&#39;:25,&#39;c&#39;:18,&#39;d&#39;:50,&#39;e&#39;:36,&#39;f&#39;:57,&#39;h&#39;:25}按照value字段进行排序 <a class="header-anchor" href="#_27、对字典d-a-30-g-17-b-25-c-18-d-50-e-36-f-57-h-25-按照value字段进行排序" aria-label="Permalink to &quot;27、对字典d={&#39;a&#39;:30,&#39;g&#39;:17,&#39;b&#39;:25,&#39;c&#39;:18,&#39;d&#39;:50,&#39;e&#39;:36,&#39;f&#39;:57,&#39;h&#39;:25}按照value字段进行排序&quot;">​</a></h3><h3 id="_28、lambda表达式格式以及应用场景" tabindex="-1">28、lambda表达式格式以及应用场景？ <a class="header-anchor" href="#_28、lambda表达式格式以及应用场景" aria-label="Permalink to &quot;28、lambda表达式格式以及应用场景？&quot;">​</a></h3><h3 id="_29、为什么数据很大的时候使用limit-offset分页时-越往后翻速度越慢-如何优化" tabindex="-1">29、为什么数据很大的时候使用limit offset分页时，越往后翻速度越慢，如何优化？ <a class="header-anchor" href="#_29、为什么数据很大的时候使用limit-offset分页时-越往后翻速度越慢-如何优化" aria-label="Permalink to &quot;29、为什么数据很大的时候使用limit offset分页时，越往后翻速度越慢，如何优化？&quot;">​</a></h3><h3 id="_30、io多路复用的作用" tabindex="-1">30、IO多路复用的作用？ <a class="header-anchor" href="#_30、io多路复用的作用" aria-label="Permalink to &quot;30、IO多路复用的作用？&quot;">​</a></h3>`,73),t=[l];function p(r,c,i,E,y,h){return a(),n("div",null,t)}const A=s(e,[["render",p]]);export{F as __pageData,A as default};
