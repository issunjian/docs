import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/algorithm/linked-list-cycle-ii.png",o="/docs/algorithm/linked-list-cycle-ii2.png",e="/docs/algorithm/linked-list-cycle-ii3.png",t="/docs/algorithm/linked-list-cycle-ii4.png",c="/docs/algorithm/linked-list-cycle-ii5.png",f=JSON.parse('{"title":"LeetCode 142. 环形链表 II","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/linked-list/142.环形链表 II.md","filePath":"algorithm/linked-list/142.环形链表 II.md"}'),r={name:"algorithm/linked-list/142.环形链表 II.md"},y=l('<h1 id="leetcode-142-环形链表-ii" tabindex="-1">LeetCode 142. 环形链表 II <a class="header-anchor" href="#leetcode-142-环形链表-ii" aria-label="Permalink to &quot;LeetCode 142. 环形链表 II&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p><p>说明：不允许修改给定的链表。</p><p>进阶：</p><p>你是否可以不用额外空间解决此题？</p><p>示例 1：</p><p><img src="'+p+`" alt=""></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">输入：head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">], pos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">输出：返回索引为 </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> 的链表节点</span></span>
<span class="line"><span style="color:#F6F6F4;">解释：链表中有一个环，其尾部连接到第二个节点。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">输入：head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">], pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">输出：返回索引为 </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> 的链表节点</span></span>
<span class="line"><span style="color:#24292E;">解释：链表中有一个环，其尾部连接到第二个节点。</span></span></code></pre></div><p>示例 2：</p><p><img src="`+o+`" alt=""></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">输入：head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">], pos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span></span>
<span class="line"><span style="color:#F6F6F4;">输出：返回索引为 </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> 的链表节点</span></span>
<span class="line"><span style="color:#F6F6F4;">解释：链表中有一个环，其尾部连接到第一个节点。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">输入：head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">输出：返回索引为 </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> 的链表节点</span></span>
<span class="line"><span style="color:#24292E;">解释：链表中有一个环，其尾部连接到第一个节点。</span></span></code></pre></div><p>示例 3：</p><p><img src="`+e+`" alt=""></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">输入：head </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">], pos </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">输出：返回 </span><span style="color:#BF9EEE;">null</span></span>
<span class="line"><span style="color:#F6F6F4;">解释：链表中没有环。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">输入：head </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], pos </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">输出：返回 </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">解释：链表中没有环。</span></span></code></pre></div><p>提示：</p><ul><li>链表中节点的数目范围在范围 <code>[0, 104]</code> 内</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li>pos 的值为 -1 或者链表中的一个有效索引</li></ul><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/linked-list-cycle-ii</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p>两个快慢指针，从头节点出发，如果链表有环，快指针肯定可以在环内和慢指针相遇。没有环就不可能再相遇，相遇必在环内。</p><p><img src="`+t+'" alt=""></p><p><img src="'+c+`" alt=""></p><p>相遇时，慢指针走的距离：<code>D+S1D+S1</code></p><p>假设相遇时快指针已经绕环 n 次，它走的距离：<code>D+n(S1+S2)+S1D+n(S1+S2)+S1</code></p><p>因为快指针的速度是 2 倍，所以相同时间走的距离也是 2 倍：</p><p>D+n(S1+S2)+S1 = 2(D+S1)</p><p>求解得到：<strong>(n-1)S1+ nS2=D</strong></p><p>我们不关心在相遇时快指针已经绕了几次环，我们取 n = 1 ，消掉了 S1：</p><p><strong>D=S2</strong></p><p>那么，当快慢指针第一次相遇时，将快指针放回到头节点，由于 <code>D=s2</code>，那么我们快慢指针一起走，都走 1 步，它们必定会走到入环点，然后相遇，此时就可返回对应指针下标。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#7B7F8B;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#7B7F8B;"> * }</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@param</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span><span style="color:#7B7F8B;"> </span><span style="color:#FFB86C;font-style:italic;">head</span></span>
<span class="line"><span style="color:#7B7F8B;"> * </span><span style="color:#F286C4;">@return</span><span style="color:#7B7F8B;"> </span><span style="color:#97E1F1;font-style:italic;">{ListNode}</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">detectCycle</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">head</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> fast </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head,</span></span>
<span class="line"><span style="color:#F6F6F4;">    low </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head; </span><span style="color:#7B7F8B;">// 首先，都从头节点出现</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (fast) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 确保存在环</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fast.next </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// fast.next 为null表示无环</span></span>
<span class="line"><span style="color:#F6F6F4;">    low </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> low.next; </span><span style="color:#7B7F8B;">// 慢指针走一步</span></span>
<span class="line"><span style="color:#F6F6F4;">    fast </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fast.next.next; </span><span style="color:#7B7F8B;">// 快指针走两步</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (low </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> fast) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 初次相遇</span></span>
<span class="line"><span style="color:#F6F6F4;">      fast </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> head; </span><span style="color:#7B7F8B;">// 快指针回到头节点</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fast </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> low) {</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> low;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        fast </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fast.next; </span><span style="color:#7B7F8B;">// 快慢指针一起走</span></span>
<span class="line"><span style="color:#F6F6F4;">        low </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> low.next;</span></span>
<span class="line"><span style="color:#F6F6F4;">      }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Definition for singly-linked list.</span></span>
<span class="line"><span style="color:#6A737D;"> * function ListNode(val) {</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.val = val;</span></span>
<span class="line"><span style="color:#6A737D;"> *     this.next = null;</span></span>
<span class="line"><span style="color:#6A737D;"> * }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">head</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{ListNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">detectCycle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head,</span></span>
<span class="line"><span style="color:#24292E;">    low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head; </span><span style="color:#6A737D;">// 首先，都从头节点出现</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (fast) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 确保存在环</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fast.next </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// fast.next 为null表示无环</span></span>
<span class="line"><span style="color:#24292E;">    low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low.next; </span><span style="color:#6A737D;">// 慢指针走一步</span></span>
<span class="line"><span style="color:#24292E;">    fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fast.next.next; </span><span style="color:#6A737D;">// 快指针走两步</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (low </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> fast) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 初次相遇</span></span>
<span class="line"><span style="color:#24292E;">      fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head; </span><span style="color:#6A737D;">// 快指针回到头节点</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fast </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> low) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> low;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        fast </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fast.next; </span><span style="color:#6A737D;">// 快慢指针一起走</span></span>
<span class="line"><span style="color:#24292E;">        low </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> low.next;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>参考 <a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/141ti-de-kuo-zhan-ru-guo-lian-biao-you-huan-ru-he-/">笨猪爆破组</a> 图解</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">学如逆水行舟，不进则退</span></span></code></pre></div>`,34),F=[y];function i(d,E,h,C,u,D){return n(),a("div",null,F)}const g=s(r,[["render",i]]);export{f as __pageData,g as default};
