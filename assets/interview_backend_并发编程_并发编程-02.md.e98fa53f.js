import{_ as s,o as a,c as n,V as e}from"./chunks/framework.c6d8cbec.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-02.md","filePath":"interview/backend/并发编程/并发编程-02.md"}'),l={name:"interview/backend/并发编程/并发编程-02.md"},p=e(`<h3 id="_1、乐观锁和悲观锁的理解及如何实现-有哪些实现方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81%E7%9A%84%E7%90%86%E8%A7%A3%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">1、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？</a> <a class="header-anchor" href="#_1、乐观锁和悲观锁的理解及如何实现-有哪些实现方式" aria-label="Permalink to &quot;[1、乐观锁和悲观锁的理解及如何实现，有哪些实现方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#1乐观锁和悲观锁的理解及如何实现有哪些实现方式)&quot;">​</a></h3><p><strong>悲观锁</strong>：</p><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。再比如Java里面的同步原语synchronized关键字的实现也是悲观锁。</p><p><strong>乐观锁</strong>：</p><p>顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于write_condition机制，其实都是提供的乐观锁。在Java中java.util.concurrent.atomic包下面的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p><p><strong>乐观锁的实现方式</strong>：</p><p><strong>1、</strong> 使用版本标识来确定读到的数据与提交时的数据是否一致。提交后修改版本标识，不一致时可以采取丢弃和再次尝试的策略。</p><p><strong>2、</strong> java中的Compare and Swap即CAS ，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。　CAS 操作中包含三个操作数 —— 需要读写的内存位置（V）、进行比较的预期原值（A）和拟写入的新值(B)。如果内存位置V的值与预期原值A相匹配，那么处理器会自动将该位置值更新为新值B。否则处理器不做任何操作。</p><p><strong>CAS缺点</strong>：</p><p><strong>1、</strong> <strong>ABA问题</strong>：</p><p>比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但可能存在潜藏的问题。从Java1.5开始JDK的atomic包里提供了一个类AtomicStampedReference来解决ABA问题。</p><p><strong>2、</strong> <strong>循环时间长开销大</strong>：</p><p>对于资源竞争严重（线程冲突严重）的情况，CAS自旋的概率会比较大，从而浪费更多的CPU资源，效率低于synchronized。</p><p><strong>3、</strong> <strong>只能保证一个共享变量的原子操作</strong>：</p><p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p><h3 id="_2、java-中会存在内存泄漏-简述一下" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2java-%E4%B8%AD%E4%BC%9A%E5%AD%98%E5%9C%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%AE%80%E8%BF%B0%E4%B8%80%E4%B8%8B" target="_blank" rel="noreferrer">2、Java 中会存在内存泄漏?简述一下</a> <a class="header-anchor" href="#_2、java-中会存在内存泄漏-简述一下" aria-label="Permalink to &quot;[2、Java 中会存在内存泄漏?简述一下](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#2java-中会存在内存泄漏简述一下)&quot;">​</a></h3><p>所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。Java 中有垃圾回收机制，它可以保证一对象不再被引用的时候，即对象变成了孤儿的时候，对象将自动被垃圾回收器从内存中清除掉。由于 Java 使用有向图的方式进行垃圾回收管理，可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么 GC 也是可以回收它们的，例如下面的代码可以看到这种情况的内存回收：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">import java.io.IOException;</span></span>
<span class="line"><span style="color:#f6f6f4;">public class GarbageTest {</span></span>
<span class="line"><span style="color:#f6f6f4;">    /**</span></span>
<span class="line"><span style="color:#f6f6f4;">     * @param args</span></span>
<span class="line"><span style="color:#f6f6f4;">     * @throws IOException </span></span>
<span class="line"><span style="color:#f6f6f4;">     */</span></span>
<span class="line"><span style="color:#f6f6f4;">    public static void main(String[] args) throws IOException {</span></span>
<span class="line"><span style="color:#f6f6f4;">        // TODO Auto-generated method stub</span></span>
<span class="line"><span style="color:#f6f6f4;">        try {</span></span>
<span class="line"><span style="color:#f6f6f4;">            gcTest();</span></span>
<span class="line"><span style="color:#f6f6f4;">        } catch (IOException e) {</span></span>
<span class="line"><span style="color:#f6f6f4;">            // TODO Auto-generated catch block</span></span>
<span class="line"><span style="color:#f6f6f4;">            e.printStackTrace();</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;has exited gcTest!&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();       </span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;out begin gc!&quot;);        </span></span>
<span class="line"><span style="color:#f6f6f4;">        for(int i=0;i&lt;100;i++)</span></span>
<span class="line"><span style="color:#f6f6f4;">        {</span></span>
<span class="line"><span style="color:#f6f6f4;">            System.gc();</span></span>
<span class="line"><span style="color:#f6f6f4;">            System.in.read();   </span></span>
<span class="line"><span style="color:#f6f6f4;">            System.in.read();   </span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">    private static void gcTest() throws IOException {</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();       </span></span>
<span class="line"><span style="color:#f6f6f4;">        Person p1 = new Person();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();       </span></span>
<span class="line"><span style="color:#f6f6f4;">        Person p2 = new Person();</span></span>
<span class="line"><span style="color:#f6f6f4;">        p1.setMate(p2);</span></span>
<span class="line"><span style="color:#f6f6f4;">        p2.setMate(p1);</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;before exit gctest!&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.in.read();       </span></span>
<span class="line"><span style="color:#f6f6f4;">        System.gc();</span></span>
<span class="line"><span style="color:#f6f6f4;">        System.out.println(&quot;exit gctest!&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">    private static class Person</span></span>
<span class="line"><span style="color:#f6f6f4;">    {</span></span>
<span class="line"><span style="color:#f6f6f4;">        byte[] data = new byte[20000000];</span></span>
<span class="line"><span style="color:#f6f6f4;">        Person mate = null;</span></span>
<span class="line"><span style="color:#f6f6f4;">        public void setMate(Person other)</span></span>
<span class="line"><span style="color:#f6f6f4;">        {</span></span>
<span class="line"><span style="color:#f6f6f4;">            mate = other;</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import java.io.IOException;</span></span>
<span class="line"><span style="color:#24292e;">public class GarbageTest {</span></span>
<span class="line"><span style="color:#24292e;">    /**</span></span>
<span class="line"><span style="color:#24292e;">     * @param args</span></span>
<span class="line"><span style="color:#24292e;">     * @throws IOException </span></span>
<span class="line"><span style="color:#24292e;">     */</span></span>
<span class="line"><span style="color:#24292e;">    public static void main(String[] args) throws IOException {</span></span>
<span class="line"><span style="color:#24292e;">        // TODO Auto-generated method stub</span></span>
<span class="line"><span style="color:#24292e;">        try {</span></span>
<span class="line"><span style="color:#24292e;">            gcTest();</span></span>
<span class="line"><span style="color:#24292e;">        } catch (IOException e) {</span></span>
<span class="line"><span style="color:#24292e;">            // TODO Auto-generated catch block</span></span>
<span class="line"><span style="color:#24292e;">            e.printStackTrace();</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;has exited gcTest!&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();       </span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;out begin gc!&quot;);        </span></span>
<span class="line"><span style="color:#24292e;">        for(int i=0;i&lt;100;i++)</span></span>
<span class="line"><span style="color:#24292e;">        {</span></span>
<span class="line"><span style="color:#24292e;">            System.gc();</span></span>
<span class="line"><span style="color:#24292e;">            System.in.read();   </span></span>
<span class="line"><span style="color:#24292e;">            System.in.read();   </span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    private static void gcTest() throws IOException {</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();       </span></span>
<span class="line"><span style="color:#24292e;">        Person p1 = new Person();</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();       </span></span>
<span class="line"><span style="color:#24292e;">        Person p2 = new Person();</span></span>
<span class="line"><span style="color:#24292e;">        p1.setMate(p2);</span></span>
<span class="line"><span style="color:#24292e;">        p2.setMate(p1);</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;before exit gctest!&quot;);</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();</span></span>
<span class="line"><span style="color:#24292e;">        System.in.read();       </span></span>
<span class="line"><span style="color:#24292e;">        System.gc();</span></span>
<span class="line"><span style="color:#24292e;">        System.out.println(&quot;exit gctest!&quot;);</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">    private static class Person</span></span>
<span class="line"><span style="color:#24292e;">    {</span></span>
<span class="line"><span style="color:#24292e;">        byte[] data = new byte[20000000];</span></span>
<span class="line"><span style="color:#24292e;">        Person mate = null;</span></span>
<span class="line"><span style="color:#24292e;">        public void setMate(Person other)</span></span>
<span class="line"><span style="color:#24292e;">        {</span></span>
<span class="line"><span style="color:#24292e;">            mate = other;</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>Java 中的内存泄露的情况：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是 Java 中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是 java 中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中 (例如放在一个全局 map 对象中)，然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。</p><p>检查 Java 中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。</p><p>如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露。</p><p>下面内容来自于网上（主要特点就是清空堆栈中的某个元素，并不是彻底把它从数组中拿掉，而是把存储的总数减少，本人写得可以比这个好，在拿掉某个元素时，顺便也让它从数组中消失，将那个元素所在的位置的值设置为 null 即可）：</p><p>我实在想不到比那个堆栈更经典的例子了，以致于我还要引用别人的例子，下面的例子不是我想到的，是书上看到的，当然如果没有在书上看到，可能过一段时间我自己也想的到，可是那时我说是我自己想到的也没有人相信的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class Stack {</span></span>
<span class="line"><span style="color:#f6f6f4;">    private Object[] elements=new Object[10];</span></span>
<span class="line"><span style="color:#f6f6f4;">    private int size = 0;</span></span>
<span class="line"><span style="color:#f6f6f4;">    public void push(Object e){</span></span>
<span class="line"><span style="color:#f6f6f4;">        ensureCapacity();</span></span>
<span class="line"><span style="color:#f6f6f4;">        elements[size++] = e;</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    public Object pop(){</span></span>
<span class="line"><span style="color:#f6f6f4;">        if( size == 0) throw new EmptyStackException();</span></span>
<span class="line"><span style="color:#f6f6f4;">        return elements[--size];</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">    private void ensureCapacity(){</span></span>
<span class="line"><span style="color:#f6f6f4;">        if(elements.length == size){</span></span>
<span class="line"><span style="color:#f6f6f4;">            Object[] oldElements = elements;</span></span>
<span class="line"><span style="color:#f6f6f4;">            elements = new Object[2 * elements.length+1];</span></span>
<span class="line"><span style="color:#f6f6f4;">            System.arraycopy(oldElements,0, elements, 0, size);</span></span>
<span class="line"><span style="color:#f6f6f4;">            }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class Stack {</span></span>
<span class="line"><span style="color:#24292e;">    private Object[] elements=new Object[10];</span></span>
<span class="line"><span style="color:#24292e;">    private int size = 0;</span></span>
<span class="line"><span style="color:#24292e;">    public void push(Object e){</span></span>
<span class="line"><span style="color:#24292e;">        ensureCapacity();</span></span>
<span class="line"><span style="color:#24292e;">        elements[size++] = e;</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    public Object pop(){</span></span>
<span class="line"><span style="color:#24292e;">        if( size == 0) throw new EmptyStackException();</span></span>
<span class="line"><span style="color:#24292e;">        return elements[--size];</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">    private void ensureCapacity(){</span></span>
<span class="line"><span style="color:#24292e;">        if(elements.length == size){</span></span>
<span class="line"><span style="color:#24292e;">            Object[] oldElements = elements;</span></span>
<span class="line"><span style="color:#24292e;">            elements = new Object[2 * elements.length+1];</span></span>
<span class="line"><span style="color:#24292e;">            System.arraycopy(oldElements,0, elements, 0, size);</span></span>
<span class="line"><span style="color:#24292e;">            }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>上面的原理应该很简单，假如堆栈加了 10 个元素，然后全部弹出来，虽然堆栈是空的，没有我们要的东西，但是这是个对象是无法回收的，这个才符合了内存泄露的两个条件：无用，无法回收。但是就是存在这样的东西也不一定会导致什么样的后果，如果这个堆栈用的比较少，也就浪费了几个K内存而已，反正我们的内存都上 G 了，哪里会有什么影响，再说这个东西很快就会被回收的，有什么关系。下面看两个例子。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">public class Bad{</span></span>
<span class="line"><span style="color:#f6f6f4;">    public static Stack s=Stack();</span></span>
<span class="line"><span style="color:#f6f6f4;">    static{</span></span>
<span class="line"><span style="color:#f6f6f4;">        s.push(new Object());</span></span>
<span class="line"><span style="color:#f6f6f4;">        s.pop(); //这里有一个对象发生内存泄露</span></span>
<span class="line"><span style="color:#f6f6f4;">        s.push(new Object()); //上面的对象可以被回收了，等于是自愈了</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">public class Bad{</span></span>
<span class="line"><span style="color:#24292e;">    public static Stack s=Stack();</span></span>
<span class="line"><span style="color:#24292e;">    static{</span></span>
<span class="line"><span style="color:#24292e;">        s.push(new Object());</span></span>
<span class="line"><span style="color:#24292e;">        s.pop(); //这里有一个对象发生内存泄露</span></span>
<span class="line"><span style="color:#24292e;">        s.push(new Object()); //上面的对象可以被回收了，等于是自愈了</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>因为是 static，就一直存在到程序退出，但是我们也可以看到它有自愈功能，就是说如果你的 Stack 最多有 100 个对象，那么最多也就只有 100 个对象无法被回收其实这个应该很容易理解，Stack 内部持有 100 个引用，最坏的情况就是他们都是无用的，因为我们一旦放新的进取，以前的引用自然消失！</p><p>内存泄露的另外一种情况：当一个对象被存储进 HashSet 集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了，否则，对象修改后的哈希值与最初存储进 HashSet 集合中时的哈希值就不同了，在这种情况下，即使在 contains 方法使用该对象的当前引用作为的参数去 HashSet 集合中检索对象，也将返回找不到对象的结果，这也会导致无法从 HashSet 集合中单独删除当前对象，造成内存泄露。</p><h3 id="_3、新生代与复制算法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E6%96%B0%E7%94%9F%E4%BB%A3%E4%B8%8E%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95" target="_blank" rel="noreferrer">3、新生代与复制算法</a> <a class="header-anchor" href="#_3、新生代与复制算法" aria-label="Permalink to &quot;[3、新生代与复制算法](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#3新生代与复制算法)&quot;">​</a></h3><p>目前大部分 JVM 的 GC 对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中。</p><h3 id="_4、垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E5%8F%AF%E4%BB%A5%E9%A9%AC%E4%B8%8A%E5%9B%9E%E6%94%B6%E5%86%85%E5%AD%98%E5%90%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%8A%9E%E6%B3%95%E4%B8%BB%E5%8A%A8%E9%80%9A%E7%9F%A5%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9B%E8%A1%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6" target="_blank" rel="noreferrer">4、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</a> <a class="header-anchor" href="#_4、垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收" aria-label="Permalink to &quot;[4、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#4垃圾回收器的基本原理是什么垃圾回收器可以马上回收内存吗有什么办法主动通知虚拟机进行垃圾回收)&quot;">​</a></h3><p>对于 GC 来说，当程序员创建对象时，GC 就开始监控这个对象的地址、大小以及使用情况。通常，GC 采用有向图的方式记录和管理堆（heap）中的所有对象。通过这种方式确定哪些对象是”可达的”，哪些对象是”不可达的”。当 GC 确定一些对象为“不可达”时，GC 就有责任回收这些内存空间。可以。程序员可以手动执行 System.gc()，通知 GC 运行，但是 Java 语言规范并不保证 GC 一定会执行。</p><h3 id="_5、volatile-关键字的作用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5volatile-%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">5、volatile 关键字的作用</a> <a class="header-anchor" href="#_5、volatile-关键字的作用" aria-label="Permalink to &quot;[5、volatile 关键字的作用](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#5volatile-关键字的作用)&quot;">​</a></h3><p><strong>1、</strong> 对于可见性，Java 提供了 volatile 关键字来保证可见性和禁止指令重排。 volatile 提供 happens-before 的保证，确保一个线程的修改能对其他线程是可见的。当一个共享变量被 volatile修饰时，它会保证修改的值会立即被更新到主内存中，当有其他线程需要读取时，它会去内存中读取新值。</p><p><strong>2、</strong> 从实践角度而言，volatile 的一个重要作用就是和 CAS 结合，保证了原子性，详细的可以参见 java.util.concurrent.atomic 包下的类，比如 AtomicInteger。</p><p><strong>3、</strong> volatile 常用于多线程环境下的单次操作(单次读或者单次写)。</p><h3 id="_6、什么时候会造成堆外内存溢出" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E9%80%A0%E6%88%90%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA" target="_blank" rel="noreferrer">6、什么时候会造成堆外内存溢出？</a> <a class="header-anchor" href="#_6、什么时候会造成堆外内存溢出" aria-label="Permalink to &quot;[6、什么时候会造成堆外内存溢出？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#6什么时候会造成堆外内存溢出)&quot;">​</a></h3><p>使用了Unsafe类申请内存，或者使用了JNI对内存进行操作。这部分内存是不受JVM控制的，不加限制的使用，容易发生内存溢出。</p><h3 id="_7、双亲委派" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE" target="_blank" rel="noreferrer">7、双亲委派</a> <a class="header-anchor" href="#_7、双亲委派" aria-label="Permalink to &quot;[7、双亲委派](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#7双亲委派)&quot;">​</a></h3><p>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class）， 子类加载器才会尝试自己去加载。</p><p>采用双亲委派的一个好处是比如加载位于 rt.jar 包中的类 java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个 Object 对象</p><h3 id="_8、你能保证-gc-执行吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E4%BD%A0%E8%83%BD%E4%BF%9D%E8%AF%81-gc-%E6%89%A7%E8%A1%8C%E5%90%97" target="_blank" rel="noreferrer">8、你能保证 GC 执行吗？</a> <a class="header-anchor" href="#_8、你能保证-gc-执行吗" aria-label="Permalink to &quot;[8、你能保证 GC 执行吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#8你能保证-gc-执行吗)&quot;">​</a></h3><p>不能，虽然你可以调用 System.gc() 或者 Runtime.gc()，但是没有办法保证 GC的执行。</p><h3 id="_9、说说g1垃圾收集器的工作原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9%E8%AF%B4%E8%AF%B4g1%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">9、说说G1垃圾收集器的工作原理</a> <a class="header-anchor" href="#_9、说说g1垃圾收集器的工作原理" aria-label="Permalink to &quot;[9、说说G1垃圾收集器的工作原理](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#9说说g1垃圾收集器的工作原理)&quot;">​</a></h3><p>优点：指定最大停顿时间、分Region的内存布局、按收益动态确定回收集</p><p><strong>1、</strong> G1开创的基于Region的堆内存布局是它能够实现这个目标的关键。虽然G1也仍是遵循分代收集理论设计的，但其堆内存的布局与其他收集器有非常明显的差异：G1不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。</p><p><strong>2、</strong> 虽然G1仍然保留新生代和老年代的概念，但新生代和老年代不再是固定的了，它们都是一系列区域（不需要连续）的动态集合。G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（使用参数-XX：MaxGCPauseMillis指定，默认值是200毫秒），优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。</p><p><strong>3、</strong> G1收集器的运作过程大致可划分为以下四个步骤：·初始标记 （Initial Marking）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。·并发标记 （Concurrent Marking）：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。·最终标记 （Final Marking）：对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。·筛选回收 （Live Data Counting and Evacuation）：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。从上述阶段的描述可以看出，G1收集器除了并发标记外，其余阶段也是要完全暂停用户线程的 。</p><h3 id="_10、并行和并发有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10%E5%B9%B6%E8%A1%8C%E5%92%8C%E5%B9%B6%E5%8F%91%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">10、并行和并发有什么区别？</a> <a class="header-anchor" href="#_10、并行和并发有什么区别" aria-label="Permalink to &quot;[10、并行和并发有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程高级面试题合集，附答案解析.md#10并行和并发有什么区别)&quot;">​</a></h3><p><strong>1、</strong> 并发：多个任务在同一个 CPU 核上，按细分的时间片轮流(交替)执行，从逻辑上来看那些任务是同时执行。</p><p><strong>2、</strong> 并行：单位时间内，多个处理器或多核处理器同时处理多个任务，是真正意义上的“同时进行”。</p><p><strong>3、</strong> 串行：有n个任务，由一个线程按顺序执行。由于任务、方法都在一个线程执行所以不存在线程不安全情况，也就不存在临界区的问题。</p><p><strong>做一个形象的比喻：</strong></p><p><strong>1、</strong> 并发 = 俩个人用一台电脑。</p><p><strong>2、</strong> 并行 = 俩个人分配了俩台电脑。</p><p><strong>3、</strong> 串行 = 俩个人排队使用一台电脑。</p><h3 id="_11、直接内存是什么" tabindex="-1">11、直接内存是什么？ <a class="header-anchor" href="#_11、直接内存是什么" aria-label="Permalink to &quot;11、直接内存是什么？&quot;">​</a></h3><h3 id="_12、java-强引用" tabindex="-1">12、JAVA 强引用 <a class="header-anchor" href="#_12、java-强引用" aria-label="Permalink to &quot;12、JAVA 强引用&quot;">​</a></h3><h3 id="_13、什么是java虚拟机-为什么java被称作是-平台无关的编程语言" tabindex="-1">13、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？ <a class="header-anchor" href="#_13、什么是java虚拟机-为什么java被称作是-平台无关的编程语言" aria-label="Permalink to &quot;13、什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&quot;">​</a></h3><h3 id="_14、g1-收集器" tabindex="-1">14、G1 收集器 <a class="header-anchor" href="#_14、g1-收集器" aria-label="Permalink to &quot;14、G1 收集器&quot;">​</a></h3><h3 id="_15、原子类的常用类" tabindex="-1">15、原子类的常用类 <a class="header-anchor" href="#_15、原子类的常用类" aria-label="Permalink to &quot;15、原子类的常用类&quot;">​</a></h3><h3 id="_16、volatile-变量和-atomic-变量有什么不同" tabindex="-1">16、volatile 变量和 atomic 变量有什么不同？ <a class="header-anchor" href="#_16、volatile-变量和-atomic-变量有什么不同" aria-label="Permalink to &quot;16、volatile 变量和 atomic 变量有什么不同？&quot;">​</a></h3><h3 id="_17、栈帧都有哪些数据" tabindex="-1">17、栈帧都有哪些数据？ <a class="header-anchor" href="#_17、栈帧都有哪些数据" aria-label="Permalink to &quot;17、栈帧都有哪些数据？&quot;">​</a></h3><h3 id="_18、你如何在java中获取线程堆栈" tabindex="-1">18、你如何在Java中获取线程堆栈？ <a class="header-anchor" href="#_18、你如何在java中获取线程堆栈" aria-label="Permalink to &quot;18、你如何在Java中获取线程堆栈？&quot;">​</a></h3><h3 id="_19、如何创建守护线程" tabindex="-1">19、如何创建守护线程？ <a class="header-anchor" href="#_19、如何创建守护线程" aria-label="Permalink to &quot;19、如何创建守护线程？&quot;">​</a></h3><h3 id="_20、gc日志的real、user、sys是什么意思" tabindex="-1">20、GC日志的real、user、sys是什么意思？ <a class="header-anchor" href="#_20、gc日志的real、user、sys是什么意思" aria-label="Permalink to &quot;20、GC日志的real、user、sys是什么意思？&quot;">​</a></h3><h3 id="_21、java中会存在内存泄漏吗-请简单描述。" tabindex="-1">21、java中会存在内存泄漏吗，请简单描述。 <a class="header-anchor" href="#_21、java中会存在内存泄漏吗-请简单描述。" aria-label="Permalink to &quot;21、java中会存在内存泄漏吗，请简单描述。&quot;">​</a></h3><h3 id="_22、newsinglethreadexecutor" tabindex="-1">22、newSingleThreadExecutor <a class="header-anchor" href="#_22、newsinglethreadexecutor" aria-label="Permalink to &quot;22、newSingleThreadExecutor&quot;">​</a></h3><h3 id="_23、虚拟机栈-线程私有" tabindex="-1">23、虚拟机栈(线程私有) <a class="header-anchor" href="#_23、虚拟机栈-线程私有" aria-label="Permalink to &quot;23、虚拟机栈(线程私有)&quot;">​</a></h3><h3 id="_24、32-位和-64-位的-jvm-int-类型变量的长度是多数" tabindex="-1">24、32 位和 64 位的 JVM，int 类型变量的长度是多数？ <a class="header-anchor" href="#_24、32-位和-64-位的-jvm-int-类型变量的长度是多数" aria-label="Permalink to &quot;24、32 位和 64 位的 JVM，int 类型变量的长度是多数？&quot;">​</a></h3><h3 id="_25、生产环境服务器变慢-如何诊断处理" tabindex="-1">25、生产环境服务器变慢，如何诊断处理？ <a class="header-anchor" href="#_25、生产环境服务器变慢-如何诊断处理" aria-label="Permalink to &quot;25、生产环境服务器变慢，如何诊断处理？&quot;">​</a></h3><h3 id="_26、谈谈jvm中-对类加载器的认识" tabindex="-1">26、谈谈JVM中，对类加载器的认识 <a class="header-anchor" href="#_26、谈谈jvm中-对类加载器的认识" aria-label="Permalink to &quot;26、谈谈JVM中，对类加载器的认识&quot;">​</a></h3><h3 id="_27、jvm-有哪些运行时内存区域" tabindex="-1">27、JVM 有哪些运行时内存区域？ <a class="header-anchor" href="#_27、jvm-有哪些运行时内存区域" aria-label="Permalink to &quot;27、JVM 有哪些运行时内存区域？&quot;">​</a></h3><h3 id="_28、如何确保线程安全" tabindex="-1">28、如何确保线程安全？ <a class="header-anchor" href="#_28、如何确保线程安全" aria-label="Permalink to &quot;28、如何确保线程安全？&quot;">​</a></h3><h3 id="_29、多线程的常用方法" tabindex="-1">29、多线程的常用方法 <a class="header-anchor" href="#_29、多线程的常用方法" aria-label="Permalink to &quot;29、多线程的常用方法&quot;">​</a></h3><h3 id="_30、什么是线程同步和线程互斥-有哪几种实现方式" tabindex="-1">30、什么是线程同步和线程互斥，有哪几种实现方式？ <a class="header-anchor" href="#_30、什么是线程同步和线程互斥-有哪几种实现方式" aria-label="Permalink to &quot;30、什么是线程同步和线程互斥，有哪几种实现方式？&quot;">​</a></h3><h3 id="_31、哪些是-gc-roots" tabindex="-1">31、哪些是 GC Roots？ <a class="header-anchor" href="#_31、哪些是-gc-roots" aria-label="Permalink to &quot;31、哪些是 GC Roots？&quot;">​</a></h3>`,77),o=[p];function t(r,c,i,E,f,h){return a(),n("div",null,o)}const B=s(l,[["render",t]]);export{y as __pageData,B as default};
