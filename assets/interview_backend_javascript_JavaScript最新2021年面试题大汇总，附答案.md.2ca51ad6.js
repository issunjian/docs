import{_ as a,o as e,c as o,V as s}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/javascript/JavaScript最新2021年面试题大汇总，附答案.md","filePath":"interview/backend/javascript/JavaScript最新2021年面试题大汇总，附答案.md"}'),n={name:"interview/backend/javascript/JavaScript最新2021年面试题大汇总，附答案.md"},t=s(`<h3 id="_1、为什么在-js-中比较两个相似的对象时返回-false" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-js-%E4%B8%AD%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E7%9B%B8%E4%BC%BC%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%97%B6%E8%BF%94%E5%9B%9E-false" target="_blank" rel="noreferrer">1、为什么在 JS 中比较两个相似的对象时返回 false？</a> <a class="header-anchor" href="#_1、为什么在-js-中比较两个相似的对象时返回-false" aria-label="Permalink to &quot;[1、为什么在 JS 中比较两个相似的对象时返回 false？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#1为什么在-js-中比较两个相似的对象时返回-false)&quot;">​</a></h3><p>先看下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">let a = { a: 1 };</span></span>
<span class="line"><span style="color:#f6f6f4;">let b = { a: 1 };</span></span>
<span class="line"><span style="color:#f6f6f4;">let c = a;</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(a === b); // 打印 false，即使它们有相同的属性</span></span>
<span class="line"><span style="color:#f6f6f4;">console.log(a === c); // true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">let a = { a: 1 };</span></span>
<span class="line"><span style="color:#24292e;">let b = { a: 1 };</span></span>
<span class="line"><span style="color:#24292e;">let c = a;</span></span>
<span class="line"><span style="color:#24292e;">console.log(a === b); // 打印 false，即使它们有相同的属性</span></span>
<span class="line"><span style="color:#24292e;">console.log(a === c); // true</span></span></code></pre></div><p>JS 以不同的方式比较对象和基本类型。在基本类型中，JS 通过值对它们进行比较，而在对象中，JS 通过引用或存储变量的内存中的地址对它们进行比较。这就是为什么第一个<code>console.log</code>语句返回<code>false</code>，而第二个<code>console.log</code>语句返回<code>true</code>。<code>a</code>和<code>c</code>有相同的引用地址，而<code>a</code>和<code>b</code>没有。</p><h3 id="_2、函数表达式和函数声明之间有什么区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、函数表达式和函数声明之间有什么区别？</a> <a class="header-anchor" href="#_2、函数表达式和函数声明之间有什么区别" aria-label="Permalink to &quot;[2、函数表达式和函数声明之间有什么区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#2函数表达式和函数声明之间有什么区别)&quot;">​</a></h3><p>看下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">hoistedFunc();</span></span>
<span class="line"><span style="color:#f6f6f4;">notHoistedFunc();</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">function hoistedFunc(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  console.log(&quot;注意：我会被提升&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">var notHoistedFunc = function(){</span></span>
<span class="line"><span style="color:#f6f6f4;">  console.log(&quot;注意：我没有被提升&quot;);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">hoistedFunc();</span></span>
<span class="line"><span style="color:#24292e;">notHoistedFunc();</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">function hoistedFunc(){</span></span>
<span class="line"><span style="color:#24292e;">  console.log(&quot;注意：我会被提升&quot;);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">var notHoistedFunc = function(){</span></span>
<span class="line"><span style="color:#24292e;">  console.log(&quot;注意：我没有被提升&quot;);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p><code>notHoistedFunc</code>调用抛出异常：<code>Uncaught TypeError: notHoistedFunc is not a function</code>，而<code>hoistedFunc</code>调用不会，因为<code>hoistedFunc</code>会被提升到作用域的顶部，而<code>notHoistedFunc</code> 不会。</p><h3 id="_3、常见web安全及防护原理" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3%E5%B8%B8%E8%A7%81web%E5%AE%89%E5%85%A8%E5%8F%8A%E9%98%B2%E6%8A%A4%E5%8E%9F%E7%90%86" target="_blank" rel="noreferrer">3、常见web安全及防护原理</a> <a class="header-anchor" href="#_3、常见web安全及防护原理" aria-label="Permalink to &quot;[3、常见web安全及防护原理](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#3常见web安全及防护原理)&quot;">​</a></h3><p><strong><code>sql</code>注入原理</strong></p><p>就是通过把<code>SQL</code>命令插入到<code>Web</code>表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</p><p><strong>总的来说有以下几点</strong></p><p>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双<code>&quot;-&quot;</code>进行转换等</p><p><strong>1、</strong> 永远不要使用动态拼装SQL，可以使用参数化的<code>SQL</code>或者直接使用存储过程进行数据查询存取</p><p><strong>2、</strong> 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</p><p><strong>3、</strong> 不要把机密信息明文存放，请加密或者<code>hash</code>掉密码和敏感的信息</p><p><strong>XSS原理及防范</strong></p><p><code>Xss(cross-site scripting)</code>攻击指的是攻击者往<code>Web</code>页面里插入恶意<code>html</code>标签或者<code>javascript</code>代码。</p><p><strong>比如：</strong></p><p>攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取<code>cookie</code>中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点</p><p><strong>XSS防范方法</strong></p><p>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>”&lt;”,”&gt;”,”;”,”’”</code>等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把<code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击</p><p><strong>XSS与CSRF有什么区别吗？</strong></p><p><strong>1、</strong> <code>XSS</code>是获取信息，不需要提前知道其他用户页面的代码和数据包。<code>CSRF</code>是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次<code>CSRF</code>攻击，受害者必须依次完成两个步骤</p><p><strong>2、</strong> 登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code></p><p><strong>3、</strong> 在不登出<code>A</code>的情况下，访问危险网站<code>B</code></p><p><strong>CSRF的防御</strong></p><p>服务端的<code>CSRF</code>方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数</p><p>通过验证码的方法</p><h3 id="_4、有哪些数据类型" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noreferrer">4、有哪些数据类型？</a> <a class="header-anchor" href="#_4、有哪些数据类型" aria-label="Permalink to &quot;[4、有哪些数据类型？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#4有哪些数据类型)&quot;">​</a></h3><p>根据 JavaScript 中的变量类型传递方式，分为基本数据类型和引用数据类型两大类七种。</p><p>基本数据类型包括Undefined、Null、Boolean、Number、String、Symbol (ES6新增)六种。 引用数据类型只有Object一种，主要包括对象、数组和函数。</p><p><strong>判断数据类型采用<code>typeof</code>操作符，有两种语法：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">typeof 123;//语法一</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">const FG = 123;</span></span>
<span class="line"><span style="color:#f6f6f4;">typeof FG;//语法二</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">typeof(null) //返回 object;</span></span>
<span class="line"><span style="color:#f6f6f4;">null == undefined //返回true，因为undefined派生自null;</span></span>
<span class="line"><span style="color:#f6f6f4;">null === undefined //返回false。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">typeof 123;//语法一</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const FG = 123;</span></span>
<span class="line"><span style="color:#24292e;">typeof FG;//语法二</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">typeof(null) //返回 object;</span></span>
<span class="line"><span style="color:#24292e;">null == undefined //返回true，因为undefined派生自null;</span></span>
<span class="line"><span style="color:#24292e;">null === undefined //返回false。</span></span></code></pre></div><h3 id="_5、简述一下你理解的面向对象" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5%E7%AE%80%E8%BF%B0%E4%B8%80%E4%B8%8B%E4%BD%A0%E7%90%86%E8%A7%A3%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">5、简述一下你理解的面向对象？</a> <a class="header-anchor" href="#_5、简述一下你理解的面向对象" aria-label="Permalink to &quot;[5、简述一下你理解的面向对象？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#5简述一下你理解的面向对象)&quot;">​</a></h3><p>面向对象是基于万物皆对象这个哲学观点、把一个对象抽象成类,具体上就是把一个对象的静态特征和动态特征抽象成属性和方法,也就是把一类事物的算法和数据结构封装在一个类之中,程序就是多个对象和互相之间的通信组成的、</p><p>面向对象具有封装性,继承性,多态性。</p><p>封装:隐蔽了对象内部不需要暴露的细节,使得内部细节的变动跟外界脱离,只依靠接口进行通信.封装性降低了编程的复杂性、通过继承,使得新建一个类变得容易,一个类从派生类那里获得其非私有的方法和公用属性的繁琐工作交给了编译器、而 继承和实现接口和运行时的类型绑定机制 所产生的多态,使得不同的类所产生的对象能够对相同的消息作出不同的反应,极大地提高了代码的通用性、</p><p>总之,面向对象的特性提高了大型程序的重用性和可维护性.</p><h3 id="_6、如何清除一个定时器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4%E4%B8%80%E4%B8%AA%E5%AE%9A%E6%97%B6%E5%99%A8" target="_blank" rel="noreferrer">6、如何清除一个定时器?</a> <a class="header-anchor" href="#_6、如何清除一个定时器" aria-label="Permalink to &quot;[6、如何清除一个定时器?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#6如何清除一个定时器)&quot;">​</a></h3><p>window.clearInterval();</p><p>window.clearTimeout();</p><h3 id="_7、gc机制是什么-为什么闭包不会被回收变量和函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7gc%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88%E4%B8%BA%E4%BB%80%E4%B9%88%E9%97%AD%E5%8C%85%E4%B8%8D%E4%BC%9A%E8%A2%AB%E5%9B%9E%E6%94%B6%E5%8F%98%E9%87%8F%E5%92%8C%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">7、Gc机制是什么？为什么闭包不会被回收变量和函数？</a> <a class="header-anchor" href="#_7、gc机制是什么-为什么闭包不会被回收变量和函数" aria-label="Permalink to &quot;[7、Gc机制是什么？为什么闭包不会被回收变量和函数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#7gc机制是什么为什么闭包不会被回收变量和函数)&quot;">​</a></h3><p><strong>1、</strong> Gc垃圾回收机制;</p><p><strong>2、</strong> 外部变量没释放，所以指向的大函数内的小函数也释放不了</p><h3 id="_8、为什么此代码-obj-someprop-x-会引发错误" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AD%A4%E4%BB%A3%E7%A0%81-objsomepropx-%E4%BC%9A%E5%BC%95%E5%8F%91%E9%94%99%E8%AF%AF" target="_blank" rel="noreferrer">8、为什么此代码 <code>obj.someprop.x</code> 会引发错误?</a> <a class="header-anchor" href="#_8、为什么此代码-obj-someprop-x-会引发错误" aria-label="Permalink to &quot;[8、为什么此代码 \`obj.someprop.x\` 会引发错误?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#8为什么此代码-objsomepropx-会引发错误)&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const obj = {};console.log(obj.someprop.x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const obj = {};console.log(obj.someprop.x);</span></span></code></pre></div><p>显然，由于我们尝试访问<code>someprop</code>属性中的<code>x</code>属性，而 someprop 并没有在对象中，所以值为 <code>undefined</code>。记住对象本身不存在的属性，并且其原型的默认值为<code>undefined</code>。因为<code>undefined</code>没有属性<code>x</code>，所以试图访问将会报错。</p><h3 id="_9、说几条写javascript的基本规范" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9%E8%AF%B4%E5%87%A0%E6%9D%A1%E5%86%99javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83" target="_blank" rel="noreferrer">9、说几条写JavaScript的基本规范？</a> <a class="header-anchor" href="#_9、说几条写javascript的基本规范" aria-label="Permalink to &quot;[9、说几条写JavaScript的基本规范？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#9说几条写javascript的基本规范)&quot;">​</a></h3><p><strong>1、</strong> 不要在同一行声明多个变量</p><p><strong>2、</strong> 请使用<code>===/!==</code>来比较<code>true/false</code>或者数值</p><p><strong>3、</strong> 使用对象字面量替代<code>new Array</code>这种形式</p><p><strong>4、</strong> 不要使用全局函数</p><p><strong>5、</strong> <code>Switch</code>语句必须带有<code>default</code>分支</p><p><strong>6、</strong> <code>If</code>语句必须使用大括号</p><p><strong>7、</strong> <code>for-in</code>循环中的变量 应该使用<code>var</code>关键字明确限定作用域，从而避免作用域污</p><h3 id="_10、javascript原型-原型链-有什么特点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10javascript%E5%8E%9F%E5%9E%8B%E5%8E%9F%E5%9E%8B%E9%93%BE--%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9" target="_blank" rel="noreferrer">10、JavaScript原型，原型链 ? 有什么特点？</a> <a class="header-anchor" href="#_10、javascript原型-原型链-有什么特点" aria-label="Permalink to &quot;[10、JavaScript原型，原型链 ? 有什么特点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题大汇总，附答案.md#10javascript原型原型链--有什么特点)&quot;">​</a></h3><p>在JavaScript中,一共有两种类型的值,原始值和对象值.每个对象都有一个内部属性[[prototype]],我们通常称之为原型.原型的值可以是一个对象,也可以是null.如果它的值是一个对象,则这个对象也一定有自己的原型.这样就形成了一条线性的链,我们称之为原型链、</p><p>访问一个对象的原型可以使用ES5中的Object.getPrototypeOf方法,或者ES6中的__proto__属性、原型链的作用是用来实现继承,比如我们新建一个数组,数组的方法就是从数组的原型上继承而来的。</p><h3 id="_11、offsetwidth-offsetheight-clientwidth-clientheight与scrollwidth-scrollheight的区别" tabindex="-1">11、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别 <a class="header-anchor" href="#_11、offsetwidth-offsetheight-clientwidth-clientheight与scrollwidth-scrollheight的区别" aria-label="Permalink to &quot;11、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别&quot;">​</a></h3><h3 id="_12、jsonp原理-缺点" tabindex="-1">12、jsonp原理？ 缺点? <a class="header-anchor" href="#_12、jsonp原理-缺点" aria-label="Permalink to &quot;12、jsonp原理？ 缺点?&quot;">​</a></h3><h3 id="_13、disabled-readyonly" tabindex="-1">13、disabled readyonly? <a class="header-anchor" href="#_13、disabled-readyonly" aria-label="Permalink to &quot;13、disabled readyonly?&quot;">​</a></h3><h3 id="_14、javascript-代码中的-use-strict-是什么意思-使用它区别是什么" tabindex="-1">14、javascript 代码中的&quot;use strict&quot;;是什么意思 ? 使用它区别是什么？ <a class="header-anchor" href="#_14、javascript-代码中的-use-strict-是什么意思-使用它区别是什么" aria-label="Permalink to &quot;14、javascript 代码中的&quot;use strict&quot;;是什么意思 ? 使用它区别是什么？&quot;">​</a></h3><h3 id="_15、xml和json的区别" tabindex="-1">15、XML和JSON的区别？ <a class="header-anchor" href="#_15、xml和json的区别" aria-label="Permalink to &quot;15、XML和JSON的区别？&quot;">​</a></h3><h3 id="_16、数据持久化技术-ajax-简述ajax流程" tabindex="-1">16、数据持久化技术(ajax)?简述ajax流程### <a class="header-anchor" href="#_16、数据持久化技术-ajax-简述ajax流程" aria-label="Permalink to &quot;16、数据持久化技术(ajax)?简述ajax流程###&quot;">​</a></h3><h3 id="_17、json-的了解" tabindex="-1">17、JSON 的了解？ <a class="header-anchor" href="#_17、json-的了解" aria-label="Permalink to &quot;17、JSON 的了解？&quot;">​</a></h3><h3 id="_18、ajax的缺点" tabindex="-1">18、ajax的缺点 <a class="header-anchor" href="#_18、ajax的缺点" aria-label="Permalink to &quot;18、ajax的缺点&quot;">​</a></h3><h3 id="_19、什么是作用域和作用域链" tabindex="-1">19、什么是作用域和作用域链？ <a class="header-anchor" href="#_19、什么是作用域和作用域链" aria-label="Permalink to &quot;19、什么是作用域和作用域链？&quot;">​</a></h3><h3 id="_20、-运算符能做什么" tabindex="-1">20、&amp;&amp; 运算符能做什么 <a class="header-anchor" href="#_20、-运算符能做什么" aria-label="Permalink to &quot;20、&amp;&amp; 运算符能做什么&quot;">​</a></h3><h3 id="_21、几种基本数据类型-复杂数据类型-值类型和引用数据类型-堆栈数据结构" tabindex="-1">21、几种基本数据类型?复杂数据类型?值类型和引用数据类型?堆栈数据结构 <a class="header-anchor" href="#_21、几种基本数据类型-复杂数据类型-值类型和引用数据类型-堆栈数据结构" aria-label="Permalink to &quot;21、几种基本数据类型?复杂数据类型?值类型和引用数据类型?堆栈数据结构&quot;">​</a></h3><h3 id="_22、什么是事件传播" tabindex="-1">22、什么是事件传播? <a class="header-anchor" href="#_22、什么是事件传播" aria-label="Permalink to &quot;22、什么是事件传播?&quot;">​</a></h3><h3 id="_23、window-onload-domcontentloaded" tabindex="-1">23、window.onload ==? DOMContentLoaded ? <a class="header-anchor" href="#_23、window-onload-domcontentloaded" aria-label="Permalink to &quot;23、window.onload ==? DOMContentLoaded ?&quot;">​</a></h3><h3 id="_24、什么是包装对象-wrapper-object" tabindex="-1">24、什么是包装对象（wrapper object）？ <a class="header-anchor" href="#_24、什么是包装对象-wrapper-object" aria-label="Permalink to &quot;24、什么是包装对象（wrapper object）？&quot;">​</a></h3><h3 id="_25、dom-是什么" tabindex="-1">25、DOM 是什么？ <a class="header-anchor" href="#_25、dom-是什么" aria-label="Permalink to &quot;25、DOM 是什么？&quot;">​</a></h3><h3 id="_26、谈谈你对webpack的看法" tabindex="-1">26、谈谈你对webpack的看法 <a class="header-anchor" href="#_26、谈谈你对webpack的看法" aria-label="Permalink to &quot;26、谈谈你对webpack的看法&quot;">​</a></h3><h3 id="_27、json-的了解" tabindex="-1">27、JSON 的了解？** <a class="header-anchor" href="#_27、json-的了解" aria-label="Permalink to &quot;27、JSON 的了解？**&quot;">​</a></h3><h3 id="_28、何为防抖和节流-如何实现" tabindex="-1">28、何为防抖和节流？如何实现？ <a class="header-anchor" href="#_28、何为防抖和节流-如何实现" aria-label="Permalink to &quot;28、何为防抖和节流？如何实现？&quot;">​</a></h3><h3 id="_29、在jq中-mouseover-mouseenter-mouseout-mouseleave-和-hover有什么关联" tabindex="-1">29、在jq中 mouseover mouseenter mouseout mouseleave 和 hover有什么关联? <a class="header-anchor" href="#_29、在jq中-mouseover-mouseenter-mouseout-mouseleave-和-hover有什么关联" aria-label="Permalink to &quot;29、在jq中 mouseover mouseenter mouseout mouseleave 和 hover有什么关联?&quot;">​</a></h3>`,78),c=[t];function l(r,p,i,d,E,h){return e(),o("div",null,c)}const B=a(n,[["render",l]]);export{f as __pageData,B as default};
