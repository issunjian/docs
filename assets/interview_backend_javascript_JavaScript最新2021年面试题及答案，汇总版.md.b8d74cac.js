import{_ as e,o as n,c as o,V as s,C as a,a as t}from"./chunks/framework.c6d8cbec.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/javascript/JavaScript最新2021年面试题及答案，汇总版.md","filePath":"interview/backend/javascript/JavaScript最新2021年面试题及答案，汇总版.md"}'),l={name:"interview/backend/javascript/JavaScript最新2021年面试题及答案，汇总版.md"},p=s(`<h3 id="_1、jq中有几种选择器-分别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1jq%E4%B8%AD%E6%9C%89%E5%87%A0%E7%A7%8D%E9%80%89%E6%8B%A9%E5%99%A8%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">1、Jq中有几种选择器?分别是什么?</a> <a class="header-anchor" href="#_1、jq中有几种选择器-分别是什么" aria-label="Permalink to &quot;[1、Jq中有几种选择器?分别是什么?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#1jq中有几种选择器分别是什么)&quot;">​</a></h3><p>层叠选择器、基本过滤选择器、内容过滤选择器、可视化过滤选择器、属性过滤选择器、子元素过滤选择器、表单元素选择器、表单元素过滤选择器</p><h3 id="_2、function-prototype-call-方法的用途是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2functionprototypecall-%E6%96%B9%E6%B3%95%E7%9A%84%E7%94%A8%E9%80%94%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">2、<code>Function.prototype.call</code> 方法的用途是什么？</a> <a class="header-anchor" href="#_2、function-prototype-call-方法的用途是什么" aria-label="Permalink to &quot;[2、\`Function.prototype.call\` 方法的用途是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#2functionprototypecall-方法的用途是什么)&quot;">​</a></h3><p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><p>\`const details = {</p><p>message: &#39;Hello World!&#39;</p><p>};</p><p>function getMessage(){</p><p>return this.message;</p><p>}</p><p>getMessage.call(details); // &#39;Hello World!&#39;</p><p>\`</p><p>注意：该方法的语法和作用与 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是一个参数列表，而 <code>apply()</code> 方法接受的是一个包含多个参数的数组。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const person = {</span></span>
<span class="line"><span style="color:#f6f6f4;">  name: &quot;Marko Polo&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">};</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">function greeting(greetingMessage) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return \`\${greetingMessage} \${this.name}\`;</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">greeting.call(person, &#39;Hello&#39;); // &quot;Hello Marko Polo!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const person = {</span></span>
<span class="line"><span style="color:#24292e;">  name: &quot;Marko Polo&quot;</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">function greeting(greetingMessage) {</span></span>
<span class="line"><span style="color:#24292e;">  return \`\${greetingMessage} \${this.name}\`;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">greeting.call(person, &#39;Hello&#39;); // &quot;Hello Marko Polo!&quot;</span></span></code></pre></div><h3 id="_3、什么是模板字符串" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3%E4%BB%80%E4%B9%88%E6%98%AF%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2" target="_blank" rel="noreferrer">3、什么是模板字符串？</a> <a class="header-anchor" href="#_3、什么是模板字符串" aria-label="Permalink to &quot;[3、什么是模板字符串？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#3什么是模板字符串)&quot;">​</a></h3><p>模板字符串是在 JS 中创建字符串的一种新方法。我们可以通过使用反引号使模板字符串化。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//ES5 Version</span></span>
<span class="line"><span style="color:#f6f6f4;">var greet = &#39;Hi I\\&#39;m Mark&#39;;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">//ES6 Version</span></span>
<span class="line"><span style="color:#f6f6f4;">let greet = \`Hi I&#39;m Mark\`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//ES5 Version</span></span>
<span class="line"><span style="color:#24292e;">var greet = &#39;Hi I\\&#39;m Mark&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//ES6 Version</span></span>
<span class="line"><span style="color:#24292e;">let greet = \`Hi I&#39;m Mark\`;</span></span></code></pre></div><p>在 ES5 中我们需要使用一些转义字符来达到多行的效果，在模板字符串不需要这么麻烦：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//ES5 Version</span></span>
<span class="line"><span style="color:#f6f6f4;">var lastWords = &#39;\\n&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">  + &#39;   I  \\n&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">  + &#39;   Am  \\n&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">  + &#39;Iron Man \\n&#39;;</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">//ES6 Version</span></span>
<span class="line"><span style="color:#f6f6f4;">let lastWords = \`</span></span>
<span class="line"><span style="color:#f6f6f4;">    I</span></span>
<span class="line"><span style="color:#f6f6f4;">    Am</span></span>
<span class="line"><span style="color:#f6f6f4;">  Iron Man   </span></span>
<span class="line"><span style="color:#f6f6f4;">\`;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//ES5 Version</span></span>
<span class="line"><span style="color:#24292e;">var lastWords = &#39;\\n&#39;</span></span>
<span class="line"><span style="color:#24292e;">  + &#39;   I  \\n&#39;</span></span>
<span class="line"><span style="color:#24292e;">  + &#39;   Am  \\n&#39;</span></span>
<span class="line"><span style="color:#24292e;">  + &#39;Iron Man \\n&#39;;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//ES6 Version</span></span>
<span class="line"><span style="color:#24292e;">let lastWords = \`</span></span>
<span class="line"><span style="color:#24292e;">    I</span></span>
<span class="line"><span style="color:#24292e;">    Am</span></span>
<span class="line"><span style="color:#24292e;">  Iron Man   </span></span>
<span class="line"><span style="color:#24292e;">\`;</span></span></code></pre></div><p>在ES5版本中，我们需要添加<code>\\n</code>以在字符串中添加新行。在模板字符串中，我们不需要这样做。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//ES5 Version</span></span>
<span class="line"><span style="color:#f6f6f4;">function greet(name) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return &#39;Hello &#39; + name + &#39;!&#39;;</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">//ES6 Version</span></span>
<span class="line"><span style="color:#f6f6f4;">function greet(name) {</span></span>
<span class="line"><span style="color:#f6f6f4;">  return \`Hello \${name} !\`;</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//ES5 Version</span></span>
<span class="line"><span style="color:#24292e;">function greet(name) {</span></span>
<span class="line"><span style="color:#24292e;">  return &#39;Hello &#39; + name + &#39;!&#39;;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">//ES6 Version</span></span>
<span class="line"><span style="color:#24292e;">function greet(name) {</span></span>
<span class="line"><span style="color:#24292e;">  return \`Hello \${name} !\`;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>在 ES5 版本中，如果需要在字符串中添加表达式或值，则需要使用<code>+</code>运算符。在模板字符串s中，我们可以使用<code>\${expr}</code>嵌入一个表达式，这使其比 ES5 版本更整洁。</p><h3 id="_4、js的几种继承方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4js%E7%9A%84%E5%87%A0%E7%A7%8D%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">4、js的几种继承方式？</a> <a class="header-anchor" href="#_4、js的几种继承方式" aria-label="Permalink to &quot;[4、js的几种继承方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#4js的几种继承方式)&quot;">​</a></h3><p><strong>1、</strong> 使用对象冒充实现继承</p><p><strong>2、</strong> 采用call、Apply方法改变函数上下文实现继承</p><p><strong>3、</strong> 原型链方式继承</p><h3 id="_5、this是什么-在不同场景中分别代表什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5this%E6%98%AF%E4%BB%80%E4%B9%88-%E5%9C%A8%E4%B8%8D%E5%90%8C%E5%9C%BA%E6%99%AF%E4%B8%AD%E5%88%86%E5%88%AB%E4%BB%A3%E8%A1%A8%E4%BB%80%E4%B9%88###" target="_blank" rel="noreferrer">5、this是什么 在不同场景中分别代表什么###</a> <a class="header-anchor" href="#_5、this是什么-在不同场景中分别代表什么" aria-label="Permalink to &quot;[5、this是什么 在不同场景中分别代表什么###](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#5this是什么-在不同场景中分别代表什么###)&quot;">​</a></h3><p>（1）function a(){ this ?} //This:指向windows</p><p>（2）function b(){ return function(){ this ?}}b()(); //This:指向windows</p><p>（3）function c(){ return {s:function(){this}}}c().s(); //This:指向object</p><p>由于其运行期绑定的特性，JavaScript 中的 this 含义要丰富得多，它可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式。</p><h3 id="_6、如何使用storage-对js文件进行缓存" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8storage-%E5%AF%B9js%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8C%E7%BC%93%E5%AD%98" target="_blank" rel="noreferrer">6、如何使用storage 对js文件进行缓存</a> <a class="header-anchor" href="#_6、如何使用storage-对js文件进行缓存" aria-label="Permalink to &quot;[6、如何使用storage 对js文件进行缓存](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#6如何使用storage-对js文件进行缓存)&quot;">​</a></h3><p>由于sessionStorage - 针对一个 session 的数据存储，所以我们一般利用localStorage储存js文件，只有在第一次访问该页面的时候加载js文件，以后在访问的时候加载本地localStorage执行</p><h3 id="_7、如何创建一个对象" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">7、如何创建一个对象？</a> <a class="header-anchor" href="#_7、如何创建一个对象" aria-label="Permalink to &quot;[7、如何创建一个对象？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#7如何创建一个对象)&quot;">​</a></h3><p><strong>1、</strong> 工厂模式</p><p><strong>2、</strong> 构造函数模式</p><p><strong>3、</strong> 原型模式</p><p><strong>4、</strong> 混合构造函数和原型模式</p><p><strong>5、</strong> 动态原型模式</p><p><strong>6、</strong> 寄生构造函数模式</p><p><strong>7、</strong> 稳妥构造函数模式</p><p>**程序的设计模式?工厂模式?发布订阅? **</p><p><strong>1、</strong> 设计模式并不是某种语言的某块代码，设计模式是一种思想，提供给在编码时候遇到的各种问题是可以采取的解决方案，更倾向于一种逻辑思维，而不是万能代码块。</p><p>设计模式主要分三个类型:创建型、结构型和行为型。</p><p>创建型模式：单例模式，抽象工厂模式，建造者模式，工厂模式与原型模式。</p><p>结构型模式：适配器模式，桥接模式，装饰者模式，组合模式，外观模式，享元模式以及代理模式。</p><p>行为型模式：模板方法模式，命令模式，迭代器模式，观察者模式，中介者模式，备忘录模式，解释器模式，状态模式，策略模式，职责链模式和访问者模式。</p><p><strong>2、</strong> 与创建型模式类似，工厂模式创建对象（视为工厂里的产品）是无需指定创建对象的具体类。</p><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。</p><p><strong>3、</strong> 观察者模式又叫做发布订阅模式，它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生改变时就会通知所有观察着对象。它是由两类对象组成，主题和观察者，主题负责发布事件，同时观察者通过订阅这些事件来观察该主体，发布者和订阅者是完全解耦的，彼此不知道对方的存在，两者仅仅共享一个自定义事件的名称。</p><p>( 设计模式实在是太高深了，小伙伴门结合网上实例自行学习，我实在是无能为力啊 )</p><h3 id="_8、什么是回调函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">8、什么是回调函数？</a> <a class="header-anchor" href="#_8、什么是回调函数" aria-label="Permalink to &quot;[8、什么是回调函数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#8什么是回调函数)&quot;">​</a></h3><p><strong>回调函数</strong>是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。</p><p>在JavaScript中函数也是对象的一种，同样对象可以作为参数传递给函数，因此函数也可以作为参数传递给另外一个函数，这个作为参数的函数就是回调函数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const btnAdd = document.getElementById(&#39;btnAdd&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">btnAdd.addEventListener(&#39;click&#39;, function clickCallback(e) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    // do something useless</span></span>
<span class="line"><span style="color:#f6f6f4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const btnAdd = document.getElementById(&#39;btnAdd&#39;);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">btnAdd.addEventListener(&#39;click&#39;, function clickCallback(e) {</span></span>
<span class="line"><span style="color:#24292e;">    // do something useless</span></span>
<span class="line"><span style="color:#24292e;">});</span></span></code></pre></div><p>在本例中，我们等待<code>id</code>为<code>btnAdd</code>的元素中的<code>click</code>事件，如果它被单击，则执行<code>clickCallback</code>函数。回调函数向某些数据或事件添加一些功能。</p><p>数组中的<code>reduce</code>、<code>filter</code>和<code>map</code>方法需要一个回调作为参数。回调的一个很好的类比是，当你打电话给某人，如果他们不接，你留下一条消息，你期待他们回调。调用某人或留下消息的行为是事件或数据，回调是你希望稍后发生的操作。</p><h3 id="_9、commonjs-requirejs-amd-cmd-umd" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9commonjsrequirejs%7C%7C" target="_blank" rel="noreferrer">9、commonjs?requirejs?AMD|CMD|UMD?</a> <a class="header-anchor" href="#_9、commonjs-requirejs-amd-cmd-umd" aria-label="Permalink to &quot;[9、commonjs?requirejs?AMD|CMD|UMD?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#9commonjsrequirejs||)&quot;">​</a></h3>`,58),r=a("p",{"模块标识(module)":""},[a("strong",null,"1、"),t(" CommonJS就是为JS的表现来制定规范，NodeJS是这种规范的实现，webpack 也是以CommonJS的形式来书写。因为js没有模块的功能，所以CommonJS应运而生。但它不能在浏览器中运行。 CommonJS定义的模块分为:{模块引用(require)} {模块定义(exports)}")],-1),c=s('<p><strong>2、</strong> RequireJS 是一个JavaScript模块加载器。 RequireJS有两个主要方法(method): define()和require()。这两个方法基本上拥有相同的定义(declaration) 并且它们都知道如何加载的依赖关系，然后执行一个回调函数(callback function)。与require()不同的是， define()用来存储代码作为一个已命名的模块。 因此define()的回调函数需要有一个返回值作为这个模块定义。这些类似被定义的模块叫作AMD (Asynchronous Module Definition，异步模块定义)。</p><p><strong>3、</strong> AMD 是 RequireJS 在推广过程中对模块定义的规范化产出 AMD异步加载模块。它的模块支持对象 函数 构造器 字符串 JSON等各种类型的模块。 适用AMD规范适用define方法定义模块。</p><p><strong>4、</strong> CMD是SeaJS 在推广过程中对模块定义的规范化产出</p><p>AMD与CDM的区别：</p><p>（1）对于于依赖的模块，AMD 是提前执行(好像现在也可以延迟执行了)，CMD 是延迟执行。</p><p>（2）AMD 推崇依赖前置，CMD 推崇依赖就近。</p><p>（3）AMD 推崇复用接口，CMD 推崇单用接口。</p><p>（4）书写规范的差异。</p><p><strong>5、</strong> umd是AMD和CommonJS的糅合。</p><p>AMD 浏览器第一的原则发展 异步加载模块。</p><p>CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。这迫使人们又想出另一个更通用的模式UMD ( Universal Module Definition ), 希望解决跨平台的解决方案。UMD先判断是否支持Node.js的模块( exports )是否存在，存在则使用Node.js模块模式。</p><h3 id="_10、平时工作中怎么样进行数据交互-如果后台没有提供数据怎么样进行开发" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10%E5%B9%B3%E6%97%B6%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%80%8E%E4%B9%88%E6%A0%B7%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E5%A6%82%E6%9E%9C%E5%90%8E%E5%8F%B0%E6%B2%A1%E6%9C%89%E6%8F%90%E4%BE%9B%E6%95%B0%E6%8D%AE%E6%80%8E%E4%B9%88%E6%A0%B7%E8%BF%9B%E8%A1%8C%E5%BC%80%E5%8F%91" target="_blank" rel="noreferrer">10、平时工作中怎么样进行数据交互?如果后台没有提供数据怎么样进行开发?</a> <a class="header-anchor" href="#_10、平时工作中怎么样进行数据交互-如果后台没有提供数据怎么样进行开发" aria-label="Permalink to &quot;[10、平时工作中怎么样进行数据交互?如果后台没有提供数据怎么样进行开发?](https://gitee.com/souyunku/DevBooks/blob/master/docs/JavaScript/JavaScript最新2021年面试题及答案，汇总版.md#10平时工作中怎么样进行数据交互如果后台没有提供数据怎么样进行开发)&quot;">​</a></h3><p><strong>mock数据与后台返回的格式不同意怎么办?</strong></p><p>由后台编写接口文档、提供数据接口实、前台通过ajax访问实现数据交互；</p><p>在没有数据的情况下寻找后台提供静态数据或者自己定义mock数据；</p><p>返回数据不统一时编写映射文件 对数据进行映射。</p><h3 id="_11、如何在一行中计算多个表达式的值" tabindex="-1">11、如何在一行中计算多个表达式的值？ <a class="header-anchor" href="#_11、如何在一行中计算多个表达式的值" aria-label="Permalink to &quot;11、如何在一行中计算多个表达式的值？&quot;">​</a></h3><h3 id="_12、javascript如何实现继承" tabindex="-1">12、Javascript如何实现继承？ <a class="header-anchor" href="#_12、javascript如何实现继承" aria-label="Permalink to &quot;12、Javascript如何实现继承？&quot;">​</a></h3><h3 id="_13、为什么在调用这个函数时-代码中的b会变成一个全局变量" tabindex="-1">13、为什么在调用这个函数时，代码中的<code>b</code>会变成一个全局变量? <a class="header-anchor" href="#_13、为什么在调用这个函数时-代码中的b会变成一个全局变量" aria-label="Permalink to &quot;13、为什么在调用这个函数时，代码中的`b`会变成一个全局变量?&quot;">​</a></h3><h3 id="_14、手动实现array-prototype-reduce方法" tabindex="-1">14、手动实现<code>Array.prototype.reduce</code>方法 <a class="header-anchor" href="#_14、手动实现array-prototype-reduce方法" aria-label="Permalink to &quot;14、手动实现`Array.prototype.reduce`方法&quot;">​</a></h3><h3 id="_15、如何copy一个dom元素" tabindex="-1">15、如何copy一个dom元素？ <a class="header-anchor" href="#_15、如何copy一个dom元素" aria-label="Permalink to &quot;15、如何copy一个dom元素？&quot;">​</a></h3><h3 id="_16、如何添加一个dom对象到body中-innerhtml和innertext区别" tabindex="-1">16、如何添加一个dom对象到body中?innerHTML和innerText区别? <a class="header-anchor" href="#_16、如何添加一个dom对象到body中-innerhtml和innertext区别" aria-label="Permalink to &quot;16、如何添加一个dom对象到body中?innerHTML和innerText区别?&quot;">​</a></h3><h3 id="_17、手动实现-array-prototype-map-方法" tabindex="-1">17、手动实现 <code>Array.prototype.map 方法</code> <a class="header-anchor" href="#_17、手动实现-array-prototype-map-方法" aria-label="Permalink to &quot;17、手动实现 `Array.prototype.map 方法`&quot;">​</a></h3><h3 id="_18、手动实现缓存方法" tabindex="-1">18、手动实现缓存方法 <a class="header-anchor" href="#_18、手动实现缓存方法" aria-label="Permalink to &quot;18、手动实现缓存方法&quot;">​</a></h3><h3 id="_19、null-undefined-的区别" tabindex="-1">19、null，undefined 的区别？ <a class="header-anchor" href="#_19、null-undefined-的区别" aria-label="Permalink to &quot;19、null，undefined 的区别？&quot;">​</a></h3><h3 id="_20、什么是高阶函数" tabindex="-1">20、什么是高阶函数？ <a class="header-anchor" href="#_20、什么是高阶函数" aria-label="Permalink to &quot;20、什么是高阶函数？&quot;">​</a></h3><h3 id="_21、-运算符能做什么" tabindex="-1">21、|| 运算符能做什么 <a class="header-anchor" href="#_21、-运算符能做什么" aria-label="Permalink to &quot;21、|| 运算符能做什么&quot;">​</a></h3><h3 id="_22、通过new创建一个对象的时候-函数内部有哪些改变" tabindex="-1">22、通过new创建一个对象的时候，函数内部有哪些改变### <a class="header-anchor" href="#_22、通过new创建一个对象的时候-函数内部有哪些改变" aria-label="Permalink to &quot;22、通过new创建一个对象的时候，函数内部有哪些改变###&quot;">​</a></h3><h3 id="_23、什么是nan-以及如何检查值是否为nan" tabindex="-1">23、什么是NaN？以及如何检查值是否为NaN？ <a class="header-anchor" href="#_23、什么是nan-以及如何检查值是否为nan" aria-label="Permalink to &quot;23、什么是NaN？以及如何检查值是否为NaN？&quot;">​</a></h3><h3 id="_24、" tabindex="-1">24、** <a class="header-anchor" href="#_24、" aria-label="Permalink to &quot;24、**&quot;">​</a></h3><h3 id="_25、function-prototype-apply-方法的用途是什么" tabindex="-1">25、Function.prototype.apply 方法的用途是什么？ <a class="header-anchor" href="#_25、function-prototype-apply-方法的用途是什么" aria-label="Permalink to &quot;25、Function.prototype.apply 方法的用途是什么？&quot;">​</a></h3><h3 id="_26、那些操作会造成内存泄漏" tabindex="-1">26、那些操作会造成内存泄漏？ <a class="header-anchor" href="#_26、那些操作会造成内存泄漏" aria-label="Permalink to &quot;26、那些操作会造成内存泄漏？&quot;">​</a></h3><h3 id="_27、为什么要有同源限制" tabindex="-1">27、为什么要有同源限制？ <a class="header-anchor" href="#_27、为什么要有同源限制" aria-label="Permalink to &quot;27、为什么要有同源限制？&quot;">​</a></h3><h3 id="_28、dom事件模型和事件流" tabindex="-1">28、DOM事件模型和事件流？ <a class="header-anchor" href="#_28、dom事件模型和事件流" aria-label="Permalink to &quot;28、DOM事件模型和事件流？&quot;">​</a></h3><h3 id="_29、编写一个-getelementsbyclassname-封装函数" tabindex="-1">29、编写一个 getElementsByClassName 封装函数? <a class="header-anchor" href="#_29、编写一个-getelementsbyclassname-封装函数" aria-label="Permalink to &quot;29、编写一个 getElementsByClassName 封装函数?&quot;">​</a></h3>',35),i=[p,r,c];function d(E,h,u,f,m,B){return n(),o("div",null,i)}const g=e(l,[["render",d]]);export{b as __pageData,g as default};
