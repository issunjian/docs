import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/JavaScriptBase.md","filePath":"frontend/js/JavaScriptBase.md"}'),p={name:"frontend/js/JavaScriptBase.md"},o=l(`<h2 id="javascript基础" tabindex="-1">JavaScript基础 <a class="header-anchor" href="#javascript基础" aria-label="Permalink to &quot;JavaScript基础&quot;">​</a></h2><h3 id="_1-介绍" tabindex="-1">1 介绍 <a class="header-anchor" href="#_1-介绍" aria-label="Permalink to &quot;1 介绍&quot;">​</a></h3><h3 id="_2-引入方式" tabindex="-1">2 引入方式 <a class="header-anchor" href="#_2-引入方式" aria-label="Permalink to &quot;2 引入方式&quot;">​</a></h3><p>js代码也是书写在html中的，那么html需要引入JS代码</p><p><strong>方式有2种</strong></p><p><strong>第一种方式：</strong> 内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于<code>&lt;script&gt;&lt;/script&gt;</code>标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的<code>&lt;script&gt;</code></li><li>一般会把脚本置于<code>&lt;body&gt;</code>元素的底部，可改善显示速度</li></ul><p>例子：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Hello JavaScript</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello JavaScript&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><strong>第二种方式：</strong> 外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含<code>&lt;script&gt;</code>标签</li><li>引入外部js的<code>&lt;script&gt;</code>标签，必须是双标签</li></ul><p>例子：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">src</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">js/demo.js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;js/demo.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>注意：demo.js中只有js代码，没有<code>&lt;script&gt;</code>标签</p><h3 id="_3-语法-书写语法" tabindex="-1">3 语法-书写语法 <a class="header-anchor" href="#_3-语法-书写语法" aria-label="Permalink to &quot;3 语法-书写语法&quot;">​</a></h3><p>掌握了js的引入方式，那么接下来我们需要学习js的书写了，首先需要掌握的是js的书写语法用Java编写规范即可</p><p>语法规则如下：</p><ul><li>区分大小写：<strong>与 Java 一样</strong>，变量名、函数名Java中的方法名以及其他一切东西都是区分大小写的</li><li>每行结尾的分号<code>;</code>可有可无 Java中有，建议写</li><li><code>{}</code>大括号表示代码块</li><li>注释：和Java一样 <ul><li>单行注释：<code>// </code>注释内容</li><li>多行注释：<code>/\\* 注释内容 \\*/</code></li></ul></li></ul><p>借助js中3钟输出语句，来演示书写语法</p><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">html</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">en</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">charset</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;JS-基本语法&lt;/</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* alert(&quot;JS&quot;); */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//方式一: 弹出警告框</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// window.alert(&quot;hello js&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// //方式二: 写入html页面中</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// document.write(&quot;hello js&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//方式三: 控制台输出</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">hello js</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;JS-基本语法&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* alert(&quot;JS&quot;); */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//方式一: 弹出警告框</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// window.alert(&quot;hello js&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// //方式二: 写入html页面中</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// document.write(&quot;hello js&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//方式三: 控制台输出</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_4-语法-变量-🍐" tabindex="-1">4 语法-变量 🍐 <a class="header-anchor" href="#_4-语法-变量-🍐" aria-label="Permalink to &quot;4 语法-变量 🍐&quot;">​</a></h3><p>学习js中变量的声明</p><ol><li>在js中，变量的声明<strong>和java</strong>中还是<strong>不同</strong>的</li><li>js中主要通过如下<strong>3个关键字来声明变量</strong>的：</li></ol><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><p><strong>在js中声明变量还需要注意如下几点：</strong></p><ul><li>JavaScript 是一门<strong>弱类型语言</strong>，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则按照Java规范即可： <ul><li>组成字符可以是任何字母、数字、下划线（<code>_</code>）或美元符号（<code>$</code>）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">html</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">en</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">charset</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;JS-基础语法&lt;/</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//var定义变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// var a = 10;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// a = &quot;张三&quot;;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// alert(a);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//特点1 : 作用域比较大, 全局变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//特点2 : 可以重复定义的</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//     var x = 1;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//     var x = &quot;A&quot;;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// alert(x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//let : 局部变量 ; 不能重复定义 </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//     let x = 1;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//     alert(x);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//const: 常量 , 不能给改变的.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pi </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3.14</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    pi </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3.15</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(pi);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;JS-基础语法&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//var定义变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// var a = 10;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// a = &quot;张三&quot;;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// alert(a);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//特点1 : 作用域比较大, 全局变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//特点2 : 可以重复定义的</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     var x = 1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     var x = &quot;A&quot;;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// alert(x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//let : 局部变量 ; 不能重复定义 </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     let x = 1;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//     alert(x);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//const: 常量 , 不能给改变的.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pi</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    pi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.15</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(pi);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>注意事项</p><ol><li>在js中，我们var声明的变量可以接受任何数据类型的值。并且var声明的变量的作用于是全局的，注释掉之前的代码，</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//var定义变量</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">张三</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    a</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(a);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//var定义变量</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    a</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(a);</span></span></code></pre></div><ol start="2"><li><p>在ECMAScript 6 新增了 let 关键字来定义变量，它的用法类似于 var，但是所声明的变量，只在 let关键字所在的<strong>代码块内有效</strong>，且<strong>不允许重复声明</strong>，否则会出现错误</p></li><li><p>在ECMAScript6中简称：ES6，还新增了const 关键字用来声明常量，但是一旦声明，常量的值是无法更改的。注释之前的内容，否则会出现错误：</p></li></ol><h3 id="_5-语法-数据类型和运算符-🍐" tabindex="-1">5 语法-数据类型和运算符 🍐 <a class="header-anchor" href="#_5-语法-数据类型和运算符-🍐" aria-label="Permalink to &quot;5 语法-数据类型和运算符 🍐&quot;">​</a></h3><p>数据类型</p><p>虽然js是弱数据类型的语言，但是js中也存在数据类型，js中的数据类型分为 ：原始类型 和 引用类型，具体有如下类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td><code>number</code></td><td><strong>数字</strong><code>（整数、小数、NaN(Not a Number)）</code></td></tr><tr><td><code>string</code></td><td>字符串，<strong>单双引</strong>皆可</td></tr><tr><td><code>boolean</code></td><td><strong>布尔</strong>。<code>true，false</code></td></tr><tr><td><code>null</code></td><td>对象为空</td></tr><tr><td><code>undefined</code></td><td>当声明的变量未初始化时，该变量的默认值是<code> undefined</code></td></tr></tbody></table><p>使用<strong>typeof函数</strong>可以返回变量的数据类型，接下来我们需要通过书写代码来演示js中的数据类型</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//原始数据类型</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//number</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3.14</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//number</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//原始数据类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//number</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//number</span></span></code></pre></div><p>点击查看验证代码</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;!</span><span style="color:#F286C4;">DOCTYPE</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">html</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">lang</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">en</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">charset</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">http-equiv</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">X-UA-Compatible</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">content</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">IE=edge</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">meta</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">name</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">viewport</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;font-style:italic;">content</span><span style="color:#F286C4;">=</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">width=device-width, initial-scale=1.0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    &lt;</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;JS-数据类型&lt;/</span><span style="color:#F286C4;">title</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">head</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">body</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//数字类型</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//number</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3.14</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 字符串类型</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">A</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//string</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">);</span><span style="color:#7B7F8B;">//string</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//布尔类型</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//boolean</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span><span style="color:#7B7F8B;">//boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//object </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//undefined未定义</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a ;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> a); </span><span style="color:#7B7F8B;">//undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">html</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;!</span><span style="color:#22863A;">DOCTYPE</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http-equiv</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;X-UA-Compatible&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;IE=edge&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;JS-数据类型&lt;/</span><span style="color:#22863A;">title</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">head</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//数字类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//number</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3.14</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 字符串类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//string</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello&#39;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//string</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//布尔类型</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//boolean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//object </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//undefined未定义</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a ;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> a); </span><span style="color:#6A737D;">//undefined</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>运算符</p><p><strong>js中的运算规则绝大多数还是和java中一致的</strong>和Java一样，具体运算符如下：</p><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td><code>+ , - , \\* , / , % , ++ , --</code></td></tr><tr><td>赋值运算符</td><td><code>= , += , -= , *= , /= , %=</code></td></tr><tr><td>比较运算符</td><td><code>&gt; , &lt; , &gt;= , &lt;= , != , == , === 注意 == </code>会进行类型转换，<code>===</code> 不会进行类型转换<code>**</code>和<code>java</code>不一样</td></tr><tr><td>逻辑运算符</td><td><code>&amp;&amp;</code></td></tr><tr><td>三元运算符</td><td><code>条件表达式 ? true\\_value: false\\_value</code></td></tr></tbody></table><p>注意</p><ol><li>在js中，绝大多数的运算规则和java中是保持一致的三元运算符也有，但是js中的<code>==和===</code>是有区别的。</li></ol><ul><li><code>==</code>：只比较值是否相等，不区分数据类型，哪怕类型不一致，<code>==</code>也会自动转换类型进行值得比较</li><li><code>===</code>：不光比较值，还要比较类型，如果类型不一致，直接返回false</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> _age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">20</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(age </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> _age);</span><span style="color:#7B7F8B;">//true ，只比较值</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(age </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> _age);</span><span style="color:#7B7F8B;">//false ，类型不一样</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> _age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;20&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(age </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> _age);</span><span style="color:#6A737D;">//true ，只比较值</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(age </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> _age);</span><span style="color:#6A737D;">//false ，类型不一样</span></span></code></pre></div><ol start="2"><li><strong>流程控制语句</strong> if，switch，for等和java保持一致，此处不再演示</li></ol><p>在js中，虽然不区分数据类型，但是有时候涉及到数值计算，还是需要进行类型转换的，js中可以通过parseInt()函数来进行将其他类型转换成数值类型。注释之前的代码，添加代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 类型转换 - 其他类型转为数字</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">12</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//12</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">12A45</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">//12</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">parseInt</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">A45</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span><span style="color:#7B7F8B;">//NaN (not a number)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 类型转换 - 其他类型转为数字</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//12</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12A45&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">//12</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A45&quot;</span><span style="color:#24292E;">));</span><span style="color:#6A737D;">//NaN (not a number)</span></span></code></pre></div><ol start="3"><li><strong>需要注意的是：</strong> 在js中，0,null,undefined,&quot;&quot;,NaN理解成false,反之理解成true</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#7B7F8B;">//a =null; a=&quot;&quot;  a=undefined</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(a){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//不会执行</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//a =null; a=&quot;&quot;  a=undefined</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(a){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//不会执行</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_6-语法-函数-✏️-🍐" tabindex="-1">6 语法-函数 ✏️ 🍐 <a class="header-anchor" href="#_6-语法-函数-✏️-🍐" aria-label="Permalink to &quot;6 语法-函数 ✏️ 🍐&quot;">​</a></h3><p>函数</p><ol><li>java中我们为了提高代码的复用性，可以使用<strong>方法</strong></li><li>在JavaScript中可以使用<strong>函数</strong>来完成相同的事情 <ul><li>JavaScript中的函数被设计为执行特定任务的代码块 <strong>(封装)</strong>，通过关键字function 来定义</li><li>JS中定义函数有2中方式</li></ul></li></ol><p>第一种定义格式如下常用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">函数名</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">参数1</span><span style="color:#F6F6F4;">,参数2..){</span></span>
<span class="line"><span style="color:#F6F6F4;">    要执行的代码</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">函数名</span><span style="color:#24292E;">(</span><span style="color:#E36209;">参数1</span><span style="color:#24292E;">,参数2..){</span></span>
<span class="line"><span style="color:#24292E;">    要执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</strong> 👈</p><ul><li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><p>如下示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">, </span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来我们需要在Idea或者VS中编写代码来演示</p><p>第一步：新建名为js的文件夹，创建名为01. JS-函数的html文件，然后在<code>&lt;script&gt;</code>中定义上述示例的函数：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">     </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">     }</span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>但是上述只是定义函数，**函数需要被调用才能执行！**所以接下来我们需要调用函数</p><p>第二步：因为定义的add函数有返回值，所以我们可以接受返回值，并且输出到浏览器上，添加如下代码：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(result);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(result);</span></span></code></pre></div><p>第二种可以通过var去定义函数的名字，具体格式如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">functionName</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">参数1</span><span style="color:#F6F6F4;">,参数2..){   </span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//要执行的代码</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">functionName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">参数1</span><span style="color:#24292E;">,参数2..){   </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//要执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来我们按照上述的格式，修改代码如下：只需要将第一种定义方式注释掉，替换成第二种定义方式即可，函数的调用不变</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//定义函数-1</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// function add(a,b){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//    return  a + b;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//定义函数-2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">  a </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//函数调用</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">alert</span><span style="color:#F6F6F4;">(result);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">&lt;/</span><span style="color:#F286C4;">script</span><span style="color:#F6F6F4;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//定义函数-1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// function add(a,b){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//    return  a + b;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//定义函数-2</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//函数调用</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(result);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>注意</p><p>我们在调用add函数时，再添加2个参数，修改代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">40</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">40</span><span style="color:#24292E;">);</span></span></code></pre></div><p>浏览器打开，发现没有错误，并且依然弹出30，这是为什么呢？</p><p><strong>因为在JavaScript中，函数的调用只需要名称正确即可，参数列表不管的</strong>。如上述案例，10传递给了变量a，20传递给了变量b,而30和40没有变量接受，但是不影响函数的正常调用。</p><h2 id="数据类型-8种-type" tabindex="-1">数据类型（8种） Type <a class="header-anchor" href="#数据类型-8种-type" aria-label="Permalink to &quot;数据类型（8种） Type&quot;">​</a></h2><p>JavaScript的<strong>8种</strong>原始数据类型包括Number、String、Boolean、Null、Undefined、Symbol（ES6新增）、BigInt（暂时不必关注），此外有Object类型。函数被认为是可执行的object类型变量，但typeof会返回&#39;function&#39;。</p><h3 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h3><p>不区分整数和浮点（内部区分），注意浮点计算结果是不精确的（由于浮点数的计算方式，如<code>0.1+0.2=0.30000000000000004</code>），对浮点数不建议直接用等号判断两值相等，应当看他们的差是否小于某个值（如0.001）。Infinity（超过Number最大值）、NaN（Not a Number）也是合法的Number。</p><p>关于NaN</p><p>NaN是特殊的Number，它也不等于自己，只能通过isNaN()判断。</p><h3 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h3><p>单引号‘’或双引号&quot;&quot;包裹的字符串。</p><h3 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h3><p>Boolean包括&#39;true&#39;、&#39;false&#39;两种取值。比较运算符、&amp;&amp;、||与!都可能产生布尔值。</p><p>转换结果为false的取值</p><p>NaN、null、undefined、0与空字符串转Boolean的结果都为false。</p><h3 id="null" tabindex="-1">Null <a class="header-anchor" href="#null" aria-label="Permalink to &quot;Null&quot;">​</a></h3><p>null表示空值，undefined表示未赋值，undefined可以用于判断函数参数是否传递。他们是两种数据类型。</p><h3 id="undefined" tabindex="-1">Undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;Undefined&quot;">​</a></h3><p>访问对象未声明的属性、函数未接受到的参数、未初始化的变量都会返回undefined。</p><p>null和undefined的注意事项</p><ol><li><p>null是保留字，而undefined不是。</p></li><li><p>如果访问不存在的变量，会报错&quot;var is not defined&quot;；访问已声明但未赋值的变量才会得到undefined。</p></li><li><p>typeof null的结果是object，但null也是一种基本类型而非object，这个混淆是由于typeof以内存低位判断数据类型，object和null的低3位都是0。</p></li></ol><h3 id="ymbol-es6" tabindex="-1">ymbol ES6 <a class="header-anchor" href="#ymbol-es6" aria-label="Permalink to &quot;ymbol ES6&quot;">​</a></h3><p>用于产生唯一标识，除了自己等于自己，两个完全相同的symbol不相等，常用于对象属性、声明唯一常量、定义私有属性。也可以用Symbol.for()创建symbol，如果参数一致，创建的symbol相等。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">s </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> s1</span><span style="color:#7B7F8B;">//false</span></span>
<span class="line"><span style="color:#F6F6F4;">s </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> s</span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Symbol.</span><span style="color:#62E884;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Symbol.</span><span style="color:#62E884;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">s2 </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> s3</span><span style="color:#7B7F8B;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s1</span><span style="color:#6A737D;">//false</span></span>
<span class="line"><span style="color:#24292E;">s </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> s</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Symbol.</span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">s2 </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> s3</span><span style="color:#6A737D;">//true</span></span></code></pre></div><p>你可以通过以下方式获取Symbol的description（无需记忆）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Symbol</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">love</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {[s2]</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">and peace</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F6F6F4;">obj</span><span style="color:#7B7F8B;">//{ [Symbol(love)]: &#39;and peace&#39; }</span></span>
<span class="line"><span style="color:#F6F6F4;">Object.</span><span style="color:#62E884;">getOwnPropertySymbols</span><span style="color:#F6F6F4;">(obj)</span><span style="color:#7B7F8B;">//[ Symbol(love) ]</span></span>
<span class="line"><span style="color:#F6F6F4;">Reflect.</span><span style="color:#62E884;">ownKeys</span><span style="color:#F6F6F4;">(obj)</span><span style="color:#7B7F8B;">//[ Symbol(love) ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Symbol</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;love&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {[s2]:</span><span style="color:#032F62;">&quot;and peace&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">obj</span><span style="color:#6A737D;">//{ [Symbol(love)]: &#39;and peace&#39; }</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">getOwnPropertySymbols</span><span style="color:#24292E;">(obj)</span><span style="color:#6A737D;">//[ Symbol(love) ]</span></span>
<span class="line"><span style="color:#24292E;">Reflect.</span><span style="color:#6F42C1;">ownKeys</span><span style="color:#24292E;">(obj)</span><span style="color:#6A737D;">//[ Symbol(love) ]</span></span></code></pre></div><p>Symbol定义了对象的许多实用方法，包括[Symbol.Iterator]、[Symbol.match]、[Symbol.replace]、[Symbol.split]、[Symbol.toPrimitive]、[Symbol.toStringTag]等。toStringTag方法甚至能改变对象的toString方法。</p><h3 id="bigint-es6" tabindex="-1">*BigInt ES6 <a class="header-anchor" href="#bigint-es6" aria-label="Permalink to &quot;\\*BigInt ES6&quot;">​</a></h3><p>在数字末尾加n可声明BigInt，其可操作大于Number所能表示最大数的数（2^53）。该类型尚在提案过程中，在新版Chrome与Node中得到实现。</p><p>带小数的运算会被取整。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> Num </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">BigInt</span><span style="color:#F6F6F4;">(Math.</span><span style="color:#62E884;">pow</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">63</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> Num2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F286C4;">n</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BigInt</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">63</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> Num2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#D73A49;">n</span></span></code></pre></div><h3 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h3><p>键-值对的无序集合。键（key）只能是字符串类型，值（value）可以是任意类型。&#39;.&#39;可以用于表示键路径，比如obj.key或obj.obj.a。</p><p>Object是引用类型，存储的是指针，而其他基本类型存储值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {key</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">value</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">           obj</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">             a</span><span style="color:#F286C4;">:</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">           }}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {key:</span><span style="color:#032F62;">&#39;value&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">           obj:{</span></span>
<span class="line"><span style="color:#24292E;">             a:</span><span style="color:#032F62;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#24292E;">           }}</span></span></code></pre></div><h4 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h4><p>用[]或new Array()创建，数组可以包含任意类型元素并且提供了相当多的方法。</p><h4 id="date" tabindex="-1">Date <a class="header-anchor" href="#date" aria-label="Permalink to &quot;Date&quot;">​</a></h4><p>Date类型提供了丰富的与时间、日期相关的方法，Date()返回当前日期的字符串。</p><h4 id="regexp" tabindex="-1">RegExp <a class="header-anchor" href="#regexp" aria-label="Permalink to &quot;RegExp&quot;">​</a></h4><p>正则表达式对象。</p><h4 id="map-set-es6" tabindex="-1">Map&amp;Set ES6 <a class="header-anchor" href="#map-set-es6" aria-label="Permalink to &quot;Map&amp;Set ES6&quot;">​</a></h4><p>ES6新增的数据结构。</p><p>Map是一组key-value对结构，key不能重复，否则只保留最新的值。与对象只支持string与symbol相比，Map 的key支持任意类型。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Map</span><span style="color:#F6F6F4;">([[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Lucy</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">90</span><span style="color:#F6F6F4;">],[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Peter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">80</span><span style="color:#F6F6F4;">],[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Bill</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">85</span><span style="color:#F6F6F4;">]])</span></span>
<span class="line"><span style="color:#F6F6F4;">students.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Lucy</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//90</span></span>
<span class="line"><span style="color:#F6F6F4;">students.</span><span style="color:#62E884;">has</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Peter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"><span style="color:#F6F6F4;">students.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Peter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"><span style="color:#F6F6F4;">students.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Peter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">students.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Bill</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">90</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//Map { &#39;Lucy&#39; =&gt; 90, &#39;Bill&#39; =&gt; 90 }</span></span>
<span class="line"><span style="color:#F6F6F4;">students.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Bill</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//90</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">([[</span><span style="color:#032F62;">&#39;Lucy&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">],[</span><span style="color:#032F62;">&#39;Peter&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">80</span><span style="color:#24292E;">],[</span><span style="color:#032F62;">&#39;Bill&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">85</span><span style="color:#24292E;">]])</span></span>
<span class="line"><span style="color:#24292E;">students.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Lucy&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//90</span></span>
<span class="line"><span style="color:#24292E;">students.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Peter&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">students.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Peter&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">students.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Peter&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//undefined</span></span>
<span class="line"><span style="color:#24292E;">students.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Bill&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">90</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//Map { &#39;Lucy&#39; =&gt; 90, &#39;Bill&#39; =&gt; 90 }</span></span>
<span class="line"><span style="color:#24292E;">students.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Bill&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//90</span></span></code></pre></div><p>Set类似集合，由一组不重复的key组成，否则只保留一个。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> foods </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Set</span><span style="color:#F6F6F4;">([</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Chicken</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Noodles</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Rice</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">foods.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">fish</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//Set { &#39;Chicken&#39;, &#39;Noodles&#39;, &#39;Rice&#39;, &#39;fish&#39; }</span></span>
<span class="line"><span style="color:#F6F6F4;">foods.</span><span style="color:#62E884;">delete</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Noodles</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"><span style="color:#F6F6F4;">foods.</span><span style="color:#62E884;">has</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Rice</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span><span style="color:#7B7F8B;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foods </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;Chicken&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;Noodles&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;Rice&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">foods.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;fish&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//Set { &#39;Chicken&#39;, &#39;Noodles&#39;, &#39;Rice&#39;, &#39;fish&#39; }</span></span>
<span class="line"><span style="color:#24292E;">foods.</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Noodles&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#24292E;">foods.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Rice&#39;</span><span style="color:#24292E;">)</span><span style="color:#6A737D;">//true</span></span></code></pre></div><h3 id="获取基本类型-typeof" tabindex="-1">获取基本类型：typeof <a class="header-anchor" href="#获取基本类型-typeof" aria-label="Permalink to &quot;获取基本类型：typeof&quot;">​</a></h3><p><code>typeof var</code>可以获取变量类型，不与ES规范一一对应，其返回值是以下结果之一：</p><table><thead><tr><th>返回数据类型</th><th>对应基础类型</th></tr></thead><tbody><tr><td>number</td><td>Number</td></tr><tr><td>string</td><td>String</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>object</td><td>Object Null</td></tr><tr><td>undefined</td><td>Undefined（该变量不存在）</td></tr><tr><td>symbol</td><td>Symbol</td></tr><tr><td>function</td><td>Object</td></tr><tr><td>bigint</td><td>BigInt</td></tr></tbody></table><h3 id="获取实例类型-instanceof" tabindex="-1">获取实例类型：instanceof <a class="header-anchor" href="#获取实例类型-instanceof" aria-label="Permalink to &quot;获取实例类型：instanceof&quot;">​</a></h3><p>instanceof用于判断检测对象的类型，包括&quot;Array&quot;、&quot;Function&quot;、&quot;Object&quot;及自定义类/构造函数等。</p><p>此外Object.prototype.toString.call()可以准确打印出Null的类型。也可以通过访问&quot;.constructor&quot;获取构造函数判断类型。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> a </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> []</span></span>
<span class="line"><span style="color:#F286C4;">typeof</span><span style="color:#F6F6F4;"> a</span><span style="color:#7B7F8B;">//&#39;object&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">a </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Array</span><span style="color:#7B7F8B;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">y</span><span style="color:#F6F6F4;">{}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">y</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">t </span><span style="color:#F286C4;">instanceof</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">y</span><span style="color:#7B7F8B;">//true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> a</span><span style="color:#6A737D;">//&#39;object&#39;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#6A737D;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">y</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">y</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">t </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">y</span><span style="color:#6A737D;">//true</span></span></code></pre></div><h3 id="动态类型-类型转换" tabindex="-1">动态类型&amp;类型转换 <a class="header-anchor" href="#动态类型-类型转换" aria-label="Permalink to &quot;动态类型&amp;类型转换&quot;">​</a></h3><p>作为动态语言，JS允许同一个变量在不同时间用作不同类型。</p><h4 id="使用javascript函数转换" tabindex="-1">使用JavaScript函数转换 <a class="header-anchor" href="#使用javascript函数转换" aria-label="Permalink to &quot;使用JavaScript函数转换&quot;">​</a></h4><p>例如全局方法（构造函数）String()、Number()、Date()以及变量的toString()方法等。不同类型还会有独有的方法比如Date变量的getDate()、getDay()，Number变量的toPrecision()等。</p><h4 id="使用javascript自动转换" tabindex="-1">使用JavaScript自动转换 <a class="header-anchor" href="#使用javascript自动转换" aria-label="Permalink to &quot;使用JavaScript自动转换&quot;">​</a></h4><p>变量类型会根据需要发生类型转换，例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//5 因为null=0</span></span>
<span class="line"><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//NaN 因为undefined转为数字是NaN</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//&quot;0null&quot; 因为null=&quot;null&quot;</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//&quot;51&quot; 因为1=&quot;1&quot;</span></span>
<span class="line"><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//&quot;51&quot; 因为1=&quot;1&quot;</span></span>
<span class="line"><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">//4 因为&quot;5&quot;=5</span></span>
<span class="line"><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#7B7F8B;">//&quot;1,21&quot; 数组先转字符串，再加&quot;1&quot;</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">str</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//这里的代码将会执行，因为“str”可以转为true</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//5 因为null=0</span></span>
<span class="line"><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//NaN 因为undefined转为数字是NaN</span></span>
<span class="line"><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//&quot;0null&quot; 因为null=&quot;null&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//&quot;51&quot; 因为1=&quot;1&quot;</span></span>
<span class="line"><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//&quot;51&quot; 因为1=&quot;1&quot;</span></span>
<span class="line"><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//4 因为&quot;5&quot;=5</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#6A737D;">//&quot;1,21&quot; 数组先转字符串，再加&quot;1&quot;</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;str&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//这里的代码将会执行，因为“str”可以转为true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以观察到含字符串类型会转为字符串，没有或不能转字符串的话转数字（除加号以外，结果转数字）。</p><p>自动转换有一些基础规则，比如Boolean值的转换：true等于1，false等于0，空字符串、空数组和null等于0，非纯数字字符串转为NaN等。</p><p>有趣的是，&quot;0&quot;可以转为Boolean的“true”，但“0”转为数字0之后再转Boolean就会变成“false”。空数组也可以转“true”，转数字之后也为0。</p><h3 id="基本类型-引用类型" tabindex="-1">基本类型&amp;引用类型 <a class="header-anchor" href="#基本类型-引用类型" aria-label="Permalink to &quot;基本类型&amp;引用类型&quot;">​</a></h3><p>JS通过引用操作对象，引用类型变量的复制不会引起对象复制（可以理解为复制指针），但基本类型变量的复制会在内存中产生两份变量。</p><p><code>let a={}; let b=a; a.x=0; //a===b</code></p><p><code>let c=5; let d=c; c=6; //c!==d</code></p><h3 id="基本类型包装" tabindex="-1">基本类型包装 <a class="header-anchor" href="#基本类型包装" aria-label="Permalink to &quot;基本类型包装&quot;">​</a></h3><p>除了Object类型存储的是引用，所有类型都是基本类型（存储值），但除了null和undefined，他们都像对象一样拥有自己的方法。这不是因为基本类型具有方法，而是在调用基本类型的方法时，JS引擎自动包装了基本类型，调用结束后销毁对象。</p><p>因此，向基本类型添加属性是无效的，因为添加完成后临时对象即被销毁，但可以向其原型添加属性和方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">str</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">str.</span><span style="color:#62E884;">toUpperCase</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#7B7F8B;">/*</span></span>
<span class="line"><span style="color:#7B7F8B;">相当于做了这些事</span></span>
<span class="line"><span style="color:#7B7F8B;">var _str = new String(str)</span></span>
<span class="line"><span style="color:#7B7F8B;">str = _str.toUpperCase()</span></span>
<span class="line"><span style="color:#7B7F8B;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;str&#39;</span></span>
<span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">toUpperCase</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">相当于做了这些事</span></span>
<span class="line"><span style="color:#6A737D;">var _str = new String(str)</span></span>
<span class="line"><span style="color:#6A737D;">str = _str.toUpperCase()</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div><h2 id="变量声明-declaration" tabindex="-1">变量声明 Declaration <a class="header-anchor" href="#变量声明-declaration" aria-label="Permalink to &quot;变量声明 Declaration&quot;">​</a></h2><h3 id="var" tabindex="-1">var <a class="header-anchor" href="#var" aria-label="Permalink to &quot;var&quot;">​</a></h3><p>变量用var声明，不用var则作为全局变量。var声明的变量处于全局作用域或函数作用域。</p><h4 id="变量提升-hoisting" tabindex="-1">变量提升 Hoisting <a class="header-anchor" href="#变量提升-hoisting" aria-label="Permalink to &quot;变量提升 Hoisting&quot;">​</a></h4><p>用var声明的变量，可以在声明语句之前使用，但不会初始化（赋值）。因此访问他们虽然不会报错，但会得到undefined。</p><h3 id="let-const-es6" tabindex="-1">let&amp;const ES6 <a class="header-anchor" href="#let-const-es6" aria-label="Permalink to &quot;let&amp;const ES6&quot;">​</a></h3><p>ES6中新增了let与const关键字，分别代表块级作用域中的变量与常量，同时不允许重复声明，没有变量提升。</p><p>TIP</p><p>const定义的对象并非常量，const仅保持变量的值（即指针）不变，如果要声明对象常量，则应该使用Object.freeze()。</p><h4 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h4><p>由{}包裹的代码块。在for循环中，()与{}是父子块级作用域，也就是说{}用let或const声明的变量不会影响for循环计数。</p><p>块级作用域没有变量提升，可以防止在函数内使用上级变量时，后面声明的变量意外覆盖上级变量。</p><p>使用var声明变量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> h</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(h)</span></span>
<span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> h;</span><span style="color:#7B7F8B;">//覆盖了上级变量</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//undefined</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> h</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(h)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> h;</span><span style="color:#6A737D;">//覆盖了上级变量</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//undefined</span></span></code></pre></div><p>使用let声明变量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> h</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(h)</span><span style="color:#7B7F8B;">//暂时性死区</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> h;</span><span style="color:#7B7F8B;">//与当前作用域绑定，声明之前不可读取</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//ReferenceError: Cannot access &#39;h&#39; before initialization</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> h</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(h)</span><span style="color:#6A737D;">//暂时性死区</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> h;</span><span style="color:#6A737D;">//与当前作用域绑定，声明之前不可读取</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">print</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//ReferenceError: Cannot access &#39;h&#39; before initialization</span></span></code></pre></div><p>同时块间的隔离有助于减少冲突和出错。此前，JS只能用函数作用域来隔离变量，常用的方式就是匿名立即执行函数（匿名IIFE）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;">(){</span><span style="color:#F286C4;">var</span><span style="color:#F6F6F4;"> hours</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">}())</span></span>
<span class="line"><span style="color:#7B7F8B;">//等同于</span></span>
<span class="line"><span style="color:#F6F6F4;">{</span><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> hours</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">12</span><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> hours</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">}())</span></span>
<span class="line"><span style="color:#6A737D;">//等同于</span></span>
<span class="line"><span style="color:#24292E;">{</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> hours</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">}</span></span></code></pre></div><p>暂时性死区 temporal dead zone</p><p>let和const声明的变量会与代码块绑定，在声明前不能使用同名的上级环境变量，否则会引发报错。</p><h3 id="function" tabindex="-1">function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;function&quot;">​</a></h3><p>function关键字用于声明函数。</p><h3 id="class-es6" tabindex="-1">class ES6 <a class="header-anchor" href="#class-es6" aria-label="Permalink to &quot;class ES6&quot;">​</a></h3><p>class关键字用于声明类。</p><h3 id="import-es6" tabindex="-1">import ES6 <a class="header-anchor" href="#import-es6" aria-label="Permalink to &quot;import ES6&quot;">​</a></h3><p>import关键字用于导入其他模块的变量，这类变量被引用它的所有文件共享。</p><h3 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h3><p>var和function声明的全局变量会成为顶级对象（如window、global、self）的属性，而let、const、class、import不会。</p><h3 id="判断变量是否存在" tabindex="-1">判断变量是否存在 <a class="header-anchor" href="#判断变量是否存在" aria-label="Permalink to &quot;判断变量是否存在&quot;">​</a></h3><p>由于直接使用未声明的变量会报错，可以用try{}包裹代码，也可以用<code>typeof variable == &quot;undefined&quot;</code>判断。</p><h3 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h3><p>变量名由26字母的大小写、数字、“$“和”_“组成，不能用数字开头。甚至支持中文，但不建议使用，避免引发麻烦。</p><h2 id="函数-function" tabindex="-1">函数 Function <a class="header-anchor" href="#函数-function" aria-label="Permalink to &quot;函数 Function&quot;">​</a></h2><p>函数都是Function对象的实例，相比普通对象，函数多了可被调用的特征。</p><p>&#39;Function&#39;与‘function’的不同</p><p>‘Function’是JS的内置对象，而&#39;function&#39;是一个声明函数的关键字。</p><p>和其他语言函数的区别</p><p>由于JS是弱类型语言，函数无法指定形参类型与返回类型，同时也无法限制传入参数的个数，因此没有重载的特性。函数内部可以通过<strong>arguments对象</strong>获取实参。</p><h3 id="函数声明" tabindex="-1">函数声明 <a class="header-anchor" href="#函数声明" aria-label="Permalink to &quot;函数声明&quot;">​</a></h3><p>推荐使用函数表达式<code>let func=()=&gt;{}</code>或<code>let func=function(){}</code>为变量赋值，因此函数声明也遵循变量声明的规则。如果用<code>function func(){}</code>直接声明函数，ES5中函数声明能完整地提升，ES6虽然规定了行为类似let，但实际可能会先赋值为undefined，不同环境可能有不同的处理。</p><h3 id="参数传递" tabindex="-1">参数传递 <a class="header-anchor" href="#参数传递" aria-label="Permalink to &quot;参数传递&quot;">​</a></h3><p>JS中任何参数都只能通过值传递，不存在引用传参。传递对象时，实际上复制了“指针”。因而对指针本身做修改不会反映到对象上，指针只用于访问对象，但本身不是对象。</p><p>那些支持引用传参的语言，修改引用同时也会修改对象，这是JS和他们的不同。</p><h2 id="对象-obejct" tabindex="-1">对象 Obejct <a class="header-anchor" href="#对象-obejct" aria-label="Permalink to &quot;对象 Obejct&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><p>普通对象属性（<strong>数据属性</strong>）拥有4个描述符（Descriptor），分别是Configurable、Enumerable、Writable、Value，前三项默认值为true，Value默认值为undefined。</p><p>Configurable控制属性特性（包括getter与setter，但value除外）能否被修改、属性能否被delete，且只能从true变为false。Enumerable控制属性能否被for-in遍历。Writable和Value字面意思。</p><p><strong>访问器属性</strong>拥有2-4个特性，分别是Configurable、Enumerable、Getter?、Setter?。getter和setter的作用与其他语言一致。</p><p>属性描述符通过Obejct.defineProperty()、Object.defineProperties()、Object.getOwnPropertyDescriptor()写入和读取。</p><h2 id="运算符-operator" tabindex="-1">运算符 Operator <a class="header-anchor" href="#运算符-operator" aria-label="Permalink to &quot;运算符 Operator&quot;">​</a></h2><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><p><code>== === &gt; &lt; &gt;= &lt;= != !==</code></p><p>==表示在类型转换后相等，===表示类型和值都一样。除非需要用到==的特性，否则建议用===比较。</p><p>比较对象</p><p>对象的比较与原始值不同，比较的是引用，因此两个完全相同的数组不相等，除非他们是对同一处的引用。</p><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><p><code>+= /= *= -= %= 等</code></p><p>和其他语言用法相同。</p><h3 id="与-运算符" tabindex="-1">&#39;与&#39;运算符 <a class="header-anchor" href="#与-运算符" aria-label="Permalink to &quot;&#39;与&#39;运算符&quot;">​</a></h3><p><code>&amp;&amp;</code></p><p>‘与’运算符，如果左边表达式的值是false或可以转为false则返回左边表达式的值，否则返回右边表达式的值。</p><p>Boolean角度：&amp;&amp;只有当两边都为true，结果才为true，如果左边结果为false，右边不会判断。</p><h3 id="或-运算符" tabindex="-1">&#39;或&#39;运算符 <a class="header-anchor" href="#或-运算符" aria-label="Permalink to &quot;&#39;或&#39;运算符&quot;">​</a></h3><p><code>||</code></p><p>‘或’运算符，如果左边表达式的值是true或可以转为true则返回左边表达式的值，否则返回右边表达式的值。</p><p>Boolean角度：||只有当两边都为false，结果才为false，如果左边结果为true，右边不会判断。</p><h3 id="扩展运算符es6" tabindex="-1">扩展运算符ES6 <a class="header-anchor" href="#扩展运算符es6" aria-label="Permalink to &quot;扩展运算符ES6&quot;">​</a></h3><p><code>...</code></p><p>ES6中的扩展运算符，用在数组或对象前表示取出所有项或属性。</p><h4 id="用于对象" tabindex="-1">用于对象 <a class="header-anchor" href="#用于对象" aria-label="Permalink to &quot;用于对象&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> obj</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{a</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,b</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newObj</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">obj,c</span><span style="color:#F286C4;">:</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">}</span><span style="color:#7B7F8B;">//{ a: 1, b: 2, c: 3 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{a:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,b:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newObj</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">obj,c:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span><span style="color:#6A737D;">//{ a: 1, b: 2, c: 3 }</span></span></code></pre></div><h4 id="用于数组" tabindex="-1">用于数组 <a class="header-anchor" href="#用于数组" aria-label="Permalink to &quot;用于数组&quot;">​</a></h4><h5 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h5><p>生成数组的拷贝。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> newArr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">]</span><span style="color:#7B7F8B;">//[ 0, 1, 2, 3, 4 ]</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr_copy</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> newArr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span><span style="color:#6A737D;">//[ 0, 1, 2, 3, 4 ]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr_copy</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr]</span></span></code></pre></div><h5 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h5><p>结合解构赋值，它还提供了生成数组的方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr_copy]</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [ar1,</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">ar2]</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F6F6F4;">ar1</span><span style="color:#7B7F8B;">//0</span></span>
<span class="line"><span style="color:#F6F6F4;">ar2</span><span style="color:#7B7F8B;">//[ 1, 2, 3 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> [</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">ar3,ar4]</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#7B7F8B;">//SyntaxError: Rest element must be last element</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr_copy]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [ar1,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">ar2]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">ar1</span><span style="color:#6A737D;">//0</span></span>
<span class="line"><span style="color:#24292E;">ar2</span><span style="color:#6A737D;">//[ 1, 2, 3 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">ar3,ar4]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//SyntaxError: Rest element must be last element</span></span></code></pre></div><h4 id="一个分号引发的惨案" tabindex="-1">一个分号引发的惨案 <a class="header-anchor" href="#一个分号引发的惨案" aria-label="Permalink to &quot;一个分号引发的惨案&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> val </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">func</span><span style="color:#F6F6F4;">()</span><span style="color:#7B7F8B;">//;</span></span>
<span class="line"><span style="color:#F6F6F4;">[a,b]</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[b,a] 或 [a[c],b[c]]</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[b[c],a[c]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">()</span><span style="color:#6A737D;">//;</span></span>
<span class="line"><span style="color:#24292E;">[a,b]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[b,a] 或 [a[c],b[c]]</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[b[c],a[c]]</span></span></code></pre></div><p>如果缺少分号，JS解析会出现错误，原因是两行连在一起也符合语法规则。这种情况下</p><h4 id="用于函数参数" tabindex="-1">用于函数参数 <a class="header-anchor" href="#用于函数参数" aria-label="Permalink to &quot;用于函数参数&quot;">​</a></h4><p>除了为数组赋值，还支持作为函数参数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> arr</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">]</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F6F6F4;">,</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> a</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">b</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">arr)</span><span style="color:#7B7F8B;">//1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">arr)</span><span style="color:#6A737D;">//1</span></span></code></pre></div><p>TIP</p><p>任何含Iterator接口的对象都可以通过扩展运算符转为真正的数组。详情见<a href="#iterable接口">iterable接口</a>。</p><h3 id="基本运算" tabindex="-1">基本运算 <a class="header-anchor" href="#基本运算" aria-label="Permalink to &quot;基本运算&quot;">​</a></h3><p><code>! + - * / % ++ --</code></p><p>可以用于各种类型间的运算，不限于数字。</p><h3 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h3><p><code>&lt;&lt; &gt;&gt; ～ &amp; ｜^ &gt;&gt;&gt;</code></p><p>和其他语言用法相同。JS内部虽然存储64位数值，但对程序员透明，位运算符的结果和32位数值运算的结果一致。</p><h3 id="三目运算符" tabindex="-1">三目运算符 <a class="header-anchor" href="#三目运算符" aria-label="Permalink to &quot;三目运算符&quot;">​</a></h3><p><code>expression1 ? expression2 : expression3</code></p><p>等同于</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">expression1</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">expression2</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">expression3</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (expression1) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> expression2;</span></span>
<span class="line"><span style="color:#F6F6F4;">  } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> expression3;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">((</span><span style="color:#E36209;">expression1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">expression2</span><span style="color:#24292E;">, </span><span style="color:#E36209;">expression3</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (expression1) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> expression2;</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> expression3;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>&#39;expression&#39;与&#39;statement&#39;</p><p>expression即表达式，是一段有值的语句，比如变量x，函数f或者其执行结果f()。其他语言中函数一般不能视作expression，但JS中函数是对象，这是特例。</p><p>statement意为声明，比如<code>let a=10</code>，或者<code>if(code){code}</code>，这些语句不返回结果，而是提醒处理器该做什么。</p><h3 id="方括号" tabindex="-1">方括号 <a class="header-anchor" href="#方括号" aria-label="Permalink to &quot;方括号&quot;">​</a></h3><p><code>[]</code></p><p>属性访问器。最常用的是表示数组<code>[1,2,3]</code>与数组下标<code>arr[1]</code>，也可以作为对象的属性名<code>obj[&#39;key&#39;]</code>，支持使用变量作为属性名<code>obj[key]</code>（key不仅可以是符合规则的字符串，也可以是Symbol）。</p><h3 id="点运算符" tabindex="-1">点运算符 <a class="header-anchor" href="#点运算符" aria-label="Permalink to &quot;点运算符&quot;">​</a></h3><p><code>.</code></p><p>属性访问器。点运算符的功能是[]的子集，当属性名为常量时可以用于设置、获取对象属性<code>obj.key</code>。</p><h2 id="循环体-loop" tabindex="-1">循环体 Loop <a class="header-anchor" href="#循环体-loop" aria-label="Permalink to &quot;循环体 Loop&quot;">​</a></h2><h3 id="while" tabindex="-1">while <a class="header-anchor" href="#while" aria-label="Permalink to &quot;while&quot;">​</a></h3><p><code>while(expression){}</code></p><h3 id="do-while" tabindex="-1">do...while <a class="header-anchor" href="#do-while" aria-label="Permalink to &quot;do...while&quot;">​</a></h3><p><code>do{statement}while(expression)</code></p><h3 id="foreach" tabindex="-1">forEach <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach&quot;">​</a></h3><p><code>Array.prototype.forEach(function(currentValue, index, arr), thisValue)</code></p><p>由于是以传入函数的形式遍历，forEach无法使用return从外部函数体返回，由于是数组的一种方法，也不支持break跳出循环。</p><h3 id="for-in" tabindex="-1">for…in <a class="header-anchor" href="#for-in" aria-label="Permalink to &quot;for…in&quot;">​</a></h3><p><code>for(let item in obj)</code></p><p>for…in支持遍历各种对象，它的item是对象的key，总是string类型。这种方法不稳定，不同时候结果的顺序可能不一致。如果用于数组，还有一个问题是所有属性也包括数组元素以外的自定义属性。</p><h3 id="for-of-es6" tabindex="-1">for…of ES6 <a class="header-anchor" href="#for-of-es6" aria-label="Permalink to &quot;for…of ES6&quot;">​</a></h3><p><code>for(let item of obj)</code></p><p>首先，它没有for…in的缺点，其次，也没有forEach的缺点。for…of支持数组、字符串、Set、Map和其他有iterable接口的对象，但不支持普通对象（会提示<code>is not iterable</code>）。</p><h3 id="循环控制" tabindex="-1">循环控制 <a class="header-anchor" href="#循环控制" aria-label="Permalink to &quot;循环控制&quot;">​</a></h3><p>在循环体中使用continue或break可以跳过一次循环/退出循环。对于嵌套循环结构，JS提供了label关键字标记循环。</p><p><code>label: statement</code></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">loop1: </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  loop2: </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;"> loop1;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">loop1</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">loop2</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loop1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="控制语句-statement" tabindex="-1">控制语句 statement <a class="header-anchor" href="#控制语句-statement" aria-label="Permalink to &quot;控制语句 statement&quot;">​</a></h2><h3 id="if语句" tabindex="-1">If语句 <a class="header-anchor" href="#if语句" aria-label="Permalink to &quot;If语句&quot;">​</a></h3><p><code>if(expressionA){}else if(expressionB){}...else{}</code></p><h3 id="switch语句" tabindex="-1">Switch语句 <a class="header-anchor" href="#switch语句" aria-label="Permalink to &quot;Switch语句&quot;">​</a></h3><p><code>switch(expression)case expression:statement break;...default:</code></p><h2 id="部分关键字-keywords" tabindex="-1">部分关键字 Keywords <a class="header-anchor" href="#部分关键字-keywords" aria-label="Permalink to &quot;部分关键字 Keywords&quot;">​</a></h2><h3 id="new" tabindex="-1">new <a class="header-anchor" href="#new" aria-label="Permalink to &quot;new&quot;">​</a></h3><p>从构造函数派生出对象，构造函数的this指向创建的对象。</p><h3 id="delete" tabindex="-1">delete <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete&quot;">​</a></h3><p>用于删除对象属性，不可用于删除对象。</p><h3 id="throw" tabindex="-1">throw <a class="header-anchor" href="#throw" aria-label="Permalink to &quot;throw&quot;">​</a></h3><p>抛出异常。通常结合try...catch使用。</p><h3 id="async-yield" tabindex="-1">async&amp;yield <a class="header-anchor" href="#async-yield" aria-label="Permalink to &quot;async&amp;yield&quot;">​</a></h3><p>被异步函数的一种写法需要。作为语法糖可以被链式调用替代。</p><h2 id="错误处理-error-handling" tabindex="-1">错误处理 Error Handling <a class="header-anchor" href="#错误处理-error-handling" aria-label="Permalink to &quot;错误处理 Error Handling&quot;">​</a></h2><h3 id="try-catch语法" tabindex="-1">try...catch语法 <a class="header-anchor" href="#try-catch语法" aria-label="Permalink to &quot;try...catch语法&quot;">​</a></h3><h4 id="try-catch" tabindex="-1">try...catch <a class="header-anchor" href="#try-catch" aria-label="Permalink to &quot;try...catch&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">//insert code here</span></span>
<span class="line"><span style="color:#F6F6F4;">  a.b</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">c</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(err) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Error catched: </span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">err)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">//insert code here</span></span>
<span class="line"><span style="color:#24292E;">  a.b</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">c</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error catched: &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="throw-1" tabindex="-1">throw <a class="header-anchor" href="#throw-1" aria-label="Permalink to &quot;throw&quot;">​</a></h4><p>抛出自定义错误。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Number is too big</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(err) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  console.</span><span style="color:#62E884;">error</span><span style="color:#F6F6F4;">(err)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Number is too big&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="finally" tabindex="-1">finally <a class="header-anchor" href="#finally" aria-label="Permalink to &quot;finally&quot;">​</a></h4><p>无论是否发生错误都会执行的语句。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;">(err) {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(err) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="error对象与类型" tabindex="-1">Error对象与类型 <a class="header-anchor" href="#error对象与类型" aria-label="Permalink to &quot;Error对象与类型&quot;">​</a></h3><p>如果是内置错误（非throw抛出），抛出的是一个Error对象。包括name和message属性。</p><table><thead><tr><th>错误类型（Error.name）</th><th>触发条件</th></tr></thead><tbody><tr><td>ReferenceError</td><td>引用了尚未声明的变量。</td></tr><tr><td>SyntaxError</td><td>语法错误。</td></tr><tr><td>TypeError</td><td>类型错误。如<code>xxx is not a function</code>。</td></tr><tr><td>URIError</td><td>URI函数的独有报错。</td></tr><tr><td>rangeError</td><td>Number方法的独有报错。</td></tr><tr><td>EvalError</td><td>eval()</td></tr></tbody></table><h2 id="参考目录" tabindex="-1">参考目录 <a class="header-anchor" href="#参考目录" aria-label="Permalink to &quot;参考目录&quot;">​</a></h2><ol><li>this <a href="https://www.cnblogs.com/xiaohuochai/p/5735901.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/xiaohuochai/p/5735901.html</a></li><li>JavaScript <a href="https://www.liaoxuefeng.com/wiki/1022910821149312" target="_blank" rel="noreferrer">https://www.liaoxuefeng.com/wiki/1022910821149312</a></li><li>ECMA Script 6 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="noreferrer">http://es6.ruanyifeng.com/</a></li><li>Execution Context <a href="https://juejin.im/entry/58edde2761ff4b00581b93ff" target="_blank" rel="noreferrer">https://juejin.im/entry/58edde2761ff4b00581b93ff</a></li><li>Symbol <a href="https://www.cnblogs.com/diligenceday/p/5462733.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/diligenceday/p/5462733.html</a></li><li>MDN</li><li>runoob</li></ol>`,297),e=[o];function t(c,r,y,F,i,E){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
