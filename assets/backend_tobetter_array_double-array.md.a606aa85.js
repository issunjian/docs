import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const C=JSON.parse('{"title":"掌握 Java二维数组：从基本概念到实际应用","description":"本文深入讲解了Java二维数组的基本概念、创建方法、初始化方法以及常用操作。通过阅读本文，您将了解到如何定义二维数组、创建和初始化二维数组，以及如何进行二维数组的常见操作，如添加、删除、查询等。本文将帮助您快速掌握Java二维数组的使用方法和技巧（打印杨辉三角）。","frontmatter":{"title":"掌握 Java二维数组：从基本概念到实际应用","shortTitle":"掌握Java二维数组","category":["Java核心"],"tag":["数组&字符串"],"description":"本文深入讲解了Java二维数组的基本概念、创建方法、初始化方法以及常用操作。通过阅读本文，您将了解到如何定义二维数组、创建和初始化二维数组，以及如何进行二维数组的常见操作，如添加、删除、查询等。本文将帮助您快速掌握Java二维数组的使用方法和技巧（打印杨辉三角）。","head":[["meta",{"name":"keywords","content":"Java, 二维数组, 创建二维数组, 初始化二维数组, 数组操作, 多维数组"}]]},"headers":[],"relativePath":"backend/tobetter/array/double-array.md","filePath":"backend/tobetter/array/double-array.md"}'),p={name:"backend/tobetter/array/double-array.md"},o=l(`<h1 id="_4-2-掌握java二维数组" tabindex="-1">4.2 掌握Java二维数组 <a class="header-anchor" href="#_4-2-掌握java二维数组" aria-label="Permalink to &quot;4.2 掌握Java二维数组&quot;">​</a></h1><p>“二哥，今天我们简单过一下二维数组吧，挺简单的。”三妹放下手机对我说。</p><p>“好啊，本来不打算讲了，因为开发中用的其实不多，也很简单，就从一维到二维，也没啥可讲的，就简单聊聊吧。”我掐灭了手中的华子，长呼一口烟，飘过三妹的头顶，引起一阵轻微的咳嗽声（😂）</p><h3 id="_01、什么是二维数组" tabindex="-1">01、什么是二维数组 <a class="header-anchor" href="#_01、什么是二维数组" aria-label="Permalink to &quot;01、什么是二维数组&quot;">​</a></h3><p>二维数组是一种数据类型，可以存储多行和多列的数据。它由一系列的行和列组成，每个元素都可以通过一个行索引和列索引来访问。例如，一个3行4列的二维数组可以表示为以下形式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">array </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">  [a, b, c, d],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [e, f, g, h],</span></span>
<span class="line"><span style="color:#F6F6F4;">  [i, j, k, l]</span></span>
<span class="line"><span style="color:#F6F6F4;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  [a, b, c, d],</span></span>
<span class="line"><span style="color:#24292E;">  [e, f, g, h],</span></span>
<span class="line"><span style="color:#24292E;">  [i, j, k, l]</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><p>在这个例子中，第一行有4个元素，第二行有4个元素，第三行有4个元素，每个元素都有一个行索引和一个列索引。例如，元素 array[1][2] 是第2行第3列的元素，它的值是 g。</p><p>使用二维数组可以有效地存储和处理表格数据，如矩阵、图像、地图等等。</p><h3 id="_02、创建二维数组" tabindex="-1">02、创建二维数组 <a class="header-anchor" href="#_02、创建二维数组" aria-label="Permalink to &quot;02、创建二维数组&quot;">​</a></h3><p>要在 Java 中创建二维数组，你必须指定要存储在数组中的数据类型，后跟两个方括号和数组的名称。</p><p>语法如下所示：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">data_type[][] array_name;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">data_type[][] array_name;</span></span></code></pre></div><p>让我们看一个代码示例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][] oddNumbers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">} };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] oddNumbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">} };</span></span></code></pre></div><h3 id="_03、访问二维数组中的元素" tabindex="-1">03、访问二维数组中的元素 <a class="header-anchor" href="#_03、访问二维数组中的元素" aria-label="Permalink to &quot;03、访问二维数组中的元素&quot;">​</a></h3><p>我们可以使用两个方括号来访问二维中的元素。</p><p>第一个表示我们要从中访问元素的数组，而第二个表示我们要访问的元素索引。</p><p>让我们用一个例子来简化上面的解释：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][] oddNumbers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">} };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(oddNumbers[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">][</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] oddNumbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">} };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(oddNumbers[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>在上面的示例中，<code>oddNumbers</code> 数组中有两个数组——<code>{1, 3, 5, 7}</code> 和 <code>{9, 11, 13, 15}</code>。</p><p>第一个数组——<code>{1, 3, 5, 7}</code>——用 0 表示。</p><p>第二个数组——<code>{9, 11, 13, 15}</code>——用 1 表示。</p><p>第一个数组是 0，第二个是 1，第三个是 2，依此类推。</p><p>因此，要访问第一个数组中的项目，我们将 0 分配给第一个方括号。由于我们试图访问数组中的第一项，我们将使用它的索引，即 0：<code>oddNumbers[0][0]</code>。</p><p>让我们进一步分解它。</p><p>这是访问元素的代码：<code>oddNumbers[?][?]</code>。</p><p>我在两个方括号中都加上了问号——随着进展填写它们。</p><p>假设我们要访问第二个数组中的元素，我们的代码将如下所示：<code>oddNumbers[1][?]</code>。</p><p>现在我们要在第二个数组（<code>{9, 11, 13, 15}</code>）中尝试访问其中一个元素。就像一维数组一样，每个元素都有一个从零开始的索引。</p><p>因此，要访问第三个元素 <code>13</code>，我们将其索引号传递给第二个方括号：<code>oddNumbers[1][2]</code>。</p><p>来看这样一个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][] oddNumbers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">17</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">19</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">21</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">} };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] oddNumbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">} };</span></span></code></pre></div><p>我们的目标是访问第三个数组中的 21。访问方式仍然通过问号来表示：<code>oddNumbers[?][?]</code>。</p><p>我们首先给第一个问号一个指向要访问的特定数组的值。</p><p>数组 0 =&gt; <code>{1, 3, 5, 7}</code></p><p>数组 1 =&gt; <code>{9, 11, 13, 15}</code></p><p>数组 2 =&gt; <code>{17, 19, 21, 23}</code></p><p>我们要查找的数字在第三个数组中，所以是：<code>oddNumbers[2][?]</code>。</p><p>第二个方括号的值将指向要访问的元素。为此，我们必须指定元素的索引。以下是该数组中的索引：</p><p>17 =&gt; 索引 0</p><p>19 =&gt; 索引 1</p><p>21 =&gt; 索引 2</p><p>23 =&gt; 索引 3</p><p>21 的索引为 2，因此我们可以将其添加到第二个方括号：<code>oddNumbers[2][2]</code>。当你将其打印到控制台时，将会打印出 21。</p><p>代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][] oddNumbers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">17</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">19</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">21</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">} };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(oddNumbers[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">][</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">]);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 21</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] oddNumbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">} };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(oddNumbers[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">][</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 21</span></span></code></pre></div><p>你可以使用嵌套循环，遍历二维数组中的所有项目。这是一个例子：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][] oddNumbers </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> { {</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">9</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">11</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">13</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">15</span><span style="color:#F6F6F4;">}, {</span><span style="color:#BF9EEE;">17</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">19</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">21</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">} };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> oddNumbers.length; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> oddNumbers[i].length; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(oddNumbers[i][j]);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }   </span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 1</span></span>
<span class="line"><span style="color:#7B7F8B;">// 3</span></span>
<span class="line"><span style="color:#7B7F8B;">// 5</span></span>
<span class="line"><span style="color:#7B7F8B;">// 7</span></span>
<span class="line"><span style="color:#7B7F8B;">// 9</span></span>
<span class="line"><span style="color:#7B7F8B;">// 11</span></span>
<span class="line"><span style="color:#7B7F8B;">// 13</span></span>
<span class="line"><span style="color:#7B7F8B;">// 15</span></span>
<span class="line"><span style="color:#7B7F8B;">// 17</span></span>
<span class="line"><span style="color:#7B7F8B;">// 19</span></span>
<span class="line"><span style="color:#7B7F8B;">// 21</span></span>
<span class="line"><span style="color:#7B7F8B;">// 23</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] oddNumbers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">}, {</span><span style="color:#005CC5;">17</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">21</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">} };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> oddNumbers.length; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> oddNumbers[i].length; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(oddNumbers[i][j]);</span></span>
<span class="line"><span style="color:#24292E;">    }   </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#6A737D;">// 5</span></span>
<span class="line"><span style="color:#6A737D;">// 7</span></span>
<span class="line"><span style="color:#6A737D;">// 9</span></span>
<span class="line"><span style="color:#6A737D;">// 11</span></span>
<span class="line"><span style="color:#6A737D;">// 13</span></span>
<span class="line"><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#6A737D;">// 17</span></span>
<span class="line"><span style="color:#6A737D;">// 19</span></span>
<span class="line"><span style="color:#6A737D;">// 21</span></span>
<span class="line"><span style="color:#6A737D;">// 23</span></span></code></pre></div><p>上面的代码将会打印出 <code>oddNumbers</code> 数组中的所有项目。</p><h3 id="_04、二维数组打印杨辉三角" tabindex="-1">04、二维数组打印杨辉三角 <a class="header-anchor" href="#_04、二维数组打印杨辉三角" aria-label="Permalink to &quot;04、二维数组打印杨辉三角&quot;">​</a></h3><p>“三妹，上次学一维数组的时候留了一道题，要你尝试用二维数组打印杨辉三角，你试过了吗？”</p><p>“搞过了，你看我的代码。”</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">YangHuiTriangle</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> input </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">请输入要打印的行数：</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> n </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> input.</span><span style="color:#62E884;">nextInt</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">printYangHuiTriangle</span><span style="color:#F6F6F4;">(n);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">printYangHuiTriangle</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[][] triangle </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[n][n];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> n; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 每行的第一个和最后一个数字都是1</span></span>
<span class="line"><span style="color:#F6F6F4;">            triangle[i][</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            triangle[i][i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> i; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 其他数字是上一行的两个数字之和</span></span>
<span class="line"><span style="color:#F6F6F4;">                triangle[i][j] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> triangle[i </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">][j </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> triangle[i </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">][j];</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 打印杨辉三角</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> n; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> i; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(triangle[i][j] </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">YangHuiTriangle</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        Scanner input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请输入要打印的行数：&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> input.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">printYangHuiTriangle</span><span style="color:#24292E;">(n);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printYangHuiTriangle</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[][] triangle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[n][n];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 每行的第一个和最后一个数字都是1</span></span>
<span class="line"><span style="color:#24292E;">            triangle[i][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            triangle[i][i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 其他数字是上一行的两个数字之和</span></span>
<span class="line"><span style="color:#24292E;">                triangle[i][j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> triangle[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> triangle[i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">][j];</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 打印杨辉三角</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> i; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(triangle[i][j] </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>“这段代码使用了一个二维数组来存储杨辉三角中的数字。首先，程序要求用户输入要打印的行数，然后调用 printYangHuiTriangle 方法来生成和打印杨辉三角。在 printYangHuiTriangle 方法中，程序使用了一个嵌套的 for 循环来计算杨辉三角中的每个数字，并将结果存储在二维数组 triangle 中。最后，程序再次使用循环来遍历数组并打印出杨辉三角中的数字。”三妹认真地解释道。</p><p>“哎呀，不错呀，代码写的挺标准，都知道用 Scanner 类和控制台交互了呀！”见三妹有这样的表现，我忍不住心里乐开了花，这些天的学习也终于有了成果啊，真不错！</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">请输入要打印的行数：6</span></span>
<span class="line"><span style="color:#f6f6f4;">1 </span></span>
<span class="line"><span style="color:#f6f6f4;">1 1 </span></span>
<span class="line"><span style="color:#f6f6f4;">1 2 1 </span></span>
<span class="line"><span style="color:#f6f6f4;">1 3 3 1 </span></span>
<span class="line"><span style="color:#f6f6f4;">1 4 6 4 1 </span></span>
<span class="line"><span style="color:#f6f6f4;">1 5 10 10 5 1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">请输入要打印的行数：6</span></span>
<span class="line"><span style="color:#24292e;">1 </span></span>
<span class="line"><span style="color:#24292e;">1 1 </span></span>
<span class="line"><span style="color:#24292e;">1 2 1 </span></span>
<span class="line"><span style="color:#24292e;">1 3 3 1 </span></span>
<span class="line"><span style="color:#24292e;">1 4 6 4 1 </span></span>
<span class="line"><span style="color:#24292e;">1 5 10 10 5 1</span></span></code></pre></div><hr>`,57),e=[o];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{C as __pageData,u as default};
