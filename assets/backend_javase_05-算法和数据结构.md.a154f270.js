import{_ as n,o as a,c as l,V as p}from"./chunks/framework.c6d8cbec.js";const o="/docs/assets/1667458681721.491ca816.png",t="/docs/assets/1667459056681.52473b86.png",s="/docs/assets/1667464274934.bcc31b80.png",e="/docs/assets/1667464896645.dad92e54.png",c="/docs/assets/1667402734025.32a802e7.png",r="/docs/assets/1667403334232.d53b0eb9.png",y="/docs/assets/1667403618904.0aa17080.png",F="/docs/assets/1667467347586.b79e0b64.png",E="/docs/assets/1667467611576.504cf692.png",i="/docs/assets/1667468412882.4aebb1e3.png",u="/docs/assets/1667468712516.de9109a5.png",C="/docs/assets/1667469085970.a4f813ac.png",D="/docs/assets/1667469259345.b28964a7.png",d="/docs/assets/1667469722842.6e579e44.png",A="/docs/assets/1667469943451.51eda8f1.png",j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/javase/05-算法和数据结构.md","filePath":"backend/javase/05-算法和数据结构.md"}'),g={name:"backend/javase/05-算法和数据结构.md"},q=p('<h2 id="算法和数据结构" tabindex="-1">算法和数据结构 <a class="header-anchor" href="#算法和数据结构" aria-label="Permalink to &quot;算法和数据结构&quot;">​</a></h2><h2 id="一、arrays类" tabindex="-1">一、Arrays类 <a class="header-anchor" href="#一、arrays类" aria-label="Permalink to &quot;一、Arrays类&quot;">​</a></h2><p>接下来我们学习的类叫做Arrays，其实Arrays并不是重点，但是我们通过Arrays这个类的学习有助于我们理解下一个知识点Lambda的学习。所以我们这里先学习Arrays，再通过Arrays来学习Lamdba这样学习会更丝滑一些_.</p><h3 id="_1-1-arrays基本使用" tabindex="-1">1.1 Arrays基本使用 <a class="header-anchor" href="#_1-1-arrays基本使用" aria-label="Permalink to &quot;1.1 Arrays基本使用&quot;">​</a></h3><p>我们先认识一下Arrays是干什么用的，Arrays是操作数组的工具类，它可以很方便的对数组中的元素进行遍历、拷贝、排序等操作。</p><p>下面我们用代码来演示一下：<strong>遍历、拷贝、排序等操作</strong>。需要用到的方法如下</p><img src="'+o+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握Arrays类的常用方法。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArraysTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、public static String toString(类型[] arr): 返回数组的内容</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">30</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">40</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">50</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、public static 类型[] copyOfRange(类型[] arr, 起始索引, 结束索引) ：拷贝数组（指定范围，包前不包后）</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOfRange</span><span style="color:#F6F6F4;">(arr, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(arr2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、public static copyOf(类型[] arr, int newLength)：拷贝数组，可以指定新数组的长度。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Arrays.</span><span style="color:#62E884;">copyOf</span><span style="color:#F6F6F4;">(arr, </span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(arr3));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、public static setAll(double[] array, IntToDoubleFunction generator)：把数组中的原数据改为新数据又存进去。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;">[] prices </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">99.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//                  0     1    2</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 把所有的价格都打八折，然后又存进去。</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IntToDoubleFunction</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#62E884;"> applyAsDouble(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// value = 0  1  2</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#62E884;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#62E884;">;</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(prices));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 5、public static void sort(类型[] arr)：对数组进行排序(默认是升序排序)</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(prices);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(prices));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握Arrays类的常用方法。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArraysTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、public static String toString(类型[] arr): 返回数组的内容</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">40</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(arr));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、public static 类型[] copyOfRange(类型[] arr, 起始索引, 结束索引) ：拷贝数组（指定范围，包前不包后）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOfRange</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(arr2));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、public static copyOf(类型[] arr, int newLength)：拷贝数组，可以指定新数组的长度。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">copyOf</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(arr3));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、public static setAll(double[] array, IntToDoubleFunction generator)：把数组中的原数据改为新数据又存进去。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] prices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">99.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//                  0     1    2</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 把所有的价格都打八折，然后又存进去。</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntToDoubleFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyAsDouble</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// value = 0  1  2</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(prices));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 5、public static void sort(类型[] arr)：对数组进行排序(默认是升序排序)</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(prices);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(prices));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_1-2-arrays操作对象数组" tabindex="-1">1.2 Arrays操作对象数组 <a class="header-anchor" href="#_1-2-arrays操作对象数组" aria-label="Permalink to &quot;1.2 Arrays操作对象数组&quot;">​</a></h3><p>刚才我们使用Arrays操作数组时，数组中存储存储的元素是int类型、double类型，是可以直接排序的，而且默认是升序排列。</p><p>如果数组中存储的元素类型是自定义的对象，如何排序呢？接下来，我们就学习一下Arrays如何对对象数组进行排序。</p><p>首先我们要准备一个Student类，代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparable</span><span style="color:#F6F6F4;">&lt;Student&gt;{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.height </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	@</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Student{</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name=&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\&#39;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, height=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> height </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, age=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">}</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">height</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">age</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.height </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> age;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	@</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Student{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name=&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, height=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, age=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后再写一个测试类，往数组中存储4个学生对象，代码如下。此时，运行代码你会发现是会报错的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArraysTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 目标：掌握如何对数组中的对象进行排序。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[] students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">169.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">167.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、public static void sort(类型[] arr)：对数组进行排序。</span></span>
<span class="line"><span style="color:#F6F6F4;">		Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students);</span></span>
<span class="line"><span style="color:#F6F6F4;">		System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(students));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArraysTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标：掌握如何对数组中的对象进行排序。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[] students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">169.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">167.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、public static void sort(类型[] arr)：对数组进行排序。</span></span>
<span class="line"><span style="color:#24292E;">		Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students);</span></span>
<span class="line"><span style="color:#24292E;">		System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(students));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><img src="`+t+`"><p>上面的代码为什么会报错呢？因为Arrays根本就不知道按照什么规则进行排序。为了让Arrays知道按照什么规则排序，我们有如下的两种办法。</p><ul><li>**排序方式1：**让Student类实现Comparable接口，同时重写compareTo方法。Arrays的sort方法底层会根据compareTo方法的返回值是正数、负数、还是0来确定谁大、谁小、谁相等。代码如下：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparable</span><span style="color:#F6F6F4;">&lt;Student&gt;{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> height;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//...get、set、空参数构造方法、有参数构造方法...自己补全</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 指定比较规则</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// this  o</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compareTo</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 约定1：认为左边对象 大于 右边对象 请您返回正整数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 约定2：认为左边对象 小于 右边对象 请您返回负整数</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 约定3：认为左边对象 等于 右边对象 请您一定返回0</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">/* if(this.age &gt; o.age){</span></span>
<span class="line"><span style="color:#7B7F8B;">            return 1;</span></span>
<span class="line"><span style="color:#7B7F8B;">        }else if(this.age &lt; o.age){</span></span>
<span class="line"><span style="color:#7B7F8B;">            return -1;</span></span>
<span class="line"><span style="color:#7B7F8B;">        }</span></span>
<span class="line"><span style="color:#7B7F8B;">        return 0;*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//上面的if语句，也可以简化为下面的一行代码</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.age </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> o.age; </span><span style="color:#7B7F8B;">// 按照年龄升序排列</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// return o.age - this.age; // 按照年龄降序排列</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Student{</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name=&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\&#39;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, height=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> height </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, age=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> age </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">}</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Comparable</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//...get、set、空参数构造方法、有参数构造方法...自己补全</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 指定比较规则</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// this  o</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareTo</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 约定1：认为左边对象 大于 右边对象 请您返回正整数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 约定2：认为左边对象 小于 右边对象 请您返回负整数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 约定3：认为左边对象 等于 右边对象 请您一定返回0</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">/* if(this.age &gt; o.age){</span></span>
<span class="line"><span style="color:#6A737D;">            return 1;</span></span>
<span class="line"><span style="color:#6A737D;">        }else if(this.age &lt; o.age){</span></span>
<span class="line"><span style="color:#6A737D;">            return -1;</span></span>
<span class="line"><span style="color:#6A737D;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        return 0;*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//上面的if语句，也可以简化为下面的一行代码</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.age </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o.age; </span><span style="color:#6A737D;">// 按照年龄升序排列</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// return o.age - this.age; // 按照年龄降序排列</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Student{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name=&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, height=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> height </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, age=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> age </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>**排序方式2：**在调用<code>Arrays.sort(数组,Comparator比较器);</code>时，除了传递数组之外，传递一个Comparator比较器对象。Arrays的sort方法底层会根据Comparator比较器对象的compare方法方法的返回值是正数、负数、还是0来确定谁大、谁小、谁相等。代码如下</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ArraysTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 目标：掌握如何对数组中的对象进行排序。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[] students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">169.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">167.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 2、public static &lt;T&gt; void sort(T[] arr, Comparator&lt;? super T&gt; c)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 参数一：需要排序的数组</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 参数二：Comparator比较器对象（用来制定对象的比较规则）</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparator</span><span style="color:#F6F6F4;">&lt;Student&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> compare(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o1</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o2</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// 制定比较规则了：左边对象 o1   右边对象 o2</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// 约定1：认为左边对象 大于 右边对象 请您返回正整数</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// 约定2：认为左边对象 小于 右边对象 请您返回负整数</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// 约定3：认为左边对象 等于 右边对象 请您一定返回0</span></span>
<span class="line"><span style="color:#7B7F8B;">//                if(o1.getHeight() &gt; o2.getHeight()){</span></span>
<span class="line"><span style="color:#7B7F8B;">//                    return 1;</span></span>
<span class="line"><span style="color:#7B7F8B;">//                }else if(o1.getHeight() &lt; o2.getHeight()){</span></span>
<span class="line"><span style="color:#7B7F8B;">//                    return -1;</span></span>
<span class="line"><span style="color:#7B7F8B;">//                }</span></span>
<span class="line"><span style="color:#7B7F8B;">//                return 0; // 升序</span></span>
<span class="line"><span style="color:#62E884;">                 </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">Double</span><span style="color:#62E884;">.compare(</span><span style="color:#F6F6F4;">o1</span><span style="color:#62E884;">.getHeight(), </span><span style="color:#F6F6F4;">o2</span><span style="color:#62E884;">.getHeight()); </span><span style="color:#7B7F8B;">// 升序</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// return Double.compare(o2.getHeight(), o1.getHeight()); // 降序</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(students));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArraysTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标：掌握如何对数组中的对象进行排序。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[] students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">169.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">167.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 2、public static &lt;T&gt; void sort(T[] arr, Comparator&lt;? super T&gt; c)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 参数一：需要排序的数组</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 参数二：Comparator比较器对象（用来制定对象的比较规则）</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Student </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 制定比较规则了：左边对象 o1   右边对象 o2</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 约定1：认为左边对象 大于 右边对象 请您返回正整数</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 约定2：认为左边对象 小于 右边对象 请您返回负整数</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 约定3：认为左边对象 等于 右边对象 请您一定返回0</span></span>
<span class="line"><span style="color:#6A737D;">//                if(o1.getHeight() &gt; o2.getHeight()){</span></span>
<span class="line"><span style="color:#6A737D;">//                    return 1;</span></span>
<span class="line"><span style="color:#6A737D;">//                }else if(o1.getHeight() &lt; o2.getHeight()){</span></span>
<span class="line"><span style="color:#6A737D;">//                    return -1;</span></span>
<span class="line"><span style="color:#6A737D;">//                }</span></span>
<span class="line"><span style="color:#6A737D;">//                return 0; // 升序</span></span>
<span class="line"><span style="color:#24292E;">                 </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 升序</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// return Double.compare(o2.getHeight(), o1.getHeight()); // 降序</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(students));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="二、lambda表达式" tabindex="-1">二、Lambda表达式 <a class="header-anchor" href="#二、lambda表达式" aria-label="Permalink to &quot;二、Lambda表达式&quot;">​</a></h2><p>接下来，我们学习一个JDK8新增的一种语法形式，叫做Lambda表达式。<strong>作用：用于简化匿名内部类代码的书写。</strong></p><h3 id="_2-1-lambda表达式基本使用" tabindex="-1">2.1 Lambda表达式基本使用 <a class="header-anchor" href="#_2-1-lambda表达式基本使用" aria-label="Permalink to &quot;2.1 Lambda表达式基本使用&quot;">​</a></h3><p>怎么去简化呢？Lamdba是有特有的格式的，按照下面的格式来编写Lamdba。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">(被重写方法的形参列表) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    被重写方法的方法体代码;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(被重写方法的形参列表) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    被重写方法的方法体代码;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>需要给说明一下的是，在使用Lambda表达式之前，必须先有一个接口，而且接口中只能有一个抽象方法。<strong>（注意：不能是抽象类，只能是接口）</strong></p><p>像这样的接口，我们称之为函数式接口，只有基于函数式接口的匿名内部类才能被Lambda表达式简化。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Swimming</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">swim</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Swimming</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swim</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有了以上的Swimming接口之后，接下来才能再演示，使用Lambda表达式，简化匿名内部类书写。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LambdaTest1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 目标：认识Lambda表达式.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//1.创建一个Swimming接口的匿名内部类对象</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#97E1F1;font-style:italic;">Swimming</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Swimming</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">             @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">             </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">swim</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">                 System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">学生快乐的游泳~~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">             }</span></span>
<span class="line"><span style="color:#F6F6F4;">         };</span></span>
<span class="line"><span style="color:#F6F6F4;">         s.</span><span style="color:#62E884;">swim</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//2.使用Lambda表达式对Swimming接口的匿名内部类进行简化</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Swimming</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> () </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">              System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">学生快乐的游泳~~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        };</span></span>
<span class="line"><span style="color:#F6F6F4;">        s1.</span><span style="color:#62E884;">swim</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LambdaTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标：认识Lambda表达式.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//1.创建一个Swimming接口的匿名内部类对象</span></span>
<span class="line"><span style="color:#24292E;">		Swimming s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Swimming</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">             @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">swim</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                 System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;学生快乐的游泳~~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">             }</span></span>
<span class="line"><span style="color:#24292E;">         };</span></span>
<span class="line"><span style="color:#24292E;">         s.</span><span style="color:#6F42C1;">swim</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//2.使用Lambda表达式对Swimming接口的匿名内部类进行简化</span></span>
<span class="line"><span style="color:#24292E;">        Swimming s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;学生快乐的游泳~~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        s1.</span><span style="color:#6F42C1;">swim</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>好的，我们现在已经知道Lamdba表达式可以简化基于函数式接口的匿名内部类的书写。接下来，我们可以把刚才使用Arrays方法时的代码，使用Lambda表达式简化一下了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LambdaTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 目标：使用Lambda简化函数式接口。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;">[] prices </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">99.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//1.把所有元素*0.8: 先用匿名内部类写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IntToDoubleFunction</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#62E884;"> applyAsDouble(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// value = 0  1  2</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#62E884;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#62E884;">;</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2.把所有元素*0.8: 改用Lamdba表达式写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> value) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(prices));</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-----------------------------------------------</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[] students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">169.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">167.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//3.对数组中的元素按照年龄升序排列: 先用匿名内部类写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparator</span><span style="color:#F6F6F4;">&lt;Student&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> compare(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o1</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o2</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">Double</span><span style="color:#62E884;">.compare(</span><span style="color:#F6F6F4;">o1</span><span style="color:#62E884;">.getHeight(), </span><span style="color:#F6F6F4;">o2</span><span style="color:#62E884;">.getHeight()); </span><span style="color:#7B7F8B;">// 升序</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4.对数组中的元素按照年龄升序排列: 改用Lambda写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, (</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> o1, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Double.</span><span style="color:#62E884;">compare</span><span style="color:#F6F6F4;">(o1.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">(), o2.</span><span style="color:#62E884;">getHeight</span><span style="color:#F6F6F4;">()); </span><span style="color:#7B7F8B;">// 升序</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(students));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LambdaTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标：使用Lambda简化函数式接口。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] prices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">99.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//1.把所有元素*0.8: 先用匿名内部类写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntToDoubleFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyAsDouble</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// value = 0  1  2</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2.把所有元素*0.8: 改用Lamdba表达式写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(prices));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;-----------------------------------------------&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[] students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">169.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">167.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//3.对数组中的元素按照年龄升序排列: 先用匿名内部类写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Student </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 升序</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4.对数组中的元素按照年龄升序排列: 改用Lambda写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, (Student o1, Student o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Double.</span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(o1.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">(), o2.</span><span style="color:#6F42C1;">getHeight</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// 升序</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(students));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>好的，各位同学，恭喜大家！到这里，你已经学会了Lambda表达式的基本使用了。</p><h3 id="_2-2-lambda表达式省略规则" tabindex="-1">2.2 Lambda表达式省略规则 <a class="header-anchor" href="#_2-2-lambda表达式省略规则" aria-label="Permalink to &quot;2.2 Lambda表达式省略规则&quot;">​</a></h3><p>刚才我们学习了Lambda表达式的基本使用。Java觉得代码还不够简单，于是还提供了Lamdba表达式的几种简化写法。具体的简化规则如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">1.Lambda的标准格式</span></span>
<span class="line"><span style="color:#F6F6F4;">	(参数类型1 参数名1, 参数类型2 参数名2)</span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">		...方法体的代码...</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> 返回值;</span></span>
<span class="line"><span style="color:#F6F6F4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">2.在标准格式的基础上()中的参数类型可以直接省略</span></span>
<span class="line"><span style="color:#F6F6F4;">	(参数名1, 参数名2)</span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">		...方法体的代码...</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> 返回值;</span></span>
<span class="line"><span style="color:#F6F6F4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">3.如果{}总的语句只有一条语句，则{}可以省略、return关键字、以及最后的“;”都可以省略</span></span>
<span class="line"><span style="color:#F6F6F4;">	(参数名1, 参数名2)</span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> 结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">4.如果()里面只有一个参数，则()可以省略</span></span>
<span class="line"><span style="color:#F6F6F4;">	(参数名)</span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;">结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">1.Lambda的标准格式</span></span>
<span class="line"><span style="color:#24292E;">	(参数类型1 参数名1, 参数类型2 参数名2)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		...方法体的代码...</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> 返回值;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">2.在标准格式的基础上()中的参数类型可以直接省略</span></span>
<span class="line"><span style="color:#24292E;">	(参数名1, 参数名2)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		...方法体的代码...</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> 返回值;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">3.如果{}总的语句只有一条语句，则{}可以省略、return关键字、以及最后的“;”都可以省略</span></span>
<span class="line"><span style="color:#24292E;">	(参数名1, 参数名2)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> 结果</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">4.如果()里面只有一个参数，则()可以省略</span></span>
<span class="line"><span style="color:#24292E;">	(参数名)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">结果</span></span></code></pre></div><p>接下来从匿名内部类开始、到Lambda标准格式、再到Lambda简化格式，一步一步来简化一下。同学们体会一下简化的过程。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">LambdaTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 目标：使用Lambda简化函数式接口。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;">[] prices </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">99.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">128</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//1.对数组中的每一个元素*0.8: 匿名内部类写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IntToDoubleFunction</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#62E884;"> applyAsDouble(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// value = 0  1  2</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#62E884;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#62E884;">;</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2.需求：对数组中的每一个元素*0.8,使用Lambda表达式标准写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> value) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//3.使用Lambda表达式简化格式1——省略参数类型</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, (value) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4.使用Lambda表达式简化格式2——省略()</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, value </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//5.使用Lambda表达式简化格式3——省略{}</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">setAll</span><span style="color:#F6F6F4;">(prices, value </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> prices[value] </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0.8</span><span style="color:#F6F6F4;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(prices));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E7EE98;">        Student[] students = new Student[4];</span></span>
<span class="line"><span style="color:#E7EE98;">        students[0] = new Student(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, 169.5, 23);</span></span>
<span class="line"><span style="color:#E7EE98;">        students[1] = new Student(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, 163.8, 26);</span></span>
<span class="line"><span style="color:#E7EE98;">        students[2] = new Student(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, 163.8, 26);</span></span>
<span class="line"><span style="color:#E7EE98;">        students[3] = new Student(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, 167.5, 24);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E7EE98;">        //1.使用匿名内部类</span></span>
<span class="line"><span style="color:#E7EE98;">        Arrays.sort(students, new Comparator&lt;Student&gt;() {</span></span>
<span class="line"><span style="color:#E7EE98;">            @Override</span></span>
<span class="line"><span style="color:#E7EE98;">            public int compare(Student o1, Student o2) {</span></span>
<span class="line"><span style="color:#E7EE98;">                return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span></span>
<span class="line"><span style="color:#E7EE98;">            }</span></span>
<span class="line"><span style="color:#E7EE98;">        });</span></span>
<span class="line"><span style="color:#E7EE98;">		//2.使用Lambda表达式表达式——标准格式</span></span>
<span class="line"><span style="color:#E7EE98;">        Arrays.sort(students, (Student o1, Student o2) -&gt; {</span></span>
<span class="line"><span style="color:#E7EE98;">                return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span></span>
<span class="line"><span style="color:#E7EE98;">        });</span></span>
<span class="line"><span style="color:#E7EE98;">		//3.使用Lambda表达式表达式——省略参数类型</span></span>
<span class="line"><span style="color:#E7EE98;">        Arrays.sort(students, ( o1,  o2) -&gt; {</span></span>
<span class="line"><span style="color:#E7EE98;">            return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span></span>
<span class="line"><span style="color:#E7EE98;">        });</span></span>
<span class="line"><span style="color:#E7EE98;">		//4.使用Lambda表达式表达式——省略{}</span></span>
<span class="line"><span style="color:#E7EE98;">        Arrays.sort(students, ( o1,  o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight()));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E7EE98;">        System.out.println(Arrays.toString(students));</span></span>
<span class="line"><span style="color:#E7EE98;">    }</span></span>
<span class="line"><span style="color:#E7EE98;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LambdaTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目标：使用Lambda简化函数式接口。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">double</span><span style="color:#24292E;">[] prices </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">99.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">128</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//1.对数组中的每一个元素*0.8: 匿名内部类写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntToDoubleFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">applyAsDouble</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// value = 0  1  2</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2.需求：对数组中的每一个元素*0.8,使用Lambda表达式标准写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//3.使用Lambda表达式简化格式1——省略参数类型</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, (value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4.使用Lambda表达式简化格式2——省略()</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, value </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//5.使用Lambda表达式简化格式3——省略{}</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">setAll</span><span style="color:#24292E;">(prices, value </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> prices[value] </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(prices));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        Student[] students = new Student[4];</span></span>
<span class="line"><span style="color:#032F62;">        students[0] = new Student(&quot;</span><span style="color:#24292E;">蜘蛛精</span><span style="color:#032F62;">&quot;, 169.5, 23);</span></span>
<span class="line"><span style="color:#032F62;">        students[1] = new Student(&quot;</span><span style="color:#24292E;">紫霞</span><span style="color:#032F62;">&quot;, 163.8, 26);</span></span>
<span class="line"><span style="color:#032F62;">        students[2] = new Student(&quot;</span><span style="color:#24292E;">紫霞</span><span style="color:#032F62;">&quot;, 163.8, 26);</span></span>
<span class="line"><span style="color:#032F62;">        students[3] = new Student(&quot;</span><span style="color:#24292E;">至尊宝</span><span style="color:#032F62;">&quot;, 167.5, 24);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        //1.使用匿名内部类</span></span>
<span class="line"><span style="color:#032F62;">        Arrays.sort(students, new Comparator&lt;Student&gt;() {</span></span>
<span class="line"><span style="color:#032F62;">            @Override</span></span>
<span class="line"><span style="color:#032F62;">            public int compare(Student o1, Student o2) {</span></span>
<span class="line"><span style="color:#032F62;">                return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span></span>
<span class="line"><span style="color:#032F62;">            }</span></span>
<span class="line"><span style="color:#032F62;">        });</span></span>
<span class="line"><span style="color:#032F62;">		//2.使用Lambda表达式表达式——标准格式</span></span>
<span class="line"><span style="color:#032F62;">        Arrays.sort(students, (Student o1, Student o2) -&gt; {</span></span>
<span class="line"><span style="color:#032F62;">                return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span></span>
<span class="line"><span style="color:#032F62;">        });</span></span>
<span class="line"><span style="color:#032F62;">		//3.使用Lambda表达式表达式——省略参数类型</span></span>
<span class="line"><span style="color:#032F62;">        Arrays.sort(students, ( o1,  o2) -&gt; {</span></span>
<span class="line"><span style="color:#032F62;">            return Double.compare(o1.getHeight(), o2.getHeight()); // 升序</span></span>
<span class="line"><span style="color:#032F62;">        });</span></span>
<span class="line"><span style="color:#032F62;">		//4.使用Lambda表达式表达式——省略{}</span></span>
<span class="line"><span style="color:#032F62;">        Arrays.sort(students, ( o1,  o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight()));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">        System.out.println(Arrays.toString(students));</span></span>
<span class="line"><span style="color:#032F62;">    }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span></code></pre></div><p>到这里，恭喜你，对Lamdba表达式的所有写法，就学习完毕了。</p><h2 id="三、jdk8新特性-方法引用" tabindex="-1">三、JDK8新特性（方法引用） <a class="header-anchor" href="#三、jdk8新特性-方法引用" aria-label="Permalink to &quot;三、JDK8新特性（方法引用）&quot;">​</a></h2><p>各位小伙伴，接下来我们学习JDK8的另一个新特性，叫做方法引用。我们知道Lambda是用来简化匿名代码的书写格式的，而方法引用是用来进一步简化Lambda表达式的，它简化的更加过分。</p><p>到这里有小伙伴可能就想慰问Java爸爸了：“之前的代码挺好的呀！好不容易学会，你又来搞这些，把我都搞晕了。“ 说句大实话，确实有这样的问题，学习新的东西肯定会增加我们的学习成本，从心理上来说多少是有写抗拒的。但是从另一个角度想，一旦我们学会了，会大大简化我们的代码书写，提高我们编写代码的效率，而且这些新的语法都是有前提条件的，遇到的时候就简化得了。再退一步想，就算你没有学会，还是用以前的办法一点问题也没有。</p><p>给大家交代清楚了，学习方法引用可能存在的一些心理特点之后，接下来我们再正式学习方法引用的代码怎么编写。</p><h3 id="_3-1-静态方法引用" tabindex="-1">3.1 静态方法引用 <a class="header-anchor" href="#_3-1-静态方法引用" aria-label="Permalink to &quot;3.1 静态方法引用&quot;">​</a></h3><p>我们先学习静态方法的引用，还是用之前Arrays代码来做演示。现在准备好下面的代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[] students </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">4</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">蜘蛛精</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">169.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">紫霞</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">163.8</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">26</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        students[</span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Student</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">至尊宝</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">167.5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">24</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 原始写法：对数组中的学生对象，按照年龄升序排序</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparator</span><span style="color:#F6F6F4;">&lt;Student&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> compare(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o1</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o2</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">o1</span><span style="color:#62E884;">.getAge() </span><span style="color:#F286C4;">-</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">o2</span><span style="color:#62E884;">.getAge(); </span><span style="color:#7B7F8B;">// 按照年龄升序排序</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 使用Lambda简化后的形式</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, (o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> o1.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> o2.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[] students </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;蜘蛛精&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">169.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;紫霞&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">163.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">26</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        students[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;至尊宝&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">167.5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">24</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 原始写法：对数组中的学生对象，按照年龄升序排序</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">Student</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Student </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 按照年龄升序排序</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 使用Lambda简化后的形式</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, (o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，我想要把下图中Lambda表达式的方法体，用一个静态方法代替</p><img src="`+s+`"><p>准备另外一个类CompareByData类，用于封装Lambda表达式的方法体代码；</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">CompareByData</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">compareByAge</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o1</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Student</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">o2</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> o1.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> o2.</span><span style="color:#62E884;">getAge</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 升序排序的规则</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompareByData</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareByAge</span><span style="color:#24292E;">(Student </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, Student </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> o2.</span><span style="color:#6F42C1;">getAge</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 升序排序的规则</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在我们就可以把Lambda表达式的方法体代码，改为下面的样子</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, (o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> CompareByData.</span><span style="color:#62E884;">compareByAge</span><span style="color:#F6F6F4;">(o1, o2));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, (o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> CompareByData.</span><span style="color:#6F42C1;">compareByAge</span><span style="color:#24292E;">(o1, o2));</span></span></code></pre></div><p>Java为了简化上面Lambda表达式的写法，利用方法引用可以改进为下面的样子。**实际上就是用类名调用方法，但是把参数给省略了。**这就是静态方法引用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//静态方法引用：类名::方法名</span></span>
<span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, CompareByData</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">compareByAge);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//静态方法引用：类名::方法名</span></span>
<span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, CompareByData</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">compareByAge);</span></span></code></pre></div><h3 id="_3-2-实例方法引用" tabindex="-1">3.2 实例方法引用 <a class="header-anchor" href="#_3-2-实例方法引用" aria-label="Permalink to &quot;3.2 实例方法引用&quot;">​</a></h3><p>还是基于上面的案例，我们现在来学习一下实例方法的引用。现在，我想要把下图中Lambda表达式的方法体，用一个实例方法代替。</p><img src="`+s+'"><p>在CompareByData类中，再添加一个实例方法，用于封装Lambda表达式的方法体</p><img src="'+e+`"><p>接下来，我们把Lambda表达式的方法体，改用对象调用方法</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">CompareByData</span><span style="color:#F6F6F4;"> compare </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">CompareByData</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, (o1, o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> compare.</span><span style="color:#62E884;">compareByAgeDesc</span><span style="color:#F6F6F4;">(o1, o2)); </span><span style="color:#7B7F8B;">// 降序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">CompareByData compare </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompareByData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, (o1, o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> compare.</span><span style="color:#6F42C1;">compareByAgeDesc</span><span style="color:#24292E;">(o1, o2)); </span><span style="color:#6A737D;">// 降序</span></span></code></pre></div><p>最后，再将Lambda表达式的方法体，直接改成方法引用写法。<strong>实际上就是用类名调用方法，但是省略的参数</strong>。这就是实例方法引用</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">CompareByData</span><span style="color:#F6F6F4;"> compare </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">CompareByData</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(students, compare</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">compareByAgeDesc); </span><span style="color:#7B7F8B;">// 降序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">CompareByData compare </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CompareByData</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(students, compare</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">compareByAgeDesc); </span><span style="color:#6A737D;">// 降序</span></span></code></pre></div><blockquote><p>给小伙伴的寄语：一定要按照老师写的步骤，一步一步来做，你一定能学会的！！！</p></blockquote><h3 id="_3-2-特定类型的方法引用" tabindex="-1">3.2 特定类型的方法引用 <a class="header-anchor" href="#_3-2-特定类型的方法引用" aria-label="Permalink to &quot;3.2 特定类型的方法引用&quot;">​</a></h3><p>各位小伙伴，我们继续学习特定类型的方法引用。在学习之前还是需要给大家说明一下，这种特定类型的方法引用是没有什么道理的，只是语法的一种约定，遇到这种场景，就可以这样用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">Java约定：</span></span>
<span class="line"><span style="color:#F6F6F4;">    如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数作为方法的主调，	后面的所有参数都是作为该实例方法的入参时，则就可以使用特定类型的方法引用。</span></span>
<span class="line"><span style="color:#F6F6F4;">格式：</span></span>
<span class="line"><span style="color:#F6F6F4;">	类型</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">方法名</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Java约定：</span></span>
<span class="line"><span style="color:#24292E;">    如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数作为方法的主调，	后面的所有参数都是作为该实例方法的入参时，则就可以使用特定类型的方法引用。</span></span>
<span class="line"><span style="color:#24292E;">格式：</span></span>
<span class="line"><span style="color:#24292E;">	类型</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">方法名</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">boby</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">angela</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Andy</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> ,</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">dlei</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">caocao</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Babo</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">jack</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Cici</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 要求忽略首字符大小写进行排序。</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(names, </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Comparator</span><span style="color:#F6F6F4;">&lt;String&gt;() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#62E884;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#62E884;"> compare(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o1</span><span style="color:#62E884;">, </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#62E884;"> </span><span style="color:#FFB86C;font-style:italic;">o2</span><span style="color:#62E884;">) {</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#7B7F8B;">// 制定比较规则。o1 = &quot;Andy&quot;  o2 = &quot;angela&quot;</span></span>
<span class="line"><span style="color:#62E884;">                </span><span style="color:#F286C4;">return</span><span style="color:#62E884;"> </span><span style="color:#F6F6F4;">o1</span><span style="color:#62E884;">.compareToIgnoreCase(o2);</span></span>
<span class="line"><span style="color:#62E884;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//lambda表达式写法</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(names, ( o1,  o2) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> o1.</span><span style="color:#62E884;">compareToIgnoreCase</span><span style="color:#F6F6F4;">(o2) );</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//特定类型的方法引用！</span></span>
<span class="line"><span style="color:#F6F6F4;">        Arrays.</span><span style="color:#62E884;">sort</span><span style="color:#F6F6F4;">(names, String</span><span style="color:#F286C4;">::</span><span style="color:#F6F6F4;">compareToIgnoreCase);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(names));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;boby&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;angela&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Andy&quot;</span><span style="color:#24292E;"> ,</span><span style="color:#032F62;">&quot;dlei&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;caocao&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Babo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;jack&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Cici&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 要求忽略首字符大小写进行排序。</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(names, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Comparator&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compare</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">o1</span><span style="color:#24292E;">, String </span><span style="color:#E36209;">o2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 制定比较规则。o1 = &quot;Andy&quot;  o2 = &quot;angela&quot;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">compareToIgnoreCase</span><span style="color:#24292E;">(o2);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//lambda表达式写法</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(names, ( o1,  o2) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> o1.</span><span style="color:#6F42C1;">compareToIgnoreCase</span><span style="color:#24292E;">(o2) );</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//特定类型的方法引用！</span></span>
<span class="line"><span style="color:#24292E;">        Arrays.</span><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(names, String</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">compareToIgnoreCase);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(names));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3-3-构造器引用" tabindex="-1">3.3 构造器引用 <a class="header-anchor" href="#_3-3-构造器引用" aria-label="Permalink to &quot;3.3 构造器引用&quot;">​</a></h3><p>各位小伙伴，我们学习最后一种方法引用的形式，叫做构造器引用。还是先说明一下，构造器引用在实际开发中应用的并不多，目前还没有找到构造器的应用场景。所以大家在学习的时候，也只是关注语法就可以了。</p><p>现在，我们准备一个JavaBean类，Car类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Car</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> price;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Car</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Car</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">price</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.price </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> price;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getName</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setName</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> name;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getPrice</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> price;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setPrice</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">price</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.price </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> price;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">Car{</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">name=&#39;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> name </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F286C4;">\\&#39;</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">, price=</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> price </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">}</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> price;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> price;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPrice</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> price;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setPrice</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.price </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> price;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Car{&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;name=&#39;&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;</span><span style="color:#005CC5;">\\&#39;</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;, price=&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> price </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&#39;}&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>因为方法引用是基于Lamdba表达式简化的，所以也要按照Lamdba表达式的使用前提来用，需要一个函数式接口，接口中代码的返回值类型是Car类型</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">CreateCar</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Car</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">create</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">price</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateCar</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    Car </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>最后，再准备一个测试类，在测试类中创建CreateCar接口的实现类对象，先用匿名内部类创建、再用Lambda表达式创建，最后改用方法引用创建。同学们只关注格式就可以，不要去想为什么（语法就是这么设计的）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、创建这个接口的匿名内部类对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">CreateCar</span><span style="color:#F6F6F4;"> cc1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">CreateCar</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">            @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Car</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">create</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">double</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">price</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Car</span><span style="color:#F6F6F4;">(name, price);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        };</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2、使用匿名内部类改进</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">CreateCar</span><span style="color:#F6F6F4;"> cc2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (name,  price) </span><span style="color:#97E1F1;font-style:italic;">-&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Car</span><span style="color:#F6F6F4;">(name, price);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//3、使用方法引用改进：构造器引用</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">CreateCar</span><span style="color:#F6F6F4;"> cc3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Car</span><span style="color:#F286C4;">::</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//注意：以上是创建CreateCar接口实现类对象的几种形式而已，语法一步一步简化。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//4、对象调用方法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Car</span><span style="color:#F6F6F4;"> car </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cc3.</span><span style="color:#62E884;">create</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">奔驰</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">49.9</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(car);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、创建这个接口的匿名内部类对象。</span></span>
<span class="line"><span style="color:#24292E;">        CreateCar cc1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CreateCar</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Car </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#E36209;">price</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;">(name, price);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2、使用匿名内部类改进</span></span>
<span class="line"><span style="color:#24292E;">        CreateCar cc2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (name,  price) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Car</span><span style="color:#24292E;">(name, price);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//3、使用方法引用改进：构造器引用</span></span>
<span class="line"><span style="color:#24292E;">        CreateCar cc3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Car</span><span style="color:#D73A49;">::new</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//注意：以上是创建CreateCar接口实现类对象的几种形式而已，语法一步一步简化。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//4、对象调用方法</span></span>
<span class="line"><span style="color:#24292E;">        Car car </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cc3.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;奔驰&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">49.9</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(car);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="四、常见算法" tabindex="-1">四、常见算法 <a class="header-anchor" href="#四、常见算法" aria-label="Permalink to &quot;四、常见算法&quot;">​</a></h2><h3 id="_1-1-认识算法" tabindex="-1">1.1 认识算法 <a class="header-anchor" href="#_1-1-认识算法" aria-label="Permalink to &quot;1.1 认识算法&quot;">​</a></h3><p>接下来，我们认识一下什么是算法。算法其实是解决某个实际问题的过程和方法。比如百度地图给你规划路径，计算最优路径的过程就需要用到算法。再比如你在抖音上刷视频时，它会根据你的喜好给你推荐你喜欢看的视频，这里也需要用到算法。</p><p>我们为什么要学习算法呢？主要目的是训练我们的编程思维，还有就是面试的时候，面试官也喜欢问一下算法的问题来考察你的技术水平。最后一点，学习算法是成为一个高级程序员的必经之路。</p><p>当然我们现在并不会学习非常复杂的算法，万丈高楼平地起，我们现在只需要学习几种常见的基础算法就可以了。而且Java语言本身就内置了一些基础算法给我们使用，实际上自己也不会去写这些算法。</p><img src="`+c+'"><h3 id="_1-2-冒泡排序" tabindex="-1">1.2 冒泡排序 <a class="header-anchor" href="#_1-2-冒泡排序" aria-label="Permalink to &quot;1.2 冒泡排序&quot;">​</a></h3><p>接下来，我们学习一种算法叫排序算法，它可以价格无序的整数，排列成从小到大的形式（升序），或者从大到小的形式（降序）</p><p>排序算法有很多种，我们这里只学习比较简单的两种，一种是冒泡排序，一种是选择排序。学习算法我们先要搞清楚算法的流程，然后再去“推敲“如何写代码。（<strong>注意，我这里用的次是推敲，也就是说算法这样的代码并不是一次成型的，是需要反复修改才能写好的</strong>）。</p><img src="'+r+`"><p>先来学习冒泡排序，先来介绍一下，冒泡排序的流程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">冒泡排序核心思路：每次将相邻的两个元素继续比较</span></span>
<span class="line"><span style="color:#F6F6F4;">如下图所示：</span></span>
<span class="line"><span style="color:#F6F6F4;">   第一轮比较 3次</span></span>
<span class="line"><span style="color:#F6F6F4;">   第二轮比较 2次</span></span>
<span class="line"><span style="color:#F6F6F4;">   第三轮比较 1次</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">冒泡排序核心思路：每次将相邻的两个元素继续比较</span></span>
<span class="line"><span style="color:#24292E;">如下图所示：</span></span>
<span class="line"><span style="color:#24292E;">   第一轮比较 3次</span></span>
<span class="line"><span style="color:#24292E;">   第二轮比较 2次</span></span>
<span class="line"><span style="color:#24292E;">   第三轮比较 1次</span></span></code></pre></div><img src="`+y+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test1</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、准备一个数组</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、定义一个循环控制排几轮</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 0  1  2           【5， 2， 3， 1】    次数</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 0 第一轮            0   1   2         3</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 1 第二轮            0   1             2</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 2 第三轮            0                 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3、定义一个循环控制每轮比较几次。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 判断当前位置的元素值，是否大于后一个位置处的元素值，如果大则交换。</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(arr[j] </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> arr[j</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">]){</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">                    arr[j </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j];</span></span>
<span class="line"><span style="color:#F6F6F4;">                    arr[j] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、准备一个数组</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、定义一个循环控制排几轮</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 0  1  2           【5， 2， 3， 1】    次数</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 0 第一轮            0   1   2         3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 1 第二轮            0   1             2</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 2 第三轮            0                 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3、定义一个循环控制每轮比较几次。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 判断当前位置的元素值，是否大于后一个位置处的元素值，如果大则交换。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(arr[j] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">                    arr[j </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j];</span></span>
<span class="line"><span style="color:#24292E;">                    arr[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(arr));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_1-2-选择排序" tabindex="-1">1.2 选择排序 <a class="header-anchor" href="#_1-2-选择排序" aria-label="Permalink to &quot;1.2 选择排序&quot;">​</a></h3><p>刚才我们学习了冒泡排序，接下来我们学习了另一种排序方法，叫做选择排序。按照我们刚才给大家介绍的算法的学习方式。先要搞清楚算法的流程，再去推敲代码怎么写。</p><p>所以我们先分析选择排序算法的流程：选择排序的核心思路是，每一轮选定一个固定的元素，和其他的每一个元素进行比较；经过几轮比较之后，每一个元素都能比较到了。</p><img src="`+F+`"><p>接下来，按照选择排序的流程编写代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">ublic </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、准备好一个数组</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//           0  1  2  3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、控制选择几轮</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 0 第一轮    j = 1 2 3</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 1 第二轮    j = 2 3</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// i = 2 第三轮    j = 3</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3、控制每轮选择几次。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr.length; j</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 判断当前位置是否大于后面位置处的元素值，若大于则交换。</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(arr[i] </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> arr[j]){</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> temp </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[i];</span></span>
<span class="line"><span style="color:#F6F6F4;">                    arr[i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr[j];</span></span>
<span class="line"><span style="color:#F6F6F4;">                    arr[j] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> temp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(arr));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ublic </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、准备好一个数组</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//           0  1  2  3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、控制选择几轮</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 0 第一轮    j = 1 2 3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 1 第二轮    j = 2 3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// i = 2 第三轮    j = 3</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3、控制每轮选择几次。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.length; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 判断当前位置是否大于后面位置处的元素值，若大于则交换。</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(arr[i] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[j]){</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> temp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[i];</span></span>
<span class="line"><span style="color:#24292E;">                    arr[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr[j];</span></span>
<span class="line"><span style="color:#24292E;">                    arr[j] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> temp;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(arr));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_1-3-查找算法" tabindex="-1">1.3 查找算法 <a class="header-anchor" href="#_1-3-查找算法" aria-label="Permalink to &quot;1.3 查找算法&quot;">​</a></h3><p>接下来，我们学习一个查找算法叫做二分查找。在学习二分查找之前，我们先来说一下基本查找，从基本查找的弊端，我们再引入二分查找，这样我们的学习也会更加丝滑一下。</p><p>**先聊一聊基本查找：**假设我们要查找的元素是81，如果是基本查找的话，只能从0索引开始一个一个往后找，但是如果元素比较多，你要查找的元素比较靠后的话，这样查找的此处就比较多。性能比较差。</p><img src="`+E+`"><p><strong>再讲二分查找</strong>：二分查找的主要特点是，每次查找能排除一般元素，这样效率明显提高。<strong>但是二分查找要求比较苛刻，它要求元素必须是有序的，否则不能进行二分查找。</strong></p><ul><li>二分查找的核心思路</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">第1步：先定义两个变量，分别记录开始索引(left)和结束索引(right)</span></span>
<span class="line"><span style="color:#F6F6F4;">第2步：计算中间位置的索引，mid </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (left</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">right)</span><span style="color:#F286C4;">/</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">第3步：每次查找中间mid位置的元素，和目标元素key进行比较</span></span>
<span class="line"><span style="color:#F6F6F4;">		如果中间位置元素比目标元素小，那就说明mid前面的元素都比目标元素小</span></span>
<span class="line"><span style="color:#F6F6F4;">			此时：left </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mid</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">    	如果中间位置元素比目标元素大，那说明mid后面的元素都比目标元素大</span></span>
<span class="line"><span style="color:#F6F6F4;">    		此时：right </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> mid</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span></span>
<span class="line"><span style="color:#F6F6F4;">		如果中间位置元素和目标元素相等，那说明mid就是我们要找的位置</span></span>
<span class="line"><span style="color:#F6F6F4;">			此时：把mid返回</span></span>
<span class="line"><span style="color:#F6F6F4;">注意：一搬查找一次肯定是不够的，所以需要把第1步和第2步循环来做，只到left</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;">end就结束，如果最后还没有找到目标元素，就返回</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">第1步：先定义两个变量，分别记录开始索引(left)和结束索引(right)</span></span>
<span class="line"><span style="color:#24292E;">第2步：计算中间位置的索引，mid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (left</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">right)</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">第3步：每次查找中间mid位置的元素，和目标元素key进行比较</span></span>
<span class="line"><span style="color:#24292E;">		如果中间位置元素比目标元素小，那就说明mid前面的元素都比目标元素小</span></span>
<span class="line"><span style="color:#24292E;">			此时：left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    	如果中间位置元素比目标元素大，那说明mid后面的元素都比目标元素大</span></span>
<span class="line"><span style="color:#24292E;">    		此时：right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> mid</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">		如果中间位置元素和目标元素相等，那说明mid就是我们要找的位置</span></span>
<span class="line"><span style="color:#24292E;">			此时：把mid返回</span></span>
<span class="line"><span style="color:#24292E;">注意：一搬查找一次肯定是不够的，所以需要把第1步和第2步循环来做，只到left</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">end就结束，如果最后还没有找到目标元素，就返回</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1.</span></span></code></pre></div><img src="`+i+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握二分查找算法。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Test3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、准备好一个数组。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] arr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#BF9EEE;">7</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">23</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">79</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">81</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">103</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">127</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">131</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">147</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(arr, </span><span style="color:#BF9EEE;">150</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(arr, </span><span style="color:#BF9EEE;">81</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">binarySearch</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、定义两个变量，一个站在左边位置，一个站在右边位置</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> left </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> right </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、定义一个循环控制折半。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (left </span><span style="color:#F286C4;">&lt;=</span><span style="color:#F6F6F4;"> right){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3、每次折半，都算出中间位置处的索引</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> middle </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (left </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> right) </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 4、判断当前要找的元素值，与中间位置处的元素值的大小情况。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(data </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> arr[middle]){</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 往左边找，截止位置（右边位置） = 中间位置 - 1</span></span>
<span class="line"><span style="color:#F6F6F4;">                right </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> middle </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(data </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> arr[middle]){</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 往右边找，起始位置（左边位置） = 中间位置 + 1</span></span>
<span class="line"><span style="color:#F6F6F4;">                left </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> middle </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 中间位置处的元素值，正好等于我们要找的元素值</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> middle;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// -1特殊结果，就代表没有找到数据！数组中不存在该数据！</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握二分查找算法。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、准备好一个数组。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">79</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">81</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">103</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">127</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">131</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">147</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">150</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(arr, </span><span style="color:#005CC5;">81</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">binarySearch</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">arr</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">data</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、定义两个变量，一个站在左边位置，一个站在右边位置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、定义一个循环控制折半。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> right){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3、每次折半，都算出中间位置处的索引</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (left </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> right) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 4、判断当前要找的元素值，与中间位置处的元素值的大小情况。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(data </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr[middle]){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 往左边找，截止位置（右边位置） = 中间位置 - 1</span></span>
<span class="line"><span style="color:#24292E;">                right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(data </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> arr[middle]){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 往右边找，起始位置（左边位置） = 中间位置 + 1</span></span>
<span class="line"><span style="color:#24292E;">                left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> middle </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 中间位置处的元素值，正好等于我们要找的元素值</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> middle;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// -1特殊结果，就代表没有找到数据！数组中不存在该数据！</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="五、正则表达式" tabindex="-1">五、正则表达式 <a class="header-anchor" href="#五、正则表达式" aria-label="Permalink to &quot;五、正则表达式&quot;">​</a></h2><p>接下来，我们学习一个全新的知识，叫做正则表达式。<strong>正则表达式其实是由一些特殊的符号组成的，它代表的是某种规则。</strong></p><blockquote><p>正则表达式的作用1：用来校验字符串数据是否合法</p><p>正则表达式的作用2：可以从一段文本中查找满足要求的内容</p></blockquote><img src="`+u+`"><h3 id="_5-1-正则表达式初体验" tabindex="-1">5.1 正则表达式初体验 <a class="header-anchor" href="#_5-1-正则表达式初体验" aria-label="Permalink to &quot;5.1 正则表达式初体验&quot;">​</a></h3><p>现在，我们就以QQ号码为例，来体验一下正则表达式的用法。注意：现在仅仅只是体验而已，我们还没有讲正则表达式的具体写法。</p><ul><li>不使用正则表达式，校验QQ号码代码是这样的</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">checkQQ</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> qq){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、判断qq号码是否为null</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(qq </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> qq.</span><span style="color:#62E884;">startsWith</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> qq.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">6</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> qq.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、qq至少是不是null,不是以0开头的，满足6-20之间的长度。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 判断qq号码中是否都是数字。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// qq = 2514ghd234</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> qq.</span><span style="color:#62E884;">length</span><span style="color:#F6F6F4;">(); i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 根据索引提取当前位置处的字符。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> ch </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> qq.</span><span style="color:#62E884;">charAt</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 判断ch记住的字符，如果不是数字，qq号码不合法。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(ch </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">0</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> ch </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">9</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、说明qq号码肯定是合法</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkQQ</span><span style="color:#24292E;">(String qq){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、判断qq号码是否为null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(qq </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> qq.</span><span style="color:#6F42C1;">startsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> qq.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> qq.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、qq至少是不是null,不是以0开头的，满足6-20之间的长度。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 判断qq号码中是否都是数字。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// qq = 2514ghd234</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> qq.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 根据索引提取当前位置处的字符。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qq.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 判断ch记住的字符，如果不是数字，qq号码不合法。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(ch </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ch </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、说明qq号码肯定是合法</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><ul><li>用正则表达式代码是这样的</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">checkQQ1</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> qq){</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> qq </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> qq.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[1-9]</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{5,19}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkQQ1</span><span style="color:#24292E;">(String qq){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> qq </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> qq.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[1-9]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{5,19}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们发现，使用正则表达式，大大简化的了代码的写法。这个代码现在不用写，体验到正则表达式的优势就可以了。</p><h3 id="_5-2-正则表达式书写规则" tabindex="-1">5.2 正则表达式书写规则 <a class="header-anchor" href="#_5-2-正则表达式书写规则" aria-label="Permalink to &quot;5.2 正则表达式书写规则&quot;">​</a></h3><p>前面我们已经体验到了正则表达式，可以简化校验数据的代码书写。这里需要用到一个方法叫<code>matches(String regex)</code>。这个方法时属于String类的方法。</p><img src="`+C+'"><p>这个方法是用来匹配一个字符串是否匹配正则表达式的规则，参数需要调用者传递一个正则表达式。但是正则表达式不能乱写，是有特定的规则的。</p><p>下面我们就学习一下，正则表达式的规则。从哪里学呢？在API中有一个类叫做Pattern，我们可以到API文档中搜索，关于正则表达式的规则，这个类都告诉我们了。我这里把常用的已经给大家整理好了。</p><img src="'+D+`"><p>我们将这些规则，在代码中演示一下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握正则表达式的书写规则</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RegexTest2</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、字符类(只能匹配单个字符)</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[abc]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));    </span><span style="color:#7B7F8B;">// [abc]只能匹配a、b、c</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">e</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[abcd]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[^abc]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));   </span><span style="color:#7B7F8B;">// [^abc] 不能是abc</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[^abc]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-zA-Z]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// [a-zA-Z] 只能是a-z A-Z的字符</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-zA-Z]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">k</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-z&amp;&amp;[^bc]]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// ： a到z，除了b和c</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-z&amp;&amp;[^bc]]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ab</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-zA-Z0-9]</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false 注意：以上带 [内容] 的规则都只能用于匹配单个字符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、预定义字符(只能匹配单个字符)  .  \\d  \\D   \\s  \\S  \\w  \\W</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">徐</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// .可以匹配任意字符</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">徐徐</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// \\转义</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\&quot;</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// \\n \\t</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">3</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// \\d: 0-9</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">s</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));   </span><span style="color:#7B7F8B;">// \\s: 代表一个空白字符</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\s</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">S</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// \\S: 代表一个非空白字符</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">S</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// \\w: [a-zA-Z_0-9]</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">_</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">徐</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">徐</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">W</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// [^\\w]不能是a-zA-Z_0-9</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">W</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">23232</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false 注意：以上预定义字符都只能匹配单个字符。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、数量词： ?   *   +   {n}   {n, }  {n, m}</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w?</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));   </span><span style="color:#7B7F8B;">// ? 代表0次或1次</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w?</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));    </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w?</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc12</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));   </span><span style="color:#7B7F8B;">// * 代表0次或多次</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));        </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc12张</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc12</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));   </span><span style="color:#7B7F8B;">// + 代表1次或多次</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));       </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc12张</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a3c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{3}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));   </span><span style="color:#7B7F8B;">// {3} 代表要正好是n次</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abcd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{3}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));  </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abcd</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{3,}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));     </span><span style="color:#7B7F8B;">// {3,} 代表是&gt;=3次</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ab</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{3,}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));     </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abcde徐</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{3,}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));     </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc232d</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{3,9}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));     </span><span style="color:#7B7F8B;">// {3, 9} 代表是  大于等于3次，小于等于9次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、其他几个常用的符号：(?i)忽略大小写 、 或：| 、  分组：()</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(?i)abc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ABC</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(?i)abc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aBc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a((?i)b)c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ABc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a((?i)b)c</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求1：要求要么是3个小写字母，要么是3个数字。</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-z]{3}|</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{3}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">ABC</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-z]{3}|</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{3}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">123</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-z]{3}|</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{3}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// true</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">A12</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">[a-z]{3}|</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{3}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)); </span><span style="color:#7B7F8B;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求2：必须是”我爱“开头，中间可以是至少一个”编程“，最后至少是1个”666“</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我爱编程编程666666</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我爱(编程)+(666)+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我爱编程编程66666</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我爱(编程)+(666)+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握正则表达式的书写规则</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegexTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、字符类(只能匹配单个字符)</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[abc]&quot;</span><span style="color:#24292E;">));    </span><span style="color:#6A737D;">// [abc]只能匹配a、b、c</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[abcd]&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;d&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[^abc]&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// [^abc] 不能是abc</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[^abc]&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-zA-Z]&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// [a-zA-Z] 只能是a-z A-Z的字符</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-zA-Z]&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;k&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-z&amp;&amp;[^bc]]&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// ： a到z，除了b和c</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-z&amp;&amp;[^bc]]&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ab&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-zA-Z0-9]&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false 注意：以上带 [内容] 的规则都只能用于匹配单个字符</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、预定义字符(只能匹配单个字符)  .  \\d  \\D   \\s  \\S  \\w  \\W</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;徐&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// .可以匹配任意字符</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;徐徐&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// \\转义</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// \\n \\t</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// \\d: 0-9</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">s&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// \\s: 代表一个空白字符</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">S&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// \\S: 代表一个非空白字符</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">S&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// \\w: [a-zA-Z_0-9]</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;_&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;徐&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;徐&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">W&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// [^\\w]不能是a-zA-Z_0-9</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">W&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;23232&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false 注意：以上预定义字符都只能匹配单个字符。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、数量词： ?   *   +   {n}   {n, }  {n, m}</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w?&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// ? 代表0次或1次</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w?&quot;</span><span style="color:#24292E;">));    </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w?&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc12&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// * 代表0次或多次</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*&quot;</span><span style="color:#24292E;">));        </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc12张&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w*&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc12&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// + 代表1次或多次</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">));       </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc12张&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a3c&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{3}&quot;</span><span style="color:#24292E;">));   </span><span style="color:#6A737D;">// {3} 代表要正好是n次</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcd&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{3}&quot;</span><span style="color:#24292E;">));  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcd&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{3,}&quot;</span><span style="color:#24292E;">));     </span><span style="color:#6A737D;">// {3,} 代表是&gt;=3次</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ab&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{3,}&quot;</span><span style="color:#24292E;">));     </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abcde徐&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{3,}&quot;</span><span style="color:#24292E;">));     </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc232d&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{3,9}&quot;</span><span style="color:#24292E;">));     </span><span style="color:#6A737D;">// {3, 9} 代表是  大于等于3次，小于等于9次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、其他几个常用的符号：(?i)忽略大小写 、 或：| 、  分组：()</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(?i)abc&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ABC&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(?i)abc&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;aBc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a((?i)b)c&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ABc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a((?i)b)c&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求1：要求要么是3个小写字母，要么是3个数字。</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-z]{3}|</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{3}&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ABC&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-z]{3}|</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{3}&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-z]{3}|</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{3}&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A12&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[a-z]{3}|</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{3}&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求2：必须是”我爱“开头，中间可以是至少一个”编程“，最后至少是1个”666“</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我爱编程编程666666&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我爱(编程)+(666)+&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我爱编程编程66666&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;我爱(编程)+(666)+&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_5-3-正则表达式应用案例" tabindex="-1">5.3 正则表达式应用案例 <a class="header-anchor" href="#_5-3-正则表达式应用案例" aria-label="Permalink to &quot;5.3 正则表达式应用案例&quot;">​</a></h3><p>学习完正则表达式的规则之后，接下来我们再利用正则表达式，去校验几个实际案例。</p><ul><li>正则表达式校验手机号码</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：校验用户输入的电话、邮箱、时间是否合法。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RegexTest3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">checkPhone</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">checkPhone</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">请您输入您的电话号码(手机|座机): </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> phone </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 18676769999  010-3424242424 0104644535</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(phone.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(1[3-9]</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{9})|(0</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{2,7}-?[1-9]</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{4,19})</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">您输入的号码格式正确~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">您输入的号码格式不正确~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：校验用户输入的电话、邮箱、时间是否合法。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegexTest3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkPhone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkPhone</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请您输入您的电话号码(手机|座机): &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"><span style="color:#24292E;">            String phone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 18676769999  010-3424242424 0104644535</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(phone.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(1[3-9]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{9})|(0</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{2,7}-?[1-9]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{4,19})&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;您输入的号码格式正确~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;您输入的号码格式不正确~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>使用正则表达式校验邮箱是否正确</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RegexTest3</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">checkEmail</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">checkEmail</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">请您输入您的邮箱： </span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Scanner</span><span style="color:#F6F6F4;"> sc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Scanner</span><span style="color:#F6F6F4;">(System.in);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> email </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sc.</span><span style="color:#62E884;">nextLine</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;">             * dlei0009@163.com</span></span>
<span class="line"><span style="color:#7B7F8B;">             * 25143242@qq.com</span></span>
<span class="line"><span style="color:#7B7F8B;">             * itheima@itcast.com.cn</span></span>
<span class="line"><span style="color:#7B7F8B;">             */</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;">(email.</span><span style="color:#62E884;">matches</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{2,}@</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{2,20}(</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">.</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{2,10}){1,2}</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)){</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">您输入的邮箱格式正确~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">您输入的邮箱格式不正确~~~</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegexTest3</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">checkEmail</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">checkEmail</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;请您输入您的邮箱： &quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            Scanner sc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Scanner</span><span style="color:#24292E;">(System.in);</span></span>
<span class="line"><span style="color:#24292E;">            String email </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sc.</span><span style="color:#6F42C1;">nextLine</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">             * dlei0009@163.com</span></span>
<span class="line"><span style="color:#6A737D;">             * 25143242@qq.com</span></span>
<span class="line"><span style="color:#6A737D;">             * itheima@itcast.com.cn</span></span>
<span class="line"><span style="color:#6A737D;">             */</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(email.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{2,}@</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{2,20}(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{2,10}){1,2}&quot;</span><span style="color:#24292E;">)){</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;您输入的邮箱格式正确~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;您输入的邮箱格式不正确~~~&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_5-4-正则表达式信息爬取" tabindex="-1">5.4 正则表达式信息爬取 <a class="header-anchor" href="#_5-4-正则表达式信息爬取" aria-label="Permalink to &quot;5.4 正则表达式信息爬取&quot;">​</a></h3><p>各位小伙伴，在前面的课程中，我们学习了正则表达式的作用之一，用来校验数据格式的正确性。接下来我们学习<strong>正则表达式的第二个作用：在一段文本中查找满足要求的内容</strong></p><p>我们还是通过一个案例给大家做演示：案例需求如下</p><img src="`+d+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握使用正则表达式查找内容。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RegexTest4</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">method1</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 需求1：从以下内容中爬取出，手机，邮箱，座机、400电话等信息。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">method1</span><span style="color:#F6F6F4;">(){</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> data </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;"> 来黑马程序员学习Java，</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">        电话：1866668888，18699997777</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">        或者联系邮箱：boniu@itcast.cn，</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">        座机电话：01036517895，010-98951256</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">        邮箱：bozai@itcast.cn，</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">        邮箱：dlei0009@163.com，</span><span style="color:#F286C4;">\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">        热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、定义爬取规则</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> regex </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(1[3-9]</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{9})|(0</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{2,7}-?[1-9]</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{4,19})|(</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{2,}@</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{2,20}(</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">.</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w{2,10}){1,2})</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">|(400-?</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{3,7}-?</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">d{3,7})</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、把正则表达式封装成一个Pattern对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Pattern</span><span style="color:#F6F6F4;"> pattern </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Pattern.</span><span style="color:#62E884;">compile</span><span style="color:#F6F6F4;">(regex);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 3、通过pattern对象去获取查找内容的匹配器对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Matcher</span><span style="color:#F6F6F4;"> matcher </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> pattern.</span><span style="color:#62E884;">matcher</span><span style="color:#F6F6F4;">(data);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 4、定义一个循环开始爬取信息</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (matcher.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">()){</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> matcher.</span><span style="color:#62E884;">group</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// 获取到了找到的内容了。</span></span>
<span class="line"><span style="color:#F6F6F4;">            System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(rs);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握使用正则表达式查找内容。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegexTest4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">method1</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 需求1：从以下内容中爬取出，手机，邮箱，座机、400电话等信息。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">method1</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        String data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 来黑马程序员学习Java，</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;        电话：1866668888，18699997777</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;        或者联系邮箱：boniu@itcast.cn，</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;        座机电话：01036517895，010-98951256</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;        邮箱：bozai@itcast.cn，</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;        邮箱：dlei0009@163.com，</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#032F62;">&quot;        热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、定义爬取规则</span></span>
<span class="line"><span style="color:#24292E;">        String regex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;(1[3-9]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{9})|(0</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{2,7}-?[1-9]</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{4,19})|(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{2,}@</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{2,20}(</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w{2,10}){1,2})&quot;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;|(400-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{3,7}-?</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">d{3,7})&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、把正则表达式封装成一个Pattern对象</span></span>
<span class="line"><span style="color:#24292E;">        Pattern pattern </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Pattern.</span><span style="color:#6F42C1;">compile</span><span style="color:#24292E;">(regex);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 3、通过pattern对象去获取查找内容的匹配器对象。</span></span>
<span class="line"><span style="color:#24292E;">        Matcher matcher </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">matcher</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 4、定义一个循环开始爬取信息</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (matcher.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">()){</span></span>
<span class="line"><span style="color:#24292E;">            String rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> matcher.</span><span style="color:#6F42C1;">group</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 获取到了找到的内容了。</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(rs);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_5-5-正则表达式搜索、替换" tabindex="-1">5.5 正则表达式搜索、替换 <a class="header-anchor" href="#_5-5-正则表达式搜索、替换" aria-label="Permalink to &quot;5.5 正则表达式搜索、替换&quot;">​</a></h3><p>接下来，我们学习一下正则表达式的另外两个功能，替换、分割的功能。需要注意的是这几个功能需要用到Stirng类中的方法。这两个方法其实我们之前学过，只是当时没有学正则表达式而已。</p><img src="`+A+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * 目标：掌握使用正则表达式做搜索替换，内容分割。</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">RegexTest5</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1、public String replaceAll(String regex , String newStr)：按照正则表达式匹配的内容进行替换</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求1：请把下面字符串中的不是汉字的部分替换为 “-”</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s1 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s1.</span><span style="color:#62E884;">replaceAll</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求2(拓展)：某语音系统，收到一个口吃的人说的“我我我喜欢编编编编编编编编编编编编程程程！”，需要优化成“我喜欢编程！”。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s2 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">我我我喜欢编编编编编编编编编编编编程程程</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(s2.</span><span style="color:#62E884;">replaceAll</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">(.)</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">1+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">$1</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2、public String[] split(String regex)：按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 需求1：请把下面字符串中的人名取出来，使用切割来做</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> s3 </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] names </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s3.</span><span style="color:#62E884;">split</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\\\</span><span style="color:#E7EE98;">w+</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(Arrays.</span><span style="color:#62E884;">toString</span><span style="color:#F6F6F4;">(names));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 目标：掌握使用正则表达式做搜索替换，内容分割。</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegexTest5</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1、public String replaceAll(String regex , String newStr)：按照正则表达式匹配的内容进行替换</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求1：请把下面字符串中的不是汉字的部分替换为 “-”</span></span>
<span class="line"><span style="color:#24292E;">        String s1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s1.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求2(拓展)：某语音系统，收到一个口吃的人说的“我我我喜欢编编编编编编编编编编编编程程程！”，需要优化成“我喜欢编程！”。</span></span>
<span class="line"><span style="color:#24292E;">        String s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;我我我喜欢编编编编编编编编编编编编程程程&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(s2.</span><span style="color:#6F42C1;">replaceAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;(.)</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">1+&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;$1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2、public String[] split(String regex)：按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 需求1：请把下面字符串中的人名取出来，使用切割来做</span></span>
<span class="line"><span style="color:#24292E;">        String s3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] names </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s3.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\\\</span><span style="color:#032F62;">w+&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(Arrays.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(names));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,140),m=[q];function h(B,b,f,S,v,w){return a(),l("div",null,m)}const _=n(g,[["render",h]]);export{j as __pageData,_ as default};
