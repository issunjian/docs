import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/pool-f9e419fa-9d42-44fc-b14e-5b618a6f906d.02b90165.png",C=JSON.parse('{"title":"面试必问：Java 线程池","description":"面试必问：Java 线程池","frontmatter":{"title":"面试必问：Java 线程池","shortTitle":"面试必问：Java 线程池","description":"面试必问：Java 线程池","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,线程池"}]]},"headers":[],"relativePath":"backend/tobetter/thread/pool.md","filePath":"backend/tobetter/thread/pool.md"}'),o={name:"backend/tobetter/thread/pool.md"},e=l(`<h2 id="为什么要使用线程池" tabindex="-1">为什么要使用线程池 <a class="header-anchor" href="#为什么要使用线程池" aria-label="Permalink to &quot;为什么要使用线程池&quot;">​</a></h2><p>使用线程池主要有以下三个原因：</p><ol><li>创建/销毁线程需要消耗系统资源，线程池可以<strong>复用已创建的线程</strong>。</li><li><strong>控制并发的数量</strong>。并发数量过多，可能会导致资源消耗过多，从而造成服务器崩溃。（主要原因）</li><li><strong>可以对线程做统一管理</strong>。</li></ol><h2 id="线程池的原理" tabindex="-1">线程池的原理 <a class="header-anchor" href="#线程池的原理" aria-label="Permalink to &quot;线程池的原理&quot;">​</a></h2><p>Java中的线程池顶层接口是<code>Executor</code>接口，<code>ThreadPoolExecutor</code>是这个接口的实现类。</p><p>我们先看看<code>ThreadPoolExecutor</code>类。</p><h3 id="threadpoolexecutor提供的构造方法" tabindex="-1">ThreadPoolExecutor提供的构造方法 <a class="header-anchor" href="#threadpoolexecutor提供的构造方法" aria-label="Permalink to &quot;ThreadPoolExecutor提供的构造方法&quot;">​</a></h3><p>一共有四个构造方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 五个参数的构造函数</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">BlockingQueue</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Runnable</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> workQueue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 六个参数的构造函数-1</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">BlockingQueue</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Runnable</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> workQueue,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">ThreadFactory</span><span style="color:#F6F6F4;"> threadFactory)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 六个参数的构造函数-2</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">BlockingQueue</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Runnable</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> workQueue,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">RejectedExecutionHandler</span><span style="color:#F6F6F4;"> handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 七个参数的构造函数</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">long</span><span style="color:#F6F6F4;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">TimeUnit</span><span style="color:#F6F6F4;"> unit,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">BlockingQueue</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">Runnable</span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> workQueue,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">ThreadFactory</span><span style="color:#F6F6F4;"> threadFactory,</span></span>
<span class="line"><span style="color:#F6F6F4;">                          </span><span style="color:#97E1F1;font-style:italic;">RejectedExecutionHandler</span><span style="color:#F6F6F4;"> handler)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 五个参数的构造函数</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#24292E;">                          TimeUnit unit,</span></span>
<span class="line"><span style="color:#24292E;">                          BlockingQueue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Runnable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> workQueue)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 六个参数的构造函数-1</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#24292E;">                          TimeUnit unit,</span></span>
<span class="line"><span style="color:#24292E;">                          BlockingQueue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Runnable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> workQueue,</span></span>
<span class="line"><span style="color:#24292E;">                          ThreadFactory threadFactory)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 六个参数的构造函数-2</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#24292E;">                          TimeUnit unit,</span></span>
<span class="line"><span style="color:#24292E;">                          BlockingQueue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Runnable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> workQueue,</span></span>
<span class="line"><span style="color:#24292E;">                          RejectedExecutionHandler handler)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 七个参数的构造函数</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> maximumPoolSize,</span></span>
<span class="line"><span style="color:#24292E;">                          </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> keepAliveTime,</span></span>
<span class="line"><span style="color:#24292E;">                          TimeUnit unit,</span></span>
<span class="line"><span style="color:#24292E;">                          BlockingQueue</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">Runnable</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> workQueue,</span></span>
<span class="line"><span style="color:#24292E;">                          ThreadFactory threadFactory,</span></span>
<span class="line"><span style="color:#24292E;">                          RejectedExecutionHandler handler)</span></span></code></pre></div><p>涉及到5~7个参数，我们先看看必须的5个参数是什么意思：</p><ul><li><p><strong>int corePoolSize</strong>：该线程池中<strong>核心线程数最大值</strong></p><blockquote><p>核心线程：线程池中有两类线程，核心线程和非核心线程。核心线程默认情况下会一直存在于线程池中，即使这个核心线程什么都不干（铁饭碗），而非核心线程如果长时间的闲置，就会被销毁（临时工）。</p></blockquote></li><li><p><strong>int maximumPoolSize</strong>：该线程池中<strong>线程总数最大值</strong> 。</p><blockquote><p>该值等于核心线程数量 + 非核心线程数量。</p></blockquote></li><li><p><strong>long keepAliveTime</strong>：<strong>非核心线程闲置超时时长</strong>。</p><blockquote><p>非核心线程如果处于闲置状态超过该值，就会被销毁。如果设置allowCoreThreadTimeOut(true)，则会也作用于核心线程。</p></blockquote></li><li><p><strong>TimeUnit unit</strong>：keepAliveTime的单位。</p><p>TimeUnit是一个枚举类型 ，包括以下属性：</p><blockquote><p>NANOSECONDS ： 1微毫秒 = 1微秒 / 1000 MICROSECONDS ： 1微秒 = 1毫秒 / 1000 MILLISECONDS ： 1毫秒 = 1秒 /1000 SECONDS ： 秒 MINUTES ： 分 HOURS ： 小时 DAYS ： 天</p></blockquote></li><li><p><strong>BlockingQueue workQueue</strong>：阻塞队列，维护着<strong>等待执行的Runnable任务对象</strong>。</p><p>常用的几个阻塞队列：</p><ol><li><p><strong>LinkedBlockingQueue</strong></p><p>链式阻塞队列，底层数据结构是链表，默认大小是<code>Integer.MAX_VALUE</code>，也可以指定大小。</p></li><li><p><strong>ArrayBlockingQueue</strong></p><p>数组阻塞队列，底层数据结构是数组，需要指定队列的大小。</p></li><li><p><strong>SynchronousQueue</strong></p><p>同步队列，内部容量为0，每个put操作必须等待一个take操作，反之亦然。</p></li><li><p><strong>DelayQueue</strong></p><p>延迟队列，该队列中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素 。</p></li></ol></li></ul><blockquote><p>我们将在下一章中重点介绍各种阻塞队列</p></blockquote><p>好了，介绍完5个必须的参数之后，还有两个非必须的参数。</p><ul><li><p><strong>ThreadFactory threadFactory</strong></p><p>创建线程的工厂 ，用于批量创建线程，统一在创建线程时设置一些参数，如是否守护线程、线程的优先级等。如果不指定，会新建一个默认的线程工厂。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">DefaultThreadFactory</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ThreadFactory</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 省略属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 构造函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">DefaultThreadFactory</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">SecurityManager</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> System.</span><span style="color:#62E884;">getSecurityManager</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        group </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (s </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> s.</span><span style="color:#62E884;">getThreadGroup</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">        Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">getThreadGroup</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        namePrefix </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">pool-</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">            poolNumber.</span><span style="color:#62E884;">getAndIncrement</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">+</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">-thread-</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 省略</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultThreadFactory</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadFactory</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">DefaultThreadFactory</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        SecurityManager s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getSecurityManager</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">getThreadGroup</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getThreadGroup</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        namePrefix </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pool-&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            poolNumber.</span><span style="color:#6F42C1;">getAndIncrement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;-thread-&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 省略</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p><strong>RejectedExecutionHandler handler</strong></p><p><strong>拒绝处理策略</strong>，线程数量大于最大线程数就会采用拒绝处理策略，四种拒绝处理的策略为 ：</p><ol><li><p><strong>ThreadPoolExecutor.AbortPolicy</strong>：<strong>默认拒绝处理策略</strong>，丢弃任务并抛出RejectedExecutionException异常。</p></li><li><p><strong>ThreadPoolExecutor.DiscardPolicy</strong>：丢弃新来的任务，但是不抛出异常。</p></li><li><p><strong>ThreadPoolExecutor.DiscardOldestPolicy</strong>：丢弃队列头部（最旧的）的任务，然后重新尝试执行程序（如果再次失败，重复此过程）。</p></li><li><p><strong>ThreadPoolExecutor.CallerRunsPolicy</strong>：由调用线程处理该任务。</p></li></ol></li></ul><h3 id="threadpoolexecutor的策略" tabindex="-1">ThreadPoolExecutor的策略 <a class="header-anchor" href="#threadpoolexecutor的策略" aria-label="Permalink to &quot;ThreadPoolExecutor的策略&quot;">​</a></h3><p>线程池本身有一个调度线程，这个线程就是用于管理布控整个线程池里的各种任务和事务，例如创建线程、销毁线程、任务队列管理、线程队列管理等等。</p><p>故线程池也有自己的状态。<code>ThreadPoolExecutor</code>类中使用了一些<code>final int</code>常量变量来表示线程池的状态 ，分别为RUNNING、SHUTDOWN、STOP、TIDYING 、TERMINATED。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// runState is stored in the high-order bits</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> RUNNING    </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> SHUTDOWN   </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> STOP       </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> TIDYING    </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> TERMINATED </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">  </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&lt;&lt;</span><span style="color:#F6F6F4;"> COUNT_BITS;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// runState is stored in the high-order bits</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> RUNNING    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> SHUTDOWN   </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> STOP       </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> TIDYING    </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> COUNT_BITS;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> TERMINATED </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> COUNT_BITS;</span></span></code></pre></div><ul><li><p>线程池创建后处于<strong>RUNNING</strong>状态。</p></li><li><p>调用shutdown()方法后处于<strong>SHUTDOWN</strong>状态，线程池不能接受新的任务，清除一些空闲worker,不会等待阻塞队列的任务完成。</p></li><li><p>调用shutdownNow()方法后处于<strong>STOP</strong>状态，线程池不能接受新的任务，中断所有线程，阻塞队列中没有被执行的任务全部丢弃。此时，poolsize=0,阻塞队列的size也为0。</p></li><li><p>当所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为<strong>TIDYING</strong>状态。接着会执行terminated()函数。</p><blockquote><p>ThreadPoolExecutor中有一个控制状态的属性叫<code>ctl</code>，它是一个AtomicInteger类型的变量。线程池状态就是通过AtomicInteger类型的成员变量<code>ctl</code>来获取的。</p><p>获取的<code>ctl</code>值传入<code>runStateOf</code>方法，与<code>~CAPACITY</code>位与运算(<code>CAPACITY</code>是低29位全1的int变量)。</p><p><code>~CAPACITY</code>在这里相当于掩码，用来获取ctl的高3位，表示线程池状态；而另外的低29位用于表示工作线程数</p></blockquote></li><li><p>线程池处在TIDYING状态时，<strong>执行完terminated()方法之后</strong>，就会由 <strong>TIDYING -&gt; TERMINATED</strong>， 线程池被设置为TERMINATED状态。</p></li></ul><h3 id="线程池主要的任务处理流程" tabindex="-1">线程池主要的任务处理流程 <a class="header-anchor" href="#线程池主要的任务处理流程" aria-label="Permalink to &quot;线程池主要的任务处理流程&quot;">​</a></h3><p>处理任务的核心方法是<code>execute</code>，我们看看 JDK 1.8 源码中<code>ThreadPoolExecutor</code>是如何处理线程任务的：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// JDK 1.8 </span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">execute</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> command) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (command </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">NullPointerException</span><span style="color:#F6F6F4;">();   </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 1.当前线程数小于corePoolSize,则调用addWorker创建核心线程执行任务</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">workerCountOf</span><span style="color:#F6F6F4;">(c) </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> corePoolSize) {</span></span>
<span class="line"><span style="color:#F6F6F4;">       </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">addWorker</span><span style="color:#F6F6F4;">(command, </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">           </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">       c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 2.如果不小于corePoolSize，则将任务添加到workQueue队列。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">isRunning</span><span style="color:#F6F6F4;">(c) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> workQueue.</span><span style="color:#62E884;">offer</span><span style="color:#F6F6F4;">(command)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> recheck </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.1 如果isRunning返回false(状态检查)，则remove这个任务，然后执行拒绝策略。</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">isRunning</span><span style="color:#F6F6F4;">(recheck) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(command))</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">reject</span><span style="color:#F6F6F4;">(command);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 2.2 线程池处于running状态，但是没有线程，则创建线程</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">workerCountOf</span><span style="color:#F6F6F4;">(recheck) </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">addWorker</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 3.如果放入workQueue失败，则创建非核心线程执行任务，</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 如果这时创建非核心线程失败(当前线程总数不小于maximumPoolSize时)，就会执行拒绝策略。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#62E884;">addWorker</span><span style="color:#F6F6F4;">(command, </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">         </span><span style="color:#62E884;">reject</span><span style="color:#F6F6F4;">(command);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// JDK 1.8 </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">(Runnable command) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (command </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NullPointerException</span><span style="color:#24292E;">();   </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1.当前线程数小于corePoolSize,则调用addWorker创建核心线程执行任务</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">workerCountOf</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> corePoolSize) {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">addWorker</span><span style="color:#24292E;">(command, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">           </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">       c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2.如果不小于corePoolSize，则将任务添加到workQueue队列。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isRunning</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> workQueue.</span><span style="color:#6F42C1;">offer</span><span style="color:#24292E;">(command)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> recheck </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.1 如果isRunning返回false(状态检查)，则remove这个任务，然后执行拒绝策略。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isRunning</span><span style="color:#24292E;">(recheck) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(command))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(command);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 2.2 线程池处于running状态，但是没有线程，则创建线程</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">workerCountOf</span><span style="color:#24292E;">(recheck) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">addWorker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3.如果放入workQueue失败，则创建非核心线程执行任务，</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果这时创建非核心线程失败(当前线程总数不小于maximumPoolSize时)，就会执行拒绝策略。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">addWorker</span><span style="color:#24292E;">(command, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(command);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>ctl.get()</code>是获取线程池状态，用<code>int</code>类型表示。第二步中，入队前进行了一次<code>isRunning</code>判断，入队之后，又进行了一次<code>isRunning</code>判断。</p><p><strong>为什么要二次检查线程池的状态?</strong></p><p>在多线程的环境下，线程池的状态是时刻发生变化的。很有可能刚获取线程池状态后线程池状态就改变了。判断是否将<code>command</code>加入<code>workqueue</code>是线程池之前的状态。倘若没有二次检查，万一线程池处于非<strong>RUNNING</strong>状态（在多线程环境下很有可能发生），那么<code>command</code>永远不会执行。</p><p><strong>总结一下处理流程</strong></p><ol><li>线程总数量 &lt; corePoolSize，无论线程是否空闲，都会新建一个核心线程执行任务（让核心线程数量快速达到corePoolSize，在核心线程数量 &lt; corePoolSize时）。<strong>注意，这一步需要获得全局锁。</strong></li><li>线程总数量 &gt;= corePoolSize时，新来的线程任务会进入任务队列中等待，然后空闲的核心线程会依次去缓存队列中取任务来执行（体现了<strong>线程复用</strong>）。</li><li>当缓存队列满了，说明这个时候任务已经多到爆棚，需要一些“临时工”来执行这些任务了。于是会创建非核心线程去执行这个任务。<strong>注意，这一步需要获得全局锁。</strong></li><li>缓存队列满了， 且总线程数达到了maximumPoolSize，则会采取上面提到的拒绝策略进行处理。</li></ol><p>整个过程如图所示：</p><img src="`+p+`"><h3 id="threadpoolexecutor如何做到线程复用的" tabindex="-1">ThreadPoolExecutor如何做到线程复用的？ <a class="header-anchor" href="#threadpoolexecutor如何做到线程复用的" aria-label="Permalink to &quot;ThreadPoolExecutor如何做到线程复用的？&quot;">​</a></h3><p>我们知道，一个线程在创建的时候会指定一个线程任务，当执行完这个线程任务之后，线程自动销毁。但是线程池却可以复用线程，即一个线程执行完线程任务后不销毁，继续执行另外的线程任务。<strong>那么，线程池如何做到线程复用呢？</strong></p><p>原来，ThreadPoolExecutor在创建线程时，会将线程封装成<strong>工作线程worker</strong>,并放入<strong>工作线程组</strong>中，然后这个worker反复从阻塞队列中拿任务去执行。话不多说，我们继续看看源码（一定要仔细看，前后有联系）</p><p>这里的<code>addWorker</code>方法是在上面提到的<code>execute</code>方法里面调用的，先看看上半部分：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// ThreadPoolExecutor.addWorker方法源码上半部分</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">addWorker</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> firstTask, </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> core) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    retry</span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">runStateOf</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Check if queue empty only if necessary.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (rs </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> SHUTDOWN </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;"> (rs </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> SHUTDOWN </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">               firstTask </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">               </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;"> workQueue.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">()))</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> wc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">workerCountOf</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (wc </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> CAPACITY </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 1.如果core是ture,证明需要创建的线程为核心线程，则先判断当前线程是否大于核心线程</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 如果core是false,证明需要创建的是非核心线程，则先判断当前线程数是否大于总线程数</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 如果不小于，则返回false</span></span>
<span class="line"><span style="color:#F6F6F4;">                wc </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> (core </span><span style="color:#F286C4;">?</span><span style="color:#F6F6F4;"> corePoolSize </span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> maximumPoolSize))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">compareAndIncrementWorkerCount</span><span style="color:#F6F6F4;">(c))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">break</span><span style="color:#F6F6F4;"> retry;</span></span>
<span class="line"><span style="color:#F6F6F4;">            c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();  </span><span style="color:#7B7F8B;">// Re-read ctl</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">runStateOf</span><span style="color:#F6F6F4;">(c) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> rs)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">continue</span><span style="color:#F6F6F4;"> retry;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// else CAS failed due to workerCount change; retry inner loop</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ThreadPoolExecutor.addWorker方法源码上半部分</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addWorker</span><span style="color:#24292E;">(Runnable firstTask, </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> core) {</span></span>
<span class="line"><span style="color:#24292E;">    retry</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runStateOf</span><span style="color:#24292E;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Check if queue empty only if necessary.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rs </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> SHUTDOWN </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> (rs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> SHUTDOWN </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">               firstTask </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> workQueue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> wc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">workerCountOf</span><span style="color:#24292E;">(c);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (wc </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> CAPACITY </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 1.如果core是ture,证明需要创建的线程为核心线程，则先判断当前线程是否大于核心线程</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果core是false,证明需要创建的是非核心线程，则先判断当前线程数是否大于总线程数</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 如果不小于，则返回false</span></span>
<span class="line"><span style="color:#24292E;">                wc </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> (core </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> corePoolSize </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> maximumPoolSize))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">compareAndIncrementWorkerCount</span><span style="color:#24292E;">(c))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">break</span><span style="color:#24292E;"> retry;</span></span>
<span class="line"><span style="color:#24292E;">            c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();  </span><span style="color:#6A737D;">// Re-read ctl</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">runStateOf</span><span style="color:#24292E;">(c) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> rs)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;"> retry;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// else CAS failed due to workerCount change; retry inner loop</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>上半部分主要是判断线程数量是否超出阈值，超过了就返回false。我们继续看下半部分:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// ThreadPoolExecutor.addWorker方法源码下半部分</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> workerStarted </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> workerAdded </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Worker</span><span style="color:#F6F6F4;"> w </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.创建一个worker对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        w </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Worker</span><span style="color:#F6F6F4;">(firstTask);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.实例化一个Thread对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> w.thread;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (t </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3.线程池全局锁</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ReentrantLock</span><span style="color:#F6F6F4;"> mainLock </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.mainLock;</span></span>
<span class="line"><span style="color:#F6F6F4;">            mainLock.</span><span style="color:#62E884;">lock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Recheck while holding lock.</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// Back out on ThreadFactory failure or if</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// shut down before lock acquired.</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">runStateOf</span><span style="color:#F6F6F4;">(ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (rs </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> SHUTDOWN </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">                    (rs </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> SHUTDOWN </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> firstTask </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (t.</span><span style="color:#62E884;">isAlive</span><span style="color:#F6F6F4;">()) </span><span style="color:#7B7F8B;">// precheck that t is startable</span></span>
<span class="line"><span style="color:#F6F6F4;">                        </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">IllegalThreadStateException</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    workers.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(w);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> s </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> workers.</span><span style="color:#62E884;">size</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (s </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> largestPoolSize)</span></span>
<span class="line"><span style="color:#F6F6F4;">                        largestPoolSize </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> s;</span></span>
<span class="line"><span style="color:#F6F6F4;">                    workerAdded </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                mainLock.</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (workerAdded) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 4.启动这个线程</span></span>
<span class="line"><span style="color:#F6F6F4;">                t.</span><span style="color:#62E884;">start</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                workerStarted </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;"> workerStarted)</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">addWorkerFailed</span><span style="color:#F6F6F4;">(w);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> workerStarted;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ThreadPoolExecutor.addWorker方法源码下半部分</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> workerStarted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> workerAdded </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    Worker w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.创建一个worker对象</span></span>
<span class="line"><span style="color:#24292E;">        w </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(firstTask);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.实例化一个Thread对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> w.thread;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3.线程池全局锁</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ReentrantLock mainLock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.mainLock;</span></span>
<span class="line"><span style="color:#24292E;">            mainLock.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Recheck while holding lock.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// Back out on ThreadFactory failure or if</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// shut down before lock acquired.</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runStateOf</span><span style="color:#24292E;">(ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rs </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> SHUTDOWN </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                    (rs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> SHUTDOWN </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> firstTask </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (t.</span><span style="color:#6F42C1;">isAlive</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// precheck that t is startable</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalThreadStateException</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    workers.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(w);</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> workers.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (s </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> largestPoolSize)</span></span>
<span class="line"><span style="color:#24292E;">                        largestPoolSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s;</span></span>
<span class="line"><span style="color:#24292E;">                    workerAdded </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                mainLock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (workerAdded) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 4.启动这个线程</span></span>
<span class="line"><span style="color:#24292E;">                t.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                workerStarted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> workerStarted)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">addWorkerFailed</span><span style="color:#24292E;">(w);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> workerStarted;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>创建<code>worker</code>对象，并初始化一个<code>Thread</code>对象，然后启动这个线程对象。</p><p>我们接着看看<code>Worker</code>类，仅展示部分源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Worker类部分源码</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Worker</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AbstractQueuedSynchronizer</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> thread;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> firstTask;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Worker</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">firstTask</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">setState</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// inhibit interrupts until runWorker</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.firstTask </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> firstTask;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.thread </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getThreadFactory</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">newThread</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">runWorker</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//其余代码略...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Worker类部分源码</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AbstractQueuedSynchronizer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Thread thread;</span></span>
<span class="line"><span style="color:#24292E;">    Runnable firstTask;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Worker</span><span style="color:#24292E;">(Runnable </span><span style="color:#E36209;">firstTask</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setState</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// inhibit interrupts until runWorker</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.firstTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstTask;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getThreadFactory</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">newThread</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">runWorker</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//其余代码略...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>Worker</code>类实现了<code>Runnable</code>接口，所以<code>Worker</code>也是一个线程任务。在构造方法中，创建了一个线程，线程的任务就是自己。故<code>addWorker</code>方法调用addWorker方法源码下半部分中的第4步<code>t.start</code>，会触发<code>Worker</code>类的<code>run</code>方法被JVM调用。</p><p>我们再看看<code>runWorker</code>的逻辑：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Worker.runWorker方法源代码</span></span>
<span class="line"><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">runWorker</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Worker</span><span style="color:#F6F6F4;"> w) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> wt </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> task </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> w.firstTask;</span></span>
<span class="line"><span style="color:#F6F6F4;">    w.firstTask </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 1.线程启动之后，通过unlock方法释放锁</span></span>
<span class="line"><span style="color:#F6F6F4;">    w.</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">(); </span><span style="color:#7B7F8B;">// allow interrupts</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> completedAbruptly </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 2.Worker执行firstTask或从workQueue中获取任务，如果getTask方法不返回null,循环不退出</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (task </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (task </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getTask</span><span style="color:#F6F6F4;">()) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 2.1进行加锁操作，保证thread不被其他线程中断（除非线程池被中断）</span></span>
<span class="line"><span style="color:#F6F6F4;">            w.</span><span style="color:#62E884;">lock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// If pool is stopping, ensure thread is interrupted;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// if not, ensure thread is not interrupted.  This</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// requires a recheck in second case to deal with</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// shutdownNow race while clearing interrupt</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 2.2检查线程池状态，倘若线程池处于中断状态，当前线程将中断。 </span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((</span><span style="color:#62E884;">runStateAtLeast</span><span style="color:#F6F6F4;">(ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(), STOP) </span><span style="color:#F286C4;">||</span></span>
<span class="line"><span style="color:#F6F6F4;">                 (Thread.</span><span style="color:#62E884;">interrupted</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                  </span><span style="color:#62E884;">runStateAtLeast</span><span style="color:#F6F6F4;">(ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">(), STOP))) </span><span style="color:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">!</span><span style="color:#F6F6F4;">wt.</span><span style="color:#62E884;">isInterrupted</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">                wt.</span><span style="color:#62E884;">interrupt</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 2.3执行beforeExecute </span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#62E884;">beforeExecute</span><span style="color:#F6F6F4;">(wt, task);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> thrown </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 2.4执行任务</span></span>
<span class="line"><span style="color:#F6F6F4;">                    task.</span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">RuntimeException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    thrown </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x; </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Error</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    thrown </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x; </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> x;</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Throwable</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    thrown </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> x; </span><span style="color:#F286C4;">throw</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Error</span><span style="color:#F6F6F4;">(x);</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#7B7F8B;">// 2.5执行afterExecute方法 </span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#62E884;">afterExecute</span><span style="color:#F6F6F4;">(task, thrown);</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                task </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                w.completedTasks</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#7B7F8B;">// 2.6解锁操作</span></span>
<span class="line"><span style="color:#F6F6F4;">                w.</span><span style="color:#62E884;">unlock</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        completedAbruptly </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">processWorkerExit</span><span style="color:#F6F6F4;">(w, completedAbruptly);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Worker.runWorker方法源代码</span></span>
<span class="line"><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runWorker</span><span style="color:#24292E;">(Worker w) {</span></span>
<span class="line"><span style="color:#24292E;">    Thread wt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Runnable task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> w.firstTask;</span></span>
<span class="line"><span style="color:#24292E;">    w.firstTask </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1.线程启动之后，通过unlock方法释放锁</span></span>
<span class="line"><span style="color:#24292E;">    w.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// allow interrupts</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> completedAbruptly </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.Worker执行firstTask或从workQueue中获取任务，如果getTask方法不返回null,循环不退出</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (task </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTask</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 2.1进行加锁操作，保证thread不被其他线程中断（除非线程池被中断）</span></span>
<span class="line"><span style="color:#24292E;">            w.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// If pool is stopping, ensure thread is interrupted;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// if not, ensure thread is not interrupted.  This</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// requires a recheck in second case to deal with</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// shutdownNow race while clearing interrupt</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 2.2检查线程池状态，倘若线程池处于中断状态，当前线程将中断。 </span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((</span><span style="color:#6F42C1;">runStateAtLeast</span><span style="color:#24292E;">(ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), STOP) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">                 (Thread.</span><span style="color:#6F42C1;">interrupted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#6F42C1;">runStateAtLeast</span><span style="color:#24292E;">(ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(), STOP))) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">wt.</span><span style="color:#6F42C1;">isInterrupted</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                wt.</span><span style="color:#6F42C1;">interrupt</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 2.3执行beforeExecute </span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">beforeExecute</span><span style="color:#24292E;">(wt, task);</span></span>
<span class="line"><span style="color:#24292E;">                Throwable thrown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 2.4执行任务</span></span>
<span class="line"><span style="color:#24292E;">                    task.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (RuntimeException </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    thrown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Error </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    thrown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> x;</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    thrown </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> x; </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">// 2.5执行afterExecute方法 </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">afterExecute</span><span style="color:#24292E;">(task, thrown);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                task </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                w.completedTasks</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 2.6解锁操作</span></span>
<span class="line"><span style="color:#24292E;">                w.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        completedAbruptly </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">processWorkerExit</span><span style="color:#24292E;">(w, completedAbruptly);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>首先去执行创建这个worker时就有的任务，当执行完这个任务后，worker的生命周期并没有结束，在<code>while</code>循环中，worker会不断地调用<code>getTask</code>方法从<strong>阻塞队列</strong>中获取任务然后调用<code>task.run()</code>执行任务,从而达到<strong>复用线程</strong>的目的。只要<code>getTask</code>方法不返回<code>null</code>,此线程就不会退出。</p><p>当然，核心线程池中创建的线程想要拿到阻塞队列中的任务，先要判断线程池的状态，如果<strong>STOP</strong>或者<strong>TERMINATED</strong>，返回<code>null</code>。</p><p>最后看看<code>getTask</code>方法的实现:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// Worker.getTask方法源码</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getTask</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> timedOut </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// Did the last poll() time out?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (;;) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> c </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ctl.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> rs </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">runStateOf</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Check if queue empty only if necessary.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (rs </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> SHUTDOWN </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (rs </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> STOP </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> workQueue.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">())) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">decrementWorkerCount</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> wc </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">workerCountOf</span><span style="color:#F6F6F4;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// Are workers subject to culling?</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 1.allowCoreThreadTimeOut变量默认是false,核心线程即使空闲也不会被销毁</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 如果为true,核心线程在keepAliveTime内仍空闲则会被销毁。 </span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">boolean</span><span style="color:#F6F6F4;"> timed </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> allowCoreThreadTimeOut </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> wc </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> corePoolSize;</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">// 2.如果运行线程数超过了最大线程数，但是缓存队列已经空了，这时递减worker数量。 </span></span>
<span class="line"><span style="color:#F6F6F4;">　　　　 </span><span style="color:#7B7F8B;">// 如果有设置允许线程超时或者线程数量超过了核心线程数量，</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// 并且线程在规定时间内均未poll到任务且队列为空则递减worker数量</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ((wc </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> maximumPoolSize </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> (timed </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> timedOut))</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> (wc </span><span style="color:#F286C4;">&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">||</span><span style="color:#F6F6F4;"> workQueue.</span><span style="color:#62E884;">isEmpty</span><span style="color:#F6F6F4;">())) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#62E884;">compareAndDecrementWorkerCount</span><span style="color:#F6F6F4;">(c))</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">continue</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 3.如果timed为true(想想哪些情况下timed为true),则会调用workQueue的poll方法获取任务.</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 超时时间是keepAliveTime。如果超过keepAliveTime时长，</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// poll返回了null，上边提到的while循序就会退出，线程也就执行完了。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 如果timed为false（allowCoreThreadTimeOut为false</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 且wc &gt; corePoolSize为false），则会调用workQueue的take方法阻塞在当前。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#7B7F8B;">// 队列中有任务加入时，线程被唤醒，take方法返回任务，并执行。</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> r </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> timed </span><span style="color:#F286C4;">?</span></span>
<span class="line"><span style="color:#F6F6F4;">                workQueue.</span><span style="color:#62E884;">poll</span><span style="color:#F6F6F4;">(keepAliveTime, TimeUnit.NANOSECONDS) </span><span style="color:#F286C4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">                workQueue.</span><span style="color:#62E884;">take</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (r </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> r;</span></span>
<span class="line"><span style="color:#F6F6F4;">            timedOut </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">InterruptedException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">retry</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            timedOut </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Worker.getTask方法源码</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Runnable </span><span style="color:#6F42C1;">getTask</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> timedOut </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Did the last poll() time out?</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ctl.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> rs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runStateOf</span><span style="color:#24292E;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Check if queue empty only if necessary.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (rs </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> SHUTDOWN </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (rs </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> STOP </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> workQueue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">decrementWorkerCount</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> wc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">workerCountOf</span><span style="color:#24292E;">(c);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Are workers subject to culling?</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.allowCoreThreadTimeOut变量默认是false,核心线程即使空闲也不会被销毁</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果为true,核心线程在keepAliveTime内仍空闲则会被销毁。 </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> timed </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> allowCoreThreadTimeOut </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> wc </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> corePoolSize;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 2.如果运行线程数超过了最大线程数，但是缓存队列已经空了，这时递减worker数量。 </span></span>
<span class="line"><span style="color:#24292E;">　　　　 </span><span style="color:#6A737D;">// 如果有设置允许线程超时或者线程数量超过了核心线程数量，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 并且线程在规定时间内均未poll到任务且队列为空则递减worker数量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((wc </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> maximumPoolSize </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (timed </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> timedOut))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (wc </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> workQueue.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">compareAndDecrementWorkerCount</span><span style="color:#24292E;">(c))</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 3.如果timed为true(想想哪些情况下timed为true),则会调用workQueue的poll方法获取任务.</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 超时时间是keepAliveTime。如果超过keepAliveTime时长，</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// poll返回了null，上边提到的while循序就会退出，线程也就执行完了。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 如果timed为false（allowCoreThreadTimeOut为false</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 且wc &gt; corePoolSize为false），则会调用workQueue的take方法阻塞在当前。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 队列中有任务加入时，线程被唤醒，take方法返回任务，并执行。</span></span>
<span class="line"><span style="color:#24292E;">            Runnable r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> timed </span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">                workQueue.</span><span style="color:#6F42C1;">poll</span><span style="color:#24292E;">(keepAliveTime, TimeUnit.NANOSECONDS) </span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">                workQueue.</span><span style="color:#6F42C1;">take</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">            timedOut </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (InterruptedException </span><span style="color:#E36209;">retry</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            timedOut </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>核心线程的会一直卡在<code>workQueue.take</code>方法，被阻塞并挂起，不会占用CPU资源，直到拿到<code>Runnable</code> 然后返回（当然如果<strong>allowCoreThreadTimeOut</strong>设置为<code>true</code>,那么核心线程就会去调用<code>poll</code>方法，因为<code>poll</code>可能会返回<code>null</code>,所以这时候核心线程满足超时条件也会被销毁）。</p><p>非核心线程会workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) ，如果超时还没有拿到，下一次循环判断<strong>compareAndDecrementWorkerCount</strong>就会返回<code>null</code>,Worker对象的<code>run()</code>方法循环体的判断为<code>null</code>,任务结束，然后线程被系统回收 。</p><p>源码解析完毕，你理解的源码是否和图中的处理流程一致？如果不一致，那么就多看两遍吧，加油。</p><h2 id="四种常见的线程池" tabindex="-1">四种常见的线程池 <a class="header-anchor" href="#四种常见的线程池" aria-label="Permalink to &quot;四种常见的线程池&quot;">​</a></h2><p><code>Executors</code>类中提供的几个静态方法来创建线程池。大家到了这一步，如果看懂了前面讲的<code>ThreadPoolExecutor</code>构造方法中各种参数的意义，那么一看到<code>Executors</code>类中提供的线程池的源码就应该知道这个线程池是干嘛的。</p><h3 id="newcachedthreadpool" tabindex="-1">newCachedThreadPool <a class="header-anchor" href="#newcachedthreadpool" aria-label="Permalink to &quot;newCachedThreadPool&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newCachedThreadPool</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, Integer.MAX_VALUE,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                  </span><span style="color:#BF9EEE;">60L</span><span style="color:#F6F6F4;">, TimeUnit.SECONDS,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                  </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">SynchronousQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt;());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">newCachedThreadPool</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, Integer.MAX_VALUE,</span></span>
<span class="line"><span style="color:#24292E;">                                  </span><span style="color:#005CC5;">60L</span><span style="color:#24292E;">, TimeUnit.SECONDS,</span></span>
<span class="line"><span style="color:#24292E;">                                  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> SynchronousQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>CacheThreadPool</code>的<strong>运行流程</strong>如下：</p><ol><li>提交任务进线程池。</li><li>因为<strong>corePoolSize</strong>为0的关系，不创建核心线程，线程池最大为Integer.MAX_VALUE。</li><li>尝试将任务添加到<strong>SynchronousQueue</strong>队列。</li><li>如果SynchronousQueue入列成功，等待被当前运行的线程空闲后拉取执行。如果当前没有空闲线程，那么就创建一个非核心线程，然后从SynchronousQueue拉取任务并在当前线程执行。</li><li>如果SynchronousQueue已有任务在等待，入列操作将会阻塞。</li></ol><p>当需要执行很多<strong>短时间</strong>的任务时，CacheThreadPool的线程复用率比较高， 会显著的<strong>提高性能</strong>。而且线程60s后会回收，意味着即使没有任务进来，CacheThreadPool并不会占用很多资源。</p><h3 id="newfixedthreadpool" tabindex="-1">newFixedThreadPool <a class="header-anchor" href="#newfixedthreadpool" aria-label="Permalink to &quot;newFixedThreadPool&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> nThreads) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(nThreads, nThreads,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                      </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                      </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedBlockingQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt;());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> nThreads) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(nThreads, nThreads,</span></span>
<span class="line"><span style="color:#24292E;">                                      </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="color:#24292E;">                                      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedBlockingQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>核心线程数量和总线程数量相等，都是传入的参数nThreads，所以只能创建核心线程，不能创建非核心线程。因为LinkedBlockingQueue的默认大小是Integer.MAX_VALUE，故如果核心线程空闲，则交给核心线程处理；如果核心线程不空闲，则入列等待，直到核心线程空闲。</p><p><strong>与CachedThreadPool的区别</strong>：</p><ul><li>因为 corePoolSize == maximumPoolSize ，所以FixedThreadPool只会创建核心线程。 而CachedThreadPool因为corePoolSize=0，所以只会创建非核心线程。</li><li>在 getTask() 方法，如果队列里没有任务可取，线程会一直阻塞在 LinkedBlockingQueue.take() ，线程不会被回收。 CachedThreadPool会在60s后收回。</li><li>由于线程不会被回收，会一直卡在阻塞，所以<strong>没有任务的情况下， FixedThreadPool占用资源更多</strong>。</li><li>都几乎不会触发拒绝策略，但是原理不同。FixedThreadPool是因为阻塞队列可以很大（最大为Integer最大值），故几乎不会触发拒绝策略；CachedThreadPool是因为线程池很大（最大为Integer最大值），几乎不会导致线程数量大于最大线程数，故几乎不会触发拒绝策略。</li></ul><h3 id="newsinglethreadexecutor" tabindex="-1">newSingleThreadExecutor <a class="header-anchor" href="#newsinglethreadexecutor" aria-label="Permalink to &quot;newSingleThreadExecutor&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newSingleThreadExecutor</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">FinalizableDelegatedExecutorService</span></span>
<span class="line"><span style="color:#F6F6F4;">        (</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#BF9EEE;">0L</span><span style="color:#F6F6F4;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="color:#F6F6F4;">                                </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">LinkedBlockingQueue</span><span style="color:#F6F6F4;">&lt;Runnable&gt;()));</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ExecutorService </span><span style="color:#6F42C1;">newSingleThreadExecutor</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> FinalizableDelegatedExecutorService</span></span>
<span class="line"><span style="color:#24292E;">        (</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#005CC5;">0L</span><span style="color:#24292E;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> LinkedBlockingQueue&lt;</span><span style="color:#D73A49;">Runnable</span><span style="color:#24292E;">&gt;()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>有且仅有一个核心线程（ corePoolSize == maximumPoolSize=1），使用了LinkedBlockingQueue（容量很大），所以，<strong>不会创建非核心线程</strong>。所有任务按照<strong>先来先执行</strong>的顺序执行。如果这个唯一的线程不空闲，那么新来的任务会存储在任务队列里等待执行。</p><h3 id="newscheduledthreadpool" tabindex="-1">newScheduledThreadPool <a class="header-anchor" href="#newscheduledthreadpool" aria-label="Permalink to &quot;newScheduledThreadPool&quot;">​</a></h3><p>创建一个定长线程池，支持定时及周期性任务执行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ScheduledExecutorService</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">newScheduledThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ScheduledThreadPoolExecutor</span><span style="color:#F6F6F4;">(corePoolSize);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">//ScheduledThreadPoolExecutor():</span></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ScheduledThreadPoolExecutor</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> corePoolSize) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(corePoolSize, Integer.MAX_VALUE,</span></span>
<span class="line"><span style="color:#F6F6F4;">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span></span>
<span class="line"><span style="color:#F6F6F4;">          </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DelayedWorkQueue</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ScheduledExecutorService </span><span style="color:#6F42C1;">newScheduledThreadPool</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledThreadPoolExecutor</span><span style="color:#24292E;">(corePoolSize);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//ScheduledThreadPoolExecutor():</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ScheduledThreadPoolExecutor</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> corePoolSize) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(corePoolSize, Integer.MAX_VALUE,</span></span>
<span class="line"><span style="color:#24292E;">          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DelayedWorkQueue</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>四种常见的线程池基本够我们使用了，但是《阿里巴巴开发手册》不建议我们直接使用Executors类中的线程池，而是通过<code>ThreadPoolExecutor</code>的方式，这样的处理方式让写的同学需要更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>但如果你及团队本身对线程池非常熟悉，又确定业务规模不会大到资源耗尽的程度（比如线程数量或任务队列长度可能达到Integer.MAX_VALUE）时，其实是可以使用JDK提供的这几个接口的，它能让我们的代码具有更强的可读性。</p><hr><blockquote><p>内容大部分来源以下三个开源仓库：</p><ul><li><a href="http://concurrent.redspider.group/" target="_blank" rel="noreferrer">深入浅出 Java 多线程</a></li><li><a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a></li><li><a href="https://github.com/CoderLeixiaoshuai/java-eight-part" target="_blank" rel="noreferrer">Java八股文</a></li></ul></blockquote><hr>`,74),t=[e];function c(r,F,y,i,E,d){return n(),a("div",null,t)}const h=s(o,[["render",c]]);export{C as __pageData,h as default};
