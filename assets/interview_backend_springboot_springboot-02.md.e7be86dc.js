import{_ as o,o as r,c as a,V as t}from"./chunks/framework.c6d8cbec.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/springboot/springboot-02.md","filePath":"interview/backend/springboot/springboot-02.md"}'),n={name:"interview/backend/springboot/springboot-02.md"},e=t(`<h3 id="_1、springboot自动配置的原理是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#1springboot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">1、SpringBoot自动配置的原理是什么？</a> <a class="header-anchor" href="#_1、springboot自动配置的原理是什么" aria-label="Permalink to &quot;[1、SpringBoot自动配置的原理是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#1springboot自动配置的原理是什么)&quot;">​</a></h3><p>SpringBoot启动的时候通过@EnableAutoConfiguration注解找到META-INF/spring.factories配置文件中所有的自动配置类，并对其进行加载，而这些自动配置类的类名都是以AutoConfiguration结尾来命名的，它实际上就是一个javaConfig形式的Spring容器配置类，它们都有一个@EnableConfigurationPerperties的注解，通过这个注解启动XXXProperties命名的类去加载全局配置中的属性，如server.port,而XXXProperties通过@ConfigurationProperties注解将全局配置文件中的属性与自己的属性进行绑定。</p><h3 id="_2、springboot-配置加载顺序" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#2springboot-%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F" target="_blank" rel="noreferrer">2、SpringBoot 配置加载顺序?</a> <a class="header-anchor" href="#_2、springboot-配置加载顺序" aria-label="Permalink to &quot;[2、SpringBoot 配置加载顺序?](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#2springboot-配置加载顺序)&quot;">​</a></h3><p><strong>1、</strong> properties文件 2、YAML文件 3、系统环境变量 4、命令行参数</p><h3 id="_3、spring-boot初始化环境变量流程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#3spring-boot%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B5%81%E7%A8%8B" target="_blank" rel="noreferrer">3、spring boot初始化环境变量流程?</a> <a class="header-anchor" href="#_3、spring-boot初始化环境变量流程" aria-label="Permalink to &quot;[3、spring boot初始化环境变量流程?](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#3spring-boot初始化环境变量流程)&quot;">​</a></h3><p><strong>1、</strong> 调用<code>prepareEnvironment</code>方法去设置环境变量</p><p><strong>2、</strong> 接下来有三个方法<code>getOrCreateEnvironment</code>，<code>configureEnvironment</code>，<code>environmentPrepared</code></p><p><strong>3、</strong> <code>getOrCreateEnvironment</code>去初始化系统环境变量</p><p><strong>4、</strong> <code>configureEnvironment</code>去初始化命令行参数</p><p><strong>5、</strong> <code>environmentPrepared</code>当广播到来的时候调用<code>onApplicationEnvironmentPreparedEvent</code>方法去使用<code>postProcessEnvironment</code>方法<code>load yml</code>和<code>properties变量</code></p><h3 id="_4、运行-springboot-有哪几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#4%E8%BF%90%E8%A1%8C-springboot-%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">4、运行 SpringBoot 有哪几种方式？</a> <a class="header-anchor" href="#_4、运行-springboot-有哪几种方式" aria-label="Permalink to &quot;[4、运行 SpringBoot 有哪几种方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#4运行-springboot-有哪几种方式)&quot;">​</a></h3><p><strong>1、</strong> 打包用命令或者者放到容器中运行</p><p><strong>2、</strong> 用 Maven/ Gradle 插件运行</p><p><strong>3、</strong> 直接执行 main 方法运行</p><h3 id="_5、springboot-中如何解决跨域问题" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#5springboot-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-" target="_blank" rel="noreferrer">5、SpringBoot 中如何解决跨域问题 ?</a> <a class="header-anchor" href="#_5、springboot-中如何解决跨域问题" aria-label="Permalink to &quot;[5、SpringBoot 中如何解决跨域问题 ?](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#5springboot-中如何解决跨域问题-)&quot;">​</a></h3><p>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 SpringBoot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。</p><p><a href="/docs/Configuration.html">@Configuration </a></p><p>public class CorsConfig implements WebMvcConfigurer {</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">@Override</span></span>
<span class="line"><span style="color:#f6f6f4;">public void addCorsMappings(CorsRegistry registry) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    registry.addMapping(&quot;/**&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .allowedOrigins(&quot;*&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .allowCredentials(true)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)</span></span>
<span class="line"><span style="color:#f6f6f4;">            .maxAge(3600);</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">@Override</span></span>
<span class="line"><span style="color:#24292e;">public void addCorsMappings(CorsRegistry registry) {</span></span>
<span class="line"><span style="color:#24292e;">    registry.addMapping(&quot;/**&quot;)</span></span>
<span class="line"><span style="color:#24292e;">            .allowedOrigins(&quot;*&quot;)</span></span>
<span class="line"><span style="color:#24292e;">            .allowCredentials(true)</span></span>
<span class="line"><span style="color:#24292e;">            .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)</span></span>
<span class="line"><span style="color:#24292e;">            .maxAge(3600);</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>}</p><h3 id="_6、springboot如何配置log4j" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#6springboot%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AElog4j" target="_blank" rel="noreferrer">6、SpringBoot如何配置log4j？</a> <a class="header-anchor" href="#_6、springboot如何配置log4j" aria-label="Permalink to &quot;[6、SpringBoot如何配置log4j？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#6springboot如何配置log4j)&quot;">​</a></h3><p>在引用log4j之前，需要先排除项目创建时候带的日志，因为那个是Logback，然后再引入log4j的依赖，引入依赖之后，去src/main/resources目录下的log4j-spring.properties配置文件，就可以开始对应用的日志进行配置使用。</p><h3 id="_7、springboot运行项目的几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#7springboot%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">7、SpringBoot运行项目的几种方式？</a> <a class="header-anchor" href="#_7、springboot运行项目的几种方式" aria-label="Permalink to &quot;[7、SpringBoot运行项目的几种方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#7springboot运行项目的几种方式)&quot;">​</a></h3><p>打包用命令或者放到容器中运行</p><p><strong>1、</strong> 打成jar包，使用java -jar xxx.jar运行</p><p><strong>2、</strong> 打成war包，放到tomcat里面运行</p><p>直接用maven插件运行 maven spring-boot：run</p><p>直接执行main方法运行</p><h3 id="_8、什么是javaconfig" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#8%E4%BB%80%E4%B9%88%E6%98%AFjavaconfig" target="_blank" rel="noreferrer">8、什么是JavaConfig？</a> <a class="header-anchor" href="#_8、什么是javaconfig" aria-label="Permalink to &quot;[8、什么是JavaConfig？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#8什么是javaconfig)&quot;">​</a></h3><p>Spring JavaConfig是Spring社区的产品，它提供了配置Spring IoC容器的纯Java方法。因此它有助于避免使用XML配置。使用JavaConfig的优点在于：</p><p>面向对象的配置。由于配置被定义为JavaConfig中的类，因此用户可以充分利用Java中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean方法等。</p><p>减少或消除XML配置。基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在XML和Java之间来回切换。</p><p>JavaConfig为开发人员提供了一种纯Java方法来配置与XML配置概念相似的Spring容器。</p><p>从技术角度来讲，只使用JavaConfig配置类来配置容器是可行的，但实际上很多人认为将JavaConfig与XML混合匹配是理想的。</p><p>类型安全和重构友好。JavaConfig提供了一种类型安全的方法来配置Spring容器。由于Java 5.0对泛型的支持，现在可以按类型而不是按名称检索bean，不需要任何强制转换或基于字符串的查找</p><h3 id="_9、运行-springboot-有哪几种方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#9%E8%BF%90%E8%A1%8C-springboot-%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noreferrer">9、运行 SpringBoot 有哪几种方式？</a> <a class="header-anchor" href="#_9、运行-springboot-有哪几种方式" aria-label="Permalink to &quot;[9、运行 SpringBoot 有哪几种方式？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#9运行-springboot-有哪几种方式)&quot;">​</a></h3><p><strong>1、</strong> 打包用命令或者放到容器中运行</p><p><strong>2、</strong> 用 Maven/ Gradle 插件运行</p><p><strong>3、</strong> 直接执行 main 方法运行</p><h3 id="_10、springboot-常用的-starter-有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%B1%87%E6%80%BB%EF%BC%8C%E9%99%84%E7%AD%94%E6%A1%88.md#10springboot-%E5%B8%B8%E7%94%A8%E7%9A%84-starter-%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">10、SpringBoot 常用的 Starter 有哪些？</a> <a class="header-anchor" href="#_10、springboot-常用的-starter-有哪些" aria-label="Permalink to &quot;[10、SpringBoot 常用的 Starter 有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/SpringBoot/SpringBoot最新2021年面试题大汇总，附答案.md#10springboot-常用的-starter-有哪些)&quot;">​</a></h3><p><strong>1、</strong> spring-boot-starter-web ：提供 Spring MVC + 内嵌的 Tomcat 。</p><p><strong>2、</strong> spring-boot-starter-data-jpa ：提供 Spring JPA + Hibernate 。</p><p><strong>3、</strong> spring-boot-starter-data-Redis ：提供 Redis 。</p><p><strong>4、</strong> mybatis-spring-boot-starter ：提供 MyBatis 。</p><h3 id="_11、springboot与springcloud-区别" tabindex="-1">11、SpringBoot与SpringCloud 区别 <a class="header-anchor" href="#_11、springboot与springcloud-区别" aria-label="Permalink to &quot;11、SpringBoot与SpringCloud 区别&quot;">​</a></h3><h3 id="_12、如何集成springboot和activemq" tabindex="-1">12、如何集成SpringBoot和ActiveMQ？ <a class="header-anchor" href="#_12、如何集成springboot和activemq" aria-label="Permalink to &quot;12、如何集成SpringBoot和ActiveMQ？&quot;">​</a></h3><h3 id="_13、springboot-有哪几种读取配置的方式" tabindex="-1">13、SpringBoot 有哪几种读取配置的方式？ <a class="header-anchor" href="#_13、springboot-有哪几种读取配置的方式" aria-label="Permalink to &quot;13、SpringBoot 有哪几种读取配置的方式？&quot;">​</a></h3><h3 id="_14、springboot-2-x-有什么新特性-与-1-x-有什么区别" tabindex="-1">14、SpringBoot 2.X 有什么新特性？与 1.X 有什么区别？ <a class="header-anchor" href="#_14、springboot-2-x-有什么新特性-与-1-x-有什么区别" aria-label="Permalink to &quot;14、SpringBoot 2.X 有什么新特性？与 1.X 有什么区别？&quot;">​</a></h3><h3 id="_15、springdata-项目所支持的关系数据存储技术" tabindex="-1">15、SpringData 项目所支持的关系数据存储技术： <a class="header-anchor" href="#_15、springdata-项目所支持的关系数据存储技术" aria-label="Permalink to &quot;15、SpringData 项目所支持的关系数据存储技术：&quot;">​</a></h3><h3 id="_16、如何在自定义端口上运行springboot应用程序" tabindex="-1">16、如何在自定义端口上运行SpringBoot应用程序？ <a class="header-anchor" href="#_16、如何在自定义端口上运行springboot应用程序" aria-label="Permalink to &quot;16、如何在自定义端口上运行SpringBoot应用程序？&quot;">​</a></h3><h3 id="_17、springboot默认支持的日志框架有哪些-可以进行哪些设置" tabindex="-1">17、SpringBoot默认支持的日志框架有哪些？可以进行哪些设置？ <a class="header-anchor" href="#_17、springboot默认支持的日志框架有哪些-可以进行哪些设置" aria-label="Permalink to &quot;17、SpringBoot默认支持的日志框架有哪些？可以进行哪些设置？&quot;">​</a></h3><h3 id="_18、spring-initializr-是创建-springboot-projects-的唯一方法吗" tabindex="-1">18、Spring Initializr 是创建 SpringBoot Projects 的唯一方法吗？ <a class="header-anchor" href="#_18、spring-initializr-是创建-springboot-projects-的唯一方法吗" aria-label="Permalink to &quot;18、Spring Initializr 是创建 SpringBoot Projects 的唯一方法吗？&quot;">​</a></h3><h3 id="_19、async异步调用方法" tabindex="-1">19、Async异步调用方法 <a class="header-anchor" href="#_19、async异步调用方法" aria-label="Permalink to &quot;19、Async异步调用方法&quot;">​</a></h3><h3 id="_20、您使用了哪些starter-maven依赖项" tabindex="-1">20、您使用了哪些starter maven依赖项？ <a class="header-anchor" href="#_20、您使用了哪些starter-maven依赖项" aria-label="Permalink to &quot;20、您使用了哪些starter maven依赖项？&quot;">​</a></h3><h3 id="_21、springboot-有哪些优点" tabindex="-1">21、SpringBoot 有哪些优点？ <a class="header-anchor" href="#_21、springboot-有哪些优点" aria-label="Permalink to &quot;21、SpringBoot 有哪些优点？&quot;">​</a></h3><h3 id="_22、如何给静态变量赋值" tabindex="-1">22、如何给静态变量赋值？ <a class="header-anchor" href="#_22、如何给静态变量赋值" aria-label="Permalink to &quot;22、如何给静态变量赋值？&quot;">​</a></h3><h3 id="_23、springboot、spring-mvc-和-spring-有什么区别" tabindex="-1">23、SpringBoot、Spring MVC 和 Spring 有什么区别？ <a class="header-anchor" href="#_23、springboot、spring-mvc-和-spring-有什么区别" aria-label="Permalink to &quot;23、SpringBoot、Spring MVC 和 Spring 有什么区别？&quot;">​</a></h3><h3 id="_24、如何实现springboot应用程序的安全性" tabindex="-1">24、如何实现SpringBoot应用程序的安全性？ <a class="header-anchor" href="#_24、如何实现springboot应用程序的安全性" aria-label="Permalink to &quot;24、如何实现SpringBoot应用程序的安全性？&quot;">​</a></h3><h3 id="_25、springboot微服务中如何实现-session-共享" tabindex="-1">25、SpringBoot微服务中如何实现 session 共享 ? <a class="header-anchor" href="#_25、springboot微服务中如何实现-session-共享" aria-label="Permalink to &quot;25、SpringBoot微服务中如何实现 session 共享 ?&quot;">​</a></h3><h3 id="_26、springboot-中的监视器是什么" tabindex="-1">26、SpringBoot 中的监视器是什么？ <a class="header-anchor" href="#_26、springboot-中的监视器是什么" aria-label="Permalink to &quot;26、SpringBoot 中的监视器是什么？&quot;">​</a></h3><h3 id="_27、我们如何监视所有-springboot-微服务" tabindex="-1">27、我们如何监视所有 SpringBoot 微服务？ <a class="header-anchor" href="#_27、我们如何监视所有-springboot-微服务" aria-label="Permalink to &quot;27、我们如何监视所有 SpringBoot 微服务？&quot;">​</a></h3><h3 id="_28、你如何理解-springboot-配置加载顺序" tabindex="-1">28、你如何理解 SpringBoot 配置加载顺序？ <a class="header-anchor" href="#_28、你如何理解-springboot-配置加载顺序" aria-label="Permalink to &quot;28、你如何理解 SpringBoot 配置加载顺序？&quot;">​</a></h3><h3 id="_29、如何禁用特定的自动配置类" tabindex="-1">29、如何禁用特定的自动配置类？ <a class="header-anchor" href="#_29、如何禁用特定的自动配置类" aria-label="Permalink to &quot;29、如何禁用特定的自动配置类？&quot;">​</a></h3><h3 id="_30、什么是csrf攻击" tabindex="-1">30、什么是CSRF攻击？ <a class="header-anchor" href="#_30、什么是csrf攻击" aria-label="Permalink to &quot;30、什么是CSRF攻击？&quot;">​</a></h3><h3 id="_31、什么是-websockets" tabindex="-1">31、什么是 WebSockets？ <a class="header-anchor" href="#_31、什么是-websockets" aria-label="Permalink to &quot;31、什么是 WebSockets？&quot;">​</a></h3>`,65),s=[e];function i(p,g,l,c,E,d){return r(),a("div",null,s)}const h=o(n,[["render",i]]);export{b as __pageData,h as default};
