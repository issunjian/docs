import{_ as a,o as e,c as r,V as t}from"./chunks/framework.c6d8cbec.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/并发编程/并发编程-14.md","filePath":"interview/backend/并发编程/并发编程-14.md"}'),o={name:"interview/backend/并发编程/并发编程-14.md"},s=t('<h3 id="_1、如何开启和查看-gc-日志" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%92%8C%E6%9F%A5%E7%9C%8B-gc-%E6%97%A5%E5%BF%97" target="_blank" rel="noreferrer">1、如何开启和查看 GC 日志？</a> <a class="header-anchor" href="#_1、如何开启和查看-gc-日志" aria-label="Permalink to &quot;[1、如何开启和查看 GC 日志？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#1如何开启和查看-gc-日志)&quot;">​</a></h3><p><strong>常见的 GC 日志开启参数包括：</strong></p><p><strong>1、</strong> -Xloggc:filename，指定日志文件路径</p><p><strong>2、</strong> -XX:+PrintGC，打印 GC 基本信息</p><p><strong>3、</strong> -XX:+PrintGCDetails，打印 GC 详细信息</p><p><strong>4、</strong> -XX:+PrintGCTimeStamps，打印 GC 时间戳</p><p><strong>5、</strong> -XX:+PrintGCDateStamps，打印 GC 日期与时间</p><p><strong>6、</strong> -XX:+PrintHeapAtGC，打印 GC 前后的堆、方法区、元空间可用容量变化</p><p><strong>7、</strong> -XX:+PrintTenuringDistribution，打印熬过收集后剩余对象的年龄分布信息，有助于 MaxTenuringThreshold 参数调优设置</p><p><strong>8、</strong> -XX:+PrintAdaptiveSizePolicy，打印收集器自动设置堆空间各分代区域大小、收集目标等自动调节的相关信息</p><p><strong>9、</strong> -XX:+PrintGCApplicationConcurrentTime，打印 GC 过程中用户线程并发时间</p><p><strong>10、</strong> -XX:+PrintGCApplicationStoppedTime，打印 GC 过程中用户线程停顿时间</p><p><strong>11、</strong> -XX:+HeapDumpOnOutOfMemoryError，堆 oom 时自动 dump</p><p><strong>12、</strong> -XX:HeapDumpPath，堆 oom 时 dump 文件路径</p><p>Java 9 JVM 日志模块进行了重构，参数格式发生变化，这个需要知道。</p><p>GC 日志输出的格式，会随着上面的参数不同而发生变化。关注各个分代的内存使用情况、垃圾回收次数、垃圾回收的原因、垃圾回收占用的时间、吞吐量、用户线程停顿时间。</p><p>借助工具可视化工具可以更方便的分析，在线工具 GCeasy；离线版可以使用 GCViewer。</p><p>如果现场环境不允许，可以使用 JDK 自带的 jstat 工具监控观察 GC 情况。</p><h3 id="_2、在java中executor和executors的区别" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2%E5%9C%A8java%E4%B8%ADexecutor%E5%92%8Cexecutors%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noreferrer">2、在Java中Executor和Executors的区别？</a> <a class="header-anchor" href="#_2、在java中executor和executors的区别" aria-label="Permalink to &quot;[2、在Java中Executor和Executors的区别？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#2在java中executor和executors的区别)&quot;">​</a></h3><p><strong>1、</strong> Executors 工具类的不同方法按照我们的需求创建了不同的线程池，来满足业务的需求。</p><p><strong>2、</strong> Executor 接口对象能执行我们的线程任务。</p><p><strong>3、</strong> ExecutorService接口继承了Executor接口并进行了扩展，提供了更多的方法我们能获得任务执行的状态并且可以获取任务的返回值。</p><p><strong>4、</strong> 使用ThreadPoolExecutor 可以创建自定义线程池。</p><p><strong>5、</strong> Future 表示异步计算的结果，他提供了检查计算是否完成的方法，以等待计算的完成，并可以使用get()方法获取计算的结果。</p><h3 id="_3、常用jvm基本配置参数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E5%B8%B8%E7%94%A8jvm%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">3、常用JVM基本配置参数</a> <a class="header-anchor" href="#_3、常用jvm基本配置参数" aria-label="Permalink to &quot;[3、常用JVM基本配置参数](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#3常用jvm基本配置参数)&quot;">​</a></h3><p><strong>1、</strong> -Xmx：最大分配内存，默认为物理内存的1/4</p><p><strong>2、</strong> -Xms：初始分配内存，默认为物理内存的1/64</p><p><strong>3、</strong> -Xss：等价于-XX:ThreadStackSize，单个线程栈空间大小，默认一般为512k-1024k，通过jinfo查看为0时，表示使用默认值</p><p><strong>4、</strong> -Xmn：设置年轻代大小</p><p><strong>5、</strong> -XX:MetaspeaceSize：设置元空间大小（默认21M左右，可以配置大一些），元空间的本质可永久代类似，都是对JVM规范中方法区的实现，不过元空间与永久代的最大区别在于：元空间不在虚拟机中，而是使用本地内存，因此，默认情况下，元空间大小仅受本地内存大小限制</p><p><strong>6、</strong> 典型设置案例：-Xms128m -Xmx4096m -Xss1024k -XX:MetaspaceSize=512m -XX:+PrintCommandLineFlags -XX:+PrintGCDetails -XX:+UseSerialGC</p><p><strong>7、</strong> -XX:+PrintGCDetails：打印垃圾回收细节，打印GC： 打印Full GC：</p><p><strong>8、</strong> -XX:SurvivorRatio：调整Eden中survivor区比例，默认-XX:SurvivorRatio=8（8:1:1），调整为-XX:SurvivorRatio=4（4:1:1）,一般使用默认值</p><p><strong>9、</strong> -XX:NewRatio：调整新生代与老年代的比例，默认为2（新生代1，老年代2，年轻代占整个堆的1/3）,调整为-XX:NewRatio=4表示（新生代1，老年代4，年轻代占堆的1/5）,一般使用默认值</p><p><strong>10、</strong> -XX:MaxTenuringThreshold：设置垃圾的最大年龄（经历多少次垃圾回收进入老年代），默认15（15次垃圾回收后依旧存活的对象进入老年代），JDK1.8设置必须0&lt;-XX:MaxTenuringThreshold&lt;15</p><h3 id="_4、什么是类加载器-类加载器有哪些" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%9C%89%E5%93%AA%E4%BA%9B" target="_blank" rel="noreferrer">4、什么是类加载器，类加载器有哪些？</a> <a class="header-anchor" href="#_4、什么是类加载器-类加载器有哪些" aria-label="Permalink to &quot;[4、什么是类加载器，类加载器有哪些？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#4什么是类加载器类加载器有哪些)&quot;">​</a></h3><p>实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。</p><p><strong>主要有一下四种类加载器：</strong></p><p><strong>1、</strong> 动类加载器（Bootstrap ClassLoader）</p><p>用来加载 Java 核心类库，无法被 Java 程序直接引用。</p><p><strong>2、</strong> 展类加载器（extensions class loader）：</p><p>它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</p><p><strong>3、</strong> 统类加载器（system class loader）：</p><p>它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。</p><p><strong>4、</strong> 户自定义类加载器</p><p>通过继承 java.lang.ClassLoader 类的方式实现。</p><h3 id="_5、aqs支持两种同步方式" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5aqs%E6%94%AF%E6%8C%81%E4%B8%A4%E7%A7%8D%E5%90%8C%E6%AD%A5%E6%96%B9%E5%BC%8F%EF%BC%9A" target="_blank" rel="noreferrer">5、AQS支持两种同步方式：</a> <a class="header-anchor" href="#_5、aqs支持两种同步方式" aria-label="Permalink to &quot;[5、AQS支持两种同步方式：](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#5aqs支持两种同步方式：)&quot;">​</a></h3><p><strong>1、</strong> 独占式</p><p><strong>2、</strong> 共享式</p><p>这样方便使用者实现不同类型的同步组件，独占式如ReentrantLock，共享式如Semaphore，CountDownLatch，组合式的如ReentrantReadWriteLock。总之，AQS为使用提供了底层支撑，如何组装实现，使用者可以自由发挥。</p><h3 id="_6、线程的状态流转图" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E6%B5%81%E8%BD%AC%E5%9B%BE" target="_blank" rel="noreferrer">6、线程的状态流转图</a> <a class="header-anchor" href="#_6、线程的状态流转图" aria-label="Permalink to &quot;[6、线程的状态流转图](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#6线程的状态流转图)&quot;">​</a></h3><p>线程的生命周期及五种基本状态：</p><h3 id="_7、并发编程有什么缺点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E7%BC%BA%E7%82%B9" target="_blank" rel="noreferrer">7、并发编程有什么缺点</a> <a class="header-anchor" href="#_7、并发编程有什么缺点" aria-label="Permalink to &quot;[7、并发编程有什么缺点](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#7并发编程有什么缺点)&quot;">​</a></h3><p>并发编程的目的就是为了能提高程序的执行效率，提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、上下文切换、线程安全、死锁等问题。</p><h3 id="_8、synchronized-和-volatile-的区别是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8synchronized-%E5%92%8C-volatile-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、synchronized 和 volatile 的区别是什么？</a> <a class="header-anchor" href="#_8、synchronized-和-volatile-的区别是什么" aria-label="Permalink to &quot;[8、synchronized 和 volatile 的区别是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#8synchronized-和-volatile-的区别是什么)&quot;">​</a></h3><p><strong>1、</strong> synchronized 表示只有一个线程可以获取作用对象的锁，执行代码，阻塞其他线程。</p><p><strong>2、</strong> volatile 表示变量在 CPU 的寄存器中是不确定的，必须从主存中读取。保证多线程环境下变量的可见性；禁止指令重排序。</p><p><strong>区别</strong></p><p><strong>1、</strong> volatile 是变量修饰符；synchronized 可以修饰类、方法、变量。</p><p><strong>2、</strong> volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性。</p><p><strong>3、</strong> volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。</p><p><strong>4、</strong> volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</p><p><strong>5、</strong> volatile关键字是线程同步的轻量级实现，所以volatile性能肯定比synchronized关键字要好。但是volatile关键字只能用于变量而synchronized关键字可以修饰方法以及代码块。synchronized关键字在JavaSE1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，实际开发中使用 synchronized 关键字的场景还是更多一些。</p><h3 id="_9、什么是线程组-为什么在java中不推荐使用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E7%BB%84%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8java%E4%B8%AD%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">9、什么是线程组，为什么在Java中不推荐使用？</a> <a class="header-anchor" href="#_9、什么是线程组-为什么在java中不推荐使用" aria-label="Permalink to &quot;[9、什么是线程组，为什么在Java中不推荐使用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#9什么是线程组为什么在java中不推荐使用)&quot;">​</a></h3><p>线程组和线程池是两个不同的概念，他们的作用完全不同，前者是为了方便线程的管理，后者是为了管理线程的生命周期，复用线程，减少创建销毁线程的开销。</p><h3 id="_10、什么是线程调度器-thread-scheduler-和时间分片-time-slicing" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8thread-scheduler%E5%92%8C%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87time-slicing-" target="_blank" rel="noreferrer">10、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？</a> <a class="header-anchor" href="#_10、什么是线程调度器-thread-scheduler-和时间分片-time-slicing" aria-label="Permalink to &quot;[10、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？](https://gitee.com/souyunku/DevBooks/blob/master/docs/并发编程/并发编程最新面试题，常见面试题及答案汇总.md#10什么是线程调度器thread-scheduler和时间分片time-slicing-)&quot;">​</a></h3><p><strong>1、</strong> 线程调度器是一个操作系统服务，它负责为 Runnable 状态的线程分配 CPU 时间。一旦我们创建一个线程并启动它，它的执行便依赖于线程调度器的实现。</p><p><strong>2、</strong> 时间分片是指将可用的 CPU 时间分配给可用的 Runnable 线程的过程。分配 CPU 时间可以基于线程优先级或者线程等待的时间。</p><p><strong>3、</strong> 线程调度并不受到 Java 虚拟机控制，所以由应用程序来控制它是更好的选择（也就是说不要让你的程序依赖于线程的优先级）。</p><h3 id="_11、什么是java-timer-类-如何创建一个有特定时间间隔的任务" tabindex="-1">11、什么是Java Timer 类？如何创建一个有特定时间间隔的任务？ <a class="header-anchor" href="#_11、什么是java-timer-类-如何创建一个有特定时间间隔的任务" aria-label="Permalink to &quot;11、什么是Java Timer 类？如何创建一个有特定时间间隔的任务？&quot;">​</a></h3><h3 id="_12、什么是可重入锁-reentrantlock" tabindex="-1">12、什么是可重入锁（ReentrantLock）？ <a class="header-anchor" href="#_12、什么是可重入锁-reentrantlock" aria-label="Permalink to &quot;12、什么是可重入锁（ReentrantLock）？&quot;">​</a></h3><h3 id="_13、方法区的作用是什么" tabindex="-1">13、方法区的作用是什么？ <a class="header-anchor" href="#_13、方法区的作用是什么" aria-label="Permalink to &quot;13、方法区的作用是什么？&quot;">​</a></h3><h3 id="_14、finalize-方法什么时候被调用-析构函数-finalization-的目的是什么" tabindex="-1">14、finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？ <a class="header-anchor" href="#_14、finalize-方法什么时候被调用-析构函数-finalization-的目的是什么" aria-label="Permalink to &quot;14、finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？&quot;">​</a></h3><h3 id="_15、代码示例" tabindex="-1">15、代码示例 <a class="header-anchor" href="#_15、代码示例" aria-label="Permalink to &quot;15、代码示例&quot;">​</a></h3><h3 id="_16、什么叫线程安全-servlet-是线程安全吗" tabindex="-1">16、什么叫线程安全？servlet 是线程安全吗? <a class="header-anchor" href="#_16、什么叫线程安全-servlet-是线程安全吗" aria-label="Permalink to &quot;16、什么叫线程安全？servlet 是线程安全吗?&quot;">​</a></h3><h3 id="_17、什么是线程调度器-thread-scheduler-和时间分片-time-slicing" tabindex="-1">17、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？ <a class="header-anchor" href="#_17、什么是线程调度器-thread-scheduler-和时间分片-time-slicing" aria-label="Permalink to &quot;17、什么是线程调度器(Thread Scheduler)和时间分片(Time Slicing )？&quot;">​</a></h3><h3 id="_18、可以直接调用thread类的run-方法么" tabindex="-1">18、可以直接调用Thread类的run ()方法么？ <a class="header-anchor" href="#_18、可以直接调用thread类的run-方法么" aria-label="Permalink to &quot;18、可以直接调用Thread类的run ()方法么？&quot;">​</a></h3><h3 id="_19、java软引用" tabindex="-1">19、JAVA软引用 <a class="header-anchor" href="#_19、java软引用" aria-label="Permalink to &quot;19、JAVA软引用&quot;">​</a></h3><h3 id="_20、垃圾回收的优点和原理。说说2种回收机制" tabindex="-1">20、垃圾回收的优点和原理。说说2种回收机制 <a class="header-anchor" href="#_20、垃圾回收的优点和原理。说说2种回收机制" aria-label="Permalink to &quot;20、垃圾回收的优点和原理。说说2种回收机制&quot;">​</a></h3><h3 id="_21、运行时常量池溢出的原因" tabindex="-1">21、运行时常量池溢出的原因？ <a class="header-anchor" href="#_21、运行时常量池溢出的原因" aria-label="Permalink to &quot;21、运行时常量池溢出的原因？&quot;">​</a></h3><h3 id="_22、什么是threadlocal变量" tabindex="-1">22、什么是ThreadLocal变量？ <a class="header-anchor" href="#_22、什么是threadlocal变量" aria-label="Permalink to &quot;22、什么是ThreadLocal变量？&quot;">​</a></h3><h3 id="_23、假如生产环境cpu占用过高-请谈谈你的分析思路和定位。" tabindex="-1">23、假如生产环境CPU占用过高，请谈谈你的分析思路和定位。 <a class="header-anchor" href="#_23、假如生产环境cpu占用过高-请谈谈你的分析思路和定位。" aria-label="Permalink to &quot;23、假如生产环境CPU占用过高，请谈谈你的分析思路和定位。&quot;">​</a></h3><h3 id="_24、列举一些你知道的打破双亲委派机制的例子。为什么要打破" tabindex="-1">24、列举一些你知道的打破双亲委派机制的例子。为什么要打破？ <a class="header-anchor" href="#_24、列举一些你知道的打破双亲委派机制的例子。为什么要打破" aria-label="Permalink to &quot;24、列举一些你知道的打破双亲委派机制的例子。为什么要打破？&quot;">​</a></h3><h3 id="_25、各种回收器-各自优缺点-重点cms、g1" tabindex="-1">25、各种回收器，各自优缺点，重点CMS、G1 <a class="header-anchor" href="#_25、各种回收器-各自优缺点-重点cms、g1" aria-label="Permalink to &quot;25、各种回收器，各自优缺点，重点CMS、G1&quot;">​</a></h3><h3 id="_26、什么是cas" tabindex="-1">26、什么是CAS <a class="header-anchor" href="#_26、什么是cas" aria-label="Permalink to &quot;26、什么是CAS&quot;">​</a></h3><h3 id="_27、什么是竞争条件-你怎样发现和解决竞争" tabindex="-1">27、什么是竞争条件？你怎样发现和解决竞争？ <a class="header-anchor" href="#_27、什么是竞争条件-你怎样发现和解决竞争" aria-label="Permalink to &quot;27、什么是竞争条件？你怎样发现和解决竞争？&quot;">​</a></h3><h3 id="_28、什么是乐观锁和悲观锁" tabindex="-1">28、什么是乐观锁和悲观锁 <a class="header-anchor" href="#_28、什么是乐观锁和悲观锁" aria-label="Permalink to &quot;28、什么是乐观锁和悲观锁&quot;">​</a></h3><h3 id="_29、为什么代码会重排序" tabindex="-1">29、为什么代码会重排序？ <a class="header-anchor" href="#_29、为什么代码会重排序" aria-label="Permalink to &quot;29、为什么代码会重排序？&quot;">​</a></h3><h3 id="_30、什么时候会触发fullgc" tabindex="-1">30、什么时候会触发FullGC <a class="header-anchor" href="#_30、什么时候会触发fullgc" aria-label="Permalink to &quot;30、什么时候会触发FullGC&quot;">​</a></h3><h3 id="_31、类初始化的情况有哪些" tabindex="-1">31、类初始化的情况有哪些？ <a class="header-anchor" href="#_31、类初始化的情况有哪些" aria-label="Permalink to &quot;31、类初始化的情况有哪些？&quot;">​</a></h3><h3 id="_32、java中你怎样唤醒一个阻塞的线程" tabindex="-1">32、Java中你怎样唤醒一个阻塞的线程？ <a class="header-anchor" href="#_32、java中你怎样唤醒一个阻塞的线程" aria-label="Permalink to &quot;32、Java中你怎样唤醒一个阻塞的线程？&quot;">​</a></h3>',91),n=[s];function E(i,l,B,h,d,c){return e(),r("div",null,n)}const p=a(o,[["render",E]]);export{u as __pageData,p as default};
