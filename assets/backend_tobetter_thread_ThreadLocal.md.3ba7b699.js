import{_ as s,o as a,c as n,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/ThreadLocal-01.84a09a7e.png",o="/docs/assets/ThreadLocal-02.878f0f13.png",e="/docs/assets/ThreadLocal-02.a7ad8b1f.gif",t="/docs/assets/ThreadLocal-03.37f563a4.jpg",D=JSON.parse('{"title":"吊打Java并发面试官之ThreadLocal","description":"吊打Java并发面试官之ThreadLocal","frontmatter":{"title":"吊打Java并发面试官之ThreadLocal","shortTitle":"ThreadLocal","description":"吊打Java并发面试官之ThreadLocal","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ThreadLocal"}]]},"headers":[],"relativePath":"backend/tobetter/thread/ThreadLocal.md","filePath":"backend/tobetter/thread/ThreadLocal.md"}'),c={name:"backend/tobetter/thread/ThreadLocal.md"},r=l(`<h2 id="threadlocal-的简介" tabindex="-1">ThreadLocal 的简介 <a class="header-anchor" href="#threadlocal-的简介" aria-label="Permalink to &quot;ThreadLocal 的简介&quot;">​</a></h2><p>在多线程编程中通常解决线程安全的问题时，我们会利用 synchronzed 或者 lock 控制线程对临界区资源的同步顺序，但是这种加锁的方式会让未获取到锁的线程进行阻塞等待，很显然这种方式的时间效率并不是特别好。</p><p><strong>线程安全问题的核心在于多个线程会对同一个临界区共享资源进行操作</strong>，那么，如果每个线程都使用自己的“共享资源”，各自使用各自的，互相不影响到彼此，即多个线程间达到隔离的状态，这样就不会出现线程安全的问题。</p><p>事实上，这就是一种“<strong>空间换时间</strong>”的方案，每个线程都拥有自己的“共享资源”无疑会让内存占用大很多，但是由于不需要同步也就减少了线程可能存在的阻塞等待，从而提高时间效率。</p><p>虽然 ThreadLocal 并不在 java.util.concurrent 包中而在 java.lang 包中，但我更倾向于把它当作是一种并发容器（虽然真正存放数据的是 ThreadLocalMap）进行归类。</p><p>顾名思义，<strong>ThreadLocal 表示线程的“本地变量”，即每个线程都拥有该变量副本，达到人手一份的效果，各用各的，这样就可以避免共享资源的竞争</strong>。</p><h2 id="threadlocal-的实现原理" tabindex="-1">ThreadLocal 的实现原理 <a class="header-anchor" href="#threadlocal-的实现原理" aria-label="Permalink to &quot;ThreadLocal 的实现原理&quot;">​</a></h2><p>要想学习 ThreadLocal 的实现原理，就必须了解它的几个核心方法，包括怎样存怎样取等等，下面我们一个个来看。</p><h3 id="set-方法" tabindex="-1">set() 方法 <a class="header-anchor" href="#set-方法" aria-label="Permalink to &quot;set() 方法&quot;">​</a></h3><p><strong>set 方法设置当前线程中 ThreadLocal 变量的值</strong>，该方法的源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> value) {</span></span>
<span class="line"><span style="color:#F6F6F4;">	  </span><span style="color:#7B7F8B;">//1. 获取当前线程实例对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	  </span><span style="color:#7B7F8B;">//2. 通过当前线程实例获取到ThreadLocalMap对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;"> map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMap</span><span style="color:#F6F6F4;">(t);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (map </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//3. 如果Map不为null,则以当前ThreadLocal实例为key,值为value进行存入</span></span>
<span class="line"><span style="color:#F6F6F4;">    	map.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, value);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//4.map为null,则新建ThreadLocalMap并存入value</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">createMap</span><span style="color:#F6F6F4;">(t, value);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(T value) {</span></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6A737D;">//1. 获取当前线程实例对象</span></span>
<span class="line"><span style="color:#24292E;">    Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	  </span><span style="color:#6A737D;">//2. 通过当前线程实例获取到ThreadLocalMap对象</span></span>
<span class="line"><span style="color:#24292E;">    ThreadLocalMap map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(t);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//3. 如果Map不为null,则以当前ThreadLocal实例为key,值为value进行存入</span></span>
<span class="line"><span style="color:#24292E;">    	map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//4.map为null,则新建ThreadLocalMap并存入value</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">createMap</span><span style="color:#24292E;">(t, value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>方法的逻辑很清晰，具体请看上面的注释。通过源码我们知道 value 是存放在 ThreadLocalMap 里的，当前先把它理解为一个普普通通的 map 即可，也就是说，<strong>数据 value 是存放在 ThreadLocalMap 这个容器中的，并且是以当前 ThreadLocal 实例为 key 的</strong>。</p><p>简单看下 ThreadLocalMap 是什么，有个简单的认识就好，后面会具体说的。</p><p><strong>首先 ThreadLocalMap 是怎样来的</strong>？源码很清楚，是通过<code>getMap(t)</code>进行获取：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> t.ThreadLocals;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ThreadLocalMap </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(Thread t) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> t.ThreadLocals;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法直接返回当前线程对象 t 的一个成员变量 ThreadLocals：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span>
<span class="line"><span style="color:#7B7F8B;"> * by the ThreadLocal class. */</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;"> ThreadLocals </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span>
<span class="line"><span style="color:#6A737D;"> * by the ThreadLocal class. */</span></span>
<span class="line"><span style="color:#24292E;">ThreadLocal.ThreadLocalMap ThreadLocals </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span></code></pre></div><p>也就是说<strong>ThreadLocalMap 的引用是作为 Thread 的一个成员变量的，被 Thread 进行维护的</strong>。回过头再来看 set 方法，当 map 为 Null 的时候会通过<code>createMap(t，value)</code>方法 new 出来一个：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t, </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> firstValue) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    t.ThreadLocals </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ThreadLocalMap</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, firstValue);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createMap</span><span style="color:#24292E;">(Thread t, T firstValue) {</span></span>
<span class="line"><span style="color:#24292E;">    t.ThreadLocals </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadLocalMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, firstValue);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法就是new 一个 ThreadLocalMap 实例对象，然后同样以当前 ThreadLocal 实例作为 key，值为 value 存放到 ThreadLocalMap 中的，然后将当前线程对象的 ThreadLocals 赋值为 ThreadLocalMap 对象。</p><p>现在来对 set 方法进行总结一下：</p><p>通过当前线程对象 thread 获取该 thread 所维护的 ThreadLocalMap，如果 ThreadLocalMap 不为 null，则以 ThreadLocal 实例为 key，值为 value 的键值对存入 ThreadLocalMap，若 ThreadLocalMap 为 null 的话，就新建 ThreadLocalMap，然后再以 ThreadLocal 为键，值为 value 的键值对存入即可。</p><h3 id="get-方法" tabindex="-1">get() 方法 <a class="header-anchor" href="#get-方法" aria-label="Permalink to &quot;get() 方法&quot;">​</a></h3><p><strong>get 方法是获取当前线程中 ThreadLocal 变量的值</strong>，同样的还是来看看源码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 获取当前线程的实例对象</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//2. 获取当前线程的ThreadLocalMap</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;"> map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMap</span><span style="color:#F6F6F4;">(t);</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (map </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//3. 获取map中当前ThreadLocal实例为key的值的entry</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;">.</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> map.</span><span style="color:#62E884;">getEntry</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">      @</span><span style="color:#97E1F1;font-style:italic;">SuppressWarnings</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">unchecked</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//4. 当前entitiy不为null的话，就返回相应的值value</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> result </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> (T)e.value;</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> result;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//5. 若map为null或者entry为null的话通过该方法初始化，并返回该方法返回的value</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setInitialValue</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 获取当前线程的实例对象</span></span>
<span class="line"><span style="color:#24292E;">  Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//2. 获取当前线程的ThreadLocalMap</span></span>
<span class="line"><span style="color:#24292E;">  ThreadLocalMap map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//3. 获取map中当前ThreadLocal实例为key的值的entry</span></span>
<span class="line"><span style="color:#24292E;">    ThreadLocalMap.Entry e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> map.</span><span style="color:#6F42C1;">getEntry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      @</span><span style="color:#D73A49;">SuppressWarnings</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;unchecked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//4. 当前entitiy不为null的话，就返回相应的值value</span></span>
<span class="line"><span style="color:#24292E;">      T result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (T)e.value;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//5. 若map为null或者entry为null的话通过该方法初始化，并返回该方法返回的value</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setInitialValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>弄懂了 set 方法的逻辑，看 get 方法只需要带着逆向思维去看就好，如果是那样存的，反过来去拿就好。代码逻辑请看注释，另外，看下 setInitialValue 主要做了些什么事情？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setInitialValue</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">initialValue</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Thread</span><span style="color:#F6F6F4;"> t </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;"> map </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMap</span><span style="color:#F6F6F4;">(t);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (map </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">        map.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">, value);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">createMap</span><span style="color:#F6F6F4;">(t, value);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">setInitialValue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    T value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initialValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    Thread t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    ThreadLocalMap map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(t);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (map </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        map.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">createMap</span><span style="color:#24292E;">(t, value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这段方法的逻辑和 set 方法几乎一致，另外值得关注的是 initialValue 方法:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">protected</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">T</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">initialValue</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> T </span><span style="color:#6F42C1;">initialValue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个<strong>方法是 protected 修饰的，也就是说继承 ThreadLocal 的子类可重写该方法，实现赋值为其他的初始值</strong>。关于 get 方法来总结一下：</p><p>通过当前线程 thread 实例获取到它所维护的 ThreadLocalMap，然后以当前 ThreadLocal 实例为 key 获取该 map 中的键值对（Entry），如果 Entry 不为 null 则返回 Entry 的 value。如果获取 ThreadLocalMap 为 null 或者 Entry 为 null 的话，就以当前 ThreadLocal 为 Key，value 为 null 存入 map 后，并返回 null。</p><h3 id="remove-方法" tabindex="-1">remove() 方法 <a class="header-anchor" href="#remove-方法" aria-label="Permalink to &quot;remove() 方法&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 获取当前线程的ThreadLocalMap</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#97E1F1;font-style:italic;">ThreadLocalMap</span><span style="color:#F6F6F4;"> m </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getMap</span><span style="color:#F6F6F4;">(Thread.</span><span style="color:#62E884;">currentThread</span><span style="color:#F6F6F4;">());</span></span>
<span class="line"><span style="color:#F6F6F4;"> 	</span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (m </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//2. 从map中删除以当前ThreadLocal实例为key的键值对</span></span>
<span class="line"><span style="color:#F6F6F4;">		m.</span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 获取当前线程的ThreadLocalMap</span></span>
<span class="line"><span style="color:#24292E;">	ThreadLocalMap m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getMap</span><span style="color:#24292E;">(Thread.</span><span style="color:#6F42C1;">currentThread</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;"> 	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (m </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//2. 从map中删除以当前ThreadLocal实例为key的键值对</span></span>
<span class="line"><span style="color:#24292E;">		m.</span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>get、set 方法实现了存数据和读数据的操作，remove 方法实现了如何删数据的操作。删除数据当然是从 map 中删除数据，先获取与当前线程相关联的 ThreadLocalMap，然后从 map 中删除该 ThreadLocal 实例为 key 的键值对即可。</p><h2 id="threadlocalmap-详解" tabindex="-1">ThreadLocalMap 详解 <a class="header-anchor" href="#threadlocalmap-详解" aria-label="Permalink to &quot;ThreadLocalMap 详解&quot;">​</a></h2><p>从上面的分析我们已经知道，数据其实都放在了 ThreadLocalMap 中，ThreadLocal 的 get、set 和 remove 方法实际上都是通过 ThreadLocalMap 的 getEntry、set 和 remove 方法实现的。如果想真正全方位的弄懂 ThreadLocal，势必得再对 ThreadLocalMap 做一番理解。</p><h3 id="entry-数据结构" tabindex="-1">Entry 数据结构 <a class="header-anchor" href="#entry-数据结构" aria-label="Permalink to &quot;Entry 数据结构&quot;">​</a></h3><p>ThreadLocalMap 是 ThreadLocal 一个静态内部类，和大多数容器一样，内部维护了一个数组（Entry 类型的 table 数组）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * The table, resized as necessary.</span></span>
<span class="line"><span style="color:#7B7F8B;"> * table.length MUST always be a power of two.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[] table;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * The table, resized as necessary.</span></span>
<span class="line"><span style="color:#6A737D;"> * table.length MUST always be a power of two.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[] table;</span></span></code></pre></div><p>通过注释可以看出，table 数组的长度为 2 的幂次方。接下来看下 Entry 是什么：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Entry</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">extends</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">WeakReference</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#7B7F8B;">    /** The value associated with this ThreadLocal. */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">Entry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; </span><span style="color:#FFB86C;font-style:italic;">k</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#BF9EEE;font-style:italic;">super</span><span style="color:#F6F6F4;">(k);</span></span>
<span class="line"><span style="color:#F6F6F4;">        value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> v;</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WeakReference</span><span style="color:#24292E;">&lt;ThreadLocal&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">    /** The value associated with this ThreadLocal. */</span></span>
<span class="line"><span style="color:#24292E;">    Object value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">(ThreadLocal&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">k</span><span style="color:#24292E;">, Object </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">super</span><span style="color:#24292E;">(k);</span></span>
<span class="line"><span style="color:#24292E;">        value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Entry 是一个以 ThreadLocal 为 key，Object 为 value 的键值对，另外需要注意的是这里的<strong>ThreadLocal 是弱引用，因为 Entry 继承了 WeakReference，在 Entry 的构造方法中，调用了 super(k)方法，会将 ThreadLocal 实例包装成一个 WeakReferenece。</strong></p><p>到这里我们可以用一个图来理解下 Thread、ThreadLocal、ThreadLocalMap、Entry 之间的关系：</p><img src="`+p+'"><p>注意上图中的实线表示强引用，虚线表示弱引用。如图所示，每个线程实例中都可以通过 ThreadLocals 获取到 ThreadLocalMap，而 ThreadLocalMap 实际上就是一个以 ThreadLocal 实例为 key，任意对象为 value 的 Entry 数组。</p><p>当我们为 ThreadLocal 变量赋值时，实际上就是以当前 ThreadLocal 实例为 key，值为 value 的 Entry 往这个 ThreadLocalMap 中存放。</p><p>需要注意的是，Entry 中的 key 是弱引用，当 ThreadLocal 外部强引用被置为 null(<code>ThreadLocalInstance=null</code>)时，那么系统 GC 的时候，根据可达性分析，这个 ThreadLocal 实例就没有任何一条链路能够引用到它，此时 ThreadLocal 势必会被回收，这样一来，ThreadLocalMap 中就会出现 key 为 null 的 Entry，就没有办法访问这些 key 为 null 的 Entry 的 value，如果当前线程再迟迟不结束的话，这些 key 为 null 的 Entry 的 value 就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value 永远无法回收，造成内存泄漏。</p><p>当然，如果当前 thread 运行结束，ThreadLocal、ThreadLocalMap、Entry 没有引用链可达，在垃圾回收的时候都会被系统回收。在实际开发中，会使用线程池去维护线程的创建和复用，比如固定大小的线程池，线程为了复用是不会主动结束的。</p><p>ThreadLocal 的内存泄漏问题，值得我们思考和注意，关于这个问题可以看这篇文章:</p><blockquote><p>----<a href="http://www.jianshu.com/p/dde92ec37bd1" target="_blank" rel="noreferrer">详解 ThreadLocal 内存泄漏问题</a></p></blockquote><h3 id="set-方法-1" tabindex="-1">set 方法 <a class="header-anchor" href="#set-方法-1" aria-label="Permalink to &quot;set 方法&quot;">​</a></h3><p>与 ConcurrentHashMap、HashMap 等容器一样，ThreadLocalMap 也是采用散列表进行实现的。在了解 set 方法前，我们先来回顾下关于散列表相关的知识。</p><h4 id="散列表" tabindex="-1">散列表 <a class="header-anchor" href="#散列表" aria-label="Permalink to &quot;散列表&quot;">​</a></h4><p>理想状态下，散列表就是一个包含关键字的固定大小的数组，通过使用散列函数，将关键字映射到数组的不同位置。下面是</p><img src="'+o+'"><p>在理想状态下，哈希函数可以将关键字均匀的分散到数组的不同位置，不会出现两个关键字散列值相同（假设关键字数量小于数组的大小）的情况。</p><p>但是在实际使用中，经常会出现多个关键字散列值相同的情况（被映射到数组的同一个位置），我们将这种情况称为散列冲突。</p><p>为了解决散列冲突，主要采用下面两种方式： <strong>分离链表法</strong>（separate chaining）和<strong>开放地址法</strong>（open addressing）</p><h5 id="分离链表法" tabindex="-1">分离链表法 <a class="header-anchor" href="#分离链表法" aria-label="Permalink to &quot;分离链表法&quot;">​</a></h5><p>分离链表法使用链表解决冲突，将散列值相同的元素都保存到一个链表中。当查询的时候，首先找到元素所在的链表，然后遍历链表查找对应的元素，典型实现为 HashMap、ConcurrentHashMap 的拉链法。下面是一个示意图：</p><img src="'+e+'"><h5 id="开放地址法" tabindex="-1">开放地址法 <a class="header-anchor" href="#开放地址法" aria-label="Permalink to &quot;开放地址法&quot;">​</a></h5><p>开放地址法不会创建链表，当关键字散列到的数组单元已经被另外一个关键字占用的时候，就会尝试在数组中寻找其他的单元，直到找到一个空的单元。</p><p>探测数组空单元的方式有很多，这里介绍一种最简单的 -- 线性探测法。线性探测法就是从冲突的数组单元开始，依次往后搜索空单元，如果到数组尾部，再从头开始搜索（环形查找）。如下图所示：</p><img src="'+t+`"><p>关于两种方式的比较，可以参考 <a href="http://www.nowamagic.net/academy/detail/3008060" target="_blank" rel="noreferrer">这篇文章</a>。</p><p><strong>ThreadLocalMap 中使用开放地址法来处理散列冲突</strong>，而 HashMap 中使用的分离链表法。之所以采用不同的方式主要是因为：</p><blockquote><p>在 ThreadLocalMap 中的散列值分散的十分均匀，很少会出现冲突。并且 ThreadLocalMap 经常需要清除无用的对象，使用纯数组更加方便。</p></blockquote><p>在了解这些相关知识后我们再回过头来看一下 set 方法。set 方法的源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> value) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// We don&#39;t use a fast path as with get() because it is at</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// least as common to use set() to create new entries as</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// it is to replace existing ones, in which case, a fast</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// path would fail more often than not.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[] tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//根据ThreadLocal的hashCode确定Entry应该存放的位置</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> key.ThreadLocalHashCode </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (len</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//采用开放地址法，hash冲突的时候使用线性探测</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab[i];</span></span>
<span class="line"><span style="color:#F6F6F4;">         e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">         e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab[i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">nextIndex</span><span style="color:#F6F6F4;">(i, len)]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; k </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//覆盖旧Entry</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (k </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> value;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//当key为null时，说明ThreadLocal强引用已经被释放掉，那么就无法</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//再通过这个key获取ThreadLocalMap中对应的entry，这里就存在内存泄漏的可能性</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (k </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//用当前插入的值替换掉这个key为null的“脏”entry</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">replaceStaleEntry</span><span style="color:#F6F6F4;">(key, value, i);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//新建entry并插入table中i处</span></span>
<span class="line"><span style="color:#F6F6F4;">    tab[i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Entry</span><span style="color:#F6F6F4;">(key, value);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> sz </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">size;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//插入后再次清除一些key为null的“脏”entry,如果大于阈值就需要扩容</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#62E884;">cleanSomeSlots</span><span style="color:#F6F6F4;">(i, sz) </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> sz </span><span style="color:#F286C4;">&gt;=</span><span style="color:#F6F6F4;"> threshold)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">rehash</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(ThreadLocal</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> key, Object value) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// We don&#39;t use a fast path as with get() because it is at</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// least as common to use set() to create new entries as</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// it is to replace existing ones, in which case, a fast</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// path would fail more often than not.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[] tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//根据ThreadLocal的hashCode确定Entry应该存放的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.ThreadLocalHashCode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (len</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//采用开放地址法，hash冲突的时候使用线性探测</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Entry e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab[i];</span></span>
<span class="line"><span style="color:#24292E;">         e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab[i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextIndex</span><span style="color:#24292E;">(i, len)]) {</span></span>
<span class="line"><span style="color:#24292E;">        ThreadLocal&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//覆盖旧Entry</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">            e.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//当key为null时，说明ThreadLocal强引用已经被释放掉，那么就无法</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//再通过这个key获取ThreadLocalMap中对应的entry，这里就存在内存泄漏的可能性</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//用当前插入的值替换掉这个key为null的“脏”entry</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">replaceStaleEntry</span><span style="color:#24292E;">(key, value, i);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//新建entry并插入table中i处</span></span>
<span class="line"><span style="color:#24292E;">    tab[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">(key, value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> sz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">size;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//插入后再次清除一些key为null的“脏”entry,如果大于阈值就需要扩容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">cleanSomeSlots</span><span style="color:#24292E;">(i, sz) </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> sz </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> threshold)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">rehash</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>set 方法的关键部分<strong>请看上面的注释</strong>，主要有这样几点需要注意：</p><h4 id="threadlocal-的-hashcode" tabindex="-1">ThreadLocal 的 hashcode <a class="header-anchor" href="#threadlocal-的-hashcode" aria-label="Permalink to &quot;ThreadLocal 的 hashcode&quot;">​</a></h4><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> ThreadLocalHashCode </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">nextHashCode</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> HASH_INCREMENT </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0x61c88647</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">AtomicInteger</span><span style="color:#F6F6F4;"> nextHashCode </span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">AtomicInteger</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#7B7F8B;">  /**</span></span>
<span class="line"><span style="color:#7B7F8B;">   * Returns the next hash code.</span></span>
<span class="line"><span style="color:#7B7F8B;">   */</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">nextHashCode</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> nextHashCode.</span><span style="color:#62E884;">getAndAdd</span><span style="color:#F6F6F4;">(HASH_INCREMENT);</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ThreadLocalHashCode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextHashCode</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> HASH_INCREMENT </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x61c88647</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> AtomicInteger nextHashCode </span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicInteger</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * Returns the next hash code.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextHashCode</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> nextHashCode.</span><span style="color:#6F42C1;">getAndAdd</span><span style="color:#24292E;">(HASH_INCREMENT);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>从源码中我们可以清楚的看到 ThreadLocal 实例的 hashCode 是通过 nextHashCode() 方法实现的，该方法实际上是用一个 AtomicInteger 加上 0x61c88647 来实现的。</p><p>0x61c88647 这个数是有特殊意义的，它能够保证 hash 表的每个散列桶能够均匀的分布，这是<code>Fibonacci Hashing</code>，关于更多介绍可以看<a href="https://www.cnblogs.com/zhangjk1993/archive/2017/03/29/6641745.html" target="_blank" rel="noreferrer">这篇文章的 ThreadLocal 散列值部分</a>。</p><p>也正是能够均匀分布，所以 ThreadLocal 选择使用开放地址法来解决 hash 冲突的问题。</p><h4 id="怎样确定新值插入到哈希表中的位置" tabindex="-1">怎样确定新值插入到哈希表中的位置？ <a class="header-anchor" href="#怎样确定新值插入到哈希表中的位置" aria-label="Permalink to &quot;怎样确定新值插入到哈希表中的位置？&quot;">​</a></h4><p>该操作源码为：<code>key.ThreadLocalHashCode &amp; (len-1)</code>，同 HashMap 和 ConcurrentHashMap 等容器的方式一样，利用当前 key(即 ThreadLocal 实例)的 hashcode 与哈希表大小相与，因为哈希表大小总是为 2 的幂次方，所以相与等同于一个取模的过程，这样就可以通过 Key 分配到具体的哈希桶中去。至于为什么取模要通过位与运算的原因，很简单，位运算的执行效率远远高于取模运算。</p><h4 id="怎样解决-hash-冲突" tabindex="-1">怎样解决 hash 冲突？ <a class="header-anchor" href="#怎样解决-hash-冲突" aria-label="Permalink to &quot;怎样解决 hash 冲突？&quot;">​</a></h4><p>源码中通过<code>nextIndex(i, len)</code>方法解决 hash 冲突的问题，该方法中的<code>((i + 1 &lt; len) ? i + 1 : 0);</code>，也就是不断往后线性探测，当到哈希表末尾的时候再从 0 开始，成环形。</p><h4 id="怎样解决-脏-entry" tabindex="-1">怎样解决“脏”Entry？ <a class="header-anchor" href="#怎样解决-脏-entry" aria-label="Permalink to &quot;怎样解决“脏”Entry？&quot;">​</a></h4><p>在分析 ThreadLocal、ThreadLocalMap 以及 Entry 的关系的时候，我们已经知道使用 ThreadLocal 有可能存在内存泄漏（对象创建出来后，在之后一直没有使用该对象，但是垃圾回收器无法回收这个部分的内存），在源码中针对这种 key 为 null 的 Entry 称之为“stale entry”，直译为不新鲜的 entry，我把它理解为“脏 entry”，自然而然，Josh Bloch 和 Doug Lea 大师考虑到了这种情况，在 set 方法的 for 循环中寻找和当前 Key 相同的可覆盖 entry 的过程中通过<strong>replaceStaleEntry</strong>方法解决脏 entry 的问题。</p><p>如果当前<code>table[i]</code>为 null 的话，直接插入新 entry 后也会通过<strong>cleanSomeSlots</strong>来解决脏 entry 的问题，关于 cleanSomeSlots 和 replaceStaleEntry 方法，会在详解 ThreadLocal 内存泄漏中讲到，具体可看<a href="http://www.jianshu.com/p/dde92ec37bd1" target="_blank" rel="noreferrer">这篇文章</a>。</p><h4 id="如何进行扩容" tabindex="-1">如何进行扩容？ <a class="header-anchor" href="#如何进行扩容" aria-label="Permalink to &quot;如何进行扩容？&quot;">​</a></h4><blockquote><p>threshold 的确定</p></blockquote><p>也几乎和大多数容器一样，ThreadLocalMap 会有扩容机制，那么它的 threshold 又是怎样确定的呢？</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> threshold; </span><span style="color:#7B7F8B;">// Default to 0</span></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * The initial capacity -- MUST be a power of two.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">final</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> INITIAL_CAPACITY </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">16</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">ThreadLocalMap</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> firstKey, </span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;"> firstValue) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    table </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[INITIAL_CAPACITY];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> firstKey.ThreadLocalHashCode </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (INITIAL_CAPACITY </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    table[i] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Entry</span><span style="color:#F6F6F4;">(firstKey, firstValue);</span></span>
<span class="line"><span style="color:#F6F6F4;">    size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setThreshold</span><span style="color:#F6F6F4;">(INITIAL_CAPACITY);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Set the resize threshold to maintain at worst a 2/3 load factor.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">setThreshold</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    threshold </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">/</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> threshold; </span><span style="color:#6A737D;">// Default to 0</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * The initial capacity -- MUST be a power of two.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> INITIAL_CAPACITY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">ThreadLocalMap</span><span style="color:#24292E;">(ThreadLocal</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> firstKey, Object firstValue) {</span></span>
<span class="line"><span style="color:#24292E;">    table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[INITIAL_CAPACITY];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> firstKey.ThreadLocalHashCode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (INITIAL_CAPACITY </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    table[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Entry</span><span style="color:#24292E;">(firstKey, firstValue);</span></span>
<span class="line"><span style="color:#24292E;">    size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setThreshold</span><span style="color:#24292E;">(INITIAL_CAPACITY);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Set the resize threshold to maintain at worst a 2/3 load factor.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setThreshold</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">    threshold </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>根据源码可知，在第一次为 ThreadLocal 进行赋值的时候会创建初始大小为 16 的 ThreadLocalMap，并且通过 setThreshold 方法设置 threshold，其值为当前哈希数组长度乘以（2/3），也就是说加载因子为 2/3。</p><p>(加载因子是衡量哈希表密集程度的一个参数，如果加载因子越大的话，说明哈希表被装载的越多，出现 hash 冲突的可能性越大，反之，则被装载的越少，出现 hash 冲突的可能性越小。同时如果过小，很显然内存使用率不高，该值的取值应该考虑到内存使用率和 hash 冲突概率的一个平衡，如 HashMap、ConcurrentHashMap 的加载因子都为 0.75)。</p><p>这里<strong>ThreadLocalMap 初始大小为 16</strong>，<strong>加载因子为 2/3</strong>，所以哈希表可用大小为：16*2/3=10，即哈希表可用容量为 10。</p><blockquote><p>扩容 resize</p></blockquote><p>从 set 方法中可以看出当 hash 表的 size 大于 threshold 的时候，会通过 resize 方法进行扩容。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Double the capacity of the table.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">resize</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[] oldTab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> oldLen </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> oldTab.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//新数组为原数组的2倍</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> newLen </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> oldLen </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[] newTab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[newLen];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> count </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> j </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; j </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> oldLen; </span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">j) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> oldTab[j];</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; k </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//遍历过程中如果遇到脏entry的话直接另value为null,有助于value能够被回收</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (k </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                e.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// Help the GC</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">				</span><span style="color:#7B7F8B;">//重新确定entry在新数组的位置，然后进行插入</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> h </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> k.ThreadLocalHashCode </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (newLen </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (newTab[h] </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                    h </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">nextIndex</span><span style="color:#F6F6F4;">(h, newLen);</span></span>
<span class="line"><span style="color:#F6F6F4;">                newTab[h] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">                count</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//设置新哈希表的threshHold和size属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setThreshold</span><span style="color:#F6F6F4;">(newLen);</span></span>
<span class="line"><span style="color:#F6F6F4;">    size </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> count;</span></span>
<span class="line"><span style="color:#F6F6F4;">    table </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> newTab;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Double the capacity of the table.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[] oldTab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> oldLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldTab.length;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//新数组为原数组的2倍</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldLen </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[] newTab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[newLen];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> count </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> oldLen; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">j) {</span></span>
<span class="line"><span style="color:#24292E;">        Entry e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldTab[j];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            ThreadLocal&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//遍历过程中如果遇到脏entry的话直接另value为null,有助于value能够被回收</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                e.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Help the GC</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">				</span><span style="color:#6A737D;">//重新确定entry在新数组的位置，然后进行插入</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k.ThreadLocalHashCode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (newLen </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (newTab[h] </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextIndex</span><span style="color:#24292E;">(h, newLen);</span></span>
<span class="line"><span style="color:#24292E;">                newTab[h] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">                count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//设置新哈希表的threshHold和size属性</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setThreshold</span><span style="color:#24292E;">(newLen);</span></span>
<span class="line"><span style="color:#24292E;">    size </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> count;</span></span>
<span class="line"><span style="color:#24292E;">    table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newTab;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>方法逻辑<strong>请看注释</strong>，新建一个大小为原来数组长度的两倍的数组，然后遍历旧数组中的 entry 并将其插入到新的 hash 数组中，需要注意的是，<strong>在扩容的过程中针对脏 entry 的话会把 value 设为 null，以便能够被垃圾回收器回收，解决隐藏的内存泄漏的问题</strong>。</p><h3 id="getentry-方法" tabindex="-1">getEntry 方法 <a class="header-anchor" href="#getentry-方法" aria-label="Permalink to &quot;getEntry 方法&quot;">​</a></h3><p>getEntry 方法源码为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getEntry</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> key) {</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//1. 确定在散列数组中的位置</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> key.ThreadLocalHashCode </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (table.length </span><span style="color:#F286C4;">-</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//2. 根据索引i获取entry</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table[i];</span></span>
<span class="line"><span style="color:#F6F6F4;">	</span><span style="color:#7B7F8B;">//3. 满足条件则返回该entry</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key)</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">		</span><span style="color:#7B7F8B;">//4. 未查找到满足条件的entry，额外在做的处理</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getEntryAfterMiss</span><span style="color:#F6F6F4;">(key, i, e);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Entry </span><span style="color:#6F42C1;">getEntry</span><span style="color:#24292E;">(ThreadLocal</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//1. 确定在散列数组中的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.ThreadLocalHashCode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (table.length </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//2. 根据索引i获取entry</span></span>
<span class="line"><span style="color:#24292E;">    Entry e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table[i];</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//3. 满足条件则返回该entry</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">//4. 未查找到满足条件的entry，额外在做的处理</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEntryAfterMiss</span><span style="color:#24292E;">(key, i, e);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>方法逻辑很简单，如果当前定位的 entry 的 key 和查找的 key 相同的话就直接返回这个 entry，否则的话就是在 set 的时候判断是否存在 hash 冲突，需要通过 getEntryAfterMiss 做进一步处理。getEntryAfterMiss 方法为：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">getEntryAfterMiss</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> key, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i, </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> e) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[] tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> (e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">?</span><span style="color:#F6F6F4;">&gt; k </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> e.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (k </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//找到和查询的key相同的entry则返回</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> e;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (k </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//解决脏entry的问题</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">expungeStaleEntry</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//继续向后环形查找</span></span>
<span class="line"><span style="color:#F6F6F4;">            i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">nextIndex</span><span style="color:#F6F6F4;">(i, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">        e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab[i];</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> Entry </span><span style="color:#6F42C1;">getEntryAfterMiss</span><span style="color:#24292E;">(ThreadLocal</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> key, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i, Entry e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[] tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ThreadLocal&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> e.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//找到和查询的key相同的entry则返回</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> e;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (k </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//解决脏entry的问题</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">expungeStaleEntry</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//继续向后环形查找</span></span>
<span class="line"><span style="color:#24292E;">            i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextIndex</span><span style="color:#24292E;">(i, len);</span></span>
<span class="line"><span style="color:#24292E;">        e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab[i];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这个方法同样很好理解，通过 nextIndex 往后环形查找，如果找到和查询的 key 相同的 entry 的话就直接返回，如果在查找过程中遇到脏 entry 的话就使用 expungeStaleEntry 方法进行处理。到目前为止，为了解决潜在的内存泄漏的问题，在 set、resize、getEntry 这些地方都会对这些脏 entry 进行处理，可见为了尽可能解决这个问题几乎无时无刻都在做出努力。</p><h3 id="remove-方法-1" tabindex="-1">remove 方法 <a class="header-anchor" href="#remove-方法-1" aria-label="Permalink to &quot;remove 方法&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">/**</span></span>
<span class="line"><span style="color:#7B7F8B;"> * Remove the entry for key.</span></span>
<span class="line"><span style="color:#7B7F8B;"> */</span></span>
<span class="line"><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">remove</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F286C4;">&lt;?&gt;</span><span style="color:#F6F6F4;"> key) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;">[] tab </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> table;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab.length;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> key.ThreadLocalHashCode </span><span style="color:#F286C4;">&amp;</span><span style="color:#F6F6F4;"> (len</span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">Entry</span><span style="color:#F6F6F4;"> e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab[i];</span></span>
<span class="line"><span style="color:#F6F6F4;">         e </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">         e </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> tab[i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">nextIndex</span><span style="color:#F6F6F4;">(i, len)]) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (e.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> key) {</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//将entry的key置为null</span></span>
<span class="line"><span style="color:#F6F6F4;">            e.</span><span style="color:#62E884;">clear</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">			</span><span style="color:#7B7F8B;">//将该entry的value也置为null</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#62E884;">expungeStaleEntry</span><span style="color:#F6F6F4;">(i);</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Remove the entry for key.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remove</span><span style="color:#24292E;">(ThreadLocal</span><span style="color:#D73A49;">&lt;?&gt;</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Entry</span><span style="color:#24292E;">[] tab </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> table;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab.length;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> key.ThreadLocalHashCode </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> (len</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (Entry e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab[i];</span></span>
<span class="line"><span style="color:#24292E;">         e </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">         e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tab[i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">nextIndex</span><span style="color:#24292E;">(i, len)]) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (e.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> key) {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//将entry的key置为null</span></span>
<span class="line"><span style="color:#24292E;">            e.</span><span style="color:#6F42C1;">clear</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">//将该entry的value也置为null</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">expungeStaleEntry</span><span style="color:#24292E;">(i);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>该方法逻辑很简单，通过往后环形查找到与指定 key 相同的 entry 后，先通过 clear 方法将 key 置为 null 后，使其转换为一个脏 entry，然后调用 expungeStaleEntry 方法将其 value 置为 null，以便垃圾回收时能够清理，同时将 table[i]置为 null。</p><h2 id="threadlocal-的使用场景" tabindex="-1">ThreadLocal 的使用场景 <a class="header-anchor" href="#threadlocal-的使用场景" aria-label="Permalink to &quot;ThreadLocal 的使用场景&quot;">​</a></h2><p><strong>ThreadLocal 不是用来解决共享对象的多线程访问问题的</strong>，数据实质上是放在每个 thread 实例引用的 ThreadLocalMap中的,也就是说<strong>每个不同的线程都拥有专属于自己的数据容器（ThreadLocalMap），彼此不影响</strong>。</p><p>因此 ThreadLocal 只适用于 <strong>共享对象会造成线程安全</strong> 的业务场景。比如<strong>Hibernate 中通过 ThreadLocal 管理 Session</strong>就是一个典型的案例，不同的请求线程（用户）拥有自己的 session，若将 session 共享出去被多线程访问，必然会带来线程安全问题。</p><p>下面，我们自己来写一个例子，SimpleDateFormat.parse 方法会有线程安全的问题，我们可以尝试使用 ThreadLocal 包装 SimpleDateFormat，只要该实例不被多线程共享即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">ThreadLocalDemo</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;SimpleDateFormat&gt; sdf </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">ThreadLocal</span><span style="color:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">ExecutorService</span><span style="color:#F6F6F4;"> executorService </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Executors.</span><span style="color:#62E884;">newFixedThreadPool</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">; i </span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">100</span><span style="color:#F6F6F4;">; i</span><span style="color:#F286C4;">++</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            executorService.</span><span style="color:#62E884;">submit</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DateUtil</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">2019-11-25 09:00:</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">60</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">DateUtil</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">implements</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Runnable</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">private</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> date;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">DateUtil</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">date</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> date;</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">        @</span><span style="color:#97E1F1;font-style:italic;">Override</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">run</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (sdf.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                sdf.</span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SimpleDateFormat</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">yyyy-MM-dd HH:mm:ss</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">));</span></span>
<span class="line"><span style="color:#F6F6F4;">            } </span><span style="color:#F286C4;">else</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    </span><span style="color:#97E1F1;font-style:italic;">Date</span><span style="color:#F6F6F4;"> date </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sdf.</span><span style="color:#62E884;">get</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">parse</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.date);</span></span>
<span class="line"><span style="color:#F6F6F4;">                    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">(date);</span></span>
<span class="line"><span style="color:#F6F6F4;">                } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">ParseException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">                    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">                }</span></span>
<span class="line"><span style="color:#F6F6F4;">            }</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadLocalDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> ThreadLocal&lt;</span><span style="color:#D73A49;">SimpleDateFormat</span><span style="color:#24292E;">&gt; sdf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ThreadLocal&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        ExecutorService executorService </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Executors.</span><span style="color:#6F42C1;">newFixedThreadPool</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            executorService.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DateUtil</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2019-11-25 09:00:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DateUtil</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Runnable</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> String date;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DateUtil</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">date</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> date;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (sdf.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                sdf.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleDateFormat</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                    Date date </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sdf.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.date);</span></span>
<span class="line"><span style="color:#24292E;">                    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(date);</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (ParseException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol><li>如果当前线程不持有 SimpleDateformat 对象实例，那么就新建一个并把它设置到当前线程中，如果已经持有，就直接使用。另外，<strong>从<code>if (sdf.get() == null){....}else{.....}</code>可以看出为每一个线程分配一个 SimpleDateformat 对象实例是从应用层面（业务代码逻辑）去保证的。</strong></li><li>上面我们说过 ThreadLocal 有可能存在内存泄漏，在使用完之后，最好使用 remove 方法将这个变量移除，就像在使用数据库连接一样，及时关闭连接。</li></ol><hr><blockquote><p>更多关于并发编程的源码分析，可以参考<a href="https://github.com/CL0610/Java-concurrency" target="_blank" rel="noreferrer">并发编程知识总结</a>这个开源知识库。</p></blockquote><hr><p>最近整理了一份牛逼的学习资料，包括但不限于 Java 基础部分（JVM、Java 集合框架、多线程），还囊括了 <strong>数据库、计算机网络、算法与数据结构、设计模式、框架类 Spring、Netty、微服务（Dubbo，消息队列） 网关</strong> 等等等等……详情戳：<a href="https://tobebetterjavaer.com/pdf/programmer-111.html" target="_blank" rel="noreferrer">可以说是 2022 年全网最全的学习和找工作的 PDF 资源了</a></p>`,113),y=[r];function F(i,E,d,h,C,u){return a(),n("div",null,y)}const g=s(c,[["render",F]]);export{D as __pageData,g as default};
