import{_ as n,o,c as e,V as a,C as s}from"./chunks/framework.c6d8cbec.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/python/python-11.md","filePath":"interview/backend/python/python-11.md"}'),l={name:"interview/backend/python/python-11.md"},p=a(`<h3 id="_1、python的垃圾回收机制" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#1python%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6" target="_blank" rel="noreferrer">1、python的垃圾回收机制</a> <a class="header-anchor" href="#_1、python的垃圾回收机制" aria-label="Permalink to &quot;[1、python的垃圾回收机制](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#1python的垃圾回收机制)&quot;">​</a></h3><p><a href="https://testerhome.com/topics/16556" target="_blank" rel="noreferrer">python垃圾回收机制详解</a></p><p><strong>1、</strong> 概述：python采用的是引用计数机制为主，标记-清除和分代收集两种机制为辅的策略</p><p><strong>2、</strong> 引用计数：</p><p><strong>3、</strong> 每当新的引用指向该对象时，引用计数加1，当对该对象的引用失效时，引用计数减1，当对象的引用计数为0时，对象被回收。缺点是，需要额外的空间来维护引用计数，并且无法解决对象的循环引用。</p><p><strong>4、</strong> 分代回收：（具体见上面链接）</p><p><strong>5、</strong> 以时间换空间的回收方式</p><p><strong>6、</strong> 标记清除：</p><p><strong>7、</strong> 活动对象会被打上标记，会把那些没有被打上标记的非活动对象进行回收。</p><h3 id="_2、你对python类中的self有什么了解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#2%E4%BD%A0%E5%AF%B9python%E7%B1%BB%E4%B8%AD%E7%9A%84self%E6%9C%89%E4%BB%80%E4%B9%88%E4%BA%86%E8%A7%A3" target="_blank" rel="noreferrer">2、你对Python类中的self有什么了解？</a> <a class="header-anchor" href="#_2、你对python类中的self有什么了解" aria-label="Permalink to &quot;[2、你对Python类中的self有什么了解？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#2你对python类中的self有什么了解)&quot;">​</a></h3><p>self表示类的实例。</p><p>通过使用self关键字，我们可以在Python中访问类的属性和方法。</p><p>注意，在类的函数当中，必须使用self，因为类中没有用于声明变量的显式语法。</p><h3 id="_3、求出以下代码的输出结果" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#3%E6%B1%82%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C" target="_blank" rel="noreferrer">3、求出以下代码的输出结果</a> <a class="header-anchor" href="#_3、求出以下代码的输出结果" aria-label="Permalink to &quot;[3、求出以下代码的输出结果](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#3求出以下代码的输出结果)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">mydict</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">{</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">:</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">b</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">:</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">func</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">d</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F6F6F4;">d[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">a</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">func(mydict)</span></span>
<span class="line"><span style="color:#F6F6F4;">mydict[</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">c</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">]</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">2</span></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(mydict)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mydict</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">(d):</span></span>
<span class="line"><span style="color:#24292E;">d[</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> d</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">func(mydict)</span></span>
<span class="line"><span style="color:#24292E;">mydict[</span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(mydict)</span></span></code></pre></div><p>结果</p>`,16),t=s("blockquote",{"a:":"","0,":"","b:":"","2,":"","c:":"",2:""},[s("p")],-1),r=a(`<h3 id="_4、解决哈希冲突的算法有哪几种-分别有什么特点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#4%E8%A7%A3%E5%86%B3%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E7%9A%84%E7%AE%97%E6%B3%95%E6%9C%89%E5%93%AA%E5%87%A0%E7%A7%8D%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E7%89%B9%E7%82%B9" target="_blank" rel="noreferrer">4、解决哈希冲突的算法有哪几种？分别有什么特点？</a> <a class="header-anchor" href="#_4、解决哈希冲突的算法有哪几种-分别有什么特点" aria-label="Permalink to &quot;[4、解决哈希冲突的算法有哪几种？分别有什么特点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#4解决哈希冲突的算法有哪几种分别有什么特点)&quot;">​</a></h3><p><a href="https://blog.csdn.net/seulzz/article/details/77163878" target="_blank" rel="noreferrer">哈希冲突参考</a></p><p><strong>1、</strong> 开放定址法</p><p><strong>2、</strong> 再哈希法</p><p><strong>3、</strong> 链地址法</p><p><strong>4、</strong> 建立公共溢出区</p><h3 id="_5、解释python中的help-和dir-函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#5%E8%A7%A3%E9%87%8Apython%E4%B8%AD%E7%9A%84help%E5%92%8Cdir%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">5、解释Python中的help()和dir()函数</a> <a class="header-anchor" href="#_5、解释python中的help-和dir-函数" aria-label="Permalink to &quot;[5、解释Python中的help()和dir()函数](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#5解释python中的help和dir函数)&quot;">​</a></h3><p>Help()函数是一个内置函数，用于查看函数或模块用途的详细说明：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; import copy</span></span>
<span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; help(copy.copy)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; import copy</span></span>
<span class="line"><span style="color:#24292e;">&gt;&gt;&gt; help(copy.copy)</span></span></code></pre></div><p>运行结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">Help on function copy in module copy:</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;">copy(x)</span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;">Shallow copy operation on arbitrary Python objects.</span></span>
<span class="line"><span style="color:#f6f6f4;"> </span></span>
<span class="line"><span style="color:#f6f6f4;">See the module’s __doc__ string for more info.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Help on function copy in module copy:</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;">copy(x)</span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;">Shallow copy operation on arbitrary Python objects.</span></span>
<span class="line"><span style="color:#24292e;"> </span></span>
<span class="line"><span style="color:#24292e;">See the module’s __doc__ string for more info.</span></span></code></pre></div><p>Dir()函数也是Python内置函数，dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。</p><p>以下实例展示了 dir 的使用方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&gt;&gt;&gt; dir(copy.copy)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&gt;&gt;&gt; dir(copy.copy)</span></span></code></pre></div><p>运行结果为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">[‘__annotations__’, ‘__call__’, ‘__class__’, ‘__closure__’, ‘__code__’, ‘__defaults__’, ‘__delattr__’, ‘__dict__’, ‘__dir__’, ‘__doc__’, ‘__eq__’, ‘__format__’, ‘__ge__’, ‘__get__’, ‘__getattribute__’, ‘__globals__’, ‘__gt__’, ‘__hash__’, ‘__init__’, ‘__init_subclass__’, ‘__kwdefaults__’, ‘__le__’, ‘__lt__’, ‘__module__’, ‘__name__’, ‘__ne__’, ‘__new__’, ‘__qualname__’, ‘__reduce__’, ‘__reduce_ex__’, ‘__repr__’, ‘__setattr__’, ‘__sizeof__’, ‘__str__’, ‘__subclasshook__’]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">[‘__annotations__’, ‘__call__’, ‘__class__’, ‘__closure__’, ‘__code__’, ‘__defaults__’, ‘__delattr__’, ‘__dict__’, ‘__dir__’, ‘__doc__’, ‘__eq__’, ‘__format__’, ‘__ge__’, ‘__get__’, ‘__getattribute__’, ‘__globals__’, ‘__gt__’, ‘__hash__’, ‘__init__’, ‘__init_subclass__’, ‘__kwdefaults__’, ‘__le__’, ‘__lt__’, ‘__module__’, ‘__name__’, ‘__ne__’, ‘__new__’, ‘__qualname__’, ‘__reduce__’, ‘__reduce_ex__’, ‘__repr__’, ‘__setattr__’, ‘__sizeof__’, ‘__str__’, ‘__subclasshook__’]</span></span></code></pre></div><h3 id="_6、什么是断言-assert-应用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#6%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%AD%E8%A8%80assert%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">6、什么是断言(assert)?应用场景？</a> <a class="header-anchor" href="#_6、什么是断言-assert-应用场景" aria-label="Permalink to &quot;[6、什么是断言(assert)?应用场景？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#6什么是断言assert应用场景)&quot;">​</a></h3><p><a href="https://blog.csdn.net/shujuanyaning/article/details/47184541" target="_blank" rel="noreferrer">断言的参考</a></p><p>assert是用来检查一个条件，如果它为真，就不做任何事。如果它为假，则会抛出AssertError并且包含错误信息。</p><p><strong>应用场景</strong>：</p><p><strong>1、</strong> 防御型编程</p><p><strong>2、</strong> 运行时检查程序逻辑</p><p><strong>3、</strong> 检查约定</p><p><strong>4、</strong> 程序常量</p><p><strong>5、</strong> 检查文档</p><h3 id="_7、python代码如何获取命令行参数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#7python%E4%BB%A3%E7%A0%81%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0" target="_blank" rel="noreferrer">7、python代码如何获取命令行参数</a> <a class="header-anchor" href="#_7、python代码如何获取命令行参数" aria-label="Permalink to &quot;[7、python代码如何获取命令行参数](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#7python代码如何获取命令行参数)&quot;">​</a></h3><p><a href="https://www.cnblogs.com/ouyangpeng/p/8537616.html" target="_blank" rel="noreferrer">获取命令行参数的方法参考</a></p><p><strong>1、</strong> 使用sys模块</p><p>通过sys.argv来获取</p><p><strong>2、</strong> 使用getopt模块</p><h3 id="_8、给定一个非空的字符串-判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母-并且长度不超过10000。例如-ababab-返回true-ababa-返回false" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#8%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%9D%9E%E7%A9%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%A4%E6%96%AD%E5%AE%83%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E7%94%B1%E5%AE%83%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AD%90%E4%B8%B2%E9%87%8D%E5%A4%8D%E5%A4%9A%E6%AC%A1%E6%9E%84%E6%88%90%E3%80%82%E7%BB%99%E5%AE%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AA%E5%90%AB%E6%9C%89%E5%B0%8F%E5%86%99%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E5%B9%B6%E4%B8%94%E9%95%BF%E5%BA%A6%E4%B8%8D%E8%B6%85%E8%BF%8710000%E3%80%82%E4%BE%8B%E5%A6%82%EF%BC%9A&#39;ababab&#39;,%E8%BF%94%E5%9B%9Etrue&#39;ababa&#39;%E8%BF%94%E5%9B%9Efalse" target="_blank" rel="noreferrer">8、给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。例如：&#39;ababab&#39;,返回True，&#39;ababa&#39;，返回False</a> <a class="header-anchor" href="#_8、给定一个非空的字符串-判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母-并且长度不超过10000。例如-ababab-返回true-ababa-返回false" aria-label="Permalink to &quot;[8、给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。例如：&#39;ababab&#39;,返回True，&#39;ababa&#39;，返回False](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#8给定一个非空的字符串判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母并且长度不超过10000。例如：&#39;ababab&#39;,返回true&#39;ababa&#39;返回false)&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">def</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">solution</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F6F6F4;">ll</span><span style="color:#F286C4;">=</span><span style="color:#97E1F1;">len</span><span style="color:#F6F6F4;">(s)</span></span>
<span class="line"><span style="color:#F286C4;">for</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">in</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">range</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">,ll</span><span style="color:#F286C4;">//</span><span style="color:#BF9EEE;">2</span><span style="color:#F286C4;">+</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">):</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> ll </span><span style="color:#F286C4;">%</span><span style="color:#F6F6F4;"> i </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">:</span></span>
<span class="line"><span style="color:#F6F6F4;">j</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> s[</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">i]</span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;">s[j</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;">j</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">i] </span><span style="color:#F286C4;">and</span><span style="color:#F6F6F4;"> j</span><span style="color:#F286C4;">&lt;</span><span style="color:#F6F6F4;">ll:</span></span>
<span class="line"><span style="color:#F6F6F4;">    j</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">j</span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;">i</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> j</span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;">ll:</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">True</span></span>
<span class="line"><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;">print</span><span style="color:#F6F6F4;">(solution(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">abababa</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">def</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">solution</span><span style="color:#24292E;">(s):</span></span>
<span class="line"><span style="color:#24292E;">ll</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">range</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,ll</span><span style="color:#D73A49;">//</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">):</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ll </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">j</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> s[:i]</span><span style="color:#D73A49;">==</span><span style="color:#24292E;">s[j:j</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">i] </span><span style="color:#D73A49;">and</span><span style="color:#24292E;"> j</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ll:</span></span>
<span class="line"><span style="color:#24292E;">    j</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">j</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">i</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> j</span><span style="color:#D73A49;">==</span><span style="color:#24292E;">ll:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">True</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(solution(</span><span style="color:#032F62;">&#39;abababa&#39;</span><span style="color:#24292E;">))</span></span></code></pre></div><h3 id="_9、写python爬虫分别用到了哪些模块-分别有什么用" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#9%E5%86%99python%E7%88%AC%E8%99%AB%E5%88%86%E5%88%AB%E7%94%A8%E5%88%B0%E4%BA%86%E5%93%AA%E4%BA%9B%E6%A8%A1%E5%9D%97%E5%88%86%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8" target="_blank" rel="noreferrer">9、写python爬虫分别用到了哪些模块？分别有什么用？</a> <a class="header-anchor" href="#_9、写python爬虫分别用到了哪些模块-分别有什么用" aria-label="Permalink to &quot;[9、写python爬虫分别用到了哪些模块？分别有什么用？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#9写python爬虫分别用到了哪些模块分别有什么用)&quot;">​</a></h3><p>模块</p><p>request，发起请求</p><p>pyquery，解析html数据</p><p>beautifulsoup，解析html数据</p><p>aiohttp，异步发送请求</p><p>框架</p><p>pyspider，web界面的爬虫框架</p><p>scrapy，爬虫框架</p><p>selenium，模拟浏览器的爬虫框架</p><h3 id="_10、python有哪些特点和优点" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%95%B4%E7%90%86%EF%BC%8C%E6%B1%87%E6%80%BB%E7%89%88.md#10python%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9%E5%92%8C%E4%BC%98%E7%82%B9" target="_blank" rel="noreferrer">10、Python有哪些特点和优点？</a> <a class="header-anchor" href="#_10、python有哪些特点和优点" aria-label="Permalink to &quot;[10、Python有哪些特点和优点？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Python/Python最新面试题及答案整理，汇总版.md#10python有哪些特点和优点)&quot;">​</a></h3><p>作为一门编程入门语言，Python主要有以下特点和优点：</p><p><strong>1、</strong> 可解释</p><p><strong>2、</strong> 具有动态特性</p><p><strong>3、</strong> 面向对象</p><p><strong>4、</strong> 简明简单</p><p>5、开源</p><p><strong>6、</strong> 具有强大的社区支持</p><p>当然，实际上Python的优点远不止如此，</p><h3 id="_11、如何实现响应式布局" tabindex="-1">11、如何实现响应式布局 <a class="header-anchor" href="#_11、如何实现响应式布局" aria-label="Permalink to &quot;11、如何实现响应式布局&quot;">​</a></h3><h3 id="_12、redis默认多少个db" tabindex="-1">12、Redis默认多少个db <a class="header-anchor" href="#_12、redis默认多少个db" aria-label="Permalink to &quot;12、Redis默认多少个db&quot;">​</a></h3><h3 id="_13、简述触发器、函数、视图和存储过程" tabindex="-1">13、简述触发器、函数、视图和存储过程 <a class="header-anchor" href="#_13、简述触发器、函数、视图和存储过程" aria-label="Permalink to &quot;13、简述触发器、函数、视图和存储过程&quot;">​</a></h3><h3 id="_14、什么是switch语句。如何在python中创建switch语句" tabindex="-1">14、什么是switch语句。如何在Python中创建switch语句？ <a class="header-anchor" href="#_14、什么是switch语句。如何在python中创建switch语句" aria-label="Permalink to &quot;14、什么是switch语句。如何在Python中创建switch语句？&quot;">​</a></h3><h3 id="_15、一行代码实现删除列表中的所有的重复的值" tabindex="-1">15、一行代码实现删除列表中的所有的重复的值 <a class="header-anchor" href="#_15、一行代码实现删除列表中的所有的重复的值" aria-label="Permalink to &quot;15、一行代码实现删除列表中的所有的重复的值&quot;">​</a></h3><h3 id="_16、redis如何实现事务" tabindex="-1">16、Redis如何实现事务 <a class="header-anchor" href="#_16、redis如何实现事务" aria-label="Permalink to &quot;16、Redis如何实现事务&quot;">​</a></h3><h3 id="_17、现有mydict和变量onekey-请写出从mydict中取出onekey的值的方法" tabindex="-1">17、现有mydict和变量onekey，请写出从mydict中取出onekey的值的方法 <a class="header-anchor" href="#_17、现有mydict和变量onekey-请写出从mydict中取出onekey的值的方法" aria-label="Permalink to &quot;17、现有mydict和变量onekey，请写出从mydict中取出onekey的值的方法&quot;">​</a></h3><h3 id="_18、如果已经建立了tcp连接-但是客户端突然出现故障了怎么办" tabindex="-1">18、如果已经建立了TCP连接，但是客户端突然出现故障了怎么办 <a class="header-anchor" href="#_18、如果已经建立了tcp连接-但是客户端突然出现故障了怎么办" aria-label="Permalink to &quot;18、如果已经建立了TCP连接，但是客户端突然出现故障了怎么办&quot;">​</a></h3><h3 id="_19、解释python中的filter" tabindex="-1">19、解释Python中的Filter？ <a class="header-anchor" href="#_19、解释python中的filter" aria-label="Permalink to &quot;19、解释Python中的Filter？&quot;">​</a></h3><h3 id="_20、python中进制转换" tabindex="-1">20、python中进制转换 <a class="header-anchor" href="#_20、python中进制转换" aria-label="Permalink to &quot;20、python中进制转换&quot;">​</a></h3><h3 id="_21、列举你所了解的所有python2和python3的区别" tabindex="-1">21、列举你所了解的所有Python2和Python3的区别 <a class="header-anchor" href="#_21、列举你所了解的所有python2和python3的区别" aria-label="Permalink to &quot;21、列举你所了解的所有Python2和Python3的区别&quot;">​</a></h3><h3 id="_22、-arg和-kwargs的作用" tabindex="-1">22、*arg和**kwargs的作用 <a class="header-anchor" href="#_22、-arg和-kwargs的作用" aria-label="Permalink to &quot;22、*arg和**kwargs的作用&quot;">​</a></h3><h3 id="_23、mysql如何创建索引" tabindex="-1">23、MySQL如何创建索引 <a class="header-anchor" href="#_23、mysql如何创建索引" aria-label="Permalink to &quot;23、MySQL如何创建索引&quot;">​</a></h3><h3 id="_24、什么时gil锁" tabindex="-1">24、什么时GIL锁 <a class="header-anchor" href="#_24、什么时gil锁" aria-label="Permalink to &quot;24、什么时GIL锁&quot;">​</a></h3><h3 id="_25、tcp和udp的区别" tabindex="-1">25、TCP和UDP的区别 <a class="header-anchor" href="#_25、tcp和udp的区别" aria-label="Permalink to &quot;25、TCP和UDP的区别&quot;">​</a></h3><h3 id="_26、编写一个函数实现十进制转62进制-分别用0-9a-za-z-表示62位字母" tabindex="-1">26、编写一个函数实现十进制转62进制，分别用0-9A-Za-z,表示62位字母 <a class="header-anchor" href="#_26、编写一个函数实现十进制转62进制-分别用0-9a-za-z-表示62位字母" aria-label="Permalink to &quot;26、编写一个函数实现十进制转62进制，分别用0-9A-Za-z,表示62位字母&quot;">​</a></h3><h3 id="_27、python如何定义函数时如何书写可变参数和关键字参数" tabindex="-1">27、python如何定义函数时如何书写可变参数和关键字参数？ <a class="header-anchor" href="#_27、python如何定义函数时如何书写可变参数和关键字参数" aria-label="Permalink to &quot;27、python如何定义函数时如何书写可变参数和关键字参数？&quot;">​</a></h3><h3 id="_28、python中的pass语句是什么" tabindex="-1">28、Python中的pass语句是什么？ <a class="header-anchor" href="#_28、python中的pass语句是什么" aria-label="Permalink to &quot;28、Python中的pass语句是什么？&quot;">​</a></h3><h3 id="_29、python有哪些应用" tabindex="-1">29、Python有哪些应用？ <a class="header-anchor" href="#_29、python有哪些应用" aria-label="Permalink to &quot;29、Python有哪些应用？&quot;">​</a></h3><h3 id="_30、gil锁对python性能的影响" tabindex="-1">30、GIL锁对python性能的影响 <a class="header-anchor" href="#_30、gil锁对python性能的影响" aria-label="Permalink to &quot;30、GIL锁对python性能的影响&quot;">​</a></h3>`,71),c=[p,t,r];function y(E,i,_,h,d,F){return o(),e("div",null,c)}const b=n(l,[["render",y]]);export{B as __pageData,b as default};
