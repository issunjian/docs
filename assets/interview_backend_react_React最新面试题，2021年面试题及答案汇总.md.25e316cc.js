import{_ as e,o as a,c as s,V as t}from"./chunks/framework.c6d8cbec.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/react/React最新面试题，2021年面试题及答案汇总.md","filePath":"interview/backend/react/React最新面试题，2021年面试题及答案汇总.md"}'),o={name:"interview/backend/react/React最新面试题，2021年面试题及答案汇总.md"},n=t(`<h3 id="_1、react与vue的相似之处" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#1react%E4%B8%8Evue%E7%9A%84%E7%9B%B8%E4%BC%BC%E4%B9%8B%E5%A4%84" target="_blank" rel="noreferrer">1、React与Vue的相似之处</a> <a class="header-anchor" href="#_1、react与vue的相似之处" aria-label="Permalink to &quot;[1、React与Vue的相似之处](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#1react与vue的相似之处)&quot;">​</a></h3><p>都使用 Virtual DOM</p><p>提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。</p><p>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</p><h3 id="_2、vue2-x和vue3-x渲染器的diff算法分别说一下" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#2vue2x%E5%92%8Cvue3x%E6%B8%B2%E6%9F%93%E5%99%A8%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%88%86%E5%88%AB%E8%AF%B4%E4%B8%80%E4%B8%8B" target="_blank" rel="noreferrer">2、Vue2.x和Vue3.x渲染器的diff算法分别说一下</a> <a class="header-anchor" href="#_2、vue2-x和vue3-x渲染器的diff算法分别说一下" aria-label="Permalink to &quot;[2、Vue2.x和Vue3.x渲染器的diff算法分别说一下](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#2vue2x和vue3x渲染器的diff算法分别说一下)&quot;">​</a></h3><p><strong>简单来说，diff算法有以下过程</strong></p><p><strong>1、</strong> 同级比较，再比较子节点</p><p><strong>2、</strong> 先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)</p><p><strong>3、</strong> 比较都有子节点的情况(核心diff)</p><p><strong>4、</strong> 递归比较子节点</p><p>正常Diff两个树的时间复杂度是<code>O(n^3)</code>，但实际情况下我们很少会进行<code>跨层级的移动DOM</code>，所以Vue将Diff进行了优化，从<code>O(n^3) -&gt; O(n)</code>，只有当新旧children都为多个子节点时才需要用核心的Diff算法进行同层级比较。</p><p>Vue2的核心Diff算法采用了<code>双端比较</code>的算法，同时从新旧children的两端开始进行比较，借助key值找到可复用的节点，再进行相关操作。相比React的Diff算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。</p><p>Vue3.x借鉴了 <a href="https://github.com/localvoid/ivi" target="_blank" rel="noreferrer">ivi</a>算法和 <a href="https://github.com/infernojs/inferno" target="_blank" rel="noreferrer">inferno</a>算法</p><p>在创建VNode时就确定其类型，以及在<code>mount/patch</code>的过程中采用<code>位运算</code>来判断一个VNode的类型，在这个基础之上再配合核心的Diff算法，使得性能上较Vue2.x有了提升。(实际的实现可以结合Vue3.x源码看。)</p><p>该算法中还运用了<code>动态规划</code>的思想求解最长递归子序列。</p><p>(看到这你还会发现，框架内无处不蕴藏着数据结构和算法的魅力)</p><p><strong>面试官：(可以可以，看来是个苗子，不过自我介绍属实有些无聊，下一题)</strong></p><h3 id="_3、概述下-react-中的事件处理逻辑" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#3%E6%A6%82%E8%BF%B0%E4%B8%8B-react-%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91" target="_blank" rel="noreferrer">3、概述下 React 中的事件处理逻辑</a> <a class="header-anchor" href="#_3、概述下-react-中的事件处理逻辑" aria-label="Permalink to &quot;[3、概述下 React 中的事件处理逻辑](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#3概述下-react-中的事件处理逻辑)&quot;">​</a></h3><p>为了解决跨浏览器兼容性问题<code>React</code> 会将浏览器原生事件<code>Browser Native Event</code>封装为合成事件<code>SyntheticEvent</code>传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口不过它们屏蔽了底层浏览器的细节差异保证了行为的一致性。另外有意思的是React 并没有直接将事件附着到子元素上而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 <code>React</code> 在更新 <code>DOM</code> 的时候就不需要考虑如何去处理附着在 <code>DOM</code> 上的事件监听器最终达到优化性能的目的</p><h3 id="_4、再说一下vue2-x中如何监测数组变化" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#4%E5%86%8D%E8%AF%B4%E4%B8%80%E4%B8%8Bvue2x%E4%B8%AD%E5%A6%82%E4%BD%95%E7%9B%91%E6%B5%8B%E6%95%B0%E7%BB%84%E5%8F%98%E5%8C%96" target="_blank" rel="noreferrer">4、再说一下vue2.x中如何监测数组变化</a> <a class="header-anchor" href="#_4、再说一下vue2-x中如何监测数组变化" aria-label="Permalink to &quot;[4、再说一下vue2.x中如何监测数组变化](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#4再说一下vue2x中如何监测数组变化)&quot;">​</a></h3><p>使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</p><p>（能问到这的面试官都比较注重深度，这些常规操作要记牢）</p><h3 id="_5、react组件通信如何实现" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#5react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">5、React组件通信如何实现?</a> <a class="header-anchor" href="#_5、react组件通信如何实现" aria-label="Permalink to &quot;[5、React组件通信如何实现?](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#5react组件通信如何实现)&quot;">​</a></h3><p><strong>React组件间通信方式:</strong></p><p><strong>1、</strong> 父组件向子组件通讯: 父组件可以向子组件通过传 props 的方式，向子组件进行通讯</p><p><strong>2、</strong> 子组件向父组件通讯: props+回调的方式,父组件向子组件传递props进行通讯，此props为作用域为父组件自身的函数，子组件调用该函数，将子组件想要传递的信息，作为参数，传递到父组件的作用域中</p><p><strong>3、</strong> 兄弟组件通信: 找到这两个兄弟节点共同的父节点,结合上面两种方式由父节点转发信息进行通信</p><p><strong>4、</strong> 跨层级通信: <code>Context</code>设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言,对于跨越多层的全局数据通过<code>Context</code>通信再适合不过</p><p><strong>5、</strong> 发布订阅模式: 发布者发布事件，订阅者监听事件并做出反应,我们可以通过引入event模块进行通信</p><p><strong>6、</strong> 全局状态管理工具: 借助Redux或者Mobx等全局状态管理工具进行通信,这种工具会维护一个全局状态中心Store,并根据不同的事件产生新的状态</p><p><img src="https://gitee.com/souyunkutech/souyunku-home/raw/master/images/souyunku-web/2020/4/30/1939/39/97_2.png#alt=97%5C_2.png" alt=""></p><h3 id="_6、react-portal-有哪些使用场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#6react-portal-%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">6、React Portal 有哪些使用场景</a> <a class="header-anchor" href="#_6、react-portal-有哪些使用场景" aria-label="Permalink to &quot;[6、React Portal 有哪些使用场景](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#6react-portal-有哪些使用场景)&quot;">​</a></h3><p>在以前 <code>react</code> 中所有的组件都会位于 <code>#app</code> 下而使用 <code>Portals</code> 提供了一种脱离 <code>#app</code> 的组件因此 <code>Portals</code> 适合脱离文档流(<code>out of flow</code>) 的组件特别是 <code>position: absolute</code> 与 <code>position: fixed</code>的组件。比如模态框通知警告<code>goTop</code> 等。</p><p>以下是官方一个模态框的示例可以在以下地址中测试效果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">  &lt;body&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;div id=&quot;modal&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;div id=&quot;gotop&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">    &lt;div id=&quot;alert&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">  &lt;/body&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">&lt;/html&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;body&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div id=&quot;modal&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div id=&quot;gotop&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">    &lt;div id=&quot;alert&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;/body&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/html&gt;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">const modalRoot = document.getElementById(&#39;modal&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">class Modal extends React.Component {</span></span>
<span class="line"><span style="color:#f6f6f4;">  constructor(props) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    super(props);</span></span>
<span class="line"><span style="color:#f6f6f4;">    this.el = document.createElement(&#39;div&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  componentDidMount() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    modalRoot.appendChild(this.el);</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  componentWillUnmount() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    modalRoot.removeChild(this.el);</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">  render() {</span></span>
<span class="line"><span style="color:#f6f6f4;">    return ReactDOM.createPortal(</span></span>
<span class="line"><span style="color:#f6f6f4;">      this.props.children,</span></span>
<span class="line"><span style="color:#f6f6f4;">      this.el,</span></span>
<span class="line"><span style="color:#f6f6f4;">    );</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span>
<span class="line"><span style="color:#f6f6f4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">const modalRoot = document.getElementById(&#39;modal&#39;);</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">class Modal extends React.Component {</span></span>
<span class="line"><span style="color:#24292e;">  constructor(props) {</span></span>
<span class="line"><span style="color:#24292e;">    super(props);</span></span>
<span class="line"><span style="color:#24292e;">    this.el = document.createElement(&#39;div&#39;);</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  componentDidMount() {</span></span>
<span class="line"><span style="color:#24292e;">    modalRoot.appendChild(this.el);</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  componentWillUnmount() {</span></span>
<span class="line"><span style="color:#24292e;">    modalRoot.removeChild(this.el);</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  render() {</span></span>
<span class="line"><span style="color:#24292e;">    return ReactDOM.createPortal(</span></span>
<span class="line"><span style="color:#24292e;">      this.props.children,</span></span>
<span class="line"><span style="color:#24292e;">      this.el,</span></span>
<span class="line"><span style="color:#24292e;">    );</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p><code>React Hooks</code>当中的<code>useEffect</code>是如何区分生命周期钩子的</p><p><code>useEffect</code>可以看成是<code>componentDidMountcomponentDidUpdate</code>和<code>componentWillUnmount</code>三者的结合。<code>useEffect(callback, [source])</code>接收两个参数调用方式如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">   console.log(&#39;mounted&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">   </span></span>
<span class="line"><span style="color:#f6f6f4;">   return () =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">       console.log(&#39;willUnmount&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">   }</span></span>
<span class="line"><span style="color:#f6f6f4;"> }, [source]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">useEffect(() =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">   console.log(&#39;mounted&#39;);</span></span>
<span class="line"><span style="color:#24292e;">   </span></span>
<span class="line"><span style="color:#24292e;">   return () =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">       console.log(&#39;willUnmount&#39;);</span></span>
<span class="line"><span style="color:#24292e;">   }</span></span>
<span class="line"><span style="color:#24292e;"> }, [source]);</span></span></code></pre></div><p>生命周期函数的调用主要是通过第二个参数[source]来进行控制有如下几种情况</p><p><strong>1、</strong> [source]参数不传时则每次都会优先调用上次保存的函数中返回的那个函数然后再调用外部那个函数</p><p><strong>2、</strong> [source]参数传[]时则外部的函数只会在初始化时调用一次返回的那个函数也只会最终在组件卸载时调用一次</p><p><strong>3、</strong> [source]参数有值时则只会监听到数组中的值发生变化后才优先调用返回的那个函数再调用外部的函数。</p><h3 id="_7、你能用hoc做什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#7%E4%BD%A0%E8%83%BD%E7%94%A8hoc%E5%81%9A%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">7、你能用HOC做什么？</a> <a class="header-anchor" href="#_7、你能用hoc做什么" aria-label="Permalink to &quot;[7、你能用HOC做什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#7你能用hoc做什么)&quot;">​</a></h3><p><strong>HOC可用于许多任务，例如：</strong></p><p><strong>1、</strong> 代码重用，逻辑和引导抽象</p><p><strong>2、</strong> 渲染劫持</p><p><strong>3、</strong> 状态抽象和控制</p><p><strong>4、</strong> Props 控制</p><h3 id="_8、store-在-redux-中的意义是什么" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#8store-%E5%9C%A8-redux-%E4%B8%AD%E7%9A%84%E6%84%8F%E4%B9%89%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noreferrer">8、Store 在 Redux 中的意义是什么？</a> <a class="header-anchor" href="#_8、store-在-redux-中的意义是什么" aria-label="Permalink to &quot;[8、Store 在 Redux 中的意义是什么？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#8store-在-redux-中的意义是什么)&quot;">​</a></h3><p>Store 是一个 JavaScript 对象，它可以保存程序的状态，并提供一些方法来访问状态、调度操作和注册侦听器。应用程序的整个状态/对象树保存在单一存储中。因此，Redux 非常简单且是可预测的。我们可以将中间件传递到 store 来处理数据，并记录改变存储状态的各种操作。所有操作都通过 reducer 返回一个新状态。</p><h3 id="_9、区分real-dom和virtual-dom" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#9%E5%8C%BA%E5%88%86real-dom%E5%92%8Cvirtual-dom" target="_blank" rel="noreferrer">9、区分Real DOM和Virtual DOM</a> <a class="header-anchor" href="#_9、区分real-dom和virtual-dom" aria-label="Permalink to &quot;[9、区分Real DOM和Virtual DOM](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#9区分real-dom和virtual-dom)&quot;">​</a></h3><table><thead><tr><th>Real DOM</th><th>Virtual DOM</th></tr></thead><tbody><tr><td>1、更新缓慢。</td><td>1、更新更快。</td></tr><tr><td>2、可以直接更新 HTML。</td><td>2、无法直接更新 HTML。</td></tr><tr><td>3、如果元素更新，则创建新DOM。</td><td>3、如果元素更新，则更新 JSX 。</td></tr><tr><td>4、DOM操作代价很高。</td><td>4、DOM 操作非常简单。</td></tr><tr><td>5、消耗的内存较多。</td><td>5、很少的内存消耗。</td></tr></tbody></table><h3 id="_10、那你能讲一讲mvvm吗" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C2021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB.md#10%E9%82%A3%E4%BD%A0%E8%83%BD%E8%AE%B2%E4%B8%80%E8%AE%B2mvvm%E5%90%97" target="_blank" rel="noreferrer">10、那你能讲一讲MVVM吗？</a> <a class="header-anchor" href="#_10、那你能讲一讲mvvm吗" aria-label="Permalink to &quot;[10、那你能讲一讲MVVM吗？](https://gitee.com/souyunku/DevBooks/blob/master/docs/React/React最新面试题，2021年面试题及答案汇总.md#10那你能讲一讲mvvm吗)&quot;">​</a></h3><p>MVVM是<code>Model-View-ViewModel</code>缩写，也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel</code>。Model层代表数据模型，View代表UI组件，ViewModel是View和Model层的桥梁，数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据。</p><h3 id="_11、你都做过哪些vue的性能优化" tabindex="-1">11、你都做过哪些Vue的性能优化？ <a class="header-anchor" href="#_11、你都做过哪些vue的性能优化" aria-label="Permalink to &quot;11、你都做过哪些Vue的性能优化？&quot;">​</a></h3><h3 id="_12、你了解-virtual-dom-吗-解释一下它的工作原理。" tabindex="-1">12、你了解 Virtual DOM 吗？解释一下它的工作原理。 <a class="header-anchor" href="#_12、你了解-virtual-dom-吗-解释一下它的工作原理。" aria-label="Permalink to &quot;12、你了解 Virtual DOM 吗？解释一下它的工作原理。&quot;">​</a></h3><h3 id="_13、说一下v-model的原理" tabindex="-1">13、说一下v-model的原理 <a class="header-anchor" href="#_13、说一下v-model的原理" aria-label="Permalink to &quot;13、说一下v-model的原理&quot;">​</a></h3><h3 id="_14、什么是控制组件" tabindex="-1">14、什么是控制组件？ <a class="header-anchor" href="#_14、什么是控制组件" aria-label="Permalink to &quot;14、什么是控制组件？&quot;">​</a></h3><h3 id="_15、为什么虚拟dom会提高性能" tabindex="-1">15、为什么虚拟dom会提高性能 <a class="header-anchor" href="#_15、为什么虚拟dom会提高性能" aria-label="Permalink to &quot;15、为什么虚拟dom会提高性能&quot;">​</a></h3><h3 id="_16、react性能优化是哪个周期函数" tabindex="-1">16、react性能优化是哪个周期函数 <a class="header-anchor" href="#_16、react性能优化是哪个周期函数" aria-label="Permalink to &quot;16、react性能优化是哪个周期函数&quot;">​</a></h3><h3 id="_17、hash路由和history路由实现原理说一下" tabindex="-1">17、hash路由和history路由实现原理说一下 <a class="header-anchor" href="#_17、hash路由和history路由实现原理说一下" aria-label="Permalink to &quot;17、hash路由和history路由实现原理说一下&quot;">​</a></h3><h3 id="_18、什么是react-路由" tabindex="-1">18、什么是React 路由？ <a class="header-anchor" href="#_18、什么是react-路由" aria-label="Permalink to &quot;18、什么是React 路由？&quot;">​</a></h3><h3 id="_19、redux-有哪些优点" tabindex="-1">19、Redux 有哪些优点？ <a class="header-anchor" href="#_19、redux-有哪些优点" aria-label="Permalink to &quot;19、Redux 有哪些优点？&quot;">​</a></h3><h3 id="_20、列出-react-router-的优点。" tabindex="-1">20、列出 React Router 的优点。 <a class="header-anchor" href="#_20、列出-react-router-的优点。" aria-label="Permalink to &quot;20、列出 React Router 的优点。&quot;">​</a></h3><h3 id="_21、nexttick知道吗-实现原理是什么" tabindex="-1">21、nextTick知道吗，实现原理是什么？ <a class="header-anchor" href="#_21、nexttick知道吗-实现原理是什么" aria-label="Permalink to &quot;21、nextTick知道吗，实现原理是什么？&quot;">​</a></h3><h3 id="_22、如何更新组件的状态" tabindex="-1">22、如何更新组件的状态？ <a class="header-anchor" href="#_22、如何更新组件的状态" aria-label="Permalink to &quot;22、如何更新组件的状态？&quot;">​</a></h3><h3 id="_23、在合成事件-和-生命周期钩子-除-componentdidupdate-中setstate是-异步-的" tabindex="-1">23、在合成事件 和 生命周期钩子(除 componentDidUpdate) 中setState是&quot;异步&quot;的 <a class="header-anchor" href="#_23、在合成事件-和-生命周期钩子-除-componentdidupdate-中setstate是-异步-的" aria-label="Permalink to &quot;23、在合成事件 和 生命周期钩子(除 componentDidUpdate) 中setState是&quot;异步&quot;的&quot;">​</a></h3><h3 id="_24、组件中的data为什么是一个函数" tabindex="-1">24、组件中的data为什么是一个函数？ <a class="header-anchor" href="#_24、组件中的data为什么是一个函数" aria-label="Permalink to &quot;24、组件中的data为什么是一个函数？&quot;">​</a></h3><h3 id="_25、shouldcomponentupdate-的作用" tabindex="-1">25、shouldComponentUpdate 的作用 <a class="header-anchor" href="#_25、shouldcomponentupdate-的作用" aria-label="Permalink to &quot;25、shouldComponentUpdate 的作用&quot;">​</a></h3><h3 id="_26、与-es5-相比-react-的-es6-语法有何不同" tabindex="-1">26、与 ES5 相比，React 的 ES6 语法有何不同？ <a class="header-anchor" href="#_26、与-es5-相比-react-的-es6-语法有何不同" aria-label="Permalink to &quot;26、与 ES5 相比，React 的 ES6 语法有何不同？&quot;">​</a></h3><h3 id="_27、react-中-keys的作用是什么" tabindex="-1">27、React 中 keys的作用是什么 <a class="header-anchor" href="#_27、react-中-keys的作用是什么" aria-label="Permalink to &quot;27、React 中 keys的作用是什么&quot;">​</a></h3>`,72),l=[n];function r(c,p,d,i,u,E){return a(),s("div",null,l)}const m=e(o,[["render",r]]);export{f as __pageData,m as default};
