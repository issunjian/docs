import{_ as s,o as n,c as a,V as l}from"./chunks/framework.c6d8cbec.js";const p="/docs/assets/reader-writer-20230320164938.d945a923.png",o="/docs/assets/reader-writer-0b68ef81-26d0-4a4e-9c1b-61928ce8646c.2abc6584.png",e="/docs/assets/reader-writer-20230320183546.49671e5b.png",t="/docs/assets/reader-writer-3b4fd024-856f-45ee-8183-1a1ee808e5ce.af60309d.png",D=JSON.parse('{"title":"Java 字符流：Reader和Writer的故事","description":"本文详细介绍了字符流在 Java IO 操作中的重要作用，特别关注 Reader 和 Writer 类及其子类的功能与用途。同时，文章还提供了字符流的实际应用示例和常用方法。阅读本文，将帮助您更深入地了解字符流以及 Reader 和 Writer 在 Java 编程中的关键地位，提高文本操作效率。","frontmatter":{"title":"Java 字符流：Reader和Writer的故事","shortTitle":"字符流","category":["Java核心"],"tag":["Java IO"],"description":"本文详细介绍了字符流在 Java IO 操作中的重要作用，特别关注 Reader 和 Writer 类及其子类的功能与用途。同时，文章还提供了字符流的实际应用示例和常用方法。阅读本文，将帮助您更深入地了解字符流以及 Reader 和 Writer 在 Java 编程中的关键地位，提高文本操作效率。","head":[["meta",{"name":"keywords","content":"Java,Java IO,Reader,Writer,字符流,java字符流"}]]},"headers":[],"relativePath":"backend/tobetter/io/reader-writer.md","filePath":"backend/tobetter/io/reader-writer.md"}'),c={name:"backend/tobetter/io/reader-writer.md"},r=l('<h1 id="_7-4-字符流" tabindex="-1">7.4 字符流 <a class="header-anchor" href="#_7-4-字符流" aria-label="Permalink to &quot;7.4 字符流&quot;">​</a></h1><p>字符流 Reader 和 Writer 的故事要从它们的类关系图开始，来看图。</p><img src="'+p+`"><p>字符流是一种用于读取和写入字符数据的输入输出流。与字节流不同，字符流以字符为单位读取和写入数据，而不是以字节为单位。常用来处理文本信息。</p><p>如果用字节流直接读取中文，可能会遇到乱码问题，见下例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//FileInputStream为操作文件的字符输入流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileInputStream</span><span style="color:#F6F6F4;"> inputStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span><span style="color:#7B7F8B;">//内容为“沉默王二是傻 X”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">inputStream.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">())</span><span style="color:#F286C4;">!=-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">((</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)len);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//FileInputStream为操作文件的字符输入流</span></span>
<span class="line"><span style="color:#24292E;">FileInputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.txt&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//内容为“沉默王二是傻 X”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">inputStream.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">!=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)len);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>来看运行结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">运行结果：   æ²é»çäºæ¯å» X</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">运行结果：   æ²é»çäºæ¯å» X</span></span></code></pre></div><p>看一下截图：</p><img src="`+o+`"><p>之所以出现乱码是因为在字节流中，一个字符通常由多个字节组成，而不同的字符编码使用的字节数不同。如果我们使用了错误的字符编码，或者在读取和写入数据时没有正确处理字符编码的转换，就会导致读取出来的中文字符出现乱码。</p><p>例如，当我们使用默认的字符编码（见上例）读取一个包含中文字符的文本文件时，就会出现乱码。因为默认的字符编码通常是 ASCII 编码，它只能表示英文字符，而不能正确地解析中文字符。</p><p>那使用字节流该如何正确地读出中文呢？见下例。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileInputStream</span><span style="color:#F6F6F4;"> inputStream </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileInputStream</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] bytes </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> inputStream.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(bytes)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(bytes, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileInputStream inputStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileInputStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] bytes </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inputStream.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(bytes)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(bytes, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>为什么这种方式就可以呢？</p><p>因为我们拿 String 类进行了解码，查看<code>new String(byte bytes[], int offset, int length)</code>的源码就可以发现，该构造方法有解码功能：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;"> bytes[], </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> offset, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> length) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">checkBounds</span><span style="color:#F6F6F4;">(bytes, offset, length);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> StringCoding.</span><span style="color:#62E884;">decode</span><span style="color:#F6F6F4;">(bytes, offset, length);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> bytes[], </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> offset, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> length) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">checkBounds</span><span style="color:#24292E;">(bytes, offset, length);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StringCoding.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(bytes, offset, length);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>继续追看 <code>StringCoding.decode()</code> 方法调用的 <code>defaultCharset()</code> 方法，会发现默认编码是<code>UTF-8</code>，代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Charset</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defaultCharset</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (defaultCharset </span><span style="color:#F286C4;">==</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">synchronized</span><span style="color:#F6F6F4;"> (Charset.class) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (cs </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">                defaultCharset </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> cs;</span></span>
<span class="line"><span style="color:#F6F6F4;">            </span><span style="color:#F286C4;">else</span></span>
<span class="line"><span style="color:#F6F6F4;">                defaultCharset </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">forName</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">UTF-8</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> defaultCharset;</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] </span><span style="color:#62E884;">decode</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">byte</span><span style="color:#F6F6F4;">[] ba, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> off, </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> csn </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Charset.</span><span style="color:#62E884;">defaultCharset</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">name</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">// use charset name decode() variant which provides caching.</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">decode</span><span style="color:#F6F6F4;">(csn, ba, off, len);</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">UnsupportedEncodingException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">warnUnsupportedCharset</span><span style="color:#F6F6F4;">(csn);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Charset </span><span style="color:#6F42C1;">defaultCharset</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (defaultCharset </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">synchronized</span><span style="color:#24292E;"> (Charset.class) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cs </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                defaultCharset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cs;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">else</span></span>
<span class="line"><span style="color:#24292E;">                defaultCharset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> defaultCharset;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] ba, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> off, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len) {</span></span>
<span class="line"><span style="color:#24292E;">    String csn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Charset.</span><span style="color:#6F42C1;">defaultCharset</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// use charset name decode() variant which provides caching.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(csn, ba, off, len);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (UnsupportedEncodingException </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">warnUnsupportedCharset</span><span style="color:#24292E;">(csn);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Java 中，常用的字符编码有 ASCII、ISO-8859-1、UTF-8、UTF-16 等。其中，ASCII 和 ISO-8859-1 只能表示部分字符，而 UTF-8 和 UTF-16 可以表示所有的 Unicode 字符，包括中文字符。</p><p>当我们使用 <code>new String(byte bytes[], int offset, int length)</code> 将字节流转换为字符串时，Java 会根据 UTF-8 的规则将每 3 个字节解码为一个中文字符，从而正确地解码出中文。</p><p>尽管字节流也有办法解决乱码问题，但不够直接，于是就有了字符流，<code>专门用于处理文本</code>文件（音频、图片、视频等为非文本文件）。</p><p>从另一角度来说：<strong>字符流 = 字节流 + 编码表</strong></p><h3 id="_01、字符输入流-reader" tabindex="-1">01、字符输入流（Reader） <a class="header-anchor" href="#_01、字符输入流-reader" aria-label="Permalink to &quot;01、字符输入流（Reader）&quot;">​</a></h3><p><code>java.io.Reader</code>是<strong>字符输入流</strong>的<strong>超类</strong>（父类），它定义了字符输入流的一些共性方法：</p><ul><li>1、<code>close()</code>：关闭此流并释放与此流相关的系统资源。</li><li>2、<code>read()</code>：从输入流读取一个字符。</li><li>3、<code>read(char[] cbuf)</code>：从输入流中读取一些字符，并将它们存储到字符数组 <code>cbuf</code>中</li></ul><p>FileReader 是 Reader 的子类，用于从文件中读取字符数据。它的主要特点如下：</p><ul><li>可以通过构造方法指定要读取的文件路径。</li><li>每次可以读取一个或多个字符。</li><li>可以读取 Unicode 字符集中的字符，通过指定字符编码来实现字符集的转换。</li></ul><h4 id="_1-filereader构造方法" tabindex="-1">1）FileReader构造方法 <a class="header-anchor" href="#_1-filereader构造方法" aria-label="Permalink to &quot;1）FileReader构造方法&quot;">​</a></h4><ul><li>1、<code>FileReader(File file)</code>：创建一个新的 FileReader，参数为<strong>File对象</strong>。</li><li>2、<code>FileReader(String fileName)</code>：创建一个新的 FileReader，参数为文件名。</li></ul><p>代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 使用File对象创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> file </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用File对象创建流对象</span></span>
<span class="line"><span style="color:#24292E;">File file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">FileReader fr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#24292E;">FileReader fr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="_2-filereader读取字符数据" tabindex="-1">2）FileReader读取字符数据 <a class="header-anchor" href="#_2-filereader读取字符数据" aria-label="Permalink to &quot;2）FileReader读取字符数据&quot;">​</a></h4><p>①、<strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符，返回读取的字符（转为 int 类型），当读取到文件末尾时，返回<code>-1</code>。代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 定义变量，保存数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> b;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 循环读取</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((b </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> fr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">())</span><span style="color:#F286C4;">!=-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    System.out.</span><span style="color:#62E884;">println</span><span style="color:#F6F6F4;">((</span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">)b);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭资源</span></span>
<span class="line"><span style="color:#F6F6F4;">fr.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#24292E;">FileReader fr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 定义变量，保存数据</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b;</span></span>
<span class="line"><span style="color:#6A737D;">// 循环读取</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">!=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)b);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 关闭资源</span></span>
<span class="line"><span style="color:#24292E;">fr.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>②、<strong>读取指定长度的字符</strong>：<code>read(char[] cbuf, int off, int len)</code>，并将其存储到字符数组中。其中，cbuf 表示存储读取结果的字符数组，off 表示存储结果的起始位置，len 表示要读取的字符数。代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> textFile </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">docs/约定.md</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 给一个 FileReader 的示例</span></span>
<span class="line"><span style="color:#7B7F8B;">// try-with-resources FileReader</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> reader </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(textFile);) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// read(char[] cbuf)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] buffer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;"> ((len </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> reader.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, buffer.length)) </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        System.out.</span><span style="color:#62E884;">print</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">String</span><span style="color:#F6F6F4;">(buffer, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, len));</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">File textFile </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;docs/约定.md&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 给一个 FileReader 的示例</span></span>
<span class="line"><span style="color:#6A737D;">// try-with-resources FileReader</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;">(FileReader reader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(textFile);) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// read(char[] cbuf)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] buffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> ((len </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> reader.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, buffer.length)) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(buffer, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, len));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个例子中，使用 FileReader 从文件中读取字符数据，并将其存储到一个大小为 1024 的字符数组中。每次读取 len 个字符，然后使用 String 构造方法将其转换为字符串并输出。</p><p>FileReader 实现了 AutoCloseable 接口，因此可以使用 <a href="https://tobebetterjavaer.com/exception/try-with-resources.html" target="_blank" rel="noreferrer">try-with-resources</a> 语句自动关闭资源，避免了手动关闭资源的繁琐操作。</p><h3 id="_02、字符输出流-writer" tabindex="-1">02、字符输出流（Writer） <a class="header-anchor" href="#_02、字符输出流-writer" aria-label="Permalink to &quot;02、字符输出流（Writer）&quot;">​</a></h3><p><code>java.io.Writer</code> 是<strong>字符输出流</strong>类的<strong>超类</strong>（父类），可以将指定的字符信息写入到目的地，来看它定义的一些共性方法：</p><ul><li>1、<code>write(int c)</code> 写入单个字符。</li><li>2、<code>write(char[] cbuf)</code> 写入字符数组。</li><li>3、<code>write(char[] cbuf, int off, int len)</code> 写入字符数组的一部分，off为开始索引，len为字符个数。</li><li>4、<code>write(String str)</code> 写入字符串。</li><li>5、<code>write(String str, int off, int len)</code> 写入字符串的某一部分，off 指定要写入的子串在 str 中的起始位置，len 指定要写入的子串的长度。</li><li>6、<code>flush()</code> 刷新该流的缓冲。</li><li>7、<code>close()</code> 关闭此流，但要先刷新它。</li></ul><p><code>java.io.FileWriter</code> 类是 Writer 的子类，用来将字符写入到文件。</p><h4 id="_1-filewriter-构造方法" tabindex="-1">1）FileWriter 构造方法 <a class="header-anchor" href="#_1-filewriter-构造方法" aria-label="Permalink to &quot;1）FileWriter 构造方法&quot;">​</a></h4><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，参数为要读取的File对象。</li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，参数为要读取的文件的名称。</li></ul><p>代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 第一种：使用File对象创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">File</span><span style="color:#F6F6F4;"> file </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">File</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">a.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 第二种：使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 第一种：使用File对象创建流对象</span></span>
<span class="line"><span style="color:#24292E;">File file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(file);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二种：使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="_2-filewriter写入数据" tabindex="-1">2）FileWriter写入数据 <a class="header-anchor" href="#_2-filewriter写入数据" aria-label="Permalink to &quot;2）FileWriter写入数据&quot;">​</a></h4><p>①、<strong>写入字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符，代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">72</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写入字符&#39;H&#39;的ASCII码</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">101</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写入字符&#39;e&#39;的ASCII码</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">108</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写入字符&#39;l&#39;的ASCII码</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">108</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写入字符&#39;l&#39;的ASCII码</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">111</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写入字符&#39;o&#39;的ASCII码</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fw </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">72</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写入字符&#39;H&#39;的ASCII码</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">101</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写入字符&#39;e&#39;的ASCII码</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">108</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写入字符&#39;l&#39;的ASCII码</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">108</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写入字符&#39;l&#39;的ASCII码</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">111</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写入字符&#39;o&#39;的ASCII码</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fw </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个示例代码中，首先创建一个 FileWriter 对象 fw，并指定要写入的文件路径 &quot;output.txt&quot;。然后使用 fw.write() 方法将字节写入文件中，这里分别写入字符&#39;H&#39;、&#39;e&#39;、&#39;l&#39;、&#39;l&#39;、&#39;o&#39;的 ASCII 码。最后在 finally 块中关闭 FileWriter 对象，释放资源。</p><p>需要注意的是，使用 <code>write(int b)</code> 方法写入的是一个字节，而不是一个字符。如果需要写入字符，可以使用 <code>write(char cbuf[])</code> 或 <code>write(String str)</code> 方法。</p><p>②、<strong>写入字符数组</strong>：<code>write(char[] cbuf)</code> 方法，将指定字符数组写入输出流。代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] chars </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">H</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">e</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">o</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(chars); </span><span style="color:#7B7F8B;">// 将字符数组写入文件</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fw </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] chars </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;H&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(chars); </span><span style="color:#6A737D;">// 将字符数组写入文件</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fw </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>③、<strong>写入指定字符数组</strong>：<code>write(char[] cbuf, int off, int len)</code> 方法，将指定字符数组的一部分写入输出流。代码示例如下（重复的部分就不写了哈，参照上面的部分）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[] chars </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> {</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">H</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">e</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">o</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">,</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">W</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">o</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">r</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">l</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">d</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">!</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">};</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(chars, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 将字符数组的前 5 个字符写入文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[] chars </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&#39;H&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;W&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;!&#39;</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(chars, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 将字符数组的前 5 个字符写入文件</span></span></code></pre></div><p>使用 <code>fw.write()</code> 方法将字符数组的前 5 个字符写入文件中。</p><p>④、<strong>写入字符串</strong>：<code>write(String str)</code> 方法，将指定字符串写入输出流。代码示例如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(str); </span><span style="color:#7B7F8B;">// 将字符串写入文件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(str); </span><span style="color:#6A737D;">// 将字符串写入文件</span></span></code></pre></div><p>⑤、<strong>写入指定字符串</strong>：<code>write(String str, int off, int len)</code> 方法，将指定字符串的一部分写入输出流。代码示例如下（try-with-resources形式）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;"> str </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二真的帅啊！</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">output.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(str, </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">, </span><span style="color:#BF9EEE;">5</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 将字符串的前 5 个字符写入文件</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">String str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;沉默王二真的帅啊！&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;output.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(str, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 将字符串的前 5 个字符写入文件</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>【注意】如果不关闭资源，数据只是保存到缓冲区，并未保存到文件中。</p></blockquote><h4 id="_3-关闭close和刷新flush" tabindex="-1">3）关闭close和刷新flush <a class="header-anchor" href="#_3-关闭close和刷新flush" aria-label="Permalink to &quot;3）关闭close和刷新flush&quot;">​</a></h4><p>因为 FileWriter 内置了缓冲区 ByteBuffer，所以如果不关闭输出流，就无法把字符写入到文件中。</p><img src="`+e+`"><p>但是关闭了流对象，就无法继续写数据了。如果我们既想写入数据，又想继续使用流，就需要 <code>flush</code> 方法了。</p><p><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</p><p><code>close</code> ：先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p><p>flush还是比较有趣的，来段代码体会体会：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">//源   也就是输入流【读取流】 读取a.txt文件</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">abc.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">//必须要存在a.txt文件，否则报FileNotFoundException异常</span></span>
<span class="line"><span style="color:#7B7F8B;">//目的地  也就是输出流</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">b.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);  </span><span style="color:#7B7F8B;">//系统会自动创建b.txt，因为它是输出流！</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len;</span></span>
<span class="line"><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">((len</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">fr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">())</span><span style="color:#F286C4;">!=-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">){</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(len);</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"><span style="color:#7B7F8B;">//注意这里是没有使用close关闭流，开发中不能这样做，但是为了更好的体会flush的作用</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//源   也就是输入流【读取流】 读取a.txt文件</span></span>
<span class="line"><span style="color:#24292E;">FileReader fr</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc.txt&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//必须要存在a.txt文件，否则报FileNotFoundException异常</span></span>
<span class="line"><span style="color:#6A737D;">//目的地  也就是输出流</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fw</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;b.txt&quot;</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">//系统会自动创建b.txt，因为它是输出流！</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len;</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">((len</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">!=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(len);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//注意这里是没有使用close关闭流，开发中不能这样做，但是为了更好的体会flush的作用</span></span></code></pre></div><p>运行效果是怎么样的呢？答案是b.txt文件中依旧是空的，并没有任何东西。</p><img src="`+t+`"><p>原因我们前面已经说过了。<strong>编程就是这样，不去敲，永远学不会</strong>！！！所以一定要去敲，多敲啊！！！</p><p>在以上的代码中再添加下面三句代码，b.txt文件就能复制到源文件的数据了！</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">fr.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">fr.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p><code>flush()</code>这个方法是清空缓存的意思，用于清空缓冲区的数据流，进行流的操作时，数据先被读到内存中，然后再把数据写到文件中。</p><p>你可以使用下面的代码示例再体验一下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fw.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 写出数据，通过flush</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">刷</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写出第1个字符</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">新</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 继续写出第2个字符，写出成功</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 写出数据，然后close</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">关</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 写出第1个字符</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">闭</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用文件名称创建流对象</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fw.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 写出数据，通过flush</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;刷&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写出第1个字符</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;新&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 继续写出第2个字符，写出成功</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 写出数据，然后close</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;关&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 写出第1个字符</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;闭&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>注意，即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。当然你也可以用 try-with-resources 的方式。</p><h4 id="_4-filewriter的续写和换行" tabindex="-1">4）FileWriter的续写和换行 <a class="header-anchor" href="#_4-filewriter的续写和换行" aria-label="Permalink to &quot;4）FileWriter的续写和换行&quot;">​</a></h4><p><strong>续写和换行</strong>：操作类似于<a href="https://tobebetterjavaer.com/io/stream.html" target="_blank" rel="noreferrer">FileOutputStream操作</a>，直接上代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 使用文件名称创建流对象，可以续写数据</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fw.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">);     </span></span>
<span class="line"><span style="color:#7B7F8B;">// 写出字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">沉默王二</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 写出换行</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">\\r\\n</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 写出字符串</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">是傻 X</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#7B7F8B;">// 关闭资源</span></span>
<span class="line"><span style="color:#F6F6F4;">fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用文件名称创建流对象，可以续写数据</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fw.txt&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);     </span></span>
<span class="line"><span style="color:#6A737D;">// 写出字符串</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;沉默王二&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 写出换行</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\r\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 写出字符串</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;是傻 X&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 关闭资源</span></span>
<span class="line"><span style="color:#24292E;">fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span></code></pre></div><p>输出结果如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">输出结果:</span></span>
<span class="line"><span style="color:#f6f6f4;">沉默王二</span></span>
<span class="line"><span style="color:#f6f6f4;">是傻 X</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输出结果:</span></span>
<span class="line"><span style="color:#24292e;">沉默王二</span></span>
<span class="line"><span style="color:#24292e;">是傻 X</span></span></code></pre></div><h4 id="_5-文本文件复制" tabindex="-1">5）文本文件复制 <a class="header-anchor" href="#_5-文本文件复制" aria-label="Permalink to &quot;5）文本文件复制&quot;">​</a></h4><p>直接上代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.io.FileReader;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.io.FileWriter;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> java.io.IOException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">CopyFile</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">main</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">String</span><span style="color:#F6F6F4;">[] </span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//创建输入流对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> fr</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileReader</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">aa.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span><span style="color:#7B7F8B;">//文件不存在会抛出java.io.FileNotFoundException</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//创建输出流对象</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">copyaa.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">/*创建输出流做的工作：</span></span>
<span class="line"><span style="color:#7B7F8B;">         *      1、调用系统资源创建了一个文件</span></span>
<span class="line"><span style="color:#7B7F8B;">         *      2、创建输出流对象</span></span>
<span class="line"><span style="color:#7B7F8B;">         *      3、把输出流对象指向文件        </span></span>
<span class="line"><span style="color:#7B7F8B;">         * */</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//文本文件复制，一次读一个字符</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">copyMethod1</span><span style="color:#F6F6F4;">(fr, fw);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#7B7F8B;">//文本文件复制，一次读一个字符数组</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#62E884;">copyMethod2</span><span style="color:#F6F6F4;">(fr, fw);</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span></span>
<span class="line"><span style="color:#F6F6F4;">        fr.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">copyMethod1</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">fr</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">fw</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> ch;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">((ch</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">fr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">())</span><span style="color:#F286C4;">!=-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span><span style="color:#7B7F8B;">//读数据</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(ch);</span><span style="color:#7B7F8B;">//写数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        fw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">public</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">static</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">copyMethod2</span><span style="color:#F6F6F4;">(</span><span style="color:#97E1F1;font-style:italic;">FileReader</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">fr</span><span style="color:#F6F6F4;">, </span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">fw</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">throws</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;"> chs[]</span><span style="color:#F286C4;">=</span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">char</span><span style="color:#F6F6F4;">[</span><span style="color:#BF9EEE;">1024</span><span style="color:#F6F6F4;">];</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#97E1F1;font-style:italic;">int</span><span style="color:#F6F6F4;"> len</span><span style="color:#F286C4;">=</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">while</span><span style="color:#F6F6F4;">((len</span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;">fr.</span><span style="color:#62E884;">read</span><span style="color:#F6F6F4;">(chs))</span><span style="color:#F286C4;">!=-</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">) {</span><span style="color:#7B7F8B;">//读数据</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(chs,</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">,len);</span><span style="color:#7B7F8B;">//写数据</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">        fw.</span><span style="color:#62E884;">flush</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.FileReader;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.FileWriter;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.io.IOException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CopyFile</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建输入流对象</span></span>
<span class="line"><span style="color:#24292E;">        FileReader fr</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileReader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;aa.txt&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//文件不存在会抛出java.io.FileNotFoundException</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//创建输出流对象</span></span>
<span class="line"><span style="color:#24292E;">        FileWriter fw</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;copyaa.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/*创建输出流做的工作：</span></span>
<span class="line"><span style="color:#6A737D;">         *      1、调用系统资源创建了一个文件</span></span>
<span class="line"><span style="color:#6A737D;">         *      2、创建输出流对象</span></span>
<span class="line"><span style="color:#6A737D;">         *      3、把输出流对象指向文件        </span></span>
<span class="line"><span style="color:#6A737D;">         * */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//文本文件复制，一次读一个字符</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">copyMethod1</span><span style="color:#24292E;">(fr, fw);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//文本文件复制，一次读一个字符数组</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">copyMethod2</span><span style="color:#24292E;">(fr, fw);</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        fr.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copyMethod1</span><span style="color:#24292E;">(FileReader </span><span style="color:#E36209;">fr</span><span style="color:#24292E;">, FileWriter </span><span style="color:#E36209;">fw</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ch;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((ch</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">!=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;">//读数据</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(ch);</span><span style="color:#6A737D;">//写数据</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        fw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">copyMethod2</span><span style="color:#24292E;">(FileReader </span><span style="color:#E36209;">fr</span><span style="color:#24292E;">, FileWriter </span><span style="color:#E36209;">fw</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> IOException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> chs[]</span><span style="color:#D73A49;">=new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">1024</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> len</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">((len</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">fr.</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(chs))</span><span style="color:#D73A49;">!=-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) {</span><span style="color:#6A737D;">//读数据</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(chs,</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,len);</span><span style="color:#6A737D;">//写数据</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        fw.</span><span style="color:#6F42C1;">flush</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_03、io异常的处理" tabindex="-1">03、IO异常的处理 <a class="header-anchor" href="#_03、io异常的处理" aria-label="Permalink to &quot;03、IO异常的处理&quot;">​</a></h3><p>我们在学习的过程中可能习惯把异常抛出，而实际开发中建议使用<code>try...catch...finally</code> 代码块，处理异常部分，格式代码如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 声明变量</span></span>
<span class="line"><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">//创建流对象</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fw.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 写出数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二哥真的帅</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//哥敢摸si</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">finally</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (fw </span><span style="color:#F286C4;">!=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">            fw.</span><span style="color:#62E884;">close</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">        }</span></span>
<span class="line"><span style="color:#F6F6F4;">    } </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 声明变量</span></span>
<span class="line"><span style="color:#24292E;">FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//创建流对象</span></span>
<span class="line"><span style="color:#24292E;">    fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fw.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写出数据</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二哥真的帅&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//哥敢摸si</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fw </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            fw.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>或者直接使用 try-with-resources 的方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">try</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">FileWriter</span><span style="color:#F6F6F4;"> fw </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">FileWriter</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">fw.txt</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 写出数据</span></span>
<span class="line"><span style="color:#F6F6F4;">    fw.</span><span style="color:#62E884;">write</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">二哥真的帅</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">); </span><span style="color:#7B7F8B;">//哥敢摸si</span></span>
<span class="line"><span style="color:#F6F6F4;">} </span><span style="color:#F286C4;">catch</span><span style="color:#F6F6F4;"> (</span><span style="color:#97E1F1;font-style:italic;">IOException</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    e.</span><span style="color:#62E884;">printStackTrace</span><span style="color:#F6F6F4;">();</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> (FileWriter fw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FileWriter</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;fw.txt&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 写出数据</span></span>
<span class="line"><span style="color:#24292E;">    fw.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;二哥真的帅&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//哥敢摸si</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (IOException </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    e.</span><span style="color:#6F42C1;">printStackTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在这个代码中，try-with-resources 会在 try 块执行完毕后自动关闭 FileWriter 对象 fw，不需要手动关闭流。如果在 try 块中发生了异常，也会自动关闭流并抛出异常。因此，使用 try-with-resources 可以让代码更加简洁、安全和易读。</p><h3 id="_04、小结" tabindex="-1">04、小结 <a class="header-anchor" href="#_04、小结" aria-label="Permalink to &quot;04、小结&quot;">​</a></h3><p>Writer 和 Reader 是 Java I/O 中用于字符输入输出的抽象类，它们提供了一系列方法用于读取和写入字符数据。它们的区别在于 Writer 用于将字符数据写入到输出流中，而 Reader 用于从输入流中读取字符数据。</p><p>Writer 和 Reader 的常用子类有 FileWriter、FileReader，可以将字符流写入和读取到文件中。</p><p>在使用 Writer 和 Reader 进行字符输入输出时，需要注意字符编码的问题。</p><hr>`,98),y=[r];function F(i,E,d,f,u,C){return n(),a("div",null,y)}const w=s(c,[["render",F]]);export{D as __pageData,w as default};
