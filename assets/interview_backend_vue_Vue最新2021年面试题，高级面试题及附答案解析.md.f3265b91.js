import{_ as e,o as s,c as a,V as n}from"./chunks/framework.c6d8cbec.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/backend/vue/Vue最新2021年面试题，高级面试题及附答案解析.md","filePath":"interview/backend/vue/Vue最新2021年面试题，高级面试题及附答案解析.md"}'),o={name:"interview/backend/vue/Vue最新2021年面试题，高级面试题及附答案解析.md"},t=n(`<h3 id="_1、是否可以在js中执行301重定向" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#1%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%9C%A8js%E4%B8%AD%E6%89%A7%E8%A1%8C301%E9%87%8D%E5%AE%9A%E5%90%91" target="_blank" rel="noreferrer">1、是否可以在JS中执行301重定向？</a> <a class="header-anchor" href="#_1、是否可以在js中执行301重定向" aria-label="Permalink to &quot;[1、是否可以在JS中执行301重定向？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#1是否可以在js中执行301重定向)&quot;">​</a></h3><p>JS完全运行在客户端上。301是服务器作为响应发送的响应代码。因此，在JS中不可能执行301重定向。</p><h3 id="_2、mvvm框架是什么-它和其它框架-jquery-的区别是什么-哪些场景适合" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#2mvvm%E6%A1%86%E6%9E%B6%E6%98%AF%E4%BB%80%E4%B9%88%E5%AE%83%E5%92%8C%E5%85%B6%E5%AE%83%E6%A1%86%E6%9E%B6jquery%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%93%AA%E4%BA%9B%E5%9C%BA%E6%99%AF%E9%80%82%E5%90%88" target="_blank" rel="noreferrer">2、mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？</a> <a class="header-anchor" href="#_2、mvvm框架是什么-它和其它框架-jquery-的区别是什么-哪些场景适合" aria-label="Permalink to &quot;[2、mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#2mvvm框架是什么它和其它框架jquery的区别是什么哪些场景适合)&quot;">​</a></h3><p>一个model+view+viewModel框架，数据模型model，viewModel连接两个</p><p><strong>1、</strong> 区别：vue数据驱动，通过数据来显示视图层而不是节点操作。</p><p><strong>2、</strong> 场景：数据操作比较多的场景，更加便捷</p><h3 id="_3、简述每个周期具体适合哪些场景" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#3%E7%AE%80%E8%BF%B0%E6%AF%8F%E4%B8%AA%E5%91%A8%E6%9C%9F%E5%85%B7%E4%BD%93%E9%80%82%E5%90%88%E5%93%AA%E4%BA%9B%E5%9C%BA%E6%99%AF" target="_blank" rel="noreferrer">3、简述每个周期具体适合哪些场景</a> <a class="header-anchor" href="#_3、简述每个周期具体适合哪些场景" aria-label="Permalink to &quot;[3、简述每个周期具体适合哪些场景](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#3简述每个周期具体适合哪些场景)&quot;">​</a></h3><p><strong>1、</strong> beforeCreate：在new一个vue实例后，只有一些默认的生命周期钩子和默认事件，其他的东西都还没创建。在beforeCreate生命周期执行的时候，data和methods中的数据都还没有初始化。不能在这个阶段使用data中的数据和methods中的方法</p><p><strong>2、</strong> create：data 和 methods都已经被初始化好了，如果要调用 methods 中的方法，或者操作 data 中的数据，最早可以在这个阶段中操作</p><p><strong>3、</strong> beforeMount：执行到这个钩子的时候，在内存中已经编译好了模板了，但是还没有挂载到页面中，此时，页面还是旧的</p><p><strong>4、</strong> mounted：执行到这个钩子的时候，就表示Vue实例已经初始化完成了。此时组件脱离了创建阶段，进入到了运行阶段。 如果我们想要通过插件操作页面上的DOM节点，最早可以在和这个阶段中进行</p><p><strong>5、</strong> beforeUpdate： 当执行这个钩子时，页面中的显示的数据还是旧的，data中的数据是更新后的， 页面还没有和最新的数据保持同步</p><p><strong>6、</strong> updated：页面显示的数据和data中的数据已经保持同步了，都是最新的</p><p><strong>7、</strong> beforeDestory：Vue实例从运行阶段进入到了销毁阶段，这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于可用状态。还没有真正被销毁</p><p><strong>8、</strong> destroyed： 这个时候上所有的 data 和 methods ， 指令， 过滤器 ……都是处于不可用状态。组件已经被销毁了。</p><h3 id="_4、再说一下vue2-x中如何监测数组变化" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#4%E5%86%8D%E8%AF%B4%E4%B8%80%E4%B8%8Bvue2x%E4%B8%AD%E5%A6%82%E4%BD%95%E7%9B%91%E6%B5%8B%E6%95%B0%E7%BB%84%E5%8F%98%E5%8C%96" target="_blank" rel="noreferrer">4、再说一下vue2.x中如何监测数组变化</a> <a class="header-anchor" href="#_4、再说一下vue2-x中如何监测数组变化" aria-label="Permalink to &quot;[4、再说一下vue2.x中如何监测数组变化](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#4再说一下vue2x中如何监测数组变化)&quot;">​</a></h3><p>使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法。这样当调用数组api时，可以通知依赖更新。如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</p><p>（能问到这的面试官都比较注重深度，这些常规操作要记牢）</p><h3 id="_5、请说下封装-vue-组件的过程" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#5%E8%AF%B7%E8%AF%B4%E4%B8%8B%E5%B0%81%E8%A3%85-vue-%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">5、请说下封装 vue 组件的过程？</a> <a class="header-anchor" href="#_5、请说下封装-vue-组件的过程" aria-label="Permalink to &quot;[5、请说下封装 vue 组件的过程？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#5请说下封装-vue-组件的过程)&quot;">​</a></h3><p><strong>1、</strong> 建立组件的模板，先把架子搭起来，写写样式，考虑好组件的基本逻辑。(os：思考1小时，码码10分钟，程序猿的准则。)</p><p><strong>2、</strong> 准备好组件的数据输入。即分析好逻辑，定好 props 里面的数据、类型。</p><p><strong>3、</strong> 准备好组件的数据输出。即根据组件逻辑，做好要暴露出来的方法。</p><p><strong>4、</strong> 封装完毕了，直接调用即可</p><h3 id="_6、vue-roter的钩子函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#6vue-roter%E7%9A%84%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">6、vue-roter的钩子函数？</a> <a class="header-anchor" href="#_6、vue-roter的钩子函数" aria-label="Permalink to &quot;[6、vue-roter的钩子函数？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#6vue-roter的钩子函数)&quot;">​</a></h3><p><strong>vue路由钩子大致可以分为三类:</strong></p><p><strong>全局钩子</strong></p><p>主要包括beforeEach和aftrEach,beforeEach函数有三个参数：</p><p><strong>1、</strong> to:router即将进入的路由对象</p><p><strong>2、</strong> from:当前导航即将离开的路由</p><p><strong>3、</strong> next:Function,进行管道中的一个钩子，如果执行完了，则导航的状态就是 confirmed （确认的）；否则为false，终止导航。</p><p><strong>4、</strong> afterEach函数不用传next()函数这类钩子主要作用于全局,一般用来判断权限,以及以及页面丢失时候需要执行的操作,例如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">//使用钩子函数对路由进行权限跳转</span></span>
<span class="line"><span style="color:#f6f6f4;">router.beforeEach((to, from, next) =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">    const role = localStorage.getItem(&#39;ms_username&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">    if(!role &amp;&amp; to.path !== &#39;/login&#39;){</span></span>
<span class="line"><span style="color:#f6f6f4;">        next(&#39;/login&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }else if(to.meta.permission){</span></span>
<span class="line"><span style="color:#f6f6f4;">        // 如果是管理员权限则可进入，这里只是简单的模拟管理员权限而已</span></span>
<span class="line"><span style="color:#f6f6f4;">        role === &#39;admin&#39; ? next() : next(&#39;/403&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">    }else{</span></span>
<span class="line"><span style="color:#f6f6f4;">        // 简单的判断IE10及以下不进入富文本编辑器，该组件不兼容</span></span>
<span class="line"><span style="color:#f6f6f4;">        if(navigator.userAgent.indexOf(&#39;MSIE&#39;) &gt; -1 &amp;&amp; to.path === &#39;/editor&#39;){</span></span>
<span class="line"><span style="color:#f6f6f4;">            Vue.prototype.$alert(&#39;vue-quill-editor组件不兼容IE10及以下浏览器，</span></span>
<span class="line"><span style="color:#f6f6f4;">            请使用更高版本的浏览器查看&#39;, &#39;浏览器不兼容通知&#39;, {</span></span>
<span class="line"><span style="color:#f6f6f4;">                confirmButtonText: &#39;确定&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">            });</span></span>
<span class="line"><span style="color:#f6f6f4;">        }else{</span></span>
<span class="line"><span style="color:#f6f6f4;">            next();</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">//使用钩子函数对路由进行权限跳转</span></span>
<span class="line"><span style="color:#24292e;">router.beforeEach((to, from, next) =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">    const role = localStorage.getItem(&#39;ms_username&#39;);</span></span>
<span class="line"><span style="color:#24292e;">    if(!role &amp;&amp; to.path !== &#39;/login&#39;){</span></span>
<span class="line"><span style="color:#24292e;">        next(&#39;/login&#39;);</span></span>
<span class="line"><span style="color:#24292e;">    }else if(to.meta.permission){</span></span>
<span class="line"><span style="color:#24292e;">        // 如果是管理员权限则可进入，这里只是简单的模拟管理员权限而已</span></span>
<span class="line"><span style="color:#24292e;">        role === &#39;admin&#39; ? next() : next(&#39;/403&#39;);</span></span>
<span class="line"><span style="color:#24292e;">    }else{</span></span>
<span class="line"><span style="color:#24292e;">        // 简单的判断IE10及以下不进入富文本编辑器，该组件不兼容</span></span>
<span class="line"><span style="color:#24292e;">        if(navigator.userAgent.indexOf(&#39;MSIE&#39;) &gt; -1 &amp;&amp; to.path === &#39;/editor&#39;){</span></span>
<span class="line"><span style="color:#24292e;">            Vue.prototype.$alert(&#39;vue-quill-editor组件不兼容IE10及以下浏览器，</span></span>
<span class="line"><span style="color:#24292e;">            请使用更高版本的浏览器查看&#39;, &#39;浏览器不兼容通知&#39;, {</span></span>
<span class="line"><span style="color:#24292e;">                confirmButtonText: &#39;确定&#39;</span></span>
<span class="line"><span style="color:#24292e;">            });</span></span>
<span class="line"><span style="color:#24292e;">        }else{</span></span>
<span class="line"><span style="color:#24292e;">            next();</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">})</span></span></code></pre></div><p><strong>单个路由里面的钩子</strong></p><p>主要用于写某个指定路由跳转时需要执行的逻辑</p><p><strong>组件路由</strong></p><p>主要包括beforeRouteEnter和beforeRouteUpdate,beforeRouteLeave,这几个钩子都是写在组件里面也可以传三个参数(to,from,next),作用与前面类似.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">beforeRouteEnter(to, from, next) {</span></span>
<span class="line"><span style="color:#f6f6f4;">    next(vm =&gt; {</span></span>
<span class="line"><span style="color:#f6f6f4;">      if (</span></span>
<span class="line"><span style="color:#f6f6f4;">        vm.$route.meta.hasOwnProperty(&#39;auth_key&#39;) &amp;&amp;</span></span>
<span class="line"><span style="color:#f6f6f4;">        vm.$route.meta.auth_key != &#39;&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">      ) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        if (!vm.hasPermission(vm.$route.meta.auth_key)) {</span></span>
<span class="line"><span style="color:#f6f6f4;">          vm.$router.replace(&#39;/admin/noPermission&#39;)</span></span>
<span class="line"><span style="color:#f6f6f4;">        }</span></span>
<span class="line"><span style="color:#f6f6f4;">      }</span></span>
<span class="line"><span style="color:#f6f6f4;">    })</span></span>
<span class="line"><span style="color:#f6f6f4;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">beforeRouteEnter(to, from, next) {</span></span>
<span class="line"><span style="color:#24292e;">    next(vm =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">      if (</span></span>
<span class="line"><span style="color:#24292e;">        vm.$route.meta.hasOwnProperty(&#39;auth_key&#39;) &amp;&amp;</span></span>
<span class="line"><span style="color:#24292e;">        vm.$route.meta.auth_key != &#39;&#39;</span></span>
<span class="line"><span style="color:#24292e;">      ) {</span></span>
<span class="line"><span style="color:#24292e;">        if (!vm.hasPermission(vm.$route.meta.auth_key)) {</span></span>
<span class="line"><span style="color:#24292e;">          vm.$router.replace(&#39;/admin/noPermission&#39;)</span></span>
<span class="line"><span style="color:#24292e;">        }</span></span>
<span class="line"><span style="color:#24292e;">      }</span></span>
<span class="line"><span style="color:#24292e;">    })</span></span>
<span class="line"><span style="color:#24292e;">  }</span></span></code></pre></div><h3 id="_7、vue的solt的用法" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#7vue%E7%9A%84solt%E7%9A%84%E7%94%A8%E6%B3%95" target="_blank" rel="noreferrer">7、vue的solt的用法？</a> <a class="header-anchor" href="#_7、vue的solt的用法" aria-label="Permalink to &quot;[7、vue的solt的用法？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#7vue的solt的用法)&quot;">​</a></h3><p>在子组件内使用特殊的＜slot&gt;元素就可以为这个子组件开启一个slot（插槽），在父组件模板里，插入在子组件标签内的所有内容将替代子组件的＜slot&gt; 标签及它的内容。</p><p>简单说来就是：在子组件内部用 标签占位，当在父组件中使用子组件的时候，我们可以在子组件中插入内容，而这些插入的内容则会替换 标签的位置。</p><p>当然：单个solt的时候可以不对solt进行命名，如果存在多个 则一个可以不命名，其他必须命名，在调用的时候指定名称的对应替换slot，没有指定的则直接默认无名称的solt</p><h3 id="_8、请详细说下你对vue生命周期的理解" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#8%E8%AF%B7%E8%AF%A6%E7%BB%86%E8%AF%B4%E4%B8%8B%E4%BD%A0%E5%AF%B9vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3" target="_blank" rel="noreferrer">8、请详细说下你对vue生命周期的理解？</a> <a class="header-anchor" href="#_8、请详细说下你对vue生命周期的理解" aria-label="Permalink to &quot;[8、请详细说下你对vue生命周期的理解？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#8请详细说下你对vue生命周期的理解)&quot;">​</a></h3><p>总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后</p><p><strong>1、</strong> 创建前/后： 在beforeCreated阶段，vue实例的挂载元素$$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$$el还没有。</p><p><strong>2、</strong> 载入前/后：在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。</p><p><strong>3、</strong> 更新前/后：当data变化时，会触发beforeUpdate和updated方法。</p><p><strong>4、</strong> 销毁前/后：在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p><h3 id="_9、什么是过滤器" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#9%E4%BB%80%E4%B9%88%E6%98%AF%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="noreferrer">9、什么是过滤器？</a> <a class="header-anchor" href="#_9、什么是过滤器" aria-label="Permalink to &quot;[9、什么是过滤器？](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#9什么是过滤器)&quot;">​</a></h3><p>过滤器是在 Vue 程序中实现自定义文本格式的一种非常简单的方法。它们就像可以在表达式中通过管道传递（使用管道字符）以取得结果的运算符。下面是一个可以反转文本字符串的过滤器示例：</p><p><strong>模板</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">&lt;div id=&quot;app&quot;&gt;{{ title | reverseText }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#f6f6f4;">App</span></span>
<span class="line"><span style="color:#f6f6f4;">new Vue({</span></span>
<span class="line"><span style="color:#f6f6f4;">    el: &#39;#app&#39;,</span></span>
<span class="line"><span style="color:#f6f6f4;">    data: {</span></span>
<span class="line"><span style="color:#f6f6f4;">      title: &#39;This is a title&#39;</span></span>
<span class="line"><span style="color:#f6f6f4;">    },</span></span>
<span class="line"><span style="color:#f6f6f4;">    filters: {</span></span>
<span class="line"><span style="color:#f6f6f4;">      reverseText(text) {</span></span>
<span class="line"><span style="color:#f6f6f4;">        return text.split(&#39;&#39;).reverse().join(&#39;&#39;);</span></span>
<span class="line"><span style="color:#f6f6f4;">      }</span></span>
<span class="line"><span style="color:#f6f6f4;">    }</span></span>
<span class="line"><span style="color:#f6f6f4;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;div id=&quot;app&quot;&gt;{{ title | reverseText }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292e;">App</span></span>
<span class="line"><span style="color:#24292e;">new Vue({</span></span>
<span class="line"><span style="color:#24292e;">    el: &#39;#app&#39;,</span></span>
<span class="line"><span style="color:#24292e;">    data: {</span></span>
<span class="line"><span style="color:#24292e;">      title: &#39;This is a title&#39;</span></span>
<span class="line"><span style="color:#24292e;">    },</span></span>
<span class="line"><span style="color:#24292e;">    filters: {</span></span>
<span class="line"><span style="color:#24292e;">      reverseText(text) {</span></span>
<span class="line"><span style="color:#24292e;">        return text.split(&#39;&#39;).reverse().join(&#39;&#39;);</span></span>
<span class="line"><span style="color:#24292e;">      }</span></span>
<span class="line"><span style="color:#24292e;">    }</span></span>
<span class="line"><span style="color:#24292e;">});</span></span></code></pre></div><p><strong>输出</strong></p><p>eltit a si sihT</p><p>在上面的例子中，我们创建了一个名为 reverseText 的过滤器，该过滤器反转文本字符串并返回。这是一个简单的函数，接受输入并返回处理后的输出。通过在过滤器下声明，它就可以成为可以在模板中使用的过滤器。</p><p>在模板中，我们只是将 reverseText 过滤器通过管道传递到了想要在 mustache 标签中显示的数据变量。这样可以将多个过滤器管道连接在一起。因此过滤器提供了一种非常优雅的方式来处理文本。</p><h3 id="_10、vue获取数据在哪个周期函数" tabindex="-1"><a href="https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue%E6%9C%80%E6%96%B02021%E5%B9%B4%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%8C%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E9%99%84%E7%AD%94%E6%A1%88%E8%A7%A3%E6%9E%90.md#10vue%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%93%AA%E4%B8%AA%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">10、vue获取数据在哪个周期函数</a> <a class="header-anchor" href="#_10、vue获取数据在哪个周期函数" aria-label="Permalink to &quot;[10、vue获取数据在哪个周期函数](https://gitee.com/souyunku/DevBooks/blob/master/docs/Vue/Vue最新2021年面试题，高级面试题及附答案解析.md#10vue获取数据在哪个周期函数)&quot;">​</a></h3><p>一般 created/beforeMount/mounted 皆可.</p><p>比如如果你要操作 DOM , 那肯定 mounted 时候才能操作.</p><h3 id="_11、js中的匿名函数是什么" tabindex="-1">11、JS中的匿名函数是什么？ <a class="header-anchor" href="#_11、js中的匿名函数是什么" aria-label="Permalink to &quot;11、JS中的匿名函数是什么？&quot;">​</a></h3><h3 id="_12、什么是组件" tabindex="-1">12、什么是组件？ <a class="header-anchor" href="#_12、什么是组件" aria-label="Permalink to &quot;12、什么是组件？&quot;">​</a></h3><h3 id="_13、为什么使用key" tabindex="-1">13、为什么使用key? <a class="header-anchor" href="#_13、为什么使用key" aria-label="Permalink to &quot;13、为什么使用key?&quot;">​</a></h3><h3 id="_14、vue2中注册在router-link上事件无效解决方法" tabindex="-1">14、Vue2中注册在router-link上事件无效解决方法 <a class="header-anchor" href="#_14、vue2中注册在router-link上事件无效解决方法" aria-label="Permalink to &quot;14、Vue2中注册在router-link上事件无效解决方法&quot;">​</a></h3><h3 id="_15、如何通过类别名获取-dom-元素" tabindex="-1">15、如何通过类别名获取 dom 元素 <a class="header-anchor" href="#_15、如何通过类别名获取-dom-元素" aria-label="Permalink to &quot;15、如何通过类别名获取 dom 元素&quot;">​</a></h3><h3 id="_16、请说出vue-cli项目中src目录每个文件夹和文件的用法" tabindex="-1">16、请说出vue.cli项目中src目录每个文件夹和文件的用法？ <a class="header-anchor" href="#_16、请说出vue-cli项目中src目录每个文件夹和文件的用法" aria-label="Permalink to &quot;16、请说出vue.cli项目中src目录每个文件夹和文件的用法？&quot;">​</a></h3><h3 id="_17、说一下v-if和v-show的区别" tabindex="-1">17、说一下v-if和v-show的区别 <a class="header-anchor" href="#_17、说一下v-if和v-show的区别" aria-label="Permalink to &quot;17、说一下v-if和v-show的区别&quot;">​</a></h3><h3 id="_18、js中如何将页面重定向到另一个页面" tabindex="-1">18、JS中如何将页面重定向到另一个页面？ <a class="header-anchor" href="#_18、js中如何将页面重定向到另一个页面" aria-label="Permalink to &quot;18、JS中如何将页面重定向到另一个页面？&quot;">​</a></h3><h3 id="_19、解释js中的事件冒泡和事件捕获" tabindex="-1">19、解释JS中的事件冒泡和事件捕获 <a class="header-anchor" href="#_19、解释js中的事件冒泡和事件捕获" aria-label="Permalink to &quot;19、解释JS中的事件冒泡和事件捕获&quot;">​</a></h3><h3 id="_20、vue中transition的理解" tabindex="-1">20、vue中transition的理解？ <a class="header-anchor" href="#_20、vue中transition的理解" aria-label="Permalink to &quot;20、vue中transition的理解？&quot;">​</a></h3><h3 id="_21、vue模版编译原理知道吗-能简单说一下吗" tabindex="-1">21、Vue模版编译原理知道吗，能简单说一下吗？ <a class="header-anchor" href="#_21、vue模版编译原理知道吗-能简单说一下吗" aria-label="Permalink to &quot;21、Vue模版编译原理知道吗，能简单说一下吗？&quot;">​</a></h3><h3 id="_22、dom-渲染在-哪个周期中就已经完成" tabindex="-1">22、DOM 渲染在 哪个周期中就已经完成？ <a class="header-anchor" href="#_22、dom-渲染在-哪个周期中就已经完成" aria-label="Permalink to &quot;22、DOM 渲染在 哪个周期中就已经完成？&quot;">​</a></h3><h3 id="_23、module-exports-和-exports-之间有什么区别" tabindex="-1">23、module.exports 和 exports 之间有什么区别？ <a class="header-anchor" href="#_23、module-exports-和-exports-之间有什么区别" aria-label="Permalink to &quot;23、module.exports 和 exports 之间有什么区别？&quot;">​</a></h3><h3 id="_24、vue开发遇到的问题" tabindex="-1">24、vue开发遇到的问题？ <a class="header-anchor" href="#_24、vue开发遇到的问题" aria-label="Permalink to &quot;24、vue开发遇到的问题？&quot;">​</a></h3><h3 id="_25、vue的keep-alive的理解" tabindex="-1">25、vue的keep-alive的理解？ <a class="header-anchor" href="#_25、vue的keep-alive的理解" aria-label="Permalink to &quot;25、vue的keep-alive的理解？&quot;">​</a></h3><h3 id="_26、vue-js-中的指令是什么" tabindex="-1">26、Vue.js 中的指令是什么？ <a class="header-anchor" href="#_26、vue-js-中的指令是什么" aria-label="Permalink to &quot;26、Vue.js 中的指令是什么？&quot;">​</a></h3><h3 id="_27、vue-js-中的声明式渲染是什么" tabindex="-1">27、Vue.js 中的声明式渲染是什么？ <a class="header-anchor" href="#_27、vue-js-中的声明式渲染是什么" aria-label="Permalink to &quot;27、Vue.js 中的声明式渲染是什么？&quot;">​</a></h3><h3 id="_28、父组件更新过程" tabindex="-1">28、父组件更新过程 <a class="header-anchor" href="#_28、父组件更新过程" aria-label="Permalink to &quot;28、父组件更新过程&quot;">​</a></h3>`,76),l=[t];function p(r,i,c,u,E,d){return s(),a("div",null,l)}const A=e(o,[["render",p]]);export{h as __pageData,A as default};
