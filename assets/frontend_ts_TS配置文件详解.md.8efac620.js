import{_ as s,o as n,c as a,V as o}from"./chunks/framework.c6d8cbec.js";const d=JSON.parse('{"title":"Typescript 配置文件（tsconfig.json）解析","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/ts/TS配置文件详解.md","filePath":"frontend/ts/TS配置文件详解.md"}'),l={name:"frontend/ts/TS配置文件详解.md"},p=o(`<h1 id="typescript-配置文件-tsconfig-json-解析" tabindex="-1">Typescript 配置文件（tsconfig.json）解析 <a class="header-anchor" href="#typescript-配置文件-tsconfig-json-解析" aria-label="Permalink to &quot;Typescript 配置文件（tsconfig.json）解析&quot;">​</a></h1><p>TypeScript带来的类型系统以及强大的IDE支持，让前端开发也变得严谨而流畅。但TypeScript不是原生的Javascript代码，需要进行编译才能转换为Javascript代码。</p><p>tsconfig.json是编译TypeScript的配置文件，对书写TypeScript代码十分重要。因为有些选项如果你没配置，则需要严格按照TypeScript的规则来书写，对初期使用TypeScript的同学而言，稍不留神就会书写出不符合规则的代码，从而导致编译报错，打击自信心。其实早期可以通过关闭一些规则设置，从而更愉快的从js转为ts开发。笔者根据项目实战经历来解释一些常用的编译选项，文末也会附上笔者整理的所有tsconfig.json选项的解释。</p><h2 id="_1-experimentaldecorators" tabindex="-1">1. experimentalDecorators <a class="header-anchor" href="#_1-experimentaldecorators" aria-label="Permalink to &quot;1. experimentalDecorators&quot;">​</a></h2><p><code>是否启用实验性的ES装饰器</code>。boolean类型，默认值：false。<a href="https://www.typescriptlang.org/docs/handbook/decorators.html" target="_blank" rel="noreferrer">官方解释(opens new window)</a></p><p>TypeScript和ES6中引入了Class的概念，同时在<a href="https://github.com/tc39/proposal-decorators" target="_blank" rel="noreferrer">stage 2 proposal (opens new window)</a>提出了Java等服务器端语言早就有的装饰器模式。通过引入装饰器模式，能极大简化书写代码，把一些通用逻辑封装到装饰器中。很多库都有用到该特性，比如vue-class-component 及 vuex-class等库。<strong>当你使用这些库时，必须开启experimentalDecorators</strong>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">f(): evaluated</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">propertyKey</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">descriptor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PropertyDescriptor</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">f(): called</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">);</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">C</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    @</span><span style="color:#62E884;">f</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">method</span><span style="color:#F6F6F4;">() {}</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;f(): evaluated&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">target</span><span style="color:#24292E;">, </span><span style="color:#E36209;">propertyKey</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">descriptor</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PropertyDescriptor</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;f(): called&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">C</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">() {}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>启用 vuex-class同时需要设置<code>strictFunctionTypes</code>选项为false</p></blockquote><h2 id="_2-strictpropertyinitialization" tabindex="-1">2. strictPropertyInitialization <a class="header-anchor" href="#_2-strictpropertyinitialization" aria-label="Permalink to &quot;2. strictPropertyInitialization&quot;">​</a></h2><p><code>是否类的非undefined属性已经在构造函数里初始化</code>。 boolean类型，默认值：false</p><p>直白点，就是所有的属性值，都需要赋有初始值。<strong>建议把strictPropertyInitialization设置为false</strong>，这样就不需要定义一个变量就必须赋有初始值。对使用vuex-class库的同学，建议请把这个值设为false，绝对能省很多事。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">class</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Home</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">extend</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;">Vue</span><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    jobId</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 如果开启strictPropertyInitialization，则这里会报错，因为没有赋值默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">method1</span><span style="color:#F6F6F4;">() </span><span style="color:#F286C4;">:</span><span style="color:#97E1F1;font-style:italic;">void</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">        console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.jobId)</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Home</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">extend</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">jobId</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 如果开启strictPropertyInitialization，则这里会报错，因为没有赋值默认值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">method1</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">void</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.jobId)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>如果设置该选项为true，需要同时启用--strictNullChecks或启用--strict</p></blockquote><h2 id="_3-noimplicitany" tabindex="-1">3. noImplicitAny <a class="header-anchor" href="#_3-noimplicitany" aria-label="Permalink to &quot;3. noImplicitAny&quot;">​</a></h2><p><code>有隐含的 any类型时是否报错</code>。boolean值，默认值：false</p><p>ts是有默认推导的，同时还有any类型，所以不是每个变量或参数定义需要明确告知类型是什么。如果开启该值，当有隐含any类型时，会报错。<strong>建议初次上手TypeScript，把该选项设置为false。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 当开启noImplicitAny时，需要隐含当any需要明确指出</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> item.name </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">// error</span></span>
<span class="line"><span style="color:#F6F6F4;">arr.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">any</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> item.name </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> name) </span><span style="color:#7B7F8B;">// ok</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 当开启noImplicitAny时，需要隐含当any需要明确指出</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> name) </span><span style="color:#6A737D;">// error</span></span>
<span class="line"><span style="color:#24292E;">arr.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> name) </span><span style="color:#6A737D;">// ok</span></span></code></pre></div><h2 id="_4-target" tabindex="-1">4. target <a class="header-anchor" href="#_4-target" aria-label="Permalink to &quot;4. target&quot;">​</a></h2><p><code>指定编译的ECMAScript目标版本</code>。枚举值：&quot;ES3&quot;， &quot;ES5&quot;， &quot;ES6&quot;/ &quot;ES2015&quot;， &quot;ES2016&quot;， &quot;ES2017&quot;，&quot;ESNext&quot;。默认值： “ES3”</p><p>TypeScript是ES6的超集，所以你可以使用ES6来编写ts代码（通常我们也的确这么做）。然而，当编译ts代码时，可以把ts转为ES5或更早的js代码。所以需要选择一个编译的目标版本。vue-cli3的typescript模板，设置为“ESNext”，因为现代大部分应用项目都会使用Webpack（Parcel也很棒）进行打包，Webpack会把你的代码转换成在所有浏览器中可运行的代码。</p><blockquote><p>target: &quot;ESNext&quot; 是指tc39最新的<a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">ES proposed features(opens new window)</a></p></blockquote><h2 id="_5-module" tabindex="-1">5. module <a class="header-anchor" href="#_5-module" aria-label="Permalink to &quot;5. module&quot;">​</a></h2><p><code>指定生成哪个模块系统代码</code>。枚举值：&quot;None&quot;， &quot;CommonJS&quot;， &quot;AMD&quot;， &quot;System&quot;， &quot;UMD&quot;， &quot;ES6&quot;， &quot;ES2015&quot;，&quot;ESNext&quot;。默认值根据--target选项不同而不同，当target设置为ES6时，默认module为“ES6”，否则为“commonjs”</p><p>通常使用ES6的模块来写ts代码，然而2016年1月以前，基本上没有浏览器原生支持ES6的模块系统，所以需要转换为不同的模块系统，如：CommonJS、AMD、SystemJS等，而module选项就是指定编译使用对应的模块系统。</p><h2 id="_6-lib" tabindex="-1">6. lib <a class="header-anchor" href="#_6-lib" aria-label="Permalink to &quot;6. lib&quot;">​</a></h2><p><code>编译过程中需要引入的库文件的列表</code>。string[]类型，可选的值有很多，常用的有ES5，ES6，ESNext，DOM，DOM.Iterable、WebWorker、ScriptHost等。该值默认值是根据--target选项不同而不同。当target为ES5时，默认值为[&#39;DOM &#39;, &#39;ES5&#39;, &#39;ScriptHost&#39;];当target为ES6时，默认值为[&#39;DOM&#39;, &#39;ES6&#39;, &#39;DOM.Iterable&#39;, &#39;ScriptHost&#39;]</p><p>为了在ts代码中使用ES6中的类，比如Array.form、Set、Reflect等，需要设置lib选项，在编译过程中把这些标准库引入。这样在编译过程中，如果遇到属于这些标准库的class或api时，ts编译器不会报错。</p><h2 id="_7-moduleresolution" tabindex="-1">7. moduleResolution <a class="header-anchor" href="#_7-moduleresolution" aria-label="Permalink to &quot;7. moduleResolution&quot;">​</a></h2><p><code>决定如何处理模块</code>。string类型，“node”或者“classic”，默认值：“classic”。<a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">官方解释(opens new window)</a></p><p>说直白点，也就是遇到import { AAA } from &#39;./aaa&#39;该如何去找对应文件模块解析。对于工程项目，笔者<strong>建议大家使用node</strong>（vue-cli3 ts模板默认设置为node策略），因为这个更符合平时我们的书写习惯以及认知（平时都是webpack打包，webpack又基于node之上）。</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#f6f6f4;">// 在源文件/root/src/A.ts中import { b } from &quot;./moduleB&quot;</span></span>
<span class="line"><span style="color:#f6f6f4;">// 两种解析方式查找文件方式不同</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">// classic模块解析方式</span></span>
<span class="line"><span style="color:#f6f6f4;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">2. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;"></span></span>
<span class="line"><span style="color:#f6f6f4;">// node模块解析方式</span></span>
<span class="line"><span style="color:#f6f6f4;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">2. /root/src/moduleB.tsx</span></span>
<span class="line"><span style="color:#f6f6f4;">3. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">4. /root/src/moduleB/package.json (if it specifies a &quot;types&quot; property)</span></span>
<span class="line"><span style="color:#f6f6f4;">5. /root/src/moduleB/index.ts</span></span>
<span class="line"><span style="color:#f6f6f4;">6. /root/src/moduleB/index.tsx</span></span>
<span class="line"><span style="color:#f6f6f4;">7. /root/src/moduleB/index.d.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 在源文件/root/src/A.ts中import { b } from &quot;./moduleB&quot;</span></span>
<span class="line"><span style="color:#24292e;">// 两种解析方式查找文件方式不同</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// classic模块解析方式</span></span>
<span class="line"><span style="color:#24292e;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#24292e;">2. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// node模块解析方式</span></span>
<span class="line"><span style="color:#24292e;">1. /root/src/moduleB.ts</span></span>
<span class="line"><span style="color:#24292e;">2. /root/src/moduleB.tsx</span></span>
<span class="line"><span style="color:#24292e;">3. /root/src/moduleB.d.ts</span></span>
<span class="line"><span style="color:#24292e;">4. /root/src/moduleB/package.json (if it specifies a &quot;types&quot; property)</span></span>
<span class="line"><span style="color:#24292e;">5. /root/src/moduleB/index.ts</span></span>
<span class="line"><span style="color:#24292e;">6. /root/src/moduleB/index.tsx</span></span>
<span class="line"><span style="color:#24292e;">7. /root/src/moduleB/index.d.ts</span></span></code></pre></div><h2 id="_8-paths" tabindex="-1">8. paths <a class="header-anchor" href="#_8-paths" aria-label="Permalink to &quot;8. paths&quot;">​</a></h2><p><code>模块名或路径映射的列表</code>。Object值</p><p>这是一个非常有用的选项，比如我们经常使用&#39;@/util/help&#39;来代替&#39;./src/util/help&#39;，省的每次在不同层级文件import模块时,都纠结于是&#39;./&#39;还是&#39;../&#39;。该选项告诉编译器遇到匹配的值时，去映射的路径下加载模块。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">baseUrl</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">.</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">, </span><span style="color:#7B7F8B;">// 注意：baseUrl不可少</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">paths</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 映射列表</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">@/*</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/*</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">      ],</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">moduleA</span><span style="color:#DEE492;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/libs/moduleA</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">      ]</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// in ts code</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Setting </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@/components/Setting.vue</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 模块实际位置: src/components/Setting.vue</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> TestModule </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">moduleA/index.js</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 模块实际位置: src/libs/moduleA/index.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 注意：baseUrl不可少</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 映射列表</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;@/*&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;src/*&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;moduleA&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;src/libs/moduleA&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// in ts code</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Setting </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/components/Setting.vue&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 模块实际位置: src/components/Setting.vue</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> TestModule </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;moduleA/index.js&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 模块实际位置: src/libs/moduleA/index.js</span></span></code></pre></div><h2 id="_9-strictnullchecks" tabindex="-1">9. strictNullChecks <a class="header-anchor" href="#_9-strictnullchecks" aria-label="Permalink to &quot;9. strictNullChecks&quot;">​</a></h2><p><code>是否启用严格的 null检查模式</code>。boolean值，默认值：false</p><p>未处理的null和undefined经常会导致BUG的产生，所以TypeScript包含了strictNullChecks选项来帮助我们减少对这种情况的担忧。当启用了strictNullChecks，null和undefined获得了它们自己各自的类型null和undefined。开启该模式有助于发现并处理可能为undefined的赋值。<strong>如果是正式项目，笔者建议开启该选项；如果只是练手TypeScirpt，可以关闭该选项</strong>，不然所有可能为null/undefined的赋值，都需要写联合类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 未开启strictNullChecks，number类型包含了null和undefined类型</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">123</span><span style="color:#F6F6F4;">;</span></span>
<span class="line"><span style="color:#F6F6F4;">foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">null</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// Okay</span></span>
<span class="line"><span style="color:#F6F6F4;">foo </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span><span style="color:#F6F6F4;">; </span><span style="color:#7B7F8B;">// Okay</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 开启strictNullChecks</span></span>
<span class="line"><span style="color:#F286C4;">let</span><span style="color:#F6F6F4;"> foo</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">[] </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">undefined</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> arr.</span><span style="color:#62E884;">find</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> key </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">test</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#7B7F8B;">// foo.push(&#39;1&#39;) // error - &#39;foo&#39; is possibly &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">foo </span><span style="color:#F286C4;">&amp;&amp;</span><span style="color:#F6F6F4;"> foo.</span><span style="color:#62E884;">push</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">1</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// okay</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 未开启strictNullChecks，number类型包含了null和undefined类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">123</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Okay</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Okay</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 开启strictNullChecks</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> foo</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// foo.push(&#39;1&#39;) // error - &#39;foo&#39; is possibly &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#24292E;">foo </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> foo.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// okay</span></span></code></pre></div><blockquote><p>注意：启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict, --strictNullChecks, --strictFunctionTypes和--strictPropertyInitialization</p></blockquote><h2 id="_10-nounusedlocals" tabindex="-1">10. noUnusedLocals <a class="header-anchor" href="#_10-nounusedlocals" aria-label="Permalink to &quot;10. noUnusedLocals&quot;">​</a></h2><p><code>有未使用的变量时，是否抛出错误</code>。boolean值，默认值： false</p><p>顾名思义，当发现变量定义但没有使用时，编译不报错。eslint的rule中也有该条，<strong>建议正式项目将该选项开启，设置为true</strong>，使得代码干净整洁。</p><h2 id="_11-nounusedparameters" tabindex="-1">11. noUnusedParameters <a class="header-anchor" href="#_11-nounusedparameters" aria-label="Permalink to &quot;11. noUnusedParameters&quot;">​</a></h2><p><code>有未使用的参数时，是否抛出错误</code>。boolean值，默认值： false</p><p><strong>建议正式项目开启该选项，设置为true</strong>，理由同上。</p><h2 id="_12-allowjs" tabindex="-1">12. allowJs <a class="header-anchor" href="#_12-allowjs" aria-label="Permalink to &quot;12. allowJs&quot;">​</a></h2><p><code>是否允许编译javascript文件</code>。boolean值，默认值：false</p><p>如果设置为true，js后缀的文件也会被typescript进行编译。</p><h2 id="_13-typeroots和types" tabindex="-1">13. typeRoots和types <a class="header-anchor" href="#_13-typeroots和types" aria-label="Permalink to &quot;13. typeRoots和types&quot;">​</a></h2><p>默认所有可见的&quot;@types&quot;包会在编译过程中被包含进来。如果指定了typeRoots，只有typeRoots下面的包才会被包含进来。如果指定了types，只有被列出来的npm包才会被包含进来。<a href="https://www.tslang.cn/docs/handbook/tsconfig-json.html#types-typeroots-and-types" target="_blank" rel="noreferrer">详细内容可看此处(opens new window)</a></p><blockquote><p>可以指定&quot;types&quot;: []来禁用自动引入@types包</p></blockquote><h2 id="_14-files、include和exclude" tabindex="-1">14. files、include和exclude <a class="header-anchor" href="#_14-files、include和exclude" aria-label="Permalink to &quot;14. files、include和exclude&quot;">​</a></h2><p><code>编译文件包含哪些文件以及排除哪些文件</code>。</p><p>未设置include时，编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts, .d.ts 和 .tsx）。如果allowJs被设置成true，JS文件（.js和.jsx）也被包含进来。exclude排除那些不需要编译的文件或文件夹。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">compilerOptions</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: {},</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">include</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: [</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/**/*</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    ],</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">exclude</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">: [</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node_modules</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">**/*.spec.ts</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">    ]</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;include&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;src/**/*&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;exclude&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;node_modules&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;**/*.spec.ts&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="tsconfig-json全解析" tabindex="-1">tsconfig.json全解析 <a class="header-anchor" href="#tsconfig-json全解析" aria-label="Permalink to &quot;tsconfig.json全解析&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">{</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compilerOptions</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* 基本选项 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">target</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">es5</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;（&quot;ESNext&quot;表示最新的ES语法，包括还处在stage X阶段）</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">module</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">commonjs</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                  </span><span style="color:#7B7F8B;">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">lib</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [],                             </span><span style="color:#7B7F8B;">// 指定要包含在编译中的库文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">allowJs</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 允许编译 javascript 文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">checkJs</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 报告 javascript 文件中的错误</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">jsx</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">preserve</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                     </span><span style="color:#7B7F8B;">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">declaration</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                   </span><span style="color:#7B7F8B;">// 生成相应的 &#39;.d.ts&#39; 文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">sourceMap</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                     </span><span style="color:#7B7F8B;">// 生成相应的 &#39;.map&#39; 文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">outFile</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 将输出文件合并为一个文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">outDir</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                        </span><span style="color:#7B7F8B;">// 指定输出目录</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">rootDir</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 用来控制输出目录结构 --outDir.</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">removeComments</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                </span><span style="color:#7B7F8B;">// 删除编译后的所有的注释</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noEmit</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                        </span><span style="color:#7B7F8B;">// 不生成输出文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">importHelpers</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                 </span><span style="color:#7B7F8B;">// 从 tslib 导入辅助工具函数</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">isolatedModules</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,               </span><span style="color:#7B7F8B;">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* 严格的类型检查选项 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">strict</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                        </span><span style="color:#7B7F8B;">// 启用所有严格类型检查选项</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noImplicitAny</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                 </span><span style="color:#7B7F8B;">// 在表达式和声明上有隐含的 any类型时报错</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">strictNullChecks</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,              </span><span style="color:#7B7F8B;">// 启用严格的 null 检查</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noImplicitThis</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                </span><span style="color:#7B7F8B;">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">alwaysStrict</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                  </span><span style="color:#7B7F8B;">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* 额外的检查 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noUnusedLocals</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                </span><span style="color:#7B7F8B;">// 有未使用的变量时，抛出错误</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noUnusedParameters</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,            </span><span style="color:#7B7F8B;">// 有未使用的参数时，抛出错误</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noImplicitReturns</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,             </span><span style="color:#7B7F8B;">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">noFallthroughCasesInSwitch</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,    </span><span style="color:#7B7F8B;">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* 模块解析选项 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">moduleResolution</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,            </span><span style="color:#7B7F8B;">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)。默认是classic</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">baseUrl</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 用于解析非相对模块名称的基目录</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">paths</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {},                           </span><span style="color:#7B7F8B;">// 模块名到基于 baseUrl 的路径映射的列表</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">rootDirs</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [],                        </span><span style="color:#7B7F8B;">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">typeRoots</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [],                       </span><span style="color:#7B7F8B;">// 包含类型声明的文件列表</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">types</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [],                           </span><span style="color:#7B7F8B;">// 需要包含的类型声明文件名列表</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">allowSyntheticDefaultImports</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,  </span><span style="color:#7B7F8B;">// 允许从没有设置默认导出的模块中默认导入。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* Source Map Options */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">sourceRoot</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                    </span><span style="color:#7B7F8B;">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">mapRoot</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,                       </span><span style="color:#7B7F8B;">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">inlineSourceMap</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,               </span><span style="color:#7B7F8B;">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">inlineSources</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,                 </span><span style="color:#7B7F8B;">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">/* 其他选项 */</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">experimentalDecorators</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,        </span><span style="color:#7B7F8B;">// 启用装饰器</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">emitDecoratorMetadata</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;">,         </span><span style="color:#7B7F8B;">// 为装饰器提供元数据的支持</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">strictFunctionTypes</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">           </span><span style="color:#7B7F8B;">// 禁用函数参数双向协变检查。</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">/* 指定编译文件或排除指定编译文件 */</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">include</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">src/**/*</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">exclude</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">node_modules</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">**/*.spec.ts</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">files</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">core.ts</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">sys.ts</span><span style="color:#DEE492;">&quot;</span></span>
<span class="line"><span style="color:#F6F6F4;">  ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 从另一个配置文件里继承配置</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">extends</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&quot;</span><span style="color:#E7EE98;">./config/base</span><span style="color:#DEE492;">&quot;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 让IDE在保存文件的时候根据tsconfig.json重新生成文件</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#97E2F2;">&quot;</span><span style="color:#97E1F1;">compileOnSave</span><span style="color:#97E2F2;">&quot;</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">true</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 基本选项 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;target&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;es5&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 指定 ECMAScript 目标版本: &#39;ES3&#39; (default), &#39;ES5&#39;, &#39;ES2015&#39;, &#39;ES2016&#39;, &#39;ES2017&#39;, or &#39;ESNEXT&#39;（&quot;ESNext&quot;表示最新的ES语法，包括还处在stage X阶段）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;commonjs&quot;</span><span style="color:#24292E;">,                  </span><span style="color:#6A737D;">// 指定使用模块: &#39;commonjs&#39;, &#39;amd&#39;, &#39;system&#39;, &#39;umd&#39; or &#39;es2015&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lib&quot;</span><span style="color:#24292E;">: [],                             </span><span style="color:#6A737D;">// 指定要包含在编译中的库文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 允许编译 javascript 文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;checkJs&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 报告 javascript 文件中的错误</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;jsx&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;preserve&quot;</span><span style="color:#24292E;">,                     </span><span style="color:#6A737D;">// 指定 jsx 代码的生成: &#39;preserve&#39;, &#39;react-native&#39;, or &#39;react&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;declaration&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                   </span><span style="color:#6A737D;">// 生成相应的 &#39;.d.ts&#39; 文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;sourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                     </span><span style="color:#6A737D;">// 生成相应的 &#39;.map&#39; 文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outFile&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 将输出文件合并为一个文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;outDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                        </span><span style="color:#6A737D;">// 指定输出目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDir&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 用来控制输出目录结构 --outDir.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;removeComments&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">// 删除编译后的所有的注释</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noEmit&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                        </span><span style="color:#6A737D;">// 不生成输出文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;importHelpers&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">// 从 tslib 导入辅助工具函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;isolatedModules&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,               </span><span style="color:#6A737D;">// 将每个文件做为单独的模块 （与 &#39;ts.transpileModule&#39; 类似）.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 严格的类型检查选项 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                        </span><span style="color:#6A737D;">// 启用所有严格类型检查选项</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitAny&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">// 在表达式和声明上有隐含的 any类型时报错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictNullChecks&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,              </span><span style="color:#6A737D;">// 启用严格的 null 检查</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitThis&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;alwaysStrict&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                  </span><span style="color:#6A737D;">// 以严格模式检查每个模块，并在每个文件里加入 &#39;use strict&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 额外的检查 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noUnusedLocals&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                </span><span style="color:#6A737D;">// 有未使用的变量时，抛出错误</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noUnusedParameters&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,            </span><span style="color:#6A737D;">// 有未使用的参数时，抛出错误</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noImplicitReturns&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,             </span><span style="color:#6A737D;">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;noFallthroughCasesInSwitch&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,    </span><span style="color:#6A737D;">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 模块解析选项 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;moduleResolution&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;node&quot;</span><span style="color:#24292E;">,            </span><span style="color:#6A737D;">// 选择模块解析策略： &#39;node&#39; (Node.js) or &#39;classic&#39; (TypeScript pre-1.6)。默认是classic</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 用于解析非相对模块名称的基目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {},                           </span><span style="color:#6A737D;">// 模块名到基于 baseUrl 的路径映射的列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;rootDirs&quot;</span><span style="color:#24292E;">: [],                        </span><span style="color:#6A737D;">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;typeRoots&quot;</span><span style="color:#24292E;">: [],                       </span><span style="color:#6A737D;">// 包含类型声明的文件列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;types&quot;</span><span style="color:#24292E;">: [],                           </span><span style="color:#6A737D;">// 需要包含的类型声明文件名列表</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;allowSyntheticDefaultImports&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// 允许从没有设置默认导出的模块中默认导入。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* Source Map Options */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;sourceRoot&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                    </span><span style="color:#6A737D;">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;mapRoot&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./&quot;</span><span style="color:#24292E;">,                       </span><span style="color:#6A737D;">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;inlineSourceMap&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,               </span><span style="color:#6A737D;">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;inlineSources&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,                 </span><span style="color:#6A737D;">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 其他选项 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;experimentalDecorators&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,        </span><span style="color:#6A737D;">// 启用装饰器</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;emitDecoratorMetadata&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,         </span><span style="color:#6A737D;">// 为装饰器提供元数据的支持</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;strictFunctionTypes&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">           </span><span style="color:#6A737D;">// 禁用函数参数双向协变检查。</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 指定编译文件或排除指定编译文件 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;include&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;src/**/*&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;exclude&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;node_modules&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;**/*.spec.ts&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;files&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;core.ts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;sys.ts&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从另一个配置文件里继承配置</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;extends&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./config/base&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 让IDE在保存文件的时候根据tsconfig.json重新生成文件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;compileOnSave&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 支持这个特性需要Visual Studio 2015， TypeScript1.8.4以上并且安装atom-typescript插件</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,58),e=[p];function t(c,r,y,F,i,E){return n(),a("div",null,e)}const q=s(l,[["render",t]]);export{d as __pageData,q as default};
